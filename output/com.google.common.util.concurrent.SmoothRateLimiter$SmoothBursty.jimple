public final class com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty extends com.google.common.util.concurrent.SmoothRateLimiter
{
    public final double maxBurstSeconds;

    public void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch, double)
    {
        com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty r0;
        com.google.common.util.concurrent.RateLimiter$SleepingStopwatch $r1;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty;

        $r1 := @parameter0: com.google.common.util.concurrent.RateLimiter$SleepingStopwatch;

        $d0 := @parameter1: double;

        specialinvoke r0.<com.google.common.util.concurrent.SmoothRateLimiter: void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,com.google.common.util.concurrent.SmoothRateLimiter$1)>($r1, null);

        r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: double maxBurstSeconds> = $d0;

        return;
    }

    public double coolDownIntervalMicros()
    {
        com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty r0;
        double d0;

        r0 := @this: com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty;

        d0 = r0.<com.google.common.util.concurrent.SmoothRateLimiter: double stableIntervalMicros>;

        return d0;
    }

    public void doSetRate(double, double)
    {
        com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty r0;
        byte $b0;
        double $d0, $d1, $d2;

        r0 := @this: com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d1 = r0.<com.google.common.util.concurrent.SmoothRateLimiter: double maxPermits>;

        $d2 = r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: double maxBurstSeconds>;

        $d0 = $d2 * $d0;

        r0.<com.google.common.util.concurrent.SmoothRateLimiter: double maxPermits> = $d0;

        $b0 = $d1 cmpl #Infinity;

        if $b0 != 0 goto label1;

        $d0 = r0.<com.google.common.util.concurrent.SmoothRateLimiter: double maxPermits>;

        r0.<com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits> = $d0;

        return;

     label1:
        $d0 = 0.0;

        $b0 = $d1 cmpl 0.0;

        if $b0 != 0 goto label2;

        goto label3;

     label2:
        $d0 = r0.<com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits>;

        $d2 = r0.<com.google.common.util.concurrent.SmoothRateLimiter: double maxPermits>;

        $d0 = $d0 * $d2;

        $d0 = $d0 / $d1;

     label3:
        r0.<com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits> = $d0;

        return;
    }

    public long storedPermitsToWaitTime(double, double)
    {
        com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty r0;
        double $d0, $d1;

        r0 := @this: com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        return 0L;
    }
}
