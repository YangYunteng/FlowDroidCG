public final class com.google.common.math.PairedStatsAccumulator extends java.lang.Object
{
    public double sumOfProductsOfDeltas;
    public final com.google.common.math.StatsAccumulator xStats;
    public final com.google.common.math.StatsAccumulator yStats;

    public void <init>()
    {
        com.google.common.math.PairedStatsAccumulator r0;
        com.google.common.math.StatsAccumulator $r1;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.google.common.math.StatsAccumulator;

        specialinvoke $r1.<com.google.common.math.StatsAccumulator: void <init>()>();

        r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats> = $r1;

        $r1 = new com.google.common.math.StatsAccumulator;

        specialinvoke $r1.<com.google.common.math.StatsAccumulator: void <init>()>();

        r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats> = $r1;

        r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas> = 0.0;

        return;
    }

    public static double ensureInUnitRange(double)
    {
        int $i1;
        byte $b0;
        double $d0;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpl 1.0;

        $i1 = (int) $b0;

        if $i1 < 0 goto label1;

        return 1.0;

     label1:
        $b0 = $d0 cmpg -1.0;

        $i1 = (int) $b0;

        if $i1 > 0 goto label2;

        return -1.0;

     label2:
        return $d0;
    }

    private double ensurePositive(double)
    {
        byte $b0;
        com.google.common.math.PairedStatsAccumulator r0;
        int $i1;
        double $d0;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpl 0.0;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        return $d0;

     label1:
        return 4.9E-324;
    }

    public void add(double, double)
    {
        com.google.common.math.PairedStatsAccumulator r0;
        long $l1;
        com.google.common.math.StatsAccumulator $r1;
        byte $b0;
        int $i2;
        double $d0, $d1, $d2, $d3;
        boolean $z0;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $r1 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        virtualinvoke $r1.<com.google.common.math.StatsAccumulator: void add(double)>($d1);

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d1);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        $l1 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: long count()>();

        $b0 = $l1 cmp 1L;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label2;

        $d2 = r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas>;

        $r1 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        $d3 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: double mean()>();

        $d1 = $d1 - $d3;

        $r1 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        $d3 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: double mean()>();

        $d3 = $d0 - $d3;

        $d1 = $d1 * $d3;

        $d1 = $d2 + $d1;

        r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas> = $d1;

        goto label2;

     label1:
        r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas> = #NaN;

     label2:
        $r1 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        virtualinvoke $r1.<com.google.common.math.StatsAccumulator: void add(double)>($d0);

        return;
    }

    public void addAll(com.google.common.math.PairedStats)
    {
        com.google.common.math.PairedStatsAccumulator r0;
        long $l0;
        com.google.common.math.StatsAccumulator $r2;
        byte $b1;
        com.google.common.math.Stats $r3;
        com.google.common.math.PairedStats $r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        $r1 := @parameter0: com.google.common.math.PairedStats;

        $l0 = virtualinvoke $r1.<com.google.common.math.PairedStats: long count()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        $r3 = virtualinvoke $r1.<com.google.common.math.PairedStats: com.google.common.math.Stats xStats()>();

        virtualinvoke $r2.<com.google.common.math.StatsAccumulator: void addAll(com.google.common.math.Stats)>($r3);

        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        $l0 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: long count()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        $d0 = virtualinvoke $r1.<com.google.common.math.PairedStats: double sumOfProductsOfDeltas()>();

        r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas> = $d0;

        goto label3;

     label2:
        $d0 = r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas>;

        $d1 = virtualinvoke $r1.<com.google.common.math.PairedStats: double sumOfProductsOfDeltas()>();

        $r3 = virtualinvoke $r1.<com.google.common.math.PairedStats: com.google.common.math.Stats xStats()>();

        $d2 = virtualinvoke $r3.<com.google.common.math.Stats: double mean()>();

        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        $d3 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: double mean()>();

        $d2 = $d2 - $d3;

        $r3 = virtualinvoke $r1.<com.google.common.math.PairedStats: com.google.common.math.Stats yStats()>();

        $d3 = virtualinvoke $r3.<com.google.common.math.Stats: double mean()>();

        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        $d4 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: double mean()>();

        $d3 = $d3 - $d4;

        $d2 = $d2 * $d3;

        $l0 = virtualinvoke $r1.<com.google.common.math.PairedStats: long count()>();

        $d3 = (double) $l0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        $d2 = $d2 * $d3;

        $d1 = $d1 + $d2;

        $d0 = $d0 + $d1;

        r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas> = $d0;

     label3:
        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        $r3 = virtualinvoke $r1.<com.google.common.math.PairedStats: com.google.common.math.Stats yStats()>();

        virtualinvoke $r2.<com.google.common.math.StatsAccumulator: void addAll(com.google.common.math.Stats)>($r3);

        return;
    }

    public long count()
    {
        com.google.common.math.PairedStatsAccumulator r0;
        long $l0;
        com.google.common.math.StatsAccumulator $r1;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        $r1 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        $l0 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: long count()>();

        return $l0;
    }

    public final com.google.common.math.LinearTransformation leastSquaresFit()
    {
        com.google.common.math.PairedStatsAccumulator r0;
        long $l0;
        com.google.common.math.StatsAccumulator $r2;
        com.google.common.math.LinearTransformation $r1;
        com.google.common.math.LinearTransformation$LinearTransformationBuilder $r3;
        byte $b1;
        int $i2;
        boolean $z0, $z1;
        double $d0, $d1, $d2;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        $l0 = virtualinvoke r0.<com.google.common.math.PairedStatsAccumulator: long count()>();

        $z0 = 1;

        $b1 = $l0 cmp 1L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        $d0 = r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas>;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 == 0 goto label3;

        $r1 = staticinvoke <com.google.common.math.LinearTransformation: com.google.common.math.LinearTransformation forNaN()>();

        return $r1;

     label3:
        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        $d0 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas()>();

        $b1 = $d0 cmpl 0.0;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label5;

        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        $d1 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas()>();

        $b1 = $d1 cmpl 0.0;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label4;

        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        $d1 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: double mean()>();

        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        $d2 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: double mean()>();

        $r3 = staticinvoke <com.google.common.math.LinearTransformation: com.google.common.math.LinearTransformation$LinearTransformationBuilder mapping(double,double)>($d1, $d2);

        $d1 = r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas>;

        $d0 = $d1 / $d0;

        $r1 = virtualinvoke $r3.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: com.google.common.math.LinearTransformation withSlope(double)>($d0);

        return $r1;

     label4:
        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        $d0 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: double mean()>();

        $r1 = staticinvoke <com.google.common.math.LinearTransformation: com.google.common.math.LinearTransformation horizontal(double)>($d0);

        return $r1;

     label5:
        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        $d0 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas()>();

        $b1 = $d0 cmpl 0.0;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label6;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        $d0 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: double mean()>();

        $r1 = staticinvoke <com.google.common.math.LinearTransformation: com.google.common.math.LinearTransformation vertical(double)>($d0);

        return $r1;
    }

    public final double pearsonsCorrelationCoefficient()
    {
        com.google.common.math.PairedStatsAccumulator r0;
        long $l0;
        com.google.common.math.StatsAccumulator $r1;
        byte $b1;
        int $i2;
        boolean $z0, $z1;
        double $d0, $d1;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        $l0 = virtualinvoke r0.<com.google.common.math.PairedStatsAccumulator: long count()>();

        $z0 = 1;

        $b1 = $l0 cmp 1L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        $d0 = r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas>;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 == 0 goto label3;

        return #NaN;

     label3:
        $r1 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        $d0 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas()>();

        $r1 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        $d1 = virtualinvoke $r1.<com.google.common.math.StatsAccumulator: double sumOfSquaresOfDeltas()>();

        $b1 = $d0 cmpl 0.0;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        $b1 = $d1 cmpl 0.0;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label6;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $d0 = $d0 * $d1;

        $d1 = specialinvoke r0.<com.google.common.math.PairedStatsAccumulator: double ensurePositive(double)>($d0);

        $d0 = r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas>;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <com.google.common.math.PairedStatsAccumulator: double ensureInUnitRange(double)>($d0);

        return $d0;
    }

    public double populationCovariance()
    {
        byte $b0;
        com.google.common.math.PairedStatsAccumulator r0;
        long $l1;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        $l1 = virtualinvoke r0.<com.google.common.math.PairedStatsAccumulator: long count()>();

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $d0 = r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas>;

        $l1 = virtualinvoke r0.<com.google.common.math.PairedStatsAccumulator: long count()>();

        $d1 = (double) $l1;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 / $d1;

        return $d0;
    }

    public final double sampleCovariance()
    {
        byte $b1;
        com.google.common.math.PairedStatsAccumulator r0;
        int $i2;
        long $l0;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        $l0 = virtualinvoke r0.<com.google.common.math.PairedStatsAccumulator: long count()>();

        $b1 = $l0 cmp 1L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $d0 = r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas>;

        $l0 = virtualinvoke r0.<com.google.common.math.PairedStatsAccumulator: long count()>();

        $l0 = $l0 - 1L;

        $d1 = (double) $l0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 / $d1;

        return $d0;
    }

    public com.google.common.math.PairedStats snapshot()
    {
        com.google.common.math.Stats $r3, $r4;
        com.google.common.math.PairedStatsAccumulator r0;
        com.google.common.math.PairedStats $r1;
        com.google.common.math.StatsAccumulator $r2;
        double $d0;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        $r1 = new com.google.common.math.PairedStats;

        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        $r3 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: com.google.common.math.Stats snapshot()>();

        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        $r4 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: com.google.common.math.Stats snapshot()>();

        $d0 = r0.<com.google.common.math.PairedStatsAccumulator: double sumOfProductsOfDeltas>;

        specialinvoke $r1.<com.google.common.math.PairedStats: void <init>(com.google.common.math.Stats,com.google.common.math.Stats,double)>($r3, $r4, $d0);

        return $r1;
    }

    public com.google.common.math.Stats xStats()
    {
        com.google.common.math.PairedStatsAccumulator r0;
        com.google.common.math.StatsAccumulator $r2;
        com.google.common.math.Stats $r1;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator xStats>;

        $r1 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: com.google.common.math.Stats snapshot()>();

        return $r1;
    }

    public com.google.common.math.Stats yStats()
    {
        com.google.common.math.PairedStatsAccumulator r0;
        com.google.common.math.StatsAccumulator $r2;
        com.google.common.math.Stats $r1;

        r0 := @this: com.google.common.math.PairedStatsAccumulator;

        $r2 = r0.<com.google.common.math.PairedStatsAccumulator: com.google.common.math.StatsAccumulator yStats>;

        $r1 = virtualinvoke $r2.<com.google.common.math.StatsAccumulator: com.google.common.math.Stats snapshot()>();

        return $r1;
    }
}
