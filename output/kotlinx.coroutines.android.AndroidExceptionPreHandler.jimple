public final class kotlinx.coroutines.android.AndroidExceptionPreHandler extends i.c.a implements kotlinx.coroutines.CoroutineExceptionHandler, i.f.a.a
{
    public static final i.h.g[] $$delegatedProperties;
    public final i.d preHandler$delegate;

    static void <clinit>()
    {
        i.h.g[] $r2;
        i.f.b.l $r0;
        i.h.c $r1;

        $r2 = newarray (i.h.g)[1];

        $r0 = new i.f.b.l;

        $r1 = staticinvoke <i.f.b.n: i.h.c a(java.lang.Class)>(class "Lkotlinx/coroutines/android/AndroidExceptionPreHandler;");

        specialinvoke $r0.<i.f.b.l: void <init>(i.h.e,java.lang.String,java.lang.String)>($r1, "preHandler", "getPreHandler()Ljava/lang/reflect/Method;");

        staticinvoke <i.f.b.n: i.h.h a(i.f.b.k)>($r0);

        $r2[0] = $r0;

        <kotlinx.coroutines.android.AndroidExceptionPreHandler: i.h.g[] $$delegatedProperties> = $r2;

        return;
    }

    public void <init>()
    {
        kotlinx.coroutines.CoroutineExceptionHandler$a $r2;
        i.d $r1;
        kotlinx.coroutines.android.AndroidExceptionPreHandler r0;

        r0 := @this: kotlinx.coroutines.android.AndroidExceptionPreHandler;

        $r2 = <kotlinx.coroutines.CoroutineExceptionHandler: kotlinx.coroutines.CoroutineExceptionHandler$a c>;

        specialinvoke r0.<i.c.a: void <init>(i.c.h$c)>($r2);

        $r1 = staticinvoke <i.e: i.d a(i.f.a.a)>(r0);

        r0.<kotlinx.coroutines.android.AndroidExceptionPreHandler: i.d preHandler$delegate> = $r1;

        return;
    }

    private final java.lang.reflect.Method getPreHandler()
    {
        i.h.g[] $r3;
        i.h.g $r4;
        java.lang.Object $r1;
        java.lang.reflect.Method $r5;
        i.d $r2;
        kotlinx.coroutines.android.AndroidExceptionPreHandler r0;

        r0 := @this: kotlinx.coroutines.android.AndroidExceptionPreHandler;

        $r2 = r0.<kotlinx.coroutines.android.AndroidExceptionPreHandler: i.d preHandler$delegate>;

        $r3 = <kotlinx.coroutines.android.AndroidExceptionPreHandler: i.h.g[] $$delegatedProperties>;

        $r4 = $r3[0];

        $r1 = interfaceinvoke $r2.<i.d: java.lang.Object getValue()>();

        $r5 = (java.lang.reflect.Method) $r1;

        return $r5;
    }

    public void handleException(i.c.h, java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        java.lang.Object[] $r6;
        i.c.h $r2;
        java.lang.Thread$UncaughtExceptionHandler $r4;
        java.lang.Thread $r3;
        int $i0;
        java.lang.Object $r7;
        java.lang.reflect.Method $r5;
        kotlinx.coroutines.android.AndroidExceptionPreHandler r0;
        boolean $z0;

        r0 := @this: kotlinx.coroutines.android.AndroidExceptionPreHandler;

        $r2 := @parameter0: i.c.h;

        $r1 := @parameter1: java.lang.Throwable;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r2, "context");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "exception");

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 28 goto label1;

        staticinvoke <i.f.b.i: void a(java.lang.Object,java.lang.String)>($r3, "thread");

        $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r4.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r3, $r1);

        return;

     label1:
        $r5 = specialinvoke r0.<kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.reflect.Method getPreHandler()>();

        if $r5 == null goto label2;

        $r6 = newarray (java.lang.Object)[0];

        $r7 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r6);

        goto label3;

     label2:
        $r7 = null;

     label3:
        $z0 = $r7 instanceof java.lang.Thread$UncaughtExceptionHandler;

        if $z0 != 0 goto label4;

        $r7 = null;

     label4:
        $r4 = (java.lang.Thread$UncaughtExceptionHandler) $r7;

        if $r4 == null goto label5;

        interfaceinvoke $r4.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r3, $r1);

     label5:
        return;
    }

    public volatile java.lang.Object invoke()
    {
        java.lang.reflect.Method $r1;
        kotlinx.coroutines.android.AndroidExceptionPreHandler r0;

        r0 := @this: kotlinx.coroutines.android.AndroidExceptionPreHandler;

        $r1 = virtualinvoke r0.<kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.reflect.Method invoke()>();

        return $r1;
    }

    public java.lang.reflect.Method invoke()
    {
        java.lang.Throwable $r2;
        java.lang.Class[] $r1;
        int $i0;
        java.lang.Class $r3;
        java.lang.reflect.Method $r4;
        kotlinx.coroutines.android.AndroidExceptionPreHandler r0;
        boolean $z0, $z1;

        r0 := @this: kotlinx.coroutines.android.AndroidExceptionPreHandler;

        $r3 = class "Ljava/lang/Thread;";

        $z0 = 0;

     label1:
        $r1 = newarray (java.lang.Class)[0];

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getUncaughtExceptionPreHandler", $r1);

        staticinvoke <i.f.b.i: void a(java.lang.Object,java.lang.String)>($r4, "it");

        $i0 = virtualinvoke $r4.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

     label2:
        if $z1 == 0 goto label5;

     label3:
        $i0 = virtualinvoke $r4.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

     label4:
        if $z1 == 0 goto label5;

        $z0 = 1;

     label5:
        if $z0 == 0 goto label7;

        return $r4;

     label6:
        $r2 := @caughtexception;

     label7:
        return null;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }
}
