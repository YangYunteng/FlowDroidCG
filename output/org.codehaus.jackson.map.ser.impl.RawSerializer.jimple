public class org.codehaus.jackson.map.ser.impl.RawSerializer extends org.codehaus.jackson.map.ser.SerializerBase
{

    public void <init>(java.lang.Class)
    {
        org.codehaus.jackson.map.ser.impl.RawSerializer r0;
        java.lang.Class $r1;

        r0 := @this: org.codehaus.jackson.map.ser.impl.RawSerializer;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void <init>(java.lang.Class,boolean)>($r1, 0);

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r3;
        org.codehaus.jackson.map.ser.impl.RawSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.map.ser.impl.RawSerializer;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("string", 1);

        return $r1;
    }

    public void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.ser.impl.RawSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r4;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.map.ser.impl.RawSerializer;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r3 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeRawValue(java.lang.String)>($r3);

        return;
    }

    public void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.TypeSerializer $r4;
        org.codehaus.jackson.map.ser.impl.RawSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.Object $r1;

        r0 := @this: org.codehaus.jackson.map.ser.impl.RawSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.RawSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        return;
    }
}
