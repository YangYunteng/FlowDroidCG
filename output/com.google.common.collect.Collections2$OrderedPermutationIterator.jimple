public final class com.google.common.collect.Collections2$OrderedPermutationIterator extends com.google.common.collect.AbstractIterator
{
    public final java.util.Comparator comparator;
    public java.util.List nextPermutation;

    public void <init>(java.util.List, java.util.Comparator)
    {
        java.util.List $r3;
        java.util.Comparator $r1;
        com.google.common.collect.Collections2$OrderedPermutationIterator r0;
        java.util.ArrayList $r2;

        r0 := @this: com.google.common.collect.Collections2$OrderedPermutationIterator;

        $r3 := @parameter0: java.util.List;

        $r1 := @parameter1: java.util.Comparator;

        specialinvoke r0.<com.google.common.collect.AbstractIterator: void <init>()>();

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r3);

        r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation> = $r2;

        r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.Comparator comparator> = $r1;

        return;
    }

    public void calculateNextPermutation()
    {
        java.util.List $r1;
        int $i0, $i1;
        com.google.common.collect.Collections2$OrderedPermutationIterator r0;

        r0 := @this: com.google.common.collect.Collections2$OrderedPermutationIterator;

        $i0 = virtualinvoke r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: int findNextJ()>();

        $i1 = -1;

        if $i0 != $i1 goto label1;

        r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation> = null;

        return;

     label1:
        $i1 = virtualinvoke r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: int findNextL(int)>($i0);

        $r1 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation>;

        staticinvoke <java.util.Collections: void swap(java.util.List,int,int)>($r1, $i0, $i1);

        $r1 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r1 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation>;

        $i0 = $i0 + 1;

        $r1 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r1);

        return;
    }

    public volatile java.lang.Object computeNext()
    {
        java.util.List $r1;
        com.google.common.collect.Collections2$OrderedPermutationIterator r0;

        r0 := @this: com.google.common.collect.Collections2$OrderedPermutationIterator;

        $r1 = virtualinvoke r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List computeNext()>();

        return $r1;
    }

    public java.util.List computeNext()
    {
        java.util.List $r1;
        com.google.common.collect.ImmutableList $r3;
        java.lang.Object $r2;
        com.google.common.collect.Collections2$OrderedPermutationIterator r0;

        r0 := @this: com.google.common.collect.Collections2$OrderedPermutationIterator;

        $r1 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.google.common.collect.AbstractIterator: java.lang.Object endOfData()>();

        $r1 = (java.util.List) $r2;

        return $r1;

     label1:
        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r1);

        virtualinvoke r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: void calculateNextPermutation()>();

        return $r3;
    }

    public int findNextJ()
    {
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r3, $r4;
        java.util.Comparator $r2;
        com.google.common.collect.Collections2$OrderedPermutationIterator r0;

        r0 := @this: com.google.common.collect.Collections2$OrderedPermutationIterator;

        $r1 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i0 = -2;

        $i1 = $i1 + $i0;

     label1:
        if $i1 < 0 goto label3;

        $r2 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.Comparator comparator>;

        $r1 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation>;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $r1 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation>;

        $i0 = $i1 + 1;

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $i0 >= 0 goto label2;

        return $i1;

     label2:
        $i0 = -1;

        $i1 = $i1 + $i0;

        goto label1;

     label3:
        $i1 = -1;

        return $i1;
    }

    public int findNextL(int)
    {
        java.lang.AssertionError $r5;
        java.util.List $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2, $r4;
        java.util.Comparator $r3;
        com.google.common.collect.Collections2$OrderedPermutationIterator r0;

        r0 := @this: com.google.common.collect.Collections2$OrderedPermutationIterator;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r1 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = -1;

        $i1 = $i1 + $i2;

     label1:
        if $i1 <= $i0 goto label3;

        $r3 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.Comparator comparator>;

        $r1 = r0.<com.google.common.collect.Collections2$OrderedPermutationIterator: java.util.List nextPermutation>;

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $i2 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $i2 >= 0 goto label2;

        return $i1;

     label2:
        $i2 = -1;

        $i1 = $i1 + $i2;

        goto label1;

     label3:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("this statement should be unreachable");

        goto label4;

     label4:
        throw $r5;
    }
}
