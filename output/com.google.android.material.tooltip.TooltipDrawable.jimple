public class com.google.android.material.tooltip.TooltipDrawable extends com.google.android.material.shape.MaterialShapeDrawable implements com.google.android.material.internal.TextDrawableHelper$TextDrawableDelegate
{
    public static final int DEFAULT_STYLE;
    public static final int DEFAULT_THEME_ATTR;
    public int arrowSize;
    public final android.view.View$OnLayoutChangeListener attachedViewLayoutChangeListener;
    public final android.content.Context context;
    public final android.graphics.Rect displayFrame;
    public final android.graphics.Paint$FontMetrics fontMetrics;
    public int layoutMargin;
    public int locationOnScreenX;
    public int minHeight;
    public int minWidth;
    public int padding;
    public java.lang.CharSequence text;
    public final com.google.android.material.internal.TextDrawableHelper textDrawableHelper;

    static void <clinit>()
    {
        int $i0;

        $i0 = <com.google.android.material.R$style: int Widget_MaterialComponents_Tooltip>;

        <com.google.android.material.tooltip.TooltipDrawable: int DEFAULT_STYLE> = $i0;

        $i0 = <com.google.android.material.R$attr: int tooltipStyle>;

        <com.google.android.material.tooltip.TooltipDrawable: int DEFAULT_THEME_ATTR> = $i0;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.content.Context $r1;
        android.graphics.Rect $r6;
        com.google.android.material.internal.TextDrawableHelper $r4;
        android.util.DisplayMetrics $r9;
        android.graphics.Paint$Align $r10;
        com.google.android.material.tooltip.TooltipDrawable r0;
        android.util.AttributeSet $r2;
        android.graphics.Paint$FontMetrics $r3;
        android.text.TextPaint $r7;
        int $i0, $i1;
        float $f0;
        com.google.android.material.tooltip.TooltipDrawable$1 $r5;
        android.content.res.Resources $r8;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        specialinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void <init>(android.content.Context,android.util.AttributeSet,int,int)>($r1, $r2, $i0, $i1);

        $r3 = new android.graphics.Paint$FontMetrics;

        specialinvoke $r3.<android.graphics.Paint$FontMetrics: void <init>()>();

        r0.<com.google.android.material.tooltip.TooltipDrawable: android.graphics.Paint$FontMetrics fontMetrics> = $r3;

        $r4 = new com.google.android.material.internal.TextDrawableHelper;

        specialinvoke $r4.<com.google.android.material.internal.TextDrawableHelper: void <init>(com.google.android.material.internal.TextDrawableHelper$TextDrawableDelegate)>(r0);

        r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper> = $r4;

        $r5 = new com.google.android.material.tooltip.TooltipDrawable$1;

        specialinvoke $r5.<com.google.android.material.tooltip.TooltipDrawable$1: void <init>(com.google.android.material.tooltip.TooltipDrawable)>(r0);

        r0.<com.google.android.material.tooltip.TooltipDrawable: android.view.View$OnLayoutChangeListener attachedViewLayoutChangeListener> = $r5;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r0.<com.google.android.material.tooltip.TooltipDrawable: android.graphics.Rect displayFrame> = $r6;

        r0.<com.google.android.material.tooltip.TooltipDrawable: android.content.Context context> = $r1;

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r7 = virtualinvoke $r4.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        $r8 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r9 = virtualinvoke $r8.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r9.<android.util.DisplayMetrics: float density>;

        $r7.<android.text.TextPaint: float density> = $f0;

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r7 = virtualinvoke $r4.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        $r10 = <android.graphics.Paint$Align: android.graphics.Paint$Align CENTER>;

        virtualinvoke $r7.<android.text.TextPaint: void setTextAlign(android.graphics.Paint$Align)>($r10);

        return;
    }

    public static void access$000(com.google.android.material.tooltip.TooltipDrawable, android.view.View)
    {
        android.view.View $r1;
        com.google.android.material.tooltip.TooltipDrawable $r0;

        $r0 := @parameter0: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter1: android.view.View;

        specialinvoke $r0.<com.google.android.material.tooltip.TooltipDrawable: void updateLocationOnScreen(android.view.View)>($r1);

        return;
    }

    private float calculatePointerOffset()
    {
        android.graphics.Rect $r1;
        com.google.android.material.tooltip.TooltipDrawable r0;
        int $i0, $i1;
        float $f0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.graphics.Rect displayFrame>;

        $i0 = $r1.<android.graphics.Rect: int right>;

        $r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $i1 = $r1.<android.graphics.Rect: int right>;

        $i0 = $i0 - $i1;

        $i1 = r0.<com.google.android.material.tooltip.TooltipDrawable: int locationOnScreenX>;

        $i0 = $i0 - $i1;

        $i1 = r0.<com.google.android.material.tooltip.TooltipDrawable: int layoutMargin>;

        $i0 = $i0 - $i1;

        if $i0 >= 0 goto label2;

        $r1 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.graphics.Rect displayFrame>;

        $i0 = $r1.<android.graphics.Rect: int right>;

        $r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $i1 = $r1.<android.graphics.Rect: int right>;

        $i0 = $i0 - $i1;

        $i1 = r0.<com.google.android.material.tooltip.TooltipDrawable: int locationOnScreenX>;

        $i0 = $i0 - $i1;

        $i1 = r0.<com.google.android.material.tooltip.TooltipDrawable: int layoutMargin>;

        $i0 = $i0 - $i1;

     label1:
        $f0 = (float) $i0;

        return $f0;

     label2:
        $r1 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.graphics.Rect displayFrame>;

        $i0 = $r1.<android.graphics.Rect: int left>;

        $r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $i1 = $r1.<android.graphics.Rect: int left>;

        $i0 = $i0 - $i1;

        $i1 = r0.<com.google.android.material.tooltip.TooltipDrawable: int locationOnScreenX>;

        $i0 = $i0 - $i1;

        $i1 = r0.<com.google.android.material.tooltip.TooltipDrawable: int layoutMargin>;

        $i0 = $i0 + $i1;

        if $i0 <= 0 goto label3;

        $r1 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.graphics.Rect displayFrame>;

        $i0 = $r1.<android.graphics.Rect: int left>;

        $r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $i1 = $r1.<android.graphics.Rect: int left>;

        $i0 = $i0 - $i1;

        $i1 = r0.<com.google.android.material.tooltip.TooltipDrawable: int locationOnScreenX>;

        $i0 = $i0 - $i1;

        $i1 = r0.<com.google.android.material.tooltip.TooltipDrawable: int layoutMargin>;

        $i0 = $i0 + $i1;

        goto label1;

     label3:
        return 0.0F;
    }

    private float calculateTextCenterFromBaseline()
    {
        com.google.android.material.tooltip.TooltipDrawable r0;
        android.graphics.Paint$FontMetrics $r3;
        android.text.TextPaint $r1;
        com.google.android.material.internal.TextDrawableHelper $r2;
        float $f0, $f1;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r2 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r1 = virtualinvoke $r2.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        $r3 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.graphics.Paint$FontMetrics fontMetrics>;

        virtualinvoke $r1.<android.text.TextPaint: float getFontMetrics(android.graphics.Paint$FontMetrics)>($r3);

        $r3 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.graphics.Paint$FontMetrics fontMetrics>;

        $f0 = $r3.<android.graphics.Paint$FontMetrics: float descent>;

        $f1 = $r3.<android.graphics.Paint$FontMetrics: float ascent>;

        $f0 = $f0 + $f1;

        $f0 = $f0 / 2.0F;

        return $f0;
    }

    private float calculateTextOriginAndAlignment(android.graphics.Rect)
    {
        android.graphics.Rect $r1;
        com.google.android.material.tooltip.TooltipDrawable r0;
        int $i0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter0: android.graphics.Rect;

        $i0 = virtualinvoke $r1.<android.graphics.Rect: int centerY()>();

        $f0 = (float) $i0;

        $f1 = specialinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: float calculateTextCenterFromBaseline()>();

        $f0 = $f0 - $f1;

        return $f0;
    }

    public static com.google.android.material.tooltip.TooltipDrawable create(android.content.Context)
    {
        android.content.Context $r1;
        com.google.android.material.tooltip.TooltipDrawable $r0;
        int $i0, $i1;

        $r1 := @parameter0: android.content.Context;

        $i0 = <com.google.android.material.tooltip.TooltipDrawable: int DEFAULT_THEME_ATTR>;

        $i1 = <com.google.android.material.tooltip.TooltipDrawable: int DEFAULT_STYLE>;

        $r0 = staticinvoke <com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.tooltip.TooltipDrawable createFromAttributes(android.content.Context,android.util.AttributeSet,int,int)>($r1, null, $i0, $i1);

        return $r0;
    }

    public static com.google.android.material.tooltip.TooltipDrawable createFromAttributes(android.content.Context, android.util.AttributeSet)
    {
        android.content.Context $r2;
        com.google.android.material.tooltip.TooltipDrawable $r1;
        android.util.AttributeSet $r0;
        int $i0, $i1;

        $r2 := @parameter0: android.content.Context;

        $r0 := @parameter1: android.util.AttributeSet;

        $i0 = <com.google.android.material.tooltip.TooltipDrawable: int DEFAULT_THEME_ATTR>;

        $i1 = <com.google.android.material.tooltip.TooltipDrawable: int DEFAULT_STYLE>;

        $r1 = staticinvoke <com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.tooltip.TooltipDrawable createFromAttributes(android.content.Context,android.util.AttributeSet,int,int)>($r2, $r0, $i0, $i1);

        return $r1;
    }

    public static com.google.android.material.tooltip.TooltipDrawable createFromAttributes(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.content.Context $r0;
        com.google.android.material.tooltip.TooltipDrawable $r2;
        android.util.AttributeSet $r1;
        int $i0, $i1;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 = new com.google.android.material.tooltip.TooltipDrawable;

        specialinvoke $r2.<com.google.android.material.tooltip.TooltipDrawable: void <init>(android.content.Context,android.util.AttributeSet,int,int)>($r0, $r1, $i0, $i1);

        specialinvoke $r2.<com.google.android.material.tooltip.TooltipDrawable: void loadFromAttributes(android.util.AttributeSet,int,int)>($r1, $i0, $i1);

        return $r2;
    }

    private com.google.android.material.shape.EdgeTreatment createMarkerEdge()
    {
        android.graphics.Rect $r1;
        com.google.android.material.tooltip.TooltipDrawable r0;
        com.google.android.material.shape.OffsetEdgeTreatment $r2;
        int $i0;
        float $f0, $f1, $f2;
        com.google.android.material.shape.MarkerEdgeTreatment $r3;
        double $d0, $d1, $d2;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $f0 = specialinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: float calculatePointerOffset()>();

        $f0 = neg $f0;

        $r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $i0 = virtualinvoke $r1.<android.graphics.Rect: int width()>();

        $d0 = (double) $i0;

        $i0 = r0.<com.google.android.material.tooltip.TooltipDrawable: int arrowSize>;

        $d1 = (double) $i0;

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d1 = $d1 * $d2;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 - $d1;

        $f1 = (float) $d0;

        $f1 = $f1 / 2.0F;

        $f2 = neg $f1;

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f2);

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        $r2 = new com.google.android.material.shape.OffsetEdgeTreatment;

        $r3 = new com.google.android.material.shape.MarkerEdgeTreatment;

        $i0 = r0.<com.google.android.material.tooltip.TooltipDrawable: int arrowSize>;

        $f1 = (float) $i0;

        specialinvoke $r3.<com.google.android.material.shape.MarkerEdgeTreatment: void <init>(float)>($f1);

        specialinvoke $r2.<com.google.android.material.shape.OffsetEdgeTreatment: void <init>(com.google.android.material.shape.EdgeTreatment,float)>($r3, $f0);

        return $r2;
    }

    private void drawText(android.graphics.Canvas)
    {
        android.graphics.Rect $r3;
        android.content.Context $r8;
        java.lang.CharSequence $r2;
        com.google.android.material.internal.TextDrawableHelper $r4;
        com.google.android.material.tooltip.TooltipDrawable r0;
        int[] $r7;
        android.text.TextPaint $r6;
        int $i0, $i1, $i2;
        float $f0, $f1;
        android.graphics.Canvas $r1;
        com.google.android.material.resources.TextAppearance $r5;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<com.google.android.material.tooltip.TooltipDrawable: java.lang.CharSequence text>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $f0 = specialinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: float calculateTextOriginAndAlignment(android.graphics.Rect)>($r3);

        $i0 = (int) $f0;

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r5 = virtualinvoke $r4.<com.google.android.material.internal.TextDrawableHelper: com.google.android.material.resources.TextAppearance getTextAppearance()>();

        if $r5 == null goto label2;

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r6 = virtualinvoke $r4.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        $r7 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        $r6.<android.text.TextPaint: int[] drawableState> = $r7;

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r8 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.content.Context context>;

        virtualinvoke $r4.<com.google.android.material.internal.TextDrawableHelper: void updateTextPaintDrawState(android.content.Context)>($r8);

     label2:
        $r2 = r0.<com.google.android.material.tooltip.TooltipDrawable: java.lang.CharSequence text>;

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i2 = virtualinvoke $r3.<android.graphics.Rect: int centerX()>();

        $f0 = (float) $i2;

        $f1 = (float) $i0;

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r6 = virtualinvoke $r4.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        virtualinvoke $r1.<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>($r2, 0, $i1, $f0, $f1, $r6);

        return;
    }

    private float getTextWidth()
    {
        com.google.android.material.tooltip.TooltipDrawable r0;
        java.lang.CharSequence $r2;
        com.google.android.material.internal.TextDrawableHelper $r1;
        float $f0;
        java.lang.String $r3;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r2 = r0.<com.google.android.material.tooltip.TooltipDrawable: java.lang.CharSequence text>;

        if $r2 != null goto label1;

        return 0.0F;

     label1:
        $r1 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        $f0 = virtualinvoke $r1.<com.google.android.material.internal.TextDrawableHelper: float getTextWidth(java.lang.String)>($r3);

        return $f0;
    }

    private void loadFromAttributes(android.util.AttributeSet, int, int)
    {
        android.content.Context $r4;
        android.content.res.TypedArray $r5;
        android.content.res.ColorStateList $r14;
        com.google.android.material.tooltip.TooltipDrawable r0;
        android.util.AttributeSet $r3;
        int[] $r1, $r2;
        int $i0, $i1;
        com.google.android.material.resources.TextAppearance $r11;
        java.lang.String $r13;
        java.lang.CharSequence $r10;
        com.google.android.material.shape.ShapeAppearanceModel $r7;
        com.google.android.material.shape.ShapeAppearanceModel$Builder $r8;
        com.google.android.material.shape.EdgeTreatment $r9;
        java.lang.Class $r12;
        android.content.res.Resources $r6;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r3 := @parameter0: android.util.AttributeSet;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.content.Context context>;

        $r1 = <com.google.android.material.R$styleable: int[] Tooltip>;

        $r2 = newarray (int)[0];

        $r5 = staticinvoke <com.google.android.material.internal.ThemeEnforcement: android.content.res.TypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int,int[])>($r4, $r3, $r1, $i0, $i1, $r2);

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.content.Context context>;

        $r6 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = <com.google.android.material.R$dimen: int mtrl_tooltip_arrowSize>;

        $i0 = virtualinvoke $r6.<android.content.res.Resources: int getDimensionPixelSize(int)>($i0);

        r0.<com.google.android.material.tooltip.TooltipDrawable: int arrowSize> = $i0;

        $r7 = virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()>();

        $r8 = virtualinvoke $r7.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel$Builder toBuilder()>();

        $r9 = specialinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.shape.EdgeTreatment createMarkerEdge()>();

        $r8 = virtualinvoke $r8.<com.google.android.material.shape.ShapeAppearanceModel$Builder: com.google.android.material.shape.ShapeAppearanceModel$Builder setBottomEdge(com.google.android.material.shape.EdgeTreatment)>($r9);

        $r7 = virtualinvoke $r8.<com.google.android.material.shape.ShapeAppearanceModel$Builder: com.google.android.material.shape.ShapeAppearanceModel build()>();

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)>($r7);

        $i0 = <com.google.android.material.R$styleable: int Tooltip_android_text>;

        $r10 = virtualinvoke $r5.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>($i0);

        virtualinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: void setText(java.lang.CharSequence)>($r10);

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Tooltip_android_textAppearance>;

        $r11 = staticinvoke <com.google.android.material.resources.MaterialResources: com.google.android.material.resources.TextAppearance getTextAppearance(android.content.Context,android.content.res.TypedArray,int)>($r4, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: void setTextAppearance(com.google.android.material.resources.TextAppearance)>($r11);

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$attr: int colorOnBackground>;

        $r12 = class "Lcom/google/android/material/tooltip/TooltipDrawable;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getCanonicalName()>();

        $i0 = staticinvoke <com.google.android.material.color.MaterialColors: int getColor(android.content.Context,int,java.lang.String)>($r4, $i0, $r13);

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.content.Context context>;

        $r12 = class "Lcom/google/android/material/tooltip/TooltipDrawable;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getCanonicalName()>();

        $i1 = staticinvoke <com.google.android.material.color.MaterialColors: int getColor(android.content.Context,int,java.lang.String)>($r4, 16842801, $r13);

        $i1 = staticinvoke <b.i.c.e: int c(int,int)>($i1, 229);

        $i0 = staticinvoke <b.i.c.e: int c(int,int)>($i0, 153);

        $i0 = staticinvoke <com.google.android.material.color.MaterialColors: int layer(int,int)>($i1, $i0);

        $i1 = <com.google.android.material.R$styleable: int Tooltip_backgroundTint>;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getColor(int,int)>($i1, $i0);

        $r14 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>($i0);

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void setFillColor(android.content.res.ColorStateList)>($r14);

        $r4 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$attr: int colorSurface>;

        $r12 = class "Lcom/google/android/material/tooltip/TooltipDrawable;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getCanonicalName()>();

        $i0 = staticinvoke <com.google.android.material.color.MaterialColors: int getColor(android.content.Context,int,java.lang.String)>($r4, $i0, $r13);

        $r14 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>($i0);

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void setStrokeColor(android.content.res.ColorStateList)>($r14);

        $i0 = <com.google.android.material.R$styleable: int Tooltip_android_padding>;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i0, 0);

        r0.<com.google.android.material.tooltip.TooltipDrawable: int padding> = $i0;

        $i0 = <com.google.android.material.R$styleable: int Tooltip_android_minWidth>;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i0, 0);

        r0.<com.google.android.material.tooltip.TooltipDrawable: int minWidth> = $i0;

        $i0 = <com.google.android.material.R$styleable: int Tooltip_android_minHeight>;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i0, 0);

        r0.<com.google.android.material.tooltip.TooltipDrawable: int minHeight> = $i0;

        $i0 = <com.google.android.material.R$styleable: int Tooltip_android_layout_margin>;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i0, 0);

        r0.<com.google.android.material.tooltip.TooltipDrawable: int layoutMargin> = $i0;

        virtualinvoke $r5.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    private void updateLocationOnScreen(android.view.View)
    {
        android.graphics.Rect $r3;
        com.google.android.material.tooltip.TooltipDrawable r0;
        int[] $r2;
        int $i0;
        android.view.View $r1;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter0: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i0 = $r2[0];

        r0.<com.google.android.material.tooltip.TooltipDrawable: int locationOnScreenX> = $i0;

        $r3 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.graphics.Rect displayFrame>;

        virtualinvoke $r1.<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>($r3);

        return;
    }

    public void detachView(android.view.View)
    {
        android.view.View $r1;
        android.view.View$OnLayoutChangeListener $r2;
        com.google.android.material.tooltip.TooltipDrawable r0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter0: android.view.View;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.view.View$OnLayoutChangeListener attachedViewLayoutChangeListener>;

        virtualinvoke $r1.<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>($r2);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        com.google.android.material.tooltip.TooltipDrawable r0;
        int $i0;
        float $f0, $f1;
        android.graphics.Canvas $r1;
        double $d0, $d1;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        $f0 = specialinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: float calculatePointerOffset()>();

        $i0 = r0.<com.google.android.material.tooltip.TooltipDrawable: int arrowSize>;

        $d0 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 * $d1;

        $i0 = r0.<com.google.android.material.tooltip.TooltipDrawable: int arrowSize>;

        $d1 = (double) $i0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 - $d1;

        $d0 = neg $d0;

        $f1 = (float) $d0;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        specialinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void draw(android.graphics.Canvas)>($r1);

        specialinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: void drawText(android.graphics.Canvas)>($r1);

        virtualinvoke $r1.<android.graphics.Canvas: void restore()>();

        return;
    }

    public int getIntrinsicHeight()
    {
        com.google.android.material.tooltip.TooltipDrawable r0;
        android.text.TextPaint $r2;
        com.google.android.material.internal.TextDrawableHelper $r1;
        int $i0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r2 = virtualinvoke $r1.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        $f0 = virtualinvoke $r2.<android.text.TextPaint: float getTextSize()>();

        $i0 = r0.<com.google.android.material.tooltip.TooltipDrawable: int minHeight>;

        $f1 = (float) $i0;

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        $i0 = (int) $f0;

        return $i0;
    }

    public int getIntrinsicWidth()
    {
        com.google.android.material.tooltip.TooltipDrawable r0;
        int $i0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $i0 = r0.<com.google.android.material.tooltip.TooltipDrawable: int padding>;

        $i0 = $i0 * 2;

        $f0 = (float) $i0;

        $f1 = specialinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: float getTextWidth()>();

        $f0 = $f0 + $f1;

        $i0 = r0.<com.google.android.material.tooltip.TooltipDrawable: int minWidth>;

        $f1 = (float) $i0;

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        $i0 = (int) $f0;

        return $i0;
    }

    public int getLayoutMargin()
    {
        int i0;
        com.google.android.material.tooltip.TooltipDrawable r0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        i0 = r0.<com.google.android.material.tooltip.TooltipDrawable: int layoutMargin>;

        return i0;
    }

    public int getMinHeight()
    {
        int i0;
        com.google.android.material.tooltip.TooltipDrawable r0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        i0 = r0.<com.google.android.material.tooltip.TooltipDrawable: int minHeight>;

        return i0;
    }

    public int getMinWidth()
    {
        int i0;
        com.google.android.material.tooltip.TooltipDrawable r0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        i0 = r0.<com.google.android.material.tooltip.TooltipDrawable: int minWidth>;

        return i0;
    }

    public java.lang.CharSequence getText()
    {
        com.google.android.material.tooltip.TooltipDrawable r0;
        java.lang.CharSequence r1;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        r1 = r0.<com.google.android.material.tooltip.TooltipDrawable: java.lang.CharSequence text>;

        return r1;
    }

    public com.google.android.material.resources.TextAppearance getTextAppearance()
    {
        com.google.android.material.internal.TextDrawableHelper $r2;
        com.google.android.material.tooltip.TooltipDrawable r0;
        com.google.android.material.resources.TextAppearance $r1;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r2 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r1 = virtualinvoke $r2.<com.google.android.material.internal.TextDrawableHelper: com.google.android.material.resources.TextAppearance getTextAppearance()>();

        return $r1;
    }

    public int getTextPadding()
    {
        int i0;
        com.google.android.material.tooltip.TooltipDrawable r0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        i0 = r0.<com.google.android.material.tooltip.TooltipDrawable: int padding>;

        return i0;
    }

    public void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.Rect $r1;
        com.google.android.material.tooltip.TooltipDrawable r0;
        com.google.android.material.shape.EdgeTreatment $r4;
        com.google.android.material.shape.ShapeAppearanceModel $r2;
        com.google.android.material.shape.ShapeAppearanceModel$Builder $r3;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void onBoundsChange(android.graphics.Rect)>($r1);

        $r2 = virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()>();

        $r3 = virtualinvoke $r2.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel$Builder toBuilder()>();

        $r4 = specialinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.shape.EdgeTreatment createMarkerEdge()>();

        $r3 = virtualinvoke $r3.<com.google.android.material.shape.ShapeAppearanceModel$Builder: com.google.android.material.shape.ShapeAppearanceModel$Builder setBottomEdge(com.google.android.material.shape.EdgeTreatment)>($r4);

        $r2 = virtualinvoke $r3.<com.google.android.material.shape.ShapeAppearanceModel$Builder: com.google.android.material.shape.ShapeAppearanceModel build()>();

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)>($r2);

        return;
    }

    public boolean onStateChange(int[])
    {
        com.google.android.material.tooltip.TooltipDrawable r0;
        int[] $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter0: int[];

        $z0 = specialinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: boolean onStateChange(int[])>($r1);

        return $z0;
    }

    public void onTextSizeChange()
    {
        com.google.android.material.tooltip.TooltipDrawable r0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        return;
    }

    public void setLayoutMargin(int)
    {
        int $i0;
        com.google.android.material.tooltip.TooltipDrawable r0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $i0 := @parameter0: int;

        r0.<com.google.android.material.tooltip.TooltipDrawable: int layoutMargin> = $i0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        return;
    }

    public void setMinHeight(int)
    {
        int $i0;
        com.google.android.material.tooltip.TooltipDrawable r0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $i0 := @parameter0: int;

        r0.<com.google.android.material.tooltip.TooltipDrawable: int minHeight> = $i0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        return;
    }

    public void setMinWidth(int)
    {
        int $i0;
        com.google.android.material.tooltip.TooltipDrawable r0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $i0 := @parameter0: int;

        r0.<com.google.android.material.tooltip.TooltipDrawable: int minWidth> = $i0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        return;
    }

    public void setRelativeToView(android.view.View)
    {
        android.view.View $r1;
        android.view.View$OnLayoutChangeListener $r2;
        com.google.android.material.tooltip.TooltipDrawable r0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter0: android.view.View;

        if $r1 != null goto label1;

        return;

     label1:
        specialinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: void updateLocationOnScreen(android.view.View)>($r1);

        $r2 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.view.View$OnLayoutChangeListener attachedViewLayoutChangeListener>;

        virtualinvoke $r1.<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>($r2);

        return;
    }

    public void setText(java.lang.CharSequence)
    {
        com.google.android.material.tooltip.TooltipDrawable r0;
        java.lang.CharSequence $r1, $r2;
        com.google.android.material.internal.TextDrawableHelper $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<com.google.android.material.tooltip.TooltipDrawable: java.lang.CharSequence text>;

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r2, $r1);

        if $z0 != 0 goto label1;

        r0.<com.google.android.material.tooltip.TooltipDrawable: java.lang.CharSequence text> = $r1;

        $r3 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        virtualinvoke $r3.<com.google.android.material.internal.TextDrawableHelper: void setTextWidthDirty(boolean)>(1);

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setTextAppearance(com.google.android.material.resources.TextAppearance)
    {
        android.content.Context $r3;
        com.google.android.material.tooltip.TooltipDrawable r0;
        com.google.android.material.internal.TextDrawableHelper $r2;
        com.google.android.material.resources.TextAppearance $r1;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $r1 := @parameter0: com.google.android.material.resources.TextAppearance;

        $r2 = r0.<com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r3 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.content.Context context>;

        virtualinvoke $r2.<com.google.android.material.internal.TextDrawableHelper: void setTextAppearance(com.google.android.material.resources.TextAppearance,android.content.Context)>($r1, $r3);

        return;
    }

    public void setTextAppearanceResource(int)
    {
        android.content.Context $r2;
        com.google.android.material.tooltip.TooltipDrawable r0;
        int $i0;
        com.google.android.material.resources.TextAppearance $r1;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $i0 := @parameter0: int;

        $r1 = new com.google.android.material.resources.TextAppearance;

        $r2 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.content.Context context>;

        specialinvoke $r1.<com.google.android.material.resources.TextAppearance: void <init>(android.content.Context,int)>($r2, $i0);

        virtualinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: void setTextAppearance(com.google.android.material.resources.TextAppearance)>($r1);

        return;
    }

    public void setTextPadding(int)
    {
        int $i0;
        com.google.android.material.tooltip.TooltipDrawable r0;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $i0 := @parameter0: int;

        r0.<com.google.android.material.tooltip.TooltipDrawable: int padding> = $i0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        return;
    }

    public void setTextResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.tooltip.TooltipDrawable r0;
        int $i0;
        java.lang.String $r3;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.tooltip.TooltipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.tooltip.TooltipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>($i0);

        virtualinvoke r0.<com.google.android.material.tooltip.TooltipDrawable: void setText(java.lang.CharSequence)>($r3);

        return;
    }
}
