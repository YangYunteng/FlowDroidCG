public final class com.google.common.collect.Multisets$FilteredMultiset extends com.google.common.collect.AbstractMultiset
{
    public final com.google.common.base.Predicate predicate;
    public final com.google.common.collect.Multiset unfiltered;

    public void <init>(com.google.common.collect.Multiset, com.google.common.base.Predicate)
    {
        com.google.common.collect.Multisets$FilteredMultiset r0;
        com.google.common.base.Predicate $r2;
        com.google.common.collect.Multiset $r1;

        r0 := @this: com.google.common.collect.Multisets$FilteredMultiset;

        $r1 := @parameter0: com.google.common.collect.Multiset;

        $r2 := @parameter1: com.google.common.base.Predicate;

        specialinvoke r0.<com.google.common.collect.AbstractMultiset: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.collect.Multiset unfiltered> = $r1;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.base.Predicate predicate> = $r2;

        return;
    }

    public int add(java.lang.Object, int)
    {
        com.google.common.base.Predicate $r1;
        com.google.common.collect.Multiset $r3;
        com.google.common.collect.Multisets$FilteredMultiset r0;
        int $i0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Multisets$FilteredMultiset;

        $r2 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r1 = r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.base.Predicate predicate>;

        $z0 = interfaceinvoke $r1.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r2);

        $r1 = r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.base.Predicate predicate>;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "Element %s does not match predicate %s", $r2, $r1);

        $r3 = r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.collect.Multiset unfiltered>;

        $i0 = interfaceinvoke $r3.<com.google.common.collect.Multiset: int add(java.lang.Object,int)>($r2, $i0);

        return $i0;
    }

    public void clear()
    {
        com.google.common.collect.Multisets$FilteredMultiset r0;
        java.util.Set $r1;

        r0 := @this: com.google.common.collect.Multisets$FilteredMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractMultiset: java.util.Set elementSet()>();

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        return;
    }

    public int count(java.lang.Object)
    {
        com.google.common.base.Predicate $r1;
        com.google.common.collect.Multiset $r3;
        com.google.common.collect.Multisets$FilteredMultiset r0;
        int $i0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Multisets$FilteredMultiset;

        $r2 := @parameter0: java.lang.Object;

        $r3 = r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.collect.Multiset unfiltered>;

        $i0 = interfaceinvoke $r3.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r2);

        if $i0 <= 0 goto label2;

        $r1 = r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.base.Predicate predicate>;

        $z0 = interfaceinvoke $r1.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return $i0;

     label1:
        return 0;

     label2:
        return 0;
    }

    public java.util.Set createElementSet()
    {
        com.google.common.base.Predicate $r1;
        com.google.common.collect.Multiset $r2;
        com.google.common.collect.Multisets$FilteredMultiset r0;
        java.util.Set $r3;

        r0 := @this: com.google.common.collect.Multisets$FilteredMultiset;

        $r2 = r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.collect.Multiset unfiltered>;

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

        $r1 = r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.base.Predicate predicate>;

        $r3 = staticinvoke <com.google.common.collect.Sets: java.util.Set filter(java.util.Set,com.google.common.base.Predicate)>($r3, $r1);

        return $r3;
    }

    public java.util.Set createEntrySet()
    {
        com.google.common.collect.Multisets$FilteredMultiset$1 $r1;
        com.google.common.collect.Multiset $r2;
        com.google.common.collect.Multisets$FilteredMultiset r0;
        java.util.Set $r3;

        r0 := @this: com.google.common.collect.Multisets$FilteredMultiset;

        $r2 = r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.collect.Multiset unfiltered>;

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r1 = new com.google.common.collect.Multisets$FilteredMultiset$1;

        specialinvoke $r1.<com.google.common.collect.Multisets$FilteredMultiset$1: void <init>(com.google.common.collect.Multisets$FilteredMultiset)>(r0);

        $r3 = staticinvoke <com.google.common.collect.Sets: java.util.Set filter(java.util.Set,com.google.common.base.Predicate)>($r3, $r1);

        return $r3;
    }

    public int distinctElements()
    {
        com.google.common.collect.Multisets$FilteredMultiset r0;
        int $i0;
        java.util.Set $r1;

        r0 := @this: com.google.common.collect.Multisets$FilteredMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractMultiset: java.util.Set elementSet()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }

    public java.util.Iterator entryIterator()
    {
        com.google.common.collect.Multisets$FilteredMultiset r0;
        java.lang.AssertionError $r1;

        r0 := @this: com.google.common.collect.Multisets$FilteredMultiset;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("should never be called");

        throw $r1;
    }

    public com.google.common.collect.UnmodifiableIterator iterator()
    {
        java.util.Iterator $r3;
        com.google.common.base.Predicate $r1;
        com.google.common.collect.Multiset $r2;
        com.google.common.collect.Multisets$FilteredMultiset r0;
        com.google.common.collect.UnmodifiableIterator $r4;

        r0 := @this: com.google.common.collect.Multisets$FilteredMultiset;

        $r2 = r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.collect.Multiset unfiltered>;

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Multiset: java.util.Iterator iterator()>();

        $r1 = r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.base.Predicate predicate>;

        $r4 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate)>($r3, $r1);

        return $r4;
    }

    public volatile java.util.Iterator iterator()
    {
        com.google.common.collect.Multisets$FilteredMultiset r0;
        com.google.common.collect.UnmodifiableIterator $r1;

        r0 := @this: com.google.common.collect.Multisets$FilteredMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public int remove(java.lang.Object, int)
    {
        com.google.common.collect.Multiset $r2;
        com.google.common.collect.Multisets$FilteredMultiset r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Multisets$FilteredMultiset;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "occurrences");

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<com.google.common.collect.Multisets$FilteredMultiset: int count(java.lang.Object)>($r1);

        return $i0;

     label1:
        $z0 = virtualinvoke r0.<com.google.common.collect.AbstractMultiset: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r2 = r0.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.collect.Multiset unfiltered>;

        $i0 = interfaceinvoke $r2.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>($r1, $i0);

        return $i0;

     label2:
        return 0;
    }
}
