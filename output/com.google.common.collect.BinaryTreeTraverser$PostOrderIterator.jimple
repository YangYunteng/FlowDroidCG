public final class com.google.common.collect.BinaryTreeTraverser$PostOrderIterator extends com.google.common.collect.UnmodifiableIterator
{
    public final java.util.BitSet hasExpanded;
    public final java.util.Deque stack;
    public final com.google.common.collect.BinaryTreeTraverser this$0;

    public void <init>(com.google.common.collect.BinaryTreeTraverser, java.lang.Object)
    {
        com.google.common.collect.BinaryTreeTraverser $r2;
        java.lang.Object $r1;
        java.util.BitSet $r5;
        java.util.ArrayDeque $r3;
        java.util.Deque $r4;
        com.google.common.collect.BinaryTreeTraverser$PostOrderIterator r0;

        r0 := @this: com.google.common.collect.BinaryTreeTraverser$PostOrderIterator;

        $r2 := @parameter0: com.google.common.collect.BinaryTreeTraverser;

        $r1 := @parameter1: java.lang.Object;

        r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: com.google.common.collect.BinaryTreeTraverser this$0> = $r2;

        specialinvoke r0.<com.google.common.collect.UnmodifiableIterator: void <init>()>();

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>(int)>(8);

        r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.Deque stack> = $r3;

        $r4 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.Deque stack>;

        interfaceinvoke $r4.<java.util.Deque: void addLast(java.lang.Object)>($r1);

        $r5 = new java.util.BitSet;

        specialinvoke $r5.<java.util.BitSet: void <init>()>();

        r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.BitSet hasExpanded> = $r5;

        return;
    }

    public boolean hasNext()
    {
        java.util.Deque $r1;
        com.google.common.collect.BinaryTreeTraverser$PostOrderIterator r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.BinaryTreeTraverser$PostOrderIterator;

        $r1 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.Deque stack>;

        $z0 = interfaceinvoke $r1.<java.util.Deque: boolean isEmpty()>();

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.Deque $r1;
        com.google.common.collect.BinaryTreeTraverser$PostOrderIterator r0;
        com.google.common.base.Optional $r5;
        int $i0, $i1;
        com.google.common.collect.BinaryTreeTraverser $r4;
        java.lang.Object $r2;
        java.util.BitSet $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.BinaryTreeTraverser$PostOrderIterator;

     label1:
        $r1 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.Deque stack>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object getLast()>();

        $r3 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.BitSet hasExpanded>;

        $r1 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.Deque stack>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $z0 = virtualinvoke $r3.<java.util.BitSet: boolean get(int)>($i0);

        if $z0 == 0 goto label2;

        $r1 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.Deque stack>;

        interfaceinvoke $r1.<java.util.Deque: java.lang.Object removeLast()>();

        $r3 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.BitSet hasExpanded>;

        $r1 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.Deque stack>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        virtualinvoke $r3.<java.util.BitSet: void clear(int)>($i0);

        return $r2;

     label2:
        $r3 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.BitSet hasExpanded>;

        $r1 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.Deque stack>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        virtualinvoke $r3.<java.util.BitSet: void set(int)>($i0);

        $r1 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.Deque stack>;

        $r4 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: com.google.common.collect.BinaryTreeTraverser this$0>;

        $r5 = virtualinvoke $r4.<com.google.common.collect.BinaryTreeTraverser: com.google.common.base.Optional rightChild(java.lang.Object)>($r2);

        staticinvoke <com.google.common.collect.BinaryTreeTraverser: void access$100(java.util.Deque,com.google.common.base.Optional)>($r1, $r5);

        $r1 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: java.util.Deque stack>;

        $r4 = r0.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: com.google.common.collect.BinaryTreeTraverser this$0>;

        $r5 = virtualinvoke $r4.<com.google.common.collect.BinaryTreeTraverser: com.google.common.base.Optional leftChild(java.lang.Object)>($r2);

        staticinvoke <com.google.common.collect.BinaryTreeTraverser: void access$100(java.util.Deque,com.google.common.base.Optional)>($r1, $r5);

        goto label1;
    }
}
