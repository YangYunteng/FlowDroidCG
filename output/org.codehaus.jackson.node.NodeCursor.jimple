public abstract class org.codehaus.jackson.node.NodeCursor extends org.codehaus.jackson.JsonStreamContext
{
    public final org.codehaus.jackson.node.NodeCursor _parent;

    public void <init>(int, org.codehaus.jackson.node.NodeCursor)
    {
        int $i0;
        org.codehaus.jackson.node.NodeCursor r0, $r1;

        r0 := @this: org.codehaus.jackson.node.NodeCursor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.codehaus.jackson.node.NodeCursor;

        specialinvoke r0.<org.codehaus.jackson.JsonStreamContext: void <init>()>();

        r0.<org.codehaus.jackson.JsonStreamContext: int _type> = $i0;

        $i0 = -1;

        r0.<org.codehaus.jackson.JsonStreamContext: int _index> = $i0;

        r0.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.node.NodeCursor _parent> = $r1;

        return;
    }

    public abstract boolean currentHasChildren();

    public abstract org.codehaus.jackson.JsonNode currentNode();

    public abstract org.codehaus.jackson.JsonToken endToken();

    public abstract java.lang.String getCurrentName();

    public volatile org.codehaus.jackson.JsonStreamContext getParent()
    {
        org.codehaus.jackson.node.NodeCursor r0;

        r0 := @this: org.codehaus.jackson.node.NodeCursor;

        r0 = virtualinvoke r0.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.node.NodeCursor getParent()>();

        return r0;
    }

    public final org.codehaus.jackson.node.NodeCursor getParent()
    {
        org.codehaus.jackson.node.NodeCursor r0;

        r0 := @this: org.codehaus.jackson.node.NodeCursor;

        r0 = r0.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.node.NodeCursor _parent>;

        return r0;
    }

    public final org.codehaus.jackson.node.NodeCursor iterateChildren()
    {
        java.lang.IllegalStateException $r5;
        org.codehaus.jackson.node.NodeCursor$Array $r3;
        org.codehaus.jackson.JsonNode $r2;
        org.codehaus.jackson.node.NodeCursor$Object $r4;
        org.codehaus.jackson.node.NodeCursor r0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.NodeCursor;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.JsonNode currentNode()>();

        if $r2 == null goto label3;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.JsonNode: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r3 = new org.codehaus.jackson.node.NodeCursor$Array;

        specialinvoke $r3.<org.codehaus.jackson.node.NodeCursor$Array: void <init>(org.codehaus.jackson.JsonNode,org.codehaus.jackson.node.NodeCursor)>($r2, r0);

        return $r3;

     label1:
        $z0 = virtualinvoke $r2.<org.codehaus.jackson.JsonNode: boolean isObject()>();

        if $z0 == 0 goto label2;

        $r4 = new org.codehaus.jackson.node.NodeCursor$Object;

        specialinvoke $r4.<org.codehaus.jackson.node.NodeCursor$Object: void <init>(org.codehaus.jackson.JsonNode,org.codehaus.jackson.node.NodeCursor)>($r2, r0);

        return $r4;

     label2:
        $r5 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current node of type ");

        $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label3:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No current node");

        throw $r5;
    }

    public abstract org.codehaus.jackson.JsonToken nextToken();

    public abstract org.codehaus.jackson.JsonToken nextValue();
}
