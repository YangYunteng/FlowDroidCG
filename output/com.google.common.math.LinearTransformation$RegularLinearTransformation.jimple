public final class com.google.common.math.LinearTransformation$RegularLinearTransformation extends com.google.common.math.LinearTransformation
{
    public com.google.common.math.LinearTransformation inverse;
    public final double slope;
    public final double yIntercept;

    public void <init>(double, double)
    {
        com.google.common.math.LinearTransformation$RegularLinearTransformation r0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.LinearTransformation$RegularLinearTransformation;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        specialinvoke r0.<com.google.common.math.LinearTransformation: void <init>()>();

        r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double slope> = $d1;

        r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double yIntercept> = $d0;

        r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: com.google.common.math.LinearTransformation inverse> = null;

        return;
    }

    public void <init>(double, double, com.google.common.math.LinearTransformation)
    {
        com.google.common.math.LinearTransformation $r1;
        com.google.common.math.LinearTransformation$RegularLinearTransformation r0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.LinearTransformation$RegularLinearTransformation;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: com.google.common.math.LinearTransformation;

        specialinvoke r0.<com.google.common.math.LinearTransformation: void <init>()>();

        r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double slope> = $d0;

        r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double yIntercept> = $d1;

        r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: com.google.common.math.LinearTransformation inverse> = $r1;

        return;
    }

    private com.google.common.math.LinearTransformation createInverse()
    {
        com.google.common.math.LinearTransformation$VerticalLinearTransformation $r2;
        byte $b0;
        com.google.common.math.LinearTransformation$RegularLinearTransformation r0, $r1;
        double $d0, $d1, $d2;

        r0 := @this: com.google.common.math.LinearTransformation$RegularLinearTransformation;

        $d1 = r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double slope>;

        $b0 = $d1 cmpl 0.0;

        if $b0 == 0 goto label1;

        $r1 = new com.google.common.math.LinearTransformation$RegularLinearTransformation;

        $d0 = 1.0 / $d1;

        $d2 = r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double yIntercept>;

        $d2 = $d2 * -1.0;

        $d1 = $d2 / $d1;

        specialinvoke $r1.<com.google.common.math.LinearTransformation$RegularLinearTransformation: void <init>(double,double,com.google.common.math.LinearTransformation)>($d0, $d1, r0);

        return $r1;

     label1:
        $r2 = new com.google.common.math.LinearTransformation$VerticalLinearTransformation;

        $d0 = r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double yIntercept>;

        specialinvoke $r2.<com.google.common.math.LinearTransformation$VerticalLinearTransformation: void <init>(double,com.google.common.math.LinearTransformation)>($d0, r0);

        return $r2;
    }

    public com.google.common.math.LinearTransformation inverse()
    {
        com.google.common.math.LinearTransformation $r1;
        com.google.common.math.LinearTransformation$RegularLinearTransformation r0;

        r0 := @this: com.google.common.math.LinearTransformation$RegularLinearTransformation;

        $r1 = r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: com.google.common.math.LinearTransformation inverse>;

        if $r1 != null goto label1;

        $r1 = specialinvoke r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: com.google.common.math.LinearTransformation createInverse()>();

        r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: com.google.common.math.LinearTransformation inverse> = $r1;

     label1:
        return $r1;
    }

    public boolean isHorizontal()
    {
        com.google.common.math.LinearTransformation$RegularLinearTransformation r0;
        byte $b0;
        double $d0;

        r0 := @this: com.google.common.math.LinearTransformation$RegularLinearTransformation;

        $d0 = r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double slope>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isVertical()
    {
        com.google.common.math.LinearTransformation$RegularLinearTransformation r0;

        r0 := @this: com.google.common.math.LinearTransformation$RegularLinearTransformation;

        return 0;
    }

    public double slope()
    {
        com.google.common.math.LinearTransformation$RegularLinearTransformation r0;
        double d0;

        r0 := @this: com.google.common.math.LinearTransformation$RegularLinearTransformation;

        d0 = r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double slope>;

        return d0;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r1;
        java.lang.Double $r2;
        com.google.common.math.LinearTransformation$RegularLinearTransformation r0;
        java.lang.String $r3;
        double $d0;

        r0 := @this: com.google.common.math.LinearTransformation$RegularLinearTransformation;

        $r1 = newarray (java.lang.Object)[2];

        $d0 = r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double slope>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[0] = $r2;

        $d0 = r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double yIntercept>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[1] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("y = %g * x + %g", $r1);

        return $r3;
    }

    public double transform(double)
    {
        com.google.common.math.LinearTransformation$RegularLinearTransformation r0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.LinearTransformation$RegularLinearTransformation;

        $d0 := @parameter0: double;

        $d1 = r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double slope>;

        $d0 = $d0 * $d1;

        $d1 = r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: double yIntercept>;

        $d0 = $d0 + $d1;

        return $d0;
    }
}
