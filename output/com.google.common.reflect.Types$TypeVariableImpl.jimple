public final class com.google.common.reflect.Types$TypeVariableImpl extends java.lang.Object
{
    public final com.google.common.collect.ImmutableList bounds;
    public final java.lang.reflect.GenericDeclaration genericDeclaration;
    public final java.lang.String name;

    public void <init>(java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.Type[])
    {
        java.lang.reflect.GenericDeclaration $r3;
        com.google.common.collect.ImmutableList $r2;
        com.google.common.reflect.Types$TypeVariableImpl r0;
        java.lang.reflect.Type[] $r1;
        java.lang.String $r4;

        r0 := @this: com.google.common.reflect.Types$TypeVariableImpl;

        $r3 := @parameter0: java.lang.reflect.GenericDeclaration;

        $r4 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.reflect.Type[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.google.common.reflect.Types: void access$200(java.lang.reflect.Type[],java.lang.String)>($r1, "bound for type variable");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration> = $r3;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.String name> = $r4;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>($r1);

        r0.<com.google.common.reflect.Types$TypeVariableImpl: com.google.common.collect.ImmutableList bounds> = $r2;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.GenericDeclaration $r8, $r9;
        com.google.common.reflect.Types$TypeVariableImpl r0, $r5;
        java.lang.reflect.TypeVariable $r12;
        com.google.common.reflect.Types$TypeVariableInvocationHandler $r4;
        com.google.common.collect.ImmutableList $r10, $r11;
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.lang.reflect.InvocationHandler $r3;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: com.google.common.reflect.Types$TypeVariableImpl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = <com.google.common.reflect.Types$NativeTypeVariableEquals: boolean NATIVE_TYPE_VARIABLE_ONLY>;

        if $z0 == 0 goto label3;

        if $r1 == null goto label2;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r2);

        if $z0 == 0 goto label5;

        $r3 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>($r1);

        $z0 = $r3 instanceof com.google.common.reflect.Types$TypeVariableInvocationHandler;

        if $z0 == 0 goto label5;

        $r3 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>($r1);

        $r4 = (com.google.common.reflect.Types$TypeVariableInvocationHandler) $r3;

        $r5 = staticinvoke <com.google.common.reflect.Types$TypeVariableInvocationHandler: com.google.common.reflect.Types$TypeVariableImpl access$600(com.google.common.reflect.Types$TypeVariableInvocationHandler)>($r4);

        $r6 = r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.String name>;

        $r7 = virtualinvoke $r5.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;

        $r9 = virtualinvoke $r5.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label1;

        $r10 = r0.<com.google.common.reflect.Types$TypeVariableImpl: com.google.common.collect.ImmutableList bounds>;

        $r11 = $r5.<com.google.common.reflect.Types$TypeVariableImpl: com.google.common.collect.ImmutableList bounds>;

        $z0 = virtualinvoke $r10.<com.google.common.collect.ImmutableList: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 0;

     label3:
        $z0 = $r1 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label5;

        $r12 = (java.lang.reflect.TypeVariable) $r1;

        $r6 = r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.String name>;

        $r7 = interfaceinvoke $r12.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

        $r8 = r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;

        $r9 = interfaceinvoke $r12.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        return 0;

     label5:
        return 0;
    }

    public java.lang.reflect.Type[] getBounds()
    {
        java.lang.reflect.Type[] $r1;
        com.google.common.collect.ImmutableList $r2;
        com.google.common.reflect.Types$TypeVariableImpl r0;

        r0 := @this: com.google.common.reflect.Types$TypeVariableImpl;

        $r2 = r0.<com.google.common.reflect.Types$TypeVariableImpl: com.google.common.collect.ImmutableList bounds>;

        $r1 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type[] access$300(java.util.Collection)>($r2);

        return $r1;
    }

    public java.lang.reflect.GenericDeclaration getGenericDeclaration()
    {
        java.lang.reflect.GenericDeclaration r1;
        com.google.common.reflect.Types$TypeVariableImpl r0;

        r0 := @this: com.google.common.reflect.Types$TypeVariableImpl;

        r1 = r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;

        return r1;
    }

    public java.lang.String getName()
    {
        java.lang.String r1;
        com.google.common.reflect.Types$TypeVariableImpl r0;

        r0 := @this: com.google.common.reflect.Types$TypeVariableImpl;

        r1 = r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.String name>;

        return r1;
    }

    public java.lang.String getTypeName()
    {
        java.lang.String r1;
        com.google.common.reflect.Types$TypeVariableImpl r0;

        r0 := @this: com.google.common.reflect.Types$TypeVariableImpl;

        r1 = r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.String name>;

        return r1;
    }

    public int hashCode()
    {
        java.lang.reflect.GenericDeclaration $r1;
        com.google.common.reflect.Types$TypeVariableImpl r0;
        int $i0, $i1;
        java.lang.String $r2;

        r0 := @this: com.google.common.reflect.Types$TypeVariableImpl;

        $r1 = r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.String name>;

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.String r1;
        com.google.common.reflect.Types$TypeVariableImpl r0;

        r0 := @this: com.google.common.reflect.Types$TypeVariableImpl;

        r1 = r0.<com.google.common.reflect.Types$TypeVariableImpl: java.lang.String name>;

        return r1;
    }
}
