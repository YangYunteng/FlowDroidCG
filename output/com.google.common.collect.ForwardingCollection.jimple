public abstract class com.google.common.collect.ForwardingCollection extends com.google.common.collect.ForwardingObject implements java.util.Collection
{

    public void <init>()
    {
        com.google.common.collect.ForwardingCollection r0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        specialinvoke r0.<com.google.common.collect.ForwardingObject: void <init>()>();

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.Collection $r2;
        com.google.common.collect.ForwardingCollection r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Collection $r1, $r2;
        com.google.common.collect.ForwardingCollection r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r1);

        return $z0;
    }

    public void clear()
    {
        com.google.common.collect.ForwardingCollection r0;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Collection $r2;
        com.google.common.collect.ForwardingCollection r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Collection $r1, $r2;
        com.google.common.collect.ForwardingCollection r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean containsAll(java.util.Collection)>($r1);

        return $z0;
    }

    public volatile java.lang.Object delegate()
    {
        com.google.common.collect.ForwardingCollection r0;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        return $r1;
    }

    public abstract java.util.Collection delegate();

    public boolean isEmpty()
    {
        com.google.common.collect.ForwardingCollection r0;
        java.util.Collection $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.ForwardingCollection r0;
        java.util.Iterator $r2;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        return $r2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Collection $r2;
        com.google.common.collect.ForwardingCollection r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Collection $r1, $r2;
        com.google.common.collect.ForwardingCollection r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean removeAll(java.util.Collection)>($r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.Collection $r1, $r2;
        com.google.common.collect.ForwardingCollection r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean retainAll(java.util.Collection)>($r1);

        return $z0;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.ForwardingCollection r0;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;
    }

    public boolean standardAddAll(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        com.google.common.collect.ForwardingCollection r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>(r0, $r2);

        return $z0;
    }

    public void standardClear()
    {
        com.google.common.collect.ForwardingCollection r0;
        java.util.Iterator $r1;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()>();

        staticinvoke <com.google.common.collect.Iterators: void clear(java.util.Iterator)>($r1);

        return;
    }

    public boolean standardContains(java.lang.Object)
    {
        java.util.Iterator $r2;
        com.google.common.collect.ForwardingCollection r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>($r2, $r1);

        return $z0;
    }

    public boolean standardContainsAll(java.util.Collection)
    {
        com.google.common.collect.ForwardingCollection r0;
        boolean $z0;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.util.Collection;

        $z0 = staticinvoke <com.google.common.collect.Collections2: boolean containsAllImpl(java.util.Collection,java.util.Collection)>(r0, $r1);

        return $z0;
    }

    public boolean standardIsEmpty()
    {
        com.google.common.collect.ForwardingCollection r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public boolean standardRemove(java.lang.Object)
    {
        java.util.Iterator $r2;
        com.google.common.collect.ForwardingCollection r0;
        java.lang.Object $r1, $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r3, $r1);

        if $z0 == 0 goto label1;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        return 1;

     label2:
        return 0;
    }

    public boolean standardRemoveAll(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        com.google.common.collect.ForwardingCollection r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean removeAll(java.util.Iterator,java.util.Collection)>($r2, $r1);

        return $z0;
    }

    public boolean standardRetainAll(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        com.google.common.collect.ForwardingCollection r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean retainAll(java.util.Iterator,java.util.Collection)>($r2, $r1);

        return $z0;
    }

    public java.lang.Object[] standardToArray()
    {
        int $i0;
        com.google.common.collect.ForwardingCollection r0;
        java.lang.Object[] $r1;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $i0 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: int size()>();

        $r1 = newarray (java.lang.Object)[$i0];

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        return $r1;
    }

    public java.lang.Object[] standardToArray(java.lang.Object[])
    {
        com.google.common.collect.ForwardingCollection r0;
        java.lang.Object[] $r1;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] toArrayImpl(java.util.Collection,java.lang.Object[])>(r0, $r1);

        return $r1;
    }

    public java.lang.String standardToString()
    {
        com.google.common.collect.ForwardingCollection r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 = staticinvoke <com.google.common.collect.Collections2: java.lang.String toStringImpl(java.util.Collection)>(r0);

        return $r1;
    }

    public java.lang.Object[] toArray()
    {
        com.google.common.collect.ForwardingCollection r0;
        java.lang.Object[] $r2;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        com.google.common.collect.ForwardingCollection r0;
        java.lang.Object[] $r1;
        java.util.Collection $r2;

        r0 := @this: com.google.common.collect.ForwardingCollection;

        $r1 := @parameter0: java.lang.Object[];

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: java.util.Collection delegate()>();

        $r1 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        return $r1;
    }
}
