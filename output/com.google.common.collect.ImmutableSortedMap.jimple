public final class com.google.common.collect.ImmutableSortedMap extends com.google.common.collect.ImmutableSortedMapFauxverideShim implements java.util.NavigableMap
{
    public static final com.google.common.collect.ImmutableSortedMap NATURAL_EMPTY_MAP;
    public static final java.util.Comparator NATURAL_ORDER;
    public static final long serialVersionUID;
    public transient com.google.common.collect.ImmutableSortedMap descendingMap;
    public final transient com.google.common.collect.RegularImmutableSortedSet keySet;
    public final transient com.google.common.collect.ImmutableList valueList;

    static void <clinit>()
    {
        com.google.common.collect.Ordering $r0;
        com.google.common.collect.ImmutableList $r3;
        com.google.common.collect.RegularImmutableSortedSet $r2;
        com.google.common.collect.ImmutableSortedMap $r1;

        $r0 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        <com.google.common.collect.ImmutableSortedMap: java.util.Comparator NATURAL_ORDER> = $r0;

        $r1 = new com.google.common.collect.ImmutableSortedMap;

        $r0 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator)>($r0);

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedMap: void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList)>($r2, $r3);

        <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap NATURAL_EMPTY_MAP> = $r1;

        return;
    }

    public void <init>(com.google.common.collect.RegularImmutableSortedSet, com.google.common.collect.ImmutableList)
    {
        com.google.common.collect.RegularImmutableSortedSet $r1;
        com.google.common.collect.ImmutableList $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: com.google.common.collect.RegularImmutableSortedSet;

        $r2 := @parameter1: com.google.common.collect.ImmutableList;

        specialinvoke r0.<com.google.common.collect.ImmutableSortedMap: void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSortedMap)>($r1, $r2, null);

        return;
    }

    public void <init>(com.google.common.collect.RegularImmutableSortedSet, com.google.common.collect.ImmutableList, com.google.common.collect.ImmutableSortedMap)
    {
        com.google.common.collect.ImmutableList $r2;
        com.google.common.collect.RegularImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMap r0, $r3;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: com.google.common.collect.RegularImmutableSortedSet;

        $r2 := @parameter1: com.google.common.collect.ImmutableList;

        $r3 := @parameter2: com.google.common.collect.ImmutableSortedMap;

        specialinvoke r0.<com.google.common.collect.ImmutableSortedMapFauxverideShim: void <init>()>();

        r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet> = $r1;

        r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableList valueList> = $r2;

        r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap descendingMap> = $r3;

        return;
    }

    public static java.util.TreeMap a(java.util.Comparator)
    {
        java.util.Comparator $r0;
        java.util.TreeMap $r1;

        $r0 := @parameter0: java.util.Comparator;

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.Comparator)>($r0);

        return $r1;
    }

    public static com.google.common.collect.ImmutableSortedMap access$000(java.util.Comparator, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        java.util.Comparator $r3;
        com.google.common.collect.ImmutableSortedMap $r2;

        $r3 := @parameter0: java.util.Comparator;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap of(java.util.Comparator,java.lang.Object,java.lang.Object)>($r3, $r0, $r1);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedMap access$100(java.util.Comparator, boolean, java.util.Map$Entry[], int)
    {
        int $i0;
        java.util.Comparator $r2;
        java.util.Map$Entry[] $r0;
        com.google.common.collect.ImmutableSortedMap $r1;
        boolean $z0;

        $r2 := @parameter0: java.util.Comparator;

        $z0 := @parameter1: boolean;

        $r0 := @parameter2: java.util.Map$Entry[];

        $i0 := @parameter3: int;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int)>($r2, $z0, $r0, $i0);

        return $r1;
    }

    public static com.google.common.collect.RegularImmutableSortedSet access$200(com.google.common.collect.ImmutableSortedMap)
    {
        com.google.common.collect.RegularImmutableSortedSet r1;
        com.google.common.collect.ImmutableSortedMap $r0;

        $r0 := @parameter0: com.google.common.collect.ImmutableSortedMap;

        r1 = $r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet>;

        return r1;
    }

    public static com.google.common.collect.ImmutableList access$300(com.google.common.collect.ImmutableSortedMap)
    {
        com.google.common.collect.ImmutableList r1;
        com.google.common.collect.ImmutableSortedMap $r0;

        $r0 := @parameter0: com.google.common.collect.ImmutableSortedMap;

        r1 = $r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableList valueList>;

        return r1;
    }

    public static com.google.common.collect.ImmutableSortedMap copyOf(java.lang.Iterable)
    {
        com.google.common.collect.Ordering $r3;
        java.util.Comparator $r2;
        com.google.common.collect.ImmutableSortedMap $r0;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 = <com.google.common.collect.ImmutableSortedMap: java.util.Comparator NATURAL_ORDER>;

        $r3 = (com.google.common.collect.Ordering) $r2;

        $r0 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap copyOf(java.lang.Iterable,java.util.Comparator)>($r1, $r3);

        return $r0;
    }

    public static com.google.common.collect.ImmutableSortedMap copyOf(java.lang.Iterable, java.util.Comparator)
    {
        java.util.Comparator $r2;
        com.google.common.collect.ImmutableSortedMap $r0;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 := @parameter1: java.util.Comparator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r0 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.lang.Iterable)>($r2, 0, $r1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableSortedMap copyOf(java.util.Map)
    {
        com.google.common.collect.Ordering $r3;
        java.util.Map $r1;
        java.util.Comparator $r2;
        com.google.common.collect.ImmutableSortedMap $r0;

        $r1 := @parameter0: java.util.Map;

        $r2 = <com.google.common.collect.ImmutableSortedMap: java.util.Comparator NATURAL_ORDER>;

        $r3 = (com.google.common.collect.Ordering) $r2;

        $r0 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap copyOfInternal(java.util.Map,java.util.Comparator)>($r1, $r3);

        return $r0;
    }

    public static com.google.common.collect.ImmutableSortedMap copyOf(java.util.Map, java.util.Comparator)
    {
        java.util.Comparator $r2;
        com.google.common.collect.ImmutableSortedMap $r0;
        java.util.Map $r1;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: java.util.Comparator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r0 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap copyOfInternal(java.util.Map,java.util.Comparator)>($r1, $r2);

        return $r0;
    }

    public static com.google.common.collect.ImmutableSortedMap copyOfInternal(java.util.Map, java.util.Comparator)
    {
        java.util.Set $r5;
        java.util.Map $r1;
        java.util.Comparator $r0, $r3;
        java.util.SortedMap $r2;
        com.google.common.collect.ImmutableSortedMap $r4;
        boolean $z0, $z1;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.util.Comparator;

        $z0 = $r1 instanceof java.util.SortedMap;

        $z1 = 0;

        if $z0 == 0 goto label2;

        $r2 = (java.util.SortedMap) $r1;

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.util.Comparator comparator()>();

        if $r3 != null goto label1;

        $r3 = <com.google.common.collect.ImmutableSortedMap: java.util.Comparator NATURAL_ORDER>;

        if $r0 != $r3 goto label2;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = interfaceinvoke $r0.<java.util.Comparator: boolean equals(java.lang.Object)>($r3);

     label2:
        if $z1 == 0 goto label3;

        $z0 = $r1 instanceof com.google.common.collect.ImmutableSortedMap;

        if $z0 == 0 goto label3;

        $r4 = (com.google.common.collect.ImmutableSortedMap) $r1;

        $z0 = virtualinvoke $r4.<com.google.common.collect.ImmutableSortedMap: boolean isPartialView()>();

        if $z0 != 0 goto label3;

        return $r4;

     label3:
        $r5 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.lang.Iterable)>($r0, $z1, $r5);

        return $r4;
    }

    public static com.google.common.collect.ImmutableSortedMap copyOfSorted(java.util.SortedMap)
    {
        java.util.Set $r4;
        java.util.Comparator $r1, $r2;
        java.util.SortedMap $r0;
        com.google.common.collect.ImmutableSortedMap $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.SortedMap;

        $r1 = interfaceinvoke $r0.<java.util.SortedMap: java.util.Comparator comparator()>();

        $r2 = $r1;

        if $r1 != null goto label1;

        $r2 = <com.google.common.collect.ImmutableSortedMap: java.util.Comparator NATURAL_ORDER>;

     label1:
        $z0 = $r0 instanceof com.google.common.collect.ImmutableSortedMap;

        if $z0 == 0 goto label2;

        $r3 = (com.google.common.collect.ImmutableSortedMap) $r0;

        $z0 = virtualinvoke $r3.<com.google.common.collect.ImmutableSortedMap: boolean isPartialView()>();

        if $z0 != 0 goto label2;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r0.<java.util.SortedMap: java.util.Set entrySet()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.lang.Iterable)>($r2, 1, $r4);

        return $r3;
    }

    public static com.google.common.collect.ImmutableSortedMap emptyMap(java.util.Comparator)
    {
        com.google.common.collect.Ordering $r1;
        com.google.common.collect.ImmutableList $r4;
        java.util.Comparator $r0;
        com.google.common.collect.RegularImmutableSortedSet $r3;
        com.google.common.collect.ImmutableSortedMap $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Comparator;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap of()>();

        return $r2;

     label1:
        $r2 = new com.google.common.collect.ImmutableSortedMap;

        $r3 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator)>($r0);

        $r4 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        specialinvoke $r2.<com.google.common.collect.ImmutableSortedMap: void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList)>($r3, $r4);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator, boolean, java.lang.Iterable)
    {
        java.lang.Object[] $r3;
        int $i0;
        java.util.Comparator $r0;
        java.util.Map$Entry[] $r2;
        java.lang.Iterable $r1;
        com.google.common.collect.ImmutableSortedMap $r4;
        boolean $z0;

        $r0 := @parameter0: java.util.Comparator;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.lang.Iterable;

        $r2 = <com.google.common.collect.ImmutableMap: java.util.Map$Entry[] EMPTY_ENTRY_ARRAY>;

        $r3 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>($r1, $r2);

        $r2 = (java.util.Map$Entry[]) $r3;

        $i0 = lengthof $r2;

        $r4 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int)>($r0, $z0, $r2, $i0);

        return $r4;
    }

    public static com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator, boolean, java.util.Map$Entry[], int)
    {
        java.lang.Object[] $r0, $r1;
        com.google.common.collect.RegularImmutableList $r11;
        int $i0, $i1, $i2;
        java.util.Map$Entry[] $r4;
        com.google.common.collect.ImmutableSortedMap $r9, $r13;
        boolean $z0;
        java.util.Map$Entry $r2, $r8;
        com.google.common.collect.ImmutableSortedMap$1 $r10;
        java.lang.Object $r5, $r6, $r7;
        java.util.Comparator $r3;
        com.google.common.collect.RegularImmutableSortedSet $r12;

        $r3 := @parameter0: java.util.Comparator;

        $z0 := @parameter1: boolean;

        $r4 := @parameter2: java.util.Map$Entry[];

        $i0 := @parameter3: int;

        if $i0 == 0 goto label8;

        $i1 = 0;

        if $i0 == 1 goto label7;

        $r0 = newarray (java.lang.Object)[$i0];

        $r1 = newarray (java.lang.Object)[$i0];

        if $z0 == 0 goto label2;

     label1:
        if $i1 >= $i0 goto label6;

        $r2 = $r4[$i1];

        $r5 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2 = $r4[$i1];

        $r6 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r0[$i1] = $r5;

        $r1[$i1] = $r6;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r10 = new com.google.common.collect.ImmutableSortedMap$1;

        specialinvoke $r10.<com.google.common.collect.ImmutableSortedMap$1: void <init>(java.util.Comparator)>($r3);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>($r4, 0, $i0, $r10);

        $r2 = $r4[0];

        $r5 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r0[0] = $r5;

        $r2 = $r4[0];

        $r6 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r1[0] = $r6;

        $r6 = $r0[0];

        $r7 = $r1[0];

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r6, $r7);

        $i1 = 1;

     label3:
        if $i1 >= $i0 goto label6;

        $r2 = $r4[$i1];

        $r6 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2 = $r4[$i1];

        $r7 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r0[$i1] = $r6;

        $r1[$i1] = $r7;

        $i2 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $i2 == 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        $i2 = -1;

        $i2 = $i1 + $i2;

        $r8 = $r4[$i2];

        $r2 = $r4[$i1];

        staticinvoke <com.google.common.collect.ImmutableMap: void checkNoConflict(boolean,java.lang.String,java.util.Map$Entry,java.util.Map$Entry)>($z0, "key", $r8, $r2);

        $i1 = $i1 + 1;

        $r5 = $r6;

        goto label3;

     label6:
        $r13 = new com.google.common.collect.ImmutableSortedMap;

        $r12 = new com.google.common.collect.RegularImmutableSortedSet;

        $r11 = new com.google.common.collect.RegularImmutableList;

        specialinvoke $r11.<com.google.common.collect.RegularImmutableList: void <init>(java.lang.Object[])>($r0);

        specialinvoke $r12.<com.google.common.collect.RegularImmutableSortedSet: void <init>(com.google.common.collect.ImmutableList,java.util.Comparator)>($r11, $r3);

        $r11 = new com.google.common.collect.RegularImmutableList;

        specialinvoke $r11.<com.google.common.collect.RegularImmutableList: void <init>(java.lang.Object[])>($r1);

        specialinvoke $r13.<com.google.common.collect.ImmutableSortedMap: void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList)>($r12, $r11);

        return $r13;

     label7:
        $r2 = $r4[0];

        $r5 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2 = $r4[0];

        $r6 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap of(java.util.Comparator,java.lang.Object,java.lang.Object)>($r3, $r5, $r6);

        return $r9;

     label8:
        $r9 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap emptyMap(java.util.Comparator)>($r3);

        return $r9;
    }

    private com.google.common.collect.ImmutableSortedMap getSubMap(int, int)
    {
        com.google.common.collect.ImmutableList $r1;
        int $i0, $i1, $i2;
        java.util.Comparator $r2;
        com.google.common.collect.RegularImmutableSortedSet $r4;
        com.google.common.collect.ImmutableSortedMap r0, $r3;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        if $i1 != 0 goto label1;

        $i2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: int size()>();

        if $i0 != $i2 goto label1;

        return r0;

     label1:
        if $i1 != $i0 goto label2;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: java.util.Comparator comparator()>();

        r0 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap emptyMap(java.util.Comparator)>($r2);

        return r0;

     label2:
        $r3 = new com.google.common.collect.ImmutableSortedMap;

        $r4 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet>;

        $r4 = virtualinvoke $r4.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet getSubSet(int,int)>($i1, $i0);

        $r1 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableList valueList>;

        $r1 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList subList(int,int)>($i1, $i0);

        specialinvoke $r3.<com.google.common.collect.ImmutableSortedMap: void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList)>($r4, $r1);

        return $r3;
    }

    public static com.google.common.collect.ImmutableSortedMap$Builder naturalOrder()
    {
        com.google.common.collect.ImmutableSortedMap$Builder $r0;
        com.google.common.collect.Ordering $r1;

        $r0 = new com.google.common.collect.ImmutableSortedMap$Builder;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        specialinvoke $r0.<com.google.common.collect.ImmutableSortedMap$Builder: void <init>(java.util.Comparator)>($r1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableSortedMap of()
    {
        com.google.common.collect.ImmutableSortedMap r0;

        r0 = <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap NATURAL_EMPTY_MAP>;

        return r0;
    }

    public static com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable, java.lang.Object)
    {
        com.google.common.collect.Ordering $r2;
        java.lang.Object $r0;
        java.lang.Comparable $r1;
        com.google.common.collect.ImmutableSortedMap $r3;

        $r1 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap of(java.util.Comparator,java.lang.Object,java.lang.Object)>($r2, $r1, $r0);

        return $r3;
    }

    public static com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable, java.lang.Object, java.lang.Comparable, java.lang.Object)
    {
        java.util.Map$Entry $r5;
        java.lang.Comparable $r0, $r2;
        java.lang.Object $r1, $r3;
        java.util.Map$Entry[] $r4;
        com.google.common.collect.ImmutableSortedMap $r6;

        $r2 := @parameter0: java.lang.Comparable;

        $r3 := @parameter1: java.lang.Object;

        $r0 := @parameter2: java.lang.Comparable;

        $r1 := @parameter3: java.lang.Object;

        $r4 = newarray (java.util.Map$Entry)[2];

        $r5 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r4[0] = $r5;

        $r5 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r4[1] = $r5;

        $r6 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap ofEntries(java.util.Map$Entry[])>($r4);

        return $r6;
    }

    public static com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable, java.lang.Object, java.lang.Comparable, java.lang.Object, java.lang.Comparable, java.lang.Object)
    {
        java.util.Map$Entry $r7;
        java.lang.Comparable $r0, $r2, $r4;
        java.lang.Object $r1, $r3, $r5;
        java.util.Map$Entry[] $r6;
        com.google.common.collect.ImmutableSortedMap $r8;

        $r4 := @parameter0: java.lang.Comparable;

        $r5 := @parameter1: java.lang.Object;

        $r0 := @parameter2: java.lang.Comparable;

        $r1 := @parameter3: java.lang.Object;

        $r2 := @parameter4: java.lang.Comparable;

        $r3 := @parameter5: java.lang.Object;

        $r6 = newarray (java.util.Map$Entry)[3];

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6[0] = $r7;

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r6[1] = $r7;

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r6[2] = $r7;

        $r8 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap ofEntries(java.util.Map$Entry[])>($r6);

        return $r8;
    }

    public static com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable, java.lang.Object, java.lang.Comparable, java.lang.Object, java.lang.Comparable, java.lang.Object, java.lang.Comparable, java.lang.Object)
    {
        java.util.Map$Entry $r9;
        java.lang.Comparable $r0, $r2, $r4, $r6;
        java.lang.Object $r1, $r3, $r5, $r7;
        java.util.Map$Entry[] $r8;
        com.google.common.collect.ImmutableSortedMap $r10;

        $r6 := @parameter0: java.lang.Comparable;

        $r7 := @parameter1: java.lang.Object;

        $r0 := @parameter2: java.lang.Comparable;

        $r1 := @parameter3: java.lang.Object;

        $r2 := @parameter4: java.lang.Comparable;

        $r3 := @parameter5: java.lang.Object;

        $r4 := @parameter6: java.lang.Comparable;

        $r5 := @parameter7: java.lang.Object;

        $r8 = newarray (java.util.Map$Entry)[4];

        $r9 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8[0] = $r9;

        $r9 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r8[1] = $r9;

        $r9 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r8[2] = $r9;

        $r9 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r8[3] = $r9;

        $r10 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap ofEntries(java.util.Map$Entry[])>($r8);

        return $r10;
    }

    public static com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable, java.lang.Object, java.lang.Comparable, java.lang.Object, java.lang.Comparable, java.lang.Object, java.lang.Comparable, java.lang.Object, java.lang.Comparable, java.lang.Object)
    {
        java.util.Map$Entry $r11;
        java.lang.Comparable $r0, $r2, $r4, $r6, $r8;
        java.lang.Object $r1, $r3, $r5, $r7, $r9;
        java.util.Map$Entry[] $r10;
        com.google.common.collect.ImmutableSortedMap $r12;

        $r8 := @parameter0: java.lang.Comparable;

        $r9 := @parameter1: java.lang.Object;

        $r0 := @parameter2: java.lang.Comparable;

        $r1 := @parameter3: java.lang.Object;

        $r2 := @parameter4: java.lang.Comparable;

        $r3 := @parameter5: java.lang.Object;

        $r4 := @parameter6: java.lang.Comparable;

        $r5 := @parameter7: java.lang.Object;

        $r6 := @parameter8: java.lang.Comparable;

        $r7 := @parameter9: java.lang.Object;

        $r10 = newarray (java.util.Map$Entry)[5];

        $r11 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10[0] = $r11;

        $r11 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r10[1] = $r11;

        $r11 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r10[2] = $r11;

        $r11 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r10[3] = $r11;

        $r11 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r10[4] = $r11;

        $r12 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap ofEntries(java.util.Map$Entry[])>($r10);

        return $r12;
    }

    public static com.google.common.collect.ImmutableSortedMap of(java.util.Comparator, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableList $r5;
        java.lang.Object $r0, $r4;
        com.google.common.collect.RegularImmutableSortedSet $r2;
        java.util.Comparator $r3;
        com.google.common.collect.ImmutableSortedMap $r1;

        $r3 := @parameter0: java.util.Comparator;

        $r4 := @parameter1: java.lang.Object;

        $r0 := @parameter2: java.lang.Object;

        $r1 = new com.google.common.collect.ImmutableSortedMap;

        $r2 = new com.google.common.collect.RegularImmutableSortedSet;

        $r5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>($r4);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        specialinvoke $r2.<com.google.common.collect.RegularImmutableSortedSet: void <init>(com.google.common.collect.ImmutableList,java.util.Comparator)>($r5, $r3);

        $r5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>($r0);

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedMap: void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList)>($r2, $r5);

        return $r1;
    }

    public static transient com.google.common.collect.ImmutableSortedMap ofEntries(java.util.Map$Entry[])
    {
        com.google.common.collect.Ordering $r1;
        int $i0;
        java.util.Map$Entry[] $r0;
        com.google.common.collect.ImmutableSortedMap $r2;

        $r0 := @parameter0: java.util.Map$Entry[];

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $i0 = lengthof $r0;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int)>($r1, 0, $r0, $i0);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedMap$Builder orderedBy(java.util.Comparator)
    {
        java.util.Comparator $r0;
        com.google.common.collect.ImmutableSortedMap$Builder $r1;

        $r0 := @parameter0: java.util.Comparator;

        $r1 = new com.google.common.collect.ImmutableSortedMap$Builder;

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedMap$Builder: void <init>(java.util.Comparator)>($r0);

        return $r1;
    }

    public static com.google.common.collect.ImmutableSortedMap$Builder reverseOrder()
    {
        com.google.common.collect.ImmutableSortedMap$Builder $r0;
        com.google.common.collect.Ordering $r1;

        $r0 = new com.google.common.collect.ImmutableSortedMap$Builder;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r1 = virtualinvoke $r1.<com.google.common.collect.Ordering: com.google.common.collect.Ordering reverse()>();

        specialinvoke $r0.<com.google.common.collect.ImmutableSortedMap$Builder: void <init>(java.util.Comparator)>($r1);

        return $r0;
    }

    public static java.util.stream.Collector toImmutableSortedMap(java.util.Comparator, java.util.function.Function, java.util.function.Function)
    {
        java.util.stream.Collector $r2;
        java.util.Comparator $r3;
        java.util.function.Function $r0, $r1;

        $r3 := @parameter0: java.util.Comparator;

        $r0 := @parameter1: java.util.function.Function;

        $r1 := @parameter2: java.util.function.Function;

        $r2 = staticinvoke <com.google.common.collect.CollectCollectors: java.util.stream.Collector toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)>($r3, $r0, $r1);

        return $r2;
    }

    public static java.util.stream.Collector toImmutableSortedMap(java.util.Comparator, java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator)
    {
        c.i.b.c.Ob $r6;
        java.util.stream.Collector $r5;
        c.i.b.c.wa $r2;
        java.util.Comparator $r3;
        java.util.function.Function $r0, $r4;
        java.util.function.BinaryOperator $r1;

        $r3 := @parameter0: java.util.Comparator;

        $r4 := @parameter1: java.util.function.Function;

        $r0 := @parameter2: java.util.function.Function;

        $r1 := @parameter3: java.util.function.BinaryOperator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new c.i.b.c.wa;

        specialinvoke $r2.<c.i.b.c.wa: void <init>(java.util.Comparator)>($r3);

        $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)>($r4, $r0, $r1, $r2);

        $r6 = <c.i.b.c.Ob: c.i.b.c.Ob a>;

        $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>($r5, $r6);

        return $r5;
    }

    public java.util.Map$Entry ceilingEntry(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean)>($r1, 1);

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: java.util.Map$Entry firstEntry()>();

        return $r2;
    }

    public java.lang.Object ceilingKey(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: java.util.Map$Entry ceilingEntry(java.lang.Object)>($r1);

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object keyOrNull(java.util.Map$Entry)>($r2);

        return $r1;
    }

    public java.util.Comparator comparator()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        java.util.Comparator $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedSet keySet()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator()>();

        return $r2;
    }

    public com.google.common.collect.ImmutableSet createEntrySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableSortedMap r0;
        boolean $z0;
        com.google.common.collect.ImmutableSortedMap$1EntrySet $r2;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r1;

     label1:
        $r2 = new com.google.common.collect.ImmutableSortedMap$1EntrySet;

        specialinvoke $r2.<com.google.common.collect.ImmutableSortedMap$1EntrySet: void <init>(com.google.common.collect.ImmutableSortedMap)>(r0);

        return $r2;
    }

    public com.google.common.collect.ImmutableSet createKeySet()
    {
        java.lang.AssertionError $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("should never be called");

        throw $r1;
    }

    public com.google.common.collect.ImmutableCollection createValues()
    {
        java.lang.AssertionError $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("should never be called");

        throw $r1;
    }

    public com.google.common.collect.ImmutableSortedSet descendingKeySet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.RegularImmutableSortedSet $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r2 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet descendingSet()>();

        return $r1;
    }

    public volatile java.util.NavigableSet descendingKeySet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedSet descendingKeySet()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableSortedMap descendingMap()
    {
        com.google.common.collect.ImmutableSortedSet $r5;
        com.google.common.collect.Ordering $r3;
        com.google.common.collect.ImmutableList $r6;
        java.util.Comparator $r2;
        com.google.common.collect.RegularImmutableSortedSet $r4;
        com.google.common.collect.ImmutableSortedMap r0, $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap descendingMap>;

        if $r1 != null goto label2;

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: java.util.Comparator comparator()>();

        $r3 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering 'from'(java.util.Comparator)>($r2);

        $r3 = virtualinvoke $r3.<com.google.common.collect.Ordering: com.google.common.collect.Ordering reverse()>();

        r0 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap emptyMap(java.util.Comparator)>($r3);

        return r0;

     label1:
        $r1 = new com.google.common.collect.ImmutableSortedMap;

        $r4 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet>;

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet descendingSet()>();

        $r4 = (com.google.common.collect.RegularImmutableSortedSet) $r5;

        $r6 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableList valueList>;

        $r6 = virtualinvoke $r6.<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList reverse()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedMap: void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSortedMap)>($r4, $r6, r0);

     label2:
        return $r1;
    }

    public volatile java.util.NavigableMap descendingMap()
    {
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap descendingMap()>();

        return r0;
    }

    public com.google.common.collect.ImmutableSet entrySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = specialinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        return $r1;
    }

    public volatile java.util.Set entrySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSet entrySet()>();

        return $r1;
    }

    public java.util.Map$Entry firstEntry()
    {
        java.util.Map$Entry $r4;
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableList $r2;
        java.lang.Object $r3;
        com.google.common.collect.ImmutableSortedMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSet entrySet()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.util.Map$Entry) $r3;

        return $r4;
    }

    public java.lang.Object firstKey()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        java.lang.Object $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedSet keySet()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableSortedSet: java.lang.Object first()>();

        return $r2;
    }

    public java.util.Map$Entry floorEntry(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean)>($r1, 1);

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: java.util.Map$Entry lastEntry()>();

        return $r2;
    }

    public java.lang.Object floorKey(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: java.util.Map$Entry floorEntry(java.lang.Object)>($r1);

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object keyOrNull(java.util.Map$Entry)>($r2);

        return $r1;
    }

    public void forEach(java.util.function.BiConsumer)
    {
        com.google.common.collect.ImmutableList $r3, $r5;
        java.util.function.BiConsumer $r1;
        int $i0, $i1;
        java.lang.Object $r4, $r6;
        com.google.common.collect.RegularImmutableSortedSet $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.util.function.BiConsumer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet>;

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()>();

        $i0 = 0;

     label1:
        $i1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: int size()>();

        if $i0 >= $i1 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableList valueList>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0);

        interfaceinvoke $r1.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r4, $r6);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.common.collect.ImmutableList $r3;
        int $i0, $i1;
        java.lang.Object $r1;
        com.google.common.collect.RegularImmutableSortedSet $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet>;

        $i0 = virtualinvoke $r2.<com.google.common.collect.RegularImmutableSortedSet: int indexOf(java.lang.Object)>($r1);

        $i1 = -1;

        if $i0 != $i1 goto label1;

        return null;

     label1:
        $r3 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableList valueList>;

        $r1 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        return $r1;
    }

    public com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean)>($r1, 0);

        return r0;
    }

    public com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object, boolean)
    {
        int $i0;
        java.lang.Object $r2;
        com.google.common.collect.RegularImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r2 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r1 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r1.<com.google.common.collect.RegularImmutableSortedSet: int headIndex(java.lang.Object,boolean)>($r2, $z0);

        r0 = specialinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap getSubMap(int,int)>(0, $i0);

        return r0;
    }

    public volatile java.util.NavigableMap headMap(java.lang.Object, boolean)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableSortedMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean)>($r1, $z0);

        return r0;
    }

    public volatile java.util.SortedMap headMap(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object)>($r1);

        return r0;
    }

    public java.util.Map$Entry higherEntry(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean)>($r1, 0);

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: java.util.Map$Entry firstEntry()>();

        return $r2;
    }

    public java.lang.Object higherKey(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: java.util.Map$Entry higherEntry(java.lang.Object)>($r1);

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object keyOrNull(java.util.Map$Entry)>($r2);

        return $r1;
    }

    public boolean isPartialView()
    {
        com.google.common.collect.ImmutableList $r2;
        com.google.common.collect.RegularImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet>;

        $z0 = virtualinvoke $r1.<com.google.common.collect.RegularImmutableSortedSet: boolean isPartialView()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableList valueList>;

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: boolean isPartialView()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public volatile com.google.common.collect.ImmutableSet keySet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedSet keySet()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableSortedSet keySet()
    {
        com.google.common.collect.RegularImmutableSortedSet r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        r1 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet>;

        return r1;
    }

    public volatile java.util.Set keySet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedSet keySet()>();

        return $r1;
    }

    public java.util.Map$Entry lastEntry()
    {
        java.util.Map$Entry $r4;
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableList $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.google.common.collect.ImmutableSortedMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSet entrySet()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()>();

        $i0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (java.util.Map$Entry) $r3;

        return $r4;
    }

    public java.lang.Object lastKey()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        java.lang.Object $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedSet keySet()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableSortedSet: java.lang.Object last()>();

        return $r2;
    }

    public java.util.Map$Entry lowerEntry(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean)>($r1, 0);

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: java.util.Map$Entry lastEntry()>();

        return $r2;
    }

    public java.lang.Object lowerKey(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: java.util.Map$Entry lowerEntry(java.lang.Object)>($r1);

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object keyOrNull(java.util.Map$Entry)>($r2);

        return $r1;
    }

    public com.google.common.collect.ImmutableSortedSet navigableKeySet()
    {
        com.google.common.collect.RegularImmutableSortedSet r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        r1 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet>;

        return r1;
    }

    public volatile java.util.NavigableSet navigableKeySet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedSet navigableKeySet()>();

        return $r1;
    }

    public final java.util.Map$Entry pollFirstEntry()
    {
        java.lang.UnsupportedOperationException $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public final java.util.Map$Entry pollLastEntry()
    {
        java.lang.UnsupportedOperationException $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.ImmutableList $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableList valueList>;

        $i0 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        return $i0;
    }

    public com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>($r2, 1, $r1, 0);

        return r0;
    }

    public com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        int $i0;
        java.lang.Object $r1, $r2;
        java.util.Comparator $r3;
        com.google.common.collect.ImmutableSortedMap r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.Object;

        $z1 := @parameter3: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r3 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: java.util.Comparator comparator()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $i0 > 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z2, "expected fromKey <= toKey but %s > %s", $r1, $r2);

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean)>($r2, $z1);

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean)>($r1, $z0);

        return r0;
    }

    public volatile java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.lang.Object $r1, $r2;
        com.google.common.collect.ImmutableSortedMap r0;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r2 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.lang.Object;

        $z1 := @parameter3: boolean;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>($r2, $z0, $r1, $z1);

        return r0;
    }

    public volatile java.util.SortedMap subMap(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,java.lang.Object)>($r2, $r1);

        return r0;
    }

    public com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean)>($r1, 1);

        return r0;
    }

    public com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object, boolean)
    {
        int $i0, $i1;
        java.lang.Object $r2;
        com.google.common.collect.RegularImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r2 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r1 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.RegularImmutableSortedSet keySet>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r1.<com.google.common.collect.RegularImmutableSortedSet: int tailIndex(java.lang.Object,boolean)>($r2, $z0);

        $i1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: int size()>();

        r0 = specialinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap getSubMap(int,int)>($i0, $i1);

        return r0;
    }

    public volatile java.util.NavigableMap tailMap(java.lang.Object, boolean)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableSortedMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean)>($r1, $z0);

        return r0;
    }

    public volatile java.util.SortedMap tailMap(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object)>($r1);

        return r0;
    }

    public com.google.common.collect.ImmutableCollection values()
    {
        com.google.common.collect.ImmutableList r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        r1 = r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableList valueList>;

        return r1;
    }

    public volatile java.util.Collection values()
    {
        com.google.common.collect.ImmutableCollection $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableCollection values()>();

        return $r1;
    }

    public java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableSortedMap$SerializedForm $r1;
        com.google.common.collect.ImmutableSortedMap r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMap;

        $r1 = new com.google.common.collect.ImmutableSortedMap$SerializedForm;

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedMap$SerializedForm: void <init>(com.google.common.collect.ImmutableSortedMap)>(r0);

        return $r1;
    }
}
