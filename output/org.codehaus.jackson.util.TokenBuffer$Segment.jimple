public final class org.codehaus.jackson.util.TokenBuffer$Segment extends java.lang.Object
{
    public static final int TOKENS_PER_SEGMENT;
    public static final org.codehaus.jackson.JsonToken[] TOKEN_TYPES_BY_INDEX;
    public org.codehaus.jackson.util.TokenBuffer$Segment _next;
    public long _tokenTypes;
    public final java.lang.Object[] _tokens;

    static void <clinit>()
    {
        int $i0;
        org.codehaus.jackson.JsonToken[] $r0, $r1;

        <org.codehaus.jackson.util.TokenBuffer$Segment: int TOKENS_PER_SEGMENT> = 16;

        $r0 = newarray (org.codehaus.jackson.JsonToken)[16];

        <org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.JsonToken[] TOKEN_TYPES_BY_INDEX> = $r0;

        $r1 = staticinvoke <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken[] values()>();

        $r0 = <org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.JsonToken[] TOKEN_TYPES_BY_INDEX>;

        $i0 = lengthof $r1;

        $i0 = $i0 - 1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(15, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, $r0, 1, $i0);

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.util.TokenBuffer$Segment r0;
        java.lang.Object[] $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Segment;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.Object)[16];

        r0.<org.codehaus.jackson.util.TokenBuffer$Segment: java.lang.Object[] _tokens> = $r1;

        return;
    }

    public org.codehaus.jackson.util.TokenBuffer$Segment append(int, org.codehaus.jackson.JsonToken)
    {
        org.codehaus.jackson.util.TokenBuffer$Segment r0, $r2;
        org.codehaus.jackson.JsonToken $r1;
        int $i0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Segment;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.codehaus.jackson.JsonToken;

        if $i0 >= 16 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Segment: void set(int,org.codehaus.jackson.JsonToken)>($i0, $r1);

        return null;

     label1:
        $r2 = new org.codehaus.jackson.util.TokenBuffer$Segment;

        specialinvoke $r2.<org.codehaus.jackson.util.TokenBuffer$Segment: void <init>()>();

        r0.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment _next> = $r2;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment _next>;

        virtualinvoke $r2.<org.codehaus.jackson.util.TokenBuffer$Segment: void set(int,org.codehaus.jackson.JsonToken)>(0, $r1);

        r0 = r0.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment _next>;

        return r0;
    }

    public org.codehaus.jackson.util.TokenBuffer$Segment append(int, org.codehaus.jackson.JsonToken, java.lang.Object)
    {
        org.codehaus.jackson.util.TokenBuffer$Segment r0, $r3;
        org.codehaus.jackson.JsonToken $r1;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Segment;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.codehaus.jackson.JsonToken;

        $r2 := @parameter2: java.lang.Object;

        if $i0 >= 16 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Segment: void set(int,org.codehaus.jackson.JsonToken,java.lang.Object)>($i0, $r1, $r2);

        return null;

     label1:
        $r3 = new org.codehaus.jackson.util.TokenBuffer$Segment;

        specialinvoke $r3.<org.codehaus.jackson.util.TokenBuffer$Segment: void <init>()>();

        r0.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment _next> = $r3;

        $r3 = r0.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment _next>;

        virtualinvoke $r3.<org.codehaus.jackson.util.TokenBuffer$Segment: void set(int,org.codehaus.jackson.JsonToken,java.lang.Object)>(0, $r1, $r2);

        r0 = r0.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment _next>;

        return r0;
    }

    public java.lang.Object get(int)
    {
        org.codehaus.jackson.util.TokenBuffer$Segment r0;
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Segment;

        $i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Segment: java.lang.Object[] _tokens>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public org.codehaus.jackson.util.TokenBuffer$Segment next()
    {
        org.codehaus.jackson.util.TokenBuffer$Segment r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Segment;

        r0 = r0.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment _next>;

        return r0;
    }

    public void set(int, org.codehaus.jackson.JsonToken)
    {
        org.codehaus.jackson.util.TokenBuffer$Segment r0;
        org.codehaus.jackson.JsonToken $r1;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Segment;

        $i1 := @parameter0: int;

        $r1 := @parameter1: org.codehaus.jackson.JsonToken;

        $i0 = virtualinvoke $r1.<java.lang.Enum: int ordinal()>();

        $l2 = (long) $i0;

        if $i1 <= 0 goto label1;

        $i1 = $i1 << 2;

        $l2 = $l2 << $i1;

     label1:
        $l3 = r0.<org.codehaus.jackson.util.TokenBuffer$Segment: long _tokenTypes>;

        $l2 = $l3 | $l2;

        r0.<org.codehaus.jackson.util.TokenBuffer$Segment: long _tokenTypes> = $l2;

        return;
    }

    public void set(int, org.codehaus.jackson.JsonToken, java.lang.Object)
    {
        org.codehaus.jackson.JsonToken $r2;
        java.lang.Object[] $r3;
        long $l2, $l3;
        org.codehaus.jackson.util.TokenBuffer$Segment r0;
        int $i0, $i1;
        java.lang.Object $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Segment;

        $i1 := @parameter0: int;

        $r2 := @parameter1: org.codehaus.jackson.JsonToken;

        $r1 := @parameter2: java.lang.Object;

        $r3 = r0.<org.codehaus.jackson.util.TokenBuffer$Segment: java.lang.Object[] _tokens>;

        $r3[$i1] = $r1;

        $i0 = virtualinvoke $r2.<java.lang.Enum: int ordinal()>();

        $l2 = (long) $i0;

        if $i1 <= 0 goto label1;

        $i1 = $i1 << 2;

        $l2 = $l2 << $i1;

     label1:
        $l3 = r0.<org.codehaus.jackson.util.TokenBuffer$Segment: long _tokenTypes>;

        $l2 = $l2 | $l3;

        r0.<org.codehaus.jackson.util.TokenBuffer$Segment: long _tokenTypes> = $l2;

        return;
    }

    public org.codehaus.jackson.JsonToken type(int)
    {
        org.codehaus.jackson.util.TokenBuffer$Segment r0;
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.JsonToken[] $r1;
        int $i0;
        long $l1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Segment;

        $i0 := @parameter0: int;

        $l1 = r0.<org.codehaus.jackson.util.TokenBuffer$Segment: long _tokenTypes>;

        if $i0 <= 0 goto label1;

        $i0 = $i0 << 2;

        $l1 = $l1 >> $i0;

     label1:
        $i0 = (int) $l1;

        $i0 = $i0 & 15;

        $r1 = <org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.JsonToken[] TOKEN_TYPES_BY_INDEX>;

        $r2 = $r1[$i0];

        return $r2;
    }
}
