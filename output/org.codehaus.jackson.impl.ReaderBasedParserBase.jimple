public abstract class org.codehaus.jackson.impl.ReaderBasedParserBase extends org.codehaus.jackson.impl.JsonNumericParserBase
{
    public char[] _inputBuffer;
    public java.io.Reader _reader;

    public void <init>(org.codehaus.jackson.io.IOContext, int, java.io.Reader)
    {
        org.codehaus.jackson.io.IOContext $r3;
        int $i0;
        char[] $r2;
        org.codehaus.jackson.impl.ReaderBasedParserBase r0;
        java.io.Reader $r1;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParserBase;

        $r3 := @parameter0: org.codehaus.jackson.io.IOContext;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.io.Reader;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void <init>(org.codehaus.jackson.io.IOContext,int)>($r3, $i0);

        r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: java.io.Reader _reader> = $r1;

        $r2 = virtualinvoke $r3.<org.codehaus.jackson.io.IOContext: char[] allocTokenBuffer()>();

        r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer> = $r2;

        return;
    }

    public void _closeInput()
    {
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.impl.ReaderBasedParserBase r0;
        java.io.Reader $r1;
        org.codehaus.jackson.JsonParser$Feature $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: java.io.Reader _reader>;

        if $r1 == null goto label3;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.io.IOContext: boolean isResourceManaged()>();

        if $z0 != 0 goto label1;

        $r3 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature AUTO_CLOSE_SOURCE>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r3);

        if $z0 == 0 goto label2;

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: java.io.Reader _reader>;

        virtualinvoke $r1.<java.io.Reader: void close()>();

     label2:
        r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: java.io.Reader _reader> = null;

     label3:
        return;
    }

    public final boolean _matchToken(java.lang.String, int)
    {
        char $c4, $c5;
        org.codehaus.jackson.impl.ReaderBasedParserBase r0;
        int $i0, $i1, $i2, $i3;
        char[] $r2;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParserBase;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

     label1:
        $i2 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i3 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i2 < $i3 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean loadMore()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportInvalidEOFInValue()>();

     label2:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i2 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $c4 = $r2[$i2];

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i2 = (int) $c4;

        $i3 = (int) $c5;

        if $i2 == $i3 goto label3;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: void _reportInvalidToken(java.lang.String,java.lang.String)>($r3, "\'null\', \'true\', \'false\' or NaN");

     label3:
        $i2 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i2 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i2;

        $i0 = $i0 + 1;

        if $i0 < $i1 goto label1;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i2 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i1 < $i2 goto label4;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean loadMore()>();

        if $z0 != 0 goto label4;

        return 1;

     label4:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $c4 = $r2[$i1];

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c4);

        if $z0 == 0 goto label5;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i1 = $i1 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: void _reportInvalidToken(java.lang.String,java.lang.String)>($r1, "\'null\', \'true\', \'false\' or NaN");

     label5:
        return 1;
    }

    public void _releaseBuffers()
    {
        char[] $r1;
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.impl.ReaderBasedParserBase r0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParserBase;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _releaseBuffers()>();

        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        if $r1 == null goto label1;

        r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer> = null;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        virtualinvoke $r2.<org.codehaus.jackson.io.IOContext: void releaseTokenBuffer(char[])>($r1);

     label1:
        return;
    }

    public void _reportInvalidToken(java.lang.String, java.lang.String)
    {
        char $c2;
        org.codehaus.jackson.impl.ReaderBasedParserBase r0;
        int $i0, $i1;
        char[] $r4;
        java.lang.StringBuilder $r3, $r5;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParserBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

     label1:
        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i0 < $i1 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean loadMore()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r4 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $c2 = $r4[$i0];

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c2);

        if $z0 != 0 goto label4;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized token \'");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': was expecting ");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportError(java.lang.String)>($r1);

        return;

     label4:
        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i0 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i0;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label1;
    }

    public java.lang.Object getInputSource()
    {
        org.codehaus.jackson.impl.ReaderBasedParserBase r0;
        java.io.Reader r1;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParserBase;

        r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: java.io.Reader _reader>;

        return r1;
    }

    public char getNextChar(java.lang.String)
    {
        int $i0, $i1;
        char[] $r2;
        char $c2;
        org.codehaus.jackson.impl.ReaderBasedParserBase r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParserBase;

        $r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i0 < $i1 goto label1;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean loadMore()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportInvalidEOF(java.lang.String)>($r1);

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i1;

        $c2 = $r2[$i0];

        return $c2;
    }

    public final boolean loadMore()
    {
        long $l0, $l2;
        java.io.IOException $r3;
        org.codehaus.jackson.impl.ReaderBasedParserBase r0;
        java.io.Reader $r1;
        int $i1, $i3;
        char[] $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParserBase;

        $l0 = r0.<org.codehaus.jackson.impl.JsonParserBase: long _currInputProcessed>;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        $l2 = (long) $i1;

        $l0 = $l0 + $l2;

        r0.<org.codehaus.jackson.impl.JsonParserBase: long _currInputProcessed> = $l0;

        $i3 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _currInputRowStart>;

        $i1 = $i3 - $i1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _currInputRowStart> = $i1;

        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: java.io.Reader _reader>;

        if $r1 == null goto label3;

        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i1 = lengthof $r2;

        $i1 = virtualinvoke $r1.<java.io.Reader: int read(char[],int,int)>($r2, 0, $i1);

        if $i1 <= 0 goto label1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = 0;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd> = $i1;

        return 1;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: void _closeInput()>();

        if $i1 == 0 goto label2;

        return 0;

     label2:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reader returned 0 characters when trying to read ");

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        return 0;
    }

    public int releaseBuffered(java.io.Writer)
    {
        int $i0, $i1;
        java.io.Writer $r1;
        char[] $r2;
        org.codehaus.jackson.impl.ReaderBasedParserBase r0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedParserBase;

        $r1 := @parameter0: java.io.Writer;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i1 = $i1 - $i0;

        if $i1 >= 1 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        virtualinvoke $r1.<java.io.Writer: void write(char[],int,int)>($r2, $i0, $i1);

        return $i1;
    }
}
