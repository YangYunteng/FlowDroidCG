public abstract class org.codehaus.jackson.JsonGenerator extends java.lang.Object implements java.io.Closeable, org.codehaus.jackson.Versioned
{
    public org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter;

    public void <init>()
    {
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean canUseSchema(org.codehaus.jackson.FormatSchema)
    {
        org.codehaus.jackson.FormatSchema $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: org.codehaus.jackson.FormatSchema;

        return 0;
    }

    public abstract void close();

    public org.codehaus.jackson.JsonGenerator configure(org.codehaus.jackson.JsonGenerator$Feature, boolean)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        org.codehaus.jackson.JsonGenerator r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: org.codehaus.jackson.JsonGenerator enable(org.codehaus.jackson.JsonGenerator$Feature)>($r1);

        return r0;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: org.codehaus.jackson.JsonGenerator disable(org.codehaus.jackson.JsonGenerator$Feature)>($r1);

        return r0;
    }

    public abstract void copyCurrentEvent(org.codehaus.jackson.JsonParser);

    public abstract void copyCurrentStructure(org.codehaus.jackson.JsonParser);

    public abstract org.codehaus.jackson.JsonGenerator disable(org.codehaus.jackson.JsonGenerator$Feature);

    public void disableFeature(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: org.codehaus.jackson.JsonGenerator disable(org.codehaus.jackson.JsonGenerator$Feature)>($r1);

        return;
    }

    public abstract org.codehaus.jackson.JsonGenerator enable(org.codehaus.jackson.JsonGenerator$Feature);

    public void enableFeature(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: org.codehaus.jackson.JsonGenerator enable(org.codehaus.jackson.JsonGenerator$Feature)>($r1);

        return;
    }

    public abstract void flush();

    public org.codehaus.jackson.io.CharacterEscapes getCharacterEscapes()
    {
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        return null;
    }

    public abstract org.codehaus.jackson.ObjectCodec getCodec();

    public int getHighestEscapedChar()
    {
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        return 0;
    }

    public abstract org.codehaus.jackson.JsonStreamContext getOutputContext();

    public java.lang.Object getOutputTarget()
    {
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        return null;
    }

    public abstract boolean isClosed();

    public abstract boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature);

    public boolean isFeatureEnabled(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        org.codehaus.jackson.JsonGenerator r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r1);

        return $z0;
    }

    public org.codehaus.jackson.JsonGenerator setCharacterEscapes(org.codehaus.jackson.io.CharacterEscapes)
    {
        org.codehaus.jackson.io.CharacterEscapes $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: org.codehaus.jackson.io.CharacterEscapes;

        return r0;
    }

    public abstract org.codehaus.jackson.JsonGenerator setCodec(org.codehaus.jackson.ObjectCodec);

    public void setFeature(org.codehaus.jackson.JsonGenerator$Feature, boolean)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        org.codehaus.jackson.JsonGenerator r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $z0 := @parameter1: boolean;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: org.codehaus.jackson.JsonGenerator configure(org.codehaus.jackson.JsonGenerator$Feature,boolean)>($r1, $z0);

        return;
    }

    public org.codehaus.jackson.JsonGenerator setHighestNonEscapedChar(int)
    {
        int $i0;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $i0 := @parameter0: int;

        return r0;
    }

    public org.codehaus.jackson.JsonGenerator setPrettyPrinter(org.codehaus.jackson.PrettyPrinter)
    {
        org.codehaus.jackson.PrettyPrinter $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: org.codehaus.jackson.PrettyPrinter;

        r0.<org.codehaus.jackson.JsonGenerator: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter> = $r1;

        return r0;
    }

    public void setSchema(org.codehaus.jackson.FormatSchema)
    {
        org.codehaus.jackson.FormatSchema $r3;
        java.lang.UnsupportedOperationException $r1;
        org.codehaus.jackson.JsonGenerator r0;
        java.lang.StringBuilder $r2;
        java.lang.Class $r4;
        java.lang.String $r5;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter0: org.codehaus.jackson.FormatSchema;

        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Generator of type ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not support schema of type \'");

        $r5 = interfaceinvoke $r3.<org.codehaus.jackson.FormatSchema: java.lang.String getSchemaType()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public abstract org.codehaus.jackson.JsonGenerator useDefaultPrettyPrinter();

    public org.codehaus.jackson.Version version()
    {
        org.codehaus.jackson.Version $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 = staticinvoke <org.codehaus.jackson.Version: org.codehaus.jackson.Version unknownVersion()>();

        return $r1;
    }

    public final void writeArrayFieldStart(java.lang.String)
    {
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        return;
    }

    public abstract void writeBinary(org.codehaus.jackson.Base64Variant, byte[], int, int);

    public void writeBinary(byte[])
    {
        byte[] $r1;
        org.codehaus.jackson.JsonGenerator r0;
        int $i0;
        org.codehaus.jackson.Base64Variant $r2;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.codehaus.jackson.Base64Variants: org.codehaus.jackson.Base64Variant getDefaultVariant()>();

        $i0 = lengthof $r1;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeBinary(org.codehaus.jackson.Base64Variant,byte[],int,int)>($r2, $r1, 0, $i0);

        return;
    }

    public void writeBinary(byte[], int, int)
    {
        byte[] $r1;
        org.codehaus.jackson.JsonGenerator r0;
        int $i0, $i1;
        org.codehaus.jackson.Base64Variant $r2;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = staticinvoke <org.codehaus.jackson.Base64Variants: org.codehaus.jackson.Base64Variant getDefaultVariant()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeBinary(org.codehaus.jackson.Base64Variant,byte[],int,int)>($r2, $r1, $i0, $i1);

        return;
    }

    public final void writeBinaryField(java.lang.String, byte[])
    {
        byte[] $r2;
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeBinary(byte[])>($r2);

        return;
    }

    public abstract void writeBoolean(boolean);

    public final void writeBooleanField(java.lang.String, boolean)
    {
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeBoolean(boolean)>($z0);

        return;
    }

    public abstract void writeEndArray();

    public abstract void writeEndObject();

    public abstract void writeFieldName(java.lang.String);

    public void writeFieldName(org.codehaus.jackson.SerializableString)
    {
        java.lang.String $r1;
        org.codehaus.jackson.SerializableString $r2;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter0: org.codehaus.jackson.SerializableString;

        $r1 = interfaceinvoke $r2.<org.codehaus.jackson.SerializableString: java.lang.String getValue()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        return;
    }

    public void writeFieldName(org.codehaus.jackson.io.SerializedString)
    {
        org.codehaus.jackson.io.SerializedString $r2;
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter0: org.codehaus.jackson.io.SerializedString;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.io.SerializedString: java.lang.String getValue()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        return;
    }

    public abstract void writeNull();

    public final void writeNullField(java.lang.String)
    {
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeNull()>();

        return;
    }

    public abstract void writeNumber(double);

    public abstract void writeNumber(float);

    public abstract void writeNumber(int);

    public abstract void writeNumber(long);

    public abstract void writeNumber(java.lang.String);

    public abstract void writeNumber(java.math.BigDecimal);

    public abstract void writeNumber(java.math.BigInteger);

    public final void writeNumberField(java.lang.String, double)
    {
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;
        double $d0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        $d0 := @parameter1: double;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeNumber(double)>($d0);

        return;
    }

    public final void writeNumberField(java.lang.String, float)
    {
        float $f0;
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        $f0 := @parameter1: float;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeNumber(float)>($f0);

        return;
    }

    public final void writeNumberField(java.lang.String, int)
    {
        int $i0;
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        return;
    }

    public final void writeNumberField(java.lang.String, long)
    {
        long $l0;
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeNumber(long)>($l0);

        return;
    }

    public final void writeNumberField(java.lang.String, java.math.BigDecimal)
    {
        java.math.BigDecimal $r2;
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.math.BigDecimal;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeNumber(java.math.BigDecimal)>($r2);

        return;
    }

    public abstract void writeObject(java.lang.Object);

    public final void writeObjectField(java.lang.String, java.lang.Object)
    {
        java.lang.Object $r2;
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeObject(java.lang.Object)>($r2);

        return;
    }

    public final void writeObjectFieldStart(java.lang.String)
    {
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeStartObject()>();

        return;
    }

    public abstract void writeRaw(char);

    public abstract void writeRaw(java.lang.String);

    public abstract void writeRaw(java.lang.String, int, int);

    public abstract void writeRaw(char[], int, int);

    public abstract void writeRawUTF8String(byte[], int, int);

    public abstract void writeRawValue(java.lang.String);

    public abstract void writeRawValue(java.lang.String, int, int);

    public abstract void writeRawValue(char[], int, int);

    public abstract void writeStartArray();

    public abstract void writeStartObject();

    public abstract void writeString(java.lang.String);

    public void writeString(org.codehaus.jackson.SerializableString)
    {
        java.lang.String $r1;
        org.codehaus.jackson.SerializableString $r2;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter0: org.codehaus.jackson.SerializableString;

        $r1 = interfaceinvoke $r2.<org.codehaus.jackson.SerializableString: java.lang.String getValue()>();

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeString(java.lang.String)>($r1);

        return;
    }

    public abstract void writeString(char[], int, int);

    public void writeStringField(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.codehaus.jackson.JsonGenerator r0;

        r0 := @this: org.codehaus.jackson.JsonGenerator;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.jackson.JsonGenerator: void writeString(java.lang.String)>($r2);

        return;
    }

    public abstract void writeTree(org.codehaus.jackson.JsonNode);

    public abstract void writeUTF8String(byte[], int, int);
}
