public class com.google.firebase.remoteconfig.FirebaseRemoteConfig extends java.lang.Object
{
    public static final boolean DEFAULT_VALUE_FOR_BOOLEAN;
    public static final byte[] DEFAULT_VALUE_FOR_BYTE_ARRAY;
    public static final double DEFAULT_VALUE_FOR_DOUBLE;
    public static final long DEFAULT_VALUE_FOR_LONG;
    public static final java.lang.String DEFAULT_VALUE_FOR_STRING;
    public static final int LAST_FETCH_STATUS_FAILURE;
    public static final int LAST_FETCH_STATUS_NO_FETCH_YET;
    public static final int LAST_FETCH_STATUS_SUCCESS;
    public static final int LAST_FETCH_STATUS_THROTTLED;
    public static final java.lang.String TAG;
    public static final int VALUE_SOURCE_DEFAULT;
    public static final int VALUE_SOURCE_REMOTE;
    public static final int VALUE_SOURCE_STATIC;
    public final com.google.firebase.remoteconfig.internal.ConfigCacheClient activatedConfigsCache;
    public final android.content.Context context;
    public final com.google.firebase.remoteconfig.internal.ConfigCacheClient defaultConfigsCache;
    public final java.util.concurrent.Executor executor;
    public final com.google.firebase.remoteconfig.internal.ConfigFetchHandler fetchHandler;
    public final com.google.firebase.remoteconfig.internal.ConfigCacheClient fetchedConfigsCache;
    public final com.google.firebase.abt.FirebaseABTesting firebaseAbt;
    public final com.google.firebase.FirebaseApp firebaseApp;
    public final com.google.firebase.installations.FirebaseInstallationsApi firebaseInstallations;
    public final com.google.firebase.remoteconfig.internal.ConfigMetadataClient frcMetadata;
    public final com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler getHandler;

    static void <clinit>()
    {
        byte[] $r0;

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: int VALUE_SOURCE_REMOTE> = 2;

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: int VALUE_SOURCE_DEFAULT> = 1;

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.lang.String TAG> = "FirebaseRemoteConfig";

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: int LAST_FETCH_STATUS_THROTTLED> = 2;

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: int LAST_FETCH_STATUS_SUCCESS> = -1;

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: int LAST_FETCH_STATUS_NO_FETCH_YET> = 0;

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: int LAST_FETCH_STATUS_FAILURE> = 1;

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.lang.String DEFAULT_VALUE_FOR_STRING> = "";

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: long DEFAULT_VALUE_FOR_LONG> = 0L;

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: double DEFAULT_VALUE_FOR_DOUBLE> = 0.0;

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: boolean DEFAULT_VALUE_FOR_BOOLEAN> = 0;

        $r0 = newarray (byte)[0];

        <com.google.firebase.remoteconfig.FirebaseRemoteConfig: byte[] DEFAULT_VALUE_FOR_BYTE_ARRAY> = $r0;

        return;
    }

    public void <init>(android.content.Context, com.google.firebase.FirebaseApp, com.google.firebase.installations.FirebaseInstallationsApi, com.google.firebase.abt.FirebaseABTesting, java.util.concurrent.Executor, com.google.firebase.remoteconfig.internal.ConfigCacheClient, com.google.firebase.remoteconfig.internal.ConfigCacheClient, com.google.firebase.remoteconfig.internal.ConfigCacheClient, com.google.firebase.remoteconfig.internal.ConfigFetchHandler, com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler, com.google.firebase.remoteconfig.internal.ConfigMetadataClient)
    {
        com.google.firebase.remoteconfig.internal.ConfigFetchHandler $r9;
        android.content.Context $r1;
        java.util.concurrent.Executor $r5;
        com.google.firebase.abt.FirebaseABTesting $r4;
        com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler $r10;
        com.google.firebase.remoteconfig.internal.ConfigMetadataClient $r11;
        com.google.firebase.installations.FirebaseInstallationsApi $r3;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.firebase.remoteconfig.internal.ConfigCacheClient $r6, $r7, $r8;
        com.google.firebase.FirebaseApp $r2;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.google.firebase.FirebaseApp;

        $r3 := @parameter2: com.google.firebase.installations.FirebaseInstallationsApi;

        $r4 := @parameter3: com.google.firebase.abt.FirebaseABTesting;

        $r5 := @parameter4: java.util.concurrent.Executor;

        $r6 := @parameter5: com.google.firebase.remoteconfig.internal.ConfigCacheClient;

        $r7 := @parameter6: com.google.firebase.remoteconfig.internal.ConfigCacheClient;

        $r8 := @parameter7: com.google.firebase.remoteconfig.internal.ConfigCacheClient;

        $r9 := @parameter8: com.google.firebase.remoteconfig.internal.ConfigFetchHandler;

        $r10 := @parameter9: com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler;

        $r11 := @parameter10: com.google.firebase.remoteconfig.internal.ConfigMetadataClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: android.content.Context context> = $r1;

        r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.FirebaseApp firebaseApp> = $r2;

        r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.installations.FirebaseInstallationsApi firebaseInstallations> = $r3;

        r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.abt.FirebaseABTesting firebaseAbt> = $r4;

        r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.util.concurrent.Executor executor> = $r5;

        r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient fetchedConfigsCache> = $r6;

        r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient activatedConfigsCache> = $r7;

        r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient defaultConfigsCache> = $r8;

        r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigFetchHandler fetchHandler> = $r9;

        r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler getHandler> = $r10;

        r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigMetadataClient frcMetadata> = $r11;

        return;
    }

    public static boolean access$lambda$0(com.google.firebase.remoteconfig.FirebaseRemoteConfig, com.google.android.gms.tasks.Task)
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig $r1;
        com.google.android.gms.tasks.Task $r0;
        boolean $z0;

        $r1 := @parameter0: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r0 := @parameter1: com.google.android.gms.tasks.Task;

        $z0 = specialinvoke $r1.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: boolean processActivatePutTask(com.google.android.gms.tasks.Task)>($r0);

        return $z0;
    }

    public static com.google.firebase.remoteconfig.FirebaseRemoteConfig getInstance()
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig $r1;
        com.google.firebase.FirebaseApp $r0;

        $r0 = staticinvoke <com.google.firebase.FirebaseApp: com.google.firebase.FirebaseApp getInstance()>();

        $r1 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.FirebaseRemoteConfig getInstance(com.google.firebase.FirebaseApp)>($r0);

        return $r1;
    }

    public static com.google.firebase.remoteconfig.FirebaseRemoteConfig getInstance(com.google.firebase.FirebaseApp)
    {
        com.google.firebase.remoteconfig.RemoteConfigComponent $r2;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig $r3;
        java.lang.Object $r1;
        com.google.firebase.FirebaseApp $r0;

        $r0 := @parameter0: com.google.firebase.FirebaseApp;

        $r1 = virtualinvoke $r0.<com.google.firebase.FirebaseApp: java.lang.Object get(java.lang.Class)>(class "Lcom/google/firebase/remoteconfig/RemoteConfigComponent;");

        $r2 = (com.google.firebase.remoteconfig.RemoteConfigComponent) $r1;

        $r3 = virtualinvoke $r2.<com.google.firebase.remoteconfig.RemoteConfigComponent: com.google.firebase.remoteconfig.FirebaseRemoteConfig getDefault()>();

        return $r3;
    }

    public static boolean isFetchedFresh(com.google.firebase.remoteconfig.internal.ConfigContainer, com.google.firebase.remoteconfig.internal.ConfigContainer)
    {
        java.util.Date $r2, $r3;
        com.google.firebase.remoteconfig.internal.ConfigContainer $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: com.google.firebase.remoteconfig.internal.ConfigContainer;

        $r1 := @parameter1: com.google.firebase.remoteconfig.internal.ConfigContainer;

        if $r1 == null goto label2;

        $r2 = virtualinvoke $r0.<com.google.firebase.remoteconfig.internal.ConfigContainer: java.util.Date getFetchTime()>();

        $r3 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigContainer: java.util.Date getFetchTime()>();

        $z0 = virtualinvoke $r2.<java.util.Date: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static com.google.android.gms.tasks.Task lambda$activate$3(com.google.firebase.remoteconfig.FirebaseRemoteConfig, com.google.android.gms.tasks.Task, com.google.android.gms.tasks.Task, com.google.android.gms.tasks.Task)
    {
        java.util.concurrent.Executor $r9;
        com.google.android.gms.tasks.Task $r1, $r2, $r3;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig $r0;
        com.google.android.gms.tasks.Continuation $r10;
        java.lang.Boolean $r4;
        java.lang.Object $r5;
        com.google.firebase.remoteconfig.internal.ConfigContainer $r6, $r7;
        com.google.firebase.remoteconfig.internal.ConfigCacheClient $r8;
        boolean $z0;

        $r0 := @parameter0: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 := @parameter1: com.google.android.gms.tasks.Task;

        $r2 := @parameter2: com.google.android.gms.tasks.Task;

        $r3 := @parameter3: com.google.android.gms.tasks.Task;

        $z0 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: boolean isSuccessful()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: java.lang.Object getResult()>();

        if $r5 != null goto label1;

        goto label3;

     label1:
        $r5 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: java.lang.Object getResult()>();

        $r6 = (com.google.firebase.remoteconfig.internal.ConfigContainer) $r5;

        $z0 = virtualinvoke $r2.<com.google.android.gms.tasks.Task: boolean isSuccessful()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r2.<com.google.android.gms.tasks.Task: java.lang.Object getResult()>();

        $r7 = (com.google.firebase.remoteconfig.internal.ConfigContainer) $r5;

        $z0 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig: boolean isFetchedFresh(com.google.firebase.remoteconfig.internal.ConfigContainer,com.google.firebase.remoteconfig.internal.ConfigContainer)>($r6, $r7);

        if $z0 != 0 goto label2;

        $r1 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task forResult(java.lang.Object)>($r4);

        return $r1;

     label2:
        $r8 = $r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient activatedConfigsCache>;

        $r1 = virtualinvoke $r8.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task put(com.google.firebase.remoteconfig.internal.ConfigContainer)>($r6);

        $r9 = $r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.util.concurrent.Executor executor>;

        $r10 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig$$Lambda$11: com.google.android.gms.tasks.Continuation lambdaFactory$(com.google.firebase.remoteconfig.FirebaseRemoteConfig)>($r0);

        $r1 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task continueWith(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation)>($r9, $r10);

        return $r1;

     label3:
        $r1 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task forResult(java.lang.Object)>($r4);

        return $r1;
    }

    public static void lambda$activateFetched$2(com.google.firebase.remoteconfig.FirebaseRemoteConfig, com.google.firebase.remoteconfig.internal.ConfigContainer)
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig $r0;
        com.google.firebase.remoteconfig.internal.ConfigCacheClient $r1;
        org.json.JSONArray $r2;
        com.google.firebase.remoteconfig.internal.ConfigContainer $r3;

        $r0 := @parameter0: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r3 := @parameter1: com.google.firebase.remoteconfig.internal.ConfigContainer;

        $r1 = $r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient fetchedConfigsCache>;

        virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: void clear()>();

        $r2 = virtualinvoke $r3.<com.google.firebase.remoteconfig.internal.ConfigContainer: org.json.JSONArray getAbtExperiments()>();

        virtualinvoke $r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: void updateAbtWithActivatedExperiments(org.json.JSONArray)>($r2);

        return;
    }

    public static com.google.firebase.remoteconfig.FirebaseRemoteConfigInfo lambda$ensureInitialized$0(com.google.android.gms.tasks.Task, com.google.android.gms.tasks.Task)
    {
        java.lang.Object $r1;
        com.google.android.gms.tasks.Task $r0, $r2;
        com.google.firebase.remoteconfig.FirebaseRemoteConfigInfo $r3;

        $r2 := @parameter0: com.google.android.gms.tasks.Task;

        $r0 := @parameter1: com.google.android.gms.tasks.Task;

        $r1 = virtualinvoke $r2.<com.google.android.gms.tasks.Task: java.lang.Object getResult()>();

        $r3 = (com.google.firebase.remoteconfig.FirebaseRemoteConfigInfo) $r1;

        return $r3;
    }

    public static com.google.android.gms.tasks.Task lambda$fetch$4(com.google.firebase.remoteconfig.internal.ConfigFetchHandler$FetchResponse)
    {
        com.google.firebase.remoteconfig.internal.ConfigFetchHandler$FetchResponse $r1;
        com.google.android.gms.tasks.Task $r0;

        $r1 := @parameter0: com.google.firebase.remoteconfig.internal.ConfigFetchHandler$FetchResponse;

        $r0 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task forResult(java.lang.Object)>(null);

        return $r0;
    }

    public static com.google.android.gms.tasks.Task lambda$fetch$5(com.google.firebase.remoteconfig.internal.ConfigFetchHandler$FetchResponse)
    {
        com.google.firebase.remoteconfig.internal.ConfigFetchHandler$FetchResponse $r1;
        com.google.android.gms.tasks.Task $r0;

        $r1 := @parameter0: com.google.firebase.remoteconfig.internal.ConfigFetchHandler$FetchResponse;

        $r0 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task forResult(java.lang.Object)>(null);

        return $r0;
    }

    public static com.google.android.gms.tasks.Task lambda$fetchAndActivate$1(com.google.firebase.remoteconfig.FirebaseRemoteConfig, java.lang.Void)
    {
        java.lang.Void $r0;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig $r2;
        com.google.android.gms.tasks.Task $r1;

        $r2 := @parameter0: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r0 := @parameter1: java.lang.Void;

        $r1 = virtualinvoke $r2.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.android.gms.tasks.Task activate()>();

        return $r1;
    }

    public static java.lang.Void lambda$reset$7(com.google.firebase.remoteconfig.FirebaseRemoteConfig)
    {
        com.google.firebase.remoteconfig.internal.ConfigMetadataClient $r2;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig $r0;
        com.google.firebase.remoteconfig.internal.ConfigCacheClient $r1;

        $r0 := @parameter0: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 = $r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient activatedConfigsCache>;

        virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: void clear()>();

        $r1 = $r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient fetchedConfigsCache>;

        virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: void clear()>();

        $r1 = $r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient defaultConfigsCache>;

        virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: void clear()>();

        $r2 = $r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigMetadataClient frcMetadata>;

        virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigMetadataClient: void clear()>();

        return null;
    }

    public static java.lang.Void lambda$setConfigSettingsAsync$6(com.google.firebase.remoteconfig.FirebaseRemoteConfig, com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings)
    {
        com.google.firebase.remoteconfig.internal.ConfigMetadataClient $r2;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig $r1;
        com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings $r0;

        $r1 := @parameter0: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r0 := @parameter1: com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings;

        $r2 = $r1.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigMetadataClient frcMetadata>;

        virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigMetadataClient: void setConfigSettings(com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings)>($r0);

        return null;
    }

    public static com.google.android.gms.tasks.Task lambda$setDefaultsWithStringsMapAsync$8(com.google.firebase.remoteconfig.internal.ConfigContainer)
    {
        com.google.android.gms.tasks.Task $r0;
        com.google.firebase.remoteconfig.internal.ConfigContainer $r1;

        $r1 := @parameter0: com.google.firebase.remoteconfig.internal.ConfigContainer;

        $r0 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task forResult(java.lang.Object)>(null);

        return $r0;
    }

    private boolean processActivatePutTask(com.google.android.gms.tasks.Task)
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.lang.Object $r3;
        com.google.android.gms.tasks.Task $r1;
        com.google.firebase.remoteconfig.internal.ConfigCacheClient $r2;
        com.google.firebase.remoteconfig.internal.ConfigContainer $r4;
        org.json.JSONArray $r5;
        boolean $z0;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 := @parameter0: com.google.android.gms.tasks.Task;

        $z0 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: boolean isSuccessful()>();

        if $z0 == 0 goto label3;

        $r2 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient fetchedConfigsCache>;

        virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: void clear()>();

        $r3 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: java.lang.Object getResult()>();

        if $r3 == null goto label1;

        $r3 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: java.lang.Object getResult()>();

        $r4 = (com.google.firebase.remoteconfig.internal.ConfigContainer) $r3;

        $r5 = virtualinvoke $r4.<com.google.firebase.remoteconfig.internal.ConfigContainer: org.json.JSONArray getAbtExperiments()>();

        virtualinvoke r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: void updateAbtWithActivatedExperiments(org.json.JSONArray)>($r5);

        goto label2;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FirebaseRemoteConfig", "Activated configs written to disk are null.");

     label2:
        return 1;

     label3:
        return 0;
    }

    private void setDefaultsWithStringsMap(java.util.Map)
    {
        org.json.JSONException $r5;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.firebase.remoteconfig.internal.ConfigContainer$Builder $r2;
        java.util.Map $r1;
        com.google.firebase.remoteconfig.internal.ConfigContainer $r3;
        com.google.firebase.remoteconfig.internal.ConfigCacheClient $r4;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 := @parameter0: java.util.Map;

     label1:
        $r2 = staticinvoke <com.google.firebase.remoteconfig.internal.ConfigContainer: com.google.firebase.remoteconfig.internal.ConfigContainer$Builder newBuilder()>();

        $r2 = virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigContainer$Builder: com.google.firebase.remoteconfig.internal.ConfigContainer$Builder replaceConfigsWith(java.util.Map)>($r1);

        $r3 = virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigContainer$Builder: com.google.firebase.remoteconfig.internal.ConfigContainer build()>();

     label2:
        $r4 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient defaultConfigsCache>;

     label3:
        virtualinvoke $r4.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task putWithoutWaitingForDiskWrite(com.google.firebase.remoteconfig.internal.ConfigContainer)>($r3);

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FirebaseRemoteConfig", "The provided defaults map could not be processed.", $r5);

        return;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label5;
    }

    private com.google.android.gms.tasks.Task setDefaultsWithStringsMapAsync(java.util.Map)
    {
        com.google.android.gms.tasks.SuccessContinuation $r6;
        com.google.android.gms.tasks.Task $r5;
        org.json.JSONException $r7;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.firebase.remoteconfig.internal.ConfigContainer$Builder $r2;
        java.util.Map $r1;
        com.google.firebase.remoteconfig.internal.ConfigContainer $r3;
        com.google.firebase.remoteconfig.internal.ConfigCacheClient $r4;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 := @parameter0: java.util.Map;

     label1:
        $r2 = staticinvoke <com.google.firebase.remoteconfig.internal.ConfigContainer: com.google.firebase.remoteconfig.internal.ConfigContainer$Builder newBuilder()>();

        $r2 = virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigContainer$Builder: com.google.firebase.remoteconfig.internal.ConfigContainer$Builder replaceConfigsWith(java.util.Map)>($r1);

        $r3 = virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigContainer$Builder: com.google.firebase.remoteconfig.internal.ConfigContainer build()>();

     label2:
        $r4 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient defaultConfigsCache>;

        $r5 = virtualinvoke $r4.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task put(com.google.firebase.remoteconfig.internal.ConfigContainer)>($r3);

        $r6 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig$$Lambda$10: com.google.android.gms.tasks.SuccessContinuation lambdaFactory$()>();

        $r5 = virtualinvoke $r5.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task onSuccessTask(com.google.android.gms.tasks.SuccessContinuation)>($r6);

        return $r5;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FirebaseRemoteConfig", "The provided defaults map could not be processed.", $r7);

        $r5 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task forResult(java.lang.Object)>(null);

        return $r5;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    public static java.util.List toExperimentInfoMaps(org.json.JSONArray)
    {
        java.util.Iterator $r4;
        java.util.HashMap $r2;
        java.util.ArrayList $r1;
        org.json.JSONObject $r3;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String $r6, $r7;
        org.json.JSONArray $r0;
        boolean $z0;

        $r0 := @parameter0: org.json.JSONArray;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r0.<org.json.JSONArray: int length()>();

        if $i0 >= $i1 goto label4;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = virtualinvoke $r0.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

        $r4 = virtualinvoke $r3.<org.json.JSONObject: java.util.Iterator keys()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke $r3.<org.json.JSONObject: java.lang.String getString(java.lang.String)>($r6);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label2;

     label3:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label4:
        return $r1;
    }

    public com.google.android.gms.tasks.Task activate()
    {
        java.util.concurrent.Executor $r6;
        com.google.android.gms.tasks.Task $r2, $r3, $r5;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.android.gms.tasks.Continuation $r7;
        com.google.firebase.remoteconfig.internal.ConfigCacheClient $r1;
        com.google.android.gms.tasks.Task[] $r4;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient fetchedConfigsCache>;

        $r2 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task get()>();

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient activatedConfigsCache>;

        $r3 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task get()>();

        $r4 = newarray (com.google.android.gms.tasks.Task)[2];

        $r4[0] = $r2;

        $r4[1] = $r3;

        $r5 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task whenAllComplete(com.google.android.gms.tasks.Task[])>($r4);

        $r6 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.util.concurrent.Executor executor>;

        $r7 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig$$Lambda$5: com.google.android.gms.tasks.Continuation lambdaFactory$(com.google.firebase.remoteconfig.FirebaseRemoteConfig,com.google.android.gms.tasks.Task,com.google.android.gms.tasks.Task)>(r0, $r2, $r3);

        $r2 = virtualinvoke $r5.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task continueWithTask(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation)>($r6, $r7);

        return $r2;
    }

    public boolean activateFetched()
    {
        java.util.concurrent.Executor $r5;
        com.google.android.gms.tasks.Task $r4;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.android.gms.tasks.OnSuccessListener $r6;
        com.google.firebase.remoteconfig.internal.ConfigCacheClient $r1;
        com.google.firebase.remoteconfig.internal.ConfigContainer $r2, $r3;
        boolean $z0;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient fetchedConfigsCache>;

        $r2 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.firebase.remoteconfig.internal.ConfigContainer getBlocking()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient activatedConfigsCache>;

        $r3 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.firebase.remoteconfig.internal.ConfigContainer getBlocking()>();

        $z0 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig: boolean isFetchedFresh(com.google.firebase.remoteconfig.internal.ConfigContainer,com.google.firebase.remoteconfig.internal.ConfigContainer)>($r2, $r3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient activatedConfigsCache>;

        $r4 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task putWithoutWaitingForDiskWrite(com.google.firebase.remoteconfig.internal.ConfigContainer)>($r2);

        $r5 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.util.concurrent.Executor executor>;

        $r6 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig$$Lambda$4: com.google.android.gms.tasks.OnSuccessListener lambdaFactory$(com.google.firebase.remoteconfig.FirebaseRemoteConfig)>(r0);

        virtualinvoke $r4.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task addOnSuccessListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnSuccessListener)>($r5, $r6);

        return 1;
    }

    public com.google.android.gms.tasks.Task ensureInitialized()
    {
        java.util.concurrent.Executor $r5;
        java.util.concurrent.Callable $r6;
        com.google.android.gms.tasks.Task $r2, $r3, $r4, $r7, $r9, $r10;
        com.google.firebase.installations.FirebaseInstallationsApi $r8;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.android.gms.tasks.Continuation $r12;
        com.google.firebase.remoteconfig.internal.ConfigCacheClient $r1;
        com.google.android.gms.tasks.Task[] $r11;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient activatedConfigsCache>;

        $r2 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task get()>();

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient defaultConfigsCache>;

        $r3 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task get()>();

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient fetchedConfigsCache>;

        $r4 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task get()>();

        $r5 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.util.concurrent.Executor executor>;

        $r6 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig$$Lambda$1: java.util.concurrent.Callable lambdaFactory$(com.google.firebase.remoteconfig.FirebaseRemoteConfig)>(r0);

        $r7 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task call(java.util.concurrent.Executor,java.util.concurrent.Callable)>($r5, $r6);

        $r8 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.installations.FirebaseInstallationsApi firebaseInstallations>;

        $r9 = interfaceinvoke $r8.<com.google.firebase.installations.FirebaseInstallationsApi: com.google.android.gms.tasks.Task getId()>();

        $r8 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.installations.FirebaseInstallationsApi firebaseInstallations>;

        $r10 = interfaceinvoke $r8.<com.google.firebase.installations.FirebaseInstallationsApi: com.google.android.gms.tasks.Task getToken(boolean)>(0);

        $r11 = newarray (com.google.android.gms.tasks.Task)[6];

        $r11[0] = $r2;

        $r11[1] = $r3;

        $r11[2] = $r4;

        $r11[3] = $r7;

        $r11[4] = $r9;

        $r11[5] = $r10;

        $r2 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task whenAllComplete(com.google.android.gms.tasks.Task[])>($r11);

        $r5 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.util.concurrent.Executor executor>;

        $r12 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig$$Lambda$2: com.google.android.gms.tasks.Continuation lambdaFactory$(com.google.android.gms.tasks.Task)>($r7);

        $r7 = virtualinvoke $r2.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task continueWith(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation)>($r5, $r12);

        return $r7;
    }

    public com.google.android.gms.tasks.Task fetch()
    {
        com.google.firebase.remoteconfig.internal.ConfigFetchHandler $r1;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.android.gms.tasks.SuccessContinuation $r3;
        com.google.android.gms.tasks.Task $r2;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigFetchHandler fetchHandler>;

        $r2 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigFetchHandler: com.google.android.gms.tasks.Task fetch()>();

        $r3 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig$$Lambda$6: com.google.android.gms.tasks.SuccessContinuation lambdaFactory$()>();

        $r2 = virtualinvoke $r2.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task onSuccessTask(com.google.android.gms.tasks.SuccessContinuation)>($r3);

        return $r2;
    }

    public com.google.android.gms.tasks.Task fetch(long)
    {
        com.google.firebase.remoteconfig.internal.ConfigFetchHandler $r1;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.android.gms.tasks.SuccessContinuation $r3;
        long $l0;
        com.google.android.gms.tasks.Task $r2;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $l0 := @parameter0: long;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigFetchHandler fetchHandler>;

        $r2 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigFetchHandler: com.google.android.gms.tasks.Task fetch(long)>($l0);

        $r3 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig$$Lambda$7: com.google.android.gms.tasks.SuccessContinuation lambdaFactory$()>();

        $r2 = virtualinvoke $r2.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task onSuccessTask(com.google.android.gms.tasks.SuccessContinuation)>($r3);

        return $r2;
    }

    public com.google.android.gms.tasks.Task fetchAndActivate()
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.util.concurrent.Executor $r1;
        com.google.android.gms.tasks.SuccessContinuation $r3;
        com.google.android.gms.tasks.Task $r2;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r2 = virtualinvoke r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.android.gms.tasks.Task fetch()>();

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.util.concurrent.Executor executor>;

        $r3 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig$$Lambda$3: com.google.android.gms.tasks.SuccessContinuation lambdaFactory$(com.google.firebase.remoteconfig.FirebaseRemoteConfig)>(r0);

        $r2 = virtualinvoke $r2.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task onSuccessTask(java.util.concurrent.Executor,com.google.android.gms.tasks.SuccessContinuation)>($r1, $r3);

        return $r2;
    }

    public java.util.Map getAll()
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler $r2;
        java.util.Map $r1;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r2 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler getHandler>;

        $r1 = virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler: java.util.Map getAll()>();

        return $r1;
    }

    public boolean getBoolean(java.lang.String)
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.lang.String $r2;
        com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler $r1;
        boolean $z0;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler getHandler>;

        $z0 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler: boolean getBoolean(java.lang.String)>($r2);

        return $z0;
    }

    public byte[] getByteArray(java.lang.String)
    {
        byte[] $r2;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.lang.String $r3;
        com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler $r1;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r3 := @parameter0: java.lang.String;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler getHandler>;

        $r2 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler: byte[] getByteArray(java.lang.String)>($r3);

        return $r2;
    }

    public double getDouble(java.lang.String)
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.lang.String $r1;
        com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler $r2;
        double $d0;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler getHandler>;

        $d0 = virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler: double getDouble(java.lang.String)>($r1);

        return $d0;
    }

    public com.google.firebase.remoteconfig.FirebaseRemoteConfigInfo getInfo()
    {
        com.google.firebase.remoteconfig.internal.ConfigMetadataClient $r2;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.firebase.remoteconfig.FirebaseRemoteConfigInfo $r1;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r2 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigMetadataClient frcMetadata>;

        $r1 = virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigMetadataClient: com.google.firebase.remoteconfig.FirebaseRemoteConfigInfo getInfo()>();

        return $r1;
    }

    public java.util.Set getKeysByPrefix(java.lang.String)
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.util.Set $r2;
        java.lang.String $r3;
        com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler $r1;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r3 := @parameter0: java.lang.String;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler getHandler>;

        $r2 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler: java.util.Set getKeysByPrefix(java.lang.String)>($r3);

        return $r2;
    }

    public long getLong(java.lang.String)
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        long $l0;
        java.lang.String $r1;
        com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler $r2;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler getHandler>;

        $l0 = virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler: long getLong(java.lang.String)>($r1);

        return $l0;
    }

    public java.lang.String getString(java.lang.String)
    {
        java.lang.String $r2;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler $r1;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler getHandler>;

        $r2 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler: java.lang.String getString(java.lang.String)>($r2);

        return $r2;
    }

    public com.google.firebase.remoteconfig.FirebaseRemoteConfigValue getValue(java.lang.String)
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.firebase.remoteconfig.FirebaseRemoteConfigValue $r2;
        java.lang.String $r3;
        com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler $r1;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r3 := @parameter0: java.lang.String;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler getHandler>;

        $r2 = virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler: com.google.firebase.remoteconfig.FirebaseRemoteConfigValue getValue(java.lang.String)>($r3);

        return $r2;
    }

    public com.google.android.gms.tasks.Task reset()
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.util.concurrent.Executor $r1;
        java.util.concurrent.Callable $r2;
        com.google.android.gms.tasks.Task $r3;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.util.concurrent.Executor executor>;

        $r2 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig$$Lambda$9: java.util.concurrent.Callable lambdaFactory$(com.google.firebase.remoteconfig.FirebaseRemoteConfig)>(r0);

        $r3 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task call(java.util.concurrent.Executor,java.util.concurrent.Callable)>($r1, $r2);

        return $r3;
    }

    public void setConfigSettings(com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings)
    {
        com.google.firebase.remoteconfig.internal.ConfigMetadataClient $r2;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings $r1;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 := @parameter0: com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings;

        $r2 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigMetadataClient frcMetadata>;

        virtualinvoke $r2.<com.google.firebase.remoteconfig.internal.ConfigMetadataClient: void setConfigSettingsWithoutWaitingOnDiskWrite(com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings)>($r1);

        return;
    }

    public com.google.android.gms.tasks.Task setConfigSettingsAsync(com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings)
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.util.concurrent.Executor $r1;
        com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings $r2;
        java.util.concurrent.Callable $r3;
        com.google.android.gms.tasks.Task $r4;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r2 := @parameter0: com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.util.concurrent.Executor executor>;

        $r3 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig$$Lambda$8: java.util.concurrent.Callable lambdaFactory$(com.google.firebase.remoteconfig.FirebaseRemoteConfig,com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings)>(r0, $r2);

        $r4 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task call(java.util.concurrent.Executor,java.util.concurrent.Callable)>($r1, $r3);

        return $r4;
    }

    public void setDefaults(int)
    {
        android.content.Context $r1;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.util.Map $r2;
        int $i0;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: android.content.Context context>;

        $r2 = staticinvoke <com.google.firebase.remoteconfig.internal.DefaultsXmlParser: java.util.Map getDefaultsFromXml(android.content.Context,int)>($r1, $i0);

        specialinvoke r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: void setDefaultsWithStringsMap(java.util.Map)>($r2);

        return;
    }

    public void setDefaults(java.util.Map)
    {
        byte[] $r10;
        java.util.Map$Entry $r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.util.HashMap $r1;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.util.Map $r2;
        java.lang.Object $r5, $r7;
        java.lang.String $r8, $r9;
        boolean $z0;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r2 := @parameter0: java.util.Map;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = $r5 instanceof byte[];

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = new java.lang.String;

        $r10 = (byte[]) $r5;

        specialinvoke $r9.<java.lang.String: void <init>(byte[])>($r10);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label1;

     label2:
        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label1;

     label3:
        specialinvoke r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: void setDefaultsWithStringsMap(java.util.Map)>($r1);

        return;
    }

    public com.google.android.gms.tasks.Task setDefaultsAsync(int)
    {
        android.content.Context $r1;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.util.Map $r2;
        int $i0;
        com.google.android.gms.tasks.Task $r3;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: android.content.Context context>;

        $r2 = staticinvoke <com.google.firebase.remoteconfig.internal.DefaultsXmlParser: java.util.Map getDefaultsFromXml(android.content.Context,int)>($r1, $i0);

        $r3 = specialinvoke r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.android.gms.tasks.Task setDefaultsWithStringsMapAsync(java.util.Map)>($r2);

        return $r3;
    }

    public com.google.android.gms.tasks.Task setDefaultsAsync(java.util.Map)
    {
        byte[] $r10;
        java.util.Map$Entry $r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.util.HashMap $r1;
        com.google.android.gms.tasks.Task $r11;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        java.util.Map $r2;
        java.lang.Object $r5, $r7;
        java.lang.String $r8, $r9;
        boolean $z0;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r2 := @parameter0: java.util.Map;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = $r5 instanceof byte[];

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = new java.lang.String;

        $r10 = (byte[]) $r5;

        specialinvoke $r9.<java.lang.String: void <init>(byte[])>($r10);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label1;

     label2:
        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label1;

     label3:
        $r11 = specialinvoke r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.android.gms.tasks.Task setDefaultsWithStringsMapAsync(java.util.Map)>($r1);

        return $r11;
    }

    public void startLoadingConfigsFromDisk()
    {
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.firebase.remoteconfig.internal.ConfigCacheClient $r1;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient activatedConfigsCache>;

        virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task get()>();

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient defaultConfigsCache>;

        virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task get()>();

        $r1 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.remoteconfig.internal.ConfigCacheClient fetchedConfigsCache>;

        virtualinvoke $r1.<com.google.firebase.remoteconfig.internal.ConfigCacheClient: com.google.android.gms.tasks.Task get()>();

        return;
    }

    public void updateAbtWithActivatedExperiments(org.json.JSONArray)
    {
        java.util.List $r1;
        com.google.firebase.abt.AbtException $r4;
        org.json.JSONException $r5;
        com.google.firebase.remoteconfig.FirebaseRemoteConfig r0;
        com.google.firebase.abt.FirebaseABTesting $r3;
        org.json.JSONArray $r2;

        r0 := @this: com.google.firebase.remoteconfig.FirebaseRemoteConfig;

        $r2 := @parameter0: org.json.JSONArray;

        $r3 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.abt.FirebaseABTesting firebaseAbt>;

        if $r3 != null goto label1;

        return;

     label1:
        $r1 = staticinvoke <com.google.firebase.remoteconfig.FirebaseRemoteConfig: java.util.List toExperimentInfoMaps(org.json.JSONArray)>($r2);

     label2:
        $r3 = r0.<com.google.firebase.remoteconfig.FirebaseRemoteConfig: com.google.firebase.abt.FirebaseABTesting firebaseAbt>;

     label3:
        virtualinvoke $r3.<com.google.firebase.abt.FirebaseABTesting: void replaceAllExperiments(java.util.List)>($r1);

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("FirebaseRemoteConfig", "Could not update ABT experiments.", $r4);

        return;

     label6:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FirebaseRemoteConfig", "Could not parse ABT experiments from the JSON response.", $r5);

        return;

        catch org.json.JSONException from label1 to label2 with label6;
        catch org.json.JSONException from label3 to label4 with label6;
        catch com.google.firebase.abt.AbtException from label1 to label2 with label5;
        catch com.google.firebase.abt.AbtException from label3 to label4 with label5;
    }
}
