public abstract class com.google.zxing.client.result.ResultParser extends java.lang.Object
{
    public static final java.util.regex.Pattern ALPHANUM;
    public static final java.util.regex.Pattern AMPERSAND;
    public static final java.lang.String BYTE_ORDER_MARK;
    public static final java.util.regex.Pattern DIGITS;
    public static final java.util.regex.Pattern EQUALS;
    public static final com.google.zxing.client.result.ResultParser[] PARSERS;

    static void <clinit>()
    {
        com.google.zxing.client.result.BizcardResultParser $r6;
        com.google.zxing.client.result.ISBNResultParser $r17;
        com.google.zxing.client.result.EmailAddressResultParser $r8;
        com.google.zxing.client.result.VEventResultParser $r7;
        com.google.zxing.client.result.ProductResultParser $r18;
        com.google.zxing.client.result.VCardResultParser $r5;
        com.google.zxing.client.result.GeoResultParser $r13;
        com.google.zxing.client.result.EmailDoCoMoResultParser $r3;
        com.google.zxing.client.result.AddressBookDoCoMoResultParser $r2;
        com.google.zxing.client.result.SMSMMSResultParser $r11;
        com.google.zxing.client.result.URIResultParser $r16;
        com.google.zxing.client.result.AddressBookAUResultParser $r4;
        com.google.zxing.client.result.TelResultParser $r10;
        com.google.zxing.client.result.SMSTOMMSTOResultParser $r12;
        com.google.zxing.client.result.SMTPResultParser $r9;
        com.google.zxing.client.result.URLTOResultParser $r15;
        com.google.zxing.client.result.ResultParser[] $r0;
        com.google.zxing.client.result.WifiResultParser $r14;
        com.google.zxing.client.result.ExpandedProductResultParser $r19;
        com.google.zxing.client.result.BookmarkDoCoMoResultParser $r1;
        java.util.regex.Pattern $r20;

        <com.google.zxing.client.result.ResultParser: java.lang.String BYTE_ORDER_MARK> = "\ufeff";

        $r0 = newarray (com.google.zxing.client.result.ResultParser)[19];

        $r1 = new com.google.zxing.client.result.BookmarkDoCoMoResultParser;

        specialinvoke $r1.<com.google.zxing.client.result.BookmarkDoCoMoResultParser: void <init>()>();

        $r0[0] = $r1;

        $r2 = new com.google.zxing.client.result.AddressBookDoCoMoResultParser;

        specialinvoke $r2.<com.google.zxing.client.result.AddressBookDoCoMoResultParser: void <init>()>();

        $r0[1] = $r2;

        $r3 = new com.google.zxing.client.result.EmailDoCoMoResultParser;

        specialinvoke $r3.<com.google.zxing.client.result.EmailDoCoMoResultParser: void <init>()>();

        $r0[2] = $r3;

        $r4 = new com.google.zxing.client.result.AddressBookAUResultParser;

        specialinvoke $r4.<com.google.zxing.client.result.AddressBookAUResultParser: void <init>()>();

        $r0[3] = $r4;

        $r5 = new com.google.zxing.client.result.VCardResultParser;

        specialinvoke $r5.<com.google.zxing.client.result.VCardResultParser: void <init>()>();

        $r0[4] = $r5;

        $r6 = new com.google.zxing.client.result.BizcardResultParser;

        specialinvoke $r6.<com.google.zxing.client.result.BizcardResultParser: void <init>()>();

        $r0[5] = $r6;

        $r7 = new com.google.zxing.client.result.VEventResultParser;

        specialinvoke $r7.<com.google.zxing.client.result.VEventResultParser: void <init>()>();

        $r0[6] = $r7;

        $r8 = new com.google.zxing.client.result.EmailAddressResultParser;

        specialinvoke $r8.<com.google.zxing.client.result.EmailAddressResultParser: void <init>()>();

        $r0[7] = $r8;

        $r9 = new com.google.zxing.client.result.SMTPResultParser;

        specialinvoke $r9.<com.google.zxing.client.result.SMTPResultParser: void <init>()>();

        $r0[8] = $r9;

        $r10 = new com.google.zxing.client.result.TelResultParser;

        specialinvoke $r10.<com.google.zxing.client.result.TelResultParser: void <init>()>();

        $r0[9] = $r10;

        $r11 = new com.google.zxing.client.result.SMSMMSResultParser;

        specialinvoke $r11.<com.google.zxing.client.result.SMSMMSResultParser: void <init>()>();

        $r0[10] = $r11;

        $r12 = new com.google.zxing.client.result.SMSTOMMSTOResultParser;

        specialinvoke $r12.<com.google.zxing.client.result.SMSTOMMSTOResultParser: void <init>()>();

        $r0[11] = $r12;

        $r13 = new com.google.zxing.client.result.GeoResultParser;

        specialinvoke $r13.<com.google.zxing.client.result.GeoResultParser: void <init>()>();

        $r0[12] = $r13;

        $r14 = new com.google.zxing.client.result.WifiResultParser;

        specialinvoke $r14.<com.google.zxing.client.result.WifiResultParser: void <init>()>();

        $r0[13] = $r14;

        $r15 = new com.google.zxing.client.result.URLTOResultParser;

        specialinvoke $r15.<com.google.zxing.client.result.URLTOResultParser: void <init>()>();

        $r0[14] = $r15;

        $r16 = new com.google.zxing.client.result.URIResultParser;

        specialinvoke $r16.<com.google.zxing.client.result.URIResultParser: void <init>()>();

        $r0[15] = $r16;

        $r17 = new com.google.zxing.client.result.ISBNResultParser;

        specialinvoke $r17.<com.google.zxing.client.result.ISBNResultParser: void <init>()>();

        $r0[16] = $r17;

        $r18 = new com.google.zxing.client.result.ProductResultParser;

        specialinvoke $r18.<com.google.zxing.client.result.ProductResultParser: void <init>()>();

        $r0[17] = $r18;

        $r19 = new com.google.zxing.client.result.ExpandedProductResultParser;

        specialinvoke $r19.<com.google.zxing.client.result.ExpandedProductResultParser: void <init>()>();

        $r0[18] = $r19;

        <com.google.zxing.client.result.ResultParser: com.google.zxing.client.result.ResultParser[] PARSERS> = $r0;

        $r20 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\d*");

        <com.google.zxing.client.result.ResultParser: java.util.regex.Pattern DIGITS> = $r20;

        $r20 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[a-zA-Z0-9]*");

        <com.google.zxing.client.result.ResultParser: java.util.regex.Pattern ALPHANUM> = $r20;

        $r20 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("&");

        <com.google.zxing.client.result.ResultParser: java.util.regex.Pattern AMPERSAND> = $r20;

        $r20 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("=");

        <com.google.zxing.client.result.ResultParser: java.util.regex.Pattern EQUALS> = $r20;

        return;
    }

    public void <init>()
    {
        com.google.zxing.client.result.ResultParser r0;

        r0 := @this: com.google.zxing.client.result.ResultParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void appendKeyValue(java.lang.CharSequence, java.util.Map)
    {
        java.lang.CharSequence $r2;
        java.lang.String[] $r4;
        java.lang.IllegalArgumentException $r1;
        java.util.Map $r0;
        int $i0;
        java.util.regex.Pattern $r3;
        java.lang.String $r5, $r6;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Map;

        $r3 = <com.google.zxing.client.result.ResultParser: java.util.regex.Pattern EQUALS>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>($r2, 2);

        $i0 = lengthof $r4;

        if $i0 != 2 goto label4;

        $r5 = $r4[0];

        $r6 = $r4[1];

     label1:
        $r6 = staticinvoke <com.google.zxing.client.result.ResultParser: java.lang.String urlDecode(java.lang.String)>($r6);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static java.lang.String getMassagedText(com.google.zxing.Result)
    {
        com.google.zxing.Result $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: com.google.zxing.Result;

        $r1 = virtualinvoke $r0.<com.google.zxing.Result: java.lang.String getText()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("\ufeff");

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        return $r1;
    }

    public static boolean isStringOfDigits(java.lang.CharSequence, int)
    {
        java.util.regex.Matcher $r2;
        java.lang.CharSequence $r0;
        int $i0, $i1;
        java.util.regex.Pattern $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        if $r0 == null goto label1;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 != $i1 goto label1;

        $r1 = <com.google.zxing.client.result.ResultParser: java.util.regex.Pattern DIGITS>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isSubstringOfAlphaNumeric(java.lang.CharSequence, int, int)
    {
        java.util.regex.Matcher $r2;
        java.lang.CharSequence $r0;
        int $i0, $i1, $i2;
        java.util.regex.Pattern $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r0 != null goto label1;

        return 0;

     label1:
        $i1 = $i1 + $i0;

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i2 < $i1 goto label2;

        $r1 = <com.google.zxing.client.result.ResultParser: java.util.regex.Pattern ALPHANUM>;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static boolean isSubstringOfDigits(java.lang.CharSequence, int, int)
    {
        java.util.regex.Matcher $r2;
        java.lang.CharSequence $r0;
        int $i0, $i1, $i2;
        java.util.regex.Pattern $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r0 != null goto label1;

        return 0;

     label1:
        $i1 = $i1 + $i0;

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i2 < $i1 goto label2;

        $r1 = <com.google.zxing.client.result.ResultParser: java.util.regex.Pattern DIGITS>;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static java.lang.String[] matchPrefixedField(java.lang.String, java.lang.String, char, boolean)
    {
        java.lang.Object[] $r6;
        java.lang.String[] $r5;
        java.util.ArrayList $r2, $r7;
        int $i1, $i2, $i3, $i4;
        java.lang.String $r0, $r1, $r3, $r4;
        boolean $z0, $z1;
        char $c0, $c5;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $c0 := @parameter2: char;

        $z0 := @parameter3: boolean;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r2 = null;

        $i2 = 0;

     label01:
        if $i2 >= $i1 goto label11;

        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String,int)>($r1, $i2);

        if $i2 >= 0 goto label02;

        goto label11;

     label02:
        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i2 + $i3;

        $z1 = 1;

        $i3 = $i2;

     label03:
        if $z1 == 0 goto label10;

        $i4 = (int) $c0;

        $i3 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>($i4, $i3);

        if $i3 >= 0 goto label05;

        $i3 = virtualinvoke $r0.<java.lang.String: int length()>();

     label04:
        $z1 = 0;

        goto label03;

     label05:
        $i4 = -1;

        $i4 = $i3 + $i4;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i4);

        $i4 = (int) $c5;

        if $i4 != 92 goto label06;

        $i3 = $i3 + 1;

        goto label03;

     label06:
        if $r2 != null goto label07;

        $r7 = new java.util.ArrayList;

        $r2 = $r7;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(3);

     label07:
        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        $r3 = staticinvoke <com.google.zxing.client.result.ResultParser: java.lang.String unescapeBackslash(java.lang.String)>($r3);

        $r4 = $r3;

        if $z0 == 0 goto label08;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

     label08:
        $z1 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label09;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

     label09:
        $i3 = $i3 + 1;

        goto label04;

     label10:
        $i2 = $i3;

        goto label01;

     label11:
        if $r2 == null goto label13;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label12;

        return null;

     label12:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r5 = newarray (java.lang.String)[$i1];

        $r6 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r5 = (java.lang.String[]) $r6;

        return $r5;

     label13:
        return null;
    }

    public static java.lang.String matchSinglePrefixedField(java.lang.String, java.lang.String, char, boolean)
    {
        char $c0;
        java.lang.String[] $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $c0 := @parameter2: char;

        $z0 := @parameter3: boolean;

        $r0 = staticinvoke <com.google.zxing.client.result.ResultParser: java.lang.String[] matchPrefixedField(java.lang.String,java.lang.String,char,boolean)>($r1, $r2, $c0, $z0);

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = $r0[0];

        return $r1;
    }

    public static void maybeAppend(java.lang.String, java.lang.StringBuilder)
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.StringBuilder;

        if $r0 == null goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

     label1:
        return;
    }

    public static void maybeAppend(java.lang.String[], java.lang.StringBuilder)
    {
        int $i0, $i1;
        java.lang.String[] $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.String[];

        $r1 := @parameter1: java.lang.StringBuilder;

        if $r0 == null goto label2;

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r0[$i1];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.lang.String[] maybeWrap(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = newarray (java.lang.String)[1];

        $r1[0] = $r0;

        return $r1;
    }

    public static int parseHexDigit(char)
    {
        int $i1;
        char $c0;
        byte $b2;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 < 48 goto label1;

        $i1 = (int) $c0;

        if $i1 > 57 goto label1;

        $i1 = (int) $c0;

        $i1 = $i1 - 48;

        return $i1;

     label1:
        $b2 = 97;

        $i1 = (int) $c0;

        if $i1 < 97 goto label3;

        $i1 = (int) $c0;

        if $i1 > 102 goto label3;

     label2:
        $i1 = (int) $c0;

        $i1 = $i1 - $b2;

        $i1 = $i1 + 10;

        return $i1;

     label3:
        $b2 = 65;

        $i1 = (int) $c0;

        if $i1 < 65 goto label4;

        $i1 = (int) $c0;

        if $i1 > 70 goto label4;

        goto label2;

     label4:
        $i1 = -1;

        return $i1;
    }

    public static java.util.Map parseNameValuePairs(java.lang.String)
    {
        int $i0, $i1;
        java.util.HashMap $r0;
        java.lang.String[] $r3;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(63);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(3);

        $r2 = <com.google.zxing.client.result.ResultParser: java.util.regex.Pattern AMPERSAND>;

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>($r1);

        $i0 = lengthof $r3;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r1 = $r3[$i1];

        staticinvoke <com.google.zxing.client.result.ResultParser: void appendKeyValue(java.lang.CharSequence,java.util.Map)>($r1, $r0);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r0;
    }

    public static com.google.zxing.client.result.ParsedResult parseResult(com.google.zxing.Result)
    {
        com.google.zxing.Result $r0;
        com.google.zxing.client.result.ResultParser $r2;
        com.google.zxing.client.result.ParsedResult $r3;
        com.google.zxing.client.result.TextParsedResult $r4;
        com.google.zxing.client.result.ResultParser[] $r1;
        int $i0, $i1;
        java.lang.String $r5;

        $r0 := @parameter0: com.google.zxing.Result;

        $r1 = <com.google.zxing.client.result.ResultParser: com.google.zxing.client.result.ResultParser[] PARSERS>;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r2 = $r1[$i1];

        $r3 = virtualinvoke $r2.<com.google.zxing.client.result.ResultParser: com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result)>($r0);

        if $r3 == null goto label2;

        return $r3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r4 = new com.google.zxing.client.result.TextParsedResult;

        $r5 = virtualinvoke $r0.<com.google.zxing.Result: java.lang.String getText()>();

        specialinvoke $r4.<com.google.zxing.client.result.TextParsedResult: void <init>(java.lang.String,java.lang.String)>($r5, null);

        return $r4;
    }

    public static java.lang.String unescapeBackslash(java.lang.String)
    {
        char $c4;
        int $i0, $i1, $i2, $i3;
        char[] $r2;
        java.lang.StringBuilder $r0, $r3;
        java.lang.String $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(92);

        $i1 = $i0;

        if $i0 >= 0 goto label1;

        return $r1;

     label1:
        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r3 = new java.lang.StringBuilder;

        $r0 = $r3;

        $i3 = -1;

        $i3 = $i2 + $i3;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i3);

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0);

        $z0 = 0;

     label2:
        if $i1 >= $i2 goto label6;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        if $z0 != 0 goto label4;

        $i0 = (int) $c4;

        if $i0 == 92 goto label3;

        goto label4;

     label3:
        $z0 = 1;

        goto label5;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $z0 = 0;

     label5:
        $i1 = $i1 + 1;

        goto label2;

     label6:
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String urlDecode(java.lang.String)
    {
        java.lang.IllegalStateException $r2;
        java.lang.String $r0;
        java.io.UnsupportedEncodingException $r1;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r0, "UTF-8");

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r1);

        throw $r2;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public abstract com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result);
}
