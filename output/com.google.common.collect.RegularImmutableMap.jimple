public final class com.google.common.collect.RegularImmutableMap extends com.google.common.collect.ImmutableMap
{
    public static final com.google.common.collect.ImmutableMap EMPTY;
    public static final double MAX_LOAD_FACTOR;
    public static final long serialVersionUID;
    public final transient java.util.Map$Entry[] entries;
    public final transient int mask;
    public final transient com.google.common.collect.ImmutableMapEntry[] table;

    static void <clinit>()
    {
        com.google.common.collect.RegularImmutableMap $r0;
        java.util.Map$Entry[] $r1;

        <com.google.common.collect.RegularImmutableMap: double MAX_LOAD_FACTOR> = 1.2;

        $r0 = new com.google.common.collect.RegularImmutableMap;

        $r1 = <com.google.common.collect.ImmutableMap: java.util.Map$Entry[] EMPTY_ENTRY_ARRAY>;

        specialinvoke $r0.<com.google.common.collect.RegularImmutableMap: void <init>(java.util.Map$Entry[],com.google.common.collect.ImmutableMapEntry[],int)>($r1, null, 0);

        <com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMap EMPTY> = $r0;

        return;
    }

    public void <init>(java.util.Map$Entry[], com.google.common.collect.ImmutableMapEntry[], int)
    {
        com.google.common.collect.ImmutableMapEntry[] $r2;
        com.google.common.collect.RegularImmutableMap r0;
        int $i0;
        java.util.Map$Entry[] $r1;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 := @parameter0: java.util.Map$Entry[];

        $r2 := @parameter1: com.google.common.collect.ImmutableMapEntry[];

        $i0 := @parameter2: int;

        specialinvoke r0.<com.google.common.collect.ImmutableMap: void <init>()>();

        r0.<com.google.common.collect.RegularImmutableMap: java.util.Map$Entry[] entries> = $r1;

        r0.<com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMapEntry[] table> = $r2;

        r0.<com.google.common.collect.RegularImmutableMap: int mask> = $i0;

        return;
    }

    public static void checkNoConflictInKeyBucket(java.lang.Object, java.util.Map$Entry, com.google.common.collect.ImmutableMapEntry)
    {
        java.util.Map$Entry $r1;
        com.google.common.collect.ImmutableMapEntry $r2;
        java.lang.Object $r0, $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.Map$Entry;

        $r2 := @parameter2: com.google.common.collect.ImmutableMapEntry;

     label1:
        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableEntry: java.lang.Object getKey()>();

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.collect.ImmutableMap: void checkNoConflict(boolean,java.lang.String,java.util.Map$Entry,java.util.Map$Entry)>($z0, "key", $r1, $r2);

        $r2 = virtualinvoke $r2.<com.google.common.collect.ImmutableMapEntry: com.google.common.collect.ImmutableMapEntry getNextInKeyBucket()>();

        goto label1;

     label2:
        return;
    }

    public static transient com.google.common.collect.RegularImmutableMap fromEntries(java.util.Map$Entry[])
    {
        int $i0;
        com.google.common.collect.RegularImmutableMap $r0;
        java.util.Map$Entry[] $r1;

        $r1 := @parameter0: java.util.Map$Entry[];

        $i0 = lengthof $r1;

        $r0 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap fromEntryArray(int,java.util.Map$Entry[])>($i0, $r1);

        return $r0;
    }

    public static com.google.common.collect.RegularImmutableMap fromEntryArray(int, java.util.Map$Entry[])
    {
        int $i0, $i1, $i2, $i3;
        java.util.Map$Entry[] $r0, $r4;
        boolean $z0;
        java.util.Map$Entry $r6;
        com.google.common.collect.ImmutableMapEntry $r1, $r9, $r10;
        com.google.common.collect.ImmutableMap $r2;
        com.google.common.collect.RegularImmutableMap $r3, $r12;
        com.google.common.collect.ImmutableMapEntry[] $r5;
        com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry $r11;
        java.lang.Object $r7, $r8;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.util.Map$Entry[];

        $i1 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>($i0, $i1);

        if $i0 != 0 goto label01;

        $r2 = <com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMap EMPTY>;

        $r3 = (com.google.common.collect.RegularImmutableMap) $r2;

        return $r3;

     label01:
        $i1 = lengthof $r0;

        if $i0 != $i1 goto label02;

        $r4 = $r0;

        goto label03;

     label02:
        $r4 = staticinvoke <com.google.common.collect.ImmutableMapEntry: com.google.common.collect.ImmutableMapEntry[] createEntryArray(int)>($i0);

     label03:
        $i1 = staticinvoke <com.google.common.collect.Hashing: int closedTableSize(int,double)>($i0, 1.2);

        $r5 = staticinvoke <com.google.common.collect.ImmutableMapEntry: com.google.common.collect.ImmutableMapEntry[] createEntryArray(int)>($i1);

        $i1 = $i1 - 1;

        $i2 = 0;

     label04:
        if $i2 >= $i0 goto label10;

        $r6 = $r0[$i2];

        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r7, $r8);

        $i3 = virtualinvoke $r7.<java.lang.Object: int hashCode()>();

        $i3 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i3);

        $i3 = $i3 & $i1;

        $r1 = $r5[$i3];

        if $r1 != null goto label08;

        $z0 = $r6 instanceof com.google.common.collect.ImmutableMapEntry;

        if $z0 == 0 goto label05;

        $r9 = (com.google.common.collect.ImmutableMapEntry) $r6;

        $z0 = virtualinvoke $r9.<com.google.common.collect.ImmutableMapEntry: boolean isReusable()>();

        if $z0 == 0 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label07;

        $r9 = (com.google.common.collect.ImmutableMapEntry) $r6;

        goto label09;

     label07:
        $r10 = new com.google.common.collect.ImmutableMapEntry;

        $r9 = $r10;

        specialinvoke $r10.<com.google.common.collect.ImmutableMapEntry: void <init>(java.lang.Object,java.lang.Object)>($r7, $r8);

        goto label09;

     label08:
        $r11 = new com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry;

        $r9 = $r11;

        specialinvoke $r11.<com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry: void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry)>($r7, $r8, $r1);

     label09:
        $r5[$i3] = $r9;

        $r4[$i2] = $r9;

        staticinvoke <com.google.common.collect.RegularImmutableMap: void checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>($r7, $r9, $r1);

        $i2 = $i2 + 1;

        goto label04;

     label10:
        $r12 = new com.google.common.collect.RegularImmutableMap;

        specialinvoke $r12.<com.google.common.collect.RegularImmutableMap: void <init>(java.util.Map$Entry[],com.google.common.collect.ImmutableMapEntry[],int)>($r4, $r5, $i1);

        return $r12;
    }

    public static java.lang.Object get(java.lang.Object, com.google.common.collect.ImmutableMapEntry[], int)
    {
        com.google.common.collect.ImmutableMapEntry[] $r1;
        com.google.common.collect.ImmutableMapEntry $r2;
        int $i0, $i1;
        java.lang.Object $r0, $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.google.common.collect.ImmutableMapEntry[];

        $i0 := @parameter2: int;

        if $r0 == null goto label4;

        if $r1 != null goto label1;

        return null;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i1);

        $i0 = $i0 & $i1;

        $r2 = $r1[$i0];

     label2:
        if $r2 == null goto label4;

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableEntry: java.lang.Object getKey()>();

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r0 = virtualinvoke $r2.<com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>();

        return $r0;

     label3:
        $r2 = virtualinvoke $r2.<com.google.common.collect.ImmutableMapEntry: com.google.common.collect.ImmutableMapEntry getNextInKeyBucket()>();

        goto label2;

     label4:
        return null;
    }

    public com.google.common.collect.ImmutableSet createEntrySet()
    {
        com.google.common.collect.RegularImmutableMap r0;
        java.util.Map$Entry[] $r2;
        com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet $r1;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 = new com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet;

        $r2 = r0.<com.google.common.collect.RegularImmutableMap: java.util.Map$Entry[] entries>;

        specialinvoke $r1.<com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: void <init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[])>(r0, $r2);

        return $r1;
    }

    public com.google.common.collect.ImmutableSet createKeySet()
    {
        com.google.common.collect.RegularImmutableMap$KeySet $r1;
        com.google.common.collect.RegularImmutableMap r0;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 = new com.google.common.collect.RegularImmutableMap$KeySet;

        specialinvoke $r1.<com.google.common.collect.RegularImmutableMap$KeySet: void <init>(com.google.common.collect.RegularImmutableMap)>(r0);

        return $r1;
    }

    public com.google.common.collect.ImmutableCollection createValues()
    {
        com.google.common.collect.RegularImmutableMap$Values $r1;
        com.google.common.collect.RegularImmutableMap r0;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 = new com.google.common.collect.RegularImmutableMap$Values;

        specialinvoke $r1.<com.google.common.collect.RegularImmutableMap$Values: void <init>(com.google.common.collect.RegularImmutableMap)>(r0);

        return $r1;
    }

    public void forEach(java.util.function.BiConsumer)
    {
        java.util.Map$Entry $r3;
        com.google.common.collect.RegularImmutableMap r0;
        java.util.function.BiConsumer $r1;
        int $i0, $i1;
        java.lang.Object $r4, $r5;
        java.util.Map$Entry[] $r2;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 := @parameter0: java.util.function.BiConsumer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.collect.RegularImmutableMap: java.util.Map$Entry[] entries>;

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r3 = $r2[$i1];

        $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r1.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r4, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.common.collect.ImmutableMapEntry[] $r1;
        com.google.common.collect.RegularImmutableMap r0;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMapEntry[] table>;

        $i0 = r0.<com.google.common.collect.RegularImmutableMap: int mask>;

        $r2 = staticinvoke <com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>($r2, $r1, $i0);

        return $r2;
    }

    public boolean isPartialView()
    {
        com.google.common.collect.RegularImmutableMap r0;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        return 0;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.RegularImmutableMap r0;
        java.util.Map$Entry[] $r1;

        r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 = r0.<com.google.common.collect.RegularImmutableMap: java.util.Map$Entry[] entries>;

        $i0 = lengthof $r1;

        return $i0;
    }
}
