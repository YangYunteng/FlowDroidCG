public class k.a.f.e extends java.lang.Object
{
    public final java.lang.Class a;
    public final java.lang.String b;
    public final java.lang.Class[] c;

    public transient void <init>(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class[] $r3;
        k.a.f.e r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: k.a.f.e;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<k.a.f.e: java.lang.Class a> = $r1;

        r0.<k.a.f.e: java.lang.String b> = $r2;

        r0.<k.a.f.e: java.lang.Class[] c> = $r3;

        return;
    }

    public static java.lang.reflect.Method a(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r1, $r2;
        int $i0;
        java.lang.Class[] $r0;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.reflect.Method $r5;

        $r3 := @parameter0: java.lang.Class;

        $r4 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.Class[];

     label1:
        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r4, $r0);

     label2:
        $i0 = virtualinvoke $r5.<java.lang.reflect.Method: int getModifiers()>();

     label3:
        $i0 = $i0 & 1;

        if $i0 != 0 goto label7;

     label4:
        return null;

     label5:
        $r1 := @caughtexception;

        goto label4;

     label6:
        $r2 := @caughtexception;

     label7:
        return $r5;

        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.NoSuchMethodException from label2 to label3 with label6;
    }

    public transient java.lang.Object a(java.lang.Object, java.lang.Object[])
    {
        java.lang.IllegalAccessException $r5;
        java.lang.Object[] $r2;
        k.a.f.e r0;
        java.lang.AssertionError $r6;
        java.lang.Object $r1;
        java.lang.Class $r3;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        java.lang.reflect.Method $r4;

        r0 := @this: k.a.f.e;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r0.<k.a.f.e: java.lang.reflect.Method a(java.lang.Class)>($r3);

        if $r4 == null goto label4;

     label1:
        $r1 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r2);

     label2:
        return $r1;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpectedly could not call: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        virtualinvoke $r6.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>($r5);

        throw $r6;

     label4:
        $r6 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r8 = r0.<k.a.f.e: java.lang.String b>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported for object ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r6;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public final java.lang.reflect.Method a(java.lang.Class)
    {
        java.lang.Class[] $r3;
        k.a.f.e r0;
        java.lang.Class $r1, $r5;
        java.lang.String $r2;
        java.lang.reflect.Method $r4;
        boolean $z0;

        r0 := @this: k.a.f.e;

        $r1 := @parameter0: java.lang.Class;

        $r2 = r0.<k.a.f.e: java.lang.String b>;

        if $r2 == null goto label2;

        $r3 = r0.<k.a.f.e: java.lang.Class[] c>;

        $r4 = staticinvoke <k.a.f.e: java.lang.reflect.Method a(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3);

        if $r4 == null goto label1;

        $r1 = r0.<k.a.f.e: java.lang.Class a>;

        if $r1 == null goto label1;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 != 0 goto label1;

        return null;

     label1:
        return $r4;

     label2:
        return null;
    }

    public boolean a(java.lang.Object)
    {
        k.a.f.e r0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.lang.reflect.Method $r3;

        r0 := @this: k.a.f.e;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<k.a.f.e: java.lang.reflect.Method a(java.lang.Class)>($r2);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public transient java.lang.Object b(java.lang.Object, java.lang.Object[])
    {
        java.lang.IllegalAccessException $r2;
        java.lang.Object[] $r1;
        k.a.f.e r0;
        java.lang.Object $r3;
        java.lang.Class $r4;
        java.lang.reflect.Method $r5;

        r0 := @this: k.a.f.e;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object[];

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke r0.<k.a.f.e: java.lang.reflect.Method a(java.lang.Class)>($r4);

        if $r5 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r1);

     label2:
        return $r3;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public transient java.lang.Object c(java.lang.Object, java.lang.Object[])
    {
        java.lang.Throwable $r4;
        java.lang.Object[] $r2;
        k.a.f.e r0;
        java.lang.RuntimeException $r5;
        java.lang.AssertionError $r6;
        java.lang.reflect.InvocationTargetException $r3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: k.a.f.e;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

     label1:
        $r1 = virtualinvoke r0.<k.a.f.e: java.lang.Object b(java.lang.Object,java.lang.Object[])>($r1, $r2);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r4 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label4;

        $r5 = (java.lang.RuntimeException) $r4;

        throw $r5;

     label4:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unexpected exception");

        virtualinvoke $r6.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        throw $r6;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    public transient java.lang.Object d(java.lang.Object, java.lang.Object[])
    {
        java.lang.Throwable $r4;
        java.lang.Object[] $r2;
        k.a.f.e r0;
        java.lang.RuntimeException $r5;
        java.lang.AssertionError $r6;
        java.lang.reflect.InvocationTargetException $r3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: k.a.f.e;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

     label1:
        $r1 = virtualinvoke r0.<k.a.f.e: java.lang.Object a(java.lang.Object,java.lang.Object[])>($r1, $r2);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r4 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label4;

        $r5 = (java.lang.RuntimeException) $r4;

        throw $r5;

     label4:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unexpected exception");

        virtualinvoke $r6.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        throw $r6;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }
}
