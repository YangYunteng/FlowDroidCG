public class k.i extends java.lang.Object implements java.util.Comparator
{

    public void <init>()
    {
        k.i r0;

        r0 := @this: k.i;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int a(java.lang.String, java.lang.String)
    {
        k.i r0;
        char $c2, $c3;
        int $i0, $i1, $i4, $i5;
        java.lang.String $r1, $r2;

        r0 := @this: k.i;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i1 = 4;

     label1:
        if $i1 >= $i0 goto label4;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        $i4 = (int) $c2;

        $i5 = (int) $c3;

        if $i4 == $i5 goto label3;

        $i0 = (int) $c2;

        $i1 = (int) $c3;

        if $i0 >= $i1 goto label2;

        $i0 = -1;

        return $i0;

     label2:
        return 1;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == $i1 goto label6;

        if $i0 >= $i1 goto label5;

        $i0 = -1;

        return $i0;

     label5:
        return 1;

     label6:
        return 0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        k.i r0;
        int $i0;
        java.lang.Object $r1, $r2;
        java.lang.String $r3, $r4;

        r0 := @this: k.i;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) $r1;

        $r4 = (java.lang.String) $r2;

        $i0 = virtualinvoke r0.<k.i: int a(java.lang.String,java.lang.String)>($r3, $r4);

        return $i0;
    }
}
