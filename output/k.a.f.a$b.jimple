public final class k.a.f.a$b extends java.lang.Object implements k.a.h.e
{
    public final javax.net.ssl.X509TrustManager a;
    public final java.lang.reflect.Method b;

    public void <init>(javax.net.ssl.X509TrustManager, java.lang.reflect.Method)
    {
        k.a.f.a$b r0;
        java.lang.reflect.Method $r2;
        javax.net.ssl.X509TrustManager $r1;

        r0 := @this: k.a.f.a$b;

        $r1 := @parameter0: javax.net.ssl.X509TrustManager;

        $r2 := @parameter1: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<k.a.f.a$b: java.lang.reflect.Method b> = $r2;

        r0.<k.a.f.a$b: javax.net.ssl.X509TrustManager a> = $r1;

        return;
    }

    public java.security.cert.X509Certificate a(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate $r4;
        java.lang.IllegalAccessException $r8;
        java.lang.Object[] $r5;
        java.lang.AssertionError $r9;
        java.lang.reflect.InvocationTargetException $r3;
        javax.net.ssl.X509TrustManager $r2;
        k.a.f.a$b r0;
        java.lang.Object $r6;
        java.lang.reflect.Method $r1;
        java.security.cert.TrustAnchor $r7;

        r0 := @this: k.a.f.a$b;

        $r4 := @parameter0: java.security.cert.X509Certificate;

        $r1 = r0.<k.a.f.a$b: java.lang.reflect.Method b>;

        $r2 = r0.<k.a.f.a$b: javax.net.ssl.X509TrustManager a>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r4;

     label1:
        $r6 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r5);

     label2:
        $r7 = (java.security.cert.TrustAnchor) $r6;

        if $r7 == null goto label7;

     label3:
        $r4 = virtualinvoke $r7.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();

     label4:
        return $r4;

     label5:
        $r8 := @caughtexception;

        $r9 = staticinvoke <k.a.e: java.lang.AssertionError a(java.lang.String,java.lang.Exception)>("unable to get issues and signature", $r8);

        throw $r9;

     label6:
        $r3 := @caughtexception;

     label7:
        return null;

        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label3 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label6;
    }

    public boolean equals(java.lang.Object)
    {
        javax.net.ssl.X509TrustManager $r1, $r4;
        k.a.f.a$b r0, $r3;
        java.lang.Object $r2;
        java.lang.reflect.Method $r5, $r6;
        boolean $z0;

        r0 := @this: k.a.f.a$b;

        $r2 := @parameter0: java.lang.Object;

        if $r2 != r0 goto label1;

        return 1;

     label1:
        $z0 = $r2 instanceof k.a.f.a$b;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = (k.a.f.a$b) $r2;

        $r4 = r0.<k.a.f.a$b: javax.net.ssl.X509TrustManager a>;

        $r1 = $r3.<k.a.f.a$b: javax.net.ssl.X509TrustManager a>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r5 = r0.<k.a.f.a$b: java.lang.reflect.Method b>;

        $r6 = $r3.<k.a.f.a$b: java.lang.reflect.Method b>;

        $z0 = virtualinvoke $r5.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        javax.net.ssl.X509TrustManager $r1;
        k.a.f.a$b r0;
        int $i0, $i1;
        java.lang.reflect.Method $r2;

        r0 := @this: k.a.f.a$b;

        $r1 = r0.<k.a.f.a$b: javax.net.ssl.X509TrustManager a>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<k.a.f.a$b: java.lang.reflect.Method b>;

        $i1 = virtualinvoke $r2.<java.lang.reflect.Method: int hashCode()>();

        $i1 = $i1 * 31;

        $i0 = $i0 + $i1;

        return $i0;
    }
}
