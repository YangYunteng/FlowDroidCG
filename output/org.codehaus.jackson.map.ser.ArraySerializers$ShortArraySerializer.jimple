public final class org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer extends org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer: void <init>(org.codehaus.jackson.map.TypeSerializer)>(null);

        return;
    }

    public void <init>(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer r0;
        org.codehaus.jackson.map.TypeSerializer $r1;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer: void <init>(java.lang.Class,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(class "[S", $r1, null);

        return;
    }

    public org.codehaus.jackson.map.ser.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer r0;
        org.codehaus.jackson.map.TypeSerializer $r1;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        r0 = new org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer: void <init>(org.codehaus.jackson.map.TypeSerializer)>($r1);

        return r0;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer r0;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.node.ObjectNode $r3, $r4;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("array", 1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String)>("integer");

        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r4);

        return $r3;
    }

    public volatile void serializeContents(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;
        short[] $r4;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (short[]) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer: void serializeContents(short[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serializeContents(short[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r3;
        short $s0;
        org.codehaus.jackson.JsonGenerator $r2;
        int $i1, $i2, $i3;
        short[] $r1;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer;

        $r1 := @parameter0: short[];

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $i1 = lengthof $r1;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $s0 = $r1[$i2];

        $i3 = (int) $s0;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i3);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }
}
