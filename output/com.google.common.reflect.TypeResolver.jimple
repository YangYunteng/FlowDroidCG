public final class com.google.common.reflect.TypeResolver extends java.lang.Object
{
    public final com.google.common.reflect.TypeResolver$TypeTable typeTable;

    public void <init>()
    {
        com.google.common.reflect.TypeResolver r0;
        com.google.common.reflect.TypeResolver$TypeTable $r1;

        r0 := @this: com.google.common.reflect.TypeResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.google.common.reflect.TypeResolver$TypeTable;

        specialinvoke $r1.<com.google.common.reflect.TypeResolver$TypeTable: void <init>()>();

        r0.<com.google.common.reflect.TypeResolver: com.google.common.reflect.TypeResolver$TypeTable typeTable> = $r1;

        return;
    }

    public void <init>(com.google.common.reflect.TypeResolver$TypeTable)
    {
        com.google.common.reflect.TypeResolver r0;
        com.google.common.reflect.TypeResolver$TypeTable $r1;

        r0 := @this: com.google.common.reflect.TypeResolver;

        $r1 := @parameter0: com.google.common.reflect.TypeResolver$TypeTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.reflect.TypeResolver: com.google.common.reflect.TypeResolver$TypeTable typeTable> = $r1;

        return;
    }

    public void <init>(com.google.common.reflect.TypeResolver$TypeTable, com.google.common.reflect.TypeResolver$1)
    {
        com.google.common.reflect.TypeResolver r0;
        com.google.common.reflect.TypeResolver$1 $r2;
        com.google.common.reflect.TypeResolver$TypeTable $r1;

        r0 := @this: com.google.common.reflect.TypeResolver;

        $r1 := @parameter0: com.google.common.reflect.TypeResolver$TypeTable;

        $r2 := @parameter1: com.google.common.reflect.TypeResolver$1;

        specialinvoke r0.<com.google.common.reflect.TypeResolver: void <init>(com.google.common.reflect.TypeResolver$TypeTable)>($r1);

        return;
    }

    public static void access$000(java.util.Map, java.lang.reflect.Type, java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r1, $r2;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.reflect.Type;

        $r2 := @parameter2: java.lang.reflect.Type;

        staticinvoke <com.google.common.reflect.TypeResolver: void populateTypeMappings(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type)>($r0, $r1, $r2);

        return;
    }

    public static java.lang.Object access$100(java.lang.Class, java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.Class $r1;

        $r1 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.Object;

        $r0 = staticinvoke <com.google.common.reflect.TypeResolver: java.lang.Object expectArgument(java.lang.Class,java.lang.Object)>($r1, $r0);

        return $r0;
    }

    public static java.lang.reflect.Type[] access$300(com.google.common.reflect.TypeResolver, java.lang.reflect.Type[])
    {
        java.lang.reflect.Type[] $r0;
        com.google.common.reflect.TypeResolver $r1;

        $r1 := @parameter0: com.google.common.reflect.TypeResolver;

        $r0 := @parameter1: java.lang.reflect.Type[];

        $r0 = specialinvoke $r1.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type[] resolveTypes(java.lang.reflect.Type[])>($r0);

        return $r0;
    }

    public static com.google.common.reflect.TypeResolver accordingTo(java.lang.reflect.Type)
    {
        com.google.common.reflect.TypeResolver $r0;
        java.lang.reflect.Type $r1;
        com.google.common.collect.ImmutableMap $r2;

        $r1 := @parameter0: java.lang.reflect.Type;

        $r0 = new com.google.common.reflect.TypeResolver;

        specialinvoke $r0.<com.google.common.reflect.TypeResolver: void <init>()>();

        $r2 = staticinvoke <com.google.common.reflect.TypeResolver$TypeMappingIntrospector: com.google.common.collect.ImmutableMap getTypeMappings(java.lang.reflect.Type)>($r1);

        $r0 = virtualinvoke $r0.<com.google.common.reflect.TypeResolver: com.google.common.reflect.TypeResolver where(java.util.Map)>($r2);

        return $r0;
    }

    public static java.lang.Object expectArgument(java.lang.Class, java.lang.Object)
    {
        java.lang.StringBuilder $r1;
        java.lang.Class $r3;
        java.lang.Object $r4, $r5;
        java.lang.String $r6;
        java.lang.IllegalArgumentException $r0;
        java.lang.ClassCastException $r2;

        $r3 := @parameter0: java.lang.Class;

        $r4 := @parameter1: java.lang.Object;

     label1:
        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r4);

     label2:
        return $r5;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a ");

        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label4:
        $r2 := @caughtexception;

        goto label3;

        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    public static void populateTypeMappings(java.util.Map, java.lang.reflect.Type, java.lang.reflect.Type)
    {
        com.google.common.reflect.TypeResolver$1 $r3;
        java.lang.reflect.Type $r0, $r2;
        java.util.Map $r1;
        java.lang.reflect.Type[] $r4;
        boolean $z0;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.reflect.Type;

        $r2 := @parameter2: java.lang.reflect.Type;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new com.google.common.reflect.TypeResolver$1;

        specialinvoke $r3.<com.google.common.reflect.TypeResolver$1: void <init>(java.util.Map,java.lang.reflect.Type)>($r1, $r2);

        $r4 = newarray (java.lang.reflect.Type)[1];

        $r4[0] = $r0;

        virtualinvoke $r3.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r4);

        return;
    }

    private java.lang.reflect.Type resolveGenericArrayType(java.lang.reflect.GenericArrayType)
    {
        java.lang.reflect.GenericArrayType $r1;
        com.google.common.reflect.TypeResolver r0;
        java.lang.reflect.Type $r2;

        r0 := @this: com.google.common.reflect.TypeResolver;

        $r1 := @parameter0: java.lang.reflect.GenericArrayType;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r2 = virtualinvoke r0.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r2);

        $r2 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)>($r2);

        return $r2;
    }

    private java.lang.reflect.ParameterizedType resolveParameterizedType(java.lang.reflect.ParameterizedType)
    {
        java.lang.reflect.ParameterizedType $r1;
        java.lang.reflect.Type $r2, $r3;
        java.lang.reflect.Type[] $r4;
        com.google.common.reflect.TypeResolver r0;
        java.lang.Class $r5;

        r0 := @this: com.google.common.reflect.TypeResolver;

        $r1 := @parameter0: java.lang.reflect.ParameterizedType;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        if $r2 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r2);

     label2:
        $r3 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r3 = virtualinvoke r0.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r3);

        $r4 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r4 = specialinvoke r0.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type[] resolveTypes(java.lang.reflect.Type[])>($r4);

        $r5 = (java.lang.Class) $r3;

        $r1 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])>($r2, $r5, $r4);

        return $r1;
    }

    private java.lang.reflect.Type[] resolveTypes(java.lang.reflect.Type[])
    {
        java.lang.reflect.Type $r2;
        java.lang.reflect.Type[] $r1, $r3;
        int $i0, $i1;
        com.google.common.reflect.TypeResolver r0;

        r0 := @this: com.google.common.reflect.TypeResolver;

        $r1 := @parameter0: java.lang.reflect.Type[];

        $i0 = lengthof $r1;

        $r3 = newarray (java.lang.reflect.Type)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r2 = $r1[$i0];

        $r2 = virtualinvoke r0.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r2);

        $r3[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r3;
    }

    private java.lang.reflect.WildcardType resolveWildcardType(java.lang.reflect.WildcardType)
    {
        java.lang.reflect.WildcardType $r2;
        com.google.common.reflect.Types$WildcardTypeImpl $r1;
        java.lang.reflect.Type[] $r3, $r4;
        com.google.common.reflect.TypeResolver r0;

        r0 := @this: com.google.common.reflect.TypeResolver;

        $r2 := @parameter0: java.lang.reflect.WildcardType;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $r4 = interfaceinvoke $r2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r1 = new com.google.common.reflect.Types$WildcardTypeImpl;

        $r3 = specialinvoke r0.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type[] resolveTypes(java.lang.reflect.Type[])>($r3);

        $r4 = specialinvoke r0.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type[] resolveTypes(java.lang.reflect.Type[])>($r4);

        specialinvoke $r1.<com.google.common.reflect.Types$WildcardTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[])>($r3, $r4);

        return $r1;
    }

    public java.lang.reflect.Type resolveType(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType $r5;
        java.lang.reflect.TypeVariable $r3;
        java.lang.reflect.WildcardType $r6;
        java.lang.reflect.ParameterizedType $r4;
        java.lang.reflect.Type $r1;
        com.google.common.reflect.TypeResolver$TypeTable $r2;
        com.google.common.reflect.TypeResolver r0;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeResolver;

        $r1 := @parameter0: java.lang.reflect.Type;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = $r1 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.common.reflect.TypeResolver: com.google.common.reflect.TypeResolver$TypeTable typeTable>;

        $r3 = (java.lang.reflect.TypeVariable) $r1;

        $r1 = virtualinvoke $r2.<com.google.common.reflect.TypeResolver$TypeTable: java.lang.reflect.Type resolve(java.lang.reflect.TypeVariable)>($r3);

        return $r1;

     label1:
        $z0 = $r1 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.reflect.ParameterizedType) $r1;

        $r4 = specialinvoke r0.<com.google.common.reflect.TypeResolver: java.lang.reflect.ParameterizedType resolveParameterizedType(java.lang.reflect.ParameterizedType)>($r4);

        return $r4;

     label2:
        $z0 = $r1 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label3;

        $r5 = (java.lang.reflect.GenericArrayType) $r1;

        $r1 = specialinvoke r0.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveGenericArrayType(java.lang.reflect.GenericArrayType)>($r5);

        return $r1;

     label3:
        $z0 = $r1 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label4;

        $r6 = (java.lang.reflect.WildcardType) $r1;

        $r6 = specialinvoke r0.<com.google.common.reflect.TypeResolver: java.lang.reflect.WildcardType resolveWildcardType(java.lang.reflect.WildcardType)>($r6);

        return $r6;

     label4:
        return $r1;
    }

    public com.google.common.reflect.TypeResolver where(java.lang.reflect.Type, java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r1, $r2;
        com.google.common.reflect.TypeResolver r0;
        java.util.HashMap $r3;

        r0 := @this: com.google.common.reflect.TypeResolver;

        $r1 := @parameter0: java.lang.reflect.Type;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.common.reflect.TypeResolver: void populateTypeMappings(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type)>($r3, $r1, $r2);

        r0 = virtualinvoke r0.<com.google.common.reflect.TypeResolver: com.google.common.reflect.TypeResolver where(java.util.Map)>($r3);

        return r0;
    }

    public com.google.common.reflect.TypeResolver where(java.util.Map)
    {
        com.google.common.reflect.TypeResolver$TypeTable $r2;
        java.util.Map $r3;
        com.google.common.reflect.TypeResolver r0, $r1;

        r0 := @this: com.google.common.reflect.TypeResolver;

        $r3 := @parameter0: java.util.Map;

        $r1 = new com.google.common.reflect.TypeResolver;

        $r2 = r0.<com.google.common.reflect.TypeResolver: com.google.common.reflect.TypeResolver$TypeTable typeTable>;

        $r2 = virtualinvoke $r2.<com.google.common.reflect.TypeResolver$TypeTable: com.google.common.reflect.TypeResolver$TypeTable where(java.util.Map)>($r3);

        specialinvoke $r1.<com.google.common.reflect.TypeResolver: void <init>(com.google.common.reflect.TypeResolver$TypeTable)>($r2);

        return $r1;
    }
}
