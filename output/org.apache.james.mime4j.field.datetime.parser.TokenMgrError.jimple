public class org.apache.james.mime4j.field.datetime.parser.TokenMgrError extends java.lang.Error
{
    public static final int INVALID_LEXICAL_STATE;
    public static final int LEXICAL_ERROR;
    public static final int LOOP_DETECTED;
    public static final int STATIC_LEXER_ERROR;
    public int errorCode;

    public void <init>()
    {
        org.apache.james.mime4j.field.datetime.parser.TokenMgrError r0;

        r0 := @this: org.apache.james.mime4j.field.datetime.parser.TokenMgrError;

        specialinvoke r0.<java.lang.Error: void <init>()>();

        return;
    }

    public void <init>(java.lang.String, int)
    {
        int $i0;
        java.lang.String $r1;
        org.apache.james.mime4j.field.datetime.parser.TokenMgrError r0;

        r0 := @this: org.apache.james.mime4j.field.datetime.parser.TokenMgrError;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Error: void <init>(java.lang.String)>($r1);

        r0.<org.apache.james.mime4j.field.datetime.parser.TokenMgrError: int errorCode> = $i0;

        return;
    }

    public void <init>(boolean, int, int, int, java.lang.String, char, int)
    {
        char $c3;
        org.apache.james.mime4j.field.datetime.parser.TokenMgrError r0;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.field.datetime.parser.TokenMgrError;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: java.lang.String;

        $c3 := @parameter5: char;

        $i4 := @parameter6: int;

        $r1 = staticinvoke <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)>($z0, $i0, $i1, $i2, $r1, $c3);

        specialinvoke r0.<org.apache.james.mime4j.field.datetime.parser.TokenMgrError: void <init>(java.lang.String,int)>($r1, $i4);

        return;
    }

    public static java.lang.String LexicalError(boolean, int, int, int, java.lang.String, char)
    {
        char $c0;
        int $i1, $i2, $i3;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r0, $r2;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r0 := @parameter4: java.lang.String;

        $c0 := @parameter5: char;

        $r3 = new java.lang.StringBuilder;

        $r1 = $r3;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lexical error at line ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Encountered: ");

        if $z0 == 0 goto label1;

        $r2 = "<EOF> ";

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        $r3 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        $r2 = staticinvoke <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i1 = (int) $c0;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after : \"");

        $r0 = staticinvoke <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>($r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static final java.lang.String addEscapes(java.lang.String)
    {
        char $c2;
        java.lang.StringBuffer $r0, $r4;
        int $i0, $i1, $i3;
        java.lang.StringBuilder $r2, $r5;
        java.lang.String $r1, $r3;

        $r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.StringBuffer;

        $r0 = $r4;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $i0 = 0;

     label01:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label14;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        if $c2 == 0 goto label13;

        $i1 = (int) $c2;

        if $i1 == 34 goto label12;

        $i1 = (int) $c2;

        if $i1 == 39 goto label11;

        $i1 = (int) $c2;

        if $i1 == 92 goto label10;

        $i1 = (int) $c2;

        if $i1 == 12 goto label09;

        $i1 = (int) $c2;

        if $i1 == 13 goto label08;

        $i1 = (int) $c2;

        lookupswitch($i1)
        {
            case 8: goto label07;
            case 9: goto label06;
            case 10: goto label05;
            default: goto label02;
        };

     label02:
        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i1 = (int) $c2;

        if $i1 < 32 goto label04;

        $i1 = (int) $c2;

        if $i1 <= 126 goto label03;

        goto label04;

     label03:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        goto label13;

     label04:
        $r5 = new java.lang.StringBuilder;

        $r2 = $r5;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0000");

        $i1 = (int) $c2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i1, 16);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        $r2 = $r5;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\u");

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i3 = -4;

        $i1 = $i1 + $i3;

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i1, $i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        goto label13;

     label05:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        goto label13;

     label06:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\t");

        goto label13;

     label07:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\b");

        goto label13;

     label08:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

        goto label13;

     label09:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\f");

        goto label13;

     label10:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\\");

        goto label13;

     label11:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\'");

        goto label13;

     label12:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\"");

     label13:
        $i0 = $i0 + 1;

        goto label01;

     label14:
        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String getMessage()
    {
        java.lang.String $r1;
        org.apache.james.mime4j.field.datetime.parser.TokenMgrError r0;

        r0 := @this: org.apache.james.mime4j.field.datetime.parser.TokenMgrError;

        $r1 = specialinvoke r0.<java.lang.Error: java.lang.String getMessage()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: int STATIC_LEXER_ERROR> = 1;

        <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: int LOOP_DETECTED> = 3;

        <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: int LEXICAL_ERROR> = 0;

        <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: int INVALID_LEXICAL_STATE> = 2;

        return;
    }
}
