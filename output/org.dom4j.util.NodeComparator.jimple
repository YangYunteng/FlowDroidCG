public class org.dom4j.util.NodeComparator extends java.lang.Object implements java.util.Comparator
{

    public void <init>()
    {
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        org.dom4j.Node $r3, $r4;
        int $i0;
        java.lang.Object $r1, $r2;
        java.lang.Comparable $r5;
        java.lang.Class $r6;
        java.lang.String $r7, $r8;
        org.dom4j.util.NodeComparator r0;
        boolean $z0;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        if $r1 != $r2 goto label1;

        return 0;

     label1:
        if $r1 != null goto label2;

        $i0 = -1;

        return $i0;

     label2:
        if $r2 != null goto label3;

        return 1;

     label3:
        $z0 = $r1 instanceof org.dom4j.Node;

        if $z0 == 0 goto label5;

        $z0 = $r2 instanceof org.dom4j.Node;

        if $z0 == 0 goto label4;

        $r3 = (org.dom4j.Node) $r1;

        $r4 = (org.dom4j.Node) $r2;

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Node,org.dom4j.Node)>($r3, $r4);

        return $i0;

     label4:
        return 1;

     label5:
        $z0 = $r2 instanceof org.dom4j.Node;

        if $z0 == 0 goto label6;

        $i0 = -1;

        return $i0;

     label6:
        $z0 = $r1 instanceof java.lang.Comparable;

        if $z0 == 0 goto label7;

        $r5 = (java.lang.Comparable) $r1;

        $i0 = interfaceinvoke $r5.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        return $i0;

     label7:
        $r6 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r7.<java.lang.String: int compareTo(java.lang.String)>($r8);

        return $i0;
    }

    public int compare(java.lang.String, java.lang.String)
    {
        int $i0;
        java.lang.String $r1, $r2;
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r2 != $r1 goto label1;

        return 0;

     label1:
        if $r2 != null goto label2;

        $i0 = -1;

        return $i0;

     label2:
        if $r1 != null goto label3;

        return 1;

     label3:
        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r1);

        return $i0;
    }

    public int compare(org.dom4j.Attribute, org.dom4j.Attribute)
    {
        int $i0;
        org.dom4j.QName $r3, $r4;
        java.lang.String $r5, $r6;
        org.dom4j.util.NodeComparator r0;
        org.dom4j.Attribute $r1, $r2;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: org.dom4j.Attribute;

        $r2 := @parameter1: org.dom4j.Attribute;

        $r3 = interfaceinvoke $r1.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.QName,org.dom4j.QName)>($r3, $r4);

        if $i0 != 0 goto label1;

        $r5 = interfaceinvoke $r1.<org.dom4j.Attribute: java.lang.String getValue()>();

        $r6 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getValue()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r5, $r6);

     label1:
        return $i0;
    }

    public int compare(org.dom4j.CharacterData, org.dom4j.CharacterData)
    {
        int $i0;
        java.lang.String $r3, $r4;
        org.dom4j.util.NodeComparator r0;
        org.dom4j.CharacterData $r1, $r2;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: org.dom4j.CharacterData;

        $r2 := @parameter1: org.dom4j.CharacterData;

        $r3 = interfaceinvoke $r1.<org.dom4j.Node: java.lang.String getText()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.Node: java.lang.String getText()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

        return $i0;
    }

    public int compare(org.dom4j.Document, org.dom4j.Document)
    {
        org.dom4j.Document $r1, $r2;
        org.dom4j.DocumentType $r3, $r4;
        int $i0;
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: org.dom4j.Document;

        $r2 := @parameter1: org.dom4j.Document;

        $r3 = interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.DocumentType getDocType()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.DocumentType getDocType()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.DocumentType,org.dom4j.DocumentType)>($r3, $r4);

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compareContent(org.dom4j.Branch,org.dom4j.Branch)>($r1, $r2);

     label1:
        return $i0;
    }

    public int compare(org.dom4j.DocumentType, org.dom4j.DocumentType)
    {
        org.dom4j.DocumentType $r1, $r2;
        int $i0;
        java.lang.String $r3, $r4;
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: org.dom4j.DocumentType;

        $r2 := @parameter1: org.dom4j.DocumentType;

        if $r1 != $r2 goto label1;

        return 0;

     label1:
        if $r1 != null goto label2;

        $i0 = -1;

        return $i0;

     label2:
        if $r2 != null goto label3;

        return 1;

     label3:
        $r3 = interfaceinvoke $r1.<org.dom4j.DocumentType: java.lang.String getPublicID()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.DocumentType: java.lang.String getPublicID()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

        if $i0 != 0 goto label4;

        $r3 = interfaceinvoke $r1.<org.dom4j.DocumentType: java.lang.String getSystemID()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.DocumentType: java.lang.String getSystemID()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

        if $i0 != 0 goto label4;

        $r3 = interfaceinvoke $r1.<org.dom4j.Node: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.Node: java.lang.String getName()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

     label4:
        return $i0;
    }

    public int compare(org.dom4j.Element, org.dom4j.Element)
    {
        int $i0, $i1, $i2;
        org.dom4j.Element $r1, $r2;
        org.dom4j.QName $r3, $r4;
        org.dom4j.util.NodeComparator r0;
        org.dom4j.Attribute $r5, $r6;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.dom4j.Element;

        $r3 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.QName,org.dom4j.QName)>($r3, $r4);

        if $i0 != 0 goto label5;

        $i0 = interfaceinvoke $r1.<org.dom4j.Element: int attributeCount()>();

        $i1 = interfaceinvoke $r2.<org.dom4j.Element: int attributeCount()>();

        $i1 = $i0 - $i1;

        if $i1 != 0 goto label4;

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compareContent(org.dom4j.Branch,org.dom4j.Branch)>($r1, $r2);

        return $i0;

     label2:
        $r5 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Attribute attribute(int)>($i1);

        $r3 = interfaceinvoke $r5.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r6 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Attribute attribute(org.dom4j.QName)>($r3);

        $i2 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Attribute,org.dom4j.Attribute)>($r5, $r6);

        if $i2 == 0 goto label3;

        return $i2;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        return $i1;

     label5:
        return $i0;
    }

    public int compare(org.dom4j.Entity, org.dom4j.Entity)
    {
        org.dom4j.Entity $r1, $r2;
        int $i0;
        java.lang.String $r3, $r4;
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: org.dom4j.Entity;

        $r2 := @parameter1: org.dom4j.Entity;

        $r3 = interfaceinvoke $r1.<org.dom4j.Node: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.Node: java.lang.String getName()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

        if $i0 != 0 goto label1;

        $r3 = interfaceinvoke $r1.<org.dom4j.Node: java.lang.String getText()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.Node: java.lang.String getText()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

     label1:
        return $i0;
    }

    public int compare(org.dom4j.Namespace, org.dom4j.Namespace)
    {
        org.dom4j.Namespace $r1, $r2;
        int $i0;
        java.lang.String $r3, $r4;
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: org.dom4j.Namespace;

        $r2 := @parameter1: org.dom4j.Namespace;

        $r3 = virtualinvoke $r1.<org.dom4j.Namespace: java.lang.String getURI()>();

        $r4 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getURI()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

        if $i0 != 0 goto label1;

        $r3 = virtualinvoke $r1.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $r4 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

     label1:
        return $i0;
    }

    public int compare(org.dom4j.Node, org.dom4j.Node)
    {
        org.dom4j.Document $r9, $r10;
        org.dom4j.Node $r1, $r2;
        org.dom4j.Entity $r15, $r16;
        short $s0, $s1;
        org.dom4j.DocumentType $r7, $r8;
        org.dom4j.CDATA $r17, $r18;
        org.dom4j.Comment $r11, $r12;
        int $i2, $i3;
        java.lang.String $r4;
        org.dom4j.ProcessingInstruction $r13, $r14;
        org.dom4j.Namespace $r5, $r6;
        org.dom4j.Text $r19, $r20;
        java.lang.RuntimeException $r26;
        java.lang.StringBuilder $r3, $r25;
        org.dom4j.Element $r23, $r24;
        org.dom4j.util.NodeComparator r0;
        org.dom4j.Attribute $r21, $r22;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: org.dom4j.Node;

        $r2 := @parameter1: org.dom4j.Node;

        $s0 = interfaceinvoke $r1.<org.dom4j.Node: short getNodeType()>();

        $s1 = interfaceinvoke $r2.<org.dom4j.Node: short getNodeType()>();

        $i2 = (int) $s0;

        $i3 = (int) $s1;

        $i2 = $i2 - $i3;

        if $i2 == 0 goto label01;

        return $i2;

     label01:
        $i2 = (int) $s0;

        lookupswitch($i2)
        {
            case 1: goto label12;
            case 2: goto label11;
            case 3: goto label10;
            case 4: goto label09;
            case 5: goto label08;
            case 6: goto label02;
            case 7: goto label07;
            case 8: goto label06;
            case 9: goto label05;
            case 10: goto label04;
            case 11: goto label02;
            case 12: goto label02;
            case 13: goto label03;
            default: goto label02;
        };

     label02:
        $r26 = new java.lang.RuntimeException;

        $r25 = new java.lang.StringBuilder;

        $r3 = $r25;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid node types. node1: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and node2: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r26;

     label03:
        $r5 = (org.dom4j.Namespace) $r1;

        $r6 = (org.dom4j.Namespace) $r2;

        $i2 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Namespace,org.dom4j.Namespace)>($r5, $r6);

        return $i2;

     label04:
        $r7 = (org.dom4j.DocumentType) $r1;

        $r8 = (org.dom4j.DocumentType) $r2;

        $i2 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.DocumentType,org.dom4j.DocumentType)>($r7, $r8);

        return $i2;

     label05:
        $r9 = (org.dom4j.Document) $r1;

        $r10 = (org.dom4j.Document) $r2;

        $i2 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Document,org.dom4j.Document)>($r9, $r10);

        return $i2;

     label06:
        $r11 = (org.dom4j.Comment) $r1;

        $r12 = (org.dom4j.Comment) $r2;

        $i2 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.CharacterData,org.dom4j.CharacterData)>($r11, $r12);

        return $i2;

     label07:
        $r13 = (org.dom4j.ProcessingInstruction) $r1;

        $r14 = (org.dom4j.ProcessingInstruction) $r2;

        $i2 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.ProcessingInstruction,org.dom4j.ProcessingInstruction)>($r13, $r14);

        return $i2;

     label08:
        $r15 = (org.dom4j.Entity) $r1;

        $r16 = (org.dom4j.Entity) $r2;

        $i2 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Entity,org.dom4j.Entity)>($r15, $r16);

        return $i2;

     label09:
        $r17 = (org.dom4j.CDATA) $r1;

        $r18 = (org.dom4j.CDATA) $r2;

        $i2 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.CharacterData,org.dom4j.CharacterData)>($r17, $r18);

        return $i2;

     label10:
        $r19 = (org.dom4j.Text) $r1;

        $r20 = (org.dom4j.Text) $r2;

        $i2 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.CharacterData,org.dom4j.CharacterData)>($r19, $r20);

        return $i2;

     label11:
        $r21 = (org.dom4j.Attribute) $r1;

        $r22 = (org.dom4j.Attribute) $r2;

        $i2 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Attribute,org.dom4j.Attribute)>($r21, $r22);

        return $i2;

     label12:
        $r23 = (org.dom4j.Element) $r1;

        $r24 = (org.dom4j.Element) $r2;

        $i2 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Element,org.dom4j.Element)>($r23, $r24);

        return $i2;
    }

    public int compare(org.dom4j.ProcessingInstruction, org.dom4j.ProcessingInstruction)
    {
        int $i0;
        java.lang.String $r3, $r4;
        org.dom4j.util.NodeComparator r0;
        org.dom4j.ProcessingInstruction $r1, $r2;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: org.dom4j.ProcessingInstruction;

        $r2 := @parameter1: org.dom4j.ProcessingInstruction;

        $r3 = interfaceinvoke $r1.<org.dom4j.ProcessingInstruction: java.lang.String getTarget()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.ProcessingInstruction: java.lang.String getTarget()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

        if $i0 != 0 goto label1;

        $r3 = interfaceinvoke $r1.<org.dom4j.ProcessingInstruction: java.lang.String getText()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.ProcessingInstruction: java.lang.String getText()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

     label1:
        return $i0;
    }

    public int compare(org.dom4j.QName, org.dom4j.QName)
    {
        int $i0;
        org.dom4j.QName $r1, $r2;
        java.lang.String $r3, $r4;
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 := @parameter1: org.dom4j.QName;

        $r3 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $r4 = virtualinvoke $r2.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

        if $i0 != 0 goto label1;

        $r3 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getQualifiedName()>();

        $r4 = virtualinvoke $r2.<org.dom4j.QName: java.lang.String getQualifiedName()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

     label1:
        return $i0;
    }

    public int compareContent(org.dom4j.Branch, org.dom4j.Branch)
    {
        org.dom4j.Branch $r1, $r2;
        org.dom4j.Node $r3, $r4;
        int $i0, $i1, $i2, $i3;
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        $r1 := @parameter0: org.dom4j.Branch;

        $r2 := @parameter1: org.dom4j.Branch;

        $i0 = interfaceinvoke $r1.<org.dom4j.Branch: int nodeCount()>();

        $i1 = interfaceinvoke $r2.<org.dom4j.Branch: int nodeCount()>();

        $i1 = $i0 - $i1;

        if $i1 != 0 goto label4;

        $i2 = 0;

     label1:
        if $i2 < $i0 goto label2;

        return $i1;

     label2:
        $r3 = interfaceinvoke $r1.<org.dom4j.Branch: org.dom4j.Node node(int)>($i2);

        $r4 = interfaceinvoke $r2.<org.dom4j.Branch: org.dom4j.Node node(int)>($i2);

        $i3 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Node,org.dom4j.Node)>($r3, $r4);

        $i1 = $i3;

        if $i3 == 0 goto label3;

        return $i3;

     label3:
        $i2 = $i2 + 1;

        goto label1;

     label4:
        return $i1;
    }
}
