public class org.dom4j.swing.BranchTreeNode extends org.dom4j.swing.LeafTreeNode
{
    public java.util.List children;

    public void <init>()
    {
        org.dom4j.swing.BranchTreeNode r0;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        specialinvoke r0.<org.dom4j.swing.LeafTreeNode: void <init>()>();

        return;
    }

    public void <init>(javax.swing.tree.TreeNode, org.dom4j.Branch)
    {
        org.dom4j.swing.BranchTreeNode r0;
        javax.swing.tree.TreeNode $r1;
        org.dom4j.Branch $r2;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $r1 := @parameter0: javax.swing.tree.TreeNode;

        $r2 := @parameter1: org.dom4j.Branch;

        specialinvoke r0.<org.dom4j.swing.LeafTreeNode: void <init>(javax.swing.tree.TreeNode,org.dom4j.Node)>($r1, $r2);

        return;
    }

    public void <init>(org.dom4j.Branch)
    {
        org.dom4j.swing.BranchTreeNode r0;
        org.dom4j.Branch $r1;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $r1 := @parameter0: org.dom4j.Branch;

        specialinvoke r0.<org.dom4j.swing.LeafTreeNode: void <init>(org.dom4j.Node)>($r1);

        return;
    }

    public java.util.Enumeration children()
    {
        org.dom4j.swing.BranchTreeNode$1 $r1;
        org.dom4j.swing.BranchTreeNode r0;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $r1 = new org.dom4j.swing.BranchTreeNode$1;

        specialinvoke $r1.<org.dom4j.swing.BranchTreeNode$1: void <init>(org.dom4j.swing.BranchTreeNode)>(r0);

        return $r1;
    }

    public java.util.List createChildList()
    {
        org.dom4j.Branch $r2;
        org.dom4j.Node $r3;
        javax.swing.tree.TreeNode $r5;
        java.util.ArrayList $r1;
        int $i0, $i1, $i2;
        org.dom4j.swing.BranchTreeNode r0;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $r2 = virtualinvoke r0.<org.dom4j.swing.BranchTreeNode: org.dom4j.Branch getXmlBranch()>();

        $i0 = interfaceinvoke $r2.<org.dom4j.Branch: int nodeCount()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r1;

     label2:
        $r3 = interfaceinvoke $r2.<org.dom4j.Branch: org.dom4j.Node node(int)>($i1);

        $z0 = $r3 instanceof org.dom4j.CharacterData;

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getText()>();

        if $r4 != null goto label3;

        goto label5;

     label3:
        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i2 > 0 goto label4;

        goto label5;

     label4:
        $r5 = virtualinvoke r0.<org.dom4j.swing.BranchTreeNode: javax.swing.tree.TreeNode createChildTreeNode(org.dom4j.Node)>($r3);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5);

     label5:
        $i1 = $i1 + 1;

        goto label1;
    }

    public javax.swing.tree.TreeNode createChildTreeNode(org.dom4j.Node)
    {
        org.dom4j.Node $r1;
        org.dom4j.Branch $r3;
        org.dom4j.swing.BranchTreeNode r0, $r2;
        org.dom4j.swing.LeafTreeNode $r4;
        boolean $z0;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $r1 := @parameter0: org.dom4j.Node;

        $z0 = $r1 instanceof org.dom4j.Branch;

        if $z0 == 0 goto label1;

        $r2 = new org.dom4j.swing.BranchTreeNode;

        $r3 = (org.dom4j.Branch) $r1;

        specialinvoke $r2.<org.dom4j.swing.BranchTreeNode: void <init>(javax.swing.tree.TreeNode,org.dom4j.Branch)>(r0, $r3);

        return $r2;

     label1:
        $r4 = new org.dom4j.swing.LeafTreeNode;

        specialinvoke $r4.<org.dom4j.swing.LeafTreeNode: void <init>(javax.swing.tree.TreeNode,org.dom4j.Node)>(r0, $r1);

        return $r4;
    }

    public boolean getAllowsChildren()
    {
        org.dom4j.swing.BranchTreeNode r0;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        return 1;
    }

    public javax.swing.tree.TreeNode getChildAt(int)
    {
        java.util.List $r1;
        javax.swing.tree.TreeNode $r3;
        int $i0;
        org.dom4j.swing.BranchTreeNode r0;
        java.lang.Object $r2;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.dom4j.swing.BranchTreeNode: java.util.List getChildList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (javax.swing.tree.TreeNode) $r2;

        return $r3;
    }

    public int getChildCount()
    {
        int $i0;
        org.dom4j.swing.BranchTreeNode r0;
        java.util.List $r1;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $r1 = virtualinvoke r0.<org.dom4j.swing.BranchTreeNode: java.util.List getChildList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.List getChildList()
    {
        org.dom4j.swing.BranchTreeNode r0;
        java.util.List $r1;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $r1 = r0.<org.dom4j.swing.BranchTreeNode: java.util.List children>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.dom4j.swing.BranchTreeNode: java.util.List createChildList()>();

        r0.<org.dom4j.swing.BranchTreeNode: java.util.List children> = $r1;

     label1:
        $r1 = r0.<org.dom4j.swing.BranchTreeNode: java.util.List children>;

        return $r1;
    }

    public int getIndex(javax.swing.tree.TreeNode)
    {
        java.util.List $r2;
        javax.swing.tree.TreeNode $r1;
        int $i0;
        org.dom4j.swing.BranchTreeNode r0;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $r1 := @parameter0: javax.swing.tree.TreeNode;

        $r2 = virtualinvoke r0.<org.dom4j.swing.BranchTreeNode: java.util.List getChildList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>($r1);

        return $i0;
    }

    public org.dom4j.Branch getXmlBranch()
    {
        org.dom4j.swing.BranchTreeNode r0;
        org.dom4j.Node $r1;
        org.dom4j.Branch $r2;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $r1 = r0.<org.dom4j.swing.LeafTreeNode: org.dom4j.Node xmlNode>;

        $r2 = (org.dom4j.Branch) $r1;

        return $r2;
    }

    public boolean isLeaf()
    {
        int $i0;
        org.dom4j.swing.BranchTreeNode r0;
        org.dom4j.Branch $r1;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $r1 = virtualinvoke r0.<org.dom4j.swing.BranchTreeNode: org.dom4j.Branch getXmlBranch()>();

        $i0 = interfaceinvoke $r1.<org.dom4j.Branch: int nodeCount()>();

        if $i0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        org.dom4j.swing.BranchTreeNode r0;
        java.lang.String $r1;
        org.dom4j.Node $r2;

        r0 := @this: org.dom4j.swing.BranchTreeNode;

        $r2 = r0.<org.dom4j.swing.LeafTreeNode: org.dom4j.Node xmlNode>;

        $r1 = interfaceinvoke $r2.<org.dom4j.Node: java.lang.String getName()>();

        return $r1;
    }
}
