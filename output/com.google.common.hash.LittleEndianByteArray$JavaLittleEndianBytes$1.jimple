public final enum class com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1 extends com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes
{

    public void <init>(java.lang.String, int)
    {
        com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1 r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes: void <init>(java.lang.String,int,com.google.common.hash.LittleEndianByteArray$1)>($r1, $i0, null);

        return;
    }

    public long getLongLittleEndian(byte[], int)
    {
        com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1 r0;
        byte[] $r1;
        long $l9;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8;
        int $i0, $i10;

        r0 := @this: com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i10 = $i0 + 7;

        $b1 = $r1[$i10];

        $i10 = $i0 + 6;

        $b2 = $r1[$i10];

        $i10 = $i0 + 5;

        $b3 = $r1[$i10];

        $i10 = $i0 + 4;

        $b4 = $r1[$i10];

        $i10 = $i0 + 3;

        $b5 = $r1[$i10];

        $i10 = $i0 + 2;

        $b6 = $r1[$i10];

        $i10 = $i0 + 1;

        $b7 = $r1[$i10];

        $b8 = $r1[$i0];

        $l9 = staticinvoke <com.google.common.primitives.Longs: long fromBytes(byte,byte,byte,byte,byte,byte,byte,byte)>($b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8);

        return $l9;
    }

    public void putLongLittleEndian(byte[], int, long)
    {
        com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1 r0;
        byte[] $r1;
        long $l1, $l4, $l6;
        byte $b7;
        int $i0, $i2, $i3, $i5;

        r0 := @this: com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $l4 = 255L;

        $i5 = 0;

     label1:
        if $i5 >= 8 goto label2;

        $i2 = $i0 + $i5;

        $l6 = $l1 & $l4;

        $i3 = $i5 * 8;

        $l6 = $l6 >> $i3;

        $i3 = (int) $l6;

        $b7 = (byte) $i3;

        $r1[$i2] = $b7;

        $l4 = $l4 << 8;

        $i5 = $i5 + 1;

        goto label1;

     label2:
        return;
    }
}
