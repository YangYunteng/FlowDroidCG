public class com.google.common.collect.StandardTable extends com.google.common.collect.AbstractTable implements java.io.Serializable
{
    public static final long serialVersionUID;
    public final java.util.Map backingMap;
    public transient java.util.Set columnKeySet;
    public transient com.google.common.collect.StandardTable$ColumnMap columnMap;
    public final com.google.common.base.Supplier factory;
    public transient java.util.Map rowMap;

    public void <init>(java.util.Map, com.google.common.base.Supplier)
    {
        com.google.common.base.Supplier $r2;
        com.google.common.collect.StandardTable r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: com.google.common.base.Supplier;

        specialinvoke r0.<com.google.common.collect.AbstractTable: void <init>()>();

        r0.<com.google.common.collect.StandardTable: java.util.Map backingMap> = $r1;

        r0.<com.google.common.collect.StandardTable: com.google.common.base.Supplier factory> = $r2;

        return;
    }

    public static com.google.common.collect.Table$Cell a(java.util.Map$Entry, java.util.Map$Entry)
    {
        java.util.Map$Entry $r0, $r1;
        com.google.common.collect.Table$Cell $r5;
        java.lang.Object $r2, $r3, $r4;

        $r0 := @parameter0: java.util.Map$Entry;

        $r1 := @parameter1: java.util.Map$Entry;

        $r2 = interfaceinvoke $r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = staticinvoke <com.google.common.collect.Tables: com.google.common.collect.Table$Cell immutableCell(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4);

        return $r5;
    }

    public static java.util.Spliterator a(java.util.Map$Entry)
    {
        java.util.Map$Entry $r1;
        java.util.Map $r3;
        java.util.Set $r4;
        c.i.b.c.Bb $r0;
        java.lang.Object $r2;
        java.util.Spliterator $r5;

        $r1 := @parameter0: java.util.Map$Entry;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (java.util.Map) $r2;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Spliterator spliterator()>();

        $r0 = new c.i.b.c.Bb;

        specialinvoke $r0.<c.i.b.c.Bb: void <init>(java.util.Map$Entry)>($r1);

        $r5 = staticinvoke <com.google.common.collect.CollectSpliterators: java.util.Spliterator map(java.util.Spliterator,java.util.function.Function)>($r5, $r0);

        return $r5;
    }

    public static boolean access$300(com.google.common.collect.StandardTable, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.StandardTable $r3;
        java.lang.Object $r0, $r1, $r2;
        boolean $z0;

        $r3 := @parameter0: com.google.common.collect.StandardTable;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $r2 := @parameter3: java.lang.Object;

        $z0 = specialinvoke $r3.<com.google.common.collect.StandardTable: boolean containsMapping(java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        return $z0;
    }

    public static boolean access$400(com.google.common.collect.StandardTable, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.StandardTable $r3;
        java.lang.Object $r0, $r1, $r2;
        boolean $z0;

        $r3 := @parameter0: com.google.common.collect.StandardTable;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $r2 := @parameter3: java.lang.Object;

        $z0 = specialinvoke $r3.<com.google.common.collect.StandardTable: boolean removeMapping(java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        return $z0;
    }

    public static java.util.Map access$900(com.google.common.collect.StandardTable, java.lang.Object)
    {
        java.lang.Object $r0;
        com.google.common.collect.StandardTable $r2;
        java.util.Map $r1;

        $r2 := @parameter0: com.google.common.collect.StandardTable;

        $r0 := @parameter1: java.lang.Object;

        $r1 = specialinvoke $r2.<com.google.common.collect.StandardTable: java.util.Map removeColumn(java.lang.Object)>($r0);

        return $r1;
    }

    private boolean containsMapping(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.StandardTable r0;
        java.lang.Object $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<com.google.common.collect.StandardTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r3, $r1);

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private java.util.Map getOrCreate(java.lang.Object)
    {
        com.google.common.collect.StandardTable r0;
        java.util.Map $r2, $r5;
        com.google.common.base.Supplier $r4;
        java.lang.Object $r1, $r3;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r2 = (java.util.Map) $r3;

        if $r2 != null goto label1;

        $r4 = r0.<com.google.common.collect.StandardTable: com.google.common.base.Supplier factory>;

        $r3 = interfaceinvoke $r4.<com.google.common.base.Supplier: java.lang.Object get()>();

        $r5 = (java.util.Map) $r3;

        $r2 = r0.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

        return $r5;

     label1:
        return $r2;
    }

    private java.util.Map removeColumn(java.lang.Object)
    {
        java.util.Map$Entry $r7;
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.util.LinkedHashMap $r2;
        com.google.common.collect.StandardTable r0;
        java.util.Map $r3;
        java.lang.Object $r1, $r6, $r8;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = r0.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (java.util.Map) $r6;

        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        if $r6 == null goto label1;

        $r8 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r6);

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (java.util.Map) $r6;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return $r2;
    }

    private boolean removeMapping(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.StandardTable r0;
        java.lang.Object $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.StandardTable: boolean containsMapping(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r1, $r3);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.google.common.collect.StandardTable: java.lang.Object remove(java.lang.Object,java.lang.Object)>($r2, $r1);

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator cellIterator()
    {
        com.google.common.collect.StandardTable$CellIterator $r1;
        com.google.common.collect.StandardTable r0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = new com.google.common.collect.StandardTable$CellIterator;

        specialinvoke $r1.<com.google.common.collect.StandardTable$CellIterator: void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1)>(r0, null);

        return $r1;
    }

    public java.util.Set cellSet()
    {
        java.util.Set $r1;
        com.google.common.collect.StandardTable r0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.util.Set cellSet()>();

        return $r1;
    }

    public java.util.Spliterator cellSpliterator()
    {
        c.i.b.c.Ab $r1;
        com.google.common.collect.StandardTable r0;
        java.util.Map $r2;
        int $i0;
        java.util.Set $r3;
        long $l1;
        java.util.Spliterator $r4;

        r0 := @this: com.google.common.collect.StandardTable;

        $r2 = r0.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Spliterator spliterator()>();

        $r1 = <c.i.b.c.Ab: c.i.b.c.Ab a>;

        $i0 = virtualinvoke r0.<com.google.common.collect.StandardTable: int size()>();

        $l1 = (long) $i0;

        $r4 = staticinvoke <com.google.common.collect.CollectSpliterators: java.util.Spliterator flatMap(java.util.Spliterator,java.util.function.Function,int,long)>($r4, $r1, 65, $l1);

        return $r4;
    }

    public void clear()
    {
        com.google.common.collect.StandardTable r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = r0.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public java.util.Map column(java.lang.Object)
    {
        com.google.common.collect.StandardTable$Column $r2;
        java.lang.Object $r1;
        com.google.common.collect.StandardTable r0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new com.google.common.collect.StandardTable$Column;

        specialinvoke $r2.<com.google.common.collect.StandardTable$Column: void <init>(com.google.common.collect.StandardTable,java.lang.Object)>(r0, $r1);

        return $r2;
    }

    public java.util.Set columnKeySet()
    {
        java.util.Set $r1;
        com.google.common.collect.StandardTable$ColumnKeySet $r2;
        com.google.common.collect.StandardTable r0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = r0.<com.google.common.collect.StandardTable: java.util.Set columnKeySet>;

        if $r1 != null goto label1;

        $r2 = new com.google.common.collect.StandardTable$ColumnKeySet;

        specialinvoke $r2.<com.google.common.collect.StandardTable$ColumnKeySet: void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1)>(r0, null);

        r0.<com.google.common.collect.StandardTable: java.util.Set columnKeySet> = $r2;

        return $r2;

     label1:
        return $r1;
    }

    public java.util.Map columnMap()
    {
        com.google.common.collect.StandardTable$ColumnMap $r1;
        com.google.common.collect.StandardTable r0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = r0.<com.google.common.collect.StandardTable: com.google.common.collect.StandardTable$ColumnMap columnMap>;

        if $r1 != null goto label1;

        $r1 = new com.google.common.collect.StandardTable$ColumnMap;

        specialinvoke $r1.<com.google.common.collect.StandardTable$ColumnMap: void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1)>(r0, null);

        r0.<com.google.common.collect.StandardTable: com.google.common.collect.StandardTable$ColumnMap columnMap> = $r1;

     label1:
        return $r1;
    }

    public boolean contains(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.StandardTable r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r2 == null goto label1;

        if $r1 == null goto label1;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractTable: boolean contains(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsColumn(java.lang.Object)
    {
        java.util.Iterator $r4;
        com.google.common.collect.StandardTable r0;
        java.util.Map $r2;
        java.util.Collection $r3;
        java.lang.Object $r1, $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.util.Map) $r5;

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean safeContainsKey(java.util.Map,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label2;

        return 1;

     label3:
        return 0;
    }

    public boolean containsRow(java.lang.Object)
    {
        com.google.common.collect.StandardTable r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r2 := @parameter0: java.lang.Object;

        if $r2 == null goto label1;

        $r1 = r0.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean safeContainsKey(java.util.Map,java.lang.Object)>($r1, $r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.StandardTable r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractTable: boolean containsValue(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator createColumnKeyIterator()
    {
        com.google.common.collect.StandardTable$ColumnKeyIterator $r1;
        com.google.common.collect.StandardTable r0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = new com.google.common.collect.StandardTable$ColumnKeyIterator;

        specialinvoke $r1.<com.google.common.collect.StandardTable$ColumnKeyIterator: void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1)>(r0, null);

        return $r1;
    }

    public java.util.Map createRowMap()
    {
        com.google.common.collect.StandardTable$RowMap $r1;
        com.google.common.collect.StandardTable r0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = new com.google.common.collect.StandardTable$RowMap;

        specialinvoke $r1.<com.google.common.collect.StandardTable$RowMap: void <init>(com.google.common.collect.StandardTable)>(r0);

        return $r1;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        com.google.common.collect.StandardTable r0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r2 == null goto label2;

        if $r1 != null goto label1;

        goto label2;

     label1:
        $r2 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r2, $r1);

        return $r2;

     label2:
        return null;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.StandardTable r0;
        boolean $z0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = r0.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.StandardTable r0;
        java.util.Map $r4;
        java.lang.Object $r1, $r2, $r3;

        r0 := @this: com.google.common.collect.StandardTable;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = specialinvoke r0.<com.google.common.collect.StandardTable: java.util.Map getOrCreate(java.lang.Object)>($r3);

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r3;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.StandardTable r0;
        java.util.Map $r3;
        java.lang.Object $r1, $r2, $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        if $r1 == null goto label3;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r4 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r3, $r1);

        $r3 = (java.util.Map) $r4;

        if $r3 != null goto label2;

        return null;

     label2:
        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r3 = r0.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return $r2;

     label3:
        return null;

     label4:
        return $r2;
    }

    public java.util.Map row(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.StandardTable$Row $r2;
        com.google.common.collect.StandardTable r0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new com.google.common.collect.StandardTable$Row;

        specialinvoke $r2.<com.google.common.collect.StandardTable$Row: void <init>(com.google.common.collect.StandardTable,java.lang.Object)>(r0, $r1);

        return $r2;
    }

    public java.util.Set rowKeySet()
    {
        java.util.Set $r2;
        com.google.common.collect.StandardTable r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.StandardTable: java.util.Map rowMap()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.util.Map rowMap()
    {
        com.google.common.collect.StandardTable r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = r0.<com.google.common.collect.StandardTable: java.util.Map rowMap>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<com.google.common.collect.StandardTable: java.util.Map createRowMap()>();

        r0.<com.google.common.collect.StandardTable: java.util.Map rowMap> = $r1;

     label1:
        return $r1;
    }

    public int size()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        com.google.common.collect.StandardTable r0;
        java.util.Map $r1;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = r0.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.util.Map) $r4;

        $i1 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $i0 = $i0 + $i1;

        goto label1;

     label2:
        return $i0;
    }

    public java.util.Collection values()
    {
        com.google.common.collect.StandardTable r0;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.StandardTable;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.util.Collection values()>();

        return $r1;
    }
}
