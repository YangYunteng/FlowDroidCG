public abstract class com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig extends java.lang.Object
{
    public static final com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig DEFAULT;
    public static final long DURATION_ONE_WEEK_MS;
    public static final int LOAD_BATCH_SIZE;
    public static final int LOCK_TIME_OUT_MS;
    public static final int MAX_BLOB_BYTE_SIZE_PER_ROW;
    public static final long MAX_DB_STORAGE_SIZE_IN_BYTES;

    static void <clinit>()
    {
        com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder $r0;
        com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig $r1;

        <com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: long MAX_DB_STORAGE_SIZE_IN_BYTES> = 10485760L;

        <com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: int MAX_BLOB_BYTE_SIZE_PER_ROW> = 81920;

        <com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: int LOCK_TIME_OUT_MS> = 10000;

        <com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: int LOAD_BATCH_SIZE> = 200;

        <com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: long DURATION_ONE_WEEK_MS> = 604800000L;

        $r0 = staticinvoke <com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder builder()>();

        $r0 = virtualinvoke $r0.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder setMaxStorageSizeInBytes(long)>(10485760L);

        $r0 = virtualinvoke $r0.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder setLoadBatchSize(int)>(200);

        $r0 = virtualinvoke $r0.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder setCriticalSectionEnterTimeoutMs(int)>(10000);

        $r0 = virtualinvoke $r0.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder setEventCleanUpAge(long)>(604800000L);

        $r0 = virtualinvoke $r0.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder setMaxBlobByteSizePerRow(int)>(81920);

        $r1 = virtualinvoke $r0.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig build()>();

        <com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig DEFAULT> = $r1;

        return;
    }

    public void <init>()
    {
        com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig r0;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder builder()
    {
        com.google.android.datatransport.runtime.scheduling.persistence.AutoValue_EventStoreConfig$Builder $r0;

        $r0 = new com.google.android.datatransport.runtime.scheduling.persistence.AutoValue_EventStoreConfig$Builder;

        specialinvoke $r0.<com.google.android.datatransport.runtime.scheduling.persistence.AutoValue_EventStoreConfig$Builder: void <init>()>();

        return $r0;
    }

    public abstract int getCriticalSectionEnterTimeoutMs();

    public abstract long getEventCleanUpAge();

    public abstract int getLoadBatchSize();

    public abstract int getMaxBlobByteSizePerRow();

    public abstract long getMaxStorageSizeInBytes();

    public com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder toBuilder()
    {
        com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder $r1;
        com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig r0;
        int $i1;
        long $l0;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig;

        $r1 = staticinvoke <com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder builder()>();

        $l0 = virtualinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: long getMaxStorageSizeInBytes()>();

        $r1 = virtualinvoke $r1.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder setMaxStorageSizeInBytes(long)>($l0);

        $i1 = virtualinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: int getLoadBatchSize()>();

        $r1 = virtualinvoke $r1.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder setLoadBatchSize(int)>($i1);

        $i1 = virtualinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: int getCriticalSectionEnterTimeoutMs()>();

        $r1 = virtualinvoke $r1.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder setCriticalSectionEnterTimeoutMs(int)>($i1);

        $l0 = virtualinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: long getEventCleanUpAge()>();

        $r1 = virtualinvoke $r1.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder setEventCleanUpAge(long)>($l0);

        $i1 = virtualinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig: int getMaxBlobByteSizePerRow()>();

        $r1 = virtualinvoke $r1.<com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder: com.google.android.datatransport.runtime.scheduling.persistence.EventStoreConfig$Builder setMaxBlobByteSizePerRow(int)>($i1);

        return $r1;
    }
}
