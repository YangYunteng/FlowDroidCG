public abstract class com.google.common.base.CharMatcher extends java.lang.Object implements com.google.common.base.Predicate
{
    public static final com.google.common.base.CharMatcher ANY;
    public static final com.google.common.base.CharMatcher ASCII;
    public static final com.google.common.base.CharMatcher BREAKING_WHITESPACE;
    public static final com.google.common.base.CharMatcher DIGIT;
    public static final int DISTINCT_CHARS;
    public static final com.google.common.base.CharMatcher INVISIBLE;
    public static final com.google.common.base.CharMatcher JAVA_DIGIT;
    public static final com.google.common.base.CharMatcher JAVA_ISO_CONTROL;
    public static final com.google.common.base.CharMatcher JAVA_LETTER;
    public static final com.google.common.base.CharMatcher JAVA_LETTER_OR_DIGIT;
    public static final com.google.common.base.CharMatcher JAVA_LOWER_CASE;
    public static final com.google.common.base.CharMatcher JAVA_UPPER_CASE;
    public static final com.google.common.base.CharMatcher NONE;
    public static final com.google.common.base.CharMatcher SINGLE_WIDTH;
    public static final com.google.common.base.CharMatcher WHITESPACE;

    static void <clinit>()
    {
        com.google.common.base.CharMatcher $r0;

        <com.google.common.base.CharMatcher: int DISTINCT_CHARS> = 65536;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher whitespace()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher WHITESPACE> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher breakingWhitespace()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher BREAKING_WHITESPACE> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher ascii()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher ASCII> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher digit()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher DIGIT> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher javaDigit()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_DIGIT> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher javaLetter()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_LETTER> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher javaLetterOrDigit()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_LETTER_OR_DIGIT> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher javaUpperCase()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_UPPER_CASE> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher javaLowerCase()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_LOWER_CASE> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher javaIsoControl()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_ISO_CONTROL> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher invisible()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher INVISIBLE> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher singleWidth()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher SINGLE_WIDTH> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher any()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher ANY> = $r0;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher none()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher NONE> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.base.CharMatcher r0;

        r0 := @this: com.google.common.base.CharMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String access$100(char)
    {
        char $c0;
        java.lang.String $r0;

        $c0 := @parameter0: char;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: java.lang.String showCharacter(char)>($c0);

        return $r0;
    }

    public static com.google.common.base.CharMatcher any()
    {
        com.google.common.base.CharMatcher$Any r0;

        r0 = <com.google.common.base.CharMatcher$Any: com.google.common.base.CharMatcher$Any INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        com.google.common.base.CharMatcher$AnyOf $r1;
        com.google.common.base.CharMatcher$IsEither $r2;
        int $i0;
        com.google.common.base.CharMatcher $r3;
        char $c1, $c2;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 == 0 goto label3;

        if $i0 == 1 goto label2;

        if $i0 == 2 goto label1;

        $r1 = new com.google.common.base.CharMatcher$AnyOf;

        specialinvoke $r1.<com.google.common.base.CharMatcher$AnyOf: void <init>(java.lang.CharSequence)>($r0);

        return $r1;

     label1:
        $c1 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>(0);

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>(1);

        $r2 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher$IsEither isEither(char,char)>($c1, $c2);

        return $r2;

     label2:
        $c1 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>(0);

        $r3 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>($c1);

        return $r3;

     label3:
        $r3 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher none()>();

        return $r3;
    }

    public static com.google.common.base.CharMatcher ascii()
    {
        com.google.common.base.CharMatcher$Ascii r0;

        r0 = <com.google.common.base.CharMatcher$Ascii: com.google.common.base.CharMatcher$Ascii INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher breakingWhitespace()
    {
        com.google.common.base.CharMatcher r0;

        r0 = <com.google.common.base.CharMatcher$BreakingWhitespace: com.google.common.base.CharMatcher INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher digit()
    {
        com.google.common.base.CharMatcher$Digit r0;

        r0 = <com.google.common.base.CharMatcher$Digit: com.google.common.base.CharMatcher$Digit INSTANCE>;

        return r0;
    }

    private java.lang.String finishCollapseFrom(java.lang.CharSequence, int, int, char, java.lang.StringBuilder, boolean)
    {
        java.lang.CharSequence $r2;
        com.google.common.base.CharMatcher r0;
        char $c1, $c3;
        int $i0, $i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: com.google.common.base.CharMatcher;

        $r2 := @parameter0: java.lang.CharSequence;

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $c1 := @parameter3: char;

        $r1 := @parameter4: java.lang.StringBuilder;

        $z0 := @parameter5: boolean;

     label1:
        if $i2 >= $i0 goto label4;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i2);

        $z1 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z1 == 0 goto label2;

        if $z0 != 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $z0 = 1;

        goto label3;

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $z0 = 0;

     label3:
        $i2 = $i2 + 1;

        goto label1;

     label4:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static com.google.common.base.CharMatcher forPredicate(com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate $r0;
        com.google.common.base.CharMatcher $r1;
        com.google.common.base.CharMatcher$ForPredicate $r2;
        boolean $z0;

        $r0 := @parameter0: com.google.common.base.Predicate;

        $z0 = $r0 instanceof com.google.common.base.CharMatcher;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.base.CharMatcher) $r0;

        return $r1;

     label1:
        $r2 = new com.google.common.base.CharMatcher$ForPredicate;

        specialinvoke $r2.<com.google.common.base.CharMatcher$ForPredicate: void <init>(com.google.common.base.Predicate)>($r0);

        return $r2;
    }

    public static com.google.common.base.CharMatcher inRange(char, char)
    {
        com.google.common.base.CharMatcher$InRange $r0;
        char $c0, $c1;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $r0 = new com.google.common.base.CharMatcher$InRange;

        specialinvoke $r0.<com.google.common.base.CharMatcher$InRange: void <init>(char,char)>($c0, $c1);

        return $r0;
    }

    public static com.google.common.base.CharMatcher invisible()
    {
        com.google.common.base.CharMatcher$Invisible r0;

        r0 = <com.google.common.base.CharMatcher$Invisible: com.google.common.base.CharMatcher$Invisible INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher is(char)
    {
        char $c0;
        com.google.common.base.CharMatcher$Is $r0;

        $c0 := @parameter0: char;

        $r0 = new com.google.common.base.CharMatcher$Is;

        specialinvoke $r0.<com.google.common.base.CharMatcher$Is: void <init>(char)>($c0);

        return $r0;
    }

    public static com.google.common.base.CharMatcher$IsEither isEither(char, char)
    {
        char $c0, $c1;
        com.google.common.base.CharMatcher$IsEither $r0;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $r0 = new com.google.common.base.CharMatcher$IsEither;

        specialinvoke $r0.<com.google.common.base.CharMatcher$IsEither: void <init>(char,char)>($c0, $c1);

        return $r0;
    }

    public static com.google.common.base.CharMatcher isNot(char)
    {
        com.google.common.base.CharMatcher$IsNot $r0;
        char $c0;

        $c0 := @parameter0: char;

        $r0 = new com.google.common.base.CharMatcher$IsNot;

        specialinvoke $r0.<com.google.common.base.CharMatcher$IsNot: void <init>(char)>($c0);

        return $r0;
    }

    public static boolean isSmall(int, int)
    {
        int $i0, $i1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        if $i1 > 1023 goto label1;

        $i1 = $i1 * 4;

        $i1 = $i1 * 16;

        if $i0 <= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static com.google.common.base.CharMatcher javaDigit()
    {
        com.google.common.base.CharMatcher$JavaDigit r0;

        r0 = <com.google.common.base.CharMatcher$JavaDigit: com.google.common.base.CharMatcher$JavaDigit INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher javaIsoControl()
    {
        com.google.common.base.CharMatcher$JavaIsoControl r0;

        r0 = <com.google.common.base.CharMatcher$JavaIsoControl: com.google.common.base.CharMatcher$JavaIsoControl INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher javaLetter()
    {
        com.google.common.base.CharMatcher$JavaLetter r0;

        r0 = <com.google.common.base.CharMatcher$JavaLetter: com.google.common.base.CharMatcher$JavaLetter INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher javaLetterOrDigit()
    {
        com.google.common.base.CharMatcher$JavaLetterOrDigit r0;

        r0 = <com.google.common.base.CharMatcher$JavaLetterOrDigit: com.google.common.base.CharMatcher$JavaLetterOrDigit INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher javaLowerCase()
    {
        com.google.common.base.CharMatcher$JavaLowerCase r0;

        r0 = <com.google.common.base.CharMatcher$JavaLowerCase: com.google.common.base.CharMatcher$JavaLowerCase INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher javaUpperCase()
    {
        com.google.common.base.CharMatcher$JavaUpperCase r0;

        r0 = <com.google.common.base.CharMatcher$JavaUpperCase: com.google.common.base.CharMatcher$JavaUpperCase INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher none()
    {
        com.google.common.base.CharMatcher$None r0;

        r0 = <com.google.common.base.CharMatcher$None: com.google.common.base.CharMatcher$None INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher noneOf(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher $r1;
        java.lang.CharSequence $r0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>($r0);

        $r1 = virtualinvoke $r1.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher negate()>();

        return $r1;
    }

    public static com.google.common.base.CharMatcher precomputedPositive(int, java.util.BitSet, java.lang.String)
    {
        com.google.common.base.CharMatcher $r2;
        char $c2, $c3;
        com.google.common.base.CharMatcher$IsEither $r3;
        int $i0, $i1;
        com.google.common.base.CharMatcher$BitSetMatcher $r4;
        java.util.BitSet $r0;
        java.lang.String $r1;
        boolean $z0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.util.BitSet;

        $r1 := @parameter2: java.lang.String;

        if $i0 == 0 goto label4;

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        $i1 = virtualinvoke $r0.<java.util.BitSet: int length()>();

        $z0 = staticinvoke <com.google.common.base.CharMatcher: boolean isSmall(int,int)>($i0, $i1);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.base.SmallCharMatcher: com.google.common.base.CharMatcher 'from'(java.util.BitSet,java.lang.String)>($r0, $r1);

        return $r2;

     label1:
        $r4 = new com.google.common.base.CharMatcher$BitSetMatcher;

        specialinvoke $r4.<com.google.common.base.CharMatcher$BitSetMatcher: void <init>(java.util.BitSet,java.lang.String,com.google.common.base.CharMatcher$1)>($r0, $r1, null);

        return $r4;

     label2:
        $i0 = virtualinvoke $r0.<java.util.BitSet: int nextSetBit(int)>(0);

        $c2 = (char) $i0;

        $i0 = (int) $c2;

        $i0 = $i0 + 1;

        $i0 = virtualinvoke $r0.<java.util.BitSet: int nextSetBit(int)>($i0);

        $c3 = (char) $i0;

        $r3 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher$IsEither isEither(char,char)>($c2, $c3);

        return $r3;

     label3:
        $i0 = virtualinvoke $r0.<java.util.BitSet: int nextSetBit(int)>(0);

        $c2 = (char) $i0;

        $r2 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>($c2);

        return $r2;

     label4:
        $r2 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher none()>();

        return $r2;
    }

    public static java.lang.String showCharacter(char)
    {
        int $i0, $i2, $i4;
        char[] $r1;
        char $c1, $c3;
        java.lang.String $r0;

        $c1 := @parameter0: char;

        $r1 = newarray (char)[6];

        $r1[0] = 92;

        $r1[1] = 117;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 0;

        $r1[5] = 0;

        $i2 = 0;

     label1:
        if $i2 >= 4 goto label2;

        $i0 = 5 - $i2;

        $c3 = $c1 & 15;

        $r0 = "0123456789ABCDEF";

        $i4 = (int) $c3;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i4);

        $r1[$i0] = $c3;

        $i0 = (int) $c1;

        $i0 = $i0 >> 4;

        $c1 = (char) $i0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r0 = staticinvoke <java.lang.String: java.lang.String copyValueOf(char[])>($r1);

        return $r0;
    }

    public static com.google.common.base.CharMatcher singleWidth()
    {
        com.google.common.base.CharMatcher$SingleWidth r0;

        r0 = <com.google.common.base.CharMatcher$SingleWidth: com.google.common.base.CharMatcher$SingleWidth INSTANCE>;

        return r0;
    }

    public static com.google.common.base.CharMatcher whitespace()
    {
        com.google.common.base.CharMatcher$Whitespace r0;

        r0 = <com.google.common.base.CharMatcher$Whitespace: com.google.common.base.CharMatcher$Whitespace INSTANCE>;

        return r0;
    }

    public com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher)
    {
        com.google.common.base.CharMatcher r0, $r1;
        com.google.common.base.CharMatcher$And $r2;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: com.google.common.base.CharMatcher;

        $r2 = new com.google.common.base.CharMatcher$And;

        specialinvoke $r2.<com.google.common.base.CharMatcher$And: void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)>(r0, $r1);

        return $r2;
    }

    public boolean apply(java.lang.Character)
    {
        java.lang.Character $r1;
        com.google.common.base.CharMatcher r0;
        char $c0;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke $r1.<java.lang.Character: char charValue()>();

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c0);

        return $z0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        java.lang.Character $r2;
        com.google.common.base.CharMatcher r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Character) $r1;

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean apply(java.lang.Character)>($r2);

        return $z0;
    }

    public java.lang.String collapseFrom(java.lang.CharSequence, char)
    {
        java.lang.CharSequence $r2;
        com.google.common.base.CharMatcher r0;
        char $c0, $c3;
        int $i1, $i2, $i4, $i5;
        java.lang.StringBuilder $r1, $r4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r2 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label5;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i2);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label4;

        $i4 = (int) $c3;

        $i5 = (int) $c0;

        if $i4 != $i5 goto label3;

        $i4 = -1;

        $i4 = $i1 + $i4;

        if $i2 == $i4 goto label2;

        $i4 = $i2 + 1;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i4);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 != 0 goto label3;

     label2:
        $i2 = $i2 + 1;

        goto label4;

     label3:
        $r4 = new java.lang.StringBuilder;

        $r1 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, 0, $i2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $i2 = $i2 + 1;

        $r3 = specialinvoke r0.<com.google.common.base.CharMatcher: java.lang.String finishCollapseFrom(java.lang.CharSequence,int,int,char,java.lang.StringBuilder,boolean)>($r2, $i2, $i1, $c0, $r1, 1);

        return $r3;

     label4:
        $i2 = $i2 + 1;

        goto label1;

     label5:
        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        return $r3;
    }

    public int countIn(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher r0;
        int $i0, $i1, $i2;
        char $c3;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = 0;

        $i1 = 0;

     label1:
        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 >= $i2 goto label3;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label2;

        $i1 = $i1 + 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $i1;
    }

    public int indexIn(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        int $i0;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence,int)>($r1, 0);

        return $i0;
    }

    public int indexIn(java.lang.CharSequence, int)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher r0;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>($i0, $i1);

     label1:
        if $i0 >= $i1 goto label3;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c2);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i0 = -1;

        return $i0;
    }

    public int lastIndexIn(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher r0;
        int $i0, $i2;
        char $c1;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i2 = -1;

        $i0 = $i0 + $i2;

     label1:
        if $i0 < 0 goto label3;

        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c1);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i2 = -1;

        $i0 = $i0 + $i2;

        goto label1;

     label3:
        $i0 = -1;

        return $i0;
    }

    public abstract boolean matches(char);

    public boolean matchesAllOf(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher r0;
        int $i0, $i2;
        char $c1;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = $i0 - 1;

     label1:
        if $i0 < 0 goto label3;

        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i2 = -1;

        $i0 = $i0 + $i2;

        goto label1;

     label3:
        return 1;
    }

    public boolean matchesAnyOf(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence $r1;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matchesNoneOf(java.lang.CharSequence)>($r1);

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public boolean matchesNoneOf(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher r0;
        int $i0, $i1;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>($r1);

        $i1 = -1;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public com.google.common.base.CharMatcher negate()
    {
        com.google.common.base.CharMatcher r0;
        com.google.common.base.CharMatcher$Negated $r1;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 = new com.google.common.base.CharMatcher$Negated;

        specialinvoke $r1.<com.google.common.base.CharMatcher$Negated: void <init>(com.google.common.base.CharMatcher)>(r0);

        return $r1;
    }

    public volatile java.util.function.Predicate negate()
    {
        com.google.common.base.CharMatcher r0;

        r0 := @this: com.google.common.base.CharMatcher;

        r0 = virtualinvoke r0.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher negate()>();

        return r0;
    }

    public com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)
    {
        com.google.common.base.CharMatcher r0, $r1;
        com.google.common.base.CharMatcher$Or $r2;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: com.google.common.base.CharMatcher;

        $r2 = new com.google.common.base.CharMatcher$Or;

        specialinvoke $r2.<com.google.common.base.CharMatcher$Or: void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)>(r0, $r1);

        return $r2;
    }

    public com.google.common.base.CharMatcher precomputed()
    {
        com.google.common.base.CharMatcher r0;

        r0 := @this: com.google.common.base.CharMatcher;

        r0 = staticinvoke <com.google.common.base.Platform: com.google.common.base.CharMatcher precomputeCharMatcher(com.google.common.base.CharMatcher)>(r0);

        return r0;
    }

    public com.google.common.base.CharMatcher precomputedInternal()
    {
        com.google.common.base.CharMatcher r0, $r5;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r4, $r7;
        java.util.BitSet $r1, $r6;
        java.lang.String $r2, $r3;
        com.google.common.base.CharMatcher$1 $r8;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r6 = new java.util.BitSet;

        $r1 = $r6;

        specialinvoke $r6.<java.util.BitSet: void <init>()>();

        virtualinvoke r0.<com.google.common.base.CharMatcher: void setBits(java.util.BitSet)>($r1);

        $i0 = virtualinvoke $r1.<java.util.BitSet: int cardinality()>();

        $i1 = $i0 * 2;

        if $i1 > 65536 goto label1;

        $r2 = virtualinvoke r0.<com.google.common.base.CharMatcher: java.lang.String toString()>();

        r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputedPositive(int,java.util.BitSet,java.lang.String)>($i0, $r1, $r2);

        return r0;

     label1:
        virtualinvoke $r1.<java.util.BitSet: void flip(int,int)>(0, 65536);

        $i0 = 65536 - $i0;

        $r2 = virtualinvoke r0.<com.google.common.base.CharMatcher: java.lang.String toString()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".negate()");

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i2 = -9;

        $i1 = $i1 + $i2;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        goto label3;

     label2:
        $r7 = new java.lang.StringBuilder;

        $r4 = $r7;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".negate()");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r8 = new com.google.common.base.CharMatcher$1;

        $r5 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputedPositive(int,java.util.BitSet,java.lang.String)>($i0, $r1, $r3);

        specialinvoke $r8.<com.google.common.base.CharMatcher$1: void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher,java.lang.String)>(r0, $r5, $r2);

        return $r8;
    }

    public java.lang.String removeFrom(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher r0;
        char $c0;
        int $i1, $i2, $i3;
        char[] $r3;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        $i1 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>($r2);

        $i2 = $i1;

        $i3 = -1;

        if $i1 != $i3 goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $i1 = 1;

     label2:
        $i2 = $i2 + 1;

     label3:
        $i3 = lengthof $r3;

        if $i2 != $i3 goto label4;

        $r4 = new java.lang.String;

        $i2 = $i2 - $i1;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r3, 0, $i2);

        return $r4;

     label4:
        $c0 = $r3[$i2];

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c0);

        if $z0 == 0 goto label5;

        $i1 = $i1 + 1;

        goto label2;

     label5:
        $i3 = $i2 - $i1;

        $c0 = $r3[$i2];

        $r3[$i3] = $c0;

        $i2 = $i2 + 1;

        goto label3;
    }

    public java.lang.String replaceFrom(java.lang.CharSequence, char)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher r0;
        char $c0, $c3;
        int $i1, $i2, $i4;
        char[] $r3;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        $i1 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>($r2);

        $i2 = $i1;

        $i4 = -1;

        if $i1 != $i4 goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $r3[$i1] = $c0;

     label2:
        $i2 = $i2 + 1;

        $i1 = lengthof $r3;

        if $i2 >= $i1 goto label3;

        $c3 = $r3[$i2];

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label2;

        $r3[$i2] = $c0;

        goto label2;

     label3:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r3);

        return $r4;
    }

    public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r2, $r3;
        com.google.common.base.CharMatcher r0;
        char $c2;
        int $i0, $i1, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r5;
        java.lang.String $r4;

        r0 := @this: com.google.common.base.CharMatcher;

        $r2 := @parameter0: java.lang.CharSequence;

        $r3 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        $r4 = virtualinvoke r0.<com.google.common.base.CharMatcher: java.lang.String removeFrom(java.lang.CharSequence)>($r2);

        return $r4;

     label1:
        $i1 = 0;

        if $i0 != 1 goto label2;

        $c2 = interfaceinvoke $r3.<java.lang.CharSequence: char charAt(int)>(0);

        $r4 = virtualinvoke r0.<com.google.common.base.CharMatcher: java.lang.String replaceFrom(java.lang.CharSequence,char)>($r2, $c2);

        return $r4;

     label2:
        $r4 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        $i3 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>($r4);

        $i0 = $i3;

        $i4 = -1;

        if $i3 != $i4 goto label3;

        return $r4;

     label3:
        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r5 = new java.lang.StringBuilder;

        $r1 = $r5;

        $i4 = $i3 * 3;

        $i4 = $i4 / 2;

        $i4 = $i4 + 16;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i4);

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r4, $i1, $i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r3);

        $i1 = $i0 + 1;

        $i4 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence,int)>($r4, $i1);

        $i0 = $i4;

        $i5 = -1;

        if $i4 != $i5 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r4, $i1, $i3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String retainFrom(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.String $r2;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        r0 = virtualinvoke r0.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher negate()>();

        $r2 = virtualinvoke r0.<com.google.common.base.CharMatcher: java.lang.String removeFrom(java.lang.CharSequence)>($r1);

        return $r2;
    }

    public void setBits(java.util.BitSet)
    {
        com.google.common.base.CharMatcher r0;
        int $i0, $i2;
        char $c1;
        java.util.BitSet $r1;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.util.BitSet;

        $i0 = 65535;

     label1:
        if $i0 < 0 goto label3;

        $c1 = (char) $i0;

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c1);

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<java.util.BitSet: void set(int)>($i0);

     label2:
        $i2 = -1;

        $i0 = $i0 + $i2;

        goto label1;

     label3:
        return;
    }

    public boolean test(java.lang.Object)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <c.i.b.a.a: boolean a(com.google.common.base.Predicate,java.lang.Object)>(r0, $r1);

        return $z0;
    }

    public java.lang.String toString()
    {
        com.google.common.base.CharMatcher r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String trimAndCollapseFrom(java.lang.CharSequence, char)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher r0;
        char $c0, $c4;
        int $i1, $i2, $i3, $i5;
        java.lang.StringBuilder $r3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i3 = -1;

        $i1 = $i2 + $i3;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label2;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i3);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c4);

        if $z0 == 0 goto label2;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $i2 = $i1;

     label3:
        if $i2 <= $i3 goto label4;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i2);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c4);

        if $z0 == 0 goto label4;

        $i5 = -1;

        $i2 = $i2 + $i5;

        goto label3;

     label4:
        if $i3 != 0 goto label5;

        if $i2 != $i1 goto label5;

        $r2 = virtualinvoke r0.<com.google.common.base.CharMatcher: java.lang.String collapseFrom(java.lang.CharSequence,char)>($r1, $c0);

        return $r2;

     label5:
        $i1 = $i2 + 1;

        $r3 = new java.lang.StringBuilder;

        $i2 = $i1 - $i3;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r2 = specialinvoke r0.<com.google.common.base.CharMatcher: java.lang.String finishCollapseFrom(java.lang.CharSequence,int,int,char,java.lang.StringBuilder,boolean)>($r1, $i3, $i1, $c0, $r3, 0);

        return $r2;
    }

    public java.lang.String trimFrom(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher r0;
        char $c2;
        int $i0, $i1, $i3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c2);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i3 = -1;

        $i0 = $i0 + $i3;

     label4:
        if $i0 <= $i1 goto label6;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c2);

        if $z0 != 0 goto label5;

        goto label6;

     label5:
        $i3 = -1;

        $i0 = $i0 + $i3;

        goto label4;

     label6:
        $i0 = $i0 + 1;

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String trimLeadingFrom(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher r0;
        int $i0, $i1;
        char $c2;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c2);

        if $z0 != 0 goto label2;

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return "";
    }

    public java.lang.String trimTrailingFrom(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher r0;
        int $i0, $i2;
        char $c1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i2 = -1;

        $i0 = $i0 + $i2;

     label1:
        if $i0 < 0 goto label3;

        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c1);

        if $z0 != 0 goto label2;

        $i0 = $i0 + 1;

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;

     label2:
        $i2 = -1;

        $i0 = $i0 + $i2;

        goto label1;

     label3:
        return "";
    }
}
