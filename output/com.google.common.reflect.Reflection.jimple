public final class com.google.common.reflect.Reflection extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.reflect.Reflection r0;

        r0 := @this: com.google.common.reflect.Reflection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getPackageName(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r1 = staticinvoke <com.google.common.reflect.Reflection: java.lang.String getPackageName(java.lang.String)>($r1);

        return $r1;
    }

    public static java.lang.String getPackageName(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 >= 0 goto label1;

        return "";

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r0;
    }

    public static transient void initialize(java.lang.Class[])
    {
        java.lang.Class[] $r0;
        java.lang.AssertionError $r5;
        int $i0, $i1;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r4;
        java.lang.String $r2;
        java.lang.ClassLoader $r3;

        $r0 := @parameter0: java.lang.Class[];

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label5;

        $r1 = $r0[$i1];

     label2:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r2, 1, $r3);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r5;

     label5:
        return;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }

    public static java.lang.Object newProxy(java.lang.Class, java.lang.reflect.InvocationHandler)
    {
        java.lang.Class[] $r3;
        java.lang.Class $r0;
        java.lang.Object $r4;
        java.lang.reflect.InvocationHandler $r1;
        java.lang.ClassLoader $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.reflect.InvocationHandler;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isInterface()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "%s is not an interface", $r0);

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = $r0;

        $r4 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r2, $r3, $r1);

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r4);

        return $r4;
    }
}
