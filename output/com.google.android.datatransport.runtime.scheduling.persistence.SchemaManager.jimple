public final class com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager extends android.database.sqlite.SQLiteOpenHelper
{
    public static final java.lang.String CREATE_CONTEXTS_SQL_V1;
    public static final java.lang.String CREATE_CONTEXT_BACKEND_PRIORITY_INDEX_V1;
    public static final java.lang.String CREATE_EVENTS_SQL_V1;
    public static final java.lang.String CREATE_EVENT_BACKEND_INDEX_V1;
    public static final java.lang.String CREATE_EVENT_METADATA_SQL_V1;
    public static final java.lang.String CREATE_PAYLOADS_TABLE_V4;
    public static final java.lang.String DB_NAME;
    public static final java.lang.String DROP_CONTEXTS_SQL;
    public static final java.lang.String DROP_EVENTS_SQL;
    public static final java.lang.String DROP_EVENT_METADATA_SQL;
    public static final java.lang.String DROP_PAYLOADS_SQL;
    public static final java.util.List INCREMENTAL_MIGRATIONS;
    public static final com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V1;
    public static final com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V2;
    public static final com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V3;
    public static final com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V4;
    public static int SCHEMA_VERSION;
    public boolean configured;
    public final int schemaVersion;

    static void <clinit>()
    {
        java.util.List $r2;
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration[] $r1;
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration $r0;

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: int SCHEMA_VERSION> = 4;

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.lang.String DROP_PAYLOADS_SQL> = "DROP TABLE IF EXISTS event_payloads";

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.lang.String DROP_EVENT_METADATA_SQL> = "DROP TABLE event_metadata";

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.lang.String DROP_EVENTS_SQL> = "DROP TABLE events";

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.lang.String DROP_CONTEXTS_SQL> = "DROP TABLE transport_contexts";

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.lang.String DB_NAME> = "com.google.android.datatransport.events";

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.lang.String CREATE_PAYLOADS_TABLE_V4> = "CREATE TABLE event_payloads (sequence_num INTEGER NOT NULL, event_id INTEGER NOT NULL, bytes BLOB NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE,PRIMARY KEY (sequence_num, event_id))";

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.lang.String CREATE_EVENT_METADATA_SQL_V1> = "CREATE TABLE event_metadata (_id INTEGER PRIMARY KEY, event_id INTEGER NOT NULL, name TEXT NOT NULL, value TEXT NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE)";

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.lang.String CREATE_EVENT_BACKEND_INDEX_V1> = "CREATE INDEX events_backend_id on events(context_id)";

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.lang.String CREATE_EVENTS_SQL_V1> = "CREATE TABLE events (_id INTEGER PRIMARY KEY, context_id INTEGER NOT NULL, transport_name TEXT NOT NULL, timestamp_ms INTEGER NOT NULL, uptime_ms INTEGER NOT NULL, payload BLOB NOT NULL, code INTEGER, num_attempts INTEGER NOT NULL,FOREIGN KEY (context_id) REFERENCES transport_contexts(_id) ON DELETE CASCADE)";

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.lang.String CREATE_CONTEXT_BACKEND_PRIORITY_INDEX_V1> = "CREATE UNIQUE INDEX contexts_backend_priority on transport_contexts(backend_name, priority)";

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.lang.String CREATE_CONTEXTS_SQL_V1> = "CREATE TABLE transport_contexts (_id INTEGER PRIMARY KEY, backend_name TEXT NOT NULL, priority INTEGER NOT NULL, next_request_ms INTEGER NOT NULL)";

        $r0 = staticinvoke <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$$Lambda$1: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration lambdaFactory$()>();

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V1> = $r0;

        $r0 = staticinvoke <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$$Lambda$2: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration lambdaFactory$()>();

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V2> = $r0;

        $r0 = staticinvoke <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$$Lambda$3: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration lambdaFactory$()>();

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V3> = $r0;

        $r0 = staticinvoke <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$$Lambda$4: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration lambdaFactory$()>();

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V4> = $r0;

        $r1 = newarray (com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration)[4];

        $r0 = <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V1>;

        $r1[0] = $r0;

        $r0 = <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V2>;

        $r1[1] = $r0;

        $r0 = <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V3>;

        $r1[2] = $r0;

        $r0 = <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration MIGRATE_TO_V4>;

        $r1[3] = $r0;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.util.List INCREMENTAL_MIGRATIONS> = $r2;

        return;
    }

    public void <init>(android.content.Context, java.lang.String, int)
    {
        android.content.Context $r2;
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager;

        $r2 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>($r2, $r1, null, $i0);

        r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: boolean configured> = 0;

        r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: int schemaVersion> = $i0;

        return;
    }

    private void ensureConfigured(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r1;
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager r0;
        boolean $z0;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $z0 = r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: boolean configured>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: void onConfigure(android.database.sqlite.SQLiteDatabase)>($r1);

     label1:
        return;
    }

    public static void lambda$static$0(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE events (_id INTEGER PRIMARY KEY, context_id INTEGER NOT NULL, transport_name TEXT NOT NULL, timestamp_ms INTEGER NOT NULL, uptime_ms INTEGER NOT NULL, payload BLOB NOT NULL, code INTEGER, num_attempts INTEGER NOT NULL,FOREIGN KEY (context_id) REFERENCES transport_contexts(_id) ON DELETE CASCADE)");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE event_metadata (_id INTEGER PRIMARY KEY, event_id INTEGER NOT NULL, name TEXT NOT NULL, value TEXT NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE)");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE transport_contexts (_id INTEGER PRIMARY KEY, backend_name TEXT NOT NULL, priority INTEGER NOT NULL, next_request_ms INTEGER NOT NULL)");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE INDEX events_backend_id on events(context_id)");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE UNIQUE INDEX contexts_backend_priority on transport_contexts(backend_name, priority)");

        return;
    }

    public static void lambda$static$1(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE transport_contexts ADD COLUMN extras BLOB");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE UNIQUE INDEX contexts_backend_priority_extras on transport_contexts(backend_name, priority, extras)");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP INDEX contexts_backend_priority");

        return;
    }

    public static void lambda$static$2(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE events ADD COLUMN payload_encoding TEXT");

        return;
    }

    public static void lambda$static$3(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r0;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE events ADD COLUMN inline BOOLEAN NOT NULL DEFAULT 1");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS event_payloads");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE event_payloads (sequence_num INTEGER NOT NULL, event_id INTEGER NOT NULL, bytes BLOB NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE,PRIMARY KEY (sequence_num, event_id))");

        return;
    }

    private void onCreate(android.database.sqlite.SQLiteDatabase, int)
    {
        int $i0;
        android.database.sqlite.SQLiteDatabase $r1;
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager r0;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter1: int;

        specialinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: void ensureConfigured(android.database.sqlite.SQLiteDatabase)>($r1);

        specialinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: void upgrade(android.database.sqlite.SQLiteDatabase,int,int)>($r1, 0, $i0);

        return;
    }

    private void upgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager r0;
        java.lang.IllegalArgumentException $r5;
        android.database.sqlite.SQLiteDatabase $r1;
        java.util.List $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration $r4;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r2 = <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.util.List INCREMENTAL_MIGRATIONS>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 > $i2 goto label3;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.util.List INCREMENTAL_MIGRATIONS>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration) $r3;

        interfaceinvoke $r4.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration: void upgrade(android.database.sqlite.SQLiteDatabase)>($r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Migration from ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was requested, but cannot be performed. Only ");

        $r2 = <com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: java.util.List INCREMENTAL_MIGRATIONS>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" migrations are provided");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        goto label4;

     label4:
        throw $r5;
    }

    public void onConfigure(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r1;
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager r0;
        int $i0;
        java.lang.String[] $r3;
        android.database.Cursor $r2;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: boolean configured> = 1;

        $r3 = newarray (java.lang.String)[0];

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("PRAGMA busy_timeout=0;", $r3);

        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>(1);

     label1:
        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        int $i0;
        android.database.sqlite.SQLiteDatabase $r1;
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager r0;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $i0 = r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: int schemaVersion>;

        specialinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: void onCreate(android.database.sqlite.SQLiteDatabase,int)>($r1, $i0);

        return;
    }

    public void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        android.database.sqlite.SQLiteDatabase $r1;
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager r0;
        int $i0, $i1;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE events");

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE event_metadata");

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE transport_contexts");

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS event_payloads");

        specialinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: void onCreate(android.database.sqlite.SQLiteDatabase,int)>($r1, $i0);

        return;
    }

    public void onOpen(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase $r1;
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager r0;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: void ensureConfigured(android.database.sqlite.SQLiteDatabase)>($r1);

        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        android.database.sqlite.SQLiteDatabase $r1;
        com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager r0;
        int $i0, $i1;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: void ensureConfigured(android.database.sqlite.SQLiteDatabase)>($r1);

        specialinvoke r0.<com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager: void upgrade(android.database.sqlite.SQLiteDatabase,int,int)>($r1, $i0, $i1);

        return;
    }
}
