public final class com.google.common.hash.HashCode$IntHashCode extends com.google.common.hash.HashCode implements java.io.Serializable
{
    public static final long serialVersionUID;
    public final int hash;

    public void <init>(int)
    {
        int $i0;
        com.google.common.hash.HashCode$IntHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$IntHashCode;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.hash.HashCode: void <init>()>();

        r0.<com.google.common.hash.HashCode$IntHashCode: int hash> = $i0;

        return;
    }

    public byte[] asBytes()
    {
        byte[] $r1;
        byte $b1;
        int $i0, $i2;
        com.google.common.hash.HashCode$IntHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$IntHashCode;

        $r1 = newarray (byte)[4];

        $i0 = r0.<com.google.common.hash.HashCode$IntHashCode: int hash>;

        $b1 = (byte) $i0;

        $r1[0] = $b1;

        $i2 = $i0 >> 8;

        $b1 = (byte) $i2;

        $r1[1] = $b1;

        $i2 = $i0 >> 16;

        $b1 = (byte) $i2;

        $r1[2] = $b1;

        $i0 = $i0 >> 24;

        $b1 = (byte) $i0;

        $r1[3] = $b1;

        return $r1;
    }

    public int asInt()
    {
        int i0;
        com.google.common.hash.HashCode$IntHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$IntHashCode;

        i0 = r0.<com.google.common.hash.HashCode$IntHashCode: int hash>;

        return i0;
    }

    public long asLong()
    {
        java.lang.IllegalStateException $r1;
        com.google.common.hash.HashCode$IntHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$IntHashCode;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this HashCode only has 32 bits; cannot create a long");

        throw $r1;
    }

    public int bits()
    {
        com.google.common.hash.HashCode$IntHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$IntHashCode;

        return 32;
    }

    public boolean equalsSameBits(com.google.common.hash.HashCode)
    {
        com.google.common.hash.HashCode $r1;
        int $i0, $i1;
        com.google.common.hash.HashCode$IntHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$IntHashCode;

        $r1 := @parameter0: com.google.common.hash.HashCode;

        $i0 = r0.<com.google.common.hash.HashCode$IntHashCode: int hash>;

        $i1 = virtualinvoke $r1.<com.google.common.hash.HashCode: int asInt()>();

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public long padToLong()
    {
        int $i1;
        long $l0;
        com.google.common.hash.HashCode$IntHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$IntHashCode;

        $i1 = r0.<com.google.common.hash.HashCode$IntHashCode: int hash>;

        $l0 = staticinvoke <com.google.common.primitives.UnsignedInts: long toLong(int)>($i1);

        return $l0;
    }

    public void writeBytesToImpl(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.hash.HashCode$IntHashCode r0;
        byte $b6;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.google.common.hash.HashCode$IntHashCode;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i4 = 0;

     label1:
        if $i4 >= $i1 goto label2;

        $i2 = $i0 + $i4;

        $i5 = r0.<com.google.common.hash.HashCode$IntHashCode: int hash>;

        $i3 = $i4 * 8;

        $i3 = $i5 >> $i3;

        $b6 = (byte) $i3;

        $r1[$i2] = $b6;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return;
    }
}
