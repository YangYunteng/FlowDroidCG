public abstract class org.codehaus.jackson.map.ser.impl.PropertySerializerMap extends java.lang.Object
{

    public void <init>()
    {
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.codehaus.jackson.map.ser.impl.PropertySerializerMap emptyMap()
    {
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$Empty r0;

        r0 = <org.codehaus.jackson.map.ser.impl.PropertySerializerMap$Empty: org.codehaus.jackson.map.ser.impl.PropertySerializerMap$Empty instance>;

        return r0;
    }

    public final org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSerializer(java.lang.Class, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Class $r1;
        org.codehaus.jackson.map.JsonSerializer $r4;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r0;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult $r5;

        r0 := @this: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r1, $r3);

        $r5 = new org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap newWith(java.lang.Class,org.codehaus.jackson.map.JsonSerializer)>($r1, $r4);

        specialinvoke $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: void <init>(org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.ser.impl.PropertySerializerMap)>($r4, r0);

        return $r5;
    }

    public final org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSerializer(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Class $r6;
        org.codehaus.jackson.map.JsonSerializer $r4;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r0;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult $r5;

        r0 := @this: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r3);

        $r5 = new org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap newWith(java.lang.Class,org.codehaus.jackson.map.JsonSerializer)>($r6, $r4);

        specialinvoke $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: void <init>(org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.ser.impl.PropertySerializerMap)>($r4, r0);

        return $r5;
    }

    public abstract org.codehaus.jackson.map.ser.impl.PropertySerializerMap newWith(java.lang.Class, org.codehaus.jackson.map.JsonSerializer);

    public abstract org.codehaus.jackson.map.JsonSerializer serializerFor(java.lang.Class);
}
