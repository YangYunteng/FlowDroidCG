public class org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer extends org.codehaus.jackson.map.jsontype.impl.AsArrayTypeSerializer
{
    public final java.lang.String _typePropertyName;

    public void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver, org.codehaus.jackson.map.BeanProperty, java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r1;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer r0;
        java.lang.String $r3;
        org.codehaus.jackson.map.BeanProperty $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.jsontype.TypeIdResolver;

        $r2 := @parameter1: org.codehaus.jackson.map.BeanProperty;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.AsArrayTypeSerializer: void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r1, $r2);

        r0.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer: java.lang.String _typePropertyName> = $r3;

        return;
    }

    public java.lang.String getPropertyName()
    {
        java.lang.String r1;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer;

        r1 = r0.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer: java.lang.String _typePropertyName>;

        return r1;
    }

    public org.codehaus.jackson.annotate.JsonTypeInfo$As getTypeInclusion()
    {
        org.codehaus.jackson.annotate.JsonTypeInfo$As r1;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer;

        r1 = <org.codehaus.jackson.annotate.JsonTypeInfo$As: org.codehaus.jackson.annotate.JsonTypeInfo$As PROPERTY>;

        return r1;
    }

    public void writeTypePrefixForObject(java.lang.Object, org.codehaus.jackson.JsonGenerator)
    {
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r3;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        java.lang.Object $r5;
        java.lang.String $r2, $r4;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer;

        $r5 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeStartObject()>();

        $r2 = r0.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer: java.lang.String _typePropertyName>;

        $r3 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeSerializerBase: org.codehaus.jackson.map.jsontype.TypeIdResolver _idResolver>;

        $r4 = interfaceinvoke $r3.<org.codehaus.jackson.map.jsontype.TypeIdResolver: java.lang.String idFromValue(java.lang.Object)>($r5);

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>($r2, $r4);

        return;
    }

    public void writeTypePrefixForObject(java.lang.Object, org.codehaus.jackson.JsonGenerator, java.lang.Class)
    {
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r4;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        java.lang.Class $r2;
        java.lang.Object $r6;
        java.lang.String $r3, $r5;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer;

        $r6 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: java.lang.Class;

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeStartObject()>();

        $r3 = r0.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer: java.lang.String _typePropertyName>;

        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeSerializerBase: org.codehaus.jackson.map.jsontype.TypeIdResolver _idResolver>;

        $r5 = interfaceinvoke $r4.<org.codehaus.jackson.map.jsontype.TypeIdResolver: java.lang.String idFromValueAndType(java.lang.Object,java.lang.Class)>($r6, $r2);

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>($r3, $r5);

        return;
    }

    public void writeTypeSuffixForObject(java.lang.Object, org.codehaus.jackson.JsonGenerator)
    {
        java.lang.Object $r1;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer r0;
        org.codehaus.jackson.JsonGenerator $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeEndObject()>();

        return;
    }
}
