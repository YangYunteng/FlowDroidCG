public final class com.google.common.collect.DenseImmutableTable extends com.google.common.collect.RegularImmutableTable
{
    public final int[] cellColumnIndices;
    public final int[] cellRowIndices;
    public final int[] columnCounts;
    public final com.google.common.collect.ImmutableMap columnKeyToIndex;
    public final com.google.common.collect.ImmutableMap columnMap;
    public final int[] rowCounts;
    public final com.google.common.collect.ImmutableMap rowKeyToIndex;
    public final com.google.common.collect.ImmutableMap rowMap;
    public final java.lang.Object[][] values;

    public void <init>(com.google.common.collect.ImmutableList, com.google.common.collect.ImmutableSet, com.google.common.collect.ImmutableSet)
    {
        java.lang.Object[] $r13;
        com.google.common.collect.DenseImmutableTable$RowMap $r15;
        com.google.common.collect.DenseImmutableTable$ColumnMap $r16;
        java.lang.Integer $r12;
        java.lang.Object[][] $r6;
        com.google.common.collect.ImmutableList $r1;
        int[] $r4, $r8, $r14;
        int $i0, $i1, $i2, $i3;
        com.google.common.collect.Table$Cell $r9;
        boolean $z0;
        com.google.common.collect.DenseImmutableTable r0;
        com.google.common.collect.ImmutableSet $r2, $r3;
        com.google.common.collect.ImmutableMap $r7;
        java.lang.Object $r5, $r10, $r11;

        r0 := @this: com.google.common.collect.DenseImmutableTable;

        $r1 := @parameter0: com.google.common.collect.ImmutableList;

        $r2 := @parameter1: com.google.common.collect.ImmutableSet;

        $r3 := @parameter2: com.google.common.collect.ImmutableSet;

        specialinvoke r0.<com.google.common.collect.RegularImmutableTable: void <init>()>();

        $i0 = virtualinvoke $r2.<java.util.AbstractCollection: int size()>();

        $i1 = virtualinvoke $r3.<java.util.AbstractCollection: int size()>();

        $r4 = newarray (int)[2];

        $r4[0] = $i0;

        $r4[1] = $i1;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Ljava/lang/Object;", $r4);

        $r6 = (java.lang.Object[][]) $r5;

        r0.<com.google.common.collect.DenseImmutableTable: java.lang.Object[][] values> = $r6;

        $r7 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap indexMap(java.util.Collection)>($r2);

        r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap rowKeyToIndex> = $r7;

        $r7 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap indexMap(java.util.Collection)>($r3);

        r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap columnKeyToIndex> = $r7;

        $r7 = r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        $i0 = interfaceinvoke $r7.<java.util.Map: int size()>();

        $r4 = newarray (int)[$i0];

        r0.<com.google.common.collect.DenseImmutableTable: int[] rowCounts> = $r4;

        $r7 = r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        $i0 = interfaceinvoke $r7.<java.util.Map: int size()>();

        $r4 = newarray (int)[$i0];

        r0.<com.google.common.collect.DenseImmutableTable: int[] columnCounts> = $r4;

        $i0 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        $r4 = newarray (int)[$i0];

        $i0 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        $r8 = newarray (int)[$i0];

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        if $i0 >= $i1 goto label4;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r9 = (com.google.common.collect.Table$Cell) $r5;

        $r5 = interfaceinvoke $r9.<com.google.common.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r10 = interfaceinvoke $r9.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r7 = r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        $r11 = virtualinvoke $r7.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r5);

        $r12 = (java.lang.Integer) $r11;

        $i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r7 = r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        $r11 = virtualinvoke $r7.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.lang.Integer) $r11;

        $i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r6 = r0.<com.google.common.collect.DenseImmutableTable: java.lang.Object[][] values>;

        $r13 = $r6[$i1];

        $r11 = $r13[$i2];

        if $r11 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "duplicate key: (%s, %s)", $r5, $r10);

        $r6 = r0.<com.google.common.collect.DenseImmutableTable: java.lang.Object[][] values>;

        $r13 = $r6[$i1];

        $r5 = interfaceinvoke $r9.<com.google.common.collect.Table$Cell: java.lang.Object getValue()>();

        $r13[$i2] = $r5;

        $r14 = r0.<com.google.common.collect.DenseImmutableTable: int[] rowCounts>;

        $i3 = $r14[$i1];

        $i3 = $i3 + 1;

        $r14[$i1] = $i3;

        $r14 = r0.<com.google.common.collect.DenseImmutableTable: int[] columnCounts>;

        $i3 = $r14[$i2];

        $i3 = $i3 + 1;

        $r14[$i2] = $i3;

        $r4[$i0] = $i1;

        $r8[$i0] = $i2;

        $i0 = $i0 + 1;

        goto label1;

     label4:
        r0.<com.google.common.collect.DenseImmutableTable: int[] cellRowIndices> = $r4;

        r0.<com.google.common.collect.DenseImmutableTable: int[] cellColumnIndices> = $r8;

        $r15 = new com.google.common.collect.DenseImmutableTable$RowMap;

        specialinvoke $r15.<com.google.common.collect.DenseImmutableTable$RowMap: void <init>(com.google.common.collect.DenseImmutableTable,com.google.common.collect.DenseImmutableTable$1)>(r0, null);

        r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap rowMap> = $r15;

        $r16 = new com.google.common.collect.DenseImmutableTable$ColumnMap;

        specialinvoke $r16.<com.google.common.collect.DenseImmutableTable$ColumnMap: void <init>(com.google.common.collect.DenseImmutableTable,com.google.common.collect.DenseImmutableTable$1)>(r0, null);

        r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap columnMap> = $r16;

        return;
    }

    public static int[] access$200(com.google.common.collect.DenseImmutableTable)
    {
        com.google.common.collect.DenseImmutableTable $r0;
        int[] r1;

        $r0 := @parameter0: com.google.common.collect.DenseImmutableTable;

        r1 = $r0.<com.google.common.collect.DenseImmutableTable: int[] rowCounts>;

        return r1;
    }

    public static com.google.common.collect.ImmutableMap access$300(com.google.common.collect.DenseImmutableTable)
    {
        com.google.common.collect.DenseImmutableTable $r0;
        com.google.common.collect.ImmutableMap r1;

        $r0 := @parameter0: com.google.common.collect.DenseImmutableTable;

        r1 = $r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        return r1;
    }

    public static java.lang.Object[][] access$400(com.google.common.collect.DenseImmutableTable)
    {
        com.google.common.collect.DenseImmutableTable $r0;
        java.lang.Object[][] r1;

        $r0 := @parameter0: com.google.common.collect.DenseImmutableTable;

        r1 = $r0.<com.google.common.collect.DenseImmutableTable: java.lang.Object[][] values>;

        return r1;
    }

    public static int[] access$500(com.google.common.collect.DenseImmutableTable)
    {
        com.google.common.collect.DenseImmutableTable $r0;
        int[] r1;

        $r0 := @parameter0: com.google.common.collect.DenseImmutableTable;

        r1 = $r0.<com.google.common.collect.DenseImmutableTable: int[] columnCounts>;

        return r1;
    }

    public static com.google.common.collect.ImmutableMap access$600(com.google.common.collect.DenseImmutableTable)
    {
        com.google.common.collect.DenseImmutableTable $r0;
        com.google.common.collect.ImmutableMap r1;

        $r0 := @parameter0: com.google.common.collect.DenseImmutableTable;

        r1 = $r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        return r1;
    }

    public com.google.common.collect.ImmutableMap columnMap()
    {
        com.google.common.collect.DenseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.DenseImmutableTable;

        $r1 = r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap columnMap>;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>($r1);

        return $r1;
    }

    public volatile java.util.Map columnMap()
    {
        com.google.common.collect.DenseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.DenseImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap columnMap()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm()
    {
        com.google.common.collect.DenseImmutableTable r0;
        int[] $r1, $r3;
        com.google.common.collect.ImmutableTable$SerializedForm $r2;

        r0 := @this: com.google.common.collect.DenseImmutableTable;

        $r3 = r0.<com.google.common.collect.DenseImmutableTable: int[] cellRowIndices>;

        $r1 = r0.<com.google.common.collect.DenseImmutableTable: int[] cellColumnIndices>;

        $r2 = staticinvoke <com.google.common.collect.ImmutableTable$SerializedForm: com.google.common.collect.ImmutableTable$SerializedForm create(com.google.common.collect.ImmutableTable,int[],int[])>(r0, $r3, $r1);

        return $r2;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.DenseImmutableTable r0;
        java.lang.Object[] $r7;
        com.google.common.collect.ImmutableMap $r3;
        java.lang.Integer $r4, $r5;
        java.lang.Object[][] $r6;
        int $i0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.DenseImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        $r1 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.Integer) $r1;

        $r3 = r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        $r1 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (java.lang.Integer) $r1;

        if $r4 == null goto label2;

        if $r5 != null goto label1;

        goto label2;

     label1:
        $r6 = r0.<com.google.common.collect.DenseImmutableTable: java.lang.Object[][] values>;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r7 = $r6[$i0];

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r1 = $r7[$i0];

        return $r1;

     label2:
        return null;
    }

    public com.google.common.collect.Table$Cell getCell(int)
    {
        com.google.common.collect.DenseImmutableTable r0;
        com.google.common.collect.ImmutableSet $r3;
        java.lang.Object[] $r7;
        java.lang.Object[][] $r1;
        com.google.common.collect.ImmutableList $r4;
        int[] $r2;
        int $i0, $i1;
        com.google.common.collect.Table$Cell $r9;
        java.lang.Object $r5, $r6, $r8;

        r0 := @this: com.google.common.collect.DenseImmutableTable;

        $i0 := @parameter0: int;

        $r2 = r0.<com.google.common.collect.DenseImmutableTable: int[] cellRowIndices>;

        $i1 = $r2[$i0];

        $r2 = r0.<com.google.common.collect.DenseImmutableTable: int[] cellColumnIndices>;

        $i0 = $r2[$i0];

        $r3 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableSet rowKeySet()>();

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableSet columnKeySet()>();

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()>();

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i0);

        $r1 = r0.<com.google.common.collect.DenseImmutableTable: java.lang.Object[][] values>;

        $r7 = $r1[$i1];

        $r8 = $r7[$i0];

        $r9 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.Table$Cell cellOf(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r6, $r8);

        return $r9;
    }

    public java.lang.Object getValue(int)
    {
        com.google.common.collect.DenseImmutableTable r0;
        java.lang.Object[][] $r1;
        java.lang.Object[] $r3;
        int[] $r2;
        int $i0, $i1;
        java.lang.Object $r4;

        r0 := @this: com.google.common.collect.DenseImmutableTable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.collect.DenseImmutableTable: java.lang.Object[][] values>;

        $r2 = r0.<com.google.common.collect.DenseImmutableTable: int[] cellRowIndices>;

        $i1 = $r2[$i0];

        $r3 = $r1[$i1];

        $r2 = r0.<com.google.common.collect.DenseImmutableTable: int[] cellColumnIndices>;

        $i0 = $r2[$i0];

        $r4 = $r3[$i0];

        return $r4;
    }

    public com.google.common.collect.ImmutableMap rowMap()
    {
        com.google.common.collect.DenseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.DenseImmutableTable;

        $r1 = r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap rowMap>;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>($r1);

        return $r1;
    }

    public volatile java.util.Map rowMap()
    {
        com.google.common.collect.DenseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.DenseImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.DenseImmutableTable: com.google.common.collect.ImmutableMap rowMap()>();

        return $r1;
    }

    public int size()
    {
        com.google.common.collect.DenseImmutableTable r0;
        int $i0;
        int[] $r1;

        r0 := @this: com.google.common.collect.DenseImmutableTable;

        $r1 = r0.<com.google.common.collect.DenseImmutableTable: int[] cellRowIndices>;

        $i0 = lengthof $r1;

        return $i0;
    }
}
