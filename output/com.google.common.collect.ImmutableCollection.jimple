public abstract class com.google.common.collect.ImmutableCollection extends java.util.AbstractCollection implements java.io.Serializable
{
    public static final java.lang.Object[] EMPTY_ARRAY;
    public static final int SPLITERATOR_CHARACTERISTICS;

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        <com.google.common.collect.ImmutableCollection: int SPLITERATOR_CHARACTERISTICS> = 1296;

        $r0 = newarray (java.lang.Object)[0];

        <com.google.common.collect.ImmutableCollection: java.lang.Object[] EMPTY_ARRAY> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.collect.ImmutableCollection r0;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        return;
    }

    public final boolean add(java.lang.Object)
    {
        com.google.common.collect.ImmutableCollection r0;
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final boolean addAll(java.util.Collection)
    {
        com.google.common.collect.ImmutableCollection r0;
        java.lang.UnsupportedOperationException $r2;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public com.google.common.collect.ImmutableList asList()
    {
        java.lang.Object[] $r2;
        com.google.common.collect.ImmutableList $r5;
        int $i0;
        com.google.common.collect.ImmutableCollection r0;
        com.google.common.collect.RegularImmutableAsList $r1;
        java.lang.Object $r4;
        com.google.common.collect.UnmodifiableIterator $r3;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $i0 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();

        if $i0 == 0 goto label2;

        if $i0 == 1 goto label1;

        $r1 = new com.google.common.collect.RegularImmutableAsList;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>();

        specialinvoke $r1.<com.google.common.collect.RegularImmutableAsList: void <init>(com.google.common.collect.ImmutableCollection,java.lang.Object[])>(r0, $r2);

        return $r1;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>($r4);

        return $r5;

     label2:
        $r5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        return $r5;
    }

    public final void clear()
    {
        com.google.common.collect.ImmutableCollection r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public abstract boolean contains(java.lang.Object);

    public int copyIntoArray(java.lang.Object[], int)
    {
        java.lang.Object[] $r1;
        int $i0;
        com.google.common.collect.ImmutableCollection r0;
        java.lang.Object $r3;
        com.google.common.collect.UnmodifiableIterator $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r1[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i0;
    }

    public abstract boolean isPartialView();

    public abstract com.google.common.collect.UnmodifiableIterator iterator();

    public volatile java.util.Iterator iterator()
    {
        com.google.common.collect.ImmutableCollection r0;
        com.google.common.collect.UnmodifiableIterator $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public final boolean remove(java.lang.Object)
    {
        com.google.common.collect.ImmutableCollection r0;
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final boolean removeAll(java.util.Collection)
    {
        com.google.common.collect.ImmutableCollection r0;
        java.lang.UnsupportedOperationException $r2;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final boolean removeIf(java.util.function.Predicate)
    {
        com.google.common.collect.ImmutableCollection r0;
        java.lang.UnsupportedOperationException $r2;
        java.util.function.Predicate $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 := @parameter0: java.util.function.Predicate;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final boolean retainAll(java.util.Collection)
    {
        com.google.common.collect.ImmutableCollection r0;
        java.lang.UnsupportedOperationException $r2;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.Spliterator spliterator()
    {
        com.google.common.collect.ImmutableCollection r0;
        java.util.Spliterator $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 = staticinvoke <java.util.Spliterators: java.util.Spliterator spliterator(java.util.Collection,int)>(r0, 1296);

        return $r1;
    }

    public final java.lang.Object[] toArray()
    {
        int $i0;
        com.google.common.collect.ImmutableCollection r0;
        java.lang.Object[] $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $i0 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();

        if $i0 != 0 goto label1;

        $r1 = <com.google.common.collect.ImmutableCollection: java.lang.Object[] EMPTY_ARRAY>;

        return $r1;

     label1:
        $r1 = newarray (java.lang.Object)[$i0];

        virtualinvoke r0.<com.google.common.collect.ImmutableCollection: int copyIntoArray(java.lang.Object[],int)>($r1, 0);

        return $r1;
    }

    public final java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        com.google.common.collect.ImmutableCollection r0;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();

        $i1 = lengthof $r1;

        if $i1 >= $i0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] newArray(java.lang.Object[],int)>($r1, $i0);

        goto label2;

     label1:
        $i1 = lengthof $r1;

        if $i1 <= $i0 goto label2;

        $r1[$i0] = null;

     label2:
        virtualinvoke r0.<com.google.common.collect.ImmutableCollection: int copyIntoArray(java.lang.Object[],int)>($r1, 0);

        return $r1;
    }

    public java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableCollection r0;
        java.lang.Object[] $r2;
        com.google.common.collect.ImmutableList$SerializedForm $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection;

        $r1 = new com.google.common.collect.ImmutableList$SerializedForm;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableList$SerializedForm: void <init>(java.lang.Object[])>($r2);

        return $r1;
    }
}
