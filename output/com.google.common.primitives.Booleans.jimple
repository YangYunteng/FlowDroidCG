public final class com.google.common.primitives.Booleans extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.primitives.Booleans r0;

        r0 := @this: com.google.common.primitives.Booleans;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int access$000(boolean[], boolean, int, int)
    {
        int $i0, $i1;
        boolean[] $r0;
        boolean $z0;

        $r0 := @parameter0: boolean[];

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i0 = staticinvoke <com.google.common.primitives.Booleans: int indexOf(boolean[],boolean,int,int)>($r0, $z0, $i0, $i1);

        return $i0;
    }

    public static int access$100(boolean[], boolean, int, int)
    {
        int $i0, $i1;
        boolean[] $r0;
        boolean $z0;

        $r0 := @parameter0: boolean[];

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i0 = staticinvoke <com.google.common.primitives.Booleans: int lastIndexOf(boolean[],boolean,int,int)>($r0, $z0, $i0, $i1);

        return $i0;
    }

    public static transient java.util.List asList(boolean[])
    {
        java.util.List $r0;
        boolean[] $r1;
        int $i0;
        com.google.common.primitives.Booleans$BooleanArrayAsList $r2;

        $r1 := @parameter0: boolean[];

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r0;

     label1:
        $r2 = new com.google.common.primitives.Booleans$BooleanArrayAsList;

        specialinvoke $r2.<com.google.common.primitives.Booleans$BooleanArrayAsList: void <init>(boolean[])>($r1);

        return $r2;
    }

    public static int compare(boolean, boolean)
    {
        int $i0;
        boolean $z0, $z1;

        $z1 := @parameter0: boolean;

        $z0 := @parameter1: boolean;

        if $z1 != $z0 goto label1;

        return 0;

     label1:
        if $z1 == 0 goto label2;

        return 1;

     label2:
        $i0 = -1;

        return $i0;
    }

    public static transient boolean[] concat(boolean[][])
    {
        int $i0, $i1, $i2, $i3;
        boolean[] $r1, $r2;
        boolean[][] $r0;

        $r0 := @parameter0: boolean[][];

        $i1 = lengthof $r0;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r1 = $r0[$i2];

        $i0 = lengthof $r1;

        $i3 = $i3 + $i0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r1 = newarray (boolean)[$i3];

        $i1 = lengthof $r0;

        $i2 = 0;

        $i3 = 0;

     label3:
        if $i2 >= $i1 goto label4;

        $r2 = $r0[$i2];

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i3, $i0);

        $i0 = lengthof $r2;

        $i3 = $i3 + $i0;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        return $r1;
    }

    public static boolean contains(boolean[], boolean)
    {
        int $i0, $i1;
        boolean[] $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: boolean[];

        $z0 := @parameter1: boolean;

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $z1 = $r0[$i1];

        if $z1 != $z0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static transient int countTrue(boolean[])
    {
        boolean[] $r0;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: boolean[];

        $i0 = lengthof $r0;

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $z0 = $r0[$i1];

        if $z0 == 0 goto label2;

        $i2 = $i2 + 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i2;
    }

    public static boolean[] ensureCapacity(boolean[], int, int)
    {
        int $i0, $i1, $i2;
        boolean[] $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: boolean[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $z0 = 1;

        if $i1 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z1, "Invalid minLength: %s", $i1);

        if $i0 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "Invalid padding: %s", $i0);

        $i2 = lengthof $r0;

        if $i2 >= $i1 goto label5;

        $i1 = $i1 + $i0;

        $r0 = staticinvoke <java.util.Arrays: boolean[] copyOf(boolean[],int)>($r0, $i1);

     label5:
        return $r0;
    }

    public static java.util.Comparator falseFirst()
    {
        com.google.common.primitives.Booleans$BooleanComparator r0;

        r0 = <com.google.common.primitives.Booleans$BooleanComparator: com.google.common.primitives.Booleans$BooleanComparator FALSE_FIRST>;

        return r0;
    }

    public static int hashCode(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        return 1231;

     label1:
        return 1237;
    }

    public static int indexOf(boolean[], boolean)
    {
        int $i0;
        boolean[] $r0;
        boolean $z0;

        $r0 := @parameter0: boolean[];

        $z0 := @parameter1: boolean;

        $i0 = lengthof $r0;

        $i0 = staticinvoke <com.google.common.primitives.Booleans: int indexOf(boolean[],boolean,int,int)>($r0, $z0, 0, $i0);

        return $i0;
    }

    public static int indexOf(boolean[], boolean, int, int)
    {
        int $i0, $i1;
        boolean[] $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: boolean[];

        $z0 := @parameter1: boolean;

        $i1 := @parameter2: int;

        $i0 := @parameter3: int;

     label1:
        if $i1 >= $i0 goto label3;

        $z1 = $r0[$i1];

        if $z1 != $z0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i1 = -1;

        return $i1;
    }

    public static int indexOf(boolean[], boolean[])
    {
        boolean[] $r0, $r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        $r1 := @parameter0: boolean[];

        $r0 := @parameter1: boolean[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "array");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "target");

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        $i2 = lengthof $r0;

        $i1 = $i1 - $i2;

        $i1 = $i1 + 1;

        if $i0 >= $i1 goto label6;

        $i1 = 0;

     label3:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label5;

        $i2 = $i0 + $i1;

        $z1 = $r1[$i2];

        $z0 = $r0[$i1];

        if $z1 == $z0 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return $i0;

     label6:
        $i0 = -1;

        return $i0;
    }

    public static transient java.lang.String join(java.lang.String, boolean[])
    {
        boolean[] $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: boolean[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        $i0 = lengthof $r0;

        $i0 = $i0 * 7;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        $z0 = $r0[0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $i0 = 1;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $z0 = $r0[$i0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static int lastIndexOf(boolean[], boolean)
    {
        int $i0;
        boolean[] $r0;
        boolean $z0;

        $r0 := @parameter0: boolean[];

        $z0 := @parameter1: boolean;

        $i0 = lengthof $r0;

        $i0 = staticinvoke <com.google.common.primitives.Booleans: int lastIndexOf(boolean[],boolean,int,int)>($r0, $z0, 0, $i0);

        return $i0;
    }

    public static int lastIndexOf(boolean[], boolean, int, int)
    {
        int $i0, $i1, $i2;
        boolean[] $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: boolean[];

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 = -1;

        $i1 = $i1 + $i2;

     label1:
        if $i1 < $i0 goto label3;

        $z1 = $r0[$i1];

        if $z1 != $z0 goto label2;

        return $i1;

     label2:
        $i2 = -1;

        $i1 = $i1 + $i2;

        goto label1;

     label3:
        $i0 = -1;

        return $i0;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.google.common.primitives.Booleans$LexicographicalComparator r0;

        r0 = <com.google.common.primitives.Booleans$LexicographicalComparator: com.google.common.primitives.Booleans$LexicographicalComparator INSTANCE>;

        return r0;
    }

    public static void reverse(boolean[])
    {
        boolean[] $r0;
        int $i0;

        $r0 := @parameter0: boolean[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.Booleans: void reverse(boolean[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void reverse(boolean[], int, int)
    {
        boolean[] $r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        $r0 := @parameter0: boolean[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, $i2);

        $i2 = -1;

        $i1 = $i1 + $i2;

     label1:
        if $i0 >= $i1 goto label2;

        $z1 = $r0[$i0];

        $z0 = $r0[$i1];

        $r0[$i0] = $z0;

        $r0[$i1] = $z1;

        $i0 = $i0 + 1;

        $i2 = -1;

        $i1 = $i1 + $i2;

        goto label1;

     label2:
        return;
    }

    public static boolean[] toArray(java.util.Collection)
    {
        java.lang.Object[] $r3;
        java.util.Collection $r1;
        boolean[] $r0;
        com.google.common.primitives.Booleans$BooleanArrayAsList $r2;
        int $i0, $i1;
        java.lang.Boolean $r5;
        java.lang.Object $r4;
        boolean $z0;

        $r1 := @parameter0: java.util.Collection;

        $z0 = $r1 instanceof com.google.common.primitives.Booleans$BooleanArrayAsList;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.primitives.Booleans$BooleanArrayAsList) $r1;

        $r0 = virtualinvoke $r2.<com.google.common.primitives.Booleans$BooleanArrayAsList: boolean[] toBooleanArray()>();

        return $r0;

     label1:
        $r3 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $i0 = lengthof $r3;

        $r0 = newarray (boolean)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r4 = $r3[$i1];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        $r0[$i1] = $z0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r0;
    }

    public static java.util.Comparator trueFirst()
    {
        com.google.common.primitives.Booleans$BooleanComparator r0;

        r0 = <com.google.common.primitives.Booleans$BooleanComparator: com.google.common.primitives.Booleans$BooleanComparator TRUE_FIRST>;

        return r0;
    }
}
