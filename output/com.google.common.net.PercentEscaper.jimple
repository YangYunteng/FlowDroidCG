public final class com.google.common.net.PercentEscaper extends com.google.common.escape.UnicodeEscaper
{
    public static final char[] PLUS_SIGN;
    public static final char[] UPPER_HEX_DIGITS;
    public final boolean plusForSpace;
    public final boolean[] safeOctets;

    static void <clinit>()
    {
        char[] $r0;
        java.lang.String $r1;

        $r0 = newarray (char)[1];

        $r0[0] = 43;

        <com.google.common.net.PercentEscaper: char[] PLUS_SIGN> = $r0;

        $r1 = "0123456789ABCDEF";

        $r0 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        <com.google.common.net.PercentEscaper: char[] UPPER_HEX_DIGITS> = $r0;

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        com.google.common.net.PercentEscaper r0;
        boolean[] $r4;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r3;
        boolean $z0, $z1;

        r0 := @this: com.google.common.net.PercentEscaper;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<com.google.common.escape.UnicodeEscaper: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z1 = virtualinvoke $r1.<java.lang.String: boolean matches(java.lang.String)>(".*[0-9A-Za-z].*");

        if $z1 != 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(" ");

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("plusForSpace cannot be specified when space is a \'safe\' character");

        throw $r3;

     label2:
        r0.<com.google.common.net.PercentEscaper: boolean plusForSpace> = $z0;

        $r4 = staticinvoke <com.google.common.net.PercentEscaper: boolean[] createSafeOctets(java.lang.String)>($r1);

        r0.<com.google.common.net.PercentEscaper: boolean[] safeOctets> = $r4;

        return;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Alphanumeric characters are always \'safe\' and should not be explicitly specified");

        throw $r3;
    }

    public static boolean[] createSafeOctets(java.lang.String)
    {
        boolean[] $r2;
        char $c4;
        int $i0, $i1, $i2, $i3, $i5;
        char[] $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r1;

        $i1 = 0;

        $i2 = 0;

        $i3 = -1;

     label1:
        if $i2 >= $i0 goto label2;

        $c4 = $r1[$i2];

        $i5 = (int) $c4;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i3);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $i0 = $i3 + 1;

        $r2 = newarray (boolean)[$i0];

        $i0 = lengthof $r1;

     label3:
        if $i1 >= $i0 goto label4;

        $c4 = $r1[$i1];

        $i2 = (int) $c4;

        $r2[$i2] = 1;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return $r2;
    }

    public java.lang.String escape(java.lang.String)
    {
        boolean[] $r1;
        char $c3;
        com.google.common.net.PercentEscaper r0;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.google.common.net.PercentEscaper;

        $r2 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label4;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        $r1 = r0.<com.google.common.net.PercentEscaper: boolean[] safeOctets>;

        $i0 = lengthof $r1;

        $i4 = (int) $c3;

        if $i4 >= $i0 goto label3;

        $i0 = (int) $c3;

        $z0 = $r1[$i0];

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke r0.<com.google.common.escape.UnicodeEscaper: java.lang.String escapeSlow(java.lang.String,int)>($r2, $i2);

     label4:
        return $r2;
    }

    public char[] escape(int)
    {
        boolean[] $r2;
        char $c2;
        java.lang.IllegalArgumentException $r7;
        com.google.common.net.PercentEscaper r0;
        int $i0, $i1;
        char[] $r3, $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.google.common.net.PercentEscaper;

        $i0 := @parameter0: int;

        $r2 = r0.<com.google.common.net.PercentEscaper: boolean[] safeOctets>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label1;

        $z0 = $r2[$i0];

        if $z0 == 0 goto label1;

        return null;

     label1:
        if $i0 != 32 goto label2;

        $z0 = r0.<com.google.common.net.PercentEscaper: boolean plusForSpace>;

        if $z0 == 0 goto label2;

        $r3 = <com.google.common.net.PercentEscaper: char[] PLUS_SIGN>;

        return $r3;

     label2:
        if $i0 > 127 goto label3;

        $r3 = newarray (char)[3];

        $r3[0] = 37;

        $r4 = <com.google.common.net.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i1 = $i0 & 15;

        $c2 = $r4[$i1];

        $r3[2] = $c2;

        $i0 = $i0 >>> 4;

        $c2 = $r4[$i0];

        $r3[1] = $c2;

        return $r3;

     label3:
        if $i0 > 2047 goto label4;

        $r3 = newarray (char)[6];

        $r3[0] = 37;

        $r3[3] = 37;

        $r4 = <com.google.common.net.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i1 = $i0 & 15;

        $c2 = $r4[$i1];

        $r3[5] = $c2;

        $i0 = $i0 >>> 4;

        $i1 = $i0 & 3;

        $i1 = $i1 | 8;

        $c2 = $r4[$i1];

        $r3[4] = $c2;

        $i0 = $i0 >>> 2;

        $i1 = $i0 & 15;

        $c2 = $r4[$i1];

        $r3[2] = $c2;

        $i0 = $i0 >>> 4;

        $i0 = $i0 | 12;

        $c2 = $r4[$i0];

        $r3[1] = $c2;

        return $r3;

     label4:
        $i1 = 65535;

        if $i0 > $i1 goto label5;

        $r3 = newarray (char)[9];

        $r3[0] = 37;

        $r3[1] = 69;

        $r3[3] = 37;

        $r3[6] = 37;

        $r4 = <com.google.common.net.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i1 = $i0 & 15;

        $c2 = $r4[$i1];

        $r3[8] = $c2;

        $i0 = $i0 >>> 4;

        $i1 = $i0 & 3;

        $i1 = $i1 | 8;

        $c2 = $r4[$i1];

        $r3[7] = $c2;

        $i0 = $i0 >>> 2;

        $i1 = $i0 & 15;

        $c2 = $r4[$i1];

        $r3[5] = $c2;

        $i0 = $i0 >>> 4;

        $i1 = $i0 & 3;

        $i1 = $i1 | 8;

        $c2 = $r4[$i1];

        $r3[4] = $c2;

        $i0 = $i0 >>> 2;

        $c2 = $r4[$i0];

        $r3[2] = $c2;

        return $r3;

     label5:
        if $i0 > 1114111 goto label6;

        $r3 = newarray (char)[12];

        $r3[0] = 37;

        $r3[1] = 70;

        $r3[3] = 37;

        $r3[6] = 37;

        $r3[9] = 37;

        $r4 = <com.google.common.net.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i1 = $i0 & 15;

        $c2 = $r4[$i1];

        $r3[11] = $c2;

        $i0 = $i0 >>> 4;

        $i1 = $i0 & 3;

        $i1 = $i1 | 8;

        $c2 = $r4[$i1];

        $r3[10] = $c2;

        $i0 = $i0 >>> 2;

        $i1 = $i0 & 15;

        $c2 = $r4[$i1];

        $r3[8] = $c2;

        $i0 = $i0 >>> 4;

        $i1 = $i0 & 3;

        $i1 = $i1 | 8;

        $c2 = $r4[$i1];

        $r3[7] = $c2;

        $i0 = $i0 >>> 2;

        $i1 = $i0 & 15;

        $c2 = $r4[$i1];

        $r3[5] = $c2;

        $i0 = $i0 >>> 4;

        $i1 = $i0 & 3;

        $i1 = $i1 | 8;

        $c2 = $r4[$i1];

        $r3[4] = $c2;

        $i0 = $i0 >>> 2;

        $i0 = $i0 & 7;

        $c2 = $r4[$i0];

        $r3[2] = $c2;

        return $r3;

     label6:
        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        $r5 = $r6;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid unicode character value ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r7;
    }

    public int nextEscapeIndex(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence $r1;
        boolean[] $r2;
        char $c2;
        com.google.common.net.PercentEscaper r0;
        int $i0, $i1, $i3, $i4;
        boolean $z0;

        r0 := @this: com.google.common.net.PercentEscaper;

        $r1 := @parameter0: java.lang.CharSequence;

        $i3 := @parameter1: int;

        $i0 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

     label1:
        if $i3 >= $i0 goto label3;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i3);

        $r2 = r0.<com.google.common.net.PercentEscaper: boolean[] safeOctets>;

        $i1 = lengthof $r2;

        $i4 = (int) $c2;

        if $i4 >= $i1 goto label3;

        $i1 = (int) $c2;

        $z0 = $r2[$i1];

        if $z0 != 0 goto label2;

        return $i3;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        return $i3;
    }
}
