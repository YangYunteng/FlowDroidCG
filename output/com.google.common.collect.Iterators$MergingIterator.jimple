public class com.google.common.collect.Iterators$MergingIterator extends com.google.common.collect.UnmodifiableIterator
{
    public final java.util.Queue queue;

    public void <init>(java.lang.Iterable, java.util.Comparator)
    {
        java.util.Iterator $r5, $r7;
        java.util.PriorityQueue $r4;
        com.google.common.collect.Iterators$MergingIterator$1 $r3;
        com.google.common.collect.PeekingIterator $r9;
        java.lang.Iterable $r1;
        com.google.common.collect.Iterators$MergingIterator r0;
        java.lang.Object $r6;
        java.util.Queue $r8;
        java.util.Comparator $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Iterators$MergingIterator;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 := @parameter1: java.util.Comparator;

        specialinvoke r0.<com.google.common.collect.UnmodifiableIterator: void <init>()>();

        $r3 = new com.google.common.collect.Iterators$MergingIterator$1;

        specialinvoke $r3.<com.google.common.collect.Iterators$MergingIterator$1: void <init>(com.google.common.collect.Iterators$MergingIterator,java.util.Comparator)>(r0, $r2);

        $r4 = new java.util.PriorityQueue;

        specialinvoke $r4.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>(2, $r3);

        r0.<com.google.common.collect.Iterators$MergingIterator: java.util.Queue queue> = $r4;

        $r5 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Iterator) $r6;

        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<com.google.common.collect.Iterators$MergingIterator: java.util.Queue queue>;

        $r9 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.PeekingIterator peekingIterator(java.util.Iterator)>($r7);

        interfaceinvoke $r8.<java.util.Queue: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        return;
    }

    public boolean hasNext()
    {
        com.google.common.collect.Iterators$MergingIterator r0;
        java.util.Queue $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Iterators$MergingIterator;

        $r1 = r0.<com.google.common.collect.Iterators$MergingIterator: java.util.Queue queue>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public java.lang.Object next()
    {
        com.google.common.collect.Iterators$MergingIterator r0;
        java.lang.Object $r2;
        java.util.Queue $r1;
        com.google.common.collect.PeekingIterator $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.Iterators$MergingIterator;

        $r1 = r0.<com.google.common.collect.Iterators$MergingIterator: java.util.Queue queue>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object remove()>();

        $r3 = (com.google.common.collect.PeekingIterator) $r2;

        $r2 = interfaceinvoke $r3.<com.google.common.collect.PeekingIterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.common.collect.Iterators$MergingIterator: java.util.Queue queue>;

        interfaceinvoke $r1.<java.util.Queue: boolean add(java.lang.Object)>($r3);

     label1:
        return $r2;
    }
}
