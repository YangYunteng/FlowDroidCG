public final class org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter extends org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterMethodFilter
{

    public void <init>()
    {
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter r0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter;

        specialinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterMethodFilter: void <init>()>();

        return;
    }

    public boolean includeMethod(java.lang.reflect.Method)
    {
        java.lang.Class $r2, $r3;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter r0;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterAndGetterMethodFilter;

        $r1 := @parameter0: java.lang.reflect.Method;

        $z0 = specialinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector$SetterMethodFilter: boolean includeMethod(java.lang.reflect.Method)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z0 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: boolean hasGetterSignature(java.lang.reflect.Method)>($r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r3 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 != 0 goto label4;

        $r3 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        return 1;
    }
}
