public abstract class com.google.common.collect.Maps$AbstractFilteredMap extends com.google.common.collect.Maps$ViewCachingAbstractMap
{
    public final com.google.common.base.Predicate predicate;
    public final java.util.Map unfiltered;

    public void <init>(java.util.Map, com.google.common.base.Predicate)
    {
        com.google.common.collect.Maps$AbstractFilteredMap r0;
        com.google.common.base.Predicate $r2;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Maps$AbstractFilteredMap;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: com.google.common.base.Predicate;

        specialinvoke r0.<com.google.common.collect.Maps$ViewCachingAbstractMap: void <init>()>();

        r0.<com.google.common.collect.Maps$AbstractFilteredMap: java.util.Map unfiltered> = $r1;

        r0.<com.google.common.collect.Maps$AbstractFilteredMap: com.google.common.base.Predicate predicate> = $r2;

        return;
    }

    public boolean apply(java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r4;
        com.google.common.base.Predicate $r2;
        com.google.common.collect.Maps$AbstractFilteredMap r0;
        java.lang.Object $r1, $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AbstractFilteredMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Maps$AbstractFilteredMap: com.google.common.base.Predicate predicate>;

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>($r3, $r1);

        $z0 = interfaceinvoke $r2.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r4);

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Map $r2;
        com.google.common.collect.Maps$AbstractFilteredMap r0;
        java.lang.Object $r1, $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AbstractFilteredMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Maps$AbstractFilteredMap: java.util.Map unfiltered>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.common.collect.Maps$AbstractFilteredMap: java.util.Map unfiltered>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = virtualinvoke r0.<com.google.common.collect.Maps$AbstractFilteredMap: boolean apply(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Collection createValues()
    {
        com.google.common.base.Predicate $r3;
        com.google.common.collect.Maps$FilteredMapValues $r1;
        java.util.Map $r2;
        com.google.common.collect.Maps$AbstractFilteredMap r0;

        r0 := @this: com.google.common.collect.Maps$AbstractFilteredMap;

        $r1 = new com.google.common.collect.Maps$FilteredMapValues;

        $r2 = r0.<com.google.common.collect.Maps$AbstractFilteredMap: java.util.Map unfiltered>;

        $r3 = r0.<com.google.common.collect.Maps$AbstractFilteredMap: com.google.common.base.Predicate predicate>;

        specialinvoke $r1.<com.google.common.collect.Maps$FilteredMapValues: void <init>(java.util.Map,java.util.Map,com.google.common.base.Predicate)>(r0, $r2, $r3);

        return $r1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.Map $r2;
        com.google.common.collect.Maps$AbstractFilteredMap r0;
        java.lang.Object $r1, $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AbstractFilteredMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Maps$AbstractFilteredMap: java.util.Map unfiltered>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r3 == null goto label1;

        $z0 = virtualinvoke r0.<com.google.common.collect.Maps$AbstractFilteredMap: boolean apply(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label1;

        return $r3;

     label1:
        return null;
    }

    public boolean isEmpty()
    {
        java.util.Set $r1;
        com.google.common.collect.Maps$AbstractFilteredMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AbstractFilteredMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$ViewCachingAbstractMap: java.util.Set entrySet()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        return $z0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.Map $r3;
        com.google.common.collect.Maps$AbstractFilteredMap r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AbstractFilteredMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.Maps$AbstractFilteredMap: boolean apply(java.lang.Object,java.lang.Object)>($r2, $r1);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = r0.<com.google.common.collect.Maps$AbstractFilteredMap: java.util.Map unfiltered>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        return $r2;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry $r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.Map $r1, $r7;
        com.google.common.collect.Maps$AbstractFilteredMap r0;
        java.lang.Object $r4, $r6;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AbstractFilteredMap;

        $r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = virtualinvoke r0.<com.google.common.collect.Maps$AbstractFilteredMap: boolean apply(java.lang.Object,java.lang.Object)>($r4, $r6);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        goto label1;

     label2:
        $r7 = r0.<com.google.common.collect.Maps$AbstractFilteredMap: java.util.Map unfiltered>;

        interfaceinvoke $r7.<java.util.Map: void putAll(java.util.Map)>($r1);

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.Map $r2;
        com.google.common.collect.Maps$AbstractFilteredMap r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AbstractFilteredMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.Maps$AbstractFilteredMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.common.collect.Maps$AbstractFilteredMap: java.util.Map unfiltered>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return $r1;

     label1:
        return null;
    }
}
