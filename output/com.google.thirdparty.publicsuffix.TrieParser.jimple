public final class com.google.thirdparty.publicsuffix.TrieParser extends java.lang.Object
{
    public static final com.google.common.base.Joiner PREFIX_JOINER;

    static void <clinit>()
    {
        com.google.common.base.Joiner $r0;

        $r0 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>("");

        <com.google.thirdparty.publicsuffix.TrieParser: com.google.common.base.Joiner PREFIX_JOINER> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.thirdparty.publicsuffix.TrieParser r0;

        r0 := @this: com.google.thirdparty.publicsuffix.TrieParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int doParseTrieToBuilder(java.util.List, java.lang.CharSequence, com.google.common.collect.ImmutableMap$Builder)
    {
        java.lang.CharSequence $r1, $r3;
        com.google.thirdparty.publicsuffix.PublicSuffixType $r6;
        char $c2, $c3;
        com.google.common.collect.ImmutableMap$Builder $r2;
        java.util.List $r0;
        int $i0, $i1, $i4;
        java.lang.String $r5;
        com.google.common.base.Joiner $r4;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.lang.CharSequence;

        $r2 := @parameter2: com.google.common.collect.ImmutableMap$Builder;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = 0;

        $c2 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $c2 = $c3;

        $i4 = (int) $c3;

        if $i4 == 38 goto label3;

        $i4 = (int) $c3;

        if $i4 == 63 goto label3;

        $i4 = (int) $c3;

        if $i4 == 33 goto label3;

        $i4 = (int) $c3;

        if $i4 == 58 goto label3;

        $i4 = (int) $c3;

        if $i4 != 44 goto label2;

        goto label3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r3 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i1);

        $r3 = staticinvoke <com.google.thirdparty.publicsuffix.TrieParser: java.lang.CharSequence reverse(java.lang.CharSequence)>($r3);

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, $r3);

        if $c2 == 33 goto label4;

        if $c2 == 63 goto label4;

        if $c2 == 58 goto label4;

        if $c2 != 44 goto label5;

     label4:
        $r4 = <com.google.thirdparty.publicsuffix.TrieParser: com.google.common.base.Joiner PREFIX_JOINER>;

        $r5 = virtualinvoke $r4.<com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>($r0);

        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i4 <= 0 goto label5;

        $r6 = staticinvoke <com.google.thirdparty.publicsuffix.PublicSuffixType: com.google.thirdparty.publicsuffix.PublicSuffixType fromCode(char)>($c2);

        virtualinvoke $r2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r5, $r6);

     label5:
        $i1 = $i1 + 1;

        if $c2 == 63 goto label8;

        if $c2 == 44 goto label8;

     label6:
        if $i1 >= $i0 goto label8;

        $r3 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        $i4 = staticinvoke <com.google.thirdparty.publicsuffix.TrieParser: int doParseTrieToBuilder(java.util.List,java.lang.CharSequence,com.google.common.collect.ImmutableMap$Builder)>($r0, $r3, $r2);

        $i1 = $i1 + $i4;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $i4 = (int) $c2;

        if $i4 == 63 goto label7;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $i4 = (int) $c2;

        if $i4 != 44 goto label6;

     label7:
        $i1 = $i1 + 1;

     label8:
        interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>(0);

        return $i1;
    }

    public static com.google.common.collect.ImmutableMap parseTrie(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r3;
        com.google.common.collect.ImmutableMap $r4;
        com.google.common.collect.ImmutableMap$Builder $r1;
        int $i0, $i1, $i2;
        java.util.LinkedList $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.LinkedList newLinkedList()>();

        $r3 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        $i2 = staticinvoke <com.google.thirdparty.publicsuffix.TrieParser: int doParseTrieToBuilder(java.util.List,java.lang.CharSequence,com.google.common.collect.ImmutableMap$Builder)>($r2, $r3, $r1);

        $i1 = $i1 + $i2;

        goto label1;

     label2:
        $r4 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

        return $r4;
    }

    public static java.lang.CharSequence reverse(java.lang.CharSequence)
    {
        java.lang.StringBuilder $r0;
        java.lang.CharSequence $r1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>();

        return $r0;
    }
}
