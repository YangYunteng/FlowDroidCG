public class com.google.common.collect.ConcurrentHashMultiset$EntrySet extends com.google.common.collect.AbstractMultiset$EntrySet
{
    public final com.google.common.collect.ConcurrentHashMultiset this$0;

    public void <init>(com.google.common.collect.ConcurrentHashMultiset)
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        com.google.common.collect.ConcurrentHashMultiset $r1;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $r1 := @parameter0: com.google.common.collect.ConcurrentHashMultiset;

        r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: com.google.common.collect.ConcurrentHashMultiset this$0> = $r1;

        specialinvoke r0.<com.google.common.collect.AbstractMultiset$EntrySet: void <init>(com.google.common.collect.AbstractMultiset)>($r1);

        return;
    }

    public void <init>(com.google.common.collect.ConcurrentHashMultiset, com.google.common.collect.ConcurrentHashMultiset$1)
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        com.google.common.collect.ConcurrentHashMultiset$1 $r2;
        com.google.common.collect.ConcurrentHashMultiset $r1;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $r1 := @parameter0: com.google.common.collect.ConcurrentHashMultiset;

        $r2 := @parameter1: com.google.common.collect.ConcurrentHashMultiset$1;

        specialinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: void <init>(com.google.common.collect.ConcurrentHashMultiset)>($r1);

        return;
    }

    private java.util.List snapshot()
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        java.util.Iterator $r2;
        int $i0;
        java.util.ArrayList $r1;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $i0 = virtualinvoke r0.<com.google.common.collect.AbstractMultiset$EntrySet: int size()>();

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithExpectedSize(int)>($i0);

        $r2 = virtualinvoke r0.<com.google.common.collect.AbstractMultiset$EntrySet: java.util.Iterator iterator()>();

        staticinvoke <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>($r1, $r2);

        return $r1;
    }

    public com.google.common.collect.ConcurrentHashMultiset multiset()
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        com.google.common.collect.ConcurrentHashMultiset r1;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        r1 = r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: com.google.common.collect.ConcurrentHashMultiset this$0>;

        return r1;
    }

    public volatile com.google.common.collect.Multiset multiset()
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        com.google.common.collect.ConcurrentHashMultiset $r1;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: com.google.common.collect.ConcurrentHashMultiset multiset()>();

        return $r1;
    }

    public java.lang.Object[] toArray()
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $r1 = specialinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: java.util.List snapshot()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        java.util.List $r2;
        java.lang.Object[] $r1;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $r1 := @parameter0: java.lang.Object[];

        $r2 = specialinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: java.util.List snapshot()>();

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        return $r1;
    }
}
