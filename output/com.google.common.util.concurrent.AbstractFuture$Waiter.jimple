public final class com.google.common.util.concurrent.AbstractFuture$Waiter extends java.lang.Object
{
    public static final com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE;
    public volatile com.google.common.util.concurrent.AbstractFuture$Waiter next;
    public volatile java.lang.Thread thread;

    static void <clinit>()
    {
        com.google.common.util.concurrent.AbstractFuture$Waiter $r0;

        $r0 = new com.google.common.util.concurrent.AbstractFuture$Waiter;

        specialinvoke $r0.<com.google.common.util.concurrent.AbstractFuture$Waiter: void <init>(boolean)>(0);

        <com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r1;
        com.google.common.util.concurrent.AbstractFuture$Waiter r0;
        java.lang.Thread $r2;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Waiter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200()>();

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread)>(r0, $r2);

        return;
    }

    public void <init>(boolean)
    {
        com.google.common.util.concurrent.AbstractFuture$Waiter r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setNext(com.google.common.util.concurrent.AbstractFuture$Waiter)
    {
        com.google.common.util.concurrent.AbstractFuture$AtomicHelper $r2;
        com.google.common.util.concurrent.AbstractFuture$Waiter r0, $r1;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200()>();

        virtualinvoke $r2.<com.google.common.util.concurrent.AbstractFuture$AtomicHelper: void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)>(r0, $r1);

        return;
    }

    public void unpark()
    {
        com.google.common.util.concurrent.AbstractFuture$Waiter r0;
        java.lang.Thread $r1;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Waiter;

        $r1 = r0.<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread>;

        if $r1 == null goto label1;

        r0.<com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread> = null;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r1);

     label1:
        return;
    }
}
