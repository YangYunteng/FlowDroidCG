public abstract class com.google.common.io.CharSource extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.io.CharSource r0;

        r0 := @this: com.google.common.io.CharSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void a(java.io.BufferedReader)
    {
        java.io.UncheckedIOException $r0;
        java.io.IOException $r2;
        java.io.BufferedReader $r1;

        $r1 := @parameter0: java.io.BufferedReader;

     label1:
        virtualinvoke $r1.<java.io.BufferedReader: void close()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r0 = new java.io.UncheckedIOException;

        specialinvoke $r0.<java.io.UncheckedIOException: void <init>(java.io.IOException)>($r2);

        throw $r0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static com.google.common.io.CharSource concat(java.lang.Iterable)
    {
        com.google.common.io.CharSource$ConcatenatedCharSource $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = new com.google.common.io.CharSource$ConcatenatedCharSource;

        specialinvoke $r1.<com.google.common.io.CharSource$ConcatenatedCharSource: void <init>(java.lang.Iterable)>($r0);

        return $r1;
    }

    public static com.google.common.io.CharSource concat(java.util.Iterator)
    {
        com.google.common.io.CharSource $r2;
        java.util.Iterator $r0;
        com.google.common.collect.ImmutableList $r1;

        $r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Iterator)>($r0);

        $r2 = staticinvoke <com.google.common.io.CharSource: com.google.common.io.CharSource concat(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static transient com.google.common.io.CharSource concat(com.google.common.io.CharSource[])
    {
        com.google.common.io.CharSource $r2;
        com.google.common.io.CharSource[] $r0;
        com.google.common.collect.ImmutableList $r1;

        $r0 := @parameter0: com.google.common.io.CharSource[];

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>($r0);

        $r2 = staticinvoke <com.google.common.io.CharSource: com.google.common.io.CharSource concat(java.lang.Iterable)>($r1);

        return $r2;
    }

    private long countBySkipping(java.io.Reader)
    {
        byte $b0;
        long $l1, $l2;
        com.google.common.io.CharSource r0;
        java.io.Reader $r1;

        r0 := @this: com.google.common.io.CharSource;

        $r1 := @parameter0: java.io.Reader;

        $l2 = 0L;

     label1:
        $l1 = virtualinvoke $r1.<java.io.Reader: long skip(long)>(9223372036854775807L);

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label2;

        $l2 = $l2 + $l1;

        goto label1;

     label2:
        return $l2;
    }

    public static com.google.common.io.CharSource empty()
    {
        com.google.common.io.CharSource$EmptyCharSource $r0;

        $r0 = staticinvoke <com.google.common.io.CharSource$EmptyCharSource: com.google.common.io.CharSource$EmptyCharSource access$000()>();

        return $r0;
    }

    public static com.google.common.io.CharSource wrap(java.lang.CharSequence)
    {
        com.google.common.io.CharSource$CharSequenceCharSource $r3;
        java.lang.CharSequence $r0;
        com.google.common.io.CharSource$StringCharSource $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $z0 = $r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r1 = new com.google.common.io.CharSource$StringCharSource;

        $r2 = (java.lang.String) $r0;

        specialinvoke $r1.<com.google.common.io.CharSource$StringCharSource: void <init>(java.lang.String)>($r2);

        return $r1;

     label1:
        $r3 = new com.google.common.io.CharSource$CharSequenceCharSource;

        specialinvoke $r3.<com.google.common.io.CharSource$CharSequenceCharSource: void <init>(java.lang.CharSequence)>($r0);

        return $r3;
    }

    public com.google.common.io.ByteSource asByteSource(java.nio.charset.Charset)
    {
        com.google.common.io.CharSource$AsByteSource $r2;
        com.google.common.io.CharSource r0;
        java.nio.charset.Charset $r1;

        r0 := @this: com.google.common.io.CharSource;

        $r1 := @parameter0: java.nio.charset.Charset;

        $r2 = new com.google.common.io.CharSource$AsByteSource;

        specialinvoke $r2.<com.google.common.io.CharSource$AsByteSource: void <init>(com.google.common.io.CharSource,java.nio.charset.Charset)>(r0, $r1);

        return $r2;
    }

    public long copyTo(com.google.common.io.CharSink)
    {
        java.lang.Throwable $r6, $r7;
        long $l0;
        java.io.Reader $r3;
        java.lang.RuntimeException $r8;
        com.google.common.io.CharSink $r1;
        com.google.common.io.Closer $r2;
        java.io.Closeable $r4;
        java.io.Writer $r5;
        com.google.common.io.CharSource r0;

        r0 := @this: com.google.common.io.CharSource;

        $r1 := @parameter0: com.google.common.io.CharSink;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label1:
        $r3 = virtualinvoke r0.<com.google.common.io.CharSource: java.io.Reader openStream()>();

        $r4 = virtualinvoke $r2.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r3);

        $r3 = (java.io.Reader) $r4;

        $r5 = virtualinvoke $r1.<com.google.common.io.CharSink: java.io.Writer openStream()>();

        $r4 = virtualinvoke $r2.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r5);

        $r5 = (java.io.Writer) $r4;

        $l0 = staticinvoke <com.google.common.io.CharStreams: long copy(java.lang.Readable,java.lang.Appendable)>($r3, $r5);

     label2:
        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        return $l0;

     label3:
        $r6 := @caughtexception;

        goto label6;

     label4:
        $r7 := @caughtexception;

     label5:
        $r8 = virtualinvoke $r2.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r7);

        throw $r8;

     label6:
        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public long copyTo(java.lang.Appendable)
    {
        java.lang.Throwable $r5, $r6;
        java.lang.Appendable $r1;
        long $l0;
        java.io.Reader $r3;
        java.lang.RuntimeException $r7;
        com.google.common.io.Closer $r2;
        java.io.Closeable $r4;
        com.google.common.io.CharSource r0;

        r0 := @this: com.google.common.io.CharSource;

        $r1 := @parameter0: java.lang.Appendable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label1:
        $r3 = virtualinvoke r0.<com.google.common.io.CharSource: java.io.Reader openStream()>();

        $r4 = virtualinvoke $r2.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r3);

        $r3 = (java.io.Reader) $r4;

        $l0 = staticinvoke <com.google.common.io.CharStreams: long copy(java.lang.Readable,java.lang.Appendable)>($r3, $r1);

     label2:
        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        return $l0;

     label3:
        $r5 := @caughtexception;

        goto label6;

     label4:
        $r6 := @caughtexception;

     label5:
        $r7 = virtualinvoke $r2.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r6);

        throw $r7;

     label6:
        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public void forEachLine(java.util.function.Consumer)
    {
        java.lang.Throwable $r3, $r4, $r5;
        java.io.IOException $r7;
        java.util.function.Consumer $r1;
        java.io.UncheckedIOException $r6;
        java.util.stream.Stream $r2;
        com.google.common.io.CharSource r0;

        r0 := @this: com.google.common.io.CharSource;

        $r1 := @parameter0: java.util.function.Consumer;

     label01:
        $r2 = virtualinvoke r0.<com.google.common.io.CharSource: java.util.stream.Stream lines()>();

     label02:
        interfaceinvoke $r2.<java.util.stream.Stream: void forEachOrdered(java.util.function.Consumer)>($r1);

     label03:
        if $r2 == null goto label18;

     label04:
        interfaceinvoke $r2.<java.util.stream.Stream: void close()>();

     label05:
        return;

     label06:
        $r3 := @caughtexception;

        goto label09;

     label07:
        $r4 := @caughtexception;

     label08:
        throw $r4;

     label09:
        if $r2 == null goto label16;

        if $r4 == null goto label15;

     label10:
        interfaceinvoke $r2.<java.util.stream.Stream: void close()>();

     label11:
        goto label16;

     label12:
        $r5 := @caughtexception;

     label13:
        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label14:
        goto label16;

     label15:
        interfaceinvoke $r2.<java.util.stream.Stream: void close()>();

     label16:
        throw $r3;

     label17:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.io.UncheckedIOException: java.io.IOException getCause()>();

        throw $r7;

     label18:
        return;

        catch java.io.UncheckedIOException from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.io.UncheckedIOException from label04 to label05 with label17;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.io.UncheckedIOException from label13 to label14 with label17;
        catch java.io.UncheckedIOException from label15 to label17 with label17;
    }

    public boolean isEmpty()
    {
        java.lang.Throwable $r7, $r8;
        long $l1;
        byte $b0;
        java.lang.Long $r3;
        com.google.common.io.Closer $r4;
        com.google.common.base.Optional $r1;
        int $i2, $i3;
        com.google.common.io.CharSource r0;
        boolean $z0, $z1;
        java.io.Reader $r5;
        java.lang.RuntimeException $r9;
        java.io.Closeable $r6;
        java.lang.Object $r2;

        r0 := @this: com.google.common.io.CharSource;

        $r1 = virtualinvoke r0.<com.google.common.io.CharSource: com.google.common.base.Optional lengthIfKnown()>();

        $z0 = virtualinvoke $r1.<com.google.common.base.Optional: boolean isPresent()>();

        $z1 = 1;

        if $z0 == 0 goto label02;

        $r2 = virtualinvoke $r1.<com.google.common.base.Optional: java.lang.Object get()>();

        $r3 = (java.lang.Long) $r2;

        $l1 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label01;

        return 1;

     label01:
        return 0;

     label02:
        $r4 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label03:
        $r5 = virtualinvoke r0.<com.google.common.io.CharSource: java.io.Reader openStream()>();

        $r6 = virtualinvoke $r4.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r5);

        $r5 = (java.io.Reader) $r6;

        $i2 = virtualinvoke $r5.<java.io.Reader: int read()>();

     label04:
        $i3 = -1;

        if $i2 != $i3 goto label05;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        virtualinvoke $r4.<com.google.common.io.Closer: void close()>();

        return $z1;

     label07:
        $r7 := @caughtexception;

        goto label10;

     label08:
        $r8 := @caughtexception;

     label09:
        $r9 = virtualinvoke $r4.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r8);

        throw $r9;

     label10:
        virtualinvoke $r4.<com.google.common.io.Closer: void close()>();

        throw $r7;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label07;
    }

    public long length()
    {
        java.lang.Throwable $r7, $r8;
        long $l0;
        java.io.Reader $r5;
        java.lang.RuntimeException $r9;
        java.lang.Long $r3;
        com.google.common.io.Closer $r4;
        com.google.common.base.Optional $r1;
        java.io.Closeable $r6;
        java.lang.Object $r2;
        com.google.common.io.CharSource r0;
        boolean $z0;

        r0 := @this: com.google.common.io.CharSource;

        $r1 = virtualinvoke r0.<com.google.common.io.CharSource: com.google.common.base.Optional lengthIfKnown()>();

        $z0 = virtualinvoke $r1.<com.google.common.base.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.google.common.base.Optional: java.lang.Object get()>();

        $r3 = (java.lang.Long) $r2;

        $l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        return $l0;

     label1:
        $r4 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label2:
        $r5 = virtualinvoke r0.<com.google.common.io.CharSource: java.io.Reader openStream()>();

        $r6 = virtualinvoke $r4.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r5);

        $r5 = (java.io.Reader) $r6;

        $l0 = specialinvoke r0.<com.google.common.io.CharSource: long countBySkipping(java.io.Reader)>($r5);

     label3:
        virtualinvoke $r4.<com.google.common.io.Closer: void close()>();

        return $l0;

     label4:
        $r7 := @caughtexception;

        goto label7;

     label5:
        $r8 := @caughtexception;

     label6:
        $r9 = virtualinvoke $r4.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r8);

        throw $r9;

     label7:
        virtualinvoke $r4.<com.google.common.io.Closer: void close()>();

        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public com.google.common.base.Optional lengthIfKnown()
    {
        com.google.common.io.CharSource r0;
        com.google.common.base.Optional $r1;

        r0 := @this: com.google.common.io.CharSource;

        $r1 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();

        return $r1;
    }

    public java.util.stream.Stream lines()
    {
        java.util.stream.Stream $r3;
        c.i.b.f.a $r1;
        java.util.stream.BaseStream $r4;
        com.google.common.io.CharSource r0;
        java.io.BufferedReader $r2;

        r0 := @this: com.google.common.io.CharSource;

        $r2 = virtualinvoke r0.<com.google.common.io.CharSource: java.io.BufferedReader openBufferedStream()>();

        $r3 = virtualinvoke $r2.<java.io.BufferedReader: java.util.stream.Stream lines()>();

        $r1 = new c.i.b.f.a;

        specialinvoke $r1.<c.i.b.f.a: void <init>(java.io.BufferedReader)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r1);

        $r3 = (java.util.stream.Stream) $r4;

        return $r3;
    }

    public java.io.BufferedReader openBufferedStream()
    {
        com.google.common.io.CharSource r0;
        java.io.Reader $r1;
        java.io.BufferedReader $r2;
        boolean $z0;

        r0 := @this: com.google.common.io.CharSource;

        $r1 = virtualinvoke r0.<com.google.common.io.CharSource: java.io.Reader openStream()>();

        $z0 = $r1 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label1;

        $r2 = (java.io.BufferedReader) $r1;

        return $r2;

     label1:
        $r2 = new java.io.BufferedReader;

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        return $r2;
    }

    public abstract java.io.Reader openStream();

    public java.lang.String read()
    {
        java.lang.Throwable $r5, $r6;
        java.io.Reader $r2;
        java.lang.RuntimeException $r7;
        com.google.common.io.Closer $r1;
        java.io.Closeable $r3;
        com.google.common.io.CharSource r0;
        java.lang.String $r4;

        r0 := @this: com.google.common.io.CharSource;

        $r1 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label1:
        $r2 = virtualinvoke r0.<com.google.common.io.CharSource: java.io.Reader openStream()>();

        $r3 = virtualinvoke $r1.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r2);

        $r2 = (java.io.Reader) $r3;

        $r4 = staticinvoke <com.google.common.io.CharStreams: java.lang.String toString(java.lang.Readable)>($r2);

     label2:
        virtualinvoke $r1.<com.google.common.io.Closer: void close()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

        goto label6;

     label4:
        $r6 := @caughtexception;

     label5:
        $r7 = virtualinvoke $r1.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r6);

        throw $r7;

     label6:
        virtualinvoke $r1.<com.google.common.io.Closer: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public java.lang.String readFirstLine()
    {
        java.lang.Throwable $r5, $r6;
        java.lang.RuntimeException $r7;
        com.google.common.io.Closer $r1;
        java.io.Closeable $r3;
        com.google.common.io.CharSource r0;
        java.io.BufferedReader $r2;
        java.lang.String $r4;

        r0 := @this: com.google.common.io.CharSource;

        $r1 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label1:
        $r2 = virtualinvoke r0.<com.google.common.io.CharSource: java.io.BufferedReader openBufferedStream()>();

        $r3 = virtualinvoke $r1.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r2);

        $r2 = (java.io.BufferedReader) $r3;

        $r4 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

     label2:
        virtualinvoke $r1.<com.google.common.io.Closer: void close()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

        goto label6;

     label4:
        $r6 := @caughtexception;

     label5:
        $r7 = virtualinvoke $r1.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r6);

        throw $r7;

     label6:
        virtualinvoke $r1.<com.google.common.io.Closer: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public com.google.common.collect.ImmutableList readLines()
    {
        java.lang.Throwable $r7, $r8;
        java.lang.RuntimeException $r9;
        java.util.ArrayList $r4;
        com.google.common.collect.ImmutableList $r6;
        com.google.common.io.Closer $r1;
        java.io.Closeable $r3;
        com.google.common.io.CharSource r0;
        java.io.BufferedReader $r2;
        java.lang.String $r5;

        r0 := @this: com.google.common.io.CharSource;

        $r1 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label01:
        $r2 = virtualinvoke r0.<com.google.common.io.CharSource: java.io.BufferedReader openBufferedStream()>();

        $r3 = virtualinvoke $r1.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r2);

        $r2 = (java.io.BufferedReader) $r3;

        $r4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

     label02:
        $r5 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

     label03:
        if $r5 == null goto label06;

     label04:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

     label05:
        goto label02;

     label06:
        $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r4);

     label07:
        virtualinvoke $r1.<com.google.common.io.Closer: void close()>();

        return $r6;

     label08:
        $r7 := @caughtexception;

        goto label11;

     label09:
        $r8 := @caughtexception;

     label10:
        $r9 = virtualinvoke $r1.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r8);

        throw $r9;

     label11:
        virtualinvoke $r1.<com.google.common.io.Closer: void close()>();

        goto label12;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label10 to label11 with label08;
    }

    public java.lang.Object readLines(com.google.common.io.LineProcessor)
    {
        java.lang.Throwable $r6, $r7;
        java.io.Reader $r3;
        java.lang.RuntimeException $r8;
        com.google.common.io.LineProcessor $r1;
        com.google.common.io.Closer $r2;
        java.io.Closeable $r4;
        java.lang.Object $r5;
        com.google.common.io.CharSource r0;

        r0 := @this: com.google.common.io.CharSource;

        $r1 := @parameter0: com.google.common.io.LineProcessor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = staticinvoke <com.google.common.io.Closer: com.google.common.io.Closer create()>();

     label1:
        $r3 = virtualinvoke r0.<com.google.common.io.CharSource: java.io.Reader openStream()>();

        $r4 = virtualinvoke $r2.<com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r3);

        $r3 = (java.io.Reader) $r4;

        $r5 = staticinvoke <com.google.common.io.CharStreams: java.lang.Object readLines(java.lang.Readable,com.google.common.io.LineProcessor)>($r3, $r1);

     label2:
        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        return $r5;

     label3:
        $r6 := @caughtexception;

        goto label6;

     label4:
        $r7 := @caughtexception;

     label5:
        $r8 = virtualinvoke $r2.<com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r7);

        throw $r8;

     label6:
        virtualinvoke $r2.<com.google.common.io.Closer: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label3;
    }
}
