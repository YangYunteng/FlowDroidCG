public class com.google.common.collect.AbstractMapBasedMultiset$1 extends java.lang.Object implements java.util.Iterator
{
    public final com.google.common.collect.AbstractMapBasedMultiset this$0;
    public java.util.Map$Entry toRemove;
    public final java.util.Iterator val$backingEntries;

    public void <init>(com.google.common.collect.AbstractMapBasedMultiset, java.util.Iterator)
    {
        com.google.common.collect.AbstractMapBasedMultiset $r1;
        com.google.common.collect.AbstractMapBasedMultiset$1 r0;
        java.util.Iterator $r2;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$1;

        $r1 := @parameter0: com.google.common.collect.AbstractMapBasedMultiset;

        $r2 := @parameter1: java.util.Iterator;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$1: com.google.common.collect.AbstractMapBasedMultiset this$0> = $r1;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$1: java.util.Iterator val$backingEntries> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean hasNext()
    {
        com.google.common.collect.AbstractMapBasedMultiset$1 r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$1;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$1: java.util.Iterator val$backingEntries>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public com.google.common.collect.Multiset$Entry next()
    {
        java.util.Map$Entry $r4;
        com.google.common.collect.AbstractMapBasedMultiset$1$1 $r1;
        java.util.Iterator $r3;
        com.google.common.collect.AbstractMapBasedMultiset$1 r0;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$1;

        $r3 = r0.<com.google.common.collect.AbstractMapBasedMultiset$1: java.util.Iterator val$backingEntries>;

        $r2 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.Map$Entry) $r2;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$1: java.util.Map$Entry toRemove> = $r4;

        $r1 = new com.google.common.collect.AbstractMapBasedMultiset$1$1;

        specialinvoke $r1.<com.google.common.collect.AbstractMapBasedMultiset$1$1: void <init>(com.google.common.collect.AbstractMapBasedMultiset$1,java.util.Map$Entry)>(r0, $r4);

        return $r1;
    }

    public volatile java.lang.Object next()
    {
        com.google.common.collect.AbstractMapBasedMultiset$1 r0;
        com.google.common.collect.Multiset$Entry $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$1;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset$1: com.google.common.collect.Multiset$Entry next()>();

        return $r1;
    }

    public void remove()
    {
        java.util.Map$Entry $r1;
        java.util.Iterator $r5;
        com.google.common.collect.AbstractMapBasedMultiset $r2;
        long $l0, $l2;
        int $i1;
        com.google.common.collect.Count $r4;
        com.google.common.collect.AbstractMapBasedMultiset$1 r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$1;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$1: java.util.Map$Entry toRemove>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.collect.CollectPreconditions: void checkRemove(boolean)>($z0);

        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset$1: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $l0 = staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: long access$100(com.google.common.collect.AbstractMapBasedMultiset)>($r2);

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$1: java.util.Map$Entry toRemove>;

        $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r4 = (com.google.common.collect.Count) $r3;

        $i1 = virtualinvoke $r4.<com.google.common.collect.Count: int getAndSet(int)>(0);

        $l2 = (long) $i1;

        $l0 = $l0 - $l2;

        staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: long access$102(com.google.common.collect.AbstractMapBasedMultiset,long)>($r2, $l0);

        $r5 = r0.<com.google.common.collect.AbstractMapBasedMultiset$1: java.util.Iterator val$backingEntries>;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        r0.<com.google.common.collect.AbstractMapBasedMultiset$1: java.util.Map$Entry toRemove> = null;

        return;
    }
}
