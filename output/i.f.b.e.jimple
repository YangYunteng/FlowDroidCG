public final class i.f.b.e extends java.lang.Object implements i.h.c, i.f.b.d
{
    public static final java.util.Map a;
    public static final java.util.HashMap b;
    public static final java.util.HashMap c;
    public static final java.util.HashMap d;
    public static final java.util.Map e;
    public static final i.f.b.e$a f;
    public final java.lang.Class g;

    static void <clinit>()
    {
        java.util.HashMap $r10, $r11;
        java.lang.Integer $r7;
        java.lang.NullPointerException r21;
        java.util.ArrayList $r3;
        java.util.LinkedHashMap $r20;
        java.util.Map $r9;
        int $i0, $i1;
        java.lang.String $r13, $r15;
        java.lang.Number $r19;
        boolean $z0;
        i.f $r8;
        java.util.Map$Entry $r18;
        java.util.Iterator $r4;
        java.util.Collection $r12;
        java.lang.Class[] $r1;
        java.util.Set $r17;
        java.util.List $r2;
        i.f.b.e$a $r0;
        java.lang.Object $r5, $r16;
        java.lang.Class $r6;
        java.lang.StringBuilder $r14;

        $r0 = new i.f.b.e$a;

        specialinvoke $r0.<i.f.b.e$a: void <init>(i.f.b.g)>(null);

        <i.f.b.e: i.f.b.e$a f> = $r0;

        $r1 = newarray (java.lang.Class)[23];

        $i0 = 0;

        $r1[0] = class "Li/f/a/a;";

        $r1[1] = class "Li/f/a/l;";

        $r1[2] = class "Li/f/a/p;";

        $r1[3] = class "Li/f/a/q;";

        $r1[4] = class "Li/f/a/r;";

        $r1[5] = class "Li/f/a/s;";

        $r1[6] = class "Li/f/a/t;";

        $r1[7] = class "Li/f/a/u;";

        $r1[8] = class "Li/f/a/v;";

        $r1[9] = class "Li/f/a/w;";

        $r1[10] = class "Li/f/a/b;";

        $r1[11] = class "Li/f/a/c;";

        $r1[12] = class "Li/f/a/d;";

        $r1[13] = class "Li/f/a/e;";

        $r1[14] = class "Li/f/a/f;";

        $r1[15] = class "Li/f/a/g;";

        $r1[16] = class "Li/f/a/h;";

        $r1[17] = class "Li/f/a/i;";

        $r1[18] = class "Li/f/a/j;";

        $r1[19] = class "Li/f/a/k;";

        $r1[20] = class "Li/f/a/m;";

        $r1[21] = class "Li/f/a/n;";

        $r1[22] = class "Li/f/a/o;";

        $r2 = staticinvoke <i.a.h: java.util.List b(java.lang.Object[])>($r1);

        $r3 = new java.util.ArrayList;

        $i1 = staticinvoke <i.a.i: int a(java.lang.Iterable,int)>($r2, 10);

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i1);

        $r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $i0 < 0 goto label2;

        $r6 = (java.lang.Class) $r5;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8 = staticinvoke <i.j: i.f a(java.lang.Object,java.lang.Object)>($r6, $r7);

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        staticinvoke <i.a.h: void b()>();

        r21 = new java.lang.NullPointerException;

        specialinvoke r21.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r21;

     label3:
        $r9 = staticinvoke <i.a.x: java.util.Map a(java.lang.Iterable)>($r3);

        <i.f.b.e: java.util.Map a> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", "kotlin.Boolean");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", "kotlin.Char");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", "kotlin.Byte");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", "kotlin.Short");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", "kotlin.Int");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", "kotlin.Float");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", "kotlin.Long");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", "kotlin.Double");

        <i.f.b.e: java.util.HashMap b> = $r10;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Boolean", "kotlin.Boolean");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Character", "kotlin.Char");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Byte", "kotlin.Byte");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Short", "kotlin.Short");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Integer", "kotlin.Int");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Float", "kotlin.Float");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Long", "kotlin.Long");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Double", "kotlin.Double");

        <i.f.b.e: java.util.HashMap c> = $r10;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Object", "kotlin.Any");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.String", "kotlin.String");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.CharSequence", "kotlin.CharSequence");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Throwable", "kotlin.Throwable");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Cloneable", "kotlin.Cloneable");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Number", "kotlin.Number");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Comparable", "kotlin.Comparable");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Enum", "kotlin.Enum");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.annotation.Annotation", "kotlin.Annotation");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Iterable", "kotlin.collections.Iterable");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Iterator", "kotlin.collections.Iterator");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Collection", "kotlin.collections.Collection");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.List", "kotlin.collections.List");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Set", "kotlin.collections.Set");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.ListIterator", "kotlin.collections.ListIterator");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Map", "kotlin.collections.Map");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Map$Entry", "kotlin.collections.Map.Entry");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("kotlin.jvm.internal.StringCompanionObject", "kotlin.String.Companion");

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("kotlin.jvm.internal.EnumCompanionObject", "kotlin.Enum.Companion");

        $r11 = <i.f.b.e: java.util.HashMap b>;

        virtualinvoke $r10.<java.util.HashMap: void putAll(java.util.Map)>($r11);

        $r11 = <i.f.b.e: java.util.HashMap c>;

        virtualinvoke $r10.<java.util.HashMap: void putAll(java.util.Map)>($r11);

        $r11 = <i.f.b.e: java.util.HashMap b>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.util.Collection values()>();

        staticinvoke <i.f.b.i: void a(java.lang.Object,java.lang.String)>($r12, "primitiveFqNames.values");

        $r4 = interfaceinvoke $r12.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.lang.String) $r5;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kotlin.jvm.internal.");

        staticinvoke <i.f.b.i: void a(java.lang.Object,java.lang.String)>($r13, "kotlinName");

        $r15 = staticinvoke <i.j.s: java.lang.String a(java.lang.String,char,java.lang.String,int,java.lang.Object)>($r13, 46, null, 2, null);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CompanionObject");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".Companion");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <i.j: i.f a(java.lang.Object,java.lang.Object)>($r15, $r13);

        $r5 = virtualinvoke $r8.<i.f: java.lang.Object c()>();

        $r16 = virtualinvoke $r8.<i.f: java.lang.Object d()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r16);

        goto label4;

     label5:
        $r9 = <i.f.b.e: java.util.Map a>;

        $r17 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r18.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.Class) $r5;

        $r5 = interfaceinvoke $r18.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (java.lang.Number) $r5;

        $i0 = virtualinvoke $r19.<java.lang.Number: int intValue()>();

        $r13 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kotlin.Function");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r15);

        goto label6;

     label7:
        <i.f.b.e: java.util.HashMap d> = $r10;

        $r10 = <i.f.b.e: java.util.HashMap d>;

        $r20 = new java.util.LinkedHashMap;

        $i0 = interfaceinvoke $r10.<java.util.Map: int size()>();

        $i0 = staticinvoke <i.a.w: int a(int)>($i0);

        specialinvoke $r20.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r17 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r17.<java.lang.Iterable: java.util.Iterator iterator()>();

     label8:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r18.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = interfaceinvoke $r18.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.String) $r16;

        $r13 = staticinvoke <i.j.s: java.lang.String a(java.lang.String,char,java.lang.String,int,java.lang.Object)>($r13, 46, null, 2, null);

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r13);

        goto label8;

     label9:
        <i.f.b.e: java.util.Map e> = $r20;

        return;
    }

    public void <init>(java.lang.Class)
    {
        java.lang.Class $r1;
        i.f.b.e r0;

        r0 := @this: i.f.b.e;

        $r1 := @parameter0: java.lang.Class;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "jClass");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<i.f.b.e: java.lang.Class g> = $r1;

        return;
    }

    public java.lang.Class a()
    {
        java.lang.Class r1;
        i.f.b.e r0;

        r0 := @this: i.f.b.e;

        r1 = r0.<i.f.b.e: java.lang.Class g>;

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        i.h.c $r3;
        java.lang.Object $r1;
        java.lang.Class $r2, $r4;
        i.f.b.e r0;
        boolean $z0;

        r0 := @this: i.f.b.e;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof i.f.b.e;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <i.f.a: java.lang.Class b(i.h.c)>(r0);

        $r3 = (i.h.c) $r1;

        $r4 = staticinvoke <i.f.a: java.lang.Class b(i.h.c)>($r3);

        $z0 = staticinvoke <i.f.b.i: boolean a(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.Class $r1;
        i.f.b.e r0;

        r0 := @this: i.f.b.e;

        $r1 = staticinvoke <i.f.a: java.lang.Class b(i.h.c)>(r0);

        $i0 = virtualinvoke $r1.<java.lang.Class: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        i.f.b.e r0;

        r0 := @this: i.f.b.e;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<i.f.b.e: java.lang.Class a()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Kotlin reflection is not available)");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
