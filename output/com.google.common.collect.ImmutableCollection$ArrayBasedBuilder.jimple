public abstract class com.google.common.collect.ImmutableCollection$ArrayBasedBuilder extends com.google.common.collect.ImmutableCollection$Builder
{
    public java.lang.Object[] contents;
    public boolean forceCopy;
    public int size;

    public void <init>(int)
    {
        int $i0;
        java.lang.Object[] $r1;
        com.google.common.collect.ImmutableCollection$ArrayBasedBuilder r0;

        r0 := @this: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.collect.ImmutableCollection$Builder: void <init>()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "initialCapacity");

        $r1 = newarray (java.lang.Object)[$i0];

        r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: java.lang.Object[] contents> = $r1;

        r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size> = 0;

        return;
    }

    private void getReadyToExpandTo(int)
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        com.google.common.collect.ImmutableCollection$ArrayBasedBuilder r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: java.lang.Object[] contents>;

        $i1 = lengthof $r1;

        if $i1 >= $i0 goto label1;

        $i1 = lengthof $r1;

        $i0 = staticinvoke <com.google.common.collect.ImmutableCollection$Builder: int expandedCapacity(int,int)>($i1, $i0);

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: java.lang.Object[] contents> = $r1;

        r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: boolean forceCopy> = 0;

        return;

     label1:
        $z0 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: boolean forceCopy>;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (java.lang.Object[]) $r2;

        r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: java.lang.Object[] contents> = $r1;

        r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: boolean forceCopy> = 0;

     label2:
        return;
    }

    public com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)
    {
        java.lang.Object[] $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        com.google.common.collect.ImmutableCollection$ArrayBasedBuilder r0;

        r0 := @this: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i0 = $i0 + 1;

        specialinvoke r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: void getReadyToExpandTo(int)>($i0);

        $r2 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: java.lang.Object[] contents>;

        $i0 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i1 = $i0 + 1;

        r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size> = $i1;

        $r2[$i0] = $r1;

        return r0;
    }

    public volatile com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableCollection$ArrayBasedBuilder r0;

        r0 := @this: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)>($r1);

        return r0;
    }

    public transient com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])
    {
        java.lang.Object[] $r1, $r2;
        int $i0, $i1;
        com.google.common.collect.ImmutableCollection$ArrayBasedBuilder r0;

        r0 := @this: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] checkElementsNotNull(java.lang.Object[])>($r1);

        $i0 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        specialinvoke r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: void getReadyToExpandTo(int)>($i0);

        $r2 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: java.lang.Object[] contents>;

        $i1 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0);

        $i0 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size> = $i0;

        return r0;
    }

    public com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)
    {
        java.lang.Object[] $r4;
        java.util.Collection $r2;
        com.google.common.collect.ImmutableCollection $r3;
        java.lang.Iterable $r1;
        int $i0, $i1;
        com.google.common.collect.ImmutableCollection$ArrayBasedBuilder r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder;

        $r1 := @parameter0: java.lang.Iterable;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Collection) $r1;

        $i0 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i1 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        $i0 = $i0 + $i1;

        specialinvoke r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: void getReadyToExpandTo(int)>($i0);

        $z0 = $r2 instanceof com.google.common.collect.ImmutableCollection;

        if $z0 == 0 goto label1;

        $r3 = (com.google.common.collect.ImmutableCollection) $r2;

        $r4 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: java.lang.Object[] contents>;

        $i0 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i0 = virtualinvoke $r3.<com.google.common.collect.ImmutableCollection: int copyIntoArray(java.lang.Object[],int)>($r4, $i0);

        r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size> = $i0;

        return r0;

     label1:
        specialinvoke r0.<com.google.common.collect.ImmutableCollection$Builder: com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)>($r1);

        return r0;
    }

    public com.google.common.collect.ImmutableCollection$ArrayBasedBuilder combine(com.google.common.collect.ImmutableCollection$ArrayBasedBuilder)
    {
        java.lang.Object[] $r2, $r3;
        int $i0, $i1;
        com.google.common.collect.ImmutableCollection$ArrayBasedBuilder r0, $r1;

        r0 := @this: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder;

        $r1 := @parameter0: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i1 = $r1.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i0 = $i0 + $i1;

        specialinvoke r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: void getReadyToExpandTo(int)>($i0);

        $r2 = $r1.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: java.lang.Object[] contents>;

        $r3 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: java.lang.Object[] contents>;

        $i0 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i1 = $r1.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, $i0, $i1);

        $i0 = r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i1 = $r1.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size>;

        $i0 = $i0 + $i1;

        r0.<com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size> = $i0;

        return r0;
    }
}
