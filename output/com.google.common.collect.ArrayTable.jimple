public final class com.google.common.collect.ArrayTable extends com.google.common.collect.AbstractTable implements java.io.Serializable
{
    public static final long serialVersionUID;
    public final java.lang.Object[][] array;
    public final com.google.common.collect.ImmutableMap columnKeyToIndex;
    public final com.google.common.collect.ImmutableList columnList;
    public transient com.google.common.collect.ArrayTable$ColumnMap columnMap;
    public final com.google.common.collect.ImmutableMap rowKeyToIndex;
    public final com.google.common.collect.ImmutableList rowList;
    public transient com.google.common.collect.ArrayTable$RowMap rowMap;

    public void <init>(com.google.common.collect.ArrayTable)
    {
        java.lang.Object[] $r2, $r3, $r10;
        com.google.common.collect.ImmutableMap $r5;
        java.lang.Object[][] $r8, $r9;
        com.google.common.collect.ArrayTable r0, $r1;
        com.google.common.collect.ImmutableList $r4;
        int[] $r6;
        int $i0, $i1;
        java.lang.Object $r7;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 := @parameter0: com.google.common.collect.ArrayTable;

        specialinvoke r0.<com.google.common.collect.AbstractTable: void <init>()>();

        $r4 = $r1.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList> = $r4;

        $r4 = $r1.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList> = $r4;

        $r5 = $r1.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap rowKeyToIndex> = $r5;

        $r5 = $r1.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap columnKeyToIndex> = $r5;

        $r4 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        $i0 = virtualinvoke $r4.<java.util.AbstractCollection: int size()>();

        $r4 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        $i1 = virtualinvoke $r4.<java.util.AbstractCollection: int size()>();

        $r6 = newarray (int)[2];

        $r6[0] = $i0;

        $r6[1] = $i1;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Ljava/lang/Object;", $r6);

        $r8 = (java.lang.Object[][]) $r7;

        r0.<com.google.common.collect.ArrayTable: java.lang.Object[][] array> = $r8;

        $i0 = 0;

     label1:
        $r4 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        $i1 = virtualinvoke $r4.<java.util.AbstractCollection: int size()>();

        if $i0 >= $i1 goto label2;

        $r9 = $r1.<com.google.common.collect.ArrayTable: java.lang.Object[][] array>;

        $r2 = $r9[$i0];

        $r3 = $r8[$i0];

        $r10 = $r9[$i0];

        $i1 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(com.google.common.collect.Table)
    {
        com.google.common.collect.ArrayTable r0;
        java.util.Set $r2, $r3;
        com.google.common.collect.Table $r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 := @parameter0: com.google.common.collect.Table;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Table: java.util.Set rowKeySet()>();

        $r3 = interfaceinvoke $r1.<com.google.common.collect.Table: java.util.Set columnKeySet()>();

        specialinvoke r0.<com.google.common.collect.ArrayTable: void <init>(java.lang.Iterable,java.lang.Iterable)>($r2, $r3);

        virtualinvoke r0.<com.google.common.collect.ArrayTable: void putAll(com.google.common.collect.Table)>($r1);

        return;
    }

    public void <init>(java.lang.Iterable, java.lang.Iterable)
    {
        com.google.common.collect.ImmutableMap $r4;
        java.lang.Iterable $r1, $r2;
        java.lang.Object[][] $r7;
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableList $r3;
        int[] $r5;
        int $i0, $i1;
        java.lang.Object $r6;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 := @parameter1: java.lang.Iterable;

        specialinvoke r0.<com.google.common.collect.AbstractTable: void <init>()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r1);

        r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList> = $r3;

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r2);

        r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList> = $r3;

        $r3 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        $z0 = virtualinvoke $r3.<java.util.AbstractCollection: boolean isEmpty()>();

        $r3 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        $z1 = virtualinvoke $r3.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 != $z1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap indexMap(java.util.Collection)>($r3);

        r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap rowKeyToIndex> = $r4;

        $r3 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        $r4 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap indexMap(java.util.Collection)>($r3);

        r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap columnKeyToIndex> = $r4;

        $r3 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        $i0 = virtualinvoke $r3.<java.util.AbstractCollection: int size()>();

        $r3 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        $i1 = virtualinvoke $r3.<java.util.AbstractCollection: int size()>();

        $r5 = newarray (int)[2];

        $r5[0] = $i0;

        $r5[1] = $i1;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Ljava/lang/Object;", $r5);

        $r7 = (java.lang.Object[][]) $r6;

        r0.<com.google.common.collect.ArrayTable: java.lang.Object[][] array> = $r7;

        virtualinvoke r0.<com.google.common.collect.ArrayTable: void eraseAll()>();

        return;
    }

    public static com.google.common.collect.Table$Cell a(com.google.common.collect.ArrayTable, int)
    {
        int $i0;
        com.google.common.collect.Table$Cell $r0;
        com.google.common.collect.ArrayTable $r1;

        $r1 := @parameter0: com.google.common.collect.ArrayTable;

        $i0 := @parameter1: int;

        $r0 = specialinvoke $r1.<com.google.common.collect.ArrayTable: com.google.common.collect.Table$Cell getCell(int)>($i0);

        return $r0;
    }

    public static com.google.common.collect.Table$Cell access$000(com.google.common.collect.ArrayTable, int)
    {
        int $i0;
        com.google.common.collect.Table$Cell $r0;
        com.google.common.collect.ArrayTable $r1;

        $r1 := @parameter0: com.google.common.collect.ArrayTable;

        $i0 := @parameter1: int;

        $r0 = specialinvoke $r1.<com.google.common.collect.ArrayTable: com.google.common.collect.Table$Cell getCell(int)>($i0);

        return $r0;
    }

    public static com.google.common.collect.ImmutableList access$100(com.google.common.collect.ArrayTable)
    {
        com.google.common.collect.ArrayTable $r0;
        com.google.common.collect.ImmutableList r1;

        $r0 := @parameter0: com.google.common.collect.ArrayTable;

        r1 = $r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        return r1;
    }

    public static com.google.common.collect.ImmutableList access$200(com.google.common.collect.ArrayTable)
    {
        com.google.common.collect.ArrayTable $r0;
        com.google.common.collect.ImmutableList r1;

        $r0 := @parameter0: com.google.common.collect.ArrayTable;

        r1 = $r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        return r1;
    }

    public static com.google.common.collect.ImmutableMap access$300(com.google.common.collect.ArrayTable)
    {
        com.google.common.collect.ArrayTable $r0;
        com.google.common.collect.ImmutableMap r1;

        $r0 := @parameter0: com.google.common.collect.ArrayTable;

        r1 = $r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        return r1;
    }

    public static com.google.common.collect.ImmutableMap access$600(com.google.common.collect.ArrayTable)
    {
        com.google.common.collect.ArrayTable $r0;
        com.google.common.collect.ImmutableMap r1;

        $r0 := @parameter0: com.google.common.collect.ArrayTable;

        r1 = $r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        return r1;
    }

    public static java.lang.Object access$800(com.google.common.collect.ArrayTable, int)
    {
        int $i0;
        java.lang.Object $r0;
        com.google.common.collect.ArrayTable $r1;

        $r1 := @parameter0: com.google.common.collect.ArrayTable;

        $i0 := @parameter1: int;

        $r0 = specialinvoke $r1.<com.google.common.collect.ArrayTable: java.lang.Object getValue(int)>($i0);

        return $r0;
    }

    public static java.lang.Object b(com.google.common.collect.ArrayTable, int)
    {
        int $i0;
        java.lang.Object $r0;
        com.google.common.collect.ArrayTable $r1;

        $r1 := @parameter0: com.google.common.collect.ArrayTable;

        $i0 := @parameter1: int;

        $r0 = specialinvoke $r1.<com.google.common.collect.ArrayTable: java.lang.Object getValue(int)>($i0);

        return $r0;
    }

    public static com.google.common.collect.ArrayTable create(com.google.common.collect.Table)
    {
        com.google.common.collect.ArrayTable $r1, $r2;
        com.google.common.collect.Table $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.Table;

        $z0 = $r0 instanceof com.google.common.collect.ArrayTable;

        if $z0 == 0 goto label1;

        $r1 = new com.google.common.collect.ArrayTable;

        $r2 = (com.google.common.collect.ArrayTable) $r0;

        specialinvoke $r1.<com.google.common.collect.ArrayTable: void <init>(com.google.common.collect.ArrayTable)>($r2);

        return $r1;

     label1:
        $r1 = new com.google.common.collect.ArrayTable;

        specialinvoke $r1.<com.google.common.collect.ArrayTable: void <init>(com.google.common.collect.Table)>($r0);

        return $r1;
    }

    public static com.google.common.collect.ArrayTable create(java.lang.Iterable, java.lang.Iterable)
    {
        com.google.common.collect.ArrayTable $r2;
        java.lang.Iterable $r0, $r1;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.lang.Iterable;

        $r2 = new com.google.common.collect.ArrayTable;

        specialinvoke $r2.<com.google.common.collect.ArrayTable: void <init>(java.lang.Iterable,java.lang.Iterable)>($r0, $r1);

        return $r2;
    }

    private com.google.common.collect.Table$Cell getCell(int)
    {
        int $i0;
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ArrayTable$2 $r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $i0 := @parameter0: int;

        $r1 = new com.google.common.collect.ArrayTable$2;

        specialinvoke $r1.<com.google.common.collect.ArrayTable$2: void <init>(com.google.common.collect.ArrayTable,int)>(r0, $i0);

        return $r1;
    }

    private java.lang.Object getValue(int)
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableList $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.ArrayTable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        $i1 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        $i1 = $i0 / $i1;

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        $i2 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        $i0 = $i0 % $i2;

        $r2 = virtualinvoke r0.<com.google.common.collect.ArrayTable: java.lang.Object at(int,int)>($i1, $i0);

        return $r2;
    }

    public java.lang.Object at(int, int)
    {
        java.lang.Object[] $r3;
        java.lang.Object[][] $r2;
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableList $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r4;

        r0 := @this: com.google.common.collect.ArrayTable;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        $i2 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i1, $i2);

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        $i2 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i0, $i2);

        $r2 = r0.<com.google.common.collect.ArrayTable: java.lang.Object[][] array>;

        $r3 = $r2[$i1];

        $r4 = $r3[$i0];

        return $r4;
    }

    public java.util.Iterator cellIterator()
    {
        int $i0;
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ArrayTable$1 $r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = new com.google.common.collect.ArrayTable$1;

        $i0 = virtualinvoke r0.<com.google.common.collect.ArrayTable: int size()>();

        specialinvoke $r1.<com.google.common.collect.ArrayTable$1: void <init>(com.google.common.collect.ArrayTable,int)>(r0, $i0);

        return $r1;
    }

    public java.util.Set cellSet()
    {
        java.util.Set $r1;
        com.google.common.collect.ArrayTable r0;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.util.Set cellSet()>();

        return $r1;
    }

    public java.util.Spliterator cellSpliterator()
    {
        com.google.common.collect.ArrayTable r0;
        int $i0;
        c.i.b.c.u $r1;
        java.util.Spliterator $r2;

        r0 := @this: com.google.common.collect.ArrayTable;

        $i0 = virtualinvoke r0.<com.google.common.collect.ArrayTable: int size()>();

        $r1 = new c.i.b.c.u;

        specialinvoke $r1.<c.i.b.c.u: void <init>(com.google.common.collect.ArrayTable)>(r0);

        $r2 = staticinvoke <com.google.common.collect.CollectSpliterators: java.util.Spliterator indexed(int,int,java.util.function.IntFunction)>($i0, 273, $r1);

        return $r2;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r1;
        com.google.common.collect.ArrayTable r0;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.Map column(java.lang.Object)
    {
        com.google.common.collect.ArrayTable$Column $r4;
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableMap $r2;
        int $i0;
        java.lang.Object $r1;
        java.lang.Integer $r3;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.lang.Integer) $r1;

        if $r3 != null goto label1;

        $r2 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        return $r2;

     label1:
        $r4 = new com.google.common.collect.ArrayTable$Column;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        specialinvoke $r4.<com.google.common.collect.ArrayTable$Column: void <init>(com.google.common.collect.ArrayTable,int)>(r0, $i0);

        return $r4;
    }

    public com.google.common.collect.ImmutableList columnKeyList()
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableList r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        return r1;
    }

    public com.google.common.collect.ImmutableSet columnKeySet()
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap $r2;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r2 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r1;
    }

    public volatile java.util.Set columnKeySet()
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableSet $r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableSet columnKeySet()>();

        return $r1;
    }

    public java.util.Map columnMap()
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ArrayTable$ColumnMap $r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ArrayTable$ColumnMap columnMap>;

        if $r1 != null goto label1;

        $r1 = new com.google.common.collect.ArrayTable$ColumnMap;

        specialinvoke $r1.<com.google.common.collect.ArrayTable$ColumnMap: void <init>(com.google.common.collect.ArrayTable,com.google.common.collect.ArrayTable$1)>(r0, null);

        r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ArrayTable$ColumnMap columnMap> = $r1;

     label1:
        return $r1;
    }

    public boolean contains(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ArrayTable r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.ArrayTable: boolean containsRow(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<com.google.common.collect.ArrayTable: boolean containsColumn(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsColumn(java.lang.Object)
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableMap $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        $z0 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public boolean containsRow(java.lang.Object)
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableMap $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        $z0 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.Object[] $r2;
        java.lang.Object[][] $r1;
        com.google.common.collect.ArrayTable r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r3 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.ArrayTable: java.lang.Object[][] array>;

        $i0 = lengthof $r1;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label5;

        $r2 = $r1[$i2];

        $i1 = lengthof $r2;

        $i3 = 0;

     label2:
        if $i3 >= $i1 goto label4;

        $r4 = $r2[$i3];

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $i3 = $i3 + 1;

        goto label2;

     label4:
        $i2 = $i2 + 1;

        goto label1;

     label5:
        return 0;
    }

    public volatile boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ArrayTable r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractTable: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public java.lang.Object erase(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r3;
        java.lang.Integer $r4, $r5;
        com.google.common.collect.ArrayTable r0;
        int $i0, $i1;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        $r1 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.Integer) $r1;

        $r3 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        $r1 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (java.lang.Integer) $r1;

        if $r4 == null goto label2;

        if $r5 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r1 = virtualinvoke r0.<com.google.common.collect.ArrayTable: java.lang.Object set(int,int,java.lang.Object)>($i0, $i1, null);

        return $r1;

     label2:
        return null;
    }

    public void eraseAll()
    {
        java.lang.Object[][] $r1;
        com.google.common.collect.ArrayTable r0;
        java.lang.Object[] $r2;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = r0.<com.google.common.collect.ArrayTable: java.lang.Object[][] array>;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r1[$i1];

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r2, null);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r3;
        java.lang.Integer $r4, $r5;
        com.google.common.collect.ArrayTable r0;
        int $i0, $i1;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        $r1 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.Integer) $r1;

        $r3 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        $r1 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (java.lang.Integer) $r1;

        if $r4 == null goto label2;

        if $r5 != null goto label1;

        goto label2;

     label1:
        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r1 = virtualinvoke r0.<com.google.common.collect.ArrayTable: java.lang.Object at(int,int)>($i0, $i1);

        return $r1;

     label2:
        return null;
    }

    public volatile int hashCode()
    {
        int $i0;
        com.google.common.collect.ArrayTable r0;

        r0 := @this: com.google.common.collect.ArrayTable;

        $i0 = specialinvoke r0.<com.google.common.collect.AbstractTable: int hashCode()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableList $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        $z0 = virtualinvoke $r1.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        $z0 = virtualinvoke $r1.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r5;
        java.lang.Integer $r7, $r8;
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableList $r2;
        int $i0, $i1;
        java.lang.Object $r1, $r3, $r4, $r6;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r3 := @parameter0: java.lang.Object;

        $r4 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r5 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        $r6 = virtualinvoke $r5.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r3);

        $r7 = (java.lang.Integer) $r6;

        $z0 = 1;

        if $r7 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r2 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z1, "Row %s not in %s", $r3, $r2);

        $r5 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap columnKeyToIndex>;

        $r3 = virtualinvoke $r5.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r4);

        $r8 = (java.lang.Integer) $r3;

        if $r8 == null goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $r2 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "Column %s not in %s", $r4, $r2);

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r3 = virtualinvoke r0.<com.google.common.collect.ArrayTable: java.lang.Object set(int,int,java.lang.Object)>($i0, $i1, $r1);

        return $r3;
    }

    public void putAll(com.google.common.collect.Table)
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.Table $r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 := @parameter0: com.google.common.collect.Table;

        specialinvoke r0.<com.google.common.collect.AbstractTable: void putAll(com.google.common.collect.Table)>($r1);

        return;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        com.google.common.collect.ArrayTable r0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.util.Map row(java.lang.Object)
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableMap $r2;
        int $i0;
        com.google.common.collect.ArrayTable$Row $r4;
        java.lang.Object $r1;
        java.lang.Integer $r3;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.lang.Integer) $r1;

        if $r3 != null goto label1;

        $r2 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        return $r2;

     label1:
        $r4 = new com.google.common.collect.ArrayTable$Row;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        specialinvoke $r4.<com.google.common.collect.ArrayTable$Row: void <init>(com.google.common.collect.ArrayTable,int)>(r0, $i0);

        return $r4;
    }

    public com.google.common.collect.ImmutableList rowKeyList()
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableList r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        return r1;
    }

    public com.google.common.collect.ImmutableSet rowKeySet()
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap $r2;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r2 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableMap rowKeyToIndex>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r1;
    }

    public volatile java.util.Set rowKeySet()
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableSet $r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableSet rowKeySet()>();

        return $r1;
    }

    public java.util.Map rowMap()
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ArrayTable$RowMap $r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ArrayTable$RowMap rowMap>;

        if $r1 != null goto label1;

        $r1 = new com.google.common.collect.ArrayTable$RowMap;

        specialinvoke $r1.<com.google.common.collect.ArrayTable$RowMap: void <init>(com.google.common.collect.ArrayTable,com.google.common.collect.ArrayTable$1)>(r0, null);

        r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ArrayTable$RowMap rowMap> = $r1;

     label1:
        return $r1;
    }

    public java.lang.Object set(int, int, java.lang.Object)
    {
        java.lang.Object[] $r4;
        java.lang.Object[][] $r3;
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableList $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r1, $r5;

        r0 := @this: com.google.common.collect.ArrayTable;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Object;

        $r2 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        $i2 = virtualinvoke $r2.<java.util.AbstractCollection: int size()>();

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i1, $i2);

        $r2 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        $i2 = virtualinvoke $r2.<java.util.AbstractCollection: int size()>();

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i0, $i2);

        $r3 = r0.<com.google.common.collect.ArrayTable: java.lang.Object[][] array>;

        $r4 = $r3[$i1];

        $r5 = $r4[$i0];

        $r4 = $r3[$i1];

        $r4[$i0] = $r1;

        return $r5;
    }

    public int size()
    {
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableList $r1;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        $i0 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        $r1 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        $i1 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        $i0 = $i0 * $i1;

        return $i0;
    }

    public java.lang.Object[][] toArray(java.lang.Class)
    {
        java.lang.Object[] $r1, $r8, $r9;
        java.lang.Object[][] $r6, $r7;
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ImmutableList $r4;
        int[] $r3;
        int $i0, $i1;
        java.lang.Class $r2;
        java.lang.Object $r5;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r2 := @parameter0: java.lang.Class;

        $r3 = newarray (int)[2];

        $r4 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        $i0 = virtualinvoke $r4.<java.util.AbstractCollection: int size()>();

        $r3[0] = $i0;

        $r4 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList columnList>;

        $i0 = virtualinvoke $r4.<java.util.AbstractCollection: int size()>();

        $r3[1] = $i0;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r3);

        $r6 = (java.lang.Object[][]) $r5;

        $i0 = 0;

     label1:
        $r4 = r0.<com.google.common.collect.ArrayTable: com.google.common.collect.ImmutableList rowList>;

        $i1 = virtualinvoke $r4.<java.util.AbstractCollection: int size()>();

        if $i0 >= $i1 goto label2;

        $r7 = r0.<com.google.common.collect.ArrayTable: java.lang.Object[][] array>;

        $r8 = $r7[$i0];

        $r1 = $r6[$i0];

        $r9 = $r7[$i0];

        $i1 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r1, 0, $i1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r6;
    }

    public volatile java.lang.String toString()
    {
        com.google.common.collect.ArrayTable r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.lang.String toString()>();

        return $r1;
    }

    public java.util.Collection values()
    {
        com.google.common.collect.ArrayTable r0;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.util.Collection values()>();

        return $r1;
    }

    public java.util.Iterator valuesIterator()
    {
        int $i0;
        com.google.common.collect.ArrayTable r0;
        com.google.common.collect.ArrayTable$3 $r1;

        r0 := @this: com.google.common.collect.ArrayTable;

        $r1 = new com.google.common.collect.ArrayTable$3;

        $i0 = virtualinvoke r0.<com.google.common.collect.ArrayTable: int size()>();

        specialinvoke $r1.<com.google.common.collect.ArrayTable$3: void <init>(com.google.common.collect.ArrayTable,int)>(r0, $i0);

        return $r1;
    }

    public java.util.Spliterator valuesSpliterator()
    {
        com.google.common.collect.ArrayTable r0;
        int $i0;
        c.i.b.c.v $r1;
        java.util.Spliterator $r2;

        r0 := @this: com.google.common.collect.ArrayTable;

        $i0 = virtualinvoke r0.<com.google.common.collect.ArrayTable: int size()>();

        $r1 = new c.i.b.c.v;

        specialinvoke $r1.<c.i.b.c.v: void <init>(com.google.common.collect.ArrayTable)>(r0);

        $r2 = staticinvoke <com.google.common.collect.CollectSpliterators: java.util.Spliterator indexed(int,int,java.util.function.IntFunction)>($i0, 16, $r1);

        return $r2;
    }
}
