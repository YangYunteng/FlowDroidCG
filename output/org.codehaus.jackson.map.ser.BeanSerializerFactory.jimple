public class org.codehaus.jackson.map.ser.BeanSerializerFactory extends org.codehaus.jackson.map.ser.BasicSerializerFactory
{
    public static final org.codehaus.jackson.map.ser.BeanSerializerFactory instance;
    public final org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig;

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.BeanSerializerFactory $r0;

        $r0 = new org.codehaus.jackson.map.ser.BeanSerializerFactory;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: void <init>(org.codehaus.jackson.map.SerializerFactory$Config)>(null);

        <org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.BeanSerializerFactory instance> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        specialinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: void <init>(org.codehaus.jackson.map.SerializerFactory$Config)>(null);

        return;
    }

    public void <init>(org.codehaus.jackson.map.SerializerFactory$Config)
    {
        org.codehaus.jackson.map.ser.BeanSerializerFactory$ConfigImpl $r2;
        org.codehaus.jackson.map.SerializerFactory$Config $r1;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerFactory$Config;

        specialinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new org.codehaus.jackson.map.ser.BeanSerializerFactory$ConfigImpl;

        $r1 = $r2;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.BeanSerializerFactory$ConfigImpl: void <init>()>();

     label1:
        r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig> = $r1;

        return;
    }

    public org.codehaus.jackson.map.ser.BeanPropertyWriter _constructWriter(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.TypeBindings, org.codehaus.jackson.map.ser.PropertyBuilder, boolean, java.lang.String, org.codehaus.jackson.map.introspect.AnnotatedMember)
    {
        org.codehaus.jackson.map.type.TypeBindings $r5;
        org.codehaus.jackson.map.ser.PropertyBuilder $r1;
        org.codehaus.jackson.map.SerializationConfig $r4;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r3;
        org.codehaus.jackson.map.util.Annotations $r9;
        org.codehaus.jackson.map.TypeSerializer $r11, $r13;
        org.codehaus.jackson.type.JavaType $r7;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r14;
        java.lang.String $r2;
        boolean $z0, $z1;
        java.lang.Class[] $r16;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.JsonSerializer $r10;
        org.codehaus.jackson.map.AnnotationIntrospector $r15;
        java.lang.Class $r12;
        org.codehaus.jackson.map.BeanProperty$Std $r8;
        org.codehaus.jackson.map.SerializationConfig$Feature $r6;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r4 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r5 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r1 := @parameter2: org.codehaus.jackson.map.ser.PropertyBuilder;

        $z0 := @parameter3: boolean;

        $r2 := @parameter4: java.lang.String;

        $r3 := @parameter5: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r6 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z1 = virtualinvoke $r4.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r6);

        if $z1 == 0 goto label1;

        virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMember: void fixAccess()>();

     label1:
        $r7 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.Annotated: org.codehaus.jackson.type.JavaType getType(org.codehaus.jackson.map.type.TypeBindings)>($r5);

        $r8 = new org.codehaus.jackson.map.BeanProperty$Std;

        $r9 = virtualinvoke $r1.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.util.Annotations getClassAnnotations()>();

        specialinvoke $r8.<org.codehaus.jackson.map.BeanProperty$Std: void <init>(java.lang.String,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.util.Annotations,org.codehaus.jackson.map.introspect.AnnotatedMember)>($r2, $r7, $r9, $r3);

        $r10 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerFromAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r4, $r3, $r8);

        $r11 = null;

        $r12 = virtualinvoke $r7.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: boolean isCollectionMapOrArray(java.lang.Class)>($r12);

        if $z1 == 0 goto label2;

        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.TypeSerializer findPropertyContentTypeSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.BeanProperty)>($r7, $r4, $r3, $r8);

     label2:
        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.TypeSerializer findPropertyTypeSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.BeanProperty)>($r7, $r4, $r3, $r8);

        $r14 = virtualinvoke $r1.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.ser.BeanPropertyWriter buildWriter(java.lang.String,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.introspect.AnnotatedMember,boolean)>($r2, $r7, $r10, $r13, $r11, $r3, $z0);

        $r15 = virtualinvoke $r4.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r16 = virtualinvoke $r15.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class[] findSerializationViews(org.codehaus.jackson.map.introspect.Annotated)>($r3);

        virtualinvoke $r14.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void setViews(java.lang.Class[])>($r16);

        return $r14;
    }

    public java.util.List _sortBeanProperties(java.util.List, java.util.List, java.lang.String[], boolean)
    {
        java.lang.String[] $r3;
        java.util.ArrayList $r13;
        java.util.LinkedHashMap $r9, $r12;
        int $i0, $i1;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r7;
        java.lang.String $r8;
        boolean $z0;
        java.util.Iterator $r5;
        java.util.Collection $r10;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        java.util.List $r1, $r2;
        java.util.AbstractMap $r4;
        java.util.TreeMap $r11;
        java.lang.Object $r6;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: java.lang.String[];

        $z0 := @parameter3: boolean;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $z0 == 0 goto label1;

        $r11 = new java.util.TreeMap;

        $r4 = $r11;

        specialinvoke $r11.<java.util.TreeMap: void <init>()>();

        goto label2;

     label1:
        $r9 = new java.util.LinkedHashMap;

        $r4 = $r9;

        $i1 = $i0 * 2;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>(int)>($i1);

     label2:
        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.codehaus.jackson.map.ser.BeanPropertyWriter) $r6;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        goto label3;

     label4:
        $r12 = new java.util.LinkedHashMap;

        $r9 = $r12;

        $i0 = $i0 * 2;

        specialinvoke $r12.<java.util.LinkedHashMap: void <init>(int)>($i0);

        if $r3 == null goto label7;

        $i0 = lengthof $r3;

        $i1 = 0;

     label5:
        if $i1 >= $i0 goto label7;

        $r8 = $r3[$i1];

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r7 = (org.codehaus.jackson.map.ser.BeanPropertyWriter) $r6;

        if $r7 == null goto label6;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

     label6:
        $i1 = $i1 + 1;

        goto label5;

     label7:
        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label8:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r6;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r7 = (org.codehaus.jackson.map.ser.BeanPropertyWriter) $r6;

        if $r7 == null goto label8;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        goto label8;

     label9:
        interfaceinvoke $r9.<java.util.Map: void putAll(java.util.Map)>($r4);

        $r13 = new java.util.ArrayList;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        return $r13;
    }

    public org.codehaus.jackson.map.JsonSerializer constructBeanSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        org.codehaus.jackson.map.SerializerFactory$Config $r10;
        org.codehaus.jackson.map.type.TypeBindings $r16;
        org.codehaus.jackson.map.ser.BeanSerializerModifier $r14;
        org.codehaus.jackson.map.SerializationConfig $r1;
        java.lang.Iterable $r11;
        java.util.ArrayList $r23;
        org.codehaus.jackson.map.ser.BeanSerializer $r15;
        org.codehaus.jackson.map.TypeSerializer $r20;
        int $i0;
        org.codehaus.jackson.type.JavaType $r17, $r19;
        boolean $z0;
        org.codehaus.jackson.map.ser.BeanSerializerBuilder $r5, $r6;
        java.util.Iterator $r12;
        org.codehaus.jackson.map.ser.AnyGetterWriter $r24;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r9;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.JsonSerializer $r22;
        java.lang.IllegalArgumentException $r25;
        org.codehaus.jackson.map.BeanProperty $r3;
        java.util.List $r7, $r8;
        java.lang.Class $r4;
        java.lang.Object $r13;
        org.codehaus.jackson.map.ser.MapSerializer $r21;
        org.codehaus.jackson.map.SerializationConfig$Feature $r18;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.BeanDescription: java.lang.Class getBeanClass()>();

        if $r4 == class "Ljava/lang/Object;" goto label14;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.BeanSerializerBuilder constructBeanSerializerBuilder(org.codehaus.jackson.map.introspect.BasicBeanDescription)>($r2);

        $r6 = $r5;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: java.util.List findBeanProperties(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>($r1, $r2);

        $r8 = $r7;

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod findAnyGetter()>();

        $r10 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $z0 = virtualinvoke $r10.<org.codehaus.jackson.map.SerializerFactory$Config: boolean hasSerializerModifiers()>();

        if $z0 == 0 goto label03;

        if $r7 != null goto label01;

        $r23 = new java.util.ArrayList;

        $r8 = $r23;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

     label01:
        $r10 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializerModifiers()>();

        $r12 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (org.codehaus.jackson.map.ser.BeanSerializerModifier) $r13;

        $r8 = virtualinvoke $r14.<org.codehaus.jackson.map.ser.BeanSerializerModifier: java.util.List changeProperties(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.List)>($r1, $r2, $r8);

        goto label02;

     label03:
        if $r8 == null goto label05;

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i0 != 0 goto label04;

        goto label05;

     label04:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: java.util.List filterBeanProperties(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.List)>($r1, $r2, $r8);

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: java.util.List sortBeanProperties(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.List)>($r1, $r2, $r7);

        goto label08;

     label05:
        if $r9 != null goto label07;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: boolean hasKnownClassAnnotations()>();

        if $z0 == 0 goto label06;

        $r15 = virtualinvoke $r5.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: org.codehaus.jackson.map.ser.BeanSerializer createDummy()>();

        return $r15;

     label06:
        return null;

     label07:
        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label08:
        $r10 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $z0 = virtualinvoke $r10.<org.codehaus.jackson.map.SerializerFactory$Config: boolean hasSerializerModifiers()>();

        if $z0 == 0 goto label10;

        $r10 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializerModifiers()>();

        $r12 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (org.codehaus.jackson.map.ser.BeanSerializerModifier) $r13;

        $r7 = virtualinvoke $r14.<org.codehaus.jackson.map.ser.BeanSerializerModifier: java.util.List orderProperties(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.List)>($r1, $r2, $r7);

        goto label09;

     label10:
        virtualinvoke $r5.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: void setProperties(java.util.List)>($r7);

        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: java.lang.Object findFilterId(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>($r1, $r2);

        virtualinvoke $r5.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: void setFilterId(java.lang.Object)>($r13);

        if $r9 == null goto label11;

        $r16 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings bindingsForBeanType()>();

        $r17 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.AnnotatedMethod: org.codehaus.jackson.type.JavaType getType(org.codehaus.jackson.map.type.TypeBindings)>($r16);

        $r18 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_STATIC_TYPING>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r18);

        $r19 = virtualinvoke $r17.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r20 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r19, $r3);

        $r21 = staticinvoke <org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.ser.MapSerializer construct(java.lang.String[],org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.JsonSerializer)>(null, $r17, $z0, $r20, $r3, null, null);

        $r24 = new org.codehaus.jackson.map.ser.AnyGetterWriter;

        specialinvoke $r24.<org.codehaus.jackson.map.ser.AnyGetterWriter: void <init>(org.codehaus.jackson.map.introspect.AnnotatedMethod,org.codehaus.jackson.map.ser.MapSerializer)>($r9, $r21);

        virtualinvoke $r5.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: void setAnyGetter(org.codehaus.jackson.map.ser.AnyGetterWriter)>($r24);

     label11:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: void processViews(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.ser.BeanSerializerBuilder)>($r1, $r5);

        $r10 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $z0 = virtualinvoke $r10.<org.codehaus.jackson.map.SerializerFactory$Config: boolean hasSerializerModifiers()>();

        if $z0 == 0 goto label13;

        $r10 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializerModifiers()>();

        $r12 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (org.codehaus.jackson.map.ser.BeanSerializerModifier) $r13;

        $r6 = virtualinvoke $r14.<org.codehaus.jackson.map.ser.BeanSerializerModifier: org.codehaus.jackson.map.ser.BeanSerializerBuilder updateBuilder(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.ser.BeanSerializerBuilder)>($r1, $r2, $r6);

        goto label12;

     label13:
        $r22 = virtualinvoke $r6.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: org.codehaus.jackson.map.JsonSerializer build()>();

        return $r22;

     label14:
        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not create bean serializer for Object.class");

        goto label15;

     label15:
        throw $r25;
    }

    public org.codehaus.jackson.map.ser.BeanSerializerBuilder constructBeanSerializerBuilder(org.codehaus.jackson.map.introspect.BasicBeanDescription)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r1;
        org.codehaus.jackson.map.ser.BeanSerializerBuilder $r2;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 = new org.codehaus.jackson.map.ser.BeanSerializerBuilder;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: void <init>(org.codehaus.jackson.map.introspect.BasicBeanDescription)>($r1);

        return $r2;
    }

    public org.codehaus.jackson.map.ser.BeanPropertyWriter constructFilteredBeanWriter(org.codehaus.jackson.map.ser.BeanPropertyWriter, java.lang.Class[])
    {
        java.lang.Class[] $r1;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r2;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r2 := @parameter0: org.codehaus.jackson.map.ser.BeanPropertyWriter;

        $r1 := @parameter1: java.lang.Class[];

        $r2 = staticinvoke <org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter: org.codehaus.jackson.map.ser.BeanPropertyWriter constructViewBased(org.codehaus.jackson.map.ser.BeanPropertyWriter,java.lang.Class[])>($r2, $r1);

        return $r2;
    }

    public org.codehaus.jackson.map.ser.PropertyBuilder constructPropertyBuilder(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.ser.PropertyBuilder $r3;
        org.codehaus.jackson.map.SerializationConfig $r1;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 = new org.codehaus.jackson.map.ser.PropertyBuilder;

        specialinvoke $r3.<org.codehaus.jackson.map.ser.PropertyBuilder: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>($r1, $r2);

        return $r3;
    }

    public org.codehaus.jackson.map.JsonSerializer createKeySerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        java.util.Iterator $r10;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r8;
        org.codehaus.jackson.map.SerializerFactory$Config $r4;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.JsonSerializer $r5, $r13;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.BeanProperty $r3;
        java.lang.Iterable $r9;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r6;
        java.lang.Object $r11;
        org.codehaus.jackson.map.BeanDescription $r7;
        org.codehaus.jackson.map.Serializers $r12;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.map.SerializerFactory$Config: boolean hasKeySerializers()>();

        $r5 = null;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r6 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r6);

        $r8 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r7;

        $r4 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r9 = virtualinvoke $r4.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable keySerializers()>();

        $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (org.codehaus.jackson.map.Serializers) $r11;

        $r13 = interfaceinvoke $r12.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r8, $r3);

        $r5 = $r13;

        if $r13 == null goto label2;

        return $r13;

     label3:
        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer createSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r5;
        org.codehaus.jackson.map.SerializerFactory$Config $r9;
        org.codehaus.jackson.map.SerializationConfig $r2;
        java.lang.Iterable $r10;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r6;
        org.codehaus.jackson.type.JavaType $r3, $r8;
        org.codehaus.jackson.map.Serializers $r13;
        boolean $z0, $z1;
        java.util.Iterator $r11;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.JsonSerializer $r7;
        org.codehaus.jackson.map.BeanProperty $r1;
        java.lang.Object $r12;
        org.codehaus.jackson.map.BeanDescription $r4;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.BeanDescription introspect(org.codehaus.jackson.type.JavaType)>($r3);

        $r5 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r4;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerFromAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r2, $r6, $r1);

        if $r7 == null goto label1;

        return $r7;

     label1:
        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>($r2, $r6, $r3);

        if $r8 == $r3 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $z1 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z1 == 0 goto label4;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildContainerSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>($r2, $r8, $r5, $r1, $z0);

        return $r7;

     label4:
        $r9 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializers()>();

        $r11 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (org.codehaus.jackson.map.Serializers) $r12;

        $r7 = interfaceinvoke $r13.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r8, $r5, $r1);

        if $r7 == null goto label5;

        return $r7;

     label6:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByLookup(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>($r8, $r2, $r5, $r1, $z0);

        if $r7 == null goto label7;

        return $r7;

     label7:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByPrimaryType(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>($r8, $r2, $r5, $r1, $z0);

        if $r7 == null goto label8;

        return $r7;

     label8:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.JsonSerializer findBeanSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r8, $r5, $r1);

        if $r7 != null goto label9;

        $r7 = specialinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByAddonType(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>($r2, $r8, $r5, $r1, $z0);

     label9:
        return $r7;
    }

    public java.lang.Iterable customSerializers()
    {
        org.codehaus.jackson.map.SerializerFactory$Config $r2;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        java.lang.Iterable $r1;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r2 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializers()>();

        return $r1;
    }

    public java.util.List filterBeanProperties(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, java.util.List)
    {
        java.util.Iterator $r8;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        java.lang.String[] $r6;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        java.util.HashSet $r7;
        java.util.List $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5;
        int $i0;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r10;
        java.lang.Object $r9;
        java.lang.String $r11;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter2: java.util.List;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r6 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String[] findPropertiesToIgnore(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r5);

        if $r6 == null goto label2;

        $i0 = lengthof $r6;

        if $i0 <= 0 goto label2;

        $r7 = staticinvoke <org.codehaus.jackson.map.util.ArrayBuilders: java.util.HashSet arrayToSet(java.lang.Object[])>($r6);

        $r8 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.codehaus.jackson.map.ser.BeanPropertyWriter) $r9;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

        $z0 = virtualinvoke $r7.<java.util.HashSet: boolean contains(java.lang.Object)>($r11);

        if $z0 == 0 goto label1;

        interfaceinvoke $r8.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return $r1;
    }

    public java.util.List findBeanProperties(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.type.TypeBindings $r14;
        org.codehaus.jackson.map.ser.PropertyBuilder $r13;
        org.codehaus.jackson.map.SerializationConfig $r1;
        java.util.ArrayList $r2;
        java.util.LinkedHashMap $r10, $r12;
        org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty $r19;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r18;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r9;
        int $i0;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r21;
        java.lang.String $r20;
        boolean $z0, $z1;
        java.util.Map$Entry $r17;
        java.util.Iterator $r15;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r7;
        java.util.Set $r11;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r8;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r4, $r5;
        java.lang.Object $r16;
        org.codehaus.jackson.map.SerializationConfig$Feature $r6;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.introspect.VisibilityChecker getDefaultVisibilityChecker()>();

        $r5 = $r4;

        $r6 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_GETTERS>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r6);

        if $z0 != 0 goto label01;

        $r7 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

        $r5 = interfaceinvoke $r4.<org.codehaus.jackson.map.introspect.VisibilityChecker: org.codehaus.jackson.map.introspect.VisibilityChecker withGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r7);

     label01:
        $r6 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_IS_GETTERS>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r6);

        if $z0 != 0 goto label02;

        $r7 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

        $r5 = interfaceinvoke $r5.<org.codehaus.jackson.map.introspect.VisibilityChecker: org.codehaus.jackson.map.introspect.VisibilityChecker withIsGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r7);

     label02:
        $r6 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature AUTO_DETECT_FIELDS>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r6);

        if $z0 != 0 goto label03;

        $r7 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

        $r5 = interfaceinvoke $r5.<org.codehaus.jackson.map.introspect.VisibilityChecker: org.codehaus.jackson.map.introspect.VisibilityChecker withFieldVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r7);

     label03:
        $r8 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r9 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r4 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.introspect.VisibilityChecker findAutoDetectVisibility(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.introspect.VisibilityChecker)>($r9, $r5);

        $r10 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.LinkedHashMap findGetters(org.codehaus.jackson.map.introspect.VisibilityChecker,java.util.Collection)>($r4, null);

        $r11 = virtualinvoke $r10.<java.util.LinkedHashMap: java.util.Set keySet()>();

        $r12 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.LinkedHashMap findSerializableFields(org.codehaus.jackson.map.introspect.VisibilityChecker,java.util.Collection)>($r4, $r11);

        virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: void removeIgnorableTypes(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.Map)>($r1, $r3, $r10);

        virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: void removeIgnorableTypes(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.util.Map)>($r1, $r3, $r12);

        $z0 = virtualinvoke $r10.<java.util.LinkedHashMap: boolean isEmpty()>();

        if $z0 == 0 goto label04;

        $z0 = virtualinvoke $r12.<java.util.LinkedHashMap: boolean isEmpty()>();

        if $z0 == 0 goto label04;

        return null;

     label04:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r1, $r3, null, null);

        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.PropertyBuilder constructPropertyBuilder(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>($r1, $r3);

        $r2 = new java.util.ArrayList;

        $i0 = virtualinvoke $r10.<java.util.LinkedHashMap: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        $r14 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings bindingsForBeanType()>();

        $r11 = virtualinvoke $r12.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r15 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (java.util.Map$Entry) $r16;

        $r16 = interfaceinvoke $r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = (org.codehaus.jackson.map.introspect.AnnotatedMember) $r16;

        $r19 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty findReferenceType(org.codehaus.jackson.map.introspect.AnnotatedMember)>($r18);

        if $r19 == null goto label06;

        $z1 = virtualinvoke $r19.<org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: boolean isBackReference()>();

        if $z1 == 0 goto label06;

        goto label05;

     label06:
        $r16 = interfaceinvoke $r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (java.lang.String) $r16;

        $r16 = interfaceinvoke $r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = (org.codehaus.jackson.map.introspect.AnnotatedMember) $r16;

        $r21 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.BeanPropertyWriter _constructWriter(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.TypeBindings,org.codehaus.jackson.map.ser.PropertyBuilder,boolean,java.lang.String,org.codehaus.jackson.map.introspect.AnnotatedMember)>($r1, $r14, $r13, $z0, $r20, $r18);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

        goto label05;

     label07:
        $r11 = virtualinvoke $r10.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r15 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (java.util.Map$Entry) $r16;

        $r16 = interfaceinvoke $r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = (org.codehaus.jackson.map.introspect.AnnotatedMember) $r16;

        $r19 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty findReferenceType(org.codehaus.jackson.map.introspect.AnnotatedMember)>($r18);

        if $r19 == null goto label09;

        $z1 = virtualinvoke $r19.<org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: boolean isBackReference()>();

        if $z1 == 0 goto label09;

        goto label08;

     label09:
        $r16 = interfaceinvoke $r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (java.lang.String) $r16;

        $r16 = interfaceinvoke $r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = (org.codehaus.jackson.map.introspect.AnnotatedMember) $r16;

        $r21 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.BeanPropertyWriter _constructWriter(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.TypeBindings,org.codehaus.jackson.map.ser.PropertyBuilder,boolean,java.lang.String,org.codehaus.jackson.map.introspect.AnnotatedMember)>($r1, $r14, $r13, $z0, $r20, $r18);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

        goto label08;

     label10:
        return $r2;
    }

    public org.codehaus.jackson.map.JsonSerializer findBeanSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        java.util.Iterator $r10;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r1;
        org.codehaus.jackson.map.SerializerFactory$Config $r8;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.JsonSerializer $r6, $r7;
        org.codehaus.jackson.map.ser.BeanSerializerModifier $r12;
        org.codehaus.jackson.map.SerializationConfig $r2;
        org.codehaus.jackson.map.BeanProperty $r4;
        java.lang.Iterable $r9;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r5;
        java.lang.Object $r11;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: boolean isPotentialBeanType(java.lang.Class)>($r5);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.JsonSerializer constructBeanSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r4);

        $r7 = $r6;

        $r8 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $z0 = virtualinvoke $r8.<org.codehaus.jackson.map.SerializerFactory$Config: boolean hasSerializerModifiers()>();

        if $z0 == 0 goto label3;

        $r8 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.SerializerFactory$Config: java.lang.Iterable serializerModifiers()>();

        $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (org.codehaus.jackson.map.ser.BeanSerializerModifier) $r11;

        $r7 = virtualinvoke $r12.<org.codehaus.jackson.map.ser.BeanSerializerModifier: org.codehaus.jackson.map.JsonSerializer modifySerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.JsonSerializer)>($r2, $r1, $r7);

        goto label2;

     label3:
        return $r6;

     label4:
        return $r7;
    }

    public java.lang.Object findFilterId(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass $r4;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        java.lang.Object $r5;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r3;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Object findFilterId(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r4);

        return $r5;
    }

    public org.codehaus.jackson.map.TypeSerializer findPropertyContentTypeSerializer(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r9;
        java.util.Collection $r10;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r4;
        org.codehaus.jackson.map.TypeSerializer $r8;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r7;
        org.codehaus.jackson.type.JavaType $r3, $r5;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r3 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter1: org.codehaus.jackson.map.SerializationConfig;

        $r4 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r2 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyContentTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.type.JavaType)>($r1, $r4, $r3);

        if $r7 != null goto label1;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r5, $r2);

        return $r8;

     label1:
        $r9 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>($r4, $r1, $r6);

        $r8 = interfaceinvoke $r7.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>($r1, $r5, $r10, $r2);

        return $r8;
    }

    public org.codehaus.jackson.map.TypeSerializer findPropertyTypeSerializer(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r8;
        java.util.Collection $r9;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r4;
        org.codehaus.jackson.map.TypeSerializer $r7;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r6;
        org.codehaus.jackson.type.JavaType $r3;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r3 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter1: org.codehaus.jackson.map.SerializationConfig;

        $r4 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r2 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.type.JavaType)>($r1, $r4, $r3);

        if $r6 != null goto label1;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r3, $r2);

        return $r7;

     label1:
        $r8 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>($r4, $r1, $r5);

        $r7 = interfaceinvoke $r6.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>($r1, $r3, $r9, $r2);

        return $r7;
    }

    public org.codehaus.jackson.map.SerializerFactory$Config getConfig()
    {
        org.codehaus.jackson.map.SerializerFactory$Config r1;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        r1 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        return r1;
    }

    public boolean isPotentialBeanType(java.lang.Class)
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.String canBeABeanType(java.lang.Class)>($r1);

        if $r2 != null goto label1;

        $z0 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: boolean isProxyType(java.lang.Class)>($r1);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void processViews(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.ser.BeanSerializerBuilder)
    {
        org.codehaus.jackson.map.ser.BeanSerializerBuilder $r1;
        java.lang.Class[] $r8;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r2;
        org.codehaus.jackson.map.SerializationConfig $r3;
        java.util.List $r4;
        int $i0, $i1, $i2;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r7;
        java.lang.Object $r6;
        org.codehaus.jackson.map.SerializationConfig$Feature $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r3 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.ser.BeanSerializerBuilder;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: java.util.List getProperties()>();

        $r5 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature DEFAULT_VIEW_INCLUSION>;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r5);

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r2 = newarray (org.codehaus.jackson.map.ser.BeanPropertyWriter)[$i0];

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        $r7 = (org.codehaus.jackson.map.ser.BeanPropertyWriter) $r6;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.Class[] getViews()>();

        if $r8 != null goto label2;

        if $z0 == 0 goto label3;

        $r2[$i1] = $r7;

        goto label3;

     label2:
        $i2 = $i2 + 1;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.ser.BeanPropertyWriter constructFilteredBeanWriter(org.codehaus.jackson.map.ser.BeanPropertyWriter,java.lang.Class[])>($r7, $r8);

        $r2[$i1] = $r7;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $z0 == 0 goto label5;

        if $i2 != 0 goto label5;

        return;

     label5:
        virtualinvoke $r1.<org.codehaus.jackson.map.ser.BeanSerializerBuilder: void setFilteredProperties(org.codehaus.jackson.map.ser.BeanPropertyWriter[])>($r2);

        return;
    }

    public void removeIgnorableTypes(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, java.util.Map)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        java.util.HashMap $r2;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r10;
        java.util.Map $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r14;
        java.lang.Boolean $r12, $r15;
        boolean $z0;
        java.util.Map$Entry $r9;
        java.util.Iterator $r7;
        java.util.Set $r6;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        java.lang.Object $r8;
        java.lang.Class $r11;
        org.codehaus.jackson.map.BeanDescription $r13;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter2: java.util.Map;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r6 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.util.Map$Entry) $r8;

        $r8 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.codehaus.jackson.map.introspect.AnnotatedMember) $r8;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.Annotated: java.lang.Class getRawType()>();

        $r8 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r11);

        $r12 = (java.lang.Boolean) $r8;

        if $r12 != null goto label4;

        $r13 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r11);

        $r3 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r13;

        $r14 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r15 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Boolean isIgnorableType(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r14);

        $r12 = $r15;

        if $r15 != null goto label3;

        $r12 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label3:
        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

     label4:
        $z0 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r7.<java.util.Iterator: void remove()>();

        goto label2;

     label5:
        return;
    }

    public java.util.List sortBeanProperties(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, java.util.List)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        java.lang.String[] $r7;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        java.util.List $r3, $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r6;
        java.lang.Boolean $r8;
        org.codehaus.jackson.map.SerializationConfig$Feature $r9;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 := @parameter2: java.util.List;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List findCreatorPropertyNames()>();

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r6 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r7 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String[] findSerializationPropertyOrder(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r6);

        $r8 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Boolean findSerializationSortAlphabetically(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r6);

        if $r8 != null goto label1;

        $r9 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature SORT_PROPERTIES_ALPHABETICALLY>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r9);

        goto label2;

     label1:
        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        if $z0 != 0 goto label3;

        $z1 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        if $r7 == null goto label4;

     label3:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: java.util.List _sortBeanProperties(java.util.List,java.util.List,java.lang.String[],boolean)>($r3, $r4, $r7, $z0);

     label4:
        return $r3;
    }

    public org.codehaus.jackson.map.SerializerFactory withConfig(org.codehaus.jackson.map.SerializerFactory$Config)
    {
        java.lang.IllegalStateException $r4;
        org.codehaus.jackson.map.SerializerFactory$Config $r1, $r2;
        java.lang.Class $r3;
        java.lang.StringBuilder $r5;
        org.codehaus.jackson.map.ser.BeanSerializerFactory r0;
        java.lang.String $r6;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerFactory$Config;

        $r2 = r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: org.codehaus.jackson.map.SerializerFactory$Config _factoryConfig>;

        if $r2 != $r1 goto label1;

        return r0;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != class "Lorg/codehaus/jackson/map/ser/BeanSerializerFactory;" goto label2;

        r0 = new org.codehaus.jackson.map.ser.BeanSerializerFactory;

        specialinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializerFactory: void <init>(org.codehaus.jackson.map.SerializerFactory$Config)>($r1);

        return r0;

     label2:
        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subtype of BeanSerializerFactory (");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") has not properly overridden method \'withAdditionalSerializers\': can not instantiate subtype with ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("additional serializer definitions");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r4;
    }
}
