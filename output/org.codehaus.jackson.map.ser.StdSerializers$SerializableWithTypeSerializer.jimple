public final class org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer extends org.codehaus.jackson.map.ser.SerializerBase
{
    public static final org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer instance;

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer: org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer instance> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void <init>(java.lang.Class)>(class "Lorg/codehaus/jackson/map/JsonSerializableWithType;");

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        java.lang.IllegalStateException $r16;
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.JsonNode $r14;
        java.lang.String $r4, $r8, $r9, $r10, $r11;
        org.codehaus.jackson.node.ObjectNode $r3;
        boolean $z0;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer r0;
        java.io.IOException $r15, $r17;
        java.lang.reflect.Type $r2;
        java.lang.'annotation'.Annotation $r6;
        java.lang.Class $r5;
        java.lang.Object $r13;
        org.codehaus.jackson.schema.JsonSerializableSchema $r7;
        org.codehaus.jackson.map.ObjectMapper $r12;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createObjectNode()>();

        $r4 = null;

        if $r2 == null goto label03;

        $r5 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: java.lang.Class rawClass(java.lang.reflect.Type)>($r2);

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/codehaus/jackson/schema/JsonSerializableSchema;");

        if $z0 == 0 goto label03;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/schema/JsonSerializableSchema;");

        $r7 = (org.codehaus.jackson.schema.JsonSerializableSchema) $r6;

        $r8 = interfaceinvoke $r7.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaType()>();

        $r9 = interfaceinvoke $r7.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaObjectPropertiesDefinition()>();

        $r10 = "##irrelevant";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label01;

        $r9 = interfaceinvoke $r7.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaObjectPropertiesDefinition()>();

        goto label02;

     label01:
        $r9 = null;

     label02:
        $r11 = interfaceinvoke $r7.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaItemDefinition()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label04;

        $r4 = interfaceinvoke $r7.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaItemDefinition()>();

        goto label04;

     label03:
        $r8 = "any";

        $r9 = null;

     label04:
        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: void put(java.lang.String,java.lang.String)>("type", $r8);

        if $r9 == null goto label10;

        $r12 = new org.codehaus.jackson.map.ObjectMapper;

     label05:
        specialinvoke $r12.<org.codehaus.jackson.map.ObjectMapper: void <init>()>();

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.map.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>($r9, class "Lorg/codehaus/jackson/JsonNode;");

     label06:
        $r14 = (org.codehaus.jackson.JsonNode) $r13;

     label07:
        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("properties", $r14);

     label08:
        goto label10;

     label09:
        $r15 := @caughtexception;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label10:
        if $r4 == null goto label16;

        $r12 = new org.codehaus.jackson.map.ObjectMapper;

     label11:
        specialinvoke $r12.<org.codehaus.jackson.map.ObjectMapper: void <init>()>();

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.map.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>($r4, class "Lorg/codehaus/jackson/JsonNode;");

     label12:
        $r14 = (org.codehaus.jackson.JsonNode) $r13;

     label13:
        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r14);

     label14:
        return $r3;

     label15:
        $r17 := @caughtexception;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r17);

        throw $r16;

     label16:
        return $r3;

        catch java.io.IOException from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label11 to label12 with label15;
        catch java.io.IOException from label13 to label14 with label15;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.JsonSerializableWithType $r4;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (org.codehaus.jackson.map.JsonSerializableWithType) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer: void serialize(org.codehaus.jackson.map.JsonSerializableWithType,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serialize(org.codehaus.jackson.map.JsonSerializableWithType, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.JsonSerializableWithType $r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r3;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.JsonSerializableWithType;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        interfaceinvoke $r1.<org.codehaus.jackson.map.JsonSerializable: void serialize(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r2, $r3);

        return;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.JsonSerializableWithType $r5;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (org.codehaus.jackson.map.JsonSerializableWithType) $r4;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer: void serializeWithType(org.codehaus.jackson.map.JsonSerializableWithType,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, $r1, $r2, $r3);

        return;
    }

    public final void serializeWithType(org.codehaus.jackson.map.JsonSerializableWithType, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.JsonSerializableWithType $r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.TypeSerializer $r4;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r3;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.JsonSerializableWithType;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        interfaceinvoke $r1.<org.codehaus.jackson.map.JsonSerializableWithType: void serializeWithType(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r2, $r3, $r4);

        return;
    }
}
