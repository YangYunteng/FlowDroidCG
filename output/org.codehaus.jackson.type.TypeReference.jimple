public abstract class org.codehaus.jackson.type.TypeReference extends java.lang.Object implements java.lang.Comparable
{
    public final java.lang.reflect.Type _type;

    public void <init>()
    {
        java.lang.reflect.ParameterizedType $r3;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.type.TypeReference r0;
        java.lang.reflect.Type[] $r4;
        java.lang.Class $r1;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.type.TypeReference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 != 0 goto label1;

        $r3 = (java.lang.reflect.ParameterizedType) $r2;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r2 = $r4[0];

        r0.<org.codehaus.jackson.type.TypeReference: java.lang.reflect.Type _type> = $r2;

        return;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal error: TypeReference constructed without actual type information");

        throw $r5;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.codehaus.jackson.type.TypeReference r0, $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.codehaus.jackson.type.TypeReference;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.codehaus.jackson.type.TypeReference) $r1;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.type.TypeReference: int compareTo(org.codehaus.jackson.type.TypeReference)>($r2);

        return $i0;
    }

    public int compareTo(org.codehaus.jackson.type.TypeReference)
    {
        org.codehaus.jackson.type.TypeReference r0, $r1;

        r0 := @this: org.codehaus.jackson.type.TypeReference;

        $r1 := @parameter0: org.codehaus.jackson.type.TypeReference;

        return 0;
    }

    public java.lang.reflect.Type getType()
    {
        java.lang.reflect.Type r1;
        org.codehaus.jackson.type.TypeReference r0;

        r0 := @this: org.codehaus.jackson.type.TypeReference;

        r1 = r0.<org.codehaus.jackson.type.TypeReference: java.lang.reflect.Type _type>;

        return r1;
    }
}
