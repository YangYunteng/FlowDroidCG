public final class com.google.common.hash.Hashing extends java.lang.Object
{
    public static final int GOOD_FAST_HASH_SEED;

    static void <clinit>()
    {
        int $i0;
        long $l1;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i0 = (int) $l1;

        <com.google.common.hash.Hashing: int GOOD_FAST_HASH_SEED> = $i0;

        return;
    }

    public void <init>()
    {
        com.google.common.hash.Hashing r0;

        r0 := @this: com.google.common.hash.Hashing;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.hash.HashFunction adler32()
    {
        com.google.common.hash.Hashing$ChecksumType $r0;
        com.google.common.hash.HashFunction r1;

        $r0 = <com.google.common.hash.Hashing$ChecksumType: com.google.common.hash.Hashing$ChecksumType ADLER_32>;

        r1 = $r0.<com.google.common.hash.Hashing$ChecksumType: com.google.common.hash.HashFunction hashFunction>;

        return r1;
    }

    public static int checkPositiveAndMakeMultipleOf32(int)
    {
        int $i0, $i1;
        boolean $z0;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Number of bits must be positive");

        $i0 = $i0 + 31;

        $i1 = -32;

        $i0 = $i0 & $i1;

        return $i0;
    }

    public static com.google.common.hash.HashCode combineOrdered(java.lang.Iterable)
    {
        byte[] $r4, $r5;
        java.util.Iterator $r1;
        com.google.common.hash.HashCode $r3;
        java.lang.Iterable $r0;
        byte $b3;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Must be at least 1 hash code to combine.");

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.google.common.hash.HashCode) $r2;

        $i0 = virtualinvoke $r3.<com.google.common.hash.HashCode: int bits()>();

        $i0 = $i0 / 8;

        $r4 = newarray (byte)[$i0];

        $r1 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.google.common.hash.HashCode) $r2;

        $r5 = virtualinvoke $r3.<com.google.common.hash.HashCode: byte[] asBytes()>();

        $i1 = lengthof $r5;

        $i2 = lengthof $r4;

        $i0 = 0;

        if $i1 != $i2 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "All hashcodes must have the same bit length.");

     label4:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label1;

        $b3 = $r4[$i0];

        $i1 = (int) $b3;

        $i1 = $i1 * 37;

        $b3 = $r5[$i0];

        $i2 = (int) $b3;

        $i1 = $i1 ^ $i2;

        $b3 = (byte) $i1;

        $r4[$i0] = $b3;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $r3 = staticinvoke <com.google.common.hash.HashCode: com.google.common.hash.HashCode fromBytesNoCopy(byte[])>($r4);

        return $r3;
    }

    public static com.google.common.hash.HashCode combineUnordered(java.lang.Iterable)
    {
        byte[] $r4, $r5;
        java.util.Iterator $r1;
        com.google.common.hash.HashCode $r3;
        java.lang.Iterable $r0;
        byte $b3, $b4;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Must be at least 1 hash code to combine.");

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.google.common.hash.HashCode) $r2;

        $i0 = virtualinvoke $r3.<com.google.common.hash.HashCode: int bits()>();

        $i0 = $i0 / 8;

        $r4 = newarray (byte)[$i0];

        $r1 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.google.common.hash.HashCode) $r2;

        $r5 = virtualinvoke $r3.<com.google.common.hash.HashCode: byte[] asBytes()>();

        $i1 = lengthof $r5;

        $i2 = lengthof $r4;

        $i0 = 0;

        if $i1 != $i2 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "All hashcodes must have the same bit length.");

     label4:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label1;

        $b3 = $r4[$i0];

        $b4 = $r5[$i0];

        $i1 = (int) $b3;

        $i2 = (int) $b4;

        $i1 = $i1 + $i2;

        $b3 = (byte) $i1;

        $r4[$i0] = $b3;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $r3 = staticinvoke <com.google.common.hash.HashCode: com.google.common.hash.HashCode fromBytesNoCopy(byte[])>($r4);

        return $r3;
    }

    public static transient com.google.common.hash.HashFunction concatenating(com.google.common.hash.HashFunction, com.google.common.hash.HashFunction, com.google.common.hash.HashFunction[])
    {
        java.util.List $r4;
        java.lang.Object[] $r6;
        com.google.common.hash.HashFunction[] $r3;
        com.google.common.hash.HashFunction $r1, $r2;
        java.util.ArrayList $r0;
        com.google.common.hash.Hashing$ConcatenatedHashFunction $r5;

        $r1 := @parameter0: com.google.common.hash.HashFunction;

        $r2 := @parameter1: com.google.common.hash.HashFunction;

        $r3 := @parameter2: com.google.common.hash.HashFunction[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = new com.google.common.hash.Hashing$ConcatenatedHashFunction;

        $r3 = newarray (com.google.common.hash.HashFunction)[0];

        $r6 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (com.google.common.hash.HashFunction[]) $r6;

        specialinvoke $r5.<com.google.common.hash.Hashing$ConcatenatedHashFunction: void <init>(com.google.common.hash.HashFunction[],com.google.common.hash.Hashing$1)>($r3, null);

        return $r5;
    }

    public static com.google.common.hash.HashFunction concatenating(java.lang.Iterable)
    {
        java.lang.Object[] $r7;
        java.util.Iterator $r2;
        com.google.common.hash.HashFunction[] $r6;
        java.lang.Iterable $r0;
        java.util.ArrayList $r1;
        com.google.common.hash.Hashing$ConcatenatedHashFunction $r5;
        int $i0;
        java.lang.Object $r3;
        com.google.common.hash.HashFunction $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.common.hash.HashFunction) $r3;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "number of hash functions (%s) must be > 0", $i0);

        $r5 = new com.google.common.hash.Hashing$ConcatenatedHashFunction;

        $r6 = newarray (com.google.common.hash.HashFunction)[0];

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r6 = (com.google.common.hash.HashFunction[]) $r7;

        specialinvoke $r5.<com.google.common.hash.Hashing$ConcatenatedHashFunction: void <init>(com.google.common.hash.HashFunction[],com.google.common.hash.Hashing$1)>($r6, null);

        return $r5;
    }

    public static int consistentHash(long, int)
    {
        com.google.common.hash.Hashing$LinearCongruentialGenerator $r0;
        long $l1;
        int $i0, $i2, $i3;
        double $d0, $d1;
        boolean $z0;

        $l1 := @parameter0: long;

        $i0 := @parameter1: int;

        $i2 = 0;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "buckets must be positive: %s", $i0);

        $r0 = new com.google.common.hash.Hashing$LinearCongruentialGenerator;

        specialinvoke $r0.<com.google.common.hash.Hashing$LinearCongruentialGenerator: void <init>(long)>($l1);

     label3:
        $i3 = $i2 + 1;

        $d1 = (double) $i3;

        $d0 = virtualinvoke $r0.<com.google.common.hash.Hashing$LinearCongruentialGenerator: double nextDouble()>();

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d1 / $d0;

        $i3 = (int) $d0;

        if $i3 < 0 goto label4;

        if $i3 >= $i0 goto label4;

        $i2 = $i3;

        goto label3;

     label4:
        return $i2;
    }

    public static int consistentHash(com.google.common.hash.HashCode, int)
    {
        int $i0;
        long $l1;
        com.google.common.hash.HashCode $r0;

        $r0 := @parameter0: com.google.common.hash.HashCode;

        $i0 := @parameter1: int;

        $l1 = virtualinvoke $r0.<com.google.common.hash.HashCode: long padToLong()>();

        $i0 = staticinvoke <com.google.common.hash.Hashing: int consistentHash(long,int)>($l1, $i0);

        return $i0;
    }

    public static com.google.common.hash.HashFunction crc32()
    {
        com.google.common.hash.Hashing$ChecksumType $r0;
        com.google.common.hash.HashFunction r1;

        $r0 = <com.google.common.hash.Hashing$ChecksumType: com.google.common.hash.Hashing$ChecksumType CRC_32>;

        r1 = $r0.<com.google.common.hash.Hashing$ChecksumType: com.google.common.hash.HashFunction hashFunction>;

        return r1;
    }

    public static com.google.common.hash.HashFunction crc32c()
    {
        com.google.common.hash.HashFunction r0;

        r0 = <com.google.common.hash.Crc32cHashFunction: com.google.common.hash.HashFunction CRC_32_C>;

        return r0;
    }

    public static com.google.common.hash.HashFunction farmHashFingerprint64()
    {
        com.google.common.hash.HashFunction r0;

        r0 = <com.google.common.hash.FarmHashFingerprint64: com.google.common.hash.HashFunction FARMHASH_FINGERPRINT_64>;

        return r0;
    }

    public static com.google.common.hash.HashFunction goodFastHash(int)
    {
        int $i0, $i1, $i2;
        com.google.common.hash.HashFunction[] $r0;
        com.google.common.hash.HashFunction $r1;
        com.google.common.hash.Hashing$ConcatenatedHashFunction $r2;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <com.google.common.hash.Hashing: int checkPositiveAndMakeMultipleOf32(int)>($i0);

        if $i0 != 32 goto label1;

        $r1 = <com.google.common.hash.Murmur3_32HashFunction: com.google.common.hash.HashFunction GOOD_FAST_HASH_32>;

        return $r1;

     label1:
        if $i0 > 128 goto label2;

        $r1 = <com.google.common.hash.Murmur3_128HashFunction: com.google.common.hash.HashFunction GOOD_FAST_HASH_128>;

        return $r1;

     label2:
        $i0 = $i0 + 127;

        $i0 = $i0 / 128;

        $r0 = newarray (com.google.common.hash.HashFunction)[$i0];

        $r1 = <com.google.common.hash.Murmur3_128HashFunction: com.google.common.hash.HashFunction GOOD_FAST_HASH_128>;

        $r0[0] = $r1;

        $i1 = <com.google.common.hash.Hashing: int GOOD_FAST_HASH_SEED>;

        $i2 = 1;

     label3:
        if $i2 >= $i0 goto label4;

        $i1 = $i1 + 1500450271;

        $r1 = staticinvoke <com.google.common.hash.Hashing: com.google.common.hash.HashFunction murmur3_128(int)>($i1);

        $r0[$i2] = $r1;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $r2 = new com.google.common.hash.Hashing$ConcatenatedHashFunction;

        specialinvoke $r2.<com.google.common.hash.Hashing$ConcatenatedHashFunction: void <init>(com.google.common.hash.HashFunction[],com.google.common.hash.Hashing$1)>($r0, null);

        return $r2;
    }

    public static com.google.common.hash.HashFunction hmacMd5(java.security.Key)
    {
        java.security.Key $r0;
        com.google.common.hash.MacHashFunction $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.security.Key;

        $r1 = new com.google.common.hash.MacHashFunction;

        $r2 = staticinvoke <com.google.common.hash.Hashing: java.lang.String hmacToString(java.lang.String,java.security.Key)>("hmacMd5", $r0);

        specialinvoke $r1.<com.google.common.hash.MacHashFunction: void <init>(java.lang.String,java.security.Key,java.lang.String)>("HmacMD5", $r0, $r2);

        return $r1;
    }

    public static com.google.common.hash.HashFunction hmacMd5(byte[])
    {
        javax.crypto.spec.SecretKeySpec $r0;
        byte[] $r2;
        com.google.common.hash.HashFunction $r1;

        $r2 := @parameter0: byte[];

        $r0 = new javax.crypto.spec.SecretKeySpec;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, "HmacMD5");

        $r1 = staticinvoke <com.google.common.hash.Hashing: com.google.common.hash.HashFunction hmacMd5(java.security.Key)>($r0);

        return $r1;
    }

    public static com.google.common.hash.HashFunction hmacSha1(java.security.Key)
    {
        java.security.Key $r0;
        com.google.common.hash.MacHashFunction $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.security.Key;

        $r1 = new com.google.common.hash.MacHashFunction;

        $r2 = staticinvoke <com.google.common.hash.Hashing: java.lang.String hmacToString(java.lang.String,java.security.Key)>("hmacSha1", $r0);

        specialinvoke $r1.<com.google.common.hash.MacHashFunction: void <init>(java.lang.String,java.security.Key,java.lang.String)>("HmacSHA1", $r0, $r2);

        return $r1;
    }

    public static com.google.common.hash.HashFunction hmacSha1(byte[])
    {
        javax.crypto.spec.SecretKeySpec $r0;
        byte[] $r2;
        com.google.common.hash.HashFunction $r1;

        $r2 := @parameter0: byte[];

        $r0 = new javax.crypto.spec.SecretKeySpec;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, "HmacSHA1");

        $r1 = staticinvoke <com.google.common.hash.Hashing: com.google.common.hash.HashFunction hmacSha1(java.security.Key)>($r0);

        return $r1;
    }

    public static com.google.common.hash.HashFunction hmacSha256(java.security.Key)
    {
        java.security.Key $r0;
        com.google.common.hash.MacHashFunction $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.security.Key;

        $r1 = new com.google.common.hash.MacHashFunction;

        $r2 = staticinvoke <com.google.common.hash.Hashing: java.lang.String hmacToString(java.lang.String,java.security.Key)>("hmacSha256", $r0);

        specialinvoke $r1.<com.google.common.hash.MacHashFunction: void <init>(java.lang.String,java.security.Key,java.lang.String)>("HmacSHA256", $r0, $r2);

        return $r1;
    }

    public static com.google.common.hash.HashFunction hmacSha256(byte[])
    {
        javax.crypto.spec.SecretKeySpec $r0;
        byte[] $r2;
        com.google.common.hash.HashFunction $r1;

        $r2 := @parameter0: byte[];

        $r0 = new javax.crypto.spec.SecretKeySpec;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, "HmacSHA256");

        $r1 = staticinvoke <com.google.common.hash.Hashing: com.google.common.hash.HashFunction hmacSha256(java.security.Key)>($r0);

        return $r1;
    }

    public static com.google.common.hash.HashFunction hmacSha512(java.security.Key)
    {
        java.security.Key $r0;
        com.google.common.hash.MacHashFunction $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.security.Key;

        $r1 = new com.google.common.hash.MacHashFunction;

        $r2 = staticinvoke <com.google.common.hash.Hashing: java.lang.String hmacToString(java.lang.String,java.security.Key)>("hmacSha512", $r0);

        specialinvoke $r1.<com.google.common.hash.MacHashFunction: void <init>(java.lang.String,java.security.Key,java.lang.String)>("HmacSHA512", $r0, $r2);

        return $r1;
    }

    public static com.google.common.hash.HashFunction hmacSha512(byte[])
    {
        javax.crypto.spec.SecretKeySpec $r0;
        byte[] $r2;
        com.google.common.hash.HashFunction $r1;

        $r2 := @parameter0: byte[];

        $r0 = new javax.crypto.spec.SecretKeySpec;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, "HmacSHA512");

        $r1 = staticinvoke <com.google.common.hash.Hashing: com.google.common.hash.HashFunction hmacSha512(java.security.Key)>($r0);

        return $r1;
    }

    public static java.lang.String hmacToString(java.lang.String, java.security.Key)
    {
        java.security.Key $r1;
        java.lang.String $r0;
        java.lang.Object[] $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.security.Key;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = $r0;

        $r0 = interfaceinvoke $r1.<java.security.Key: java.lang.String getAlgorithm()>();

        $r2[1] = $r0;

        $r0 = interfaceinvoke $r1.<java.security.Key: java.lang.String getFormat()>();

        $r2[2] = $r0;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Hashing.%s(Key[algorithm=%s, format=%s])", $r2);

        return $r0;
    }

    public static com.google.common.hash.HashFunction md5()
    {
        com.google.common.hash.HashFunction r0;

        r0 = <com.google.common.hash.Hashing$Md5Holder: com.google.common.hash.HashFunction MD5>;

        return r0;
    }

    public static com.google.common.hash.HashFunction murmur3_128()
    {
        com.google.common.hash.HashFunction r0;

        r0 = <com.google.common.hash.Murmur3_128HashFunction: com.google.common.hash.HashFunction MURMUR3_128>;

        return r0;
    }

    public static com.google.common.hash.HashFunction murmur3_128(int)
    {
        int $i0;
        com.google.common.hash.Murmur3_128HashFunction $r0;

        $i0 := @parameter0: int;

        $r0 = new com.google.common.hash.Murmur3_128HashFunction;

        specialinvoke $r0.<com.google.common.hash.Murmur3_128HashFunction: void <init>(int)>($i0);

        return $r0;
    }

    public static com.google.common.hash.HashFunction murmur3_32()
    {
        com.google.common.hash.HashFunction r0;

        r0 = <com.google.common.hash.Murmur3_32HashFunction: com.google.common.hash.HashFunction MURMUR3_32>;

        return r0;
    }

    public static com.google.common.hash.HashFunction murmur3_32(int)
    {
        int $i0;
        com.google.common.hash.Murmur3_32HashFunction $r0;

        $i0 := @parameter0: int;

        $r0 = new com.google.common.hash.Murmur3_32HashFunction;

        specialinvoke $r0.<com.google.common.hash.Murmur3_32HashFunction: void <init>(int)>($i0);

        return $r0;
    }

    public static com.google.common.hash.HashFunction sha1()
    {
        com.google.common.hash.HashFunction r0;

        r0 = <com.google.common.hash.Hashing$Sha1Holder: com.google.common.hash.HashFunction SHA_1>;

        return r0;
    }

    public static com.google.common.hash.HashFunction sha256()
    {
        com.google.common.hash.HashFunction r0;

        r0 = <com.google.common.hash.Hashing$Sha256Holder: com.google.common.hash.HashFunction SHA_256>;

        return r0;
    }

    public static com.google.common.hash.HashFunction sha384()
    {
        com.google.common.hash.HashFunction r0;

        r0 = <com.google.common.hash.Hashing$Sha384Holder: com.google.common.hash.HashFunction SHA_384>;

        return r0;
    }

    public static com.google.common.hash.HashFunction sha512()
    {
        com.google.common.hash.HashFunction r0;

        r0 = <com.google.common.hash.Hashing$Sha512Holder: com.google.common.hash.HashFunction SHA_512>;

        return r0;
    }

    public static com.google.common.hash.HashFunction sipHash24()
    {
        com.google.common.hash.HashFunction r0;

        r0 = <com.google.common.hash.SipHashFunction: com.google.common.hash.HashFunction SIP_HASH_24>;

        return r0;
    }

    public static com.google.common.hash.HashFunction sipHash24(long, long)
    {
        com.google.common.hash.SipHashFunction $r0;
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 = new com.google.common.hash.SipHashFunction;

        specialinvoke $r0.<com.google.common.hash.SipHashFunction: void <init>(int,int,long,long)>(2, 4, $l0, $l1);

        return $r0;
    }
}
