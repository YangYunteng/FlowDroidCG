public class com.google.common.collect.Synchronized$SynchronizedMap extends com.google.common.collect.Synchronized$SynchronizedObject implements java.util.Map
{
    public static final long serialVersionUID;
    public transient java.util.Set entrySet;
    public transient java.util.Set keySet;
    public transient java.util.Collection values;

    public void <init>(java.util.Map, java.lang.Object)
    {
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.lang.Object $r2;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.google.common.collect.Synchronized$SynchronizedObject: void <init>(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void clear()
    {
        java.lang.Throwable $r3;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r2;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object compute(java.lang.Object, java.util.function.BiFunction)
    {
        java.lang.Throwable $r5;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.function.BiFunction $r1;
        java.util.Map $r4;
        java.lang.Object $r2, $r3;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.function.BiFunction;

        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r2;

     label1:
        $r4 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>($r3, $r1);

        exitmonitor $r2;

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function)
    {
        java.lang.Throwable $r5;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r4;
        java.lang.Object $r2, $r3;
        java.util.function.Function $r1;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.function.Function;

        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r2;

     label1:
        $r4 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($r3, $r1);

        exitmonitor $r2;

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object computeIfPresent(java.lang.Object, java.util.function.BiFunction)
    {
        java.lang.Throwable $r5;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.function.BiFunction $r1;
        java.util.Map $r4;
        java.lang.Object $r2, $r3;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.function.BiFunction;

        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r2;

     label1:
        $r4 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>($r3, $r1);

        exitmonitor $r2;

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.lang.Throwable $r4;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r3;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.Throwable $r4;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r3;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsValue(java.lang.Object)>($r2);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public volatile java.lang.Object delegate()
    {
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        return $r1;
    }

    public java.util.Map delegate()
    {
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.lang.Object $r1;
        java.util.Map $r2;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r1 = specialinvoke r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object delegate()>();

        $r2 = (java.util.Map) $r1;

        return $r2;
    }

    public java.util.Set entrySet()
    {
        java.lang.Throwable $r5;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r4;
        java.util.Set $r3;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Set entrySet>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r3 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        $r3 = staticinvoke <com.google.common.collect.Synchronized: java.util.Set set(java.util.Set,java.lang.Object)>($r3, $r2);

        r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Set entrySet> = $r3;

     label2:
        $r3 = r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Set entrySet>;

        exitmonitor $r1;

     label3:
        return $r3;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Throwable $r4;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r3;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r2 := @parameter0: java.lang.Object;

        if $r2 != r0 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label2:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean equals(java.lang.Object)>($r2);

        exitmonitor $r1;

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void forEach(java.util.function.BiConsumer)
    {
        java.lang.Throwable $r4;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r2;
        java.util.function.BiConsumer $r3;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r3 := @parameter0: java.util.function.BiConsumer;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        interfaceinvoke $r2.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r3);

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Throwable $r4;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r3;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object getOrDefault(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r5;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r4;
        java.lang.Object $r1, $r2, $r3;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r2;

     label1:
        $r4 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r3, $r1);

        exitmonitor $r2;

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int hashCode()
    {
        java.lang.Throwable $r3;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int hashCode()>();

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isEmpty()
    {
        java.lang.Throwable $r3;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Set keySet()
    {
        java.lang.Throwable $r5;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r4;
        java.util.Set $r3;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Set keySet>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r3 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        $r3 = staticinvoke <com.google.common.collect.Synchronized: java.util.Set set(java.util.Set,java.lang.Object)>($r3, $r2);

        r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Set keySet> = $r3;

     label2:
        $r3 = r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Set keySet>;

        exitmonitor $r1;

     label3:
        return $r3;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction)
    {
        java.lang.Throwable $r6;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.function.BiFunction $r2;
        java.util.Map $r5;
        java.lang.Object $r1, $r3, $r4;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.util.function.BiFunction;

        $r3 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r3;

     label1:
        $r5 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r4 = interfaceinvoke $r5.<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>($r4, $r1, $r2);

        exitmonitor $r3;

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r5;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r4;
        java.lang.Object $r1, $r2, $r3;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r2;

     label1:
        $r4 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        exitmonitor $r2;

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void putAll(java.util.Map)
    {
        java.lang.Throwable $r4;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r2, $r3;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r3 := @parameter0: java.util.Map;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>($r3);

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r5;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r4;
        java.lang.Object $r1, $r2, $r3;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r2;

     label1:
        $r4 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r3, $r1);

        exitmonitor $r2;

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.Throwable $r4;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r3;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r5;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r4;
        java.lang.Object $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r2;

     label1:
        $r4 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>($r3, $r1);

        exitmonitor $r2;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r5;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r4;
        java.lang.Object $r1, $r2, $r3;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r2;

     label1:
        $r4 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object replace(java.lang.Object,java.lang.Object)>($r3, $r1);

        exitmonitor $r2;

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r6;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r5;
        java.lang.Object $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r3;

     label1:
        $r5 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r1, $r2);

        exitmonitor $r3;

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void replaceAll(java.util.function.BiFunction)
    {
        java.lang.Throwable $r4;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r2;
        java.util.function.BiFunction $r3;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r3 := @parameter0: java.util.function.BiFunction;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        interfaceinvoke $r2.<java.util.Map: void replaceAll(java.util.function.BiFunction)>($r3);

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int size()
    {
        java.lang.Throwable $r3;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Collection values()
    {
        java.lang.Throwable $r5;
        com.google.common.collect.Synchronized$SynchronizedMap r0;
        java.util.Collection $r3;
        java.util.Map $r4;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedMap;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Collection values>;

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r3 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r2 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        $r3 = staticinvoke <com.google.common.collect.Synchronized: java.util.Collection access$500(java.util.Collection,java.lang.Object)>($r3, $r2);

        r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Collection values> = $r3;

     label2:
        $r3 = r0.<com.google.common.collect.Synchronized$SynchronizedMap: java.util.Collection values>;

        exitmonitor $r1;

     label3:
        return $r3;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
