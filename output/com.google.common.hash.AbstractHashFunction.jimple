public abstract class com.google.common.hash.AbstractHashFunction extends java.lang.Object implements com.google.common.hash.HashFunction
{

    public void <init>()
    {
        com.google.common.hash.AbstractHashFunction r0;

        r0 := @this: com.google.common.hash.AbstractHashFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.google.common.hash.HashCode hashBytes(java.nio.ByteBuffer)
    {
        com.google.common.hash.AbstractHashFunction r0;
        com.google.common.hash.HashCode $r3;
        int $i0;
        com.google.common.hash.Hasher $r2;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractHashFunction;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.Hasher newHasher(int)>($i0);

        $r2 = interfaceinvoke $r2.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)>($r1);

        $r3 = interfaceinvoke $r2.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>();

        return $r3;
    }

    public com.google.common.hash.HashCode hashBytes(byte[])
    {
        byte[] $r2;
        com.google.common.hash.AbstractHashFunction r0;
        com.google.common.hash.HashCode $r1;
        int $i0;

        r0 := @this: com.google.common.hash.AbstractHashFunction;

        $r2 := @parameter0: byte[];

        $i0 = lengthof $r2;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.HashCode hashBytes(byte[],int,int)>($r2, 0, $i0);

        return $r1;
    }

    public com.google.common.hash.HashCode hashBytes(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.hash.HashCode $r3;
        com.google.common.hash.AbstractHashFunction r0;
        int $i0, $i1, $i2, $i3;
        com.google.common.hash.Hasher $r2;

        r0 := @this: com.google.common.hash.AbstractHashFunction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = $i0 + $i1;

        $i2 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i3, $i2);

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.Hasher newHasher(int)>($i1);

        $r2 = interfaceinvoke $r2.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>($r1, $i0, $i1);

        $r3 = interfaceinvoke $r2.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>();

        return $r3;
    }

    public com.google.common.hash.HashCode hashInt(int)
    {
        com.google.common.hash.AbstractHashFunction r0;
        com.google.common.hash.HashCode $r2;
        int $i0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHashFunction;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.Hasher newHasher(int)>(4);

        $r1 = interfaceinvoke $r1.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putInt(int)>($i0);

        $r2 = interfaceinvoke $r1.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>();

        return $r2;
    }

    public com.google.common.hash.HashCode hashLong(long)
    {
        com.google.common.hash.AbstractHashFunction r0;
        com.google.common.hash.HashCode $r2;
        long $l0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHashFunction;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.Hasher newHasher(int)>(8);

        $r1 = interfaceinvoke $r1.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putLong(long)>($l0);

        $r2 = interfaceinvoke $r1.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>();

        return $r2;
    }

    public com.google.common.hash.HashCode hashObject(java.lang.Object, com.google.common.hash.Funnel)
    {
        com.google.common.hash.Funnel $r1;
        com.google.common.hash.AbstractHashFunction r0;
        com.google.common.hash.HashCode $r4;
        java.lang.Object $r2;
        com.google.common.hash.Hasher $r3;

        r0 := @this: com.google.common.hash.AbstractHashFunction;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.google.common.hash.Funnel;

        $r3 = interfaceinvoke r0.<com.google.common.hash.HashFunction: com.google.common.hash.Hasher newHasher()>();

        $r3 = interfaceinvoke $r3.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel)>($r2, $r1);

        $r4 = interfaceinvoke $r3.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>();

        return $r4;
    }

    public com.google.common.hash.HashCode hashString(java.lang.CharSequence, java.nio.charset.Charset)
    {
        com.google.common.hash.AbstractHashFunction r0;
        java.nio.charset.Charset $r1;
        java.lang.CharSequence $r2;
        com.google.common.hash.HashCode $r4;
        com.google.common.hash.Hasher $r3;

        r0 := @this: com.google.common.hash.AbstractHashFunction;

        $r2 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r3 = interfaceinvoke r0.<com.google.common.hash.HashFunction: com.google.common.hash.Hasher newHasher()>();

        $r3 = interfaceinvoke $r3.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset)>($r2, $r1);

        $r4 = interfaceinvoke $r3.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>();

        return $r4;
    }

    public com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence)
    {
        com.google.common.hash.AbstractHashFunction r0;
        java.lang.CharSequence $r1;
        com.google.common.hash.HashCode $r3;
        int $i0;
        com.google.common.hash.Hasher $r2;

        r0 := @this: com.google.common.hash.AbstractHashFunction;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = $i0 * 2;

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.Hasher newHasher(int)>($i0);

        $r2 = interfaceinvoke $r2.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence)>($r1);

        $r3 = interfaceinvoke $r2.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>();

        return $r3;
    }

    public com.google.common.hash.Hasher newHasher(int)
    {
        com.google.common.hash.AbstractHashFunction r0;
        int $i0;
        com.google.common.hash.Hasher $r1;
        boolean $z0;

        r0 := @this: com.google.common.hash.AbstractHashFunction;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "expectedInputSize must be >= 0 but was %s", $i0);

        $r1 = interfaceinvoke r0.<com.google.common.hash.HashFunction: com.google.common.hash.Hasher newHasher()>();

        return $r1;
    }
}
