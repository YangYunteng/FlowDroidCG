public abstract class com.google.common.collect.ImmutableSortedMultiset extends com.google.common.collect.ImmutableSortedMultisetFauxverideShim implements com.google.common.collect.SortedMultiset
{
    public transient com.google.common.collect.ImmutableSortedMultiset descendingMultiset;

    public void <init>()
    {
        com.google.common.collect.ImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        specialinvoke r0.<com.google.common.collect.ImmutableSortedMultisetFauxverideShim: void <init>()>();

        return;
    }

    public static com.google.common.collect.ImmutableSortedMultiset a(java.util.Comparator, com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multiset $r1;
        java.util.Set $r2;
        java.util.Comparator $r0;
        com.google.common.collect.ImmutableSortedMultiset $r3;

        $r0 := @parameter0: java.util.Comparator;

        $r1 := @parameter1: com.google.common.collect.Multiset;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOfSortedEntries(java.util.Comparator,java.util.Collection)>($r0, $r2);

        return $r3;
    }

    public static com.google.common.collect.Multiset a(java.util.Comparator)
    {
        com.google.common.collect.TreeMultiset $r0;
        java.util.Comparator $r1;

        $r1 := @parameter0: java.util.Comparator;

        $r0 = staticinvoke <com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset create(java.util.Comparator)>($r1);

        return $r0;
    }

    public static int b(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        return 1;
    }

    public static com.google.common.collect.Multiset b(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multiset $r0, $r1;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: com.google.common.collect.Multiset;

        interfaceinvoke $r0.<java.util.Collection: boolean addAll(java.util.Collection)>($r1);

        return $r0;
    }

    public static void b(java.util.function.Function, java.util.function.ToIntFunction, com.google.common.collect.Multiset, java.lang.Object)
    {
        com.google.common.collect.Multiset $r0;
        java.util.function.ToIntFunction $r3;
        int $i0;
        java.lang.Object $r1, $r4;
        java.util.function.Function $r2;

        $r2 := @parameter0: java.util.function.Function;

        $r3 := @parameter1: java.util.function.ToIntFunction;

        $r0 := @parameter2: com.google.common.collect.Multiset;

        $r1 := @parameter3: java.lang.Object;

        $r4 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $i0 = interfaceinvoke $r3.<java.util.function.ToIntFunction: int applyAsInt(java.lang.Object)>($r1);

        interfaceinvoke $r0.<com.google.common.collect.Multiset: int add(java.lang.Object,int)>($r4, $i0);

        return;
    }

    public static com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Iterable)
    {
        com.google.common.collect.Ordering $r1;
        com.google.common.collect.ImmutableSortedMultiset $r2;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.lang.Iterable)>($r1, $r0);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator, java.lang.Iterable)
    {
        com.google.common.collect.ImmutableSet $r4;
        java.util.Set $r8;
        java.lang.Iterable $r1;
        java.util.ArrayList $r6;
        com.google.common.collect.TreeMultiset $r7;
        com.google.common.collect.ImmutableList $r5;
        java.util.Comparator $r0, $r3;
        com.google.common.collect.ImmutableSortedMultiset $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Comparator;

        $r1 := @parameter1: java.lang.Iterable;

        $z0 = $r1 instanceof com.google.common.collect.ImmutableSortedMultiset;

        if $z0 == 0 goto label2;

        $r2 = (com.google.common.collect.ImmutableSortedMultiset) $r1;

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableSortedMultiset: java.util.Comparator comparator()>();

        $z0 = interfaceinvoke $r0.<java.util.Comparator: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: boolean isPartialView()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r2.<com.google.common.collect.ImmutableMultiset: com.google.common.collect.ImmutableSet entrySet()>();

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOfSortedEntries(java.util.Comparator,java.util.Collection)>($r0, $r5);

     label1:
        return $r2;

     label2:
        $r6 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r3 = $r0;

        $r7 = staticinvoke <com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset create(java.util.Comparator)>($r3);

        staticinvoke <com.google.common.collect.Iterables: boolean addAll(java.util.Collection,java.lang.Iterable)>($r7, $r6);

        $r8 = virtualinvoke $r7.<com.google.common.collect.TreeMultiset: java.util.Set entrySet()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOfSortedEntries(java.util.Comparator,java.util.Collection)>($r0, $r8);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator, java.util.Iterator)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder $r1;
        java.util.Iterator $r0;
        java.util.Comparator $r2;
        com.google.common.collect.ImmutableSortedMultiset $r3;

        $r2 := @parameter0: java.util.Comparator;

        $r0 := @parameter1: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r1 = new com.google.common.collect.ImmutableSortedMultiset$Builder;

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedMultiset$Builder: void <init>(java.util.Comparator)>($r2);

        $r1 = virtualinvoke $r1.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.util.Iterator)>($r0);

        $r3 = virtualinvoke $r1.<com.google.common.collect.ImmutableSortedMultiset$Builder: com.google.common.collect.ImmutableSortedMultiset build()>();

        return $r3;
    }

    public static com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Iterator)
    {
        java.util.Iterator $r0;
        com.google.common.collect.Ordering $r1;
        com.google.common.collect.ImmutableSortedMultiset $r2;

        $r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.util.Iterator)>($r1, $r0);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Comparable[])
    {
        java.util.List $r2;
        com.google.common.collect.Ordering $r1;
        com.google.common.collect.ImmutableSortedMultiset $r3;
        java.lang.Comparable[] $r0;

        $r0 := @parameter0: java.lang.Comparable[];

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r3 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.lang.Iterable)>($r1, $r2);

        return $r3;
    }

    public static com.google.common.collect.ImmutableSortedMultiset copyOfSorted(com.google.common.collect.SortedMultiset)
    {
        com.google.common.collect.SortedMultiset $r0;
        java.util.Set $r2;
        java.util.Comparator $r1;
        com.google.common.collect.ImmutableSortedMultiset $r4;
        java.util.ArrayList $r3;

        $r0 := @parameter0: com.google.common.collect.SortedMultiset;

        $r1 = interfaceinvoke $r0.<com.google.common.collect.SortedMultiset: java.util.Comparator comparator()>();

        $r2 = interfaceinvoke $r0.<com.google.common.collect.SortedMultiset: java.util.Set entrySet()>();

        $r3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r2);

        $r4 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOfSortedEntries(java.util.Comparator,java.util.Collection)>($r1, $r3);

        return $r4;
    }

    public static com.google.common.collect.ImmutableSortedMultiset copyOfSortedEntries(java.util.Comparator, java.util.Collection)
    {
        long $l2, $l3;
        com.google.common.collect.RegularImmutableSortedMultiset $r8;
        long[] $r4;
        com.google.common.collect.ImmutableList $r10;
        int $i0, $i1;
        boolean $z0;
        java.util.Iterator $r5;
        java.util.Collection $r0;
        com.google.common.collect.Multiset$Entry $r7;
        java.lang.Object $r6;
        java.util.Comparator $r1;
        com.google.common.collect.ImmutableSortedMultiset $r2;
        com.google.common.collect.RegularImmutableSortedSet $r9;
        com.google.common.collect.ImmutableList$Builder $r3;

        $r1 := @parameter0: java.util.Comparator;

        $r0 := @parameter1: java.util.Collection;

        $z0 = interfaceinvoke $r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset emptyMultiset(java.util.Comparator)>($r1);

        return $r2;

     label1:
        $r3 = new com.google.common.collect.ImmutableList$Builder;

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        specialinvoke $r3.<com.google.common.collect.ImmutableList$Builder: void <init>(int)>($i0);

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        $i0 = $i0 + 1;

        $r4 = newarray (long)[$i0];

        $r5 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

        $i1 = 0;

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.google.common.collect.Multiset$Entry) $r6;

        $r6 = interfaceinvoke $r7.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        virtualinvoke $r3.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r6);

        $i0 = $i1 + 1;

        $l2 = $r4[$i1];

        $i1 = interfaceinvoke $r7.<com.google.common.collect.Multiset$Entry: int getCount()>();

        $l3 = (long) $i1;

        $l2 = $l2 + $l3;

        $r4[$i0] = $l2;

        $i1 = $i0;

        goto label2;

     label3:
        $r8 = new com.google.common.collect.RegularImmutableSortedMultiset;

        $r9 = new com.google.common.collect.RegularImmutableSortedSet;

        $r10 = virtualinvoke $r3.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        specialinvoke $r9.<com.google.common.collect.RegularImmutableSortedSet: void <init>(com.google.common.collect.ImmutableList,java.util.Comparator)>($r10, $r1);

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        specialinvoke $r8.<com.google.common.collect.RegularImmutableSortedMultiset: void <init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int)>($r9, $r4, 0, $i0);

        return $r8;
    }

    public static com.google.common.collect.ImmutableSortedMultiset emptyMultiset(java.util.Comparator)
    {
        com.google.common.collect.Ordering $r1;
        java.util.Comparator $r0;
        com.google.common.collect.RegularImmutableSortedMultiset $r2;
        com.google.common.collect.ImmutableSortedMultiset r3;
        boolean $z0;

        $r0 := @parameter0: java.util.Comparator;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        r3 = <com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset NATURAL_EMPTY_MULTISET>;

        return r3;

     label1:
        $r2 = new com.google.common.collect.RegularImmutableSortedMultiset;

        specialinvoke $r2.<com.google.common.collect.RegularImmutableSortedMultiset: void <init>(java.util.Comparator)>($r0);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedMultiset$Builder naturalOrder()
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder $r0;
        com.google.common.collect.Ordering $r1;

        $r0 = new com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        specialinvoke $r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: void <init>(java.util.Comparator)>($r1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableSortedMultiset of()
    {
        com.google.common.collect.ImmutableSortedMultiset r0;

        r0 = <com.google.common.collect.RegularImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset NATURAL_EMPTY_MULTISET>;

        return r0;
    }

    public static com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable)
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        long[] $r4;
        java.lang.Comparable $r2;
        com.google.common.collect.RegularImmutableSortedMultiset $r0;
        com.google.common.collect.RegularImmutableSortedSet $r3;

        $r2 := @parameter0: java.lang.Comparable;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable)>($r2);

        $r3 = (com.google.common.collect.RegularImmutableSortedSet) $r1;

        $r4 = newarray (long)[2];

        $r4[0] = 0L;

        $r4[1] = 1L;

        $r0 = new com.google.common.collect.RegularImmutableSortedMultiset;

        specialinvoke $r0.<com.google.common.collect.RegularImmutableSortedMultiset: void <init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int)>($r3, $r4, 0, 1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable, java.lang.Comparable)
    {
        java.util.List $r4;
        com.google.common.collect.Ordering $r2;
        java.lang.Comparable $r0, $r1;
        com.google.common.collect.ImmutableSortedMultiset $r5;
        java.lang.Comparable[] $r3;

        $r1 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable;

        $r2 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r3 = newarray (java.lang.Comparable)[2];

        $r3[0] = $r1;

        $r3[1] = $r0;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r5 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.lang.Iterable)>($r2, $r4);

        return $r5;
    }

    public static com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        java.util.List $r5;
        com.google.common.collect.Ordering $r3;
        java.lang.Comparable $r0, $r1, $r2;
        com.google.common.collect.ImmutableSortedMultiset $r6;
        java.lang.Comparable[] $r4;

        $r2 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable;

        $r1 := @parameter2: java.lang.Comparable;

        $r3 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r4 = newarray (java.lang.Comparable)[3];

        $r4[0] = $r2;

        $r4[1] = $r0;

        $r4[2] = $r1;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r6 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.lang.Iterable)>($r3, $r5);

        return $r6;
    }

    public static com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable[] $r5;
        java.util.List $r6;
        com.google.common.collect.Ordering $r4;
        java.lang.Comparable $r0, $r1, $r2, $r3;
        com.google.common.collect.ImmutableSortedMultiset $r7;

        $r3 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable;

        $r1 := @parameter2: java.lang.Comparable;

        $r2 := @parameter3: java.lang.Comparable;

        $r4 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r5 = newarray (java.lang.Comparable)[4];

        $r5[0] = $r3;

        $r5[1] = $r0;

        $r5[2] = $r1;

        $r5[3] = $r2;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.lang.Iterable)>($r4, $r6);

        return $r7;
    }

    public static com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable[] $r6;
        java.util.List $r7;
        com.google.common.collect.Ordering $r5;
        java.lang.Comparable $r0, $r1, $r2, $r3, $r4;
        com.google.common.collect.ImmutableSortedMultiset $r8;

        $r4 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable;

        $r1 := @parameter2: java.lang.Comparable;

        $r2 := @parameter3: java.lang.Comparable;

        $r3 := @parameter4: java.lang.Comparable;

        $r5 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r6 = newarray (java.lang.Comparable)[5];

        $r6[0] = $r4;

        $r6[1] = $r0;

        $r6[2] = $r1;

        $r6[3] = $r2;

        $r6[4] = $r3;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r8 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.lang.Iterable)>($r5, $r7);

        return $r8;
    }

    public static transient com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable[])
    {
        java.lang.Comparable[] $r5, $r8;
        java.util.ArrayList $r7;
        com.google.common.collect.Ordering $r9;
        int $i0;
        java.lang.Comparable $r0, $r1, $r2, $r3, $r4, $r6;
        com.google.common.collect.ImmutableSortedMultiset $r10;

        $r6 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable;

        $r1 := @parameter2: java.lang.Comparable;

        $r2 := @parameter3: java.lang.Comparable;

        $r3 := @parameter4: java.lang.Comparable;

        $r4 := @parameter5: java.lang.Comparable;

        $r5 := @parameter6: java.lang.Comparable[];

        $i0 = lengthof $r5;

        $i0 = $i0 + 6;

        $r7 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0);

        $r8 = newarray (java.lang.Comparable)[6];

        $r8[0] = $r6;

        $r8[1] = $r0;

        $r8[2] = $r1;

        $r8[3] = $r2;

        $r8[4] = $r3;

        $r8[5] = $r4;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r7, $r8);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r7, $r5);

        $r9 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r10 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.lang.Iterable)>($r9, $r7);

        return $r10;
    }

    public static com.google.common.collect.ImmutableSortedMultiset$Builder orderedBy(java.util.Comparator)
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder $r1;
        java.util.Comparator $r0;

        $r0 := @parameter0: java.util.Comparator;

        $r1 = new com.google.common.collect.ImmutableSortedMultiset$Builder;

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedMultiset$Builder: void <init>(java.util.Comparator)>($r0);

        return $r1;
    }

    public static com.google.common.collect.ImmutableSortedMultiset$Builder reverseOrder()
    {
        com.google.common.collect.ImmutableSortedMultiset$Builder $r0;
        com.google.common.collect.Ordering $r1;

        $r0 = new com.google.common.collect.ImmutableSortedMultiset$Builder;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r1 = virtualinvoke $r1.<com.google.common.collect.Ordering: com.google.common.collect.Ordering reverse()>();

        specialinvoke $r0.<com.google.common.collect.ImmutableSortedMultiset$Builder: void <init>(java.util.Comparator)>($r1);

        return $r0;
    }

    public static java.util.stream.Collector toImmutableSortedMultiset(java.util.Comparator)
    {
        c.i.b.c.za $r0;
        java.util.stream.Collector $r3;
        java.util.Comparator $r1;
        java.util.function.Function $r2;

        $r1 := @parameter0: java.util.Comparator;

        $r2 = staticinvoke <g.a.a.a: java.util.function.Function a()>();

        $r0 = <c.i.b.c.za: c.i.b.c.za a>;

        $r3 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: java.util.stream.Collector toImmutableSortedMultiset(java.util.Comparator,java.util.function.Function,java.util.function.ToIntFunction)>($r1, $r2, $r0);

        return $r3;
    }

    public static java.util.stream.Collector toImmutableSortedMultiset(java.util.Comparator, java.util.function.Function, java.util.function.ToIntFunction)
    {
        java.util.function.ToIntFunction $r5;
        c.i.b.c.xa $r1;
        java.util.function.Function $r4;
        c.i.b.c.ya $r7;
        c.i.b.c.Aa $r6;
        c.i.b.c.Ba $r0;
        java.util.stream.Collector $r2;
        java.util.Comparator $r3;
        java.util.stream.Collector$Characteristics[] $r8;

        $r3 := @parameter0: java.util.Comparator;

        $r4 := @parameter1: java.util.function.Function;

        $r5 := @parameter2: java.util.function.ToIntFunction;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        $r0 = new c.i.b.c.Ba;

        specialinvoke $r0.<c.i.b.c.Ba: void <init>(java.util.Comparator)>($r3);

        $r1 = new c.i.b.c.xa;

        specialinvoke $r1.<c.i.b.c.xa: void <init>(java.util.function.Function,java.util.function.ToIntFunction)>($r4, $r5);

        $r6 = <c.i.b.c.Aa: c.i.b.c.Aa a>;

        $r7 = new c.i.b.c.ya;

        specialinvoke $r7.<c.i.b.c.ya: void <init>(java.util.Comparator)>($r3);

        $r8 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r2 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r0, $r1, $r6, $r7, $r8);

        return $r2;
    }

    public final java.util.Comparator comparator()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMultiset r0;
        java.util.Comparator $r2;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedSet elementSet()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator()>();

        return $r2;
    }

    public com.google.common.collect.ImmutableSortedMultiset descendingMultiset()
    {
        com.google.common.collect.Ordering $r3;
        com.google.common.collect.ImmutableSortedMultiset r0, $r1;
        java.util.Comparator $r2;
        com.google.common.collect.DescendingImmutableSortedMultiset $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r1 = r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset descendingMultiset>;

        if $r1 != null goto label3;

        $z0 = virtualinvoke r0.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: java.util.Comparator comparator()>();

        $r3 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering 'from'(java.util.Comparator)>($r2);

        $r3 = virtualinvoke $r3.<com.google.common.collect.Ordering: com.google.common.collect.Ordering reverse()>();

        $r1 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset emptyMultiset(java.util.Comparator)>($r3);

        goto label2;

     label1:
        $r4 = new com.google.common.collect.DescendingImmutableSortedMultiset;

        $r1 = $r4;

        specialinvoke $r4.<com.google.common.collect.DescendingImmutableSortedMultiset: void <init>(com.google.common.collect.ImmutableSortedMultiset)>(r0);

     label2:
        r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset descendingMultiset> = $r1;

     label3:
        return $r1;
    }

    public volatile com.google.common.collect.SortedMultiset descendingMultiset()
    {
        com.google.common.collect.ImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset descendingMultiset()>();

        return r0;
    }

    public volatile com.google.common.collect.ImmutableSet elementSet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedSet elementSet()>();

        return $r1;
    }

    public abstract com.google.common.collect.ImmutableSortedSet elementSet();

    public volatile java.util.NavigableSet elementSet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedSet elementSet()>();

        return $r1;
    }

    public volatile java.util.Set elementSet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedSet elementSet()>();

        return $r1;
    }

    public volatile java.util.SortedSet elementSet()
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        com.google.common.collect.ImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedSet elementSet()>();

        return $r1;
    }

    public abstract com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object, com.google.common.collect.BoundType);

    public volatile com.google.common.collect.SortedMultiset headMultiset(java.lang.Object, com.google.common.collect.BoundType)
    {
        java.lang.Object $r2;
        com.google.common.collect.ImmutableSortedMultiset r0;
        com.google.common.collect.BoundType $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.google.common.collect.BoundType;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType)>($r2, $r1);

        return r0;
    }

    public final com.google.common.collect.Multiset$Entry pollFirstEntry()
    {
        java.lang.UnsupportedOperationException $r1;
        com.google.common.collect.ImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public final com.google.common.collect.Multiset$Entry pollLastEntry()
    {
        java.lang.UnsupportedOperationException $r1;
        com.google.common.collect.ImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public com.google.common.collect.ImmutableSortedMultiset subMultiset(java.lang.Object, com.google.common.collect.BoundType, java.lang.Object, com.google.common.collect.BoundType)
    {
        com.google.common.collect.BoundType $r1, $r3;
        int $i0;
        java.lang.Object $r2, $r4;
        com.google.common.collect.ImmutableSortedMultiset r0;
        java.util.Comparator $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.google.common.collect.BoundType;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: com.google.common.collect.BoundType;

        $r5 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: java.util.Comparator comparator()>();

        $i0 = interfaceinvoke $r5.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r2);

        if $i0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "Expected lowerBound <= upperBound but %s > %s", $r4, $r2);

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType)>($r4, $r1);

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType)>($r2, $r3);

        return r0;
    }

    public volatile com.google.common.collect.SortedMultiset subMultiset(java.lang.Object, com.google.common.collect.BoundType, java.lang.Object, com.google.common.collect.BoundType)
    {
        com.google.common.collect.BoundType $r1, $r3;
        java.lang.Object $r2, $r4;
        com.google.common.collect.ImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.google.common.collect.BoundType;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: com.google.common.collect.BoundType;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)>($r4, $r1, $r2, $r3);

        return r0;
    }

    public abstract com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object, com.google.common.collect.BoundType);

    public volatile com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, com.google.common.collect.BoundType)
    {
        java.lang.Object $r2;
        com.google.common.collect.ImmutableSortedMultiset r0;
        com.google.common.collect.BoundType $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.google.common.collect.BoundType;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType)>($r2, $r1);

        return r0;
    }

    public java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableSortedMultiset$SerializedForm $r1;
        com.google.common.collect.ImmutableSortedMultiset r0;

        r0 := @this: com.google.common.collect.ImmutableSortedMultiset;

        $r1 = new com.google.common.collect.ImmutableSortedMultiset$SerializedForm;

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedMultiset$SerializedForm: void <init>(com.google.common.collect.SortedMultiset)>(r0);

        return $r1;
    }
}
