public final class com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp extends com.google.common.util.concurrent.SmoothRateLimiter
{
    public double coldFactor;
    public double slope;
    public double thresholdPermits;
    public final long warmupPeriodMicros;

    public void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch, long, java.util.concurrent.TimeUnit, double)
    {
        java.util.concurrent.TimeUnit $r1;
        com.google.common.util.concurrent.RateLimiter$SleepingStopwatch $r2;
        com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp r0;
        long $l0;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp;

        $r2 := @parameter0: com.google.common.util.concurrent.RateLimiter$SleepingStopwatch;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $d0 := @parameter3: double;

        specialinvoke r0.<com.google.common.util.concurrent.SmoothRateLimiter: void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,com.google.common.util.concurrent.SmoothRateLimiter$1)>($r2, null);

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMicros(long)>($l0);

        r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: long warmupPeriodMicros> = $l0;

        r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: double coldFactor> = $d0;

        return;
    }

    private double permitsToTime(double)
    {
        com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp r0;
        double $d0, $d1, $d2;

        r0 := @this: com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp;

        $d1 := @parameter0: double;

        $d2 = r0.<com.google.common.util.concurrent.SmoothRateLimiter: double stableIntervalMicros>;

        $d0 = r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: double slope>;

        $d1 = $d1 * $d0;

        $d1 = $d2 + $d1;

        return $d1;
    }

    public double coolDownIntervalMicros()
    {
        com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp r0;
        long $l0;
        double $d0, $d1;

        r0 := @this: com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp;

        $l0 = r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: long warmupPeriodMicros>;

        $d1 = (double) $l0;

        $d0 = r0.<com.google.common.util.concurrent.SmoothRateLimiter: double maxPermits>;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d1 / $d0;

        return $d0;
    }

    public void doSetRate(double, double)
    {
        long $l0;
        byte $b1;
        com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d0 = r0.<com.google.common.util.concurrent.SmoothRateLimiter: double maxPermits>;

        $d2 = r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: double coldFactor>;

        $d2 = $d2 * $d1;

        $l0 = r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: long warmupPeriodMicros>;

        $d3 = (double) $l0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        $d3 = $d3 * 0.5;

        $d3 = $d3 / $d1;

        r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: double thresholdPermits> = $d3;

        $d3 = r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: double thresholdPermits>;

        $d4 = (double) $l0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        $d4 = $d4 * 2.0;

        $d5 = $d1 + $d2;

        $d4 = $d4 / $d5;

        $d4 = $d4 + $d3;

        r0.<com.google.common.util.concurrent.SmoothRateLimiter: double maxPermits> = $d4;

        $d2 = $d2 - $d1;

        $d1 = r0.<com.google.common.util.concurrent.SmoothRateLimiter: double maxPermits>;

        $d3 = $d1 - $d3;

        $d2 = $d2 / $d3;

        r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: double slope> = $d2;

        $b1 = $d0 cmpl #Infinity;

        if $b1 != 0 goto label1;

        r0.<com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits> = 0.0;

        return;

     label1:
        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label2;

        goto label3;

     label2:
        $d2 = r0.<com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits>;

        $d1 = $d2 * $d1;

        $d1 = $d1 / $d0;

     label3:
        r0.<com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits> = $d1;

        return;
    }

    public long storedPermitsToWaitTime(double, double)
    {
        long $l1, $l2;
        byte $b0;
        int $i3;
        com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 = r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: double thresholdPermits>;

        $d3 = $d0 - $d2;

        $b0 = $d3 cmpl 0.0;

        $i3 = (int) $b0;

        if $i3 <= 0 goto label1;

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d3, $d1);

        $d2 = specialinvoke r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: double permitsToTime(double)>($d3);

        $d3 = $d3 - $d0;

        $d3 = specialinvoke r0.<com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: double permitsToTime(double)>($d3);

        $d2 = $d2 + $d3;

        $d2 = $d2 * $d0;

        $d2 = $d2 / 2.0;

        $l1 = (long) $d2;

        $d1 = $d1 - $d0;

        goto label2;

     label1:
        $l1 = 0L;

     label2:
        $d0 = r0.<com.google.common.util.concurrent.SmoothRateLimiter: double stableIntervalMicros>;

        $d0 = $d0 * $d1;

        $l2 = (long) $d0;

        $l1 = $l1 + $l2;

        return $l1;
    }
}
