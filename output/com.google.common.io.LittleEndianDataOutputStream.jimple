public final class com.google.common.io.LittleEndianDataOutputStream extends java.io.FilterOutputStream implements java.io.DataOutput
{

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream $r2;
        java.io.DataOutputStream $r1;
        com.google.common.io.LittleEndianDataOutputStream r0;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $r2 := @parameter0: java.io.OutputStream;

        $r1 = new java.io.DataOutputStream;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r2);

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r1);

        return;
    }

    public void close()
    {
        java.io.OutputStream $r1;
        com.google.common.io.LittleEndianDataOutputStream r0;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;
    }

    public void write(byte[], int, int)
    {
        java.io.OutputStream $r2;
        byte[] $r1;
        com.google.common.io.LittleEndianDataOutputStream r0;
        int $i0, $i1;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        return;
    }

    public void writeBoolean(boolean)
    {
        java.io.OutputStream $r1;
        java.io.DataOutputStream $r2;
        com.google.common.io.LittleEndianDataOutputStream r0;
        boolean $z0;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $z0 := @parameter0: boolean;

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $r2 = (java.io.DataOutputStream) $r1;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeBoolean(boolean)>($z0);

        return;
    }

    public void writeByte(int)
    {
        java.io.OutputStream $r1;
        java.io.DataOutputStream $r2;
        com.google.common.io.LittleEndianDataOutputStream r0;
        int $i0;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $i0 := @parameter0: int;

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $r2 = (java.io.DataOutputStream) $r1;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeByte(int)>($i0);

        return;
    }

    public void writeBytes(java.lang.String)
    {
        java.io.OutputStream $r2;
        java.io.DataOutputStream $r3;
        com.google.common.io.LittleEndianDataOutputStream r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $r3 = (java.io.DataOutputStream) $r2;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r1);

        return;
    }

    public void writeChar(int)
    {
        int $i0;
        com.google.common.io.LittleEndianDataOutputStream r0;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $i0 := @parameter0: int;

        virtualinvoke r0.<com.google.common.io.LittleEndianDataOutputStream: void writeShort(int)>($i0);

        return;
    }

    public void writeChars(java.lang.String)
    {
        com.google.common.io.LittleEndianDataOutputStream r0;
        int $i0, $i1;
        char $c2;
        java.lang.String $r1;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $r1 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i1 = (int) $c2;

        virtualinvoke r0.<com.google.common.io.LittleEndianDataOutputStream: void writeChar(int)>($i1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void writeDouble(double)
    {
        long $l0;
        com.google.common.io.LittleEndianDataOutputStream r0;
        double $d0;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        virtualinvoke r0.<com.google.common.io.LittleEndianDataOutputStream: void writeLong(long)>($l0);

        return;
    }

    public void writeFloat(float)
    {
        int $i0;
        float $f0;
        com.google.common.io.LittleEndianDataOutputStream r0;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        virtualinvoke r0.<com.google.common.io.LittleEndianDataOutputStream: void writeInt(int)>($i0);

        return;
    }

    public void writeInt(int)
    {
        java.io.OutputStream $r1;
        com.google.common.io.LittleEndianDataOutputStream r0;
        int $i0, $i1;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $i0 := @parameter0: int;

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $i1 = $i0 & 255;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i1);

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $i1 = $i0 >> 8;

        $i1 = $i1 & 255;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i1);

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $i1 = $i0 >> 16;

        $i1 = $i1 & 255;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i1);

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $i0 = $i0 >> 24;

        $i0 = $i0 & 255;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        return;
    }

    public void writeLong(long)
    {
        byte[] $r1;
        com.google.common.io.LittleEndianDataOutputStream r0;
        int $i0;
        long $l1;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $l1 := @parameter0: long;

        $l1 = staticinvoke <java.lang.Long: long reverseBytes(long)>($l1);

        $r1 = staticinvoke <com.google.common.primitives.Longs: byte[] toByteArray(long)>($l1);

        $i0 = lengthof $r1;

        virtualinvoke r0.<com.google.common.io.LittleEndianDataOutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        return;
    }

    public void writeShort(int)
    {
        java.io.OutputStream $r1;
        com.google.common.io.LittleEndianDataOutputStream r0;
        int $i0, $i1;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $i1 := @parameter0: int;

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $i0 = $i1 & 255;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $i1 = $i1 >> 8;

        $i1 = $i1 & 255;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i1);

        return;
    }

    public void writeUTF(java.lang.String)
    {
        java.io.OutputStream $r2;
        java.io.DataOutputStream $r3;
        com.google.common.io.LittleEndianDataOutputStream r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.io.LittleEndianDataOutputStream;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $r3 = (java.io.DataOutputStream) $r2;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r1);

        return;
    }
}
