public final class com.google.common.collect.CollectCollectors extends java.lang.Object
{
    public static final java.util.stream.Collector TO_IMMUTABLE_LIST;
    public static final java.util.stream.Collector TO_IMMUTABLE_RANGE_SET;
    public static final java.util.stream.Collector TO_IMMUTABLE_SET;

    static void <clinit>()
    {
        c.i.b.c.Jb $r9;
        c.i.b.c.lc $r10;
        c.i.b.c.w $r3;
        c.i.b.c.ub $r1;
        c.i.b.c.vc $r8;
        c.i.b.c.Vb $r2;
        c.i.b.c.h $r13;
        c.i.b.c.j $r12;
        c.i.b.c.T $r6;
        c.i.b.c.ca $r7;
        c.i.b.c.V $r0;
        java.util.stream.Collector $r5;
        java.util.stream.Collector$Characteristics[] $r4;
        c.i.b.c.hc $r11;

        $r0 = <c.i.b.c.V: c.i.b.c.V a>;

        $r1 = <c.i.b.c.ub: c.i.b.c.ub a>;

        $r2 = <c.i.b.c.Vb: c.i.b.c.Vb a>;

        $r3 = <c.i.b.c.w: c.i.b.c.w a>;

        $r4 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r5 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r0, $r1, $r2, $r3, $r4);

        <com.google.common.collect.CollectCollectors: java.util.stream.Collector TO_IMMUTABLE_LIST> = $r5;

        $r6 = <c.i.b.c.T: c.i.b.c.T a>;

        $r7 = <c.i.b.c.ca: c.i.b.c.ca a>;

        $r8 = <c.i.b.c.vc: c.i.b.c.vc a>;

        $r9 = <c.i.b.c.Jb: c.i.b.c.Jb a>;

        $r4 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r5 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r6, $r7, $r8, $r9, $r4);

        <com.google.common.collect.CollectCollectors: java.util.stream.Collector TO_IMMUTABLE_SET> = $r5;

        $r10 = <c.i.b.c.lc: c.i.b.c.lc a>;

        $r11 = <c.i.b.c.hc: c.i.b.c.hc a>;

        $r12 = <c.i.b.c.j: c.i.b.c.j a>;

        $r13 = <c.i.b.c.h: c.i.b.c.h a>;

        $r4 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r5 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r10, $r11, $r12, $r13, $r4);

        <com.google.common.collect.CollectCollectors: java.util.stream.Collector TO_IMMUTABLE_RANGE_SET> = $r5;

        return;
    }

    public void <init>()
    {
        com.google.common.collect.CollectCollectors r0;

        r0 := @this: com.google.common.collect.CollectCollectors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.collect.ImmutableSortedMap$Builder a(java.util.Comparator)
    {
        java.util.Comparator $r0;
        com.google.common.collect.ImmutableSortedMap$Builder $r1;

        $r0 := @parameter0: java.util.Comparator;

        $r1 = new com.google.common.collect.ImmutableSortedMap$Builder;

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedMap$Builder: void <init>(java.util.Comparator)>($r0);

        return $r1;
    }

    public static void a(java.util.function.Function, java.util.function.Function, com.google.common.collect.ImmutableBiMap$Builder, java.lang.Object)
    {
        com.google.common.collect.ImmutableBiMap$Builder $r0;
        java.lang.Object $r1, $r4;
        java.util.function.Function $r2, $r3;

        $r2 := @parameter0: java.util.function.Function;

        $r3 := @parameter1: java.util.function.Function;

        $r0 := @parameter2: com.google.common.collect.ImmutableBiMap$Builder;

        $r1 := @parameter3: java.lang.Object;

        $r4 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        $r1 = interfaceinvoke $r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        virtualinvoke $r0.<com.google.common.collect.ImmutableBiMap$Builder: com.google.common.collect.ImmutableBiMap$Builder put(java.lang.Object,java.lang.Object)>($r4, $r1);

        return;
    }

    public static void a(java.util.function.Function, java.util.function.Function, com.google.common.collect.ImmutableMap$Builder, java.lang.Object)
    {
        java.lang.Object $r1, $r4;
        com.google.common.collect.ImmutableMap$Builder $r0;
        java.util.function.Function $r2, $r3;

        $r2 := @parameter0: java.util.function.Function;

        $r3 := @parameter1: java.util.function.Function;

        $r0 := @parameter2: com.google.common.collect.ImmutableMap$Builder;

        $r1 := @parameter3: java.lang.Object;

        $r4 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        $r1 = interfaceinvoke $r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        virtualinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r4, $r1);

        return;
    }

    public static void a(java.util.function.Function, java.util.function.Function, com.google.common.collect.ImmutableRangeMap$Builder, java.lang.Object)
    {
        com.google.common.collect.ImmutableRangeMap$Builder $r0;
        com.google.common.collect.Range $r5;
        java.lang.Object $r1, $r4;
        java.util.function.Function $r2, $r3;

        $r2 := @parameter0: java.util.function.Function;

        $r3 := @parameter1: java.util.function.Function;

        $r0 := @parameter2: com.google.common.collect.ImmutableRangeMap$Builder;

        $r1 := @parameter3: java.lang.Object;

        $r4 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        $r5 = (com.google.common.collect.Range) $r4;

        $r1 = interfaceinvoke $r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        virtualinvoke $r0.<com.google.common.collect.ImmutableRangeMap$Builder: com.google.common.collect.ImmutableRangeMap$Builder put(com.google.common.collect.Range,java.lang.Object)>($r5, $r1);

        return;
    }

    public static void a(java.util.function.Function, java.util.function.Function, com.google.common.collect.ImmutableSortedMap$Builder, java.lang.Object)
    {
        java.lang.Object $r1, $r4;
        com.google.common.collect.ImmutableSortedMap$Builder $r0;
        java.util.function.Function $r2, $r3;

        $r2 := @parameter0: java.util.function.Function;

        $r3 := @parameter1: java.util.function.Function;

        $r0 := @parameter2: com.google.common.collect.ImmutableSortedMap$Builder;

        $r1 := @parameter3: java.lang.Object;

        $r4 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        $r1 = interfaceinvoke $r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        virtualinvoke $r0.<com.google.common.collect.ImmutableSortedMap$Builder: com.google.common.collect.ImmutableSortedMap$Builder put(java.lang.Object,java.lang.Object)>($r4, $r1);

        return;
    }

    public static com.google.common.collect.ImmutableSortedSet$Builder b(java.util.Comparator)
    {
        com.google.common.collect.ImmutableSortedSet$Builder $r1;
        java.util.Comparator $r0;

        $r0 := @parameter0: java.util.Comparator;

        $r1 = new com.google.common.collect.ImmutableSortedSet$Builder;

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedSet$Builder: void <init>(java.util.Comparator)>($r0);

        return $r1;
    }

    public static java.util.stream.Collector toImmutableBiMap(java.util.function.Function, java.util.function.Function)
    {
        c.i.b.c.Pb $r6;
        c.i.b.c.z $r1;
        c.i.b.c.Tb $r0;
        c.i.b.c.tb $r5;
        java.util.function.Function $r3, $r4;
        java.util.stream.Collector $r2;
        java.util.stream.Collector$Characteristics[] $r7;

        $r3 := @parameter0: java.util.function.Function;

        $r4 := @parameter1: java.util.function.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r0 = <c.i.b.c.Tb: c.i.b.c.Tb a>;

        $r1 = new c.i.b.c.z;

        specialinvoke $r1.<c.i.b.c.z: void <init>(java.util.function.Function,java.util.function.Function)>($r3, $r4);

        $r5 = <c.i.b.c.tb: c.i.b.c.tb a>;

        $r6 = <c.i.b.c.Pb: c.i.b.c.Pb a>;

        $r7 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r2 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r0, $r1, $r5, $r6, $r7);

        return $r2;
    }

    public static java.util.stream.Collector toImmutableList()
    {
        java.util.stream.Collector r0;

        r0 = <com.google.common.collect.CollectCollectors: java.util.stream.Collector TO_IMMUTABLE_LIST>;

        return r0;
    }

    public static java.util.stream.Collector toImmutableMap(java.util.function.Function, java.util.function.Function)
    {
        c.i.b.c.C $r1;
        c.i.b.c.e $r0;
        java.util.function.Function $r3, $r4;
        c.i.b.c.a $r6;
        c.i.b.c.bc $r5;
        java.util.stream.Collector $r2;
        java.util.stream.Collector$Characteristics[] $r7;

        $r3 := @parameter0: java.util.function.Function;

        $r4 := @parameter1: java.util.function.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r0 = <c.i.b.c.e: c.i.b.c.e a>;

        $r1 = new c.i.b.c.C;

        specialinvoke $r1.<c.i.b.c.C: void <init>(java.util.function.Function,java.util.function.Function)>($r3, $r4);

        $r5 = <c.i.b.c.bc: c.i.b.c.bc a>;

        $r6 = <c.i.b.c.a: c.i.b.c.a a>;

        $r7 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r2 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r0, $r1, $r5, $r6, $r7);

        return $r2;
    }

    public static java.util.stream.Collector toImmutableRangeMap(java.util.function.Function, java.util.function.Function)
    {
        c.i.b.c.y $r1;
        c.i.b.c.c $r5;
        c.i.b.c.Yb $r0;
        java.util.function.Function $r3, $r4;
        java.util.stream.Collector $r2;
        c.i.b.c.dc $r6;
        java.util.stream.Collector$Characteristics[] $r7;

        $r3 := @parameter0: java.util.function.Function;

        $r4 := @parameter1: java.util.function.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r0 = <c.i.b.c.Yb: c.i.b.c.Yb a>;

        $r1 = new c.i.b.c.y;

        specialinvoke $r1.<c.i.b.c.y: void <init>(java.util.function.Function,java.util.function.Function)>($r3, $r4);

        $r5 = <c.i.b.c.c: c.i.b.c.c a>;

        $r6 = <c.i.b.c.dc: c.i.b.c.dc a>;

        $r7 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r2 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r0, $r1, $r5, $r6, $r7);

        return $r2;
    }

    public static java.util.stream.Collector toImmutableRangeSet()
    {
        java.util.stream.Collector r0;

        r0 = <com.google.common.collect.CollectCollectors: java.util.stream.Collector TO_IMMUTABLE_RANGE_SET>;

        return r0;
    }

    public static java.util.stream.Collector toImmutableSet()
    {
        java.util.stream.Collector r0;

        r0 = <com.google.common.collect.CollectCollectors: java.util.stream.Collector TO_IMMUTABLE_SET>;

        return r0;
    }

    public static java.util.stream.Collector toImmutableSortedMap(java.util.Comparator, java.util.function.Function, java.util.function.Function)
    {
        c.i.b.c.qc $r7;
        c.i.b.c.pc $r8;
        java.util.function.Function $r4, $r5;
        java.util.stream.Collector$Characteristics $r1;
        c.i.b.c.B $r6;
        c.i.b.c.A $r0;
        java.util.stream.Collector $r2;
        java.util.Comparator $r3;
        java.util.stream.Collector$Characteristics[] $r9;

        $r3 := @parameter0: java.util.Comparator;

        $r4 := @parameter1: java.util.function.Function;

        $r5 := @parameter2: java.util.function.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        $r0 = new c.i.b.c.A;

        specialinvoke $r0.<c.i.b.c.A: void <init>(java.util.Comparator)>($r3);

        $r6 = new c.i.b.c.B;

        specialinvoke $r6.<c.i.b.c.B: void <init>(java.util.function.Function,java.util.function.Function)>($r4, $r5);

        $r7 = <c.i.b.c.qc: c.i.b.c.qc a>;

        $r8 = <c.i.b.c.pc: c.i.b.c.pc a>;

        $r9 = newarray (java.util.stream.Collector$Characteristics)[1];

        $r1 = <java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics UNORDERED>;

        $r9[0] = $r1;

        $r2 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r0, $r6, $r7, $r8, $r9);

        return $r2;
    }

    public static java.util.stream.Collector toImmutableSortedSet(java.util.Comparator)
    {
        c.i.b.c.X $r5;
        c.i.b.c.oc $r1;
        c.i.b.c.D $r0;
        c.i.b.c.aa $r2;
        java.util.stream.Collector $r3;
        java.util.Comparator $r4;
        java.util.stream.Collector$Characteristics[] $r6;

        $r4 := @parameter0: java.util.Comparator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r0 = new c.i.b.c.D;

        specialinvoke $r0.<c.i.b.c.D: void <init>(java.util.Comparator)>($r4);

        $r5 = <c.i.b.c.X: c.i.b.c.X a>;

        $r1 = <c.i.b.c.oc: c.i.b.c.oc a>;

        $r2 = <c.i.b.c.aa: c.i.b.c.aa a>;

        $r6 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r3 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r0, $r5, $r1, $r2, $r6);

        return $r3;
    }
}
