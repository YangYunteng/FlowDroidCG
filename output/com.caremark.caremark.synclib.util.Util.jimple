public class com.caremark.caremark.synclib.util.Util extends java.lang.Object
{
    public static final java.lang.String TAG;

    public void <init>()
    {
        com.caremark.caremark.synclib.util.Util r0;

        r0 := @this: com.caremark.caremark.synclib.util.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean compareVersion(java.lang.String, java.lang.String, java.lang.String, int)
    {
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r0, $r1, $r2, $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("incoming->");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --- saved->");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Compare Version", $r4);

        $r0 = staticinvoke <com.caremark.caremark.synclib.util.Util: java.lang.String normalisedVersion(java.lang.String,java.lang.String,int)>($r0, $r2, $i0);

        $r1 = staticinvoke <com.caremark.caremark.synclib.util.Util: java.lang.String normalisedVersion(java.lang.String,java.lang.String,int)>($r1, $r2, $i0);

        $i0 = virtualinvoke $r0.<java.lang.String: int compareTo(java.lang.String)>($r1);

        $z0 = 0;

        if $i0 >= 0 goto label1;

        goto label2;

     label1:
        if $i0 <= 0 goto label2;

        $z0 = 1;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result->");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Compare Version", $r0);

        return $z0;
    }

    public static java.lang.String formatSize(long)
    {
        long $l0;
        byte $b1;
        int $i2, $i3;
        java.lang.StringBuilder $r0, $r3;
        java.lang.String $r1, $r2;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 1024L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label2;

        $l0 = $l0 / 1024L;

        $b1 = $l0 cmp 1024L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        $l0 = $l0 / 1024L;

        $r1 = "MB";

        goto label3;

     label1:
        $r1 = "KB";

        goto label3;

     label2:
        $r1 = null;

     label3:
        $r3 = new java.lang.StringBuilder;

        $r0 = $r3;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $i2 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        $i3 = -3;

        $i2 = $i2 + $i3;

     label4:
        if $i2 <= 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>($i2, 44);

        $i3 = -3;

        $i2 = $i2 + $i3;

        goto label4;

     label5:
        if $r1 == null goto label6;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label6:
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static long formatSizeInt(long)
    {
        int $i2;
        long $l0;
        byte $b1;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 1024L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        $l0 = $l0 / 1024L;

        $b1 = $l0 cmp 1024L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        $l0 = $l0 / 1024L;

     label1:
        return $l0;
    }

    public static java.lang.String formatVersion(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".", "_");

        return $r0;
    }

    public static java.lang.String getCurrentApplicationVersion(android.content.Context)
    {
        android.content.Context $r0;
        com.caremark.caremark.synclib.helper.AnalyticsCaller $r6;
        android.content.pm.PackageManager $r1;
        com.caremark.caremark.synclib.helper.AnalyticsListener $r5;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        android.content.pm.PackageInfo $r3;
        int $i0;
        java.lang.String $r2;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r1 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        $r3 = virtualinvoke $r1.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r2, 0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<android.content.pm.PackageManager$NameNotFoundException: void printStackTrace()>();

        $r5 = staticinvoke <com.caremark.caremark.synclib.helper.AnalyticsListener: com.caremark.caremark.synclib.helper.AnalyticsListener getInstance()>();

        $r6 = virtualinvoke $r5.<com.caremark.caremark.synclib.helper.AnalyticsListener: com.caremark.caremark.synclib.helper.AnalyticsCaller getAnalyticsCaller()>();

        interfaceinvoke $r6.<com.caremark.caremark.synclib.helper.AnalyticsCaller: void callAnalytics(java.lang.String,java.util.HashMap,java.lang.Exception,java.lang.String)>("EXCEPTION", null, $r4, "Util");

        $r3 = null;

     label4:
        if $r3 == null goto label5;

        $i0 = $r3.<android.content.pm.PackageInfo: int versionCode>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        return $r2;

     label5:
        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public static long getFreeInternalMemory(android.content.Context)
    {
        android.content.Context $r0;
        android.os.StatFs $r2;
        long $l0, $l1;
        java.lang.String $r3;
        java.io.File $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r2 = new android.os.StatFs;

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r2.<android.os.StatFs: void <init>(java.lang.String)>($r3);

        $l0 = virtualinvoke $r2.<android.os.StatFs: long getBlockSizeLong()>();

        $l1 = virtualinvoke $r2.<android.os.StatFs: long getAvailableBlocksLong()>();

        $l0 = $l1 * $l0;

        $l0 = staticinvoke <com.caremark.caremark.synclib.util.Util: long formatSizeInt(long)>($l0);

        return $l0;
    }

    public static java.lang.String getStoragePath(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.String $r2;
        java.io.File $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: java.io.File getFilesDir()>();

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r2;
    }

    public static boolean isNetworkAvailable(android.content.Context)
    {
        android.net.ConnectivityManager $r2;
        android.content.Context $r0;
        android.net.NetworkInfo $r3;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r2 = (android.net.ConnectivityManager) $r1;

        $r3 = virtualinvoke $r2.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r3 == null goto label1;

        $z0 = virtualinvoke $r3.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.lang.String normalisedVersion(java.lang.String, java.lang.String, int)
    {
        java.lang.Object[] $r6;
        java.lang.String[] $r3;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r0, $r1;
        java.util.regex.Pattern $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r1, 16);

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>($r0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $i1 = lengthof $r3;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r0 = $r3[$i2];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(115);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r0;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static boolean validPhoneNumber(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?:\\d{3}-){2}\\d{4}");

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <com.caremark.caremark.synclib.util.Util: java.lang.String TAG> = "Util";

        return;
    }
}
