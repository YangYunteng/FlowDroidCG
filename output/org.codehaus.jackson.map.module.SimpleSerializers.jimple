public class org.codehaus.jackson.map.module.SimpleSerializers extends java.lang.Object implements org.codehaus.jackson.map.Serializers
{
    public java.util.HashMap _classMappings;
    public java.util.HashMap _interfaceMappings;

    public void <init>()
    {
        org.codehaus.jackson.map.module.SimpleSerializers r0;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings> = null;

        r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings> = null;

        return;
    }

    private void _addSerializer(java.lang.Class, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        java.lang.Class $r3;
        java.util.HashMap $r4;
        org.codehaus.jackson.map.JsonSerializer $r1;
        org.codehaus.jackson.map.type.ClassKey $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        $r3 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        $r2 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r2.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>($r3);

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings>;

        if $r4 != null goto label1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings> = $r4;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        return;

     label2:
        $r4 = r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings>;

        if $r4 != null goto label3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings> = $r4;

     label3:
        $r4 = r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        return;
    }

    public org.codehaus.jackson.map.JsonSerializer _findInterfaceMapping(java.lang.Class, org.codehaus.jackson.map.type.ClassKey)
    {
        java.lang.Class[] $r3;
        java.util.HashMap $r4;
        org.codehaus.jackson.map.JsonSerializer $r6;
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        int $i0, $i1;
        java.lang.Class $r2;
        java.lang.Object $r5;
        org.codehaus.jackson.map.type.ClassKey $r1;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        $r2 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.map.type.ClassKey;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r2 = $r3[$i1];

        virtualinvoke $r1.<org.codehaus.jackson.map.type.ClassKey: void reset(java.lang.Class)>($r2);

        $r4 = r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (org.codehaus.jackson.map.JsonSerializer) $r5;

        if $r6 == null goto label2;

        return $r6;

     label2:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer _findInterfaceMapping(java.lang.Class,org.codehaus.jackson.map.type.ClassKey)>($r2, $r1);

        if $r6 == null goto label3;

        return $r6;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        return null;
    }

    public void addSerializer(java.lang.Class, org.codehaus.jackson.map.JsonSerializer)
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.JsonSerializer $r2;
        org.codehaus.jackson.map.module.SimpleSerializers r0;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: void _addSerializer(java.lang.Class,org.codehaus.jackson.map.JsonSerializer)>($r1, $r2);

        return;
    }

    public void addSerializer(org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        java.lang.Class $r2;
        java.lang.StringBuilder $r4;
        org.codehaus.jackson.map.JsonSerializer $r1;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        $r1 := @parameter0: org.codehaus.jackson.map.JsonSerializer;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.JsonSerializer: java.lang.Class handledType()>();

        if $r2 == null goto label1;

        if $r2 == class "Ljava/lang/Object;" goto label1;

        specialinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: void _addSerializer(java.lang.Class,org.codehaus.jackson.map.JsonSerializer)>($r2, $r1);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JsonSerializer of type ");

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not define valid handledType() (use alternative registration method?)");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public org.codehaus.jackson.map.JsonSerializer findArraySerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.ArrayType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        org.codehaus.jackson.map.TypeSerializer $r4;
        org.codehaus.jackson.map.JsonSerializer $r5;
        org.codehaus.jackson.map.SerializationConfig $r6;
        org.codehaus.jackson.map.type.ArrayType $r1;
        org.codehaus.jackson.map.BeanDescription $r2;
        org.codehaus.jackson.map.BeanProperty $r3;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        $r6 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.type.ArrayType;

        $r2 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r4 := @parameter4: org.codehaus.jackson.map.TypeSerializer;

        $r5 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>($r6, $r1, $r2, $r3);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer findCollectionLikeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.CollectionLikeType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.type.CollectionLikeType $r1;
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        org.codehaus.jackson.map.TypeSerializer $r4;
        org.codehaus.jackson.map.JsonSerializer $r5;
        org.codehaus.jackson.map.SerializationConfig $r6;
        org.codehaus.jackson.map.BeanDescription $r2;
        org.codehaus.jackson.map.BeanProperty $r3;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        $r6 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.type.CollectionLikeType;

        $r2 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r4 := @parameter4: org.codehaus.jackson.map.TypeSerializer;

        $r5 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>($r6, $r1, $r2, $r3);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer findCollectionSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.CollectionType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        org.codehaus.jackson.map.TypeSerializer $r4;
        org.codehaus.jackson.map.type.CollectionType $r1;
        org.codehaus.jackson.map.JsonSerializer $r5;
        org.codehaus.jackson.map.SerializationConfig $r6;
        org.codehaus.jackson.map.BeanDescription $r2;
        org.codehaus.jackson.map.BeanProperty $r3;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        $r6 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.type.CollectionType;

        $r2 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r4 := @parameter4: org.codehaus.jackson.map.TypeSerializer;

        $r5 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>($r6, $r1, $r2, $r3);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer findMapLikeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.MapLikeType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.JsonSerializer $r4, $r6;
        org.codehaus.jackson.map.SerializationConfig $r7;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        org.codehaus.jackson.map.type.MapLikeType $r1;
        org.codehaus.jackson.map.TypeSerializer $r5;
        org.codehaus.jackson.map.BeanDescription $r2;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        $r7 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.type.MapLikeType;

        $r2 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r4 := @parameter4: org.codehaus.jackson.map.JsonSerializer;

        $r5 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        $r6 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>($r7, $r1, $r2, $r3);

        return $r4;
    }

    public org.codehaus.jackson.map.JsonSerializer findMapSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.MapType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.JsonSerializer $r4, $r6;
        org.codehaus.jackson.map.SerializationConfig $r7;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        org.codehaus.jackson.map.TypeSerializer $r5;
        org.codehaus.jackson.map.type.MapType $r1;
        org.codehaus.jackson.map.BeanDescription $r2;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        $r7 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.type.MapType;

        $r2 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r4 := @parameter4: org.codehaus.jackson.map.JsonSerializer;

        $r5 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        $r6 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty)>($r7, $r1, $r2, $r3);

        return $r4;
    }

    public org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        java.util.HashMap $r8;
        org.codehaus.jackson.map.JsonSerializer $r10;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.module.SimpleSerializers r0;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r5, $r6, $r11;
        java.lang.Object $r9;
        org.codehaus.jackson.map.type.ClassKey $r7;
        org.codehaus.jackson.map.BeanDescription $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.module.SimpleSerializers;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r6 = $r5;

        $r7 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r7.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>($r5);

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings>;

        if $r8 == null goto label5;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r10 = (org.codehaus.jackson.map.JsonSerializer) $r9;

        if $r10 == null goto label5;

        return $r10;

     label1:
        $r8 = r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings>;

        if $r8 == null goto label5;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r10 = (org.codehaus.jackson.map.JsonSerializer) $r9;

        if $r10 == null goto label2;

        return $r10;

     label2:
        $r11 = $r5;

     label3:
        if $r11 == null goto label5;

        virtualinvoke $r7.<org.codehaus.jackson.map.type.ClassKey: void reset(java.lang.Class)>($r11);

        $r8 = r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _classMappings>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r10 = (org.codehaus.jackson.map.JsonSerializer) $r9;

        if $r10 == null goto label4;

        return $r10;

     label4:
        $r11 = virtualinvoke $r11.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label3;

     label5:
        $r8 = r0.<org.codehaus.jackson.map.module.SimpleSerializers: java.util.HashMap _interfaceMappings>;

        if $r8 == null goto label8;

        $r10 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer _findInterfaceMapping(java.lang.Class,org.codehaus.jackson.map.type.ClassKey)>($r5, $r7);

        if $r10 == null goto label6;

        return $r10;

     label6:
        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label8;

     label7:
        $r5 = virtualinvoke $r6.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r6 = $r5;

        if $r5 == null goto label8;

        $r10 = virtualinvoke r0.<org.codehaus.jackson.map.module.SimpleSerializers: org.codehaus.jackson.map.JsonSerializer _findInterfaceMapping(java.lang.Class,org.codehaus.jackson.map.type.ClassKey)>($r5, $r7);

        if $r10 == null goto label7;

        return $r10;

     label8:
        return null;
    }
}
