public class org.codehaus.jackson.map.deser.ArrayDeserializer extends org.codehaus.jackson.map.deser.ContainerDeserializer
{
    public final org.codehaus.jackson.type.JavaType _arrayType;
    public final java.lang.Class _elementClass;
    public final org.codehaus.jackson.map.JsonDeserializer _elementDeserializer;
    public final org.codehaus.jackson.map.TypeDeserializer _elementTypeDeserializer;
    public final boolean _untyped;

    public void <init>(org.codehaus.jackson.map.type.ArrayType, org.codehaus.jackson.map.JsonDeserializer)
    {
        org.codehaus.jackson.map.deser.ArrayDeserializer r0;
        org.codehaus.jackson.map.JsonDeserializer $r2;
        org.codehaus.jackson.map.type.ArrayType $r1;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.map.type.ArrayType;

        $r2 := @parameter1: org.codehaus.jackson.map.JsonDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: void <init>(org.codehaus.jackson.map.type.ArrayType,org.codehaus.jackson.map.JsonDeserializer,org.codehaus.jackson.map.TypeDeserializer)>($r1, $r2, null);

        return;
    }

    public void <init>(org.codehaus.jackson.map.type.ArrayType, org.codehaus.jackson.map.JsonDeserializer, org.codehaus.jackson.map.TypeDeserializer)
    {
        org.codehaus.jackson.map.TypeDeserializer $r2;
        org.codehaus.jackson.map.deser.ArrayDeserializer r0;
        org.codehaus.jackson.type.JavaType $r4;
        org.codehaus.jackson.map.JsonDeserializer $r1;
        java.lang.Class $r5;
        org.codehaus.jackson.map.type.ArrayType $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializer;

        $r3 := @parameter0: org.codehaus.jackson.map.type.ArrayType;

        $r1 := @parameter1: org.codehaus.jackson.map.JsonDeserializer;

        $r2 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.ContainerDeserializer: void <init>(java.lang.Class)>(class "[Ljava/lang/Object;");

        r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.type.JavaType _arrayType> = $r3;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: java.lang.Class _elementClass> = $r5;

        $r5 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: java.lang.Class _elementClass>;

        if $r5 != class "Ljava/lang/Object;" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: boolean _untyped> = $z0;

        r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer> = $r1;

        r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.map.TypeDeserializer _elementTypeDeserializer> = $r2;

        return;
    }

    private final java.lang.Object[] handleNonArray(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        org.codehaus.jackson.JsonToken $r4, $r5;
        java.lang.Object[] $r13;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.map.JsonMappingException $r9;
        org.codehaus.jackson.type.JavaType $r8;
        org.codehaus.jackson.map.JsonDeserializer $r12;
        org.codehaus.jackson.JsonParser $r1;
        boolean $z0;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r3;
        org.codehaus.jackson.map.deser.ArrayDeserializer r0;
        org.codehaus.jackson.map.TypeDeserializer $r11;
        java.lang.Byte[] $r7;
        java.lang.Class $r6;
        java.lang.Object $r10, $r14;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature ACCEPT_SINGLE_VALUE_AS_ARRAY>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r3);

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r4 != $r5 goto label1;

        $r6 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: java.lang.Class _elementClass>;

        if $r6 != class "Ljava/lang/Byte;" goto label1;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: java.lang.Byte[] deserializeFromBase64(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r7;

     label1:
        $r8 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.type.JavaType _arrayType>;

        $r6 = virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r6);

        throw $r9;

     label2:
        $r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r4 != $r5 goto label3;

        $r10 = null;

        goto label5;

     label3:
        $r11 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.map.TypeDeserializer _elementTypeDeserializer>;

        if $r11 != null goto label4;

        $r12 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer>;

        $r10 = virtualinvoke $r12.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        goto label5;

     label4:
        $r12 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer>;

        $r10 = virtualinvoke $r12.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>($r1, $r2, $r11);

     label5:
        $z0 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: boolean _untyped>;

        if $z0 == 0 goto label6;

        $r13 = newarray (java.lang.Object)[1];

        goto label7;

     label6:
        $r6 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: java.lang.Class _elementClass>;

        $r14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r6, 1);

        $r13 = (java.lang.Object[]) $r14;

     label7:
        $r13[0] = $r10;

        return $r13;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        java.lang.Object[] $r2;
        org.codehaus.jackson.map.deser.ArrayDeserializer r0;
        org.codehaus.jackson.map.DeserializationContext $r1;
        org.codehaus.jackson.JsonParser $r3;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializer;

        $r3 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: java.lang.Object[] deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r3, $r1);

        return $r2;
    }

    public java.lang.Object[] deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        java.lang.Object[] $r4;
        org.codehaus.jackson.JsonToken $r6, $r7;
        org.codehaus.jackson.map.deser.ArrayDeserializer r0;
        org.codehaus.jackson.map.DeserializationContext $r1;
        org.codehaus.jackson.map.TypeDeserializer $r2;
        org.codehaus.jackson.map.util.ObjectBuffer $r5;
        int $i0, $i1;
        java.lang.Object $r8;
        org.codehaus.jackson.map.JsonDeserializer $r9;
        java.lang.Class $r10;
        org.codehaus.jackson.JsonParser $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializer;

        $r3 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser: boolean isExpectedStartArrayToken()>();

        if $z0 != 0 goto label1;

        $r4 = specialinvoke r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: java.lang.Object[] handleNonArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r3, $r1);

        return $r4;

     label1:
        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.util.ObjectBuffer leaseObjectBuffer()>();

        $r4 = virtualinvoke $r5.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] resetAndStart()>();

        $r2 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.map.TypeDeserializer _elementTypeDeserializer>;

        $i0 = 0;

     label2:
        $r6 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r7 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r6 == $r7 goto label7;

        $r7 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r6 != $r7 goto label3;

        $r8 = null;

        goto label5;

     label3:
        if $r2 != null goto label4;

        $r9 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer>;

        $r8 = virtualinvoke $r9.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r3, $r1);

        goto label5;

     label4:
        $r9 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer>;

        $r8 = virtualinvoke $r9.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>($r3, $r1, $r2);

     label5:
        $i1 = lengthof $r4;

        if $i0 < $i1 goto label6;

        $r4 = virtualinvoke $r5.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] appendCompletedChunk(java.lang.Object[])>($r4);

        $i0 = 0;

     label6:
        $r4[$i0] = $r8;

        $i0 = $i0 + 1;

        goto label2;

     label7:
        $z0 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: boolean _untyped>;

        if $z0 == 0 goto label8;

        $r4 = virtualinvoke $r5.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] completeAndClearBuffer(java.lang.Object[],int)>($r4, $i0);

        goto label9;

     label8:
        $r10 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: java.lang.Class _elementClass>;

        $r4 = virtualinvoke $r5.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] completeAndClearBuffer(java.lang.Object[],int,java.lang.Class)>($r4, $i0, $r10);

     label9:
        virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: void returnObjectBuffer(org.codehaus.jackson.map.util.ObjectBuffer)>($r5);

        return $r4;
    }

    public java.lang.Byte[] deserializeFromBase64(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        byte[] $r4;
        org.codehaus.jackson.map.deser.ArrayDeserializer r0;
        org.codehaus.jackson.map.DeserializationContext $r2;
        java.lang.Byte[] $r5;
        byte $b2;
        int $i0, $i1;
        org.codehaus.jackson.Base64Variant $r3;
        java.lang.Byte $r6;
        org.codehaus.jackson.JsonParser $r1;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.Base64Variant getBase64Variant()>();

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: byte[] getBinaryValue(org.codehaus.jackson.Base64Variant)>($r3);

        $i0 = lengthof $r4;

        $r5 = newarray (java.lang.Byte)[$i0];

        $i0 = lengthof $r4;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = $r4[$i1];

        $r6 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        $r5[$i1] = $r6;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r5;
    }

    public volatile java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer)
    {
        org.codehaus.jackson.map.TypeDeserializer $r2;
        java.lang.Object[] $r3;
        org.codehaus.jackson.map.deser.ArrayDeserializer r0;
        org.codehaus.jackson.map.DeserializationContext $r1;
        org.codehaus.jackson.JsonParser $r4;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializer;

        $r4 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r2 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: java.lang.Object[] deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>($r4, $r1, $r2);

        return $r3;
    }

    public java.lang.Object[] deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer)
    {
        org.codehaus.jackson.map.TypeDeserializer $r2;
        java.lang.Object[] $r5;
        org.codehaus.jackson.map.deser.ArrayDeserializer r0;
        java.lang.Object $r3;
        org.codehaus.jackson.map.DeserializationContext $r1;
        org.codehaus.jackson.JsonParser $r4;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializer;

        $r4 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r2 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r4, $r1);

        $r5 = (java.lang.Object[]) $r3;

        return $r5;
    }

    public org.codehaus.jackson.map.JsonDeserializer getContentDeserializer()
    {
        org.codehaus.jackson.map.deser.ArrayDeserializer r0;
        org.codehaus.jackson.map.JsonDeserializer r1;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializer;

        r1 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.map.JsonDeserializer _elementDeserializer>;

        return r1;
    }

    public org.codehaus.jackson.type.JavaType getContentType()
    {
        org.codehaus.jackson.map.deser.ArrayDeserializer r0;
        org.codehaus.jackson.type.JavaType $r1;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializer;

        $r1 = r0.<org.codehaus.jackson.map.deser.ArrayDeserializer: org.codehaus.jackson.type.JavaType _arrayType>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        return $r1;
    }
}
