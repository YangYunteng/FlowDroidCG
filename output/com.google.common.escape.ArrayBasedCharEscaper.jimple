public abstract class com.google.common.escape.ArrayBasedCharEscaper extends com.google.common.escape.CharEscaper
{
    public final char[][] replacements;
    public final int replacementsLength;
    public final char safeMax;
    public final char safeMin;

    public void <init>(com.google.common.escape.ArrayBasedEscaperMap, char, char)
    {
        com.google.common.escape.ArrayBasedCharEscaper r0;
        int $i2;
        char $c0, $c1;
        char[][] $r1;
        com.google.common.escape.ArrayBasedEscaperMap $r2;

        r0 := @this: com.google.common.escape.ArrayBasedCharEscaper;

        $r2 := @parameter0: com.google.common.escape.ArrayBasedEscaperMap;

        $c0 := @parameter1: char;

        $c1 := @parameter2: char;

        specialinvoke r0.<com.google.common.escape.CharEscaper: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r2.<com.google.common.escape.ArrayBasedEscaperMap: char[][] getReplacementArray()>();

        r0.<com.google.common.escape.ArrayBasedCharEscaper: char[][] replacements> = $r1;

        $r1 = r0.<com.google.common.escape.ArrayBasedCharEscaper: char[][] replacements>;

        $i2 = lengthof $r1;

        r0.<com.google.common.escape.ArrayBasedCharEscaper: int replacementsLength> = $i2;

        $i2 = (int) $c0;

        if $c1 >= $i2 goto label1;

        $c1 = 0;

        $c0 = 65535;

     label1:
        r0.<com.google.common.escape.ArrayBasedCharEscaper: char safeMin> = $c0;

        r0.<com.google.common.escape.ArrayBasedCharEscaper: char safeMax> = $c1;

        return;
    }

    public void <init>(java.util.Map, char, char)
    {
        com.google.common.escape.ArrayBasedCharEscaper r0;
        java.util.Map $r2;
        char $c0, $c1;
        com.google.common.escape.ArrayBasedEscaperMap $r1;

        r0 := @this: com.google.common.escape.ArrayBasedCharEscaper;

        $r2 := @parameter0: java.util.Map;

        $c0 := @parameter1: char;

        $c1 := @parameter2: char;

        $r1 = staticinvoke <com.google.common.escape.ArrayBasedEscaperMap: com.google.common.escape.ArrayBasedEscaperMap create(java.util.Map)>($r2);

        specialinvoke r0.<com.google.common.escape.ArrayBasedCharEscaper: void <init>(com.google.common.escape.ArrayBasedEscaperMap,char,char)>($r1, $c0, $c1);

        return;
    }

    public final java.lang.String escape(java.lang.String)
    {
        com.google.common.escape.ArrayBasedCharEscaper r0;
        char $c2, $c3;
        char[][] $r2;
        int $i0, $i1, $i4;
        char[] $r3;
        java.lang.String $r1;

        r0 := @this: com.google.common.escape.ArrayBasedCharEscaper;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label5;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i1 = r0.<com.google.common.escape.ArrayBasedCharEscaper: int replacementsLength>;

        $i4 = (int) $c2;

        if $i4 >= $i1 goto label2;

        $r2 = r0.<com.google.common.escape.ArrayBasedCharEscaper: char[][] replacements>;

        $i1 = (int) $c2;

        $r3 = $r2[$i1];

        if $r3 != null goto label4;

     label2:
        $c3 = r0.<com.google.common.escape.ArrayBasedCharEscaper: char safeMax>;

        $i1 = (int) $c2;

        $i4 = (int) $c3;

        if $i1 > $i4 goto label4;

        $c3 = r0.<com.google.common.escape.ArrayBasedCharEscaper: char safeMin>;

        $i1 = (int) $c2;

        $i4 = (int) $c3;

        if $i1 >= $i4 goto label3;

        goto label4;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r1 = virtualinvoke r0.<com.google.common.escape.CharEscaper: java.lang.String escapeSlow(java.lang.String,int)>($r1, $i0);

     label5:
        return $r1;
    }

    public final char[] escape(char)
    {
        com.google.common.escape.ArrayBasedCharEscaper r0;
        int $i1, $i3;
        char[] $r1;
        char $c0, $c2;
        char[][] $r2;

        r0 := @this: com.google.common.escape.ArrayBasedCharEscaper;

        $c0 := @parameter0: char;

        $i1 = r0.<com.google.common.escape.ArrayBasedCharEscaper: int replacementsLength>;

        $i3 = (int) $c0;

        if $i3 >= $i1 goto label1;

        $r2 = r0.<com.google.common.escape.ArrayBasedCharEscaper: char[][] replacements>;

        $i1 = (int) $c0;

        $r1 = $r2[$i1];

        if $r1 == null goto label1;

        return $r1;

     label1:
        $c2 = r0.<com.google.common.escape.ArrayBasedCharEscaper: char safeMin>;

        $i1 = (int) $c0;

        $i3 = (int) $c2;

        if $i1 < $i3 goto label2;

        $c2 = r0.<com.google.common.escape.ArrayBasedCharEscaper: char safeMax>;

        $i1 = (int) $c0;

        $i3 = (int) $c2;

        if $i1 > $i3 goto label2;

        return null;

     label2:
        $r1 = virtualinvoke r0.<com.google.common.escape.ArrayBasedCharEscaper: char[] escapeUnsafe(char)>($c0);

        return $r1;
    }

    public abstract char[] escapeUnsafe(char);
}
