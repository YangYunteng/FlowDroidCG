public class com.google.common.collect.Streams$2Splitr extends com.google.common.collect.Streams$MapWithIndexSpliterator implements java.util.function.IntConsumer, java.util.Spliterator
{
    public int holder;
    public final com.google.common.collect.Streams$IntFunctionWithIndex val$function;

    public void <init>(java.util.Spliterator$OfInt, long, com.google.common.collect.Streams$IntFunctionWithIndex)
    {
        com.google.common.collect.Streams$2Splitr r0;
        java.util.Spliterator$OfInt $r1;
        long $l0;
        com.google.common.collect.Streams$IntFunctionWithIndex $r2;

        r0 := @this: com.google.common.collect.Streams$2Splitr;

        $r1 := @parameter0: java.util.Spliterator$OfInt;

        $l0 := @parameter1: long;

        $r2 := @parameter2: com.google.common.collect.Streams$IntFunctionWithIndex;

        r0.<com.google.common.collect.Streams$2Splitr: com.google.common.collect.Streams$IntFunctionWithIndex val$function> = $r2;

        specialinvoke r0.<com.google.common.collect.Streams$MapWithIndexSpliterator: void <init>(java.util.Spliterator,long)>($r1, $l0);

        return;
    }

    public void accept(int)
    {
        com.google.common.collect.Streams$2Splitr r0;
        int $i0;

        r0 := @this: com.google.common.collect.Streams$2Splitr;

        $i0 := @parameter0: int;

        r0.<com.google.common.collect.Streams$2Splitr: int holder> = $i0;

        return;
    }

    public com.google.common.collect.Streams$2Splitr createSplit(java.util.Spliterator$OfInt, long)
    {
        com.google.common.collect.Streams$2Splitr r0, $r2;
        java.util.Spliterator$OfInt $r1;
        long $l0;
        com.google.common.collect.Streams$IntFunctionWithIndex $r3;

        r0 := @this: com.google.common.collect.Streams$2Splitr;

        $r1 := @parameter0: java.util.Spliterator$OfInt;

        $l0 := @parameter1: long;

        $r2 = new com.google.common.collect.Streams$2Splitr;

        $r3 = r0.<com.google.common.collect.Streams$2Splitr: com.google.common.collect.Streams$IntFunctionWithIndex val$function>;

        specialinvoke $r2.<com.google.common.collect.Streams$2Splitr: void <init>(java.util.Spliterator$OfInt,long,com.google.common.collect.Streams$IntFunctionWithIndex)>($r1, $l0, $r3);

        return $r2;
    }

    public volatile com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator, long)
    {
        com.google.common.collect.Streams$2Splitr r0;
        java.util.Spliterator$OfInt $r2;
        long $l0;
        java.util.Spliterator $r1;

        r0 := @this: com.google.common.collect.Streams$2Splitr;

        $r1 := @parameter0: java.util.Spliterator;

        $l0 := @parameter1: long;

        $r2 = (java.util.Spliterator$OfInt) $r1;

        r0 = virtualinvoke r0.<com.google.common.collect.Streams$2Splitr: com.google.common.collect.Streams$2Splitr createSplit(java.util.Spliterator$OfInt,long)>($r2, $l0);

        return r0;
    }

    public boolean tryAdvance(java.util.function.Consumer)
    {
        com.google.common.collect.Streams$2Splitr r0;
        long $l1, $l2;
        com.google.common.collect.Streams$IntFunctionWithIndex $r4;
        java.util.function.Consumer $r1;
        java.util.Spliterator$OfInt $r3;
        int $i0;
        java.lang.Object $r5;
        java.util.Spliterator $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Streams$2Splitr;

        $r1 := @parameter0: java.util.function.Consumer;

        $r2 = r0.<com.google.common.collect.Streams$MapWithIndexSpliterator: java.util.Spliterator fromSpliterator>;

        $r3 = (java.util.Spliterator$OfInt) $r2;

        $z0 = interfaceinvoke $r3.<java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>(r0);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.google.common.collect.Streams$2Splitr: com.google.common.collect.Streams$IntFunctionWithIndex val$function>;

        $i0 = r0.<com.google.common.collect.Streams$2Splitr: int holder>;

        $l1 = r0.<com.google.common.collect.Streams$MapWithIndexSpliterator: long index>;

        $l2 = 1L + $l1;

        r0.<com.google.common.collect.Streams$MapWithIndexSpliterator: long index> = $l2;

        $r5 = interfaceinvoke $r4.<com.google.common.collect.Streams$IntFunctionWithIndex: java.lang.Object apply(int,long)>($i0, $l1);

        interfaceinvoke $r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r5);

        return 1;

     label1:
        return 0;
    }
}
