public class org.dom4j.datatype.DatatypeElement extends org.dom4j.tree.DefaultElement implements com.sun.msv.datatype.SerializationContext, org.relaxng.datatype.ValidationContext
{
    public java.lang.Object data;
    public com.sun.msv.datatype.xsd.XSDatatype datatype;

    public void <init>(org.dom4j.QName, int, com.sun.msv.datatype.xsd.XSDatatype)
    {
        org.dom4j.datatype.DatatypeElement r0;
        int $i0;
        com.sun.msv.datatype.xsd.XSDatatype $r2;
        org.dom4j.QName $r1;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: org.dom4j.QName;

        $i0 := @parameter1: int;

        $r2 := @parameter2: com.sun.msv.datatype.xsd.XSDatatype;

        specialinvoke r0.<org.dom4j.tree.DefaultElement: void <init>(org.dom4j.QName,int)>($r1, $i0);

        r0.<org.dom4j.datatype.DatatypeElement: com.sun.msv.datatype.xsd.XSDatatype datatype> = $r2;

        return;
    }

    public void <init>(org.dom4j.QName, com.sun.msv.datatype.xsd.XSDatatype)
    {
        com.sun.msv.datatype.xsd.XSDatatype $r2;
        org.dom4j.QName $r1;
        org.dom4j.datatype.DatatypeElement r0;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 := @parameter1: com.sun.msv.datatype.xsd.XSDatatype;

        specialinvoke r0.<org.dom4j.tree.DefaultElement: void <init>(org.dom4j.QName)>($r1);

        r0.<org.dom4j.datatype.DatatypeElement: com.sun.msv.datatype.xsd.XSDatatype datatype> = $r2;

        return;
    }

    public org.dom4j.Element addText(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.datatype.DatatypeElement r0;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.dom4j.datatype.DatatypeElement: void validate(java.lang.String)>($r1);

        specialinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element addText(java.lang.String)>($r1);

        return r0;
    }

    public void childAdded(org.dom4j.Node)
    {
        org.dom4j.datatype.DatatypeElement r0;
        org.dom4j.Node $r1;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: org.dom4j.Node;

        r0.<org.dom4j.datatype.DatatypeElement: java.lang.Object data> = null;

        specialinvoke r0.<org.dom4j.tree.AbstractElement: void childAdded(org.dom4j.Node)>($r1);

        return;
    }

    public void childRemoved(org.dom4j.Node)
    {
        org.dom4j.datatype.DatatypeElement r0;
        org.dom4j.Node $r1;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: org.dom4j.Node;

        r0.<org.dom4j.datatype.DatatypeElement: java.lang.Object data> = null;

        specialinvoke r0.<org.dom4j.tree.AbstractElement: void childRemoved(org.dom4j.Node)>($r1);

        return;
    }

    public java.lang.String getBaseUri()
    {
        org.dom4j.datatype.DatatypeElement r0;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        return null;
    }

    public java.lang.Object getData()
    {
        org.dom4j.datatype.DatatypeElement r0;
        int $i0;
        com.sun.msv.datatype.xsd.XSDatatype $r3;
        java.lang.Object $r1;
        java.lang.String $r2;
        com.sun.msv.datatype.DatabindableDatatype $r4;
        boolean $z0;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 = r0.<org.dom4j.datatype.DatatypeElement: java.lang.Object data>;

        if $r1 != null goto label2;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getTextTrim()>();

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r3 = r0.<org.dom4j.datatype.DatatypeElement: com.sun.msv.datatype.xsd.XSDatatype datatype>;

        $z0 = $r3 instanceof com.sun.msv.datatype.DatabindableDatatype;

        if $z0 == 0 goto label1;

        $r4 = (com.sun.msv.datatype.DatabindableDatatype) $r3;

        $r1 = interfaceinvoke $r4.<com.sun.msv.datatype.DatabindableDatatype: java.lang.Object createJavaObject(java.lang.String,org.relaxng.datatype.ValidationContext)>($r2, r0);

        r0.<org.dom4j.datatype.DatatypeElement: java.lang.Object data> = $r1;

        goto label2;

     label1:
        $r1 = interfaceinvoke $r3.<com.sun.msv.datatype.xsd.XSDatatype: java.lang.Object createValue(java.lang.String,org.relaxng.datatype.ValidationContext)>($r2, r0);

        r0.<org.dom4j.datatype.DatatypeElement: java.lang.Object data> = $r1;

     label2:
        $r1 = r0.<org.dom4j.datatype.DatatypeElement: java.lang.Object data>;

        return $r1;
    }

    public java.lang.String getNamespacePrefix(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.Namespace $r2;
        org.dom4j.datatype.DatatypeElement r0;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: org.dom4j.Namespace getNamespaceForURI(java.lang.String)>($r1);

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        return $r1;

     label1:
        return null;
    }

    public com.sun.msv.datatype.xsd.XSDatatype getXSDatatype()
    {
        com.sun.msv.datatype.xsd.XSDatatype r1;
        org.dom4j.datatype.DatatypeElement r0;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        r1 = r0.<org.dom4j.datatype.DatatypeElement: com.sun.msv.datatype.xsd.XSDatatype datatype>;

        return r1;
    }

    public boolean isNotation(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.datatype.DatatypeElement r0;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean isUnparsedEntity(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.datatype.DatatypeElement r0;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: java.lang.String;

        return 1;
    }

    public java.lang.String resolveNamespacePrefix(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.Namespace $r2;
        org.dom4j.datatype.DatatypeElement r0;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)>($r1);

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getURI()>();

        return $r1;

     label1:
        return null;
    }

    public void setData(java.lang.Object)
    {
        org.dom4j.datatype.DatatypeElement r0;
        com.sun.msv.datatype.xsd.XSDatatype $r3;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.dom4j.datatype.DatatypeElement: com.sun.msv.datatype.xsd.XSDatatype datatype>;

        $r2 = interfaceinvoke $r3.<com.sun.msv.datatype.xsd.XSDatatype: java.lang.String convertToLexicalValue(java.lang.Object,com.sun.msv.datatype.SerializationContext)>($r1, r0);

        virtualinvoke r0.<org.dom4j.datatype.DatatypeElement: void validate(java.lang.String)>($r2);

        r0.<org.dom4j.datatype.DatatypeElement: java.lang.Object data> = $r1;

        virtualinvoke r0.<org.dom4j.datatype.DatatypeElement: void setText(java.lang.String)>($r2);

        return;
    }

    public void setText(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.datatype.DatatypeElement r0;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.dom4j.datatype.DatatypeElement: void validate(java.lang.String)>($r1);

        specialinvoke r0.<org.dom4j.tree.AbstractElement: void setText(java.lang.String)>($r1);

        return;
    }

    public java.lang.String toString()
    {
        java.util.List $r4;
        org.dom4j.datatype.DatatypeElement r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.Object $r5;
        java.lang.String $r3;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 = new java.lang.StringBuilder;

        $r2 = class "Lorg/dom4j/datatype/DatatypeElement;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [Element: <");

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getQualifiedName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attributes: ");

        $r4 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: java.util.List attributeList()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data: ");

        $r5 = virtualinvoke r0.<org.dom4j.datatype.DatatypeElement: java.lang.Object getData()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" />]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void validate(java.lang.String)
    {
        java.lang.Throwable $r3;
        org.dom4j.datatype.DatatypeElement r0;
        com.sun.msv.datatype.xsd.XSDatatype $r2;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r4;
        org.relaxng.datatype.DatatypeException $r5;

        r0 := @this: org.dom4j.datatype.DatatypeElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.datatype.DatatypeElement: com.sun.msv.datatype.xsd.XSDatatype datatype>;

     label1:
        interfaceinvoke $r2.<com.sun.msv.datatype.xsd.XSDatatype: void checkValid(java.lang.String,org.relaxng.datatype.ValidationContext)>($r1, r0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = (org.relaxng.datatype.DatatypeException) $r3;

        $r1 = virtualinvoke $r5.<org.relaxng.datatype.DatatypeException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

        catch org.relaxng.datatype.DatatypeException from label1 to label2 with label3;
    }
}
