public final class com.google.common.base.Splitter$MapSplitter extends java.lang.Object
{
    public static final java.lang.String INVALID_ENTRY_MESSAGE;
    public final com.google.common.base.Splitter entrySplitter;
    public final com.google.common.base.Splitter outerSplitter;

    public void <init>(com.google.common.base.Splitter, com.google.common.base.Splitter)
    {
        com.google.common.base.Splitter$MapSplitter r0;
        com.google.common.base.Splitter $r1, $r2;

        r0 := @this: com.google.common.base.Splitter$MapSplitter;

        $r1 := @parameter0: com.google.common.base.Splitter;

        $r2 := @parameter1: com.google.common.base.Splitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.base.Splitter$MapSplitter: com.google.common.base.Splitter outerSplitter> = $r1;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r1 = $r2;

        r0.<com.google.common.base.Splitter$MapSplitter: com.google.common.base.Splitter entrySplitter> = $r1;

        return;
    }

    public void <init>(com.google.common.base.Splitter, com.google.common.base.Splitter, com.google.common.base.Splitter$1)
    {
        com.google.common.base.Splitter$MapSplitter r0;
        com.google.common.base.Splitter $r1, $r2;
        com.google.common.base.Splitter$1 $r3;

        r0 := @this: com.google.common.base.Splitter$MapSplitter;

        $r1 := @parameter0: com.google.common.base.Splitter;

        $r2 := @parameter1: com.google.common.base.Splitter;

        $r3 := @parameter2: com.google.common.base.Splitter$1;

        specialinvoke r0.<com.google.common.base.Splitter$MapSplitter: void <init>(com.google.common.base.Splitter,com.google.common.base.Splitter)>($r1, $r2);

        return;
    }

    public java.util.Map split(java.lang.CharSequence)
    {
        java.lang.CharSequence $r2;
        java.util.Iterator $r5, $r8;
        java.lang.Iterable $r4;
        java.util.LinkedHashMap $r1;
        java.util.Map $r11;
        com.google.common.base.Splitter$MapSplitter r0;
        java.lang.Object $r6;
        java.lang.String $r7, $r9, $r10;
        com.google.common.base.Splitter $r3;
        boolean $z0;

        r0 := @this: com.google.common.base.Splitter$MapSplitter;

        $r2 := @parameter0: java.lang.CharSequence;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        $r3 = r0.<com.google.common.base.Splitter$MapSplitter: com.google.common.base.Splitter outerSplitter>;

        $r4 = virtualinvoke $r3.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>($r2);

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        $r3 = r0.<com.google.common.base.Splitter$MapSplitter: com.google.common.base.Splitter entrySplitter>;

        $r8 = staticinvoke <com.google.common.base.Splitter: java.util.Iterator access$000(com.google.common.base.Splitter,java.lang.CharSequence)>($r3, $r7);

        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Chunk [%s] is not a valid entry", $r7);

        $r6 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.String) $r6;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Duplicate key [%s] found.", $r9);

        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Chunk [%s] is not a valid entry", $r7);

        $r6 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.String) $r6;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Chunk [%s] is not a valid entry", $r7);

        goto label1;

     label2:
        $r11 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r11;
    }

    public static void <clinit>()
    {
        <com.google.common.base.Splitter$MapSplitter: java.lang.String INVALID_ENTRY_MESSAGE> = "Chunk [%s] is not a valid entry";

        return;
    }
}
