public final class com.google.common.graph.GraphConstants extends java.lang.Object
{
    public static final int DEFAULT_EDGE_COUNT;
    public static final int DEFAULT_NODE_COUNT;
    public static final java.lang.String EDGE_ALREADY_EXISTS;
    public static final java.lang.String EDGE_NOT_IN_GRAPH;
    public static final int EXPECTED_DEGREE;
    public static final int INNER_CAPACITY;
    public static final float INNER_LOAD_FACTOR;
    public static final java.lang.String MULTIPLE_EDGES_CONNECTING;
    public static final java.lang.String NODE_NOT_IN_GRAPH;
    public static final java.lang.String NOT_AVAILABLE_ON_UNDIRECTED;
    public static final java.lang.String PARALLEL_EDGES_NOT_ALLOWED;
    public static final java.lang.String REUSING_EDGE;
    public static final java.lang.String SELF_LOOPS_NOT_ALLOWED;

    public void <init>()
    {
        com.google.common.graph.GraphConstants r0;

        r0 := @this: com.google.common.graph.GraphConstants;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <com.google.common.graph.GraphConstants: java.lang.String SELF_LOOPS_NOT_ALLOWED> = "Cannot add self-loop edge on node %s, as self-loops are not allowed. To construct a graph that allows self-loops, call allowsSelfLoops(true) on the Builder.";

        <com.google.common.graph.GraphConstants: java.lang.String REUSING_EDGE> = "Edge %s already exists between the following nodes: %s, so it cannot be reused to connect the following nodes: %s.";

        <com.google.common.graph.GraphConstants: java.lang.String PARALLEL_EDGES_NOT_ALLOWED> = "Nodes %s and %s are already connected by a different edge. To construct a graph that allows parallel edges, call allowsParallelEdges(true) on the Builder.";

        <com.google.common.graph.GraphConstants: java.lang.String NOT_AVAILABLE_ON_UNDIRECTED> = "Cannot call source()/target() on a EndpointPair from an undirected graph. Consider calling adjacentNode(node) if you already have a node, or nodeU()/nodeV() if you don\'t.";

        <com.google.common.graph.GraphConstants: java.lang.String NODE_NOT_IN_GRAPH> = "Node %s is not an element of this graph.";

        <com.google.common.graph.GraphConstants: java.lang.String MULTIPLE_EDGES_CONNECTING> = "Cannot call edgeConnecting() when parallel edges exist between %s and %s. Consider calling edgesConnecting() instead.";

        <com.google.common.graph.GraphConstants: float INNER_LOAD_FACTOR> = 1.0F;

        <com.google.common.graph.GraphConstants: int INNER_CAPACITY> = 2;

        <com.google.common.graph.GraphConstants: int EXPECTED_DEGREE> = 2;

        <com.google.common.graph.GraphConstants: java.lang.String EDGE_NOT_IN_GRAPH> = "Edge %s is not an element of this graph.";

        <com.google.common.graph.GraphConstants: java.lang.String EDGE_ALREADY_EXISTS> = "Edge %s already exists in the graph.";

        <com.google.common.graph.GraphConstants: int DEFAULT_NODE_COUNT> = 10;

        <com.google.common.graph.GraphConstants: int DEFAULT_EDGE_COUNT> = 20;

        return;
    }
}
