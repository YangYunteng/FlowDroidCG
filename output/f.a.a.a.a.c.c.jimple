public class f.a.a.a.a.c.c extends java.util.concurrent.FutureTask
{
    public final f.a.a.a.a.c.e a;

    public void <init>(f.a.a.a.a.c.e, java.util.concurrent.Callable)
    {
        f.a.a.a.a.c.e $r1;
        java.util.concurrent.Callable $r2;
        f.a.a.a.a.c.c r0;

        r0 := @this: f.a.a.a.a.c.c;

        $r1 := @parameter0: f.a.a.a.a.c.e;

        $r2 := @parameter1: java.util.concurrent.Callable;

        r0.<f.a.a.a.a.c.c: f.a.a.a.a.c.e a> = $r1;

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>($r2);

        return;
    }

    public void done()
    {
        java.lang.Throwable $r6;
        java.util.concurrent.CancellationException $r1;
        java.lang.RuntimeException $r5;
        java.util.concurrent.ExecutionException $r4;
        java.lang.InterruptedException $r7;
        f.a.a.a.a.c.e $r2;
        java.lang.Object $r3;
        f.a.a.a.a.c.c r0;

        r0 := @this: f.a.a.a.a.c.c;

        $r2 = r0.<f.a.a.a.a.c.c: f.a.a.a.a.c.e a>;

     label1:
        $r3 = virtualinvoke r0.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        staticinvoke <f.a.a.a.a.c.e: void b(f.a.a.a.a.c.e,java.lang.Object)>($r2, $r3);

     label2:
        return;

     label3:
        $r2 = r0.<f.a.a.a.a.c.c: f.a.a.a.a.c.e a>;

        staticinvoke <f.a.a.a.a.c.e: void b(f.a.a.a.a.c.e,java.lang.Object)>($r2, null);

        return;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke $r4.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("An error occured while executing doInBackground()", $r6);

        throw $r5;

     label5:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>("AsyncTask", $r7);

        return;

     label6:
        $r1 := @caughtexception;

        goto label3;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
        catch java.util.concurrent.CancellationException from label1 to label2 with label6;
    }
}
