public abstract class org.codehaus.jackson.JsonNode extends java.lang.Object implements java.lang.Iterable
{
    public static final java.util.List NO_NODES;
    public static final java.util.List NO_STRINGS;

    static void <clinit>()
    {
        java.util.List $r0;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        <org.codehaus.jackson.JsonNode: java.util.List NO_NODES> = $r0;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        <org.codehaus.jackson.JsonNode: java.util.List NO_STRINGS> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract org.codehaus.jackson.JsonToken asToken();

    public abstract boolean equals(java.lang.Object);

    public abstract org.codehaus.jackson.JsonNode findParent(java.lang.String);

    public final java.util.List findParents(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: java.util.List findParents(java.lang.String,java.util.List)>($r1, null);

        if $r2 != null goto label1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        return $r2;
    }

    public abstract java.util.List findParents(java.lang.String, java.util.List);

    public abstract org.codehaus.jackson.JsonNode findPath(java.lang.String);

    public abstract org.codehaus.jackson.JsonNode findValue(java.lang.String);

    public final java.util.List findValues(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: java.util.List findValues(java.lang.String,java.util.List)>($r1, null);

        if $r2 != null goto label1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        return $r2;
    }

    public abstract java.util.List findValues(java.lang.String, java.util.List);

    public final java.util.List findValuesAsText(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: java.util.List findValuesAsText(java.lang.String,java.util.List)>($r1, null);

        if $r2 != null goto label1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        return $r2;
    }

    public abstract java.util.List findValuesAsText(java.lang.String, java.util.List);

    public org.codehaus.jackson.JsonNode get(int)
    {
        int $i0;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $i0 := @parameter0: int;

        return null;
    }

    public org.codehaus.jackson.JsonNode get(java.lang.String)
    {
        java.lang.String $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.math.BigInteger getBigIntegerValue()
    {
        java.math.BigInteger r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        r1 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return r1;
    }

    public byte[] getBinaryValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return null;
    }

    public boolean getBooleanValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public java.math.BigDecimal getDecimalValue()
    {
        java.math.BigDecimal r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        r1 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        return r1;
    }

    public double getDoubleValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0.0;
    }

    public final org.codehaus.jackson.JsonNode getElementValue(int)
    {
        int $i0;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(int)>($i0);

        return r0;
    }

    public java.util.Iterator getElements()
    {
        java.util.List $r2;
        java.util.Iterator $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r2 = <org.codehaus.jackson.JsonNode: java.util.List NO_NODES>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r1;
    }

    public java.util.Iterator getFieldNames()
    {
        java.util.List $r2;
        java.util.Iterator $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r2 = <org.codehaus.jackson.JsonNode: java.util.List NO_STRINGS>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r1;
    }

    public final org.codehaus.jackson.JsonNode getFieldValue(java.lang.String)
    {
        java.lang.String $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r1 := @parameter0: java.lang.String;

        r0 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(java.lang.String)>($r1);

        return r0;
    }

    public java.util.Iterator getFields()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        return $r2;
    }

    public int getIntValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public long getLongValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0L;
    }

    public abstract org.codehaus.jackson.JsonParser$NumberType getNumberType();

    public java.lang.Number getNumberValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return null;
    }

    public final org.codehaus.jackson.JsonNode getPath(int)
    {
        int $i0;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode path(int)>($i0);

        return r0;
    }

    public final org.codehaus.jackson.JsonNode getPath(java.lang.String)
    {
        java.lang.String $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r1 := @parameter0: java.lang.String;

        r0 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode path(java.lang.String)>($r1);

        return r0;
    }

    public java.lang.String getTextValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return null;
    }

    public boolean getValueAsBoolean()
    {
        org.codehaus.jackson.JsonNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: boolean getValueAsBoolean(boolean)>(0);

        return $z0;
    }

    public boolean getValueAsBoolean(boolean)
    {
        org.codehaus.jackson.JsonNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $z0 := @parameter0: boolean;

        return $z0;
    }

    public double getValueAsDouble()
    {
        org.codehaus.jackson.JsonNode r0;
        double $d0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $d0 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: double getValueAsDouble(double)>(0.0);

        return $d0;
    }

    public double getValueAsDouble(double)
    {
        org.codehaus.jackson.JsonNode r0;
        double $d0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $d0 := @parameter0: double;

        return $d0;
    }

    public int getValueAsInt()
    {
        int $i0;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: int getValueAsInt(int)>(0);

        return $i0;
    }

    public int getValueAsInt(int)
    {
        int $i0;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $i0 := @parameter0: int;

        return $i0;
    }

    public long getValueAsLong()
    {
        int $i0;
        long $l1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: int getValueAsInt(int)>(0);

        $l1 = (long) $i0;

        return $l1;
    }

    public long getValueAsLong(long)
    {
        long $l0;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $l0 := @parameter0: long;

        return $l0;
    }

    public abstract java.lang.String getValueAsText();

    public boolean has(int)
    {
        int $i0;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(int)>($i0);

        if r0 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean has(java.lang.String)
    {
        java.lang.String $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r1 := @parameter0: java.lang.String;

        r0 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(java.lang.String)>($r1);

        if r0 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isArray()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isBigDecimal()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isBigInteger()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isBinary()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isBoolean()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isContainerNode()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isDouble()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isFloatingPointNumber()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isInt()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isIntegralNumber()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isLong()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isMissingNode()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isNull()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isNumber()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isObject()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isPojo()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isTextual()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isValueNode()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public final java.util.Iterator iterator()
    {
        java.util.Iterator $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: java.util.Iterator getElements()>();

        return $r1;
    }

    public abstract org.codehaus.jackson.JsonNode path(int);

    public abstract org.codehaus.jackson.JsonNode path(java.lang.String);

    public int size()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public abstract java.lang.String toString();

    public abstract org.codehaus.jackson.JsonParser traverse();

    public org.codehaus.jackson.JsonNode 'with'(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JsonNode not of type ObjectNode (but ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), can not call with() on it");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    public abstract void writeTo(org.codehaus.jackson.JsonGenerator);
}
