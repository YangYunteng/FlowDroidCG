public final class com.google.common.base.Throwables extends java.lang.Object
{
    public static final java.lang.String JAVA_LANG_ACCESS_CLASSNAME;
    public static final java.lang.String SHARED_SECRETS_CLASSNAME;
    public static final java.lang.reflect.Method getStackTraceDepthMethod;
    public static final java.lang.reflect.Method getStackTraceElementMethod;
    public static final java.lang.Object jla;

    static void <clinit>()
    {
        java.lang.Object $r0;
        java.lang.reflect.Method $r1, $r2;

        <com.google.common.base.Throwables: java.lang.String SHARED_SECRETS_CLASSNAME> = "sun.misc.SharedSecrets";

        <com.google.common.base.Throwables: java.lang.String JAVA_LANG_ACCESS_CLASSNAME> = "sun.misc.JavaLangAccess";

        $r0 = staticinvoke <com.google.common.base.Throwables: java.lang.Object getJLA()>();

        <com.google.common.base.Throwables: java.lang.Object jla> = $r0;

        $r0 = <com.google.common.base.Throwables: java.lang.Object jla>;

        $r1 = null;

        if $r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = staticinvoke <com.google.common.base.Throwables: java.lang.reflect.Method getGetMethod()>();

     label2:
        <com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceElementMethod> = $r2;

        $r0 = <com.google.common.base.Throwables: java.lang.Object jla>;

        if $r0 != null goto label3;

        goto label4;

     label3:
        $r1 = staticinvoke <com.google.common.base.Throwables: java.lang.reflect.Method getSizeMethod()>();

     label4:
        <com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceDepthMethod> = $r1;

        return;
    }

    public void <init>()
    {
        com.google.common.base.Throwables r0;

        r0 := @this: com.google.common.base.Throwables;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.reflect.Method access$000()
    {
        java.lang.reflect.Method r0;

        r0 = <com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceElementMethod>;

        return r0;
    }

    public static java.lang.Object access$100()
    {
        java.lang.Object r0;

        r0 = <com.google.common.base.Throwables: java.lang.Object jla>;

        return r0;
    }

    public static java.lang.Object access$200(java.lang.reflect.Method, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object $r0;
        java.lang.Object[] $r1;
        java.lang.reflect.Method $r2;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object[];

        $r0 = staticinvoke <com.google.common.base.Throwables: java.lang.Object invokeAccessibleNonThrowingMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, $r0, $r1);

        return $r0;
    }

    public static java.lang.reflect.Method access$300()
    {
        java.lang.reflect.Method r0;

        r0 = <com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceDepthMethod>;

        return r0;
    }

    public static java.util.List getCausalChain(java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r2, $r3;
        java.util.List $r5;
        java.lang.IllegalArgumentException $r4;
        java.util.ArrayList $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(4);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r0);

        $z0 = 0;

        $r2 = $r0;

     label1:
        $r3 = virtualinvoke $r0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r0 = $r3;

        if $r3 == null goto label4;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        if $r3 == $r2 goto label3;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

     label2:
        $z0 = $z0 ^ 1;

        goto label1;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Loop in causal chain detected.", $r3);

        throw $r4;

     label4:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r5;
    }

    public static java.lang.Throwable getCauseAs(java.lang.Throwable, java.lang.Class)
    {
        java.lang.Throwable $r0, $r2;
        java.lang.Class $r1;
        java.lang.Object $r3;
        java.lang.ClassCastException $r4;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.Class;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2);

        $r2 = (java.lang.Throwable) $r3;

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.ClassCastException: java.lang.Throwable initCause(java.lang.Throwable)>($r0);

        throw $r4;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static java.lang.reflect.Method getGetMethod()
    {
        java.lang.Class[] $r1;
        java.lang.Class $r2;
        java.lang.reflect.Method $r0;

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Ljava/lang/Throwable;";

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r1[1] = $r2;

        $r0 = staticinvoke <com.google.common.base.Throwables: java.lang.reflect.Method getJlaMethod(java.lang.String,java.lang.Class[])>("getStackTraceElement", $r1);

        return $r0;
    }

    public static java.lang.Object getJLA()
    {
        java.lang.Throwable $r1;
        java.lang.Object[] $r4;
        java.lang.Class[] $r0;
        java.lang.Class $r2;
        java.lang.Object $r5;
        java.lang.reflect.Method $r3;
        java.lang.ThreadDeath $r6;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.misc.SharedSecrets", 0, null);

     label2:
        $r0 = newarray (java.lang.Class)[0];

     label3:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getJavaLangAccess", $r0);

     label4:
        $r4 = newarray (java.lang.Object)[0];

     label5:
        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label6:
        return $r5;

     label7:
        $r6 := @caughtexception;

        throw $r6;

     label8:
        $r1 := @caughtexception;

        return null;

        catch java.lang.ThreadDeath from label1 to label2 with label7;
        catch java.lang.ThreadDeath from label3 to label4 with label7;
        catch java.lang.ThreadDeath from label5 to label6 with label7;
        catch java.lang.Throwable from label1 to label6 with label8;
    }

    public static transient java.lang.reflect.Method getJlaMethod(java.lang.String, java.lang.Class[])
    {
        java.lang.Throwable $r1;
        java.lang.Class[] $r0;
        java.lang.Class $r3;
        java.lang.String $r2;
        java.lang.reflect.Method $r4;
        java.lang.ThreadDeath $r5;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.Class[];

     label1:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.misc.JavaLangAccess", 0, null);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r2, $r0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        throw $r5;

     label4:
        $r1 := @caughtexception;

        return null;

        catch java.lang.ThreadDeath from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public static java.lang.Throwable getRootCause(java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Throwable;

        $z0 = 0;

        $r1 = $r0;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r2 == null goto label4;

        if $r2 == $r1 goto label3;

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

     label2:
        $z0 = $z0 ^ 1;

        $r0 = $r2;

        goto label1;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Loop in causal chain detected.", $r2);

        throw $r3;

     label4:
        return $r0;
    }

    public static java.lang.reflect.Method getSizeMethod()
    {
        java.lang.Throwable $r7;
        java.lang.UnsupportedOperationException $r0;
        java.lang.IllegalAccessException $r1;
        java.lang.Object[] $r6;
        java.lang.Class[] $r3;
        java.lang.reflect.InvocationTargetException $r2;
        java.lang.Object $r5;
        java.lang.reflect.Method $r4;

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/lang/Throwable;";

     label01:
        $r4 = staticinvoke <com.google.common.base.Throwables: java.lang.reflect.Method getJlaMethod(java.lang.String,java.lang.Class[])>("getStackTraceDepth", $r3);

     label02:
        if $r4 != null goto label03;

        return null;

     label03:
        $r5 = staticinvoke <com.google.common.base.Throwables: java.lang.Object getJLA()>();

     label04:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.Throwable;

     label05:
        specialinvoke $r7.<java.lang.Throwable: void <init>()>();

     label06:
        $r6[0] = $r7;

     label07:
        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r6);

     label08:
        return $r4;

     label09:
        $r0 := @caughtexception;

        return null;

     label10:
        $r1 := @caughtexception;

        return null;

     label11:
        $r2 := @caughtexception;

        return null;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label09;
        catch java.lang.UnsupportedOperationException from label03 to label04 with label09;
        catch java.lang.UnsupportedOperationException from label05 to label06 with label09;
        catch java.lang.UnsupportedOperationException from label07 to label08 with label09;
        catch java.lang.IllegalAccessException from label01 to label02 with label10;
        catch java.lang.IllegalAccessException from label03 to label04 with label10;
        catch java.lang.IllegalAccessException from label05 to label06 with label10;
        catch java.lang.IllegalAccessException from label07 to label08 with label10;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label11;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label11;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label11;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label11;
    }

    public static java.lang.String getStackTraceAsString(java.lang.Throwable)
    {
        java.io.PrintWriter $r1;
        java.lang.Throwable $r3;
        java.io.StringWriter $r0;
        java.lang.String $r2;

        $r3 := @parameter0: java.lang.Throwable;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0);

        virtualinvoke $r3.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r1);

        $r2 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r2;
    }

    public static transient java.lang.Object invokeAccessibleNonThrowingMethod(java.lang.reflect.Method, java.lang.Object, java.lang.Object[])
    {
        java.lang.Throwable $r4;
        java.lang.IllegalAccessException $r5;
        java.lang.Object[] $r0;
        java.lang.RuntimeException $r6;
        java.lang.NullPointerException r7;
        java.lang.reflect.InvocationTargetException $r3;
        java.lang.Object $r2;
        java.lang.reflect.Method $r1;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: java.lang.Object[];

     label1:
        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>($r4);

        r7 = new java.lang.NullPointerException;

        specialinvoke r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r7;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    public static java.util.List jlaStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        com.google.common.base.Throwables$1 $r1;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.base.Throwables$1;

        specialinvoke $r1.<com.google.common.base.Throwables$1: void <init>(java.lang.Throwable)>($r0);

        return $r1;
    }

    public static java.util.List lazyStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.util.List $r1;
        java.lang.StackTraceElement[] $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <com.google.common.base.Throwables: boolean lazyStackTraceIsLazy()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.google.common.base.Throwables: java.util.List jlaStackTrace(java.lang.Throwable)>($r0);

        return $r1;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r1;
    }

    public static boolean lazyStackTraceIsLazy()
    {
        java.lang.reflect.Method $r0;

        $r0 = <com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceElementMethod>;

        if $r0 == null goto label1;

        $r0 = <com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceDepthMethod>;

        if $r0 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.lang.RuntimeException propagate(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.lang.RuntimeException $r1;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <com.google.common.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>($r0);

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r0);

        throw $r1;
    }

    public static void propagateIfInstanceOf(java.lang.Throwable, java.lang.Class)
    {
        java.lang.Throwable $r0;
        java.lang.Class $r1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.Class;

        if $r0 == null goto label1;

        staticinvoke <com.google.common.base.Throwables: void throwIfInstanceOf(java.lang.Throwable,java.lang.Class)>($r0, $r1);

     label1:
        return;
    }

    public static void propagateIfPossible(java.lang.Throwable)
    {
        java.lang.Throwable $r0;

        $r0 := @parameter0: java.lang.Throwable;

        if $r0 == null goto label1;

        staticinvoke <com.google.common.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>($r0);

     label1:
        return;
    }

    public static void propagateIfPossible(java.lang.Throwable, java.lang.Class)
    {
        java.lang.Throwable $r0;
        java.lang.Class $r1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.Class;

        staticinvoke <com.google.common.base.Throwables: void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)>($r0, $r1);

        staticinvoke <com.google.common.base.Throwables: void propagateIfPossible(java.lang.Throwable)>($r0);

        return;
    }

    public static void propagateIfPossible(java.lang.Throwable, java.lang.Class, java.lang.Class)
    {
        java.lang.Throwable $r0;
        java.lang.Class $r1, $r2;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.Class;

        $r2 := @parameter2: java.lang.Class;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.common.base.Throwables: void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)>($r0, $r1);

        staticinvoke <com.google.common.base.Throwables: void propagateIfPossible(java.lang.Throwable,java.lang.Class)>($r0, $r2);

        return;
    }

    public static void throwIfInstanceOf(java.lang.Throwable, java.lang.Class)
    {
        java.lang.Throwable $r1;
        java.lang.Class $r0;
        java.lang.Object $r2;
        boolean $z0;

        $r1 := @parameter0: java.lang.Throwable;

        $r0 := @parameter1: java.lang.Class;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isInstance(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r1);

        $r1 = (java.lang.Throwable) $r2;

        throw $r1;
    }

    public static void throwIfUnchecked(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.lang.Error $r1;
        java.lang.RuntimeException $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r0 instanceof java.lang.RuntimeException;

        if $z0 != 0 goto label2;

        $z0 = $r0 instanceof java.lang.Error;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = (java.lang.Error) $r0;

        throw $r1;

     label2:
        $r2 = (java.lang.RuntimeException) $r0;

        throw $r2;
    }
}
