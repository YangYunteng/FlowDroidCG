public class project.android.imageprocessing.input.ImageResourceInput extends project.android.imageprocessing.input.GLTextureOutputRenderer
{
    public android.graphics.Bitmap bitmap;
    public android.content.Context context;
    public int imageHeight;
    public int imageWidth;
    public boolean newBitmap;
    public android.opengl.GLSurfaceView view;

    public void <init>(android.opengl.GLSurfaceView, android.content.Context, int)
    {
        android.content.Context $r2;
        android.opengl.GLSurfaceView $r1;
        project.android.imageprocessing.input.ImageResourceInput r0;
        int $i0;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        $r1 := @parameter0: android.opengl.GLSurfaceView;

        $r2 := @parameter1: android.content.Context;

        $i0 := @parameter2: int;

        specialinvoke r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: void <init>()>();

        r0.<project.android.imageprocessing.input.ImageResourceInput: android.content.Context context> = $r2;

        r0.<project.android.imageprocessing.input.ImageResourceInput: android.opengl.GLSurfaceView view> = $r1;

        virtualinvoke r0.<project.android.imageprocessing.input.ImageResourceInput: void setImage(int)>($i0);

        return;
    }

    public void <init>(android.opengl.GLSurfaceView, android.graphics.Bitmap)
    {
        android.opengl.GLSurfaceView $r1;
        android.graphics.Bitmap $r2;
        project.android.imageprocessing.input.ImageResourceInput r0;
        int $i0;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        $r1 := @parameter0: android.opengl.GLSurfaceView;

        $r2 := @parameter1: android.graphics.Bitmap;

        specialinvoke r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: void <init>()>();

        $i0 = virtualinvoke $r2.<android.graphics.Bitmap: int getWidth()>();

        if $i0 <= 1024 goto label1;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>($r2, 1024, 768, 1);

     label1:
        r0.<project.android.imageprocessing.input.ImageResourceInput: android.opengl.GLSurfaceView view> = $r1;

        virtualinvoke r0.<project.android.imageprocessing.input.ImageResourceInput: void setImage(android.graphics.Bitmap)>($r2);

        return;
    }

    public void <init>(android.opengl.GLSurfaceView, java.lang.String)
    {
        java.lang.String $r2;
        android.opengl.GLSurfaceView $r1;
        project.android.imageprocessing.input.ImageResourceInput r0;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        $r1 := @parameter0: android.opengl.GLSurfaceView;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: void <init>()>();

        r0.<project.android.imageprocessing.input.ImageResourceInput: android.opengl.GLSurfaceView view> = $r1;

        virtualinvoke r0.<project.android.imageprocessing.input.ImageResourceInput: void setImage(java.lang.String)>($r2);

        return;
    }

    private void loadImage(android.graphics.Bitmap)
    {
        java.nio.FloatBuffer $r6;
        android.opengl.GLSurfaceView $r7;
        float[] $r3;
        java.nio.ByteBuffer $r4;
        java.nio.ByteOrder $r5;
        java.nio.FloatBuffer[] $r2;
        android.graphics.Bitmap $r1;
        project.android.imageprocessing.input.ImageResourceInput r0;
        int $i0, $i1;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        $r1 := @parameter0: android.graphics.Bitmap;

        r0.<project.android.imageprocessing.input.ImageResourceInput: android.graphics.Bitmap bitmap> = $r1;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        r0.<project.android.imageprocessing.input.ImageResourceInput: int imageWidth> = $i0;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getHeight()>();

        r0.<project.android.imageprocessing.input.ImageResourceInput: int imageHeight> = $i0;

        $i0 = r0.<project.android.imageprocessing.input.ImageResourceInput: int imageWidth>;

        $i1 = r0.<project.android.imageprocessing.input.ImageResourceInput: int imageHeight>;

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void setRenderSize(int,int)>($i0, $i1);

        r0.<project.android.imageprocessing.input.ImageResourceInput: boolean newBitmap> = 1;

        $r2 = newarray (java.nio.FloatBuffer)[4];

        r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices> = $r2;

        $r3 = newarray (float)[8];

        $r3[0] = 0.0F;

        $r3[1] = 1.0F;

        $r3[2] = 1.0F;

        $r3[3] = 1.0F;

        $r3[4] = 0.0F;

        $r3[5] = 0.0F;

        $r3[6] = 1.0F;

        $r3[7] = 0.0F;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i0 = lengthof $r3;

        $i0 = $i0 * 4;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i0);

        $r5 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r4 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

        $r6 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r2[0] = $r6;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r6 = $r2[0];

        $r6 = virtualinvoke $r6.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r3);

        virtualinvoke $r6.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $r3 = newarray (float)[8];

        $r3[0] = 1.0F;

        $r3[1] = 1.0F;

        $r3[2] = 1.0F;

        $r3[3] = 0.0F;

        $r3[4] = 0.0F;

        $r3[5] = 1.0F;

        $r3[6] = 0.0F;

        $r3[7] = 0.0F;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i0 = lengthof $r3;

        $i0 = $i0 * 4;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i0);

        $r5 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r4 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

        $r6 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r2[1] = $r6;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r6 = $r2[1];

        $r6 = virtualinvoke $r6.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r3);

        virtualinvoke $r6.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $r3 = newarray (float)[8];

        $r3[0] = 1.0F;

        $r3[1] = 0.0F;

        $r3[2] = 0.0F;

        $r3[3] = 0.0F;

        $r3[4] = 1.0F;

        $r3[5] = 1.0F;

        $r3[6] = 0.0F;

        $r3[7] = 1.0F;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i0 = lengthof $r3;

        $i0 = $i0 * 4;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i0);

        $r5 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r4 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

        $r6 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r2[2] = $r6;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r6 = $r2[2];

        $r6 = virtualinvoke $r6.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r3);

        virtualinvoke $r6.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $r3 = newarray (float)[8];

        $r3[0] = 0.0F;

        $r3[1] = 0.0F;

        $r3[2] = 0.0F;

        $r3[3] = 1.0F;

        $r3[4] = 1.0F;

        $r3[5] = 0.0F;

        $r3[6] = 1.0F;

        $r3[7] = 1.0F;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i0 = lengthof $r3;

        $i0 = $i0 * 4;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i0);

        $r5 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r4 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

        $r6 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r2[3] = $r6;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r6 = $r2[3];

        $r6 = virtualinvoke $r6.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r3);

        virtualinvoke $r6.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $r7 = r0.<project.android.imageprocessing.input.ImageResourceInput: android.opengl.GLSurfaceView view>;

        virtualinvoke $r7.<android.opengl.GLSurfaceView: void requestRender()>();

        return;
    }

    private void loadTexture()
    {
        int[] $r1;
        android.graphics.Bitmap $r2;
        project.android.imageprocessing.input.ImageResourceInput r0;
        int $i0;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int texture_in>;

        if $i0 == 0 goto label1;

        $r1 = newarray (int)[1];

        $r1[0] = $i0;

        staticinvoke <android.opengl.GLES20: void glDeleteTextures(int,int[],int)>(1, $r1, 0);

     label1:
        $r2 = r0.<project.android.imageprocessing.input.ImageResourceInput: android.graphics.Bitmap bitmap>;

        $i0 = staticinvoke <project.android.imageprocessing.helper.ImageHelper: int bitmapToTexture(android.graphics.Bitmap)>($r2);

        r0.<project.android.imageprocessing.GLRenderer: int texture_in> = $i0;

        r0.<project.android.imageprocessing.input.ImageResourceInput: boolean newBitmap> = 0;

        virtualinvoke r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: void markAsDirty()>();

        return;
    }

    public void destroy()
    {
        int $i0;
        int[] $r1;
        project.android.imageprocessing.input.ImageResourceInput r0;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        specialinvoke r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: void destroy()>();

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int texture_in>;

        if $i0 == 0 goto label1;

        $r1 = newarray (int)[1];

        $r1[0] = $i0;

        staticinvoke <android.opengl.GLES20: void glDeleteTextures(int,int[],int)>(1, $r1, 0);

     label1:
        r0.<project.android.imageprocessing.input.ImageResourceInput: boolean newBitmap> = 1;

        return;
    }

    public void drawFrame()
    {
        project.android.imageprocessing.input.ImageResourceInput r0;
        boolean $z0;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        $z0 = r0.<project.android.imageprocessing.input.ImageResourceInput: boolean newBitmap>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<project.android.imageprocessing.input.ImageResourceInput: void loadTexture()>();

     label1:
        specialinvoke r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: void drawFrame()>();

        return;
    }

    public int getImageHeight()
    {
        int i0;
        project.android.imageprocessing.input.ImageResourceInput r0;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        i0 = r0.<project.android.imageprocessing.input.ImageResourceInput: int imageHeight>;

        return i0;
    }

    public int getImageWidth()
    {
        int i0;
        project.android.imageprocessing.input.ImageResourceInput r0;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        i0 = r0.<project.android.imageprocessing.input.ImageResourceInput: int imageWidth>;

        return i0;
    }

    public void setImage(int)
    {
        android.content.Context $r2;
        android.graphics.Bitmap $r4;
        project.android.imageprocessing.input.ImageResourceInput r0;
        int $i0;
        android.graphics.BitmapFactory$Options $r1;
        android.content.res.Resources $r3;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        $i0 := @parameter0: int;

        $r1 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r1.<android.graphics.BitmapFactory$Options: void <init>()>();

        $r1.<android.graphics.BitmapFactory$Options: boolean inScaled> = 0;

        $r2 = r0.<project.android.imageprocessing.input.ImageResourceInput: android.content.Context context>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>($r3, $i0, $r1);

        specialinvoke r0.<project.android.imageprocessing.input.ImageResourceInput: void loadImage(android.graphics.Bitmap)>($r4);

        return;
    }

    public void setImage(android.graphics.Bitmap)
    {
        android.graphics.Bitmap $r1;
        project.android.imageprocessing.input.ImageResourceInput r0;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        $r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<project.android.imageprocessing.input.ImageResourceInput: void loadImage(android.graphics.Bitmap)>($r1);

        return;
    }

    public void setImage(java.lang.String)
    {
        android.graphics.Bitmap $r2;
        project.android.imageprocessing.input.ImageResourceInput r0;
        java.lang.String $r3;
        android.graphics.BitmapFactory$Options $r1;

        r0 := @this: project.android.imageprocessing.input.ImageResourceInput;

        $r3 := @parameter0: java.lang.String;

        $r1 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r1.<android.graphics.BitmapFactory$Options: void <init>()>();

        $r1.<android.graphics.BitmapFactory$Options: boolean inScaled> = 0;

        $r2 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r3, $r1);

        specialinvoke r0.<project.android.imageprocessing.input.ImageResourceInput: void loadImage(android.graphics.Bitmap)>($r2);

        return;
    }
}
