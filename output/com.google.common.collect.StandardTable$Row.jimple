public class com.google.common.collect.StandardTable$Row extends com.google.common.collect.Maps$IteratorBasedAbstractMap
{
    public java.util.Map backingRowMap;
    public final java.lang.Object rowKey;
    public final com.google.common.collect.StandardTable this$0;

    public void <init>(com.google.common.collect.StandardTable, java.lang.Object)
    {
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object $r2;
        com.google.common.collect.StandardTable $r1;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r1 := @parameter0: com.google.common.collect.StandardTable;

        $r2 := @parameter1: java.lang.Object;

        r0.<com.google.common.collect.StandardTable$Row: com.google.common.collect.StandardTable this$0> = $r1;

        specialinvoke r0.<com.google.common.collect.Maps$IteratorBasedAbstractMap: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        r0.<com.google.common.collect.StandardTable$Row: java.lang.Object rowKey> = $r2;

        return;
    }

    public java.util.Map backingRowMap()
    {
        com.google.common.collect.StandardTable $r3;
        java.util.Map $r2;
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r2 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

        if $r2 == null goto label2;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.google.common.collect.StandardTable$Row: com.google.common.collect.StandardTable this$0>;

        $r2 = $r3.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r1 = r0.<com.google.common.collect.StandardTable$Row: java.lang.Object rowKey>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r2 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

        return $r2;

     label2:
        $r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map computeBackingRowMap()>();

        r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap> = $r2;

        return $r2;
    }

    public void clear()
    {
        com.google.common.collect.StandardTable$Row r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r1 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if $r1 == null goto label1;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

     label1:
        virtualinvoke r0.<com.google.common.collect.StandardTable$Row: void maintainEmptyInvariant()>();

        return;
    }

    public java.util.Map computeBackingRowMap()
    {
        com.google.common.collect.StandardTable $r2;
        java.util.Map $r3;
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r2 = r0.<com.google.common.collect.StandardTable$Row: com.google.common.collect.StandardTable this$0>;

        $r3 = $r2.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r1 = r0.<com.google.common.collect.StandardTable$Row: java.lang.Object rowKey>;

        $r1 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.util.Map) $r1;

        return $r3;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Map $r2;
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if $r1 == null goto label1;

        if $r2 == null goto label1;

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean safeContainsKey(java.util.Map,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator entryIterator()
    {
        java.util.Iterator $r3;
        com.google.common.collect.StandardTable$Row$1 $r1;
        java.util.Map $r2;
        java.util.Set $r4;
        com.google.common.collect.StandardTable$Row r0;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if $r2 != null goto label1;

        $r3 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator emptyModifiableIterator()>();

        return $r3;

     label1:
        $r4 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        $r1 = new com.google.common.collect.StandardTable$Row$1;

        specialinvoke $r1.<com.google.common.collect.StandardTable$Row$1: void <init>(com.google.common.collect.StandardTable$Row,java.util.Iterator)>(r0, $r3);

        return $r1;
    }

    public java.util.Spliterator entrySpliterator()
    {
        java.util.Map $r2;
        java.util.Set $r4;
        com.google.common.collect.StandardTable$Row r0;
        java.util.Spliterator $r3;
        c.i.b.c.gc $r1;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if $r2 != null goto label1;

        $r3 = staticinvoke <java.util.Spliterators: java.util.Spliterator emptySpliterator()>();

        return $r3;

     label1:
        $r4 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r4.<java.util.Set: java.util.Spliterator spliterator()>();

        $r1 = new c.i.b.c.gc;

        specialinvoke $r1.<c.i.b.c.gc: void <init>(com.google.common.collect.StandardTable$Row)>(r0);

        $r3 = staticinvoke <com.google.common.collect.CollectSpliterators: java.util.Spliterator map(java.util.Spliterator,java.util.function.Function)>($r3, $r1);

        return $r3;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object $r1;
        java.util.Map $r2;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if $r1 == null goto label1;

        if $r2 == null goto label1;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r2, $r1);

        return $r1;

     label1:
        return null;
    }

    public void maintainEmptyInvariant()
    {
        com.google.common.collect.StandardTable $r3;
        java.util.Map $r2;
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if $r2 == null goto label1;

        $r2 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.google.common.collect.StandardTable$Row: com.google.common.collect.StandardTable this$0>;

        $r2 = $r3.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r1 = r0.<com.google.common.collect.StandardTable$Row: java.lang.Object rowKey>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap> = null;

     label1:
        return;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.StandardTable $r5;
        java.util.Map $r4;
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r4 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

        if $r4 == null goto label1;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        return $r3;

     label1:
        $r5 = r0.<com.google.common.collect.StandardTable$Row: com.google.common.collect.StandardTable this$0>;

        $r2 = r0.<com.google.common.collect.StandardTable$Row: java.lang.Object rowKey>;

        $r3 = virtualinvoke $r5.<com.google.common.collect.StandardTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r1);

        return $r3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object $r1;
        java.util.Map $r2;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeRemove(java.util.Map,java.lang.Object)>($r2, $r1);

        virtualinvoke r0.<com.google.common.collect.StandardTable$Row: void maintainEmptyInvariant()>();

        return $r1;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.StandardTable$Row r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r1 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.util.Map$Entry wrapEntry(java.util.Map$Entry)
    {
        com.google.common.collect.StandardTable$Row r0;
        java.util.Map$Entry $r1;
        com.google.common.collect.StandardTable$Row$2 $r2;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r1 := @parameter0: java.util.Map$Entry;

        $r2 = new com.google.common.collect.StandardTable$Row$2;

        specialinvoke $r2.<com.google.common.collect.StandardTable$Row$2: void <init>(com.google.common.collect.StandardTable$Row,java.util.Map$Entry)>(r0, $r1);

        return $r2;
    }
}
