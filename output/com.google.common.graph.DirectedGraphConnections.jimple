public final class com.google.common.graph.DirectedGraphConnections extends java.lang.Object implements com.google.common.graph.GraphConnections
{
    public static final java.lang.Object PRED;
    public final java.util.Map adjacentNodeValues;
    public int predecessorCount;
    public int successorCount;

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.google.common.graph.DirectedGraphConnections: java.lang.Object PRED> = $r0;

        return;
    }

    public void <init>(java.util.Map, int, int)
    {
        java.util.Map $r1, $r2;
        int $i0, $i1, $i2;
        com.google.common.graph.DirectedGraphConnections r0;
        boolean $z0;

        r0 := @this: com.google.common.graph.DirectedGraphConnections;

        $r1 := @parameter0: java.util.Map;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = $r1;

        r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues> = $r2;

        staticinvoke <com.google.common.graph.Graphs: int checkNonNegative(int)>($i0);

        r0.<com.google.common.graph.DirectedGraphConnections: int predecessorCount> = $i0;

        staticinvoke <com.google.common.graph.Graphs: int checkNonNegative(int)>($i1);

        r0.<com.google.common.graph.DirectedGraphConnections: int successorCount> = $i1;

        $i2 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 > $i2 goto label1;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i1 > $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        return;
    }

    public static java.util.Map access$000(com.google.common.graph.DirectedGraphConnections)
    {
        com.google.common.graph.DirectedGraphConnections $r0;
        java.util.Map r1;

        $r0 := @parameter0: com.google.common.graph.DirectedGraphConnections;

        r1 = $r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        return r1;
    }

    public static boolean access$100(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.google.common.graph.DirectedGraphConnections: boolean isPredecessor(java.lang.Object)>($r0);

        return $z0;
    }

    public static int access$200(com.google.common.graph.DirectedGraphConnections)
    {
        int i0;
        com.google.common.graph.DirectedGraphConnections $r0;

        $r0 := @parameter0: com.google.common.graph.DirectedGraphConnections;

        i0 = $r0.<com.google.common.graph.DirectedGraphConnections: int predecessorCount>;

        return i0;
    }

    public static boolean access$300(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.google.common.graph.DirectedGraphConnections: boolean isSuccessor(java.lang.Object)>($r0);

        return $z0;
    }

    public static int access$400(com.google.common.graph.DirectedGraphConnections)
    {
        int i0;
        com.google.common.graph.DirectedGraphConnections $r0;

        $r0 := @parameter0: com.google.common.graph.DirectedGraphConnections;

        i0 = $r0.<com.google.common.graph.DirectedGraphConnections: int successorCount>;

        return i0;
    }

    public static boolean isPredecessor(java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object;

        $r0 = <com.google.common.graph.DirectedGraphConnections: java.lang.Object PRED>;

        if $r1 == $r0 goto label2;

        $z0 = $r1 instanceof com.google.common.graph.DirectedGraphConnections$PredAndSucc;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static boolean isSuccessor(java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r1 := @parameter0: java.lang.Object;

        $r0 = <com.google.common.graph.DirectedGraphConnections: java.lang.Object PRED>;

        if $r1 == $r0 goto label1;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public static com.google.common.graph.DirectedGraphConnections of()
    {
        java.util.HashMap $r1;
        com.google.common.graph.DirectedGraphConnections $r0;

        $r0 = new com.google.common.graph.DirectedGraphConnections;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int,float)>(4, 1.0F);

        specialinvoke $r0.<com.google.common.graph.DirectedGraphConnections: void <init>(java.util.Map,int,int)>($r1, 0, 0);

        return $r0;
    }

    public static com.google.common.graph.DirectedGraphConnections ofImmutable(java.util.Set, java.util.Map)
    {
        com.google.common.graph.DirectedGraphConnections$PredAndSucc $r0;
        java.util.Iterator $r4;
        com.google.common.collect.ImmutableMap $r8;
        java.util.Set $r1;
        java.util.HashMap $r3;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.Object $r5, $r6;
        com.google.common.graph.DirectedGraphConnections $r7;
        boolean $z0;

        $r1 := @parameter0: java.util.Set;

        $r2 := @parameter1: java.util.Map;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r2);

        $r4 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = <com.google.common.graph.DirectedGraphConnections: java.lang.Object PRED>;

        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $r6 == null goto label1;

        $r0 = new com.google.common.graph.DirectedGraphConnections$PredAndSucc;

        specialinvoke $r0.<com.google.common.graph.DirectedGraphConnections$PredAndSucc: void <init>(java.lang.Object)>($r6);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r0);

        goto label1;

     label2:
        $r7 = new com.google.common.graph.DirectedGraphConnections;

        $r8 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>($r3);

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        specialinvoke $r7.<com.google.common.graph.DirectedGraphConnections: void <init>(java.util.Map,int,int)>($r8, $i0, $i1);

        return $r7;
    }

    public void addPredecessor(java.lang.Object, java.lang.Object)
    {
        com.google.common.graph.DirectedGraphConnections$PredAndSucc $r1;
        java.util.Map $r4;
        int $i0;
        java.lang.Object $r2, $r3, $r5;
        com.google.common.graph.DirectedGraphConnections r0;
        boolean $z0;

        r0 := @this: com.google.common.graph.DirectedGraphConnections;

        $r3 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r4 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        $r2 = <com.google.common.graph.DirectedGraphConnections: java.lang.Object PRED>;

        $r2 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $r2 != null goto label1;

        $i0 = r0.<com.google.common.graph.DirectedGraphConnections: int predecessorCount>;

        $i0 = $i0 + 1;

        r0.<com.google.common.graph.DirectedGraphConnections: int predecessorCount> = $i0;

        staticinvoke <com.google.common.graph.Graphs: int checkPositive(int)>($i0);

        return;

     label1:
        $z0 = $r2 instanceof com.google.common.graph.DirectedGraphConnections$PredAndSucc;

        if $z0 == 0 goto label2;

        $r4 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r2);

        return;

     label2:
        $r5 = <com.google.common.graph.DirectedGraphConnections: java.lang.Object PRED>;

        if $r2 == $r5 goto label3;

        $r4 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        $r1 = new com.google.common.graph.DirectedGraphConnections$PredAndSucc;

        specialinvoke $r1.<com.google.common.graph.DirectedGraphConnections$PredAndSucc: void <init>(java.lang.Object)>($r2);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        $i0 = r0.<com.google.common.graph.DirectedGraphConnections: int predecessorCount>;

        $i0 = $i0 + 1;

        r0.<com.google.common.graph.DirectedGraphConnections: int predecessorCount> = $i0;

        staticinvoke <com.google.common.graph.Graphs: int checkPositive(int)>($i0);

     label3:
        return;
    }

    public java.lang.Object addSuccessor(java.lang.Object, java.lang.Object)
    {
        com.google.common.graph.DirectedGraphConnections$PredAndSucc $r5;
        java.util.Map $r3;
        int $i0;
        java.lang.Object $r1, $r2, $r4, $r6;
        com.google.common.graph.DirectedGraphConnections r0;
        boolean $z0;

        r0 := @this: com.google.common.graph.DirectedGraphConnections;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $r4 != null goto label1;

        $i0 = r0.<com.google.common.graph.DirectedGraphConnections: int successorCount>;

        $i0 = $i0 + 1;

        r0.<com.google.common.graph.DirectedGraphConnections: int successorCount> = $i0;

        staticinvoke <com.google.common.graph.Graphs: int checkPositive(int)>($i0);

        return null;

     label1:
        $z0 = $r4 instanceof com.google.common.graph.DirectedGraphConnections$PredAndSucc;

        if $z0 == 0 goto label2;

        $r3 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        $r5 = new com.google.common.graph.DirectedGraphConnections$PredAndSucc;

        specialinvoke $r5.<com.google.common.graph.DirectedGraphConnections$PredAndSucc: void <init>(java.lang.Object)>($r1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r5 = (com.google.common.graph.DirectedGraphConnections$PredAndSucc) $r4;

        $r2 = staticinvoke <com.google.common.graph.DirectedGraphConnections$PredAndSucc: java.lang.Object access$500(com.google.common.graph.DirectedGraphConnections$PredAndSucc)>($r5);

        return $r2;

     label2:
        $r6 = <com.google.common.graph.DirectedGraphConnections: java.lang.Object PRED>;

        if $r4 != $r6 goto label3;

        $r3 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        $r5 = new com.google.common.graph.DirectedGraphConnections$PredAndSucc;

        specialinvoke $r5.<com.google.common.graph.DirectedGraphConnections$PredAndSucc: void <init>(java.lang.Object)>($r1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r5);

        $i0 = r0.<com.google.common.graph.DirectedGraphConnections: int successorCount>;

        $i0 = $i0 + 1;

        r0.<com.google.common.graph.DirectedGraphConnections: int successorCount> = $i0;

        staticinvoke <com.google.common.graph.Graphs: int checkPositive(int)>($i0);

        return null;

     label3:
        return $r4;
    }

    public java.util.Set adjacentNodes()
    {
        java.util.Set $r2;
        com.google.common.graph.DirectedGraphConnections r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.graph.DirectedGraphConnections;

        $r1 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r2;
    }

    public java.util.Set predecessors()
    {
        com.google.common.graph.DirectedGraphConnections r0;
        com.google.common.graph.DirectedGraphConnections$1 $r1;

        r0 := @this: com.google.common.graph.DirectedGraphConnections;

        $r1 = new com.google.common.graph.DirectedGraphConnections$1;

        specialinvoke $r1.<com.google.common.graph.DirectedGraphConnections$1: void <init>(com.google.common.graph.DirectedGraphConnections)>(r0);

        return $r1;
    }

    public void removePredecessor(java.lang.Object)
    {
        com.google.common.graph.DirectedGraphConnections$PredAndSucc $r5;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.Object $r1, $r3, $r4;
        com.google.common.graph.DirectedGraphConnections r0;
        boolean $z0;

        r0 := @this: com.google.common.graph.DirectedGraphConnections;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = <com.google.common.graph.DirectedGraphConnections: java.lang.Object PRED>;

        if $r3 != $r4 goto label1;

        $r2 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $i0 = r0.<com.google.common.graph.DirectedGraphConnections: int predecessorCount>;

        $i1 = -1;

        $i0 = $i0 + $i1;

        r0.<com.google.common.graph.DirectedGraphConnections: int predecessorCount> = $i0;

        staticinvoke <com.google.common.graph.Graphs: int checkNonNegative(int)>($i0);

        return;

     label1:
        $z0 = $r3 instanceof com.google.common.graph.DirectedGraphConnections$PredAndSucc;

        if $z0 == 0 goto label2;

        $r2 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        $r5 = (com.google.common.graph.DirectedGraphConnections$PredAndSucc) $r3;

        $r3 = staticinvoke <com.google.common.graph.DirectedGraphConnections$PredAndSucc: java.lang.Object access$500(com.google.common.graph.DirectedGraphConnections$PredAndSucc)>($r5);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

        $i0 = r0.<com.google.common.graph.DirectedGraphConnections: int predecessorCount>;

        $i1 = -1;

        $i0 = $i0 + $i1;

        r0.<com.google.common.graph.DirectedGraphConnections: int predecessorCount> = $i0;

        staticinvoke <com.google.common.graph.Graphs: int checkNonNegative(int)>($i0);

     label2:
        return;
    }

    public java.lang.Object removeSuccessor(java.lang.Object)
    {
        com.google.common.graph.DirectedGraphConnections$PredAndSucc $r5;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.Object $r1, $r3, $r4;
        com.google.common.graph.DirectedGraphConnections r0;
        boolean $z0;

        r0 := @this: com.google.common.graph.DirectedGraphConnections;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r3 == null goto label3;

        $r4 = <com.google.common.graph.DirectedGraphConnections: java.lang.Object PRED>;

        if $r3 != $r4 goto label1;

        goto label3;

     label1:
        $z0 = $r3 instanceof com.google.common.graph.DirectedGraphConnections$PredAndSucc;

        if $z0 == 0 goto label2;

        $r2 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        $i0 = r0.<com.google.common.graph.DirectedGraphConnections: int successorCount>;

        $i1 = -1;

        $i0 = $i0 + $i1;

        r0.<com.google.common.graph.DirectedGraphConnections: int successorCount> = $i0;

        staticinvoke <com.google.common.graph.Graphs: int checkNonNegative(int)>($i0);

        $r5 = (com.google.common.graph.DirectedGraphConnections$PredAndSucc) $r3;

        $r1 = staticinvoke <com.google.common.graph.DirectedGraphConnections$PredAndSucc: java.lang.Object access$500(com.google.common.graph.DirectedGraphConnections$PredAndSucc)>($r5);

        return $r1;

     label2:
        $r2 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $i0 = r0.<com.google.common.graph.DirectedGraphConnections: int successorCount>;

        $i1 = -1;

        $i0 = $i0 + $i1;

        r0.<com.google.common.graph.DirectedGraphConnections: int successorCount> = $i0;

        staticinvoke <com.google.common.graph.Graphs: int checkNonNegative(int)>($i0);

        return $r3;

     label3:
        return null;
    }

    public java.util.Set successors()
    {
        com.google.common.graph.DirectedGraphConnections$2 $r1;
        com.google.common.graph.DirectedGraphConnections r0;

        r0 := @this: com.google.common.graph.DirectedGraphConnections;

        $r1 = new com.google.common.graph.DirectedGraphConnections$2;

        specialinvoke $r1.<com.google.common.graph.DirectedGraphConnections$2: void <init>(com.google.common.graph.DirectedGraphConnections)>(r0);

        return $r1;
    }

    public java.lang.Object value(java.lang.Object)
    {
        com.google.common.graph.DirectedGraphConnections$PredAndSucc $r4;
        java.util.Map $r2;
        java.lang.Object $r1, $r3;
        com.google.common.graph.DirectedGraphConnections r0;
        boolean $z0;

        r0 := @this: com.google.common.graph.DirectedGraphConnections;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.graph.DirectedGraphConnections: java.util.Map adjacentNodeValues>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = <com.google.common.graph.DirectedGraphConnections: java.lang.Object PRED>;

        if $r1 != $r3 goto label1;

        return null;

     label1:
        $z0 = $r1 instanceof com.google.common.graph.DirectedGraphConnections$PredAndSucc;

        if $z0 == 0 goto label2;

        $r4 = (com.google.common.graph.DirectedGraphConnections$PredAndSucc) $r1;

        $r1 = staticinvoke <com.google.common.graph.DirectedGraphConnections$PredAndSucc: java.lang.Object access$500(com.google.common.graph.DirectedGraphConnections$PredAndSucc)>($r4);

     label2:
        return $r1;
    }
}
