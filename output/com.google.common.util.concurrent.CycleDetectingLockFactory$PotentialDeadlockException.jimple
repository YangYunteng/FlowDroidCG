public final class com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException extends com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace
{
    public final com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace conflictingStackTrace;

    public void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode $r1, $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace $r3;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException;

        $r1 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $r2 := @parameter1: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $r3 := @parameter2: com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace;

        specialinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)>($r1, $r2);

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException: com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace conflictingStackTrace> = $r3;

        virtualinvoke r0.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        return;
    }

    public void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace, com.google.common.util.concurrent.CycleDetectingLockFactory$1)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode $r1, $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace $r3;
        com.google.common.util.concurrent.CycleDetectingLockFactory$1 $r4;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException;

        $r1 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $r2 := @parameter1: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $r3 := @parameter2: com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace;

        $r4 := @parameter3: com.google.common.util.concurrent.CycleDetectingLockFactory$1;

        specialinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace)>($r1, $r2, $r3);

        return;
    }

    public com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace getConflictingStackTrace()
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace r1;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException;

        r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException: com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace conflictingStackTrace>;

        return r1;
    }

    public java.lang.String getMessage()
    {
        java.lang.Throwable $r3;
        com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException;

        $r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException: com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace conflictingStackTrace>;

     label1:
        if $r3 == null goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
