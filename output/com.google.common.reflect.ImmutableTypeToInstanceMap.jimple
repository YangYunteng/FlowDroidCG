public final class com.google.common.reflect.ImmutableTypeToInstanceMap extends com.google.common.collect.ForwardingMap implements com.google.common.reflect.TypeToInstanceMap
{
    public final com.google.common.collect.ImmutableMap delegate;

    public void <init>(com.google.common.collect.ImmutableMap)
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r1 := @parameter0: com.google.common.collect.ImmutableMap;

        specialinvoke r0.<com.google.common.collect.ForwardingMap: void <init>()>();

        r0.<com.google.common.reflect.ImmutableTypeToInstanceMap: com.google.common.collect.ImmutableMap delegate> = $r1;

        return;
    }

    public void <init>(com.google.common.collect.ImmutableMap, com.google.common.reflect.ImmutableTypeToInstanceMap$1)
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.reflect.ImmutableTypeToInstanceMap$1 $r2;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r1 := @parameter0: com.google.common.collect.ImmutableMap;

        $r2 := @parameter1: com.google.common.reflect.ImmutableTypeToInstanceMap$1;

        specialinvoke r0.<com.google.common.reflect.ImmutableTypeToInstanceMap: void <init>(com.google.common.collect.ImmutableMap)>($r1);

        return;
    }

    public static com.google.common.reflect.ImmutableTypeToInstanceMap$Builder builder()
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap$Builder $r0;

        $r0 = new com.google.common.reflect.ImmutableTypeToInstanceMap$Builder;

        specialinvoke $r0.<com.google.common.reflect.ImmutableTypeToInstanceMap$Builder: void <init>(com.google.common.reflect.ImmutableTypeToInstanceMap$1)>(null);

        return $r0;
    }

    public static com.google.common.reflect.ImmutableTypeToInstanceMap of()
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap $r0;
        com.google.common.collect.ImmutableMap $r1;

        $r0 = new com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        specialinvoke $r0.<com.google.common.reflect.ImmutableTypeToInstanceMap: void <init>(com.google.common.collect.ImmutableMap)>($r1);

        return $r0;
    }

    private java.lang.Object trustedGet(com.google.common.reflect.TypeToken)
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        com.google.common.collect.ImmutableMap $r1;
        java.lang.Object $r2;
        com.google.common.reflect.TypeToken $r3;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r3 := @parameter0: com.google.common.reflect.TypeToken;

        $r1 = r0.<com.google.common.reflect.ImmutableTypeToInstanceMap: com.google.common.collect.ImmutableMap delegate>;

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r3);

        return $r2;
    }

    public volatile java.lang.Object delegate()
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r1 = virtualinvoke r0.<com.google.common.reflect.ImmutableTypeToInstanceMap: java.util.Map delegate()>();

        return $r1;
    }

    public java.util.Map delegate()
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        com.google.common.collect.ImmutableMap r1;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        r1 = r0.<com.google.common.reflect.ImmutableTypeToInstanceMap: com.google.common.collect.ImmutableMap delegate>;

        return r1;
    }

    public java.lang.Object getInstance(com.google.common.reflect.TypeToken)
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        java.lang.Object $r2;
        com.google.common.reflect.TypeToken $r1;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r1 := @parameter0: com.google.common.reflect.TypeToken;

        $r1 = virtualinvoke $r1.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken rejectTypeVariables()>();

        $r2 = specialinvoke r0.<com.google.common.reflect.ImmutableTypeToInstanceMap: java.lang.Object trustedGet(com.google.common.reflect.TypeToken)>($r1);

        return $r2;
    }

    public java.lang.Object getInstance(java.lang.Class)
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        java.lang.Class $r1;
        java.lang.Object $r3;
        com.google.common.reflect.TypeToken $r2;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>($r1);

        $r3 = specialinvoke r0.<com.google.common.reflect.ImmutableTypeToInstanceMap: java.lang.Object trustedGet(com.google.common.reflect.TypeToken)>($r2);

        return $r3;
    }

    public java.lang.Object put(com.google.common.reflect.TypeToken, java.lang.Object)
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        java.lang.UnsupportedOperationException $r3;
        java.lang.Object $r1;
        com.google.common.reflect.TypeToken $r2;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r2 := @parameter0: com.google.common.reflect.TypeToken;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        java.lang.Object $r1, $r2;
        com.google.common.reflect.TypeToken $r3;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = (com.google.common.reflect.TypeToken) $r2;

        $r2 = virtualinvoke r0.<com.google.common.reflect.ImmutableTypeToInstanceMap: java.lang.Object put(com.google.common.reflect.TypeToken,java.lang.Object)>($r3, $r1);

        return $r2;
    }

    public void putAll(java.util.Map)
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        java.lang.UnsupportedOperationException $r2;
        java.util.Map $r1;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r1 := @parameter0: java.util.Map;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.Object putInstance(com.google.common.reflect.TypeToken, java.lang.Object)
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        java.lang.UnsupportedOperationException $r3;
        java.lang.Object $r1;
        com.google.common.reflect.TypeToken $r2;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r2 := @parameter0: com.google.common.reflect.TypeToken;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.Object putInstance(java.lang.Class, java.lang.Object)
    {
        com.google.common.reflect.ImmutableTypeToInstanceMap r0;
        java.lang.UnsupportedOperationException $r3;
        java.lang.Object $r1;
        java.lang.Class $r2;

        r0 := @this: com.google.common.reflect.ImmutableTypeToInstanceMap;

        $r2 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }
}
