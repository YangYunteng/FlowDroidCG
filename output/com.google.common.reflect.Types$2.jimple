public final class com.google.common.reflect.Types$2 extends com.google.common.reflect.TypeVisitor
{
    public final java.util.concurrent.atomic.AtomicReference val$result;

    public void <init>(java.util.concurrent.atomic.AtomicReference)
    {
        com.google.common.reflect.Types$2 r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: com.google.common.reflect.Types$2;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r0.<com.google.common.reflect.Types$2: java.util.concurrent.atomic.AtomicReference val$result> = $r1;

        specialinvoke r0.<com.google.common.reflect.TypeVisitor: void <init>()>();

        return;
    }

    public void visitClass(java.lang.Class)
    {
        com.google.common.reflect.Types$2 r0;
        java.lang.Class $r2;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: com.google.common.reflect.Types$2;

        $r2 := @parameter0: java.lang.Class;

        $r1 = r0.<com.google.common.reflect.Types$2: java.util.concurrent.atomic.AtomicReference val$result>;

        $r2 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r2);

        return;
    }

    public void visitGenericArrayType(java.lang.reflect.GenericArrayType)
    {
        java.lang.reflect.GenericArrayType $r3;
        com.google.common.reflect.Types$2 r0;
        java.lang.reflect.Type $r2;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: com.google.common.reflect.Types$2;

        $r3 := @parameter0: java.lang.reflect.GenericArrayType;

        $r1 = r0.<com.google.common.reflect.Types$2: java.util.concurrent.atomic.AtomicReference val$result>;

        $r2 = interfaceinvoke $r3.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r2);

        return;
    }

    public void visitTypeVariable(java.lang.reflect.TypeVariable)
    {
        com.google.common.reflect.Types$2 r0;
        java.lang.reflect.Type $r4;
        java.lang.reflect.TypeVariable $r2;
        java.lang.reflect.Type[] $r3;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: com.google.common.reflect.Types$2;

        $r2 := @parameter0: java.lang.reflect.TypeVariable;

        $r1 = r0.<com.google.common.reflect.Types$2: java.util.concurrent.atomic.AtomicReference val$result>;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        $r4 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type access$100(java.lang.reflect.Type[])>($r3);

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r4);

        return;
    }

    public void visitWildcardType(java.lang.reflect.WildcardType)
    {
        com.google.common.reflect.Types$2 r0;
        java.lang.reflect.Type $r4;
        java.lang.reflect.WildcardType $r2;
        java.lang.reflect.Type[] $r3;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: com.google.common.reflect.Types$2;

        $r2 := @parameter0: java.lang.reflect.WildcardType;

        $r1 = r0.<com.google.common.reflect.Types$2: java.util.concurrent.atomic.AtomicReference val$result>;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r4 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type access$100(java.lang.reflect.Type[])>($r3);

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r4);

        return;
    }
}
