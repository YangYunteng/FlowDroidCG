public class org.codehaus.jackson.util.VersionUtil extends java.lang.Object
{
    public static final java.lang.String VERSION_FILE;
    public static final java.util.regex.Pattern VERSION_SEPARATOR;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.codehaus.jackson.util.VersionUtil: java.lang.String VERSION_FILE> = "VERSION.txt";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[-_./;:]");

        <org.codehaus.jackson.util.VersionUtil: java.util.regex.Pattern VERSION_SEPARATOR> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.util.VersionUtil r0;

        r0 := @this: org.codehaus.jackson.util.VersionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.codehaus.jackson.Version parseVersion(java.lang.String)
    {
        org.codehaus.jackson.Version $r4;
        java.lang.String[] $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r0, $r1;
        java.util.regex.Pattern $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = null;

        if $r0 != null goto label1;

        return null;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return null;

     label2:
        $r2 = <org.codehaus.jackson.util.VersionUtil: java.util.regex.Pattern VERSION_SEPARATOR>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>($r0);

        $i0 = lengthof $r3;

        if $i0 >= 2 goto label3;

        return null;

     label3:
        $i1 = 0;

        $r0 = $r3[0];

        $i0 = staticinvoke <org.codehaus.jackson.util.VersionUtil: int parseVersionPart(java.lang.String)>($r0);

        $r0 = $r3[1];

        $i2 = staticinvoke <org.codehaus.jackson.util.VersionUtil: int parseVersionPart(java.lang.String)>($r0);

        $i3 = lengthof $r3;

        if $i3 <= 2 goto label4;

        $r0 = $r3[2];

        $i1 = staticinvoke <org.codehaus.jackson.util.VersionUtil: int parseVersionPart(java.lang.String)>($r0);

     label4:
        $i3 = lengthof $r3;

        if $i3 <= 3 goto label5;

        $r1 = $r3[3];

     label5:
        $r4 = new org.codehaus.jackson.Version;

        specialinvoke $r4.<org.codehaus.jackson.Version: void <init>(int,int,int,java.lang.String)>($i0, $i2, $i1, $r1);

        return $r4;
    }

    public static int parseVersionPart(java.lang.String)
    {
        int $i0, $i1, $i2, $i4, $i5;
        char $c3;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toString()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $i4 = (int) $c3;

        if $i4 > 57 goto label3;

        $i4 = (int) $c3;

        if $i4 >= 48 goto label2;

        return $i2;

     label2:
        $i2 = $i2 * 10;

        $i4 = (int) $c3;

        $i5 = -48;

        $i4 = $i4 + $i5;

        $i2 = $i2 + $i4;

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i2;
    }

    public static org.codehaus.jackson.Version versionFor(java.lang.Class)
    {
        java.lang.Throwable $r12;
        org.codehaus.jackson.Version $r5, $r9;
        java.io.IOException $r1, $r2, $r3, $r10, $r13;
        java.lang.RuntimeException $r11;
        java.io.InputStreamReader $r0;
        java.lang.Class $r4;
        java.io.BufferedReader $r7;
        java.lang.String $r8;
        java.io.InputStream $r6;

        $r4 := @parameter0: java.lang.Class;

        $r5 = null;

     label01:
        $r6 = virtualinvoke $r4.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("VERSION.txt");

     label02:
        if $r6 == null goto label16;

     label03:
        $r7 = new java.io.BufferedReader;

        $r0 = new java.io.InputStreamReader;

        specialinvoke $r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r6, "UTF-8");

        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader)>($r0);

        $r8 = virtualinvoke $r7.<java.io.BufferedReader: java.lang.String readLine()>();

        $r9 = staticinvoke <org.codehaus.jackson.util.VersionUtil: org.codehaus.jackson.Version parseVersion(java.lang.String)>($r8);

     label04:
        $r5 = $r9;

     label05:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

     label06:
        goto label16;

     label07:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

     label08:
        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

     label09:
        throw $r11;

     label10:
        $r12 := @caughtexception;

     label11:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

     label12:
        throw $r12;

     label13:
        $r13 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

     label14:
        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r13);

     label15:
        throw $r11;

     label16:
        if $r5 != null goto label20;

        $r5 = staticinvoke <org.codehaus.jackson.Version: org.codehaus.jackson.Version unknownVersion()>();

        return $r5;

     label17:
        $r1 := @caughtexception;

        goto label16;

     label18:
        $r2 := @caughtexception;

        goto label16;

     label19:
        $r3 := @caughtexception;

        goto label16;

     label20:
        return $r5;

        catch java.io.IOException from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label08 to label09 with label18;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label12 to label13 with label19;
        catch java.io.IOException from label14 to label15 with label19;
    }
}
