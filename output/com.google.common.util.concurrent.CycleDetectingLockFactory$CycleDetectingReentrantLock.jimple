public final class com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock extends java.util.concurrent.locks.ReentrantLock implements com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock
{
    public final com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode;
    public final com.google.common.util.concurrent.CycleDetectingLockFactory this$0;

    public void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, boolean)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock;

        $r1 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory;

        $r2 := @parameter1: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $z0 := @parameter2: boolean;

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock: com.google.common.util.concurrent.CycleDetectingLockFactory this$0> = $r1;

        specialinvoke r0.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>($z0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode> = $r2;

        return;
    }

    public void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, boolean, com.google.common.util.concurrent.CycleDetectingLockFactory$1)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$1 $r3;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock;

        $r1 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory;

        $r2 := @parameter1: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $z0 := @parameter2: boolean;

        $r3 := @parameter3: com.google.common.util.concurrent.CycleDetectingLockFactory$1;

        specialinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean)>($r1, $r2, $z0);

        return;
    }

    public com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode()
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock r0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock;

        r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode>;

        return r1;
    }

    public boolean isAcquiredByCurrentThread()
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        return $z0;
    }

    public void lock()
    {
        java.lang.Throwable $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock r0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock;

        $r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock: com.google.common.util.concurrent.CycleDetectingLockFactory this$0>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r1, r0);

     label1:
        specialinvoke r0.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>(r0);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>(r0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void lockInterruptibly()
    {
        java.lang.Throwable $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock r0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock;

        $r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock: com.google.common.util.concurrent.CycleDetectingLockFactory this$0>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r1, r0);

     label1:
        specialinvoke r0.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label2:
        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>(r0);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>(r0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean tryLock()
    {
        java.lang.Throwable $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock;

        $r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock: com.google.common.util.concurrent.CycleDetectingLockFactory this$0>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r1, r0);

     label1:
        $z0 = specialinvoke r0.<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>();

     label2:
        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>(r0);

        return $z0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>(r0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean tryLock(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.lang.Throwable $r3;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock r0;
        long $l0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock: com.google.common.util.concurrent.CycleDetectingLockFactory this$0>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r2, r0);

     label1:
        $z0 = specialinvoke r0.<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>($l0, $r1);

     label2:
        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>(r0);

        return $z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>(r0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void unlock()
    {
        java.lang.Throwable $r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock r0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock;

     label1:
        specialinvoke r0.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label2:
        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>(r0);

        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>(r0);

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
