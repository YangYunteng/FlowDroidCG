public class project.android.imageprocessing.filter.effect.StretchDistortionFilter extends project.android.imageprocessing.filter.BasicFilter
{
    public static final java.lang.String UNIFORM_CENTER;
    public android.graphics.PointF center;
    public int centerHandle;

    public void <init>(android.graphics.PointF)
    {
        project.android.imageprocessing.filter.effect.StretchDistortionFilter r0;
        android.graphics.PointF $r1;

        r0 := @this: project.android.imageprocessing.filter.effect.StretchDistortionFilter;

        $r1 := @parameter0: android.graphics.PointF;

        specialinvoke r0.<project.android.imageprocessing.filter.BasicFilter: void <init>()>();

        r0.<project.android.imageprocessing.filter.effect.StretchDistortionFilter: android.graphics.PointF center> = $r1;

        return;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.filter.effect.StretchDistortionFilter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.StretchDistortionFilter;

        return "precision mediump float;\nuniform sampler2D u_Texture0;\nvarying vec2 v_TexCoord;\nuniform vec2 u_Center;\nvoid main(){\n\thighp vec2 normCoord = 2.0 * v_TexCoord - 1.0;\n\thighp vec2 normCenter = 2.0 * u_Center - 1.0;\n\tnormCoord -= normCenter;\n\tmediump vec2 s = sign(normCoord);\n\tnormCoord = abs(normCoord);\n\tnormCoord = 0.5 * normCoord + 0.5 * smoothstep(0.25, 0.5, normCoord) * normCoord;\n\tnormCoord = s * normCoord;\n\tnormCoord += normCenter;\n\tmediump vec2 textureCoordinateToUse = normCoord / 2.0 + 0.5;\n\tgl_FragColor = texture2D(u_Texture0, textureCoordinateToUse );\n}\n";
    }

    public void initShaderHandles()
    {
        int $i0;
        project.android.imageprocessing.filter.effect.StretchDistortionFilter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.StretchDistortionFilter;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void initShaderHandles()>();

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_Center");

        r0.<project.android.imageprocessing.filter.effect.StretchDistortionFilter: int centerHandle> = $i0;

        return;
    }

    public void passShaderValues()
    {
        project.android.imageprocessing.filter.effect.StretchDistortionFilter r0;
        android.graphics.PointF $r1;
        int $i0;
        float $f0, $f1;

        r0 := @this: project.android.imageprocessing.filter.effect.StretchDistortionFilter;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void passShaderValues()>();

        $i0 = r0.<project.android.imageprocessing.filter.effect.StretchDistortionFilter: int centerHandle>;

        $r1 = r0.<project.android.imageprocessing.filter.effect.StretchDistortionFilter: android.graphics.PointF center>;

        $f0 = $r1.<android.graphics.PointF: float x>;

        $f1 = $r1.<android.graphics.PointF: float y>;

        staticinvoke <android.opengl.GLES20: void glUniform2f(int,float,float)>($i0, $f0, $f1);

        return;
    }

    public static void <clinit>()
    {
        <project.android.imageprocessing.filter.effect.StretchDistortionFilter: java.lang.String UNIFORM_CENTER> = "u_Center";

        return;
    }
}
