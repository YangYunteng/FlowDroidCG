public final class com.google.android.material.drawable.DrawableUtils extends java.lang.Object
{

    public void <init>()
    {
        com.google.android.material.drawable.DrawableUtils r0;

        r0 := @this: com.google.android.material.drawable.DrawableUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.util.AttributeSet parseDrawableXml(android.content.Context, int, java.lang.CharSequence)
    {
        android.content.Context $r0;
        java.lang.CharSequence $r1;
        android.content.res.Resources$NotFoundException $r9;
        android.content.res.XmlResourceParser $r3;
        java.lang.Exception $r8;
        org.xmlpull.v1.XmlPullParserException $r6;
        android.util.AttributeSet $r5;
        int $i0, $i1;
        java.lang.StringBuilder $r7;
        java.lang.String $r4;
        android.content.res.Resources $r2;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.CharSequence;

     label01:
        $r2 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>($i0);

     label02:
        $i1 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int next()>();

     label03:
        if $i1 == 2 goto label04;

        if $i1 != 1 goto label02;

     label04:
        if $i1 != 2 goto label12;

     label05:
        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r4, $r1);

     label06:
        if $z0 == 0 goto label09;

     label07:
        $r5 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>($r3);

     label08:
        return $r5;

     label09:
        $r6 = new org.xmlpull.v1.XmlPullParserException;

        $r7 = new java.lang.StringBuilder;

     label10:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must have a <");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> start tag");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r4);

     label11:
        throw $r6;

     label12:
        $r6 = new org.xmlpull.v1.XmlPullParserException;

     label13:
        specialinvoke $r6.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

     label14:
        throw $r6;

     label15:
        $r8 := @caughtexception;

        goto label17;

     label16:
        $r8 := @caughtexception;

     label17:
        $r9 = new android.content.res.Resources$NotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load badge resource ID #0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r4);

        virtualinvoke $r9.<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>($r8);

        goto label18;

     label18:
        throw $r9;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label03 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label12 with label16;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label15 with label16;
        catch java.io.IOException from label01 to label03 with label15;
        catch java.io.IOException from label05 to label06 with label15;
        catch java.io.IOException from label07 to label08 with label15;
        catch java.io.IOException from label10 to label11 with label15;
        catch java.io.IOException from label13 to label14 with label15;
    }

    public static void setRippleDrawableRadius(android.graphics.drawable.RippleDrawable, int)
    {
        java.lang.IllegalStateException $r8;
        java.lang.Object[] $r5;
        java.lang.Class[] $r0;
        java.lang.ReflectiveOperationException $r7;
        java.lang.Integer $r6;
        android.graphics.drawable.RippleDrawable $r2;
        int $i0, $i1;
        java.lang.Class $r1, $r3;
        java.lang.reflect.Method $r4;

        $r2 := @parameter0: android.graphics.drawable.RippleDrawable;

        $i0 := @parameter1: int;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 23 goto label01;

        virtualinvoke $r2.<android.graphics.drawable.RippleDrawable: void setRadius(int)>($i0);

        return;

     label01:
        $r3 = class "Landroid/graphics/drawable/RippleDrawable;";

        $r0 = newarray (java.lang.Class)[1];

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[0] = $r1;

     label02:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("setMaxRadius", $r0);

     label03:
        $r5 = newarray (java.lang.Object)[1];

     label04:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label05:
        $r5[0] = $r6;

     label06:
        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r5);

     label07:
        return;

     label08:
        $r7 := @caughtexception;

        goto label11;

     label09:
        $r7 := @caughtexception;

        goto label11;

     label10:
        $r7 := @caughtexception;

     label11:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t set RippleDrawable radius", $r7);

        throw $r8;

        catch java.lang.NoSuchMethodException from label02 to label03 with label10;
        catch java.lang.NoSuchMethodException from label04 to label05 with label10;
        catch java.lang.NoSuchMethodException from label06 to label07 with label10;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label09;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label09;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label09;
        catch java.lang.IllegalAccessException from label02 to label03 with label08;
        catch java.lang.IllegalAccessException from label04 to label05 with label08;
        catch java.lang.IllegalAccessException from label06 to label07 with label08;
    }

    public static android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.drawable.Drawable, android.content.res.ColorStateList, android.graphics.PorterDuff$Mode)
    {
        android.content.res.ColorStateList $r2;
        int[] $r3;
        int $i0;
        android.graphics.PorterDuffColorFilter $r4;
        android.graphics.drawable.Drawable $r1;
        android.graphics.PorterDuff$Mode $r0;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 := @parameter1: android.content.res.ColorStateList;

        $r0 := @parameter2: android.graphics.PorterDuff$Mode;

        if $r2 == null goto label2;

        if $r0 != null goto label1;

        goto label2;

     label1:
        $r3 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int[] getState()>();

        $i0 = virtualinvoke $r2.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r3, 0);

        $r4 = new android.graphics.PorterDuffColorFilter;

        specialinvoke $r4.<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>($i0, $r0);

        return $r4;

     label2:
        return null;
    }
}
