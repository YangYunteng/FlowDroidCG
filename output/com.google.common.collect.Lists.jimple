public final class com.google.common.collect.Lists extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.collect.Lists r0;

        r0 := @this: com.google.common.collect.Lists;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean addAllImpl(java.util.List, int, java.lang.Iterable)
    {
        java.util.Iterator $r3;
        java.util.ListIterator $r2;
        java.lang.Iterable $r1;
        java.util.List $r0;
        int $i0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Iterable;

        $r2 = interfaceinvoke $r0.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = 0;

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r2.<java.util.ListIterator: void add(java.lang.Object)>($r4);

        $z0 = 1;

        goto label1;

     label2:
        return $z0;
    }

    public static java.util.List asList(java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] $r2;
        com.google.common.collect.Lists$TwoPlusArrayList $r3;
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = new com.google.common.collect.Lists$TwoPlusArrayList;

        specialinvoke $r3.<com.google.common.collect.Lists$TwoPlusArrayList: void <init>(java.lang.Object,java.lang.Object,java.lang.Object[])>($r0, $r1, $r2);

        return $r3;
    }

    public static java.util.List asList(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object $r0;
        java.lang.Object[] $r1;
        com.google.common.collect.Lists$OnePlusArrayList $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = new com.google.common.collect.Lists$OnePlusArrayList;

        specialinvoke $r2.<com.google.common.collect.Lists$OnePlusArrayList: void <init>(java.lang.Object,java.lang.Object[])>($r0, $r1);

        return $r2;
    }

    public static java.util.List cartesianProduct(java.util.List)
    {
        java.util.List $r0;

        $r0 := @parameter0: java.util.List;

        $r0 = staticinvoke <com.google.common.collect.CartesianList: java.util.List create(java.util.List)>($r0);

        return $r0;
    }

    public static transient java.util.List cartesianProduct(java.util.List[])
    {
        java.util.List $r1;
        java.util.List[] $r0;

        $r0 := @parameter0: java.util.List[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.List cartesianProduct(java.util.List)>($r1);

        return $r1;
    }

    public static java.util.List cast(java.lang.Iterable)
    {
        java.util.List $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = (java.util.List) $r0;

        return $r1;
    }

    public static com.google.common.collect.ImmutableList charactersOf(java.lang.String)
    {
        java.lang.String $r1;
        com.google.common.collect.Lists$StringAsImmutableList $r0;

        $r1 := @parameter0: java.lang.String;

        $r0 = new com.google.common.collect.Lists$StringAsImmutableList;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        specialinvoke $r0.<com.google.common.collect.Lists$StringAsImmutableList: void <init>(java.lang.String)>($r1);

        return $r0;
    }

    public static java.util.List charactersOf(java.lang.CharSequence)
    {
        com.google.common.collect.Lists$CharSequenceAsList $r0;
        java.lang.CharSequence $r1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 = new com.google.common.collect.Lists$CharSequenceAsList;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        specialinvoke $r0.<com.google.common.collect.Lists$CharSequenceAsList: void <init>(java.lang.CharSequence)>($r1);

        return $r0;
    }

    public static int computeArrayListCapacity(int)
    {
        int $i0;
        long $l1, $l2;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "arraySize");

        $l1 = (long) $i0;

        $l1 = $l1 + 5L;

        $i0 = $i0 / 10;

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        $i0 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l1);

        return $i0;
    }

    public static boolean equalsImpl(java.util.List, java.lang.Object)
    {
        java.util.Iterator $r4, $r5;
        java.util.List $r0, $r2;
        int $i0, $i1;
        java.lang.Object $r1, $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof java.util.List;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (java.util.List) $r1;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $z0 = $r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label7;

        $z0 = $r2 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label7;

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label6;

        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $i1 = $i1 + 1;

        goto label4;

     label6:
        return 1;

     label7:
        $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean elementsEqual(java.util.Iterator,java.util.Iterator)>($r4, $r5);

        return $z0;
    }

    public static int hashCodeImpl(java.util.List)
    {
        java.util.List $r0;
        java.util.Iterator $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $i0 = 1;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = $i0 * 31;

        if $r2 != null goto label2;

        $i1 = 0;

        goto label3;

     label2:
        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label3:
        $i0 = $i0 + $i1;

        $i1 = -1;

        $i0 = $i0 ^ $i1;

        $i1 = -1;

        $i0 = $i0 ^ $i1;

        goto label1;

     label4:
        return $i0;
    }

    public static int indexOfImpl(java.util.List, java.lang.Object)
    {
        java.util.List $r1;
        java.util.ListIterator $r2;
        int $i0;
        java.lang.Object $r0, $r3;
        boolean $z0;

        $r1 := @parameter0: java.util.List;

        $r0 := @parameter1: java.lang.Object;

        $z0 = $r1 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label1;

        $i0 = staticinvoke <com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)>($r1, $r0);

        return $i0;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object next()>();

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r0, $r3);

        if $z0 == 0 goto label2;

        $i0 = interfaceinvoke $r2.<java.util.ListIterator: int previousIndex()>();

        return $i0;

     label3:
        $i0 = -1;

        return $i0;
    }

    public static int indexOfRandomAccess(java.util.List, java.lang.Object)
    {
        java.util.List $r0;
        int $i0, $i1;
        java.lang.Object $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.lang.Object;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = 0;

        if $r1 != null goto label3;

     label1:
        if $i1 >= $i0 goto label5;

        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        if $r1 != null goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        if $i1 >= $i0 goto label5;

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

        return $i1;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $i0 = -1;

        return $i0;
    }

    public static int lastIndexOfImpl(java.util.List, java.lang.Object)
    {
        java.util.List $r1;
        java.util.ListIterator $r2;
        int $i0;
        java.lang.Object $r0, $r3;
        boolean $z0;

        $r1 := @parameter0: java.util.List;

        $r0 := @parameter1: java.lang.Object;

        $z0 = $r1 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label1;

        $i0 = staticinvoke <com.google.common.collect.Lists: int lastIndexOfRandomAccess(java.util.List,java.lang.Object)>($r1, $r0);

        return $i0;

     label1:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r0, $r3);

        if $z0 == 0 goto label2;

        $i0 = interfaceinvoke $r2.<java.util.ListIterator: int nextIndex()>();

        return $i0;

     label3:
        $i0 = -1;

        return $i0;
    }

    public static int lastIndexOfRandomAccess(java.util.List, java.lang.Object)
    {
        java.util.List $r0;
        int $i0, $i1;
        java.lang.Object $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.lang.Object;

        if $r1 != null goto label3;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

     label1:
        if $i0 < 0 goto label6;

        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        if $r1 != null goto label2;

        return $i0;

     label2:
        $i1 = -1;

        $i0 = $i0 + $i1;

        goto label1;

     label3:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

     label4:
        if $i0 < 0 goto label6;

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        return $i0;

     label5:
        $i1 = -1;

        $i0 = $i0 + $i1;

        goto label4;

     label6:
        $i0 = -1;

        return $i0;
    }

    public static java.util.ListIterator listIteratorImpl(java.util.List, int)
    {
        java.util.List $r2;
        com.google.common.collect.Lists$AbstractListWrapper $r0;
        java.util.ListIterator $r1;
        int $i0;

        $r2 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $r0 = new com.google.common.collect.Lists$AbstractListWrapper;

        specialinvoke $r0.<com.google.common.collect.Lists$AbstractListWrapper: void <init>(java.util.List)>($r2);

        $r1 = virtualinvoke $r0.<java.util.AbstractList: java.util.ListIterator listIterator(int)>($i0);

        return $r1;
    }

    public static java.util.ArrayList newArrayList()
    {
        java.util.ArrayList $r0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        return $r0;
    }

    public static java.util.ArrayList newArrayList(java.lang.Iterable)
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.lang.Iterable $r0;
        boolean $z0;
        java.util.ArrayList $r1;

        $r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r1 = new java.util.ArrayList;

        $r2 = staticinvoke <com.google.common.collect.Collections2: java.util.Collection cast(java.lang.Iterable)>($r0);

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r1;

     label1:
        $r3 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>($r3);

        return $r1;
    }

    public static java.util.ArrayList newArrayList(java.util.Iterator)
    {
        java.util.Iterator $r0;
        java.util.ArrayList $r1;

        $r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        staticinvoke <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>($r1, $r0);

        return $r1;
    }

    public static transient java.util.ArrayList newArrayList(java.lang.Object[])
    {
        int $i0;
        java.lang.Object[] $r0;
        java.util.ArrayList $r1;

        $r0 := @parameter0: java.lang.Object[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        $i0 = staticinvoke <com.google.common.collect.Lists: int computeArrayListCapacity(int)>($i0);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, $r0);

        return $r1;
    }

    public static java.util.ArrayList newArrayListWithCapacity(int)
    {
        int $i0;
        java.util.ArrayList $r0;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "initialArraySize");

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        return $r0;
    }

    public static java.util.ArrayList newArrayListWithExpectedSize(int)
    {
        int $i0;
        java.util.ArrayList $r0;

        $i0 := @parameter0: int;

        $r0 = new java.util.ArrayList;

        $i0 = staticinvoke <com.google.common.collect.Lists: int computeArrayListCapacity(int)>($i0);

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        return $r0;
    }

    public static java.util.concurrent.CopyOnWriteArrayList newCopyOnWriteArrayList()
    {
        java.util.concurrent.CopyOnWriteArrayList $r0;

        $r0 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        return $r0;
    }

    public static java.util.concurrent.CopyOnWriteArrayList newCopyOnWriteArrayList(java.lang.Iterable)
    {
        java.util.Collection $r1;
        java.lang.Iterable $r0;
        boolean $z0;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        $r0 := @parameter0: java.lang.Iterable;

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.Collections2: java.util.Collection cast(java.lang.Iterable)>($r0);

        goto label2;

     label1:
        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r0);

     label2:
        $r2 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>($r1);

        return $r2;
    }

    public static java.util.LinkedList newLinkedList()
    {
        java.util.LinkedList $r0;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        return $r0;
    }

    public static java.util.LinkedList newLinkedList(java.lang.Iterable)
    {
        java.util.LinkedList $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.LinkedList newLinkedList()>();

        staticinvoke <com.google.common.collect.Iterables: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, $r0);

        return $r1;
    }

    public static java.util.List partition(java.util.List, int)
    {
        java.util.List $r0;
        com.google.common.collect.Lists$Partition $r2;
        com.google.common.collect.Lists$RandomAccessPartition $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $z0 = $r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label3;

        $r1 = new com.google.common.collect.Lists$RandomAccessPartition;

        specialinvoke $r1.<com.google.common.collect.Lists$RandomAccessPartition: void <init>(java.util.List,int)>($r0, $i0);

        return $r1;

     label3:
        $r2 = new com.google.common.collect.Lists$Partition;

        specialinvoke $r2.<com.google.common.collect.Lists$Partition: void <init>(java.util.List,int)>($r0, $i0);

        return $r2;
    }

    public static java.util.List reverse(java.util.List)
    {
        java.util.List $r0;
        com.google.common.collect.ImmutableList $r1;
        com.google.common.collect.Lists$ReverseList $r2;
        com.google.common.collect.Lists$RandomAccessReverseList $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $z0 = $r0 instanceof com.google.common.collect.ImmutableList;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.collect.ImmutableList) $r0;

        $r1 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList reverse()>();

        return $r1;

     label1:
        $z0 = $r0 instanceof com.google.common.collect.Lists$ReverseList;

        if $z0 == 0 goto label2;

        $r2 = (com.google.common.collect.Lists$ReverseList) $r0;

        $r0 = virtualinvoke $r2.<com.google.common.collect.Lists$ReverseList: java.util.List getForwardList()>();

        return $r0;

     label2:
        $z0 = $r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label3;

        $r3 = new com.google.common.collect.Lists$RandomAccessReverseList;

        specialinvoke $r3.<com.google.common.collect.Lists$RandomAccessReverseList: void <init>(java.util.List)>($r0);

        return $r3;

     label3:
        $r2 = new com.google.common.collect.Lists$ReverseList;

        specialinvoke $r2.<com.google.common.collect.Lists$ReverseList: void <init>(java.util.List)>($r0);

        return $r2;
    }

    public static java.util.List subListImpl(java.util.List, int, int)
    {
        java.util.List $r0;
        com.google.common.collect.Lists$AbstractListWrapper $r1;
        int $i0, $i1;
        com.google.common.collect.Lists$2 $r3;
        boolean $z0;
        com.google.common.collect.Lists$1 $r2;

        $r0 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = $r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label1;

        $r2 = new com.google.common.collect.Lists$1;

        $r1 = $r2;

        specialinvoke $r2.<com.google.common.collect.Lists$1: void <init>(java.util.List)>($r0);

        goto label2;

     label1:
        $r3 = new com.google.common.collect.Lists$2;

        $r1 = $r3;

        specialinvoke $r3.<com.google.common.collect.Lists$2: void <init>(java.util.List)>($r0);

     label2:
        $r0 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        return $r0;
    }

    public static java.util.List transform(java.util.List, com.google.common.base.Function)
    {
        java.util.List $r0;
        com.google.common.base.Function $r1;
        com.google.common.collect.Lists$TransformingRandomAccessList $r2;
        com.google.common.collect.Lists$TransformingSequentialList $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: com.google.common.base.Function;

        $z0 = $r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label1;

        $r2 = new com.google.common.collect.Lists$TransformingRandomAccessList;

        specialinvoke $r2.<com.google.common.collect.Lists$TransformingRandomAccessList: void <init>(java.util.List,com.google.common.base.Function)>($r0, $r1);

        return $r2;

     label1:
        $r3 = new com.google.common.collect.Lists$TransformingSequentialList;

        specialinvoke $r3.<com.google.common.collect.Lists$TransformingSequentialList: void <init>(java.util.List,com.google.common.base.Function)>($r0, $r1);

        return $r3;
    }
}
