public abstract class com.google.common.reflect.TypeToken extends com.google.common.reflect.TypeCapture implements java.io.Serializable
{
    public final java.lang.reflect.Type runtimeType;
    public transient com.google.common.reflect.TypeResolver typeResolver;

    public void <init>()
    {
        com.google.common.reflect.TypeToken r0;
        java.lang.reflect.Type $r1;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        specialinvoke r0.<com.google.common.reflect.TypeCapture: void <init>()>();

        $r1 = virtualinvoke r0.<com.google.common.reflect.TypeCapture: java.lang.reflect.Type capture()>();

        r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType> = $r1;

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r1 instanceof java.lang.reflect.TypeVariable;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object)>($z0, "Cannot construct a TypeToken for a type variable.\nYou probably meant to call new TypeToken<%s>(getClass()) that can resolve the type variable for you.\nIf you do need to create a TypeToken of a type variable, please use TypeToken.of() instead.", $r1);

        return;
    }

    public void <init>(java.lang.Class)
    {
        java.lang.reflect.Type $r2;
        java.lang.Class $r1;
        com.google.common.reflect.TypeToken r0, $r3;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<com.google.common.reflect.TypeCapture: void <init>()>();

        $r2 = specialinvoke r0.<com.google.common.reflect.TypeCapture: java.lang.reflect.Type capture()>();

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType> = $r2;

        return;

     label1:
        $r3 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>($r1);

        $r3 = virtualinvoke $r3.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type)>($r2);

        $r2 = $r3.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType> = $r2;

        return;
    }

    public void <init>(java.lang.reflect.Type)
    {
        com.google.common.reflect.TypeToken r0;
        java.lang.reflect.Type $r1;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Type;

        specialinvoke r0.<com.google.common.reflect.TypeCapture: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType> = $r1;

        return;
    }

    public void <init>(java.lang.reflect.Type, com.google.common.reflect.TypeToken$1)
    {
        com.google.common.reflect.TypeToken$1 $r2;
        com.google.common.reflect.TypeToken r0;
        java.lang.reflect.Type $r1;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Type;

        $r2 := @parameter1: com.google.common.reflect.TypeToken$1;

        specialinvoke r0.<com.google.common.reflect.TypeToken: void <init>(java.lang.reflect.Type)>($r1);

        return;
    }

    public static java.lang.reflect.Type[] access$000(com.google.common.reflect.TypeToken, java.lang.reflect.Type[])
    {
        java.lang.reflect.Type[] $r1;
        com.google.common.reflect.TypeToken $r0;

        $r0 := @parameter0: com.google.common.reflect.TypeToken;

        $r1 := @parameter1: java.lang.reflect.Type[];

        specialinvoke $r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type[] resolveInPlace(java.lang.reflect.Type[])>($r1);

        return $r1;
    }

    public static com.google.common.collect.ImmutableSet access$200(com.google.common.reflect.TypeToken)
    {
        com.google.common.collect.ImmutableSet $r0;
        com.google.common.reflect.TypeToken $r1;

        $r1 := @parameter0: com.google.common.reflect.TypeToken;

        $r0 = specialinvoke $r1.<com.google.common.reflect.TypeToken: com.google.common.collect.ImmutableSet getRawTypes()>();

        return $r0;
    }

    public static java.lang.reflect.Type access$400(com.google.common.reflect.TypeToken)
    {
        com.google.common.reflect.TypeToken $r0;
        java.lang.reflect.Type r1;

        $r0 := @parameter0: com.google.common.reflect.TypeToken;

        r1 = $r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        return r1;
    }

    public static com.google.common.reflect.TypeToken$Bounds any(java.lang.reflect.Type[])
    {
        java.lang.reflect.Type[] $r0;
        com.google.common.reflect.TypeToken$Bounds $r1;

        $r0 := @parameter0: java.lang.reflect.Type[];

        $r1 = new com.google.common.reflect.TypeToken$Bounds;

        specialinvoke $r1.<com.google.common.reflect.TypeToken$Bounds: void <init>(java.lang.reflect.Type[],boolean)>($r0, 1);

        return $r1;
    }

    private com.google.common.reflect.TypeToken boundAsSuperclass(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r1;
        java.lang.Class $r2;
        com.google.common.reflect.TypeToken r0;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Type;

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r1);

        $r2 = virtualinvoke r0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        return r0;
    }

    private com.google.common.collect.ImmutableList boundsAsInterfaces(java.lang.reflect.Type[])
    {
        com.google.common.reflect.TypeToken r0;
        com.google.common.collect.ImmutableList $r5;
        java.lang.reflect.Type $r3;
        int $i0, $i1;
        java.lang.reflect.Type[] $r1;
        java.lang.Class $r4;
        com.google.common.collect.ImmutableList$Builder $r2;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Type[];

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r3 = $r1[$i1];

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r3);

        $r4 = virtualinvoke r0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r2.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>(r0);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r5 = virtualinvoke $r2.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        return $r5;
    }

    public static com.google.common.reflect.TypeToken$Bounds every(java.lang.reflect.Type[])
    {
        java.lang.reflect.Type[] $r0;
        com.google.common.reflect.TypeToken$Bounds $r1;

        $r0 := @parameter0: java.lang.reflect.Type[];

        $r1 = new com.google.common.reflect.TypeToken$Bounds;

        specialinvoke $r1.<com.google.common.reflect.TypeToken$Bounds: void <init>(java.lang.reflect.Type[],boolean)>($r0, 0);

        return $r1;
    }

    private com.google.common.reflect.TypeToken getArraySubtype(java.lang.Class)
    {
        java.lang.Class $r1;
        com.google.common.reflect.TypeToken r0;
        java.lang.reflect.Type $r2;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.Class;

        r0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getComponentType()>();

        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        r0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getSubtype(java.lang.Class)>($r1);

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r2 = staticinvoke <com.google.common.reflect.TypeToken: java.lang.reflect.Type newArrayClassOrGenericArrayType(java.lang.reflect.Type)>($r2);

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r2);

        return r0;
    }

    private com.google.common.reflect.TypeToken getArraySupertype(java.lang.Class)
    {
        java.lang.reflect.Type $r3;
        java.lang.Class $r1;
        com.google.common.reflect.TypeToken r0, $r2;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getComponentType()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($r2, "%s isn\'t a super type of %s", $r1, r0);

        r0 = $r2;

        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        r0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getSupertype(java.lang.Class)>($r1);

        $r3 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r3 = staticinvoke <com.google.common.reflect.TypeToken: java.lang.reflect.Type newArrayClassOrGenericArrayType(java.lang.reflect.Type)>($r3);

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r3);

        return r0;
    }

    private java.lang.reflect.Type getOwnerTypeIfPresent()
    {
        java.lang.reflect.ParameterizedType $r2;
        java.lang.reflect.Type $r1;
        java.lang.Class $r3;
        com.google.common.reflect.TypeToken r0;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r1 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.reflect.ParameterizedType) $r1;

        $r1 = interfaceinvoke $r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        return $r1;

     label1:
        $z0 = $r1 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.Class) $r1;

        $r3 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        return $r3;

     label2:
        return null;
    }

    private com.google.common.collect.ImmutableSet getRawTypes()
    {
        com.google.common.reflect.TypeToken$4 $r1;
        com.google.common.collect.ImmutableSet $r5;
        java.lang.reflect.Type $r2;
        com.google.common.collect.ImmutableSet$Builder $r3;
        java.lang.reflect.Type[] $r4;
        com.google.common.reflect.TypeToken r0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        $r1 = new com.google.common.reflect.TypeToken$4;

        specialinvoke $r1.<com.google.common.reflect.TypeToken$4: void <init>(com.google.common.reflect.TypeToken,com.google.common.collect.ImmutableSet$Builder)>(r0, $r3);

        $r4 = newarray (java.lang.reflect.Type)[1];

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r4[0] = $r2;

        virtualinvoke $r1.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r4);

        $r5 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        return $r5;
    }

    private com.google.common.reflect.TypeToken getSubtypeFromLowerBounds(java.lang.Class, java.lang.reflect.Type[])
    {
        com.google.common.reflect.TypeToken r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.reflect.Type $r3;
        java.lang.reflect.Type[] $r2;
        int $i0;
        java.lang.Class $r1;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.reflect.Type[];

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label1;

        $r3 = $r2[0];

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r3);

        r0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getSubtype(java.lang.Class)>($r1);

        return r0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isn\'t a subclass of ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;
    }

    private com.google.common.reflect.TypeToken getSupertypeFromUpperBounds(java.lang.Class, java.lang.reflect.Type[])
    {
        com.google.common.reflect.TypeToken r0, $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.reflect.Type $r3;
        java.lang.reflect.Type[] $r2;
        int $i0, $i1;
        java.lang.Class $r1;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.reflect.Type[];

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r3 = $r2[$i1];

        $r4 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r3);

        $z0 = virtualinvoke $r4.<com.google.common.reflect.TypeToken: boolean isSubtypeOf(java.lang.reflect.Type)>($r1);

        if $z0 == 0 goto label2;

        r0 = virtualinvoke $r4.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getSupertype(java.lang.Class)>($r1);

        return r0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isn\'t a super type of ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        goto label4;

     label4:
        throw $r5;
    }

    private boolean is(java.lang.reflect.Type)
    {
        com.google.common.reflect.TypeToken$Bounds $r5;
        java.lang.reflect.Type $r1, $r2;
        java.lang.reflect.WildcardType $r3;
        java.lang.reflect.Type[] $r4;
        com.google.common.reflect.TypeToken r0;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Type;

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label3;

        $r3 = (java.lang.reflect.WildcardType) $r1;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r5 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken$Bounds every(java.lang.reflect.Type[])>($r4);

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = virtualinvoke $r5.<com.google.common.reflect.TypeToken$Bounds: boolean isSupertypeOf(java.lang.reflect.Type)>($r1);

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $r5 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken$Bounds every(java.lang.reflect.Type[])>($r4);

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = virtualinvoke $r5.<com.google.common.reflect.TypeToken$Bounds: boolean isSubtypeOf(java.lang.reflect.Type)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        return 0;
    }

    private boolean isOwnedBySubtypeOf(java.lang.reflect.Type)
    {
        java.util.Iterator $r3;
        java.lang.reflect.Type $r1, $r5;
        java.lang.Object $r4;
        com.google.common.reflect.TypeToken r0;
        com.google.common.reflect.TypeToken$TypeSet $r2;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Type;

        $r2 = virtualinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken$TypeSet getTypes()>();

        $r3 = virtualinvoke $r2.<com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r0 = (com.google.common.reflect.TypeToken) $r4;

        $r5 = specialinvoke r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type getOwnerTypeIfPresent()>();

        if $r5 == null goto label1;

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r5);

        $z0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: boolean isSubtypeOf(java.lang.reflect.Type)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    private boolean isSubtypeOfArrayType(java.lang.reflect.GenericArrayType)
    {
        java.lang.reflect.GenericArrayType $r1, $r4;
        java.lang.reflect.Type $r2;
        java.lang.Class $r3;
        com.google.common.reflect.TypeToken r0;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.GenericArrayType;

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.Class) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getComponentType()>();

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>($r3);

        $r2 = interfaceinvoke $r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $z0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: boolean isSubtypeOf(java.lang.reflect.Type)>($r2);

        return $z0;

     label2:
        $z0 = $r2 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label3;

        $r4 = (java.lang.reflect.GenericArrayType) $r2;

        $r2 = interfaceinvoke $r4.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r2);

        $r2 = interfaceinvoke $r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $z0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: boolean isSubtypeOf(java.lang.reflect.Type)>($r2);

        return $z0;

     label3:
        return 0;
    }

    private boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType)
    {
        java.lang.reflect.TypeVariable $r7;
        com.google.common.reflect.TypeToken r0, $r3;
        java.lang.reflect.ParameterizedType $r2;
        java.lang.reflect.Type $r1;
        java.lang.reflect.TypeVariable[] $r5;
        java.lang.reflect.Type[] $r6;
        int $i0, $i1;
        java.lang.Class $r4;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r2 := @parameter0: java.lang.reflect.ParameterizedType;

        $r3 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r2);

        $r4 = virtualinvoke $r3.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();

        $z0 = specialinvoke r0.<com.google.common.reflect.TypeToken: boolean someRawTypeIsSubclassOf(java.lang.Class)>($r4);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $r6 = interfaceinvoke $r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = 0;

     label2:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label4;

        $r7 = $r5[$i0];

        $r3 = virtualinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type)>($r7);

        $r1 = $r6[$i0];

        $z0 = specialinvoke $r3.<com.google.common.reflect.TypeToken: boolean is(java.lang.reflect.Type)>($r1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r1 = interfaceinvoke $r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r4 = (java.lang.Class) $r1;

        $i0 = virtualinvoke $r4.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label5;

        $r1 = interfaceinvoke $r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        if $r1 == null goto label5;

        $r1 = interfaceinvoke $r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $z0 = specialinvoke r0.<com.google.common.reflect.TypeToken: boolean isOwnedBySubtypeOf(java.lang.reflect.Type)>($r1);

        if $z0 == 0 goto label6;

     label5:
        return 1;

     label6:
        return 0;
    }

    private boolean isSupertypeOfArray(java.lang.reflect.GenericArrayType)
    {
        java.lang.reflect.GenericArrayType $r1;
        java.lang.reflect.Type $r2;
        java.lang.Class $r3;
        com.google.common.reflect.TypeToken r0, $r4;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.GenericArrayType;

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.Class) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "[Ljava/lang/Object;");

        return $z0;

     label1:
        $r2 = interfaceinvoke $r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: boolean isSubtypeOf(java.lang.reflect.Type)>($r3);

        return $z0;

     label2:
        $z0 = $r2 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r4 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r2);

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r1 = (java.lang.reflect.GenericArrayType) $r2;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $z0 = virtualinvoke $r4.<com.google.common.reflect.TypeToken: boolean isSubtypeOf(java.lang.reflect.Type)>($r2);

        return $z0;

     label3:
        return 0;
    }

    private boolean isWrapper()
    {
        java.lang.reflect.Type $r1;
        java.util.Set $r2;
        com.google.common.reflect.TypeToken r0;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r2 = staticinvoke <com.google.common.primitives.Primitives: java.util.Set allWrapperTypes()>();

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public static java.lang.reflect.Type newArrayClassOrGenericArrayType(java.lang.reflect.Type)
    {
        com.google.common.reflect.Types$JavaVersion $r0;
        java.lang.reflect.Type $r1;

        $r1 := @parameter0: java.lang.reflect.Type;

        $r0 = <com.google.common.reflect.Types$JavaVersion: com.google.common.reflect.Types$JavaVersion JAVA7>;

        $r1 = virtualinvoke $r0.<com.google.common.reflect.Types$JavaVersion: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)>($r1);

        return $r1;
    }

    public static com.google.common.reflect.TypeToken of(java.lang.Class)
    {
        com.google.common.reflect.TypeToken$SimpleTypeToken $r1;
        java.lang.Class $r0;

        $r0 := @parameter0: java.lang.Class;

        $r1 = new com.google.common.reflect.TypeToken$SimpleTypeToken;

        specialinvoke $r1.<com.google.common.reflect.TypeToken$SimpleTypeToken: void <init>(java.lang.reflect.Type)>($r0);

        return $r1;
    }

    public static com.google.common.reflect.TypeToken of(java.lang.reflect.Type)
    {
        com.google.common.reflect.TypeToken$SimpleTypeToken $r1;
        java.lang.reflect.Type $r0;

        $r0 := @parameter0: java.lang.reflect.Type;

        $r1 = new com.google.common.reflect.TypeToken$SimpleTypeToken;

        specialinvoke $r1.<com.google.common.reflect.TypeToken$SimpleTypeToken: void <init>(java.lang.reflect.Type)>($r0);

        return $r1;
    }

    private java.lang.reflect.Type[] resolveInPlace(java.lang.reflect.Type[])
    {
        java.lang.reflect.Type $r2;
        java.lang.reflect.Type[] $r1;
        int $i0, $i1;
        com.google.common.reflect.TypeToken r0, $r3;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Type[];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r2 = $r1[$i0];

        $r3 = virtualinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type)>($r2);

        $r2 = virtualinvoke $r3.<com.google.common.reflect.TypeToken: java.lang.reflect.Type getType()>();

        $r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private com.google.common.reflect.TypeToken resolveSupertype(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r3;
        com.google.common.reflect.TypeResolver $r1;
        com.google.common.reflect.TypeToken r0, $r2;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r3 := @parameter0: java.lang.reflect.Type;

        $r2 = virtualinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type)>($r3);

        $r1 = r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeResolver typeResolver>;

        $r2.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeResolver typeResolver> = $r1;

        return $r2;
    }

    private java.lang.reflect.Type resolveTypeArgsForSubclass(java.lang.Class)
    {
        com.google.common.reflect.TypeToken r0, $r6, $r7;
        java.lang.reflect.Type $r2, $r8;
        java.lang.reflect.TypeVariable[] $r4;
        int $i0;
        com.google.common.reflect.TypeResolver $r1;
        java.lang.Class $r3, $r5;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r3 := @parameter0: java.lang.Class;

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i0 = lengthof $r4;

        if $i0 == 0 goto label2;

        $r5 = virtualinvoke r0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();

        $r4 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i0 = lengthof $r4;

        if $i0 == 0 goto label1;

        return $r3;

     label1:
        $r6 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken toGenericType(java.lang.Class)>($r3);

        $r3 = virtualinvoke r0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();

        $r7 = virtualinvoke $r6.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getSupertype(java.lang.Class)>($r3);

        $r8 = $r7.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r1 = new com.google.common.reflect.TypeResolver;

        specialinvoke $r1.<com.google.common.reflect.TypeResolver: void <init>()>();

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r1 = virtualinvoke $r1.<com.google.common.reflect.TypeResolver: com.google.common.reflect.TypeResolver where(java.lang.reflect.Type,java.lang.reflect.Type)>($r8, $r2);

        $r2 = $r6.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r2 = virtualinvoke $r1.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r2);

        return $r2;

     label2:
        return $r3;
    }

    private boolean someRawTypeIsSubclassOf(java.lang.Class)
    {
        com.google.common.collect.ImmutableSet $r2;
        java.lang.Class $r1, $r5;
        java.lang.Object $r4;
        com.google.common.reflect.TypeToken r0;
        com.google.common.collect.UnmodifiableIterator $r3;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.Class;

        $r2 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.collect.ImmutableSet getRawTypes()>();

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Class) $r4;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public static com.google.common.reflect.TypeToken toGenericType(java.lang.Class)
    {
        com.google.common.reflect.TypeToken $r1;
        java.lang.reflect.ParameterizedType $r5;
        java.lang.reflect.Type $r2;
        java.lang.reflect.TypeVariable[] $r3;
        int $i0;
        java.lang.Class $r0, $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r1 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken toGenericType(java.lang.Class)>($r0);

        $r2 = $r1.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r2 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)>($r2);

        $r1 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r2);

        return $r1;

     label1:
        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isMemberClass()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        $r1 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken toGenericType(java.lang.Class)>($r4);

        $r2 = $r1.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        goto label3;

     label2:
        $r2 = null;

     label3:
        $i0 = lengthof $r3;

        if $i0 > 0 goto label5;

        if $r2 == null goto label4;

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r2 == $r4 goto label4;

        goto label5;

     label4:
        $r1 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>($r0);

        return $r1;

     label5:
        $r5 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])>($r2, $r0, $r3);

        $r1 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r5);

        return $r1;
    }

    public final com.google.common.reflect.Invokable constructor(java.lang.reflect.Constructor)
    {
        com.google.common.reflect.TypeToken$2 $r4;
        java.lang.Class $r2, $r3;
        com.google.common.reflect.TypeToken r0;
        java.lang.reflect.Constructor $r1;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Constructor;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r3 = virtualinvoke r0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = virtualinvoke r0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "%s not declared by %s", $r1, $r2);

        $r4 = new com.google.common.reflect.TypeToken$2;

        specialinvoke $r4.<com.google.common.reflect.TypeToken$2: void <init>(com.google.common.reflect.TypeToken,java.lang.reflect.Constructor)>(r0, $r1);

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.Type $r3, $r4;
        java.lang.Object $r1;
        com.google.common.reflect.TypeToken r0, $r2;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.reflect.TypeToken;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.reflect.TypeToken) $r1;

        $r3 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r4 = $r2.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        return $z0;

     label1:
        return 0;
    }

    public final com.google.common.reflect.TypeToken getComponentType()
    {
        com.google.common.reflect.TypeToken r0;
        java.lang.reflect.Type $r1;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r1 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type getComponentType(java.lang.reflect.Type)>($r1);

        if $r1 != null goto label1;

        return null;

     label1:
        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r1);

        return r0;
    }

    public final com.google.common.collect.ImmutableList getGenericInterfaces()
    {
        java.lang.reflect.TypeVariable $r2;
        java.lang.reflect.WildcardType $r5;
        com.google.common.reflect.TypeToken r0, $r8;
        com.google.common.collect.ImmutableList $r4;
        java.lang.reflect.Type $r1;
        int $i0, $i1;
        java.lang.reflect.Type[] $r3;
        java.lang.Class $r7;
        boolean $z0;
        com.google.common.collect.ImmutableList$Builder $r6;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r1 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.reflect.TypeVariable) $r1;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        $r4 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.collect.ImmutableList boundsAsInterfaces(java.lang.reflect.Type[])>($r3);

        return $r4;

     label1:
        $z0 = $r1 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label2;

        $r5 = (java.lang.reflect.WildcardType) $r1;

        $r3 = interfaceinvoke $r5.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r4 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.collect.ImmutableList boundsAsInterfaces(java.lang.reflect.Type[])>($r3);

        return $r4;

     label2:
        $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $r7 = virtualinvoke r0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();

        $r3 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        $i0 = lengthof $r3;

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label4;

        $r1 = $r3[$i1];

        $r8 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken resolveSupertype(java.lang.reflect.Type)>($r1);

        virtualinvoke $r6.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r8);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $r4 = virtualinvoke $r6.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        return $r4;
    }

    public final com.google.common.reflect.TypeToken getGenericSuperclass()
    {
        java.lang.reflect.Type $r1;
        java.lang.reflect.TypeVariable $r2;
        java.lang.reflect.WildcardType $r4;
        java.lang.reflect.Type[] $r3;
        java.lang.Class $r5;
        com.google.common.reflect.TypeToken r0;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r1 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.reflect.TypeVariable) $r1;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        $r1 = $r3[0];

        r0 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken boundAsSuperclass(java.lang.reflect.Type)>($r1);

        return r0;

     label1:
        $z0 = $r1 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.reflect.WildcardType) $r1;

        $r3 = interfaceinvoke $r4.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r1 = $r3[0];

        r0 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken boundAsSuperclass(java.lang.reflect.Type)>($r1);

        return r0;

     label2:
        $r5 = virtualinvoke r0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();

        $r1 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        if $r1 != null goto label3;

        return null;

     label3:
        r0 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken resolveSupertype(java.lang.reflect.Type)>($r1);

        return r0;
    }

    public final java.lang.Class getRawType()
    {
        com.google.common.collect.ImmutableSet $r1;
        java.lang.Object $r3;
        java.lang.Class $r4;
        com.google.common.reflect.TypeToken r0;
        com.google.common.collect.UnmodifiableIterator $r2;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.collect.ImmutableSet getRawTypes()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Class) $r3;

        return $r4;
    }

    public final com.google.common.reflect.TypeToken getSubtype(java.lang.Class)
    {
        java.lang.reflect.Type $r2;
        java.lang.reflect.WildcardType $r3;
        java.lang.reflect.Type[] $r4;
        java.lang.Class $r1, $r5;
        com.google.common.reflect.TypeToken r0;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.Class;

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r2 instanceof java.lang.reflect.TypeVariable;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Cannot get subtype of type variable <%s>", r0);

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r2 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label3;

        $r3 = (java.lang.reflect.WildcardType) $r2;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        r0 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getSubtypeFromLowerBounds(java.lang.Class,java.lang.reflect.Type[])>($r1, $r4);

        return r0;

     label3:
        $z0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: boolean isArray()>();

        if $z0 == 0 goto label4;

        r0 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getArraySubtype(java.lang.Class)>($r1);

        return r0;

     label4:
        $r5 = virtualinvoke r0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "%s isn\'t a subclass of %s", $r1, r0);

        $r2 = specialinvoke r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type resolveTypeArgsForSubclass(java.lang.Class)>($r1);

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r2);

        return r0;
    }

    public final com.google.common.reflect.TypeToken getSupertype(java.lang.Class)
    {
        java.lang.reflect.TypeVariable $r3;
        java.lang.reflect.WildcardType $r5;
        com.google.common.reflect.TypeToken r0, $r6;
        java.lang.reflect.Type $r2;
        java.lang.reflect.Type[] $r4;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.Class;

        $z0 = specialinvoke r0.<com.google.common.reflect.TypeToken: boolean someRawTypeIsSubclassOf(java.lang.Class)>($r1);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "%s is not a super class of %s", $r1, r0);

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r2 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.reflect.TypeVariable) $r2;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        r0 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[])>($r1, $r4);

        return r0;

     label1:
        $z0 = $r2 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label2;

        $r5 = (java.lang.reflect.WildcardType) $r2;

        $r4 = interfaceinvoke $r5.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        r0 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[])>($r1, $r4);

        return r0;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label3;

        r0 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getArraySupertype(java.lang.Class)>($r1);

        return r0;

     label3:
        $r6 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken toGenericType(java.lang.Class)>($r1);

        $r2 = $r6.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        r0 = specialinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken resolveSupertype(java.lang.reflect.Type)>($r2);

        return r0;
    }

    public final java.lang.reflect.Type getType()
    {
        com.google.common.reflect.TypeToken r0;
        java.lang.reflect.Type r1;

        r0 := @this: com.google.common.reflect.TypeToken;

        r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        return r1;
    }

    public final com.google.common.reflect.TypeToken$TypeSet getTypes()
    {
        com.google.common.reflect.TypeToken r0;
        com.google.common.reflect.TypeToken$TypeSet $r1;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 = new com.google.common.reflect.TypeToken$TypeSet;

        specialinvoke $r1.<com.google.common.reflect.TypeToken$TypeSet: void <init>(com.google.common.reflect.TypeToken)>(r0);

        return $r1;
    }

    public int hashCode()
    {
        int $i0;
        com.google.common.reflect.TypeToken r0;
        java.lang.reflect.Type $r1;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public final boolean isArray()
    {
        com.google.common.reflect.TypeToken r0;

        r0 := @this: com.google.common.reflect.TypeToken;

        r0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getComponentType()>();

        if r0 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isPrimitive()
    {
        java.lang.reflect.Type $r1;
        java.lang.Class $r2;
        com.google.common.reflect.TypeToken r0;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Class) $r1;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isSubtypeOf(com.google.common.reflect.TypeToken)
    {
        java.lang.reflect.Type $r2;
        com.google.common.reflect.TypeToken r0, $r1;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: com.google.common.reflect.TypeToken;

        $r2 = virtualinvoke $r1.<com.google.common.reflect.TypeToken: java.lang.reflect.Type getType()>();

        $z0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: boolean isSubtypeOf(java.lang.reflect.Type)>($r2);

        return $z0;
    }

    public final boolean isSubtypeOf(java.lang.reflect.Type)
    {
        com.google.common.reflect.TypeToken$Bounds $r4;
        java.lang.reflect.GenericArrayType $r8;
        java.lang.reflect.WildcardType $r2;
        java.lang.reflect.TypeVariable $r6;
        com.google.common.reflect.TypeToken r0, $r7;
        java.lang.reflect.ParameterizedType $r10;
        java.lang.reflect.Type $r1, $r5;
        java.lang.reflect.Type[] $r3;
        java.lang.Class $r9;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Type;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = $r1 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.reflect.WildcardType) $r1;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $r4 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken$Bounds any(java.lang.reflect.Type[])>($r3);

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = virtualinvoke $r4.<com.google.common.reflect.TypeToken$Bounds: boolean isSupertypeOf(java.lang.reflect.Type)>($r1);

        return $z0;

     label1:
        $r5 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $z0 = $r5 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label2;

        $r2 = (java.lang.reflect.WildcardType) $r5;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r4 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken$Bounds any(java.lang.reflect.Type[])>($r3);

        $z0 = virtualinvoke $r4.<com.google.common.reflect.TypeToken$Bounds: boolean isSubtypeOf(java.lang.reflect.Type)>($r1);

        return $z0;

     label2:
        $z0 = $r5 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        $r5 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r6 = (java.lang.reflect.TypeVariable) $r5;

        $r3 = interfaceinvoke $r6.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        $r4 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken$Bounds any(java.lang.reflect.Type[])>($r3);

        $z0 = virtualinvoke $r4.<com.google.common.reflect.TypeToken$Bounds: boolean isSubtypeOf(java.lang.reflect.Type)>($r1);

        if $z0 == 0 goto label8;

     label3:
        return 1;

     label4:
        $z0 = $r5 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label5;

        $r7 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r1);

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r8 = (java.lang.reflect.GenericArrayType) $r1;

        $z0 = specialinvoke $r7.<com.google.common.reflect.TypeToken: boolean isSupertypeOfArray(java.lang.reflect.GenericArrayType)>($r8);

        return $z0;

     label5:
        $z0 = $r1 instanceof java.lang.Class;

        if $z0 == 0 goto label6;

        $r9 = (java.lang.Class) $r1;

        $z0 = specialinvoke r0.<com.google.common.reflect.TypeToken: boolean someRawTypeIsSubclassOf(java.lang.Class)>($r9);

        return $z0;

     label6:
        $z0 = $r1 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label7;

        $r10 = (java.lang.reflect.ParameterizedType) $r1;

        $z0 = specialinvoke r0.<com.google.common.reflect.TypeToken: boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType)>($r10);

        return $z0;

     label7:
        $z0 = $r1 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label8;

        $r8 = (java.lang.reflect.GenericArrayType) $r1;

        $z0 = specialinvoke r0.<com.google.common.reflect.TypeToken: boolean isSubtypeOfArrayType(java.lang.reflect.GenericArrayType)>($r8);

        return $z0;

     label8:
        return 0;
    }

    public final boolean isSupertypeOf(com.google.common.reflect.TypeToken)
    {
        java.lang.reflect.Type $r2;
        com.google.common.reflect.TypeToken r0, $r1;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: com.google.common.reflect.TypeToken;

        $r2 = virtualinvoke r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type getType()>();

        $z0 = virtualinvoke $r1.<com.google.common.reflect.TypeToken: boolean isSubtypeOf(java.lang.reflect.Type)>($r2);

        return $z0;
    }

    public final boolean isSupertypeOf(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r1;
        com.google.common.reflect.TypeToken r0, $r2;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Type;

        $r2 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r1);

        $r1 = virtualinvoke r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type getType()>();

        $z0 = virtualinvoke $r2.<com.google.common.reflect.TypeToken: boolean isSubtypeOf(java.lang.reflect.Type)>($r1);

        return $z0;
    }

    public final com.google.common.reflect.Invokable method(java.lang.reflect.Method)
    {
        com.google.common.reflect.TypeToken$1 $r3;
        java.lang.Class $r2;
        com.google.common.reflect.TypeToken r0;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z0 = specialinvoke r0.<com.google.common.reflect.TypeToken: boolean someRawTypeIsSubclassOf(java.lang.Class)>($r2);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "%s not declared by %s", $r1, r0);

        $r3 = new com.google.common.reflect.TypeToken$1;

        specialinvoke $r3.<com.google.common.reflect.TypeToken$1: void <init>(com.google.common.reflect.TypeToken,java.lang.reflect.Method)>(r0, $r1);

        return $r3;
    }

    public final com.google.common.reflect.TypeToken rejectTypeVariables()
    {
        com.google.common.reflect.TypeToken$3 $r1;
        java.lang.reflect.Type $r2;
        java.lang.reflect.Type[] $r3;
        com.google.common.reflect.TypeToken r0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 = new com.google.common.reflect.TypeToken$3;

        specialinvoke $r1.<com.google.common.reflect.TypeToken$3: void <init>(com.google.common.reflect.TypeToken)>(r0);

        $r3 = newarray (java.lang.reflect.Type)[1];

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r3[0] = $r2;

        virtualinvoke $r1.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r3);

        return r0;
    }

    public final com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r1, $r3;
        com.google.common.reflect.TypeResolver $r2, $r4;
        com.google.common.reflect.TypeToken r0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: java.lang.reflect.Type;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeResolver typeResolver>;

        if $r2 != null goto label1;

        $r3 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r4 = staticinvoke <com.google.common.reflect.TypeResolver: com.google.common.reflect.TypeResolver accordingTo(java.lang.reflect.Type)>($r3);

        $r2 = $r4;

        r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeResolver typeResolver> = $r4;

     label1:
        $r1 = virtualinvoke $r2.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r1);

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r1);

        return r0;
    }

    public java.lang.String toString()
    {
        com.google.common.reflect.TypeToken r0;
        java.lang.String $r1;
        java.lang.reflect.Type $r2;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r2 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r1 = staticinvoke <com.google.common.reflect.Types: java.lang.String toString(java.lang.reflect.Type)>($r2);

        return $r1;
    }

    public final com.google.common.reflect.TypeToken unwrap()
    {
        java.lang.reflect.Type $r1;
        java.lang.Class $r2;
        com.google.common.reflect.TypeToken r0;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $z0 = specialinvoke r0.<com.google.common.reflect.TypeToken: boolean isWrapper()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r2 = (java.lang.Class) $r1;

        $r2 = staticinvoke <com.google.common.primitives.Primitives: java.lang.Class unwrap(java.lang.Class)>($r2);

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>($r2);

     label1:
        return r0;
    }

    public final com.google.common.reflect.TypeToken where(com.google.common.reflect.TypeParameter, com.google.common.reflect.TypeToken)
    {
        com.google.common.reflect.TypeToken$SimpleTypeToken $r8;
        com.google.common.reflect.TypeParameter $r2;
        com.google.common.collect.ImmutableMap $r7;
        java.lang.reflect.TypeVariable $r5;
        com.google.common.reflect.TypeToken r0, $r3;
        com.google.common.reflect.TypeResolver$TypeVariableKey $r1;
        java.lang.reflect.Type $r6;
        com.google.common.reflect.TypeResolver $r4;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r2 := @parameter0: com.google.common.reflect.TypeParameter;

        $r3 := @parameter1: com.google.common.reflect.TypeToken;

        $r4 = new com.google.common.reflect.TypeResolver;

        specialinvoke $r4.<com.google.common.reflect.TypeResolver: void <init>()>();

        $r1 = new com.google.common.reflect.TypeResolver$TypeVariableKey;

        $r5 = $r2.<com.google.common.reflect.TypeParameter: java.lang.reflect.TypeVariable typeVariable>;

        specialinvoke $r1.<com.google.common.reflect.TypeResolver$TypeVariableKey: void <init>(java.lang.reflect.TypeVariable)>($r5);

        $r6 = $r3.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object)>($r1, $r6);

        $r4 = virtualinvoke $r4.<com.google.common.reflect.TypeResolver: com.google.common.reflect.TypeResolver where(java.util.Map)>($r7);

        $r8 = new com.google.common.reflect.TypeToken$SimpleTypeToken;

        $r6 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r6 = virtualinvoke $r4.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r6);

        specialinvoke $r8.<com.google.common.reflect.TypeToken$SimpleTypeToken: void <init>(java.lang.reflect.Type)>($r6);

        return $r8;
    }

    public final com.google.common.reflect.TypeToken where(com.google.common.reflect.TypeParameter, java.lang.Class)
    {
        com.google.common.reflect.TypeParameter $r1;
        java.lang.Class $r2;
        com.google.common.reflect.TypeToken r0, $r3;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r1 := @parameter0: com.google.common.reflect.TypeParameter;

        $r2 := @parameter1: java.lang.Class;

        $r3 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>($r2);

        r0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken where(com.google.common.reflect.TypeParameter,com.google.common.reflect.TypeToken)>($r1, $r3);

        return r0;
    }

    public final com.google.common.reflect.TypeToken wrap()
    {
        java.lang.reflect.Type $r1;
        java.lang.Class $r2;
        com.google.common.reflect.TypeToken r0;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken;

        $z0 = virtualinvoke r0.<com.google.common.reflect.TypeToken: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r2 = (java.lang.Class) $r1;

        $r2 = staticinvoke <com.google.common.primitives.Primitives: java.lang.Class wrap(java.lang.Class)>($r2);

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>($r2);

     label1:
        return r0;
    }

    public java.lang.Object writeReplace()
    {
        com.google.common.reflect.TypeResolver $r2;
        com.google.common.reflect.TypeToken r0;
        java.lang.reflect.Type $r1;

        r0 := @this: com.google.common.reflect.TypeToken;

        $r2 = new com.google.common.reflect.TypeResolver;

        specialinvoke $r2.<com.google.common.reflect.TypeResolver: void <init>()>();

        $r1 = r0.<com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType>;

        $r1 = virtualinvoke $r2.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r1);

        r0 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>($r1);

        return r0;
    }
}
