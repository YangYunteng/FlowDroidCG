public abstract class com.google.common.util.concurrent.AggregateFuture$RunningState extends com.google.common.util.concurrent.AggregateFutureState implements java.lang.Runnable
{
    public final boolean allMustSucceed;
    public final boolean collectsValues;
    public com.google.common.collect.ImmutableCollection futures;
    public final com.google.common.util.concurrent.AggregateFuture this$0;

    public void <init>(com.google.common.util.concurrent.AggregateFuture, com.google.common.collect.ImmutableCollection, boolean, boolean)
    {
        com.google.common.util.concurrent.AggregateFuture $r1;
        com.google.common.util.concurrent.AggregateFuture$RunningState r0;
        int $i0;
        com.google.common.collect.ImmutableCollection $r2;
        boolean $z0, $z1;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture$RunningState;

        $r1 := @parameter0: com.google.common.util.concurrent.AggregateFuture;

        $r2 := @parameter1: com.google.common.collect.ImmutableCollection;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.util.concurrent.AggregateFuture this$0> = $r1;

        $i0 = virtualinvoke $r2.<java.util.AbstractCollection: int size()>();

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFutureState: void <init>(int)>($i0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.collect.ImmutableCollection futures> = $r2;

        r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean allMustSucceed> = $z0;

        r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean collectsValues> = $z1;

        return;
    }

    public static com.google.common.collect.ImmutableCollection access$000(com.google.common.util.concurrent.AggregateFuture$RunningState)
    {
        com.google.common.collect.ImmutableCollection r1;
        com.google.common.util.concurrent.AggregateFuture$RunningState $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AggregateFuture$RunningState;

        r1 = $r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.collect.ImmutableCollection futures>;

        return r1;
    }

    public static void access$100(com.google.common.util.concurrent.AggregateFuture$RunningState)
    {
        com.google.common.util.concurrent.AggregateFuture$RunningState $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AggregateFuture$RunningState;

        specialinvoke $r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void init()>();

        return;
    }

    public static void access$200(com.google.common.util.concurrent.AggregateFuture$RunningState, int, java.util.concurrent.Future)
    {
        int $i0;
        java.util.concurrent.Future $r1;
        com.google.common.util.concurrent.AggregateFuture$RunningState $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AggregateFuture$RunningState;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.concurrent.Future;

        specialinvoke $r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void handleOneInputDone(int,java.util.concurrent.Future)>($i0, $r1);

        return;
    }

    public static void access$300(com.google.common.util.concurrent.AggregateFuture$RunningState)
    {
        com.google.common.util.concurrent.AggregateFuture$RunningState $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.AggregateFuture$RunningState;

        specialinvoke $r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void decrementCountAndMaybeComplete()>();

        return;
    }

    private void decrementCountAndMaybeComplete()
    {
        int $i0;
        com.google.common.util.concurrent.AggregateFuture$RunningState r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture$RunningState;

        $i0 = virtualinvoke r0.<com.google.common.util.concurrent.AggregateFutureState: int decrementRemainingAndGet()>();

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Less than 0 remaining futures");

        if $i0 != 0 goto label3;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void processCompleted()>();

     label3:
        return;
    }

    private void handleException(java.lang.Throwable)
    {
        java.lang.Throwable $r1;
        com.google.common.util.concurrent.AggregateFuture$RunningState r0;
        java.util.Set $r3;
        java.util.logging.Logger $r5;
        java.util.logging.Level $r6;
        com.google.common.util.concurrent.AggregateFuture $r2;
        java.lang.String $r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture$RunningState;

        $r1 := @parameter0: java.lang.Throwable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean allMustSucceed>;

        $z2 = 1;

        if $z0 == 0 goto label2;

        $r2 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.util.concurrent.AggregateFuture this$0>;

        $z0 = virtualinvoke $r2.<com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)>($r1);

        $z3 = $z0;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void releaseResourcesAfterFailure()>();

        goto label3;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.util.concurrent.AggregateFutureState: java.util.Set getOrInitSeenExceptions()>();

        $z4 = staticinvoke <com.google.common.util.concurrent.AggregateFuture: boolean access$400(java.util.Set,java.lang.Throwable)>($r3, $r1);

        goto label4;

     label2:
        $z3 = 0;

     label3:
        $z4 = 1;

     label4:
        $z0 = $r1 instanceof java.lang.Error;

        $z1 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean allMustSucceed>;

        if $z3 != 0 goto label5;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        $z2 = $z1 & $z2;

        $z2 = $z2 & $z4;

        $z2 = $z2 | $z0;

        if $z2 == 0 goto label9;

        if $z0 == 0 goto label7;

        $r4 = "Input Future failed with Error";

        goto label8;

     label7:
        $r4 = "Got more than one input Future failure. Logging failures after the first";

     label8:
        $r5 = staticinvoke <com.google.common.util.concurrent.AggregateFuture: java.util.logging.Logger access$500()>();

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r6, $r4, $r1);

     label9:
        return;
    }

    private void handleOneInputDone(int, java.util.concurrent.Future)
    {
        java.lang.Throwable $r4;
        com.google.common.util.concurrent.AggregateFuture$RunningState r0;
        java.util.concurrent.ExecutionException $r5;
        java.util.concurrent.Future $r1;
        com.google.common.util.concurrent.AggregateFuture $r2;
        int $i0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture$RunningState;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.concurrent.Future;

        $z0 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean allMustSucceed>;

        if $z0 != 0 goto label02;

        $r2 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.util.concurrent.AggregateFuture this$0>;

        $z0 = virtualinvoke $r2.<com.google.common.util.concurrent.AbstractFuture$TrustedFuture: boolean isDone()>();

        if $z0 == 0 goto label02;

        $r2 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.util.concurrent.AggregateFuture this$0>;

        $z0 = virtualinvoke $r2.<com.google.common.util.concurrent.AbstractFuture$TrustedFuture: boolean isCancelled()>();

        if $z0 == 0 goto label01;

        goto label02;

     label01:
        $z0 = 0;

        goto label03;

     label02:
        $z0 = 1;

     label03:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Future was done before all dependencies completed");

     label04:
        $z0 = interfaceinvoke $r1.<java.util.concurrent.Future: boolean isDone()>();

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Tried to set value from future which is not done");

     label05:
        $z0 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean allMustSucceed>;

     label06:
        if $z0 == 0 goto label20;

     label07:
        $z0 = interfaceinvoke $r1.<java.util.concurrent.Future: boolean isCancelled()>();

     label08:
        if $z0 == 0 goto label14;

     label09:
        $r2 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.util.concurrent.AggregateFuture this$0>;

     label10:
        staticinvoke <com.google.common.util.concurrent.AggregateFuture: com.google.common.util.concurrent.AggregateFuture$RunningState access$602(com.google.common.util.concurrent.AggregateFuture,com.google.common.util.concurrent.AggregateFuture$RunningState)>($r2, null);

     label11:
        $r2 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.util.concurrent.AggregateFuture this$0>;

     label12:
        virtualinvoke $r2.<com.google.common.util.concurrent.AbstractFuture$TrustedFuture: boolean cancel(boolean)>(0);

     label13:
        return;

     label14:
        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Object getDone(java.util.concurrent.Future)>($r1);

     label15:
        $z0 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean collectsValues>;

     label16:
        if $z0 == 0 goto label29;

     label17:
        $z0 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean allMustSucceed>;

     label18:
        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void collectOneValue(boolean,int,java.lang.Object)>($z0, $i0, $r3);

     label19:
        return;

     label20:
        $z0 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean collectsValues>;

     label21:
        if $z0 == 0 goto label29;

     label22:
        $z0 = interfaceinvoke $r1.<java.util.concurrent.Future: boolean isCancelled()>();

     label23:
        if $z0 != 0 goto label29;

     label24:
        $z0 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean allMustSucceed>;

     label25:
        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Object getDone(java.util.concurrent.Future)>($r1);

        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void collectOneValue(boolean,int,java.lang.Object)>($z0, $i0, $r3);

     label26:
        return;

     label27:
        $r4 := @caughtexception;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void handleException(java.lang.Throwable)>($r4);

        return;

     label28:
        $r5 := @caughtexception;

        $r4 = virtualinvoke $r5.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void handleException(java.lang.Throwable)>($r4);

     label29:
        return;

        catch java.util.concurrent.ExecutionException from label04 to label05 with label28;
        catch java.util.concurrent.ExecutionException from label07 to label08 with label28;
        catch java.util.concurrent.ExecutionException from label10 to label11 with label28;
        catch java.util.concurrent.ExecutionException from label12 to label13 with label28;
        catch java.util.concurrent.ExecutionException from label14 to label15 with label28;
        catch java.util.concurrent.ExecutionException from label18 to label19 with label28;
        catch java.util.concurrent.ExecutionException from label22 to label23 with label28;
        catch java.util.concurrent.ExecutionException from label25 to label26 with label28;
        catch java.lang.Throwable from label04 to label06 with label27;
        catch java.lang.Throwable from label07 to label08 with label27;
        catch java.lang.Throwable from label09 to label13 with label27;
        catch java.lang.Throwable from label14 to label16 with label27;
        catch java.lang.Throwable from label17 to label19 with label27;
        catch java.lang.Throwable from label20 to label21 with label27;
        catch java.lang.Throwable from label22 to label23 with label27;
        catch java.lang.Throwable from label24 to label26 with label27;
    }

    private void init()
    {
        com.google.common.util.concurrent.ListenableFuture $r5;
        com.google.common.util.concurrent.AggregateFuture$RunningState r0;
        java.util.concurrent.Executor $r6;
        com.google.common.collect.ImmutableCollection $r2;
        com.google.common.util.concurrent.AggregateFuture$RunningState$1 $r1;
        int $i0;
        java.lang.Object $r4;
        com.google.common.collect.UnmodifiableIterator $r3;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture$RunningState;

        $r2 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.collect.ImmutableCollection futures>;

        $z0 = virtualinvoke $r2.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void handleAllCompleted()>();

        return;

     label1:
        $z0 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean allMustSucceed>;

        if $z0 == 0 goto label3;

        $i0 = 0;

        $r2 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.collect.ImmutableCollection futures>;

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.common.util.concurrent.ListenableFuture) $r4;

        $r1 = new com.google.common.util.concurrent.AggregateFuture$RunningState$1;

        specialinvoke $r1.<com.google.common.util.concurrent.AggregateFuture$RunningState$1: void <init>(com.google.common.util.concurrent.AggregateFuture$RunningState,int,com.google.common.util.concurrent.ListenableFuture)>(r0, $i0, $r5);

        $r6 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r5.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r1, $r6);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r2 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.collect.ImmutableCollection futures>;

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.common.util.concurrent.ListenableFuture) $r4;

        $r6 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r5.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r0, $r6);

        goto label4;

     label5:
        return;
    }

    private void processCompleted()
    {
        com.google.common.util.concurrent.ListenableFuture $r4;
        com.google.common.util.concurrent.AggregateFuture$RunningState r0;
        com.google.common.collect.ImmutableCollection $r1;
        int $i0;
        java.lang.Object $r3;
        com.google.common.collect.UnmodifiableIterator $r2;
        boolean $z0, $z1;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture$RunningState;

        $z0 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean collectsValues>;

        $z1 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: boolean allMustSucceed>;

        $z1 = $z1 ^ 1;

        $z0 = $z0 & $z1;

        if $z0 == 0 goto label2;

        $i0 = 0;

        $r1 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.collect.ImmutableCollection futures>;

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableCollection: com.google.common.collect.UnmodifiableIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.common.util.concurrent.ListenableFuture) $r3;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void handleOneInputDone(int,java.util.concurrent.Future)>($i0, $r4);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void handleAllCompleted()>();

        return;
    }

    public final void addInitialException(java.util.Set)
    {
        java.lang.Throwable $r3;
        com.google.common.util.concurrent.AggregateFuture $r2;
        com.google.common.util.concurrent.AggregateFuture$RunningState r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture$RunningState;

        $r1 := @parameter0: java.util.Set;

        $r2 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.util.concurrent.AggregateFuture this$0>;

        $z0 = virtualinvoke $r2.<com.google.common.util.concurrent.AbstractFuture$TrustedFuture: boolean isCancelled()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.util.concurrent.AggregateFuture this$0>;

        $r3 = virtualinvoke $r2.<com.google.common.util.concurrent.AbstractFuture: java.lang.Throwable trustedGetException()>();

        staticinvoke <com.google.common.util.concurrent.AggregateFuture: boolean access$400(java.util.Set,java.lang.Throwable)>($r1, $r3);

     label1:
        return;
    }

    public abstract void collectOneValue(boolean, int, java.lang.Object);

    public abstract void handleAllCompleted();

    public void interruptTask()
    {
        com.google.common.util.concurrent.AggregateFuture$RunningState r0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture$RunningState;

        return;
    }

    public void releaseResourcesAfterFailure()
    {
        com.google.common.util.concurrent.AggregateFuture$RunningState r0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture$RunningState;

        r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: com.google.common.collect.ImmutableCollection futures> = null;

        return;
    }

    public final void run()
    {
        com.google.common.util.concurrent.AggregateFuture$RunningState r0;

        r0 := @this: com.google.common.util.concurrent.AggregateFuture$RunningState;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFuture$RunningState: void decrementCountAndMaybeComplete()>();

        return;
    }
}
