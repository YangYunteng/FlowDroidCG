public final class org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer extends org.codehaus.jackson.map.ser.ScalarSerializerBase
{
    public static final org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer instance;

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer: org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer instance> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ScalarSerializerBase: void <init>(java.lang.Class)>(class "Ljava/util/Calendar;");

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer r0;
        java.lang.String $r4;
        org.codehaus.jackson.map.SerializationConfig$Feature $r3;
        boolean $z0;
        org.codehaus.jackson.node.ObjectNode $r5;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATES_AS_TIMESTAMPS>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r3);

        if $z0 == 0 goto label1;

        $r4 = "number";

        goto label2;

     label1:
        $r4 = "string";

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>($r4, 1);

        return $r5;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        java.util.Calendar $r4;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer r0;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.util.Calendar) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer: void serialize(java.util.Calendar,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serialize(java.util.Calendar, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        java.util.Calendar $r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer r0;
        long $l0;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer;

        $r1 := @parameter0: java.util.Calendar;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $l0 = virtualinvoke $r1.<java.util.Calendar: long getTimeInMillis()>();

        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeDateValue(long,org.codehaus.jackson.JsonGenerator)>($l0, $r2);

        return;
    }
}
