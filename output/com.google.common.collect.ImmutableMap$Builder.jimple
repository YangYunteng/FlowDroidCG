public class com.google.common.collect.ImmutableMap$Builder extends java.lang.Object
{
    public java.util.Map$Entry[] entries;
    public boolean entriesUsed;
    public int size;
    public java.util.Comparator valueComparator;

    public void <init>()
    {
        com.google.common.collect.ImmutableMap$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        specialinvoke r0.<com.google.common.collect.ImmutableMap$Builder: void <init>(int)>(4);

        return;
    }

    public void <init>(int)
    {
        int $i0;
        com.google.common.collect.ImmutableMap$Builder r0;
        java.util.Map$Entry[] $r1;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.util.Map$Entry)[$i0];

        r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries> = $r1;

        r0.<com.google.common.collect.ImmutableMap$Builder: int size> = 0;

        r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed> = 0;

        return;
    }

    private void ensureCapacity(int)
    {
        java.lang.Object[] $r2;
        int $i0, $i1;
        com.google.common.collect.ImmutableMap$Builder r0;
        java.util.Map$Entry[] $r1;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries>;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label1;

        $i1 = lengthof $r1;

        $i0 = staticinvoke <com.google.common.collect.ImmutableCollection$Builder: int expandedCapacity(int,int)>($i1, $i0);

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = (java.util.Map$Entry[]) $r2;

        r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries> = $r1;

        r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed> = 0;

     label1:
        return;
    }

    public com.google.common.collect.ImmutableMap build()
    {
        java.util.Map$Entry $r7;
        java.lang.Object[] $r3;
        com.google.common.base.Function $r5;
        com.google.common.collect.RegularImmutableMap $r6;
        com.google.common.collect.ImmutableMap $r10;
        com.google.common.collect.ImmutableMap$Builder r0;
        com.google.common.collect.Ordering $r4;
        int $i0, $i1;
        java.lang.Object $r8, $r9;
        java.util.Comparator $r1;
        java.util.Map$Entry[] $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Comparator valueComparator>;

        if $r1 == null goto label2;

        $z0 = r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries>;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r2 = (java.util.Map$Entry[]) $r3;

        r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries> = $r2;

     label1:
        $r2 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries>;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $r1 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Comparator valueComparator>;

        $r4 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering 'from'(java.util.Comparator)>($r1);

        $r5 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Function valueFunction()>();

        $r4 = virtualinvoke $r4.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onResultOf(com.google.common.base.Function)>($r5);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>($r2, 0, $i0, $r4);

     label2:
        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $r2 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries>;

        $i1 = lengthof $r2;

        if $i0 != $i1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        r0.<com.google.common.collect.ImmutableMap$Builder: boolean entriesUsed> = $z0;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        if $i0 == 0 goto label6;

        if $i0 == 1 goto label5;

        $r2 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries>;

        $r6 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap fromEntryArray(int,java.util.Map$Entry[])>($i0, $r2);

        return $r6;

     label5:
        $r2 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries>;

        $r7 = $r2[0];

        $r8 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries>;

        $r7 = $r2[0];

        $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object)>($r8, $r9);

        return $r10;

     label6:
        $r10 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        return $r10;
    }

    public com.google.common.collect.ImmutableMap$Builder combine(com.google.common.collect.ImmutableMap$Builder)
    {
        int $i0, $i1;
        com.google.common.collect.ImmutableMap$Builder r0, $r1;
        java.util.Map$Entry[] $r2, $r3;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 := @parameter0: com.google.common.collect.ImmutableMap$Builder;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i1 = $r1.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i0 + $i1;

        specialinvoke r0.<com.google.common.collect.ImmutableMap$Builder: void ensureCapacity(int)>($i0);

        $r2 = $r1.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries>;

        $r3 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries>;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i1 = $r1.<com.google.common.collect.ImmutableMap$Builder: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, $i0, $i1);

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i1 = $r1.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i0 + $i1;

        r0.<com.google.common.collect.ImmutableMap$Builder: int size> = $i0;

        return r0;
    }

    public com.google.common.collect.ImmutableMap$Builder orderEntriesByValue(java.util.Comparator)
    {
        java.util.Comparator $r1, $r2;
        com.google.common.collect.ImmutableMap$Builder r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 := @parameter0: java.util.Comparator;

        $r2 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Comparator valueComparator>;

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "valueComparator was already set");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "valueComparator");

        r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Comparator valueComparator> = $r1;

        return r0;
    }

    public com.google.common.collect.ImmutableMap$Builder put(java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r1;
        int $i0, $i1;
        java.lang.Object $r2, $r3;
        com.google.common.collect.ImmutableMap$Builder r0;
        java.util.Map$Entry[] $r4;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r2 := @parameter0: java.lang.Object;

        $r3 := @parameter1: java.lang.Object;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i0 + 1;

        specialinvoke r0.<com.google.common.collect.ImmutableMap$Builder: void ensureCapacity(int)>($i0);

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r4 = r0.<com.google.common.collect.ImmutableMap$Builder: java.util.Map$Entry[] entries>;

        $i1 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $i0 = $i1 + 1;

        r0.<com.google.common.collect.ImmutableMap$Builder: int size> = $i0;

        $r4[$i1] = $r1;

        return r0;
    }

    public com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry)
    {
        java.util.Map$Entry $r1;
        java.lang.Object $r2, $r3;
        com.google.common.collect.ImmutableMap$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 := @parameter0: java.util.Map$Entry;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return r0;
    }

    public com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable)
    {
        java.util.Map$Entry $r5;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        com.google.common.collect.ImmutableMap$Builder r0;
        java.lang.Iterable $r1;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 := @parameter0: java.lang.Iterable;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $i0 = r0.<com.google.common.collect.ImmutableMap$Builder: int size>;

        $r2 = (java.util.Collection) $r1;

        $i1 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        $i0 = $i0 + $i1;

        specialinvoke r0.<com.google.common.collect.ImmutableMap$Builder: void ensureCapacity(int)>($i0);

     label1:
        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        virtualinvoke r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry)>($r5);

        goto label2;

     label3:
        return r0;
    }

    public com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map)
    {
        java.util.Set $r2;
        com.google.common.collect.ImmutableMap$Builder r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.ImmutableMap$Builder;

        $r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable)>($r2);

        return r0;
    }
}
