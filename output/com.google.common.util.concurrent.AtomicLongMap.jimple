public final class com.google.common.util.concurrent.AtomicLongMap extends java.lang.Object implements java.io.Serializable
{
    public transient java.util.Map asMap;
    public final java.util.concurrent.ConcurrentHashMap map;

    public void <init>(java.util.concurrent.ConcurrentHashMap)
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 := @parameter0: java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map> = $r1;

        return;
    }

    public static long a(long, long)
    {
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        return $l0;
    }

    public static long a(java.util.function.LongBinaryOperator, long, long)
    {
        long $l0, $l1;
        java.util.function.LongBinaryOperator $r0;

        $r0 := @parameter0: java.util.function.LongBinaryOperator;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $l0 = interfaceinvoke $r0.<java.util.function.LongBinaryOperator: long applyAsLong(long,long)>($l1, $l0);

        return $l0;
    }

    public static java.lang.Long a(java.util.concurrent.atomic.AtomicBoolean, long, java.lang.Object, java.lang.Long)
    {
        byte $b2;
        java.lang.Long $r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        long $l0, $l1;
        java.lang.Object $r2;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.lang.Object;

        $r0 := @parameter3: java.lang.Long;

        if $r0 == null goto label2;

        $l1 = virtualinvoke $r0.<java.lang.Long: long longValue()>();

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        goto label2;

     label1:
        return $r0;

     label2:
        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r0;
    }

    public static java.lang.Long a(java.util.concurrent.atomic.AtomicLong, java.util.function.LongUnaryOperator, java.lang.Object, java.lang.Long)
    {
        java.util.concurrent.atomic.AtomicLong $r2;
        java.util.function.LongUnaryOperator $r0;
        java.lang.Long $r1;
        java.lang.Object $r3;
        long $l0;

        $r2 := @parameter0: java.util.concurrent.atomic.AtomicLong;

        $r0 := @parameter1: java.util.function.LongUnaryOperator;

        $r3 := @parameter2: java.lang.Object;

        $r1 := @parameter3: java.lang.Long;

        if $r1 != null goto label1;

        $l0 = 0L;

        goto label2;

     label1:
        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

     label2:
        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0);

        $l0 = interfaceinvoke $r0.<java.util.function.LongUnaryOperator: long applyAsLong(long)>($l0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Long a(java.util.function.LongUnaryOperator, java.lang.Object, java.lang.Long)
    {
        java.lang.Long $r0;
        java.util.function.LongUnaryOperator $r1;
        java.lang.Object $r2;
        long $l0;

        $r1 := @parameter0: java.util.function.LongUnaryOperator;

        $r2 := @parameter1: java.lang.Object;

        $r0 := @parameter2: java.lang.Long;

        if $r0 != null goto label1;

        $l0 = 0L;

        goto label2;

     label1:
        $l0 = virtualinvoke $r0.<java.lang.Long: long longValue()>();

     label2:
        $l0 = interfaceinvoke $r1.<java.util.function.LongUnaryOperator: long applyAsLong(long)>($l0);

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r0;
    }

    public static boolean a(java.lang.Long)
    {
        long $l0;
        byte $b1;
        java.lang.Long $r0;

        $r0 := @parameter0: java.lang.Long;

        $l0 = virtualinvoke $r0.<java.lang.Long: long longValue()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static long b(java.util.function.LongBinaryOperator, long, long)
    {
        long $l0, $l1;
        java.util.function.LongBinaryOperator $r0;

        $r0 := @parameter0: java.util.function.LongBinaryOperator;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $l0 = interfaceinvoke $r0.<java.util.function.LongBinaryOperator: long applyAsLong(long,long)>($l1, $l0);

        return $l0;
    }

    public static com.google.common.util.concurrent.AtomicLongMap create()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        com.google.common.util.concurrent.AtomicLongMap $r0;

        $r0 = new com.google.common.util.concurrent.AtomicLongMap;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        specialinvoke $r0.<com.google.common.util.concurrent.AtomicLongMap: void <init>(java.util.concurrent.ConcurrentHashMap)>($r1);

        return $r0;
    }

    public static com.google.common.util.concurrent.AtomicLongMap create(java.util.Map)
    {
        com.google.common.util.concurrent.AtomicLongMap $r1;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $r1 = staticinvoke <com.google.common.util.concurrent.AtomicLongMap: com.google.common.util.concurrent.AtomicLongMap create()>();

        virtualinvoke $r1.<com.google.common.util.concurrent.AtomicLongMap: void putAll(java.util.Map)>($r0);

        return $r1;
    }

    private java.util.Map createAsMap()
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        com.google.common.util.concurrent.AtomicLongMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r2);

        return $r1;
    }

    public long accumulateAndGet(java.lang.Object, long, java.util.function.LongBinaryOperator)
    {
        java.util.function.LongBinaryOperator $r1;
        long $l0;
        java.lang.Object $r3;
        com.google.common.util.concurrent.AtomicLongMap r0;
        c.i.b.h.a.b $r2;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r3 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.function.LongBinaryOperator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new c.i.b.h.a.b;

        specialinvoke $r2.<c.i.b.h.a.b: void <init>(java.util.function.LongBinaryOperator,long)>($r1, $l0);

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long updateAndGet(java.lang.Object,java.util.function.LongUnaryOperator)>($r3, $r2);

        return $l0;
    }

    public long addAndGet(java.lang.Object, long)
    {
        c.i.b.h.a.j $r1;
        long $l0;
        java.lang.Object $r2;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r2 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $r1 = <c.i.b.h.a.j: c.i.b.h.a.j a>;

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long accumulateAndGet(java.lang.Object,long,java.util.function.LongBinaryOperator)>($r2, $l0, $r1);

        return $l0;
    }

    public java.util.Map asMap()
    {
        com.google.common.util.concurrent.AtomicLongMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.Map asMap>;

        if $r1 != null goto label1;

        $r1 = specialinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.Map createAsMap()>();

        r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.Map asMap> = $r1;

     label1:
        return $r1;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.Object $r2;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public long decrementAndGet(java.lang.Object)
    {
        java.lang.Object $r1;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 := @parameter0: java.lang.Object;

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long addAndGet(java.lang.Object,long)>($r1, -1L);

        return $l0;
    }

    public long get(java.lang.Object)
    {
        java.lang.Long $r3;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r1;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r1 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r1, $r3);

        $r3 = (java.lang.Long) $r1;

        $l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public long getAndAccumulate(java.lang.Object, long, java.util.function.LongBinaryOperator)
    {
        c.i.b.h.a.g $r2;
        java.util.function.LongBinaryOperator $r1;
        long $l0;
        java.lang.Object $r3;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r3 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.function.LongBinaryOperator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new c.i.b.h.a.g;

        specialinvoke $r2.<c.i.b.h.a.g: void <init>(java.util.function.LongBinaryOperator,long)>($r1, $l0);

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator)>($r3, $r2);

        return $l0;
    }

    public long getAndAdd(java.lang.Object, long)
    {
        c.i.b.h.a.j $r1;
        long $l0;
        java.lang.Object $r2;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r2 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $r1 = <c.i.b.h.a.j: c.i.b.h.a.j a>;

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long getAndAccumulate(java.lang.Object,long,java.util.function.LongBinaryOperator)>($r2, $l0, $r1);

        return $l0;
    }

    public long getAndDecrement(java.lang.Object)
    {
        java.lang.Object $r1;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 := @parameter0: java.lang.Object;

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long getAndAdd(java.lang.Object,long)>($r1, -1L);

        return $l0;
    }

    public long getAndIncrement(java.lang.Object)
    {
        java.lang.Object $r1;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 := @parameter0: java.lang.Object;

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long getAndAdd(java.lang.Object,long)>($r1, 1L);

        return $l0;
    }

    public long getAndUpdate(java.lang.Object, java.util.function.LongUnaryOperator)
    {
        java.util.concurrent.atomic.AtomicLong $r2;
        java.util.function.LongUnaryOperator $r1;
        java.util.concurrent.ConcurrentHashMap $r3;
        c.i.b.h.a.e $r4;
        long $l0;
        java.lang.Object $r5;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r5 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.function.LongUnaryOperator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        $r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r4 = new c.i.b.h.a.e;

        specialinvoke $r4.<c.i.b.h.a.e: void <init>(java.util.concurrent.atomic.AtomicLong,java.util.function.LongUnaryOperator)>($r2, $r1);

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>($r5, $r4);

        $l0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long incrementAndGet(java.lang.Object)
    {
        java.lang.Object $r1;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 := @parameter0: java.lang.Object;

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long addAndGet(java.lang.Object,long)>($r1, 1L);

        return $l0;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();

        return $z0;
    }

    public long put(java.lang.Object, long)
    {
        c.i.b.h.a.c $r1;
        long $l0;
        java.lang.Object $r2;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r2 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $r1 = new c.i.b.h.a.c;

        specialinvoke $r1.<c.i.b.h.a.c: void <init>(long)>($l0);

        $l0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator)>($r2, $r1);

        return $l0;
    }

    public void putAll(java.util.Map)
    {
        com.google.common.util.concurrent.AtomicLongMap r0;
        c.i.b.h.a.i $r2;
        java.util.Map $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 := @parameter0: java.util.Map;

        $r2 = new c.i.b.h.a.i;

        specialinvoke $r2.<c.i.b.h.a.i: void <init>(com.google.common.util.concurrent.AtomicLongMap)>(r0);

        interfaceinvoke $r1.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r2);

        return;
    }

    public long putIfAbsent(java.lang.Object, long)
    {
        java.util.concurrent.ConcurrentHashMap $r4;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        long $l0;
        c.i.b.h.a.f $r2;
        java.lang.Long $r5;
        java.lang.Object $r3;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r3 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $r1 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        $r4 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = new c.i.b.h.a.f;

        specialinvoke $r2.<c.i.b.h.a.f: void <init>(java.util.concurrent.atomic.AtomicBoolean,long)>($r1, $l0);

        $r3 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>($r3, $r2);

        $r5 = (java.lang.Long) $r3;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public long remove(java.lang.Object)
    {
        java.lang.Long $r3;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r1;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r3 = (java.lang.Long) $r1;

        if $r3 != null goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public boolean remove(java.lang.Object, long)
    {
        java.lang.Long $r3;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.Object $r2;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r2 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: boolean remove(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $z0;
    }

    public void removeAllZeros()
    {
        java.util.Collection $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        com.google.common.util.concurrent.AtomicLongMap r0;
        c.i.b.h.a.a $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r3 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r2 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r1 = <c.i.b.h.a.a: c.i.b.h.a.a a>;

        interfaceinvoke $r2.<java.util.Collection: boolean removeIf(java.util.function.Predicate)>($r1);

        return;
    }

    public boolean removeIfZero(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: boolean remove(java.lang.Object,long)>($r1, 0L);

        return $z0;
    }

    public boolean replace(java.lang.Object, long, long)
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        long $l0, $l2;
        byte $b1;
        java.lang.Long $r3, $r4;
        java.lang.Object $r1;
        com.google.common.util.concurrent.AtomicLongMap r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 := @parameter0: java.lang.Object;

        $l2 := @parameter1: long;

        $l0 := @parameter2: long;

        $b1 = $l2 cmp 0L;

        if $b1 != 0 goto label2;

        $l2 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicLongMap: long putIfAbsent(java.lang.Object,long)>($r1, $l0);

        $b1 = $l2 cmp 0L;

        if $b1 != 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r3, $r4);

        return $z0;
    }

    public int size()
    {
        int $i0;
        java.util.concurrent.ConcurrentHashMap $r1;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r1 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        return $i0;
    }

    public long sum()
    {
        java.util.stream.Stream $r4;
        java.util.stream.LongStream $r5;
        c.i.b.h.a.h $r1;
        java.util.Collection $r3;
        java.util.concurrent.ConcurrentHashMap $r2;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.stream.Stream stream()>();

        $r1 = <c.i.b.h.a.h: c.i.b.h.a.h a>;

        $r5 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.LongStream mapToLong(java.util.function.ToLongFunction)>($r1);

        $l0 = interfaceinvoke $r5.<java.util.stream.LongStream: long sum()>();

        return $l0;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        com.google.common.util.concurrent.AtomicLongMap r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>();

        return $r1;
    }

    public long updateAndGet(java.lang.Object, java.util.function.LongUnaryOperator)
    {
        java.util.function.LongUnaryOperator $r1;
        java.lang.Long $r5;
        java.util.concurrent.ConcurrentHashMap $r2;
        c.i.b.h.a.d $r3;
        java.lang.Object $r4;
        long $l0;
        com.google.common.util.concurrent.AtomicLongMap r0;

        r0 := @this: com.google.common.util.concurrent.AtomicLongMap;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.function.LongUnaryOperator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.util.concurrent.AtomicLongMap: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = new c.i.b.h.a.d;

        specialinvoke $r3.<c.i.b.h.a.d: void <init>(java.util.function.LongUnaryOperator)>($r1);

        $r4 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>($r4, $r3);

        $r5 = (java.lang.Long) $r4;

        $l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        return $l0;
    }
}
