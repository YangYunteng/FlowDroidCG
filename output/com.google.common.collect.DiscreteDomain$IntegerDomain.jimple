public final class com.google.common.collect.DiscreteDomain$IntegerDomain extends com.google.common.collect.DiscreteDomain implements java.io.Serializable
{
    public static final com.google.common.collect.DiscreteDomain$IntegerDomain INSTANCE;
    public static final long serialVersionUID;

    static void <clinit>()
    {
        com.google.common.collect.DiscreteDomain$IntegerDomain $r0;

        $r0 = new com.google.common.collect.DiscreteDomain$IntegerDomain;

        specialinvoke $r0.<com.google.common.collect.DiscreteDomain$IntegerDomain: void <init>()>();

        <com.google.common.collect.DiscreteDomain$IntegerDomain: com.google.common.collect.DiscreteDomain$IntegerDomain INSTANCE> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        specialinvoke r0.<com.google.common.collect.DiscreteDomain: void <init>(boolean,com.google.common.collect.DiscreteDomain$1)>(1, null);

        return;
    }

    public static com.google.common.collect.DiscreteDomain$IntegerDomain access$000()
    {
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;

        r0 = <com.google.common.collect.DiscreteDomain$IntegerDomain: com.google.common.collect.DiscreteDomain$IntegerDomain INSTANCE>;

        return r0;
    }

    private java.lang.Object readResolve()
    {
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        r0 = <com.google.common.collect.DiscreteDomain$IntegerDomain: com.google.common.collect.DiscreteDomain$IntegerDomain INSTANCE>;

        return r0;
    }

    public volatile long distance(java.lang.Comparable, java.lang.Comparable)
    {
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;
        long $l0;
        java.lang.Comparable $r1, $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r1 := @parameter0: java.lang.Comparable;

        $r2 := @parameter1: java.lang.Comparable;

        $r3 = (java.lang.Integer) $r1;

        $r4 = (java.lang.Integer) $r2;

        $l0 = virtualinvoke r0.<com.google.common.collect.DiscreteDomain$IntegerDomain: long distance(java.lang.Integer,java.lang.Integer)>($r3, $r4);

        return $l0;
    }

    public long distance(java.lang.Integer, java.lang.Integer)
    {
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;
        int $i0;
        long $l1, $l2;
        java.lang.Integer $r1, $r2;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r1 := @parameter0: java.lang.Integer;

        $r2 := @parameter1: java.lang.Integer;

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $l2 = (long) $i0;

        $l1 = $l1 - $l2;

        return $l1;
    }

    public volatile java.lang.Comparable maxValue()
    {
        java.lang.Integer $r1;
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r1 = virtualinvoke r0.<com.google.common.collect.DiscreteDomain$IntegerDomain: java.lang.Integer maxValue()>();

        return $r1;
    }

    public java.lang.Integer maxValue()
    {
        java.lang.Integer $r1;
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        return $r1;
    }

    public volatile java.lang.Comparable minValue()
    {
        java.lang.Integer $r1;
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r1 = virtualinvoke r0.<com.google.common.collect.DiscreteDomain$IntegerDomain: java.lang.Integer minValue()>();

        return $r1;
    }

    public java.lang.Integer minValue()
    {
        java.lang.Integer $r1;
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

        return $r1;
    }

    public volatile java.lang.Comparable next(java.lang.Comparable)
    {
        java.lang.Comparable $r2;
        java.lang.Integer $r1;
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r2 := @parameter0: java.lang.Comparable;

        $r1 = (java.lang.Integer) $r2;

        $r1 = virtualinvoke r0.<com.google.common.collect.DiscreteDomain$IntegerDomain: java.lang.Integer next(java.lang.Integer)>($r1);

        return $r1;
    }

    public java.lang.Integer next(java.lang.Integer)
    {
        int $i0;
        java.lang.Integer $r1;
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r1 := @parameter0: java.lang.Integer;

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        if $i0 != 2147483647 goto label1;

        return null;

     label1:
        $i0 = $i0 + 1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public volatile java.lang.Comparable offset(java.lang.Comparable, long)
    {
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;
        long $l0;
        java.lang.Comparable $r2;
        java.lang.Integer $r1;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r2 := @parameter0: java.lang.Comparable;

        $l0 := @parameter1: long;

        $r1 = (java.lang.Integer) $r2;

        $r1 = virtualinvoke r0.<com.google.common.collect.DiscreteDomain$IntegerDomain: java.lang.Integer offset(java.lang.Integer,long)>($r1, $l0);

        return $r1;
    }

    public java.lang.Integer offset(java.lang.Integer, long)
    {
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;
        int $i2;
        long $l0, $l1;
        java.lang.Integer $r1;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r1 := @parameter0: java.lang.Integer;

        $l0 := @parameter1: long;

        staticinvoke <com.google.common.collect.CollectPreconditions: long checkNonnegative(long,java.lang.String)>($l0, "distance");

        $l1 = virtualinvoke $r1.<java.lang.Integer: long longValue()>();

        $l0 = $l1 + $l0;

        $i2 = staticinvoke <com.google.common.primitives.Ints: int checkedCast(long)>($l0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        return $r1;
    }

    public volatile java.lang.Comparable previous(java.lang.Comparable)
    {
        java.lang.Comparable $r2;
        java.lang.Integer $r1;
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r2 := @parameter0: java.lang.Comparable;

        $r1 = (java.lang.Integer) $r2;

        $r1 = virtualinvoke r0.<com.google.common.collect.DiscreteDomain$IntegerDomain: java.lang.Integer previous(java.lang.Integer)>($r1);

        return $r1;
    }

    public java.lang.Integer previous(java.lang.Integer)
    {
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;
        int $i0, $i1;
        java.lang.Integer $r1;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        $r1 := @parameter0: java.lang.Integer;

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        if $i0 != -2147483648 goto label1;

        return null;

     label1:
        $i1 = -1;

        $i0 = $i0 + $i1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public java.lang.String toString()
    {
        com.google.common.collect.DiscreteDomain$IntegerDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain$IntegerDomain;

        return "DiscreteDomain.integers()";
    }
}
