public class org.codehaus.jackson.map.ser.BeanSerializer extends org.codehaus.jackson.map.ser.SerializerBase implements org.codehaus.jackson.map.ResolvableSerializer, org.codehaus.jackson.schema.SchemaAware
{
    public static final org.codehaus.jackson.map.ser.BeanPropertyWriter[] NO_PROPS;
    public final org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter;
    public final org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps;
    public final java.lang.Object _propertyFilterId;
    public final org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props;

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r0;

        $r0 = newarray (org.codehaus.jackson.map.ser.BeanPropertyWriter)[0];

        <org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] NO_PROPS> = $r0;

        return;
    }

    public void <init>(java.lang.Class, org.codehaus.jackson.map.ser.BeanPropertyWriter[], org.codehaus.jackson.map.ser.BeanPropertyWriter[], org.codehaus.jackson.map.ser.AnyGetterWriter, java.lang.Object)
    {
        org.codehaus.jackson.map.ser.BeanSerializer r0;
        org.codehaus.jackson.map.ser.AnyGetterWriter $r4;
        java.lang.Class $r1;
        java.lang.Object $r5;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r2, $r3;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.codehaus.jackson.map.ser.BeanPropertyWriter[];

        $r3 := @parameter2: org.codehaus.jackson.map.ser.BeanPropertyWriter[];

        $r4 := @parameter3: org.codehaus.jackson.map.ser.AnyGetterWriter;

        $r5 := @parameter4: java.lang.Object;

        specialinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void <init>(java.lang.Class)>($r1);

        r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props> = $r2;

        r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps> = $r3;

        r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter> = $r4;

        r0.<org.codehaus.jackson.map.ser.BeanSerializer: java.lang.Object _propertyFilterId> = $r5;

        return;
    }

    public void <init>(org.codehaus.jackson.map.ser.BeanSerializer)
    {
        org.codehaus.jackson.map.ser.BeanSerializer r0, $r1;
        org.codehaus.jackson.map.ser.AnyGetterWriter $r5;
        java.lang.Class $r2;
        java.lang.Object $r6;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r3, $r4;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.ser.BeanSerializer;

        $r2 = $r1.<org.codehaus.jackson.map.ser.SerializerBase: java.lang.Class _handledType>;

        $r3 = $r1.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

        $r4 = $r1.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        $r5 = $r1.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

        $r6 = $r1.<org.codehaus.jackson.map.ser.BeanSerializer: java.lang.Object _propertyFilterId>;

        specialinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializer: void <init>(java.lang.Class,org.codehaus.jackson.map.ser.BeanPropertyWriter[],org.codehaus.jackson.map.ser.BeanPropertyWriter[],org.codehaus.jackson.map.ser.AnyGetterWriter,java.lang.Object)>($r2, $r3, $r4, $r5, $r6);

        return;
    }

    public void <init>(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ser.BeanPropertyWriter[], org.codehaus.jackson.map.ser.BeanPropertyWriter[], org.codehaus.jackson.map.ser.AnyGetterWriter, java.lang.Object)
    {
        org.codehaus.jackson.map.ser.BeanSerializer r0;
        org.codehaus.jackson.map.ser.AnyGetterWriter $r4;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Object $r5;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r2, $r3;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: org.codehaus.jackson.map.ser.BeanPropertyWriter[];

        $r3 := @parameter2: org.codehaus.jackson.map.ser.BeanPropertyWriter[];

        $r4 := @parameter3: org.codehaus.jackson.map.ser.AnyGetterWriter;

        $r5 := @parameter4: java.lang.Object;

        specialinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void <init>(org.codehaus.jackson.type.JavaType)>($r1);

        r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props> = $r2;

        r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps> = $r3;

        r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter> = $r4;

        r0.<org.codehaus.jackson.map.ser.BeanSerializer: java.lang.Object _propertyFilterId> = $r5;

        return;
    }

    public static org.codehaus.jackson.map.ser.BeanSerializer createDummy(java.lang.Class)
    {
        java.lang.Class $r0;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r1;
        org.codehaus.jackson.map.ser.BeanSerializer $r2;

        $r0 := @parameter0: java.lang.Class;

        $r2 = new org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 = <org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] NO_PROPS>;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.BeanSerializer: void <init>(java.lang.Class,org.codehaus.jackson.map.ser.BeanPropertyWriter[],org.codehaus.jackson.map.ser.BeanPropertyWriter[],org.codehaus.jackson.map.ser.AnyGetterWriter,java.lang.Object)>($r0, $r1, null, null, null);

        return $r2;
    }

    public org.codehaus.jackson.map.ser.BeanPropertyFilter findFilter(org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.map.ser.FilterProvider $r3;
        org.codehaus.jackson.map.ser.BeanPropertyFilter $r4;
        org.codehaus.jackson.map.JsonMappingException $r5;
        org.codehaus.jackson.map.ser.BeanSerializer r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r6;
        java.lang.Class $r7;
        java.lang.String $r8;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: java.lang.Object _propertyFilterId>;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.ser.FilterProvider getFilterProvider()>();

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.ser.FilterProvider: org.codehaus.jackson.map.ser.BeanPropertyFilter findFilter(java.lang.Object)>($r2);

        if $r4 == null goto label1;

        return $r4;

     label1:
        $r5 = new org.codehaus.jackson.map.JsonMappingException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No filter configured with id \'");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (type ");

        $r7 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label2:
        $r5 = new org.codehaus.jackson.map.JsonMappingException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not resolve BeanPropertyFilter with id \'");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'; no FilterProvider configured");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r8);

        throw $r5;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.JsonNode $r13;
        org.codehaus.jackson.schema.SchemaAware $r12;
        org.codehaus.jackson.map.ser.BeanSerializer r0;
        int $i0, $i1;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r6;
        org.codehaus.jackson.type.JavaType $r7;
        java.lang.String $r14;
        boolean $z0;
        org.codehaus.jackson.node.ObjectNode $r3, $r4;
        org.codehaus.jackson.map.JsonSerializer $r9, $r10;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r5;
        java.lang.reflect.Type $r2;
        java.lang.Class $r8, $r11;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("object", 1);

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.ObjectNode objectNode()>();

        $i0 = 0;

     label1:
        $r5 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label8;

        $r6 = $r5[$i0];

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.ser.BeanPropertyWriter: org.codehaus.jackson.type.JavaType getSerializationType()>();

        if $r7 != null goto label2;

        $r2 = virtualinvoke $r6.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.reflect.Type getGenericPropertyType()>();

        goto label3;

     label2:
        $r2 = virtualinvoke $r7.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

     label3:
        $r9 = virtualinvoke $r6.<org.codehaus.jackson.map.ser.BeanPropertyWriter: org.codehaus.jackson.map.JsonSerializer getSerializer()>();

        $r10 = $r9;

        if $r9 != null goto label5;

        $r8 = virtualinvoke $r6.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.Class getRawSerializationType()>();

        $r11 = $r8;

        if $r8 != null goto label4;

        $r11 = virtualinvoke $r6.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.Class getPropertyType()>();

     label4:
        $r10 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r11, $r6);

     label5:
        $z0 = $r10 instanceof org.codehaus.jackson.schema.SchemaAware;

        if $z0 == 0 goto label6;

        $r12 = (org.codehaus.jackson.schema.SchemaAware) $r10;

        $r13 = interfaceinvoke $r12.<org.codehaus.jackson.schema.SchemaAware: org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider,java.lang.reflect.Type)>($r1, $r2);

        goto label7;

     label6:
        $r13 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

     label7:
        $r14 = virtualinvoke $r6.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

        virtualinvoke $r4.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>($r14, $r13);

        $i0 = $i0 + 1;

        goto label1;

     label8:
        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("properties", $r4);

        return $r3;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.map.ser.BeanSerializer r0;
        org.codehaus.jackson.map.TypeSerializer $r10;
        int $i0, $i1, $i2, $i3;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r3;
        org.codehaus.jackson.type.JavaType $r4, $r5;
        org.codehaus.jackson.map.ser.ContainerSerializerBase $r11;
        boolean $z0;
        org.codehaus.jackson.map.ser.AnyGetterWriter $r12;
        org.codehaus.jackson.map.JsonSerializer $r7, $r8;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r2;
        java.lang.reflect.Type $r6;
        java.lang.Object $r9;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        $i0 = 0;

        if $r2 != null goto label01;

        $i1 = 0;

        goto label02;

     label01:
        $i1 = lengthof $r2;

     label02:
        $r2 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

        $i2 = lengthof $r2;

     label03:
        if $i0 >= $i2 goto label09;

        $r2 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

        $r3 = $r2[$i0];

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.map.ser.BeanPropertyWriter: boolean hasSerializer()>();

        if $z0 == 0 goto label04;

        goto label08;

     label04:
        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.ser.BeanPropertyWriter: org.codehaus.jackson.type.JavaType getSerializationType()>();

        $r5 = $r4;

        if $r4 != null goto label06;

        $r6 = virtualinvoke $r3.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.reflect.Type getGenericPropertyType()>();

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r6);

        $r5 = $r4;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: boolean isFinal()>();

        if $z0 != 0 goto label06;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 != 0 goto label05;

        $i3 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: int containedTypeCount()>();

        if $i3 <= 0 goto label08;

     label05:
        virtualinvoke $r3.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void setNonTrivialBaseType(org.codehaus.jackson.type.JavaType)>($r4);

        goto label08;

     label06:
        $r7 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r5, $r3);

        $r8 = $r7;

        $z0 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 == 0 goto label07;

        $r5 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r9 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        $r10 = (org.codehaus.jackson.map.TypeSerializer) $r9;

        if $r10 == null goto label07;

        $z0 = $r7 instanceof org.codehaus.jackson.map.ser.ContainerSerializerBase;

        if $z0 == 0 goto label07;

        $r11 = (org.codehaus.jackson.map.ser.ContainerSerializerBase) $r7;

        $r8 = virtualinvoke $r11.<org.codehaus.jackson.map.ser.ContainerSerializerBase: org.codehaus.jackson.map.ser.ContainerSerializerBase withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)>($r10);

     label07:
        $r3 = virtualinvoke $r3.<org.codehaus.jackson.map.ser.BeanPropertyWriter: org.codehaus.jackson.map.ser.BeanPropertyWriter withSerializer(org.codehaus.jackson.map.JsonSerializer)>($r8);

        $r2 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

        $r2[$i0] = $r3;

        if $i0 >= $i1 goto label08;

        $r2 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        $r3 = $r2[$i0];

        if $r3 == null goto label08;

        $r3 = virtualinvoke $r3.<org.codehaus.jackson.map.ser.BeanPropertyWriter: org.codehaus.jackson.map.ser.BeanPropertyWriter withSerializer(org.codehaus.jackson.map.JsonSerializer)>($r8);

        $r2[$i0] = $r3;

     label08:
        $i0 = $i0 + 1;

        goto label03;

     label09:
        $r12 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

        if $r12 == null goto label10;

        virtualinvoke $r12.<org.codehaus.jackson.map.ser.AnyGetterWriter: void resolve(org.codehaus.jackson.map.SerializerProvider)>($r1);

     label10:
        return;
    }

    public final void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ser.BeanSerializer r0;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.Object $r1, $r4;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeStartObject()>();

        $r4 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: java.lang.Object _propertyFilterId>;

        if $r4 == null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializer: void serializeFieldsFiltered(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        goto label2;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializer: void serializeFields(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

     label2:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeEndObject()>();

        return;
    }

    public void serializeFields(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        java.lang.StackOverflowError $r3;
        org.codehaus.jackson.map.JsonMappingException$Reference $r11;
        org.codehaus.jackson.map.ser.AnyGetterWriter $r9;
        org.codehaus.jackson.map.SerializerProvider $r5;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r7;
        java.lang.Exception $r12;
        org.codehaus.jackson.map.JsonMappingException $r10;
        org.codehaus.jackson.map.ser.BeanSerializer r0;
        org.codehaus.jackson.JsonGenerator $r4;
        int $i0, $i1;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r2;
        java.lang.Object $r1;
        java.lang.Class $r8;
        java.lang.String $r6;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r4 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r5 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r6 = "[anySetter]";

        $r7 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        if $r7 == null goto label01;

        $r8 = virtualinvoke $r5.<org.codehaus.jackson.map.SerializerProvider: java.lang.Class getSerializationView()>();

        if $r8 == null goto label01;

        $r7 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        goto label02;

     label01:
        $r7 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

     label02:
        $i0 = 0;

     label03:
        $i1 = lengthof $r7;

     label04:
        if $i0 >= $i1 goto label09;

     label05:
        $r2 = $r7[$i0];

     label06:
        if $r2 == null goto label08;

     label07:
        virtualinvoke $r2.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r4, $r5);

     label08:
        $i0 = $i0 + 1;

        goto label04;

     label09:
        $r9 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

     label10:
        if $r9 == null goto label21;

     label11:
        $r9 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

     label12:
        virtualinvoke $r9.<org.codehaus.jackson.map.ser.AnyGetterWriter: void getAndSerialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r4, $r5);

     label13:
        return;

     label14:
        $r10 = new org.codehaus.jackson.map.JsonMappingException;

        specialinvoke $r10.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>("Infinite recursion (StackOverflowError)");

        $i1 = lengthof $r7;

        if $i0 != $i1 goto label15;

        goto label16;

     label15:
        $r2 = $r7[$i0];

        $r6 = virtualinvoke $r2.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

     label16:
        $r11 = new org.codehaus.jackson.map.JsonMappingException$Reference;

        specialinvoke $r11.<org.codehaus.jackson.map.JsonMappingException$Reference: void <init>(java.lang.Object,java.lang.String)>($r1, $r6);

        virtualinvoke $r10.<org.codehaus.jackson.map.JsonMappingException: void prependPath(org.codehaus.jackson.map.JsonMappingException$Reference)>($r11);

        throw $r10;

     label17:
        $r12 := @caughtexception;

        $i1 = lengthof $r7;

        if $i0 != $i1 goto label18;

        goto label19;

     label18:
        $r2 = $r7[$i0];

        $r6 = virtualinvoke $r2.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

     label19:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>($r5, $r12, $r1, $r6);

        return;

     label20:
        $r3 := @caughtexception;

        goto label14;

     label21:
        return;

        catch java.lang.Exception from label03 to label04 with label17;
        catch java.lang.Exception from label05 to label06 with label17;
        catch java.lang.Exception from label07 to label08 with label17;
        catch java.lang.Exception from label09 to label10 with label17;
        catch java.lang.Exception from label11 to label13 with label17;
        catch java.lang.StackOverflowError from label07 to label08 with label20;
        catch java.lang.StackOverflowError from label12 to label13 with label20;
    }

    public void serializeFieldsFiltered(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        java.lang.StackOverflowError $r3;
        org.codehaus.jackson.map.JsonMappingException$Reference $r12;
        org.codehaus.jackson.map.SerializerProvider $r5;
        org.codehaus.jackson.map.ser.BeanPropertyFilter $r9;
        org.codehaus.jackson.map.JsonMappingException $r11;
        org.codehaus.jackson.map.ser.BeanSerializer r0;
        org.codehaus.jackson.JsonGenerator $r4;
        int $i0, $i1;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r2;
        java.lang.String $r6;
        org.codehaus.jackson.map.ser.AnyGetterWriter $r10;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r7;
        java.lang.Exception $r13;
        java.lang.Object $r1;
        java.lang.Class $r8;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r4 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r5 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r6 = "[anySetter]";

        $r7 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        if $r7 == null goto label01;

        $r8 = virtualinvoke $r5.<org.codehaus.jackson.map.SerializerProvider: java.lang.Class getSerializationView()>();

        if $r8 == null goto label01;

        $r7 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        goto label02;

     label01:
        $r7 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

     label02:
        $r9 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.BeanPropertyFilter findFilter(org.codehaus.jackson.map.SerializerProvider)>($r5);

        $i1 = 0;

     label03:
        $i0 = lengthof $r7;

     label04:
        if $i1 >= $i0 goto label09;

     label05:
        $r2 = $r7[$i1];

     label06:
        if $r2 == null goto label08;

     label07:
        interfaceinvoke $r9.<org.codehaus.jackson.map.ser.BeanPropertyFilter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.ser.BeanPropertyWriter)>($r1, $r4, $r5, $r2);

     label08:
        $i1 = $i1 + 1;

        goto label04;

     label09:
        $r10 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

     label10:
        if $r10 == null goto label21;

     label11:
        $r10 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

     label12:
        virtualinvoke $r10.<org.codehaus.jackson.map.ser.AnyGetterWriter: void getAndSerialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r4, $r5);

     label13:
        return;

     label14:
        $r11 = new org.codehaus.jackson.map.JsonMappingException;

        specialinvoke $r11.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>("Infinite recursion (StackOverflowError)");

        $i0 = lengthof $r7;

        if $i1 != $i0 goto label15;

        goto label16;

     label15:
        $r2 = $r7[$i1];

        $r6 = virtualinvoke $r2.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

     label16:
        $r12 = new org.codehaus.jackson.map.JsonMappingException$Reference;

        specialinvoke $r12.<org.codehaus.jackson.map.JsonMappingException$Reference: void <init>(java.lang.Object,java.lang.String)>($r1, $r6);

        virtualinvoke $r11.<org.codehaus.jackson.map.JsonMappingException: void prependPath(org.codehaus.jackson.map.JsonMappingException$Reference)>($r12);

        throw $r11;

     label17:
        $r13 := @caughtexception;

        $i0 = lengthof $r7;

        if $i1 != $i0 goto label18;

        goto label19;

     label18:
        $r2 = $r7[$i1];

        $r6 = virtualinvoke $r2.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

     label19:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>($r5, $r13, $r1, $r6);

        return;

     label20:
        $r3 := @caughtexception;

        goto label14;

     label21:
        return;

        catch java.lang.Exception from label03 to label04 with label17;
        catch java.lang.Exception from label05 to label06 with label17;
        catch java.lang.Exception from label07 to label08 with label17;
        catch java.lang.Exception from label09 to label10 with label17;
        catch java.lang.Exception from label11 to label13 with label17;
        catch java.lang.StackOverflowError from label07 to label08 with label20;
        catch java.lang.StackOverflowError from label12 to label13 with label20;
    }

    public void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.BeanSerializer r0;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.TypeSerializer $r4;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.Object $r1, $r5;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        $r5 = r0.<org.codehaus.jackson.map.ser.BeanSerializer: java.lang.Object _propertyFilterId>;

        if $r5 == null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializer: void serializeFieldsFiltered(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        goto label2;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.BeanSerializer: void serializeFields(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

     label2:
        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        return;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.ser.BeanSerializer r0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.map.ser.BeanSerializer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BeanSerializer for ");

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: java.lang.Class handledType()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
