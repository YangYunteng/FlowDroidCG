public final class c.k.a.d extends c.k.a.s implements java.lang.Comparable
{
    public static final c.k.a.d w;
    public final java.util.List x;
    public final java.lang.String y;

    static void <clinit>()
    {
        c.k.a.d $r0;

        $r0 = staticinvoke <c.k.a.d: c.k.a.d a(java.lang.Class)>(class "Ljava/lang/Object;");

        <c.k.a.d: c.k.a.d w> = $r0;

        return;
    }

    public void <init>(java.util.List)
    {
        java.util.List $r1;
        c.k.a.d r0;
        java.util.ArrayList $r2;

        r0 := @this: c.k.a.d;

        $r1 := @parameter0: java.util.List;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<c.k.a.d: void <init>(java.util.List,java.util.List)>($r1, $r2);

        return;
    }

    public void <init>(java.util.List, java.util.List)
    {
        java.lang.Object[] $r1;
        java.lang.CharSequence $r5;
        c.k.a.d r0;
        java.util.List $r2, $r3;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: c.k.a.d;

        $r2 := @parameter0: java.util.List;

        $r3 := @parameter1: java.util.List;

        specialinvoke r0.<c.k.a.s: void <init>(java.util.List)>($r3);

        $i0 = 1;

     label1:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 >= $i1 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (java.lang.CharSequence) $r4;

        $z0 = staticinvoke <javax.lang.model.SourceVersion: boolean isName(java.lang.CharSequence)>($r5);

        $r1 = newarray (java.lang.Object)[1];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r1[0] = $r4;

        staticinvoke <c.k.a.w: void a(boolean,java.lang.String,java.lang.Object[])>($z0, "part \'%s\' is keyword", $r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <c.k.a.w: java.util.List b(java.util.Collection)>($r2);

        r0.<c.k.a.d: java.util.List x> = $r3;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.lang.String) $r4;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r2 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(1, $i0);

        $r6 = staticinvoke <c.k.a.w: java.lang.String a(java.lang.String,java.util.List)>(".", $r2);

        goto label4;

     label3:
        $r6 = staticinvoke <c.k.a.w: java.lang.String a(java.lang.String,java.util.List)>(".", $r2);

     label4:
        r0.<c.k.a.d: java.lang.String y> = $r6;

        return;
    }

    public static c.k.a.d a(java.lang.Class)
    {
        java.lang.Object[] $r1;
        c.k.a.d $r6;
        java.util.ArrayList $r3, $r5;
        int $i0, $i1;
        java.lang.Class $r0, $r2;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <c.k.a.w: java.lang.Object a(java.lang.Object,java.lang.String,java.lang.Object[])>($r0, "clazz == null", $r1);

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isPrimitive()>();

        $z0 = $z0 ^ 1;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <c.k.a.w: void a(boolean,java.lang.String,java.lang.Object[])>($z0, "primitive types cannot be represented as a ClassName", $r1);

        $r2 = <java.lang.Void: java.lang.Class TYPE>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        $z0 = $z0 ^ 1;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <c.k.a.w: void a(boolean,java.lang.String,java.lang.Object[])>($z0, "\'void\' type cannot be represented as a ClassName", $r1);

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isArray()>();

        $z0 = $z0 ^ 1;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <c.k.a.w: void a(boolean,java.lang.String,java.lang.Object[])>($z0, "array types cannot be represented as a ClassName", $r1);

        $r5 = new java.util.ArrayList;

        $r3 = $r5;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label1:
        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r2 != null goto label3;

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = -1;

        if $i0 == $i1 goto label2;

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r3);

        $r6 = new c.k.a.d;

        specialinvoke $r6.<c.k.a.d: void <init>(java.util.List)>($r3);

        return $r6;

     label3:
        $r0 = $r2;

        goto label1;
    }

    public static transient c.k.a.d a(java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.String[] $r1;
        java.lang.String $r0, $r3;
        c.k.a.d $r4;
        java.util.ArrayList $r2;

        $r3 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String[];

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r0);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r1);

        $r4 = new c.k.a.d;

        specialinvoke $r4.<c.k.a.d: void <init>(java.util.List)>($r2);

        return $r4;
    }

    public static c.k.a.d a(javax.lang.model.element.TypeElement)
    {
        java.lang.Object[] $r1;
        javax.lang.model.element.PackageElement $r9;
        javax.lang.model.element.TypeElement $r0;
        javax.lang.model.element.Element $r8;
        c.k.a.d $r11;
        java.util.ArrayList $r2, $r10;
        java.lang.Object $r3;
        javax.lang.model.element.NestingKind $r4, $r5;
        java.lang.String $r7;
        boolean $z0;
        javax.lang.model.element.Name $r6;

        $r0 := @parameter0: javax.lang.model.element.TypeElement;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <c.k.a.w: java.lang.Object a(java.lang.Object,java.lang.String,java.lang.Object[])>($r0, "element == null", $r1);

        $r10 = new java.util.ArrayList;

        $r2 = $r10;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r3 = $r0;

     label1:
        $r8 = (javax.lang.model.element.Element) $r3;

        $z0 = staticinvoke <c.k.a.d: boolean b(javax.lang.model.element.Element)>($r8);

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r0.<javax.lang.model.element.TypeElement: javax.lang.model.element.NestingKind getNestingKind()>();

        $r5 = <javax.lang.model.element.NestingKind: javax.lang.model.element.NestingKind TOP_LEVEL>;

        if $r4 == $r5 goto label3;

        $r4 = interfaceinvoke $r0.<javax.lang.model.element.TypeElement: javax.lang.model.element.NestingKind getNestingKind()>();

        $r5 = <javax.lang.model.element.NestingKind: javax.lang.model.element.NestingKind MEMBER>;

        if $r4 != $r5 goto label2;

        goto label3;

     label2:
        $z0 = 0;

        goto label4;

     label3:
        $z0 = 1;

     label4:
        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <c.k.a.w: void a(boolean,java.lang.String,java.lang.Object[])>($z0, "unexpected type testing", $r1);

        $r8 = (javax.lang.model.element.Element) $r3;

        $r6 = interfaceinvoke $r8.<javax.lang.model.element.Element: javax.lang.model.element.Name getSimpleName()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = (javax.lang.model.element.Element) $r3;

        $r3 = interfaceinvoke $r8.<javax.lang.model.element.Element: javax.lang.model.element.Element getEnclosingElement()>();

        goto label1;

     label5:
        $r8 = (javax.lang.model.element.Element) $r0;

        $r9 = staticinvoke <c.k.a.d: javax.lang.model.element.PackageElement a(javax.lang.model.element.Element)>($r8);

        $r6 = interfaceinvoke $r9.<javax.lang.model.element.PackageElement: javax.lang.model.element.Name getQualifiedName()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r2);

        $r11 = new c.k.a.d;

        specialinvoke $r11.<c.k.a.d: void <init>(java.util.List)>($r2);

        return $r11;
    }

    public static javax.lang.model.element.PackageElement a(javax.lang.model.element.Element)
    {
        javax.lang.model.element.ElementKind $r0, $r2;
        javax.lang.model.element.PackageElement $r3;
        javax.lang.model.element.Element $r1;

        $r1 := @parameter0: javax.lang.model.element.Element;

     label1:
        $r2 = interfaceinvoke $r1.<javax.lang.model.element.Element: javax.lang.model.element.ElementKind getKind()>();

        $r0 = <javax.lang.model.element.ElementKind: javax.lang.model.element.ElementKind PACKAGE>;

        if $r2 == $r0 goto label2;

        $r1 = interfaceinvoke $r1.<javax.lang.model.element.Element: javax.lang.model.element.Element getEnclosingElement()>();

        goto label1;

     label2:
        $r3 = (javax.lang.model.element.PackageElement) $r1;

        return $r3;
    }

    public static boolean b(javax.lang.model.element.Element)
    {
        javax.lang.model.element.Element $r0;
        javax.lang.model.element.ElementKind $r1;
        boolean $z0;

        $r0 := @parameter0: javax.lang.model.element.Element;

        $r1 = interfaceinvoke $r0.<javax.lang.model.element.Element: javax.lang.model.element.ElementKind getKind()>();

        $z0 = virtualinvoke $r1.<javax.lang.model.element.ElementKind: boolean isClass()>();

        if $z0 != 0 goto label2;

        $r1 = interfaceinvoke $r0.<javax.lang.model.element.Element: javax.lang.model.element.ElementKind getKind()>();

        $z0 = virtualinvoke $r1.<javax.lang.model.element.ElementKind: boolean isInterface()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public int a(c.k.a.d)
    {
        int $i0;
        c.k.a.d r0, $r2;
        java.lang.String $r1, $r3;

        r0 := @this: c.k.a.d;

        $r2 := @parameter0: c.k.a.d;

        $r1 = r0.<c.k.a.d: java.lang.String y>;

        $r3 = $r2.<c.k.a.d: java.lang.String y>;

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i0;
    }

    public c.k.a.d a(java.lang.String)
    {
        java.util.List $r4;
        java.lang.Object[] $r2;
        int $i0;
        c.k.a.d r0;
        java.lang.String $r1;
        java.util.ArrayList $r3;

        r0 := @this: c.k.a.d;

        $r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <c.k.a.w: java.lang.Object a(java.lang.Object,java.lang.String,java.lang.Object[])>($r1, "name == null", $r2);

        $r3 = new java.util.ArrayList;

        $r4 = r0.<c.k.a.d: java.util.List x>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i0 = $i0 + 1;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = r0.<c.k.a.d: java.util.List x>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        r0 = new c.k.a.d;

        specialinvoke r0.<c.k.a.d: void <init>(java.util.List)>($r3);

        return r0;
    }

    public c.k.a.g a(c.k.a.g)
    {
        c.k.a.d r0;
        java.lang.String $r2;
        c.k.a.g $r1;

        r0 := @this: c.k.a.d;

        $r1 := @parameter0: c.k.a.g;

        $r2 = virtualinvoke $r1.<c.k.a.g: java.lang.String b(c.k.a.d)>(r0);

        virtualinvoke $r1.<c.k.a.g: c.k.a.g b(java.lang.String)>($r2);

        return $r1;
    }

    public c.k.a.s c()
    {
        java.util.List $r2;
        c.k.a.d r0, $r1;

        r0 := @this: c.k.a.d;

        $r1 = new c.k.a.d;

        $r2 = r0.<c.k.a.d: java.util.List x>;

        specialinvoke $r1.<c.k.a.d: void <init>(java.util.List)>($r2);

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        c.k.a.d r0, $r2;

        r0 := @this: c.k.a.d;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (c.k.a.d) $r1;

        $i0 = virtualinvoke r0.<c.k.a.d: int a(c.k.a.d)>($r2);

        return $i0;
    }

    public c.k.a.d d()
    {
        java.util.List $r1;
        int $i0, $i1;
        c.k.a.d r0, $r2;

        r0 := @this: c.k.a.d;

        $r1 = r0.<c.k.a.d: java.util.List x>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 2 goto label1;

        return null;

     label1:
        $r2 = new c.k.a.d;

        $r1 = r0.<c.k.a.d: java.util.List x>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r1 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(0, $i0);

        specialinvoke $r2.<c.k.a.d: void <init>(java.util.List)>($r1);

        return $r2;
    }

    public java.lang.String e()
    {
        java.util.List $r2;
        java.lang.Object $r1;
        c.k.a.d r0;
        java.lang.String $r3;

        r0 := @this: c.k.a.d;

        $r2 = r0.<c.k.a.d: java.util.List x>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.String) $r1;

        return $r3;
    }

    public java.lang.String f()
    {
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        c.k.a.d r0;
        java.lang.String $r3;

        r0 := @this: c.k.a.d;

        $r1 = r0.<c.k.a.d: java.util.List x>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.util.List g()
    {
        int $i0;
        java.util.List $r1;
        c.k.a.d r0;

        r0 := @this: c.k.a.d;

        $r1 = r0.<c.k.a.d: java.util.List x>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r1 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(1, $i0);

        return $r1;
    }

    public c.k.a.d h()
    {
        java.util.List $r2;
        c.k.a.d r0, $r1;

        r0 := @this: c.k.a.d;

        $r1 = new c.k.a.d;

        $r2 = r0.<c.k.a.d: java.util.List x>;

        $r2 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(0, 2);

        specialinvoke $r1.<c.k.a.d: void <init>(java.util.List)>($r2);

        return $r1;
    }
}
