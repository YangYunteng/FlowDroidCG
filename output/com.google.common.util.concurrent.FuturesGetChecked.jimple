public final class com.google.common.util.concurrent.FuturesGetChecked extends java.lang.Object
{
    public static final com.google.common.collect.Ordering WITH_STRING_PARAM_FIRST;

    static void <clinit>()
    {
        com.google.common.util.concurrent.FuturesGetChecked$1 $r0;
        com.google.common.collect.Ordering $r1;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r0 = new com.google.common.util.concurrent.FuturesGetChecked$1;

        specialinvoke $r0.<com.google.common.util.concurrent.FuturesGetChecked$1: void <init>()>();

        $r1 = virtualinvoke $r1.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onResultOf(com.google.common.base.Function)>($r0);

        $r1 = virtualinvoke $r1.<com.google.common.collect.Ordering: com.google.common.collect.Ordering reverse()>();

        <com.google.common.util.concurrent.FuturesGetChecked: com.google.common.collect.Ordering WITH_STRING_PARAM_FIRST> = $r1;

        return;
    }

    public void <init>()
    {
        com.google.common.util.concurrent.FuturesGetChecked r0;

        r0 := @this: com.google.common.util.concurrent.FuturesGetChecked;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator bestGetCheckedTypeValidator()
    {
        com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator r0;

        r0 = <com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder: com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator BEST_VALIDATOR>;

        return r0;
    }

    public static void checkExceptionClassValidity(java.lang.Class)
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: boolean isCheckedException(java.lang.Class)>($r0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Futures.getChecked exception type (%s) must not be a RuntimeException", $r0);

        $z0 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: boolean hasConstructorUsableByGetChecked(java.lang.Class)>($r0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Futures.getChecked exception type (%s) must be an accessible class with an accessible constructor whose parameters (if any) must be of type String and/or Throwable", $r0);

        return;
    }

    public static com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator classValueValidator()
    {
        com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator r0;

        r0 = <com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator: com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator INSTANCE>;

        return r0;
    }

    public static java.lang.Object getChecked(com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator, java.util.concurrent.Future, java.lang.Class)
    {
        java.lang.Throwable $r5;
        java.lang.Exception $r8;
        java.lang.NullPointerException r9;
        java.util.concurrent.ExecutionException $r4;
        java.util.concurrent.Future $r2;
        java.lang.InterruptedException $r6;
        com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator $r1;
        java.lang.Thread $r7;
        java.lang.Class $r0;
        java.lang.Object $r3;

        $r1 := @parameter0: com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator;

        $r2 := @parameter1: java.util.concurrent.Future;

        $r0 := @parameter2: java.lang.Class;

        interfaceinvoke $r1.<com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator: void validateClass(java.lang.Class)>($r0);

     label1:
        $r3 = interfaceinvoke $r2.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: void wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class)>($r5, $r0);

        r9 = new java.lang.NullPointerException;

        specialinvoke r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r9;

     label4:
        $r6 := @caughtexception;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

        $r8 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable)>($r0, $r6);

        throw $r8;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public static java.lang.Object getChecked(java.util.concurrent.Future, java.lang.Class)
    {
        java.util.concurrent.Future $r1;
        com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator $r2;
        java.lang.Class $r0;
        java.lang.Object $r3;

        $r1 := @parameter0: java.util.concurrent.Future;

        $r0 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator bestGetCheckedTypeValidator()>();

        $r3 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: java.lang.Object getChecked(com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator,java.util.concurrent.Future,java.lang.Class)>($r2, $r1, $r0);

        return $r3;
    }

    public static java.lang.Object getChecked(java.util.concurrent.Future, java.lang.Class, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable $r6;
        java.util.concurrent.TimeoutException $r7;
        long $l0;
        java.lang.Exception $r8;
        java.lang.NullPointerException r11;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.ExecutionException $r5;
        java.util.concurrent.Future $r2;
        java.lang.InterruptedException $r9;
        com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator $r3;
        java.lang.Thread $r10;
        java.lang.Class $r0;
        java.lang.Object $r4;

        $r2 := @parameter0: java.util.concurrent.Future;

        $r0 := @parameter1: java.lang.Class;

        $l0 := @parameter2: long;

        $r1 := @parameter3: java.util.concurrent.TimeUnit;

        $r3 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator bestGetCheckedTypeValidator()>();

        interfaceinvoke $r3.<com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator: void validateClass(java.lang.Class)>($r0);

     label1:
        $r4 = interfaceinvoke $r2.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l0, $r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: void wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class)>($r6, $r0);

        r11 = new java.lang.NullPointerException;

        specialinvoke r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r11;

     label4:
        $r7 := @caughtexception;

        $r8 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable)>($r0, $r7);

        throw $r8;

     label5:
        $r9 := @caughtexception;

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r10.<java.lang.Thread: void interrupt()>();

        $r8 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable)>($r0, $r9);

        throw $r8;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.util.concurrent.TimeoutException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public static boolean hasConstructorUsableByGetChecked(java.lang.Class)
    {
        java.lang.Class $r1;
        java.lang.Exception $r0;

        $r1 := @parameter0: java.lang.Class;

        $r0 = new java.lang.Exception;

     label1:
        specialinvoke $r0.<java.lang.Exception: void <init>()>();

        staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable)>($r1, $r0);

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r0 := @caughtexception;

        goto label3;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static boolean isCheckedException(java.lang.Class)
    {
        java.lang.Class $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Class;

        $r0 = class "Ljava/lang/RuntimeException;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public static java.lang.Object newFromConstructor(java.lang.reflect.Constructor, java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.lang.IllegalAccessException $r3;
        java.lang.Object[] $r7;
        java.lang.Class[] $r6;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.Constructor $r5;
        java.lang.reflect.InvocationTargetException $r4;
        java.lang.InstantiationException $r2;
        int $i0, $i1;
        java.lang.Class $r8;
        java.lang.Object $r10;
        java.lang.String $r9;
        boolean $z0;

        $r5 := @parameter0: java.lang.reflect.Constructor;

        $r0 := @parameter1: java.lang.Throwable;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r6;

        $r7 = newarray (java.lang.Object)[$i0];

        $i0 = 0;

     label01:
        $i1 = lengthof $r6;

        if $i0 >= $i1 goto label05;

        $r8 = $r6[$i0];

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;");

        if $z0 == 0 goto label02;

        $r9 = virtualinvoke $r0.<java.lang.Throwable: java.lang.String toString()>();

        $r7[$i0] = $r9;

        goto label03;

     label02:
        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Throwable;");

        if $z0 == 0 goto label04;

        $r7[$i0] = $r0;

     label03:
        $i0 = $i0 + 1;

        goto label01;

     label04:
        return null;

     label05:
        $r10 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

     label06:
        return $r10;

     label07:
        $r1 := @caughtexception;

        return null;

     label08:
        $r2 := @caughtexception;

        return null;

     label09:
        $r3 := @caughtexception;

        return null;

     label10:
        $r4 := @caughtexception;

        return null;

        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.InstantiationException from label05 to label06 with label08;
        catch java.lang.IllegalAccessException from label05 to label06 with label09;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label10;
    }

    public static java.lang.Exception newWithCause(java.lang.Class, java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r8;
        java.util.Iterator $r4;
        java.lang.IllegalArgumentException $r9;
        java.lang.reflect.Constructor $r6;
        java.lang.Exception $r7;
        java.lang.reflect.Constructor[] $r2;
        java.util.List $r3;
        java.lang.Class $r1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;
        boolean $z0;

        $r1 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.Throwable;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r3 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: java.util.List preferringStrings(java.util.List)>($r3);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.reflect.Constructor) $r5;

        $r5 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: java.lang.Object newFromConstructor(java.lang.reflect.Constructor,java.lang.Throwable)>($r6, $r0);

        $r7 = (java.lang.Exception) $r5;

        if $r7 == null goto label1;

        $r8 = virtualinvoke $r7.<java.lang.Exception: java.lang.Throwable getCause()>();

        if $r8 != null goto label4;

        virtualinvoke $r7.<java.lang.Exception: java.lang.Throwable initCause(java.lang.Throwable)>($r0);

        return $r7;

     label2:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No appropriate constructor for exception of type ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in response to chained exception");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r0);

        goto label3;

     label3:
        throw $r9;

     label4:
        return $r7;
    }

    public static java.util.List preferringStrings(java.util.List)
    {
        java.util.List $r1;
        com.google.common.collect.Ordering $r0;

        $r1 := @parameter0: java.util.List;

        $r0 = <com.google.common.util.concurrent.FuturesGetChecked: com.google.common.collect.Ordering WITH_STRING_PARAM_FIRST>;

        $r1 = virtualinvoke $r0.<com.google.common.collect.Ordering: java.util.List sortedCopy(java.lang.Iterable)>($r1);

        return $r1;
    }

    public static com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator weakSetValidator()
    {
        com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator r0;

        r0 = <com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator: com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator INSTANCE>;

        return r0;
    }

    public static void wrapAndThrowExceptionOrError(java.lang.Throwable, java.lang.Class)
    {
        java.lang.Throwable $r1;
        com.google.common.util.concurrent.UncheckedExecutionException $r3;
        java.lang.Error $r5;
        java.lang.Class $r2;
        com.google.common.util.concurrent.ExecutionError $r4;
        java.lang.Exception $r0;
        boolean $z0;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.Class;

        $z0 = $r1 instanceof java.lang.Error;

        if $z0 != 0 goto label2;

        $z0 = $r1 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label1;

        $r3 = new com.google.common.util.concurrent.UncheckedExecutionException;

        specialinvoke $r3.<com.google.common.util.concurrent.UncheckedExecutionException: void <init>(java.lang.Throwable)>($r1);

        throw $r3;

     label1:
        $r0 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable)>($r2, $r1);

        throw $r0;

     label2:
        $r4 = new com.google.common.util.concurrent.ExecutionError;

        $r5 = (java.lang.Error) $r1;

        specialinvoke $r4.<com.google.common.util.concurrent.ExecutionError: void <init>(java.lang.Error)>($r5);

        throw $r4;
    }
}
