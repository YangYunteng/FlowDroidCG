public abstract class com.google.common.util.concurrent.Monitor$Guard extends java.lang.Object
{
    public final java.util.concurrent.locks.Condition condition;
    public final com.google.common.util.concurrent.Monitor monitor;
    public com.google.common.util.concurrent.Monitor$Guard next;
    public int waiterCount;

    public void <init>(com.google.common.util.concurrent.Monitor)
    {
        com.google.common.util.concurrent.Monitor$Guard r0;
        java.util.concurrent.locks.Condition $r4;
        java.util.concurrent.locks.ReentrantLock $r3;
        com.google.common.util.concurrent.Monitor $r1, $r2;

        r0 := @this: com.google.common.util.concurrent.Monitor$Guard;

        $r1 := @parameter0: com.google.common.util.concurrent.Monitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.util.concurrent.Monitor$Guard: int waiterCount> = 0;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "monitor");

        $r2 = $r1;

        r0.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor> = $r2;

        $r3 = staticinvoke <com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock access$000(com.google.common.util.concurrent.Monitor)>($r1);

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<com.google.common.util.concurrent.Monitor$Guard: java.util.concurrent.locks.Condition condition> = $r4;

        return;
    }

    public abstract boolean isSatisfied();
}
