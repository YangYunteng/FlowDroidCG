public class org.codehaus.jackson.map.type.HierarchicType extends java.lang.Object
{
    public final java.lang.reflect.Type _actualType;
    public final java.lang.reflect.ParameterizedType _genericType;
    public final java.lang.Class _rawClass;
    public org.codehaus.jackson.map.type.HierarchicType _subType;
    public org.codehaus.jackson.map.type.HierarchicType _superType;

    public void <init>(java.lang.reflect.Type)
    {
        java.lang.IllegalArgumentException $r5;
        java.lang.reflect.ParameterizedType $r4;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.map.type.HierarchicType r0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r3;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r2 := @parameter0: java.lang.reflect.Type;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.Type _actualType> = $r2;

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Class) $r2;

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class _rawClass> = $r3;

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType> = null;

        return;

     label1:
        $z0 = $r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.reflect.ParameterizedType) $r2;

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType> = $r4;

        $r4 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType>;

        $r2 = interfaceinvoke $r4.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r3 = (java.lang.Class) $r2;

        r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class _rawClass> = $r3;

        return;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type ");

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be used to construct HierarchicType");

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public java.lang.reflect.ParameterizedType asGeneric()
    {
        org.codehaus.jackson.map.type.HierarchicType r0;
        java.lang.reflect.ParameterizedType r1;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        r1 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType>;

        return r1;
    }

    public java.lang.Class getRawClass()
    {
        org.codehaus.jackson.map.type.HierarchicType r0;
        java.lang.Class r1;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        r1 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class _rawClass>;

        return r1;
    }

    public org.codehaus.jackson.map.type.HierarchicType getSubType()
    {
        org.codehaus.jackson.map.type.HierarchicType r0;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        r0 = r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _subType>;

        return r0;
    }

    public org.codehaus.jackson.map.type.HierarchicType getSuperType()
    {
        org.codehaus.jackson.map.type.HierarchicType r0;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        r0 = r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _superType>;

        return r0;
    }

    public boolean isGeneric()
    {
        org.codehaus.jackson.map.type.HierarchicType r0;
        java.lang.reflect.ParameterizedType $r1;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r1 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public void setSubType(org.codehaus.jackson.map.type.HierarchicType)
    {
        org.codehaus.jackson.map.type.HierarchicType r0, $r1;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r1 := @parameter0: org.codehaus.jackson.map.type.HierarchicType;

        r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _subType> = $r1;

        return;
    }

    public void setSuperType(org.codehaus.jackson.map.type.HierarchicType)
    {
        org.codehaus.jackson.map.type.HierarchicType r0, $r1;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r1 := @parameter0: org.codehaus.jackson.map.type.HierarchicType;

        r0.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType _superType> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.reflect.ParameterizedType $r1;
        org.codehaus.jackson.map.type.HierarchicType r0;
        java.lang.Class $r3;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jackson.map.type.HierarchicType;

        $r1 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType _genericType>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;

     label1:
        $r3 = r0.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class _rawClass>;

        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }
}
