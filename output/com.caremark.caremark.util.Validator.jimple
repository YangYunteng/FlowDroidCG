public class com.caremark.caremark.util.Validator extends java.lang.Object
{
    public static final java.lang.String DATE_PATTERN;
    public static java.util.regex.Matcher matcher;
    public static java.util.regex.Pattern pattern;

    public void <init>()
    {
        java.util.regex.Pattern $r1;
        com.caremark.caremark.util.Validator r0;

        r0 := @this: com.caremark.caremark.util.Validator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$");

        <com.caremark.caremark.util.Validator: java.util.regex.Pattern pattern> = $r1;

        return;
    }

    public static boolean dateValidatePattern(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>("^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$", $r0);

        return $z0;
    }

    public static java.lang.String getDigitsOnly(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 != 0 goto label1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[^\\d]", "");

     label1:
        return $r0;
    }

    public static int getFirstDigit(java.lang.String)
    {
        int $i0;
        java.lang.NumberFormatException $r0;
        java.lang.String $r1;
        java.lang.Integer $r2;
        boolean $z0;

        $r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 != 0 goto label3;

     label1:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r1);

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

     label2:
        return $i0;

     label3:
        $i0 = -1;

        return $i0;

     label4:
        $r0 := @caughtexception;

        goto label3;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public static boolean isBelowOneYear(java.lang.String)
    {
        java.util.Calendar $r2, $r4;
        java.util.Date $r3;
        int $i0;
        java.text.SimpleDateFormat $r0, $r5;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r3 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r1);

        virtualinvoke $r2.<java.util.Calendar: void setTime(java.util.Date)>($r3);

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r5 = new java.text.SimpleDateFormat;

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        $r1 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3);

        $r3 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r1);

        virtualinvoke $r4.<java.util.Calendar: void setTime(java.util.Date)>($r3);

        $i0 = staticinvoke <com.caremark.caremark.util.Validator: int yearsBetwwn(java.util.Calendar,java.util.Calendar)>($r4, $r2);

        if $i0 >= 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isBelowThreeYear(java.lang.String)
    {
        java.util.Calendar $r2, $r4;
        java.util.Date $r3;
        int $i0;
        java.text.SimpleDateFormat $r0, $r5;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r3 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r1);

        virtualinvoke $r2.<java.util.Calendar: void setTime(java.util.Date)>($r3);

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r5 = new java.text.SimpleDateFormat;

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        $r1 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3);

        $r3 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r1);

        virtualinvoke $r4.<java.util.Calendar: void setTime(java.util.Date)>($r3);

        $i0 = staticinvoke <com.caremark.caremark.util.Validator: int yearsBetwwn(java.util.Calendar,java.util.Calendar)>($r4, $r2);

        if $i0 >= 3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isBelowTwoYear(java.lang.String)
    {
        java.util.Calendar $r2, $r4;
        java.util.Date $r3;
        int $i0;
        java.text.SimpleDateFormat $r0, $r5;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r3 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r1);

        virtualinvoke $r2.<java.util.Calendar: void setTime(java.util.Date)>($r3);

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r5 = new java.text.SimpleDateFormat;

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        $r1 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3);

        $r3 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r1);

        virtualinvoke $r4.<java.util.Calendar: void setTime(java.util.Date)>($r3);

        $i0 = staticinvoke <com.caremark.caremark.util.Validator: int yearsBetwwn(java.util.Calendar,java.util.Calendar)>($r4, $r2);

        if $i0 >= 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isDateAfter(java.lang.String, java.lang.String)
    {
        java.util.Date $r5;
        java.text.SimpleDateFormat $r4;
        java.lang.Exception $r0;
        java.util.Calendar $r3, $r6;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

     label01:
        $r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

     label02:
        $r4 = new java.text.SimpleDateFormat;

     label03:
        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r5 = virtualinvoke $r4.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r1);

        virtualinvoke $r3.<java.util.Calendar: void setTime(java.util.Date)>($r5);

        $r6 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

     label04:
        $r4 = new java.text.SimpleDateFormat;

     label05:
        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r5 = virtualinvoke $r4.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r2);

        virtualinvoke $r6.<java.util.Calendar: void setTime(java.util.Date)>($r5);

        $z0 = virtualinvoke $r6.<java.util.Calendar: boolean equals(java.lang.Object)>($r3);

     label06:
        if $z0 != 0 goto label10;

     label07:
        $z0 = virtualinvoke $r6.<java.util.Calendar: boolean after(java.lang.Object)>($r3);

     label08:
        if $z0 == 0 goto label09;

        goto label10;

     label09:
        return 0;

     label10:
        return 1;

     label11:
        $r0 := @caughtexception;

        return 0;

        catch java.lang.Exception from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Exception from label05 to label06 with label11;
        catch java.lang.Exception from label07 to label08 with label11;
    }

    public static boolean isValidDate(java.lang.String)
    {
        java.util.Date $r2, $r3;
        java.text.SimpleDateFormat $r1;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.text.SimpleDateFormat;

        specialinvoke $r1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM/dd/yyyy");

        $r2 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r0);

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        $z0 = virtualinvoke $r3.<java.util.Date: boolean after(java.util.Date)>($r2);

        return $z0;
    }

    public static boolean isValidEmail(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    public static boolean isValidName(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public static boolean isValidPhoneNumber(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        staticinvoke <com.caremark.caremark.util.Validator: java.lang.String getDigitsOnly(java.lang.String)>($r0);

        $z0 = virtualinvoke $r0.<java.lang.String: boolean matches(java.lang.String)>("^[0-9]{3}\\-[0-9]{3}\\-[0-9]{4}$");

        return $z0;
    }

    public static boolean isValidStreetAddress(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public static boolean isValidZipCode(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 < 5 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static int yearsBetwwn(java.util.Calendar, java.util.Calendar)
    {
        java.util.Calendar $r0, $r1;
        int $i0;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Calendar;

        $r1 := @parameter1: java.util.Calendar;

        $r2 = virtualinvoke $r1.<java.util.Calendar: java.lang.Object clone()>();

        $r1 = (java.util.Calendar) $r2;

        $i0 = -1;

     label1:
        $z0 = virtualinvoke $r1.<java.util.Calendar: boolean after(java.lang.Object)>($r0);

        if $z0 != 0 goto label2;

        virtualinvoke $r1.<java.util.Calendar: void add(int,int)>(1, 1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i0;
    }

    public static void <clinit>()
    {
        <com.caremark.caremark.util.Validator: java.lang.String DATE_PATTERN> = "^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$";

        return;
    }
}
