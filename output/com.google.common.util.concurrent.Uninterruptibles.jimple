public final class com.google.common.util.concurrent.Uninterruptibles extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.util.concurrent.Uninterruptibles r0;

        r0 := @this: com.google.common.util.concurrent.Uninterruptibles;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void awaitUninterruptibly(java.util.concurrent.CountDownLatch)
    {
        java.lang.Throwable $r3;
        java.util.concurrent.CountDownLatch $r1;
        java.lang.InterruptedException $r0;
        java.lang.Thread $r2;
        boolean $z0;

        $r1 := @parameter0: java.util.concurrent.CountDownLatch;

        $z0 = 0;

     label1:
        virtualinvoke $r1.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        if $z0 == 0 goto label7;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return;

     label3:
        $r3 := @caughtexception;

        if $z0 == 0 goto label4;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label4:
        throw $r3;

     label5:
        $z0 = 1;

        goto label1;

     label6:
        $r0 := @caughtexception;

        goto label5;

     label7:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable $r4;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.CountDownLatch $r1;
        java.lang.InterruptedException $r0;
        java.lang.Thread $r3;
        boolean $z0, $z1;

        $r1 := @parameter0: java.util.concurrent.CountDownLatch;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        $z0 = 0;

     label01:
        $l1 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label02:
        $l0 = $l1;

     label03:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l1 = $l2 + $l1;

     label05:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        $z1 = virtualinvoke $r1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>($l0, $r2);

     label07:
        if $z0 == 0 goto label15;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        return $z1;

     label08:
        $z0 = 1;

     label09:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l0 = $l1 - $l0;

        goto label05;

     label11:
        $r4 := @caughtexception;

        if $z0 == 0 goto label12;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label12:
        goto label13;

     label13:
        throw $r4;

     label14:
        $r0 := @caughtexception;

        goto label08;

     label15:
        return $z1;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label14;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static java.lang.Object getUninterruptibly(java.util.concurrent.Future)
    {
        java.lang.Throwable $r4;
        java.util.concurrent.Future $r1;
        java.lang.InterruptedException $r0;
        java.lang.Thread $r3;
        java.lang.Object $r2;
        boolean $z0;

        $r1 := @parameter0: java.util.concurrent.Future;

        $z0 = 0;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        if $z0 == 0 goto label7;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        return $r2;

     label3:
        $r4 := @caughtexception;

        if $z0 == 0 goto label4;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label4:
        throw $r4;

     label5:
        $z0 = 1;

        goto label1;

     label6:
        $r0 := @caughtexception;

        goto label5;

     label7:
        return $r2;

        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object getUninterruptibly(java.util.concurrent.Future, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable $r5;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.Future $r1;
        java.lang.InterruptedException $r0;
        java.lang.Thread $r4;
        java.lang.Object $r3;
        boolean $z0;

        $r1 := @parameter0: java.util.concurrent.Future;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        $z0 = 0;

     label01:
        $l1 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label02:
        $l0 = $l1;

     label03:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l1 = $l2 + $l1;

     label05:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        $r3 = interfaceinvoke $r1.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l0, $r2);

     label07:
        if $z0 == 0 goto label15;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

        return $r3;

     label08:
        $z0 = 1;

     label09:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l0 = $l1 - $l0;

        goto label05;

     label11:
        $r5 := @caughtexception;

        if $z0 == 0 goto label12;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

     label12:
        goto label13;

     label13:
        throw $r5;

     label14:
        $r0 := @caughtexception;

        goto label08;

     label15:
        return $r3;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label14;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static void joinUninterruptibly(java.lang.Thread)
    {
        java.lang.Throwable $r2;
        java.lang.InterruptedException $r0;
        java.lang.Thread $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Thread;

        $z0 = 0;

     label1:
        virtualinvoke $r1.<java.lang.Thread: void join()>();

     label2:
        if $z0 == 0 goto label7;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

        return;

     label3:
        $r2 := @caughtexception;

        if $z0 == 0 goto label4;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

     label4:
        throw $r2;

     label5:
        $z0 = 1;

        goto label1;

     label6:
        $r0 := @caughtexception;

        goto label5;

     label7:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void joinUninterruptibly(java.lang.Thread, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable $r3;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r2;
        java.lang.InterruptedException $r0;
        java.lang.Thread $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Thread;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = 0;

     label01:
        $l1 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label02:
        $l0 = $l1;

     label03:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l1 = $l2 + $l1;

     label05:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        virtualinvoke $r2.<java.util.concurrent.TimeUnit: void timedJoin(java.lang.Thread,long)>($r1, $l0);

     label07:
        if $z0 == 0 goto label15;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

        return;

     label08:
        $z0 = 1;

     label09:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l0 = $l1 - $l0;

        goto label05;

     label11:
        $r3 := @caughtexception;

        if $z0 == 0 goto label12;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

     label12:
        goto label13;

     label13:
        throw $r3;

     label14:
        $r0 := @caughtexception;

        goto label08;

     label15:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label14;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static void putUninterruptibly(java.util.concurrent.BlockingQueue, java.lang.Object)
    {
        java.lang.Throwable $r4;
        java.lang.InterruptedException $r0;
        java.lang.Thread $r3;
        java.util.concurrent.BlockingQueue $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r1 := @parameter0: java.util.concurrent.BlockingQueue;

        $r2 := @parameter1: java.lang.Object;

        $z0 = 0;

     label1:
        interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: void put(java.lang.Object)>($r2);

     label2:
        if $z0 == 0 goto label7;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        return;

     label3:
        $r4 := @caughtexception;

        if $z0 == 0 goto label4;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label4:
        throw $r4;

     label5:
        $z0 = 1;

        goto label1;

     label6:
        $r0 := @caughtexception;

        goto label5;

     label7:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void sleepUninterruptibly(long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable $r3;
        long $l0, $l1, $l2;
        java.util.concurrent.TimeUnit $r1;
        java.lang.InterruptedException $r0;
        java.lang.Thread $r2;
        boolean $z0;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $z0 = 0;

     label01:
        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

     label02:
        $l0 = $l1;

     label03:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l1 = $l2 + $l1;

     label05:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        virtualinvoke $r1.<java.util.concurrent.TimeUnit: void sleep(long)>($l0);

     label07:
        if $z0 == 0 goto label15;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return;

     label08:
        $z0 = 1;

     label09:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l0 = $l1 - $l0;

        goto label05;

     label11:
        $r3 := @caughtexception;

        if $z0 == 0 goto label12;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label12:
        goto label13;

     label13:
        throw $r3;

     label14:
        $r0 := @caughtexception;

        goto label08;

     label15:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label14;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static java.lang.Object takeUninterruptibly(java.util.concurrent.BlockingQueue)
    {
        java.lang.Throwable $r4;
        java.lang.InterruptedException $r0;
        java.lang.Thread $r3;
        java.util.concurrent.BlockingQueue $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r1 := @parameter0: java.util.concurrent.BlockingQueue;

        $z0 = 0;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();

     label2:
        if $z0 == 0 goto label7;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        return $r2;

     label3:
        $r4 := @caughtexception;

        if $z0 == 0 goto label4;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label4:
        throw $r4;

     label5:
        $z0 = 1;

        goto label1;

     label6:
        $r0 := @caughtexception;

        goto label5;

     label7:
        return $r2;

        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore, int, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable $r4;
        java.util.concurrent.Semaphore $r1;
        long $l1, $l2, $l3;
        java.util.concurrent.TimeUnit $r2;
        java.lang.InterruptedException $r0;
        java.lang.Thread $r3;
        int $i0;
        boolean $z0, $z1;

        $r1 := @parameter0: java.util.concurrent.Semaphore;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $r2 := @parameter3: java.util.concurrent.TimeUnit;

        $z0 = 0;

     label01:
        $l2 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toNanos(long)>($l1);

     label02:
        $l1 = $l2;

     label03:
        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        $l2 = $l3 + $l2;

     label05:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label06:
        $z1 = virtualinvoke $r1.<java.util.concurrent.Semaphore: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>($i0, $l1, $r2);

     label07:
        if $z0 == 0 goto label15;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        return $z1;

     label08:
        $z0 = 1;

     label09:
        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

     label10:
        $l1 = $l2 - $l1;

        goto label05;

     label11:
        $r4 := @caughtexception;

        if $z0 == 0 goto label12;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label12:
        goto label13;

     label13:
        throw $r4;

     label14:
        $r0 := @caughtexception;

        goto label08;

     label15:
        return $z1;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label14;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r0;
        java.util.concurrent.Semaphore $r1;
        long $l0;
        boolean $z0;

        $r1 := @parameter0: java.util.concurrent.Semaphore;

        $l0 := @parameter1: long;

        $r0 := @parameter2: java.util.concurrent.TimeUnit;

        $z0 = staticinvoke <com.google.common.util.concurrent.Uninterruptibles: boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,long,java.util.concurrent.TimeUnit)>($r1, 1, $l0, $r0);

        return $z0;
    }
}
