public class org.dom4j.dom.DOMEntityReference extends org.dom4j.tree.DefaultEntity implements org.w3c.dom.EntityReference
{

    public void <init>(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.dom4j.tree.DefaultEntity: void <init>(java.lang.String)>($r1);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.dom4j.tree.DefaultEntity: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        return;
    }

    public void <init>(org.dom4j.Element, java.lang.String, java.lang.String)
    {
        org.dom4j.Element $r1;
        java.lang.String $r2, $r3;
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.dom4j.tree.DefaultEntity: void <init>(org.dom4j.Element,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        return;
    }

    private void checkNewChildNode(org.w3c.dom.Node)
    {
        short $s0;
        org.w3c.dom.Node $r1;
        org.w3c.dom.DOMException $r2;
        int $i1;
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        $i1 = (int) $s0;

        if $i1 == 3 goto label2;

        $i1 = (int) $s0;

        if $i1 == 8 goto label2;

        $i1 = (int) $s0;

        if $i1 == 7 goto label2;

        $i1 = (int) $s0;

        if $i1 == 4 goto label2;

        $i1 = (int) $s0;

        if $i1 != 5 goto label1;

        return;

     label1:
        $r2 = new org.w3c.dom.DOMException;

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, "Given node cannot be a child of an entity reference");

        throw $r2;

     label2:
        return;
    }

    public org.w3c.dom.Node appendChild(org.w3c.dom.Node)
    {
        org.dom4j.dom.DOMEntityReference r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMEntityReference: void checkNewChildNode(org.w3c.dom.Node)>($r1);

        staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node appendChild(org.dom4j.Node,org.w3c.dom.Node)>(r0, $r1);

        return $r1;
    }

    public org.w3c.dom.Node cloneNode(boolean)
    {
        org.dom4j.dom.DOMEntityReference r0;
        org.w3c.dom.Node $r1;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $z0 := @parameter0: boolean;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node cloneNode(org.dom4j.Node,boolean)>(r0, $z0);

        return $r1;
    }

    public org.w3c.dom.NamedNodeMap getAttributes()
    {
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        return null;
    }

    public org.w3c.dom.NodeList getChildNodes()
    {
        org.w3c.dom.NodeList $r1;
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.NodeList getChildNodes(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getFirstChild()
    {
        org.dom4j.dom.DOMEntityReference r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getFirstChild(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getLastChild()
    {
        org.dom4j.dom.DOMEntityReference r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getLastChild(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getLocalName()
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String getLocalName(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getNamespaceURI()
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String getNamespaceURI(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getNextSibling()
    {
        org.dom4j.dom.DOMEntityReference r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getNextSibling(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getNodeName()
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 = virtualinvoke r0.<org.dom4j.tree.FlyweightEntity: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.String getNodeValue()
    {
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        return null;
    }

    public org.w3c.dom.Document getOwnerDocument()
    {
        org.dom4j.dom.DOMEntityReference r0;
        org.w3c.dom.Document $r1;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Document getOwnerDocument(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getParentNode()
    {
        org.dom4j.dom.DOMEntityReference r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getParentNode(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getPrefix()
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String getPrefix(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getPreviousSibling()
    {
        org.dom4j.dom.DOMEntityReference r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getPreviousSibling(org.dom4j.Node)>(r0);

        return $r1;
    }

    public boolean hasAttributes()
    {
        org.dom4j.dom.DOMEntityReference r0;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean hasAttributes(org.dom4j.Node)>(r0);

        return $z0;
    }

    public boolean hasChildNodes()
    {
        org.dom4j.dom.DOMEntityReference r0;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean hasChildNodes(org.dom4j.Node)>(r0);

        return $z0;
    }

    public org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.dom4j.dom.DOMEntityReference r0;
        org.w3c.dom.Node $r1, $r2;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r2 := @parameter1: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMEntityReference: void checkNewChildNode(org.w3c.dom.Node)>($r1);

        staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node insertBefore(org.dom4j.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r1, $r2);

        return $r1;
    }

    public boolean isSupported(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.dom.DOMEntityReference r0;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean isSupported(org.dom4j.Node,java.lang.String,java.lang.String)>(r0, $r2, $r1);

        return $z0;
    }

    public void normalize()
    {
        org.dom4j.dom.DOMEntityReference r0;
        java.lang.NullPointerException r1;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void normalize(org.dom4j.Node)>(r0);

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

    public org.w3c.dom.Node removeChild(org.w3c.dom.Node)
    {
        org.dom4j.dom.DOMEntityReference r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 := @parameter0: org.w3c.dom.Node;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node removeChild(org.dom4j.Node,org.w3c.dom.Node)>(r0, $r1);

        return $r1;
    }

    public org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.dom4j.dom.DOMEntityReference r0;
        org.w3c.dom.Node $r1, $r2;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r2 := @parameter1: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMEntityReference: void checkNewChildNode(org.w3c.dom.Node)>($r1);

        staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node replaceChild(org.dom4j.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r1, $r2);

        return $r2;
    }

    public void setNodeValue(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMEntityReference r0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 := @parameter0: java.lang.String;

        return;
    }

    public void setPrefix(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMEntityReference r0;
        java.lang.NullPointerException r2;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void setPrefix(org.dom4j.Node,java.lang.String)>(r0, $r1);

        r2 = new java.lang.NullPointerException;

        specialinvoke r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r2;
    }

    public boolean supports(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.dom.DOMEntityReference r0;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMEntityReference;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean supports(org.dom4j.Node,java.lang.String,java.lang.String)>(r0, $r2, $r1);

        return $z0;
    }
}
