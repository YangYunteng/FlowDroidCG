public final class com.google.android.gms.measurement.internal.zzag extends java.lang.Object
{

    public static java.util.Set zza(android.database.sqlite.SQLiteDatabase, java.lang.String)
    {
        java.lang.Throwable $r7;
        java.lang.String[] $r6;
        java.util.HashSet $r0;
        android.database.sqlite.SQLiteDatabase $r2;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r4;
        android.database.Cursor $r5;

        $r2 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r3 := @parameter1: java.lang.String;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 + 22;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT * FROM ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT 0");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r3, null);

     label1:
        $r6 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String[] getColumnNames()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, $r6);

     label2:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return $r0;

     label3:
        $r7 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void zza(com.google.android.gms.measurement.internal.zzer, android.database.sqlite.SQLiteDatabase)
    {
        com.google.android.gms.measurement.internal.zzet $r4;
        android.database.sqlite.SQLiteDatabase $r2;
        com.google.android.gms.measurement.internal.zzer $r1;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r5;
        java.io.File $r0;
        boolean $z0;

        $r1 := @parameter0: com.google.android.gms.measurement.internal.zzer;

        $r2 := @parameter1: android.database.sqlite.SQLiteDatabase;

        if $r1 == null goto label4;

        $r0 = new java.io.File;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r3);

        $z0 = virtualinvoke $r0.<java.io.File: boolean setReadable(boolean,boolean)>(0, 0);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke $r1.<com.google.android.gms.measurement.internal.zzer: com.google.android.gms.measurement.internal.zzet zzh()>();

        virtualinvoke $r4.<com.google.android.gms.measurement.internal.zzet: void zza(java.lang.String)>("Failed to turn off database read permission");

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean setWritable(boolean,boolean)>(0, 0);

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke $r1.<com.google.android.gms.measurement.internal.zzer: com.google.android.gms.measurement.internal.zzet zzh()>();

        virtualinvoke $r4.<com.google.android.gms.measurement.internal.zzet: void zza(java.lang.String)>("Failed to turn off database write permission");

     label2:
        $z0 = virtualinvoke $r0.<java.io.File: boolean setReadable(boolean,boolean)>(1, 1);

        if $z0 != 0 goto label3;

        $r4 = virtualinvoke $r1.<com.google.android.gms.measurement.internal.zzer: com.google.android.gms.measurement.internal.zzet zzh()>();

        virtualinvoke $r4.<com.google.android.gms.measurement.internal.zzet: void zza(java.lang.String)>("Failed to turn on database read permission for owner");

     label3:
        $z0 = virtualinvoke $r0.<java.io.File: boolean setWritable(boolean,boolean)>(1, 1);

        if $z0 != 0 goto label5;

        $r4 = virtualinvoke $r1.<com.google.android.gms.measurement.internal.zzer: com.google.android.gms.measurement.internal.zzet zzh()>();

        virtualinvoke $r4.<com.google.android.gms.measurement.internal.zzet: void zza(java.lang.String)>("Failed to turn on database write permission for owner");

        return;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Monitor must not be null");

        throw $r5;

     label5:
        return;
    }

    public static void zza(com.google.android.gms.measurement.internal.zzer, android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        com.google.android.gms.measurement.internal.zzet $r10;
        com.google.android.gms.measurement.internal.zzer $r2;
        java.lang.String[] $r5, $r7;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.sqlite.SQLiteException $r8;
        int $i0, $i1, $i2;
        java.lang.String $r0, $r1, $r4;
        boolean $z0;
        java.util.Set $r6;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r9;

        $r2 := @parameter0: com.google.android.gms.measurement.internal.zzer;

        $r3 := @parameter1: android.database.sqlite.SQLiteDatabase;

        $r0 := @parameter2: java.lang.String;

        $r1 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.lang.String[];

        if $r2 == null goto label28;

        $z0 = staticinvoke <com.google.android.gms.measurement.internal.zzag: boolean zza(com.google.android.gms.measurement.internal.zzer,android.database.sqlite.SQLiteDatabase,java.lang.String)>($r2, $r3, $r0);

        if $z0 != 0 goto label01;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r1);

     label01:
        if $r2 == null goto label24;

     label02:
        $r6 = staticinvoke <com.google.android.gms.measurement.internal.zzag: java.util.Set zza(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r3, $r0);

        $r7 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

     label03:
        $i0 = lengthof $r7;

        $i1 = 0;

        $i2 = 0;

     label04:
        if $i2 >= $i0 goto label13;

        $r1 = $r7[$i2];

     label05:
        $z0 = interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>($r1);

     label06:
        if $z0 == 0 goto label07;

        $i2 = $i2 + 1;

        goto label04;

     label07:
        $r8 = new android.database.sqlite.SQLiteException;

     label08:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

     label09:
        $i1 = $i1 + 35;

     label10:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

     label11:
        $i1 = $i1 + $i0;

        $r9 = new java.lang.StringBuilder;

     label12:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>(int)>($i1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Table ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is missing required column: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label13:
        if $r5 == null goto label19;

     label14:
        $i0 = lengthof $r5;

        if $i1 >= $i0 goto label19;

        $r1 = $r5[$i1];

     label15:
        $z0 = interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>($r1);

     label16:
        if $z0 != 0 goto label18;

        $i0 = $i1 + 1;

        $r1 = $r5[$i0];

     label17:
        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r1);

     label18:
        $i1 = $i1 + 2;

        goto label14;

     label19:
        $z0 = interfaceinvoke $r6.<java.util.Set: boolean isEmpty()>();

     label20:
        if $z0 != 0 goto label30;

     label21:
        $r10 = virtualinvoke $r2.<com.google.android.gms.measurement.internal.zzer: com.google.android.gms.measurement.internal.zzet zzh()>();

        $r1 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(", ", $r6);

        virtualinvoke $r10.<com.google.android.gms.measurement.internal.zzet: void zza(java.lang.String,java.lang.Object,java.lang.Object)>("Table has extra columns. table, columns", $r0, $r1);

     label22:
        return;

     label23:
        $r8 := @caughtexception;

        goto label27;

     label24:
        $r11 = new java.lang.IllegalArgumentException;

     label25:
        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Monitor must not be null");

     label26:
        throw $r11;

     label27:
        $r10 = virtualinvoke $r2.<com.google.android.gms.measurement.internal.zzer: com.google.android.gms.measurement.internal.zzet zze()>();

        virtualinvoke $r10.<com.google.android.gms.measurement.internal.zzet: void zza(java.lang.String,java.lang.Object)>("Failed to verify columns on table that was just created", $r0);

        throw $r8;

     label28:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Monitor must not be null");

        goto label29;

     label29:
        throw $r11;

     label30:
        return;

        catch android.database.sqlite.SQLiteException from label02 to label03 with label23;
        catch android.database.sqlite.SQLiteException from label05 to label06 with label23;
        catch android.database.sqlite.SQLiteException from label08 to label09 with label23;
        catch android.database.sqlite.SQLiteException from label10 to label11 with label23;
        catch android.database.sqlite.SQLiteException from label12 to label13 with label23;
        catch android.database.sqlite.SQLiteException from label15 to label16 with label23;
        catch android.database.sqlite.SQLiteException from label17 to label18 with label23;
        catch android.database.sqlite.SQLiteException from label19 to label20 with label23;
        catch android.database.sqlite.SQLiteException from label21 to label22 with label23;
        catch android.database.sqlite.SQLiteException from label25 to label26 with label23;
    }

    public static boolean zza(com.google.android.gms.measurement.internal.zzer, android.database.sqlite.SQLiteDatabase, java.lang.String)
    {
        java.lang.Throwable $r7;
        com.google.android.gms.measurement.internal.zzet $r9;
        com.google.android.gms.measurement.internal.zzer $r2;
        java.lang.String[] $r1, $r5;
        java.lang.IllegalArgumentException $r10;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.sqlite.SQLiteException $r8;
        java.lang.String $r0;
        android.database.Cursor $r4, $r6;
        boolean $z0;

        $r2 := @parameter0: com.google.android.gms.measurement.internal.zzer;

        $r3 := @parameter1: android.database.sqlite.SQLiteDatabase;

        $r0 := @parameter2: java.lang.String;

        if $r2 == null goto label12;

        $r4 = null;

     label01:
        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "name";

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = $r0;

     label02:
        $r6 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("SQLITE_MASTER", $r5, "name=?", $r1, null, null, null);

     label03:
        $r4 = $r6;

     label04:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean moveToFirst()>();

     label05:
        if $r6 == null goto label13;

        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        return $z0;

     label06:
        $r7 := @caughtexception;

        goto label10;

     label07:
        $r8 := @caughtexception;

     label08:
        $r9 = virtualinvoke $r2.<com.google.android.gms.measurement.internal.zzer: com.google.android.gms.measurement.internal.zzet zzh()>();

        virtualinvoke $r9.<com.google.android.gms.measurement.internal.zzet: void zza(java.lang.String,java.lang.Object,java.lang.Object)>("Error querying for table", $r0, $r8);

     label09:
        if $r4 == null goto label14;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return 0;

     label10:
        if $r4 == null goto label11;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

     label11:
        throw $r7;

     label12:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Monitor must not be null");

        throw $r10;

     label13:
        return $z0;

     label14:
        return 0;

        catch android.database.sqlite.SQLiteException from label02 to label03 with label07;
        catch android.database.sqlite.SQLiteException from label04 to label05 with label07;
        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
    }
}
