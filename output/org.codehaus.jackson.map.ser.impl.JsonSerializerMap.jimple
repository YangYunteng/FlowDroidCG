public class org.codehaus.jackson.map.ser.impl.JsonSerializerMap extends java.lang.Object
{
    public final org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket[] _buckets;
    public final int _size;

    public void <init>(java.util.Map)
    {
        java.util.Map$Entry $r7;
        java.util.Iterator $r5;
        java.util.Set $r4;
        org.codehaus.jackson.map.JsonSerializer $r9;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap r0;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket $r1, $r10;
        java.util.Map $r2;
        org.codehaus.jackson.map.ser.SerializerCache$TypeKey $r8;
        int $i0, $i1;
        java.lang.Object $r6;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket[] $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.JsonSerializerMap;

        $r2 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $i1 = staticinvoke <org.codehaus.jackson.map.ser.impl.JsonSerializerMap: int findSize(int)>($i0);

        r0.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: int _size> = $i1;

        $i0 = -1;

        $i0 = $i1 + $i0;

        $r3 = newarray (org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket)[$i1];

        $r4 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (org.codehaus.jackson.map.ser.SerializerCache$TypeKey) $r6;

        $i1 = virtualinvoke $r8.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: int hashCode()>();

        $i1 = $i1 & $i0;

        $r10 = new org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket;

        $r1 = $r3[$i1];

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (org.codehaus.jackson.map.JsonSerializer) $r6;

        specialinvoke $r10.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: void <init>(org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket,org.codehaus.jackson.map.ser.SerializerCache$TypeKey,org.codehaus.jackson.map.JsonSerializer)>($r1, $r8, $r9);

        $r3[$i1] = $r10;

        goto label1;

     label2:
        r0.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket[] _buckets> = $r3;

        return;
    }

    public static final int findSize(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        if $i0 > 64 goto label1;

        $i0 = $i0 + $i0;

        goto label2;

     label1:
        $i1 = $i0 >> 2;

        $i0 = $i0 + $i1;

     label2:
        $i1 = 8;

     label3:
        if $i1 >= $i0 goto label4;

        $i1 = $i1 + $i1;

        goto label3;

     label4:
        return $i1;
    }

    public org.codehaus.jackson.map.JsonSerializer find(org.codehaus.jackson.map.ser.SerializerCache$TypeKey)
    {
        org.codehaus.jackson.map.JsonSerializer r5;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap r0;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket $r3;
        org.codehaus.jackson.map.ser.SerializerCache$TypeKey $r1, $r4;
        int $i0, $i1, $i2;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket[] $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.JsonSerializerMap;

        $r1 := @parameter0: org.codehaus.jackson.map.ser.SerializerCache$TypeKey;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: int hashCode()>();

        $r2 = r0.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket[] _buckets>;

        $i1 = lengthof $r2;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $i0 = $i0 & $i1;

        $r3 = $r2[$i0];

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = $r3.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: org.codehaus.jackson.map.ser.SerializerCache$TypeKey key>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        r5 = $r3.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: org.codehaus.jackson.map.JsonSerializer value>;

        return r5;

     label2:
        $r3 = $r3.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket next>;

        if $r3 == null goto label3;

        $r4 = $r3.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: org.codehaus.jackson.map.ser.SerializerCache$TypeKey key>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        r5 = $r3.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap$Bucket: org.codehaus.jackson.map.JsonSerializer value>;

        return r5;

     label3:
        return null;
    }

    public int size()
    {
        int i0;
        org.codehaus.jackson.map.ser.impl.JsonSerializerMap r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.JsonSerializerMap;

        i0 = r0.<org.codehaus.jackson.map.ser.impl.JsonSerializerMap: int _size>;

        return i0;
    }
}
