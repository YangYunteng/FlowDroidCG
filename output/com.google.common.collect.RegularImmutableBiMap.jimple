public class com.google.common.collect.RegularImmutableBiMap extends com.google.common.collect.ImmutableBiMap
{
    public static final com.google.common.collect.RegularImmutableBiMap EMPTY;
    public static final double MAX_LOAD_FACTOR;
    public final transient java.util.Map$Entry[] entries;
    public final transient int hashCode;
    public transient com.google.common.collect.ImmutableBiMap inverse;
    public final transient com.google.common.collect.ImmutableMapEntry[] keyTable;
    public final transient int mask;
    public final transient com.google.common.collect.ImmutableMapEntry[] valueTable;

    static void <clinit>()
    {
        java.util.Map$Entry[] $r0;
        com.google.common.collect.RegularImmutableBiMap $r1;

        <com.google.common.collect.RegularImmutableBiMap: double MAX_LOAD_FACTOR> = 1.2;

        $r1 = new com.google.common.collect.RegularImmutableBiMap;

        $r0 = <com.google.common.collect.ImmutableMap: java.util.Map$Entry[] EMPTY_ENTRY_ARRAY>;

        specialinvoke $r1.<com.google.common.collect.RegularImmutableBiMap: void <init>(com.google.common.collect.ImmutableMapEntry[],com.google.common.collect.ImmutableMapEntry[],java.util.Map$Entry[],int,int)>(null, null, $r0, 0, 0);

        <com.google.common.collect.RegularImmutableBiMap: com.google.common.collect.RegularImmutableBiMap EMPTY> = $r1;

        return;
    }

    public void <init>(com.google.common.collect.ImmutableMapEntry[], com.google.common.collect.ImmutableMapEntry[], java.util.Map$Entry[], int, int)
    {
        com.google.common.collect.ImmutableMapEntry[] $r1, $r2;
        com.google.common.collect.RegularImmutableBiMap r0;
        int $i0, $i1;
        java.util.Map$Entry[] $r3;

        r0 := @this: com.google.common.collect.RegularImmutableBiMap;

        $r1 := @parameter0: com.google.common.collect.ImmutableMapEntry[];

        $r2 := @parameter1: com.google.common.collect.ImmutableMapEntry[];

        $r3 := @parameter2: java.util.Map$Entry[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        specialinvoke r0.<com.google.common.collect.ImmutableBiMap: void <init>()>();

        r0.<com.google.common.collect.RegularImmutableBiMap: com.google.common.collect.ImmutableMapEntry[] keyTable> = $r1;

        r0.<com.google.common.collect.RegularImmutableBiMap: com.google.common.collect.ImmutableMapEntry[] valueTable> = $r2;

        r0.<com.google.common.collect.RegularImmutableBiMap: java.util.Map$Entry[] entries> = $r3;

        r0.<com.google.common.collect.RegularImmutableBiMap: int mask> = $i0;

        r0.<com.google.common.collect.RegularImmutableBiMap: int hashCode> = $i1;

        return;
    }

    public static com.google.common.collect.ImmutableMapEntry[] access$100(com.google.common.collect.RegularImmutableBiMap)
    {
        com.google.common.collect.ImmutableMapEntry[] r1;
        com.google.common.collect.RegularImmutableBiMap $r0;

        $r0 := @parameter0: com.google.common.collect.RegularImmutableBiMap;

        r1 = $r0.<com.google.common.collect.RegularImmutableBiMap: com.google.common.collect.ImmutableMapEntry[] valueTable>;

        return r1;
    }

    public static int access$200(com.google.common.collect.RegularImmutableBiMap)
    {
        int i0;
        com.google.common.collect.RegularImmutableBiMap $r0;

        $r0 := @parameter0: com.google.common.collect.RegularImmutableBiMap;

        i0 = $r0.<com.google.common.collect.RegularImmutableBiMap: int mask>;

        return i0;
    }

    public static int access$300(com.google.common.collect.RegularImmutableBiMap)
    {
        int i0;
        com.google.common.collect.RegularImmutableBiMap $r0;

        $r0 := @parameter0: com.google.common.collect.RegularImmutableBiMap;

        i0 = $r0.<com.google.common.collect.RegularImmutableBiMap: int hashCode>;

        return i0;
    }

    public static void checkNoConflictInValueBucket(java.lang.Object, java.util.Map$Entry, com.google.common.collect.ImmutableMapEntry)
    {
        java.util.Map$Entry $r1;
        com.google.common.collect.ImmutableMapEntry $r2;
        java.lang.Object $r0, $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.Map$Entry;

        $r2 := @parameter2: com.google.common.collect.ImmutableMapEntry;

     label1:
        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableEntry: java.lang.Object getValue()>();

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.collect.ImmutableMap: void checkNoConflict(boolean,java.lang.String,java.util.Map$Entry,java.util.Map$Entry)>($z0, "value", $r1, $r2);

        $r2 = virtualinvoke $r2.<com.google.common.collect.ImmutableMapEntry: com.google.common.collect.ImmutableMapEntry getNextInValueBucket()>();

        goto label1;

     label2:
        return;
    }

    public static transient com.google.common.collect.RegularImmutableBiMap fromEntries(java.util.Map$Entry[])
    {
        int $i0;
        com.google.common.collect.RegularImmutableBiMap $r0;
        java.util.Map$Entry[] $r1;

        $r1 := @parameter0: java.util.Map$Entry[];

        $i0 = lengthof $r1;

        $r0 = staticinvoke <com.google.common.collect.RegularImmutableBiMap: com.google.common.collect.RegularImmutableBiMap fromEntryArray(int,java.util.Map$Entry[])>($i0, $r1);

        return $r0;
    }

    public static com.google.common.collect.RegularImmutableBiMap fromEntryArray(int, java.util.Map$Entry[])
    {
        com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.Map$Entry[] $r0, $r3;
        boolean $z0;
        java.util.Map$Entry $r4;
        com.google.common.collect.ImmutableMapEntry $r7, $r8, $r9;
        com.google.common.collect.RegularImmutableBiMap $r11;
        com.google.common.collect.ImmutableMapEntry[] $r1, $r2;
        java.lang.Object $r5, $r6;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.util.Map$Entry[];

        $i2 = $i0;

        $i1 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>($i0, $i1);

        $i3 = staticinvoke <com.google.common.collect.Hashing: int closedTableSize(int,double)>($i0, 1.2);

        $i1 = -1;

        $i1 = $i3 + $i1;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMapEntry: com.google.common.collect.ImmutableMapEntry[] createEntryArray(int)>($i3);

        $r2 = staticinvoke <com.google.common.collect.ImmutableMapEntry: com.google.common.collect.ImmutableMapEntry[] createEntryArray(int)>($i3);

        $i3 = lengthof $r0;

        if $i0 != $i3 goto label1;

        $r3 = $r0;

        goto label2;

     label1:
        $r3 = staticinvoke <com.google.common.collect.ImmutableMapEntry: com.google.common.collect.ImmutableMapEntry[] createEntryArray(int)>($i0);

     label2:
        $i3 = 0;

        $i4 = 0;

     label3:
        if $i3 >= $i2 goto label9;

        $r4 = $r0[$i3];

        $r5 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r5, $r6);

        $i2 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        $i5 = virtualinvoke $r6.<java.lang.Object: int hashCode()>();

        $i6 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i2);

        $i6 = $i6 & $i1;

        $i7 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i5);

        $i7 = $i7 & $i1;

        $r7 = $r1[$i6];

        staticinvoke <com.google.common.collect.RegularImmutableMap: void checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>($r5, $r4, $r7);

        $r8 = $r2[$i7];

        staticinvoke <com.google.common.collect.RegularImmutableBiMap: void checkNoConflictInValueBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)>($r6, $r4, $r8);

        if $r8 != null goto label7;

        if $r7 != null goto label7;

        $z0 = $r4 instanceof com.google.common.collect.ImmutableMapEntry;

        if $z0 == 0 goto label4;

        $r9 = (com.google.common.collect.ImmutableMapEntry) $r4;

        $z0 = virtualinvoke $r9.<com.google.common.collect.ImmutableMapEntry: boolean isReusable()>();

        if $z0 == 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        if $z0 == 0 goto label6;

        $r9 = (com.google.common.collect.ImmutableMapEntry) $r4;

        goto label8;

     label6:
        $r7 = new com.google.common.collect.ImmutableMapEntry;

        $r9 = $r7;

        specialinvoke $r7.<com.google.common.collect.ImmutableMapEntry: void <init>(java.lang.Object,java.lang.Object)>($r5, $r6);

        goto label8;

     label7:
        $r10 = new com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry;

        $r9 = $r10;

        specialinvoke $r10.<com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry: void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry)>($r5, $r6, $r7, $r8);

     label8:
        $r1[$i6] = $r9;

        $r2[$i7] = $r9;

        $r3[$i3] = $r9;

        $i2 = $i2 ^ $i5;

        $i4 = $i4 + $i2;

        $i3 = $i3 + 1;

        $i2 = $i0;

        goto label3;

     label9:
        $r11 = new com.google.common.collect.RegularImmutableBiMap;

        specialinvoke $r11.<com.google.common.collect.RegularImmutableBiMap: void <init>(com.google.common.collect.ImmutableMapEntry[],com.google.common.collect.ImmutableMapEntry[],java.util.Map$Entry[],int,int)>($r1, $r2, $r3, $i1, $i4);

        return $r11;
    }

    public com.google.common.collect.ImmutableSet createEntrySet()
    {
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.RegularImmutableBiMap r0;
        com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet $r3;
        java.util.Map$Entry[] $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableBiMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r2;

     label1:
        $r3 = new com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet;

        $r1 = r0.<com.google.common.collect.RegularImmutableBiMap: java.util.Map$Entry[] entries>;

        specialinvoke $r3.<com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet: void <init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[])>(r0, $r1);

        return $r3;
    }

    public com.google.common.collect.ImmutableSet createKeySet()
    {
        com.google.common.collect.ImmutableMapKeySet $r1;
        com.google.common.collect.RegularImmutableBiMap r0;

        r0 := @this: com.google.common.collect.RegularImmutableBiMap;

        $r1 = new com.google.common.collect.ImmutableMapKeySet;

        specialinvoke $r1.<com.google.common.collect.ImmutableMapKeySet: void <init>(com.google.common.collect.ImmutableMap)>(r0);

        return $r1;
    }

    public void forEach(java.util.function.BiConsumer)
    {
        java.util.Map$Entry $r3;
        com.google.common.collect.RegularImmutableBiMap r0;
        java.util.function.BiConsumer $r1;
        int $i0, $i1;
        java.lang.Object $r4, $r5;
        java.util.Map$Entry[] $r2;

        r0 := @this: com.google.common.collect.RegularImmutableBiMap;

        $r1 := @parameter0: java.util.function.BiConsumer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.collect.RegularImmutableBiMap: java.util.Map$Entry[] entries>;

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r3 = $r2[$i1];

        $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r1.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r4, $r5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.common.collect.ImmutableMapEntry[] $r1;
        com.google.common.collect.RegularImmutableBiMap r0;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.RegularImmutableBiMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.RegularImmutableBiMap: com.google.common.collect.ImmutableMapEntry[] keyTable>;

        if $r1 != null goto label1;

        return null;

     label1:
        $i0 = r0.<com.google.common.collect.RegularImmutableBiMap: int mask>;

        $r2 = staticinvoke <com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)>($r2, $r1, $i0);

        return $r2;
    }

    public int hashCode()
    {
        int i0;
        com.google.common.collect.RegularImmutableBiMap r0;

        r0 := @this: com.google.common.collect.RegularImmutableBiMap;

        i0 = r0.<com.google.common.collect.RegularImmutableBiMap: int hashCode>;

        return i0;
    }

    public volatile com.google.common.collect.BiMap inverse()
    {
        com.google.common.collect.ImmutableBiMap $r1;
        com.google.common.collect.RegularImmutableBiMap r0;

        r0 := @this: com.google.common.collect.RegularImmutableBiMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableBiMap: com.google.common.collect.ImmutableBiMap inverse()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableBiMap inverse()
    {
        com.google.common.collect.ImmutableBiMap $r1;
        com.google.common.collect.RegularImmutableBiMap r0;
        com.google.common.collect.RegularImmutableBiMap$Inverse $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableBiMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.ImmutableBiMap: com.google.common.collect.ImmutableBiMap of()>();

        return $r1;

     label1:
        $r1 = r0.<com.google.common.collect.RegularImmutableBiMap: com.google.common.collect.ImmutableBiMap inverse>;

        if $r1 != null goto label2;

        $r2 = new com.google.common.collect.RegularImmutableBiMap$Inverse;

        specialinvoke $r2.<com.google.common.collect.RegularImmutableBiMap$Inverse: void <init>(com.google.common.collect.RegularImmutableBiMap,com.google.common.collect.RegularImmutableBiMap$1)>(r0, null);

        r0.<com.google.common.collect.RegularImmutableBiMap: com.google.common.collect.ImmutableBiMap inverse> = $r2;

        return $r2;

     label2:
        return $r1;
    }

    public boolean isHashCodeFast()
    {
        com.google.common.collect.RegularImmutableBiMap r0;

        r0 := @this: com.google.common.collect.RegularImmutableBiMap;

        return 1;
    }

    public boolean isPartialView()
    {
        com.google.common.collect.RegularImmutableBiMap r0;

        r0 := @this: com.google.common.collect.RegularImmutableBiMap;

        return 0;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.RegularImmutableBiMap r0;
        java.util.Map$Entry[] $r1;

        r0 := @this: com.google.common.collect.RegularImmutableBiMap;

        $r1 = r0.<com.google.common.collect.RegularImmutableBiMap: java.util.Map$Entry[] entries>;

        $i0 = lengthof $r1;

        return $i0;
    }
}
