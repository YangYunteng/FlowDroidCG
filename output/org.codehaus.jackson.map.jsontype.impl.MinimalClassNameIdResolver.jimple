public class org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver extends org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver
{
    public final java.lang.String _basePackageName;
    public final java.lang.String _basePackagePrefix;

    public void <init>(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.type.TypeFactory)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver r0;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: org.codehaus.jackson.map.type.TypeFactory;

        specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.type.TypeFactory)>($r1, $r2);

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 >= 0 goto label1;

        r0.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: java.lang.String _basePackageName> = "";

        r0.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: java.lang.String _basePackagePrefix> = ".";

        return;

     label1:
        $i1 = $i0 + 1;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        r0.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: java.lang.String _basePackagePrefix> = $r5;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r0.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: java.lang.String _basePackageName> = $r4;

        return;
    }

    public org.codehaus.jackson.annotate.JsonTypeInfo$Id getMechanism()
    {
        org.codehaus.jackson.annotate.JsonTypeInfo$Id r1;
        org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver;

        r1 = <org.codehaus.jackson.annotate.JsonTypeInfo$Id: org.codehaus.jackson.annotate.JsonTypeInfo$Id MINIMAL_CLASS>;

        return r1;
    }

    public java.lang.String idFromValue(java.lang.Object)
    {
        org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: java.lang.String _basePackagePrefix>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: java.lang.String _basePackagePrefix>;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i0);

     label1:
        return $r3;
    }

    public org.codehaus.jackson.type.JavaType typeFromId(java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver r0;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r4;
        java.lang.StringBuilder $r2;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z0 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r3 = r0.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: java.lang.String _basePackageName>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r3 = r0.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: java.lang.String _basePackageName>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        goto label2;

     label1:
        $r3 = r0.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: java.lang.String _basePackageName>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label2:
        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r4 = specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: org.codehaus.jackson.type.JavaType typeFromId(java.lang.String)>($r1);

        return $r4;
    }
}
