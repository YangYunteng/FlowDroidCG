public abstract class com.google.common.util.concurrent.ImmediateFuture extends com.google.common.util.concurrent.FluentFuture
{
    public static final java.util.logging.Logger log;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/google/common/util/concurrent/ImmediateFuture;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.common.util.concurrent.ImmediateFuture: java.util.logging.Logger log> = $r2;

        return;
    }

    public void <init>()
    {
        com.google.common.util.concurrent.ImmediateFuture r0;

        r0 := @this: com.google.common.util.concurrent.ImmediateFuture;

        specialinvoke r0.<com.google.common.util.concurrent.FluentFuture: void <init>()>();

        return;
    }

    public void addListener(java.lang.Runnable, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor $r1;
        java.lang.RuntimeException $r7;
        java.util.logging.Logger $r2;
        java.lang.Runnable $r6;
        java.util.logging.Level $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        com.google.common.util.concurrent.ImmediateFuture r0;

        r0 := @this: com.google.common.util.concurrent.ImmediateFuture;

        $r6 := @parameter0: java.lang.Runnable;

        $r1 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r6, "Runnable was null.");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "Executor was null.");

     label1:
        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r6);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r2 = <com.google.common.util.concurrent.ImmediateFuture: java.util.logging.Logger log>;

        $r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RuntimeException while executing runnable ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with executor ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r5, $r7);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public boolean cancel(boolean)
    {
        com.google.common.util.concurrent.ImmediateFuture r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ImmediateFuture;

        $z0 := @parameter0: boolean;

        return 0;
    }

    public abstract java.lang.Object get();

    public java.lang.Object get(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.lang.Object $r2;
        long $l0;
        com.google.common.util.concurrent.ImmediateFuture r0;

        r0 := @this: com.google.common.util.concurrent.ImmediateFuture;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<com.google.common.util.concurrent.ImmediateFuture: java.lang.Object get()>();

        return $r2;
    }

    public boolean isCancelled()
    {
        com.google.common.util.concurrent.ImmediateFuture r0;

        r0 := @this: com.google.common.util.concurrent.ImmediateFuture;

        return 0;
    }

    public boolean isDone()
    {
        com.google.common.util.concurrent.ImmediateFuture r0;

        r0 := @this: com.google.common.util.concurrent.ImmediateFuture;

        return 1;
    }
}
