public abstract class com.google.common.math.LinearTransformation extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.math.LinearTransformation r0;

        r0 := @this: com.google.common.math.LinearTransformation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.math.LinearTransformation forNaN()
    {
        com.google.common.math.LinearTransformation$NaNLinearTransformation r0;

        r0 = <com.google.common.math.LinearTransformation$NaNLinearTransformation: com.google.common.math.LinearTransformation$NaNLinearTransformation INSTANCE>;

        return r0;
    }

    public static com.google.common.math.LinearTransformation horizontal(double)
    {
        com.google.common.math.LinearTransformation$RegularLinearTransformation $r0;
        double $d0;
        boolean $z0;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r0 = new com.google.common.math.LinearTransformation$RegularLinearTransformation;

        specialinvoke $r0.<com.google.common.math.LinearTransformation$RegularLinearTransformation: void <init>(double,double)>(0.0, $d0);

        return $r0;
    }

    public static com.google.common.math.LinearTransformation$LinearTransformationBuilder mapping(double, double)
    {
        com.google.common.math.LinearTransformation$LinearTransformationBuilder $r0;
        double $d0, $d1;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d1);

        if $z0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r0 = new com.google.common.math.LinearTransformation$LinearTransformationBuilder;

        specialinvoke $r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: void <init>(double,double,com.google.common.math.LinearTransformation$1)>($d0, $d1, null);

        return $r0;
    }

    public static com.google.common.math.LinearTransformation vertical(double)
    {
        com.google.common.math.LinearTransformation$VerticalLinearTransformation $r0;
        double $d0;
        boolean $z0;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r0 = new com.google.common.math.LinearTransformation$VerticalLinearTransformation;

        specialinvoke $r0.<com.google.common.math.LinearTransformation$VerticalLinearTransformation: void <init>(double)>($d0);

        return $r0;
    }

    public abstract com.google.common.math.LinearTransformation inverse();

    public abstract boolean isHorizontal();

    public abstract boolean isVertical();

    public abstract double slope();

    public abstract double transform(double);
}
