public final class com.google.common.hash.Murmur3_32HashFunction extends com.google.common.hash.AbstractHashFunction implements java.io.Serializable
{
    public static final int C1;
    public static final int C2;
    public static final int CHUNK_SIZE;
    public static final com.google.common.hash.HashFunction GOOD_FAST_HASH_32;
    public static final com.google.common.hash.HashFunction MURMUR3_32;
    public static final long serialVersionUID;
    public final int seed;

    static void <clinit>()
    {
        com.google.common.hash.Murmur3_32HashFunction $r0;
        int $i0;

        <com.google.common.hash.Murmur3_32HashFunction: int CHUNK_SIZE> = 4;

        <com.google.common.hash.Murmur3_32HashFunction: int C2> = 461845907;

        <com.google.common.hash.Murmur3_32HashFunction: int C1> = -862048943;

        $r0 = new com.google.common.hash.Murmur3_32HashFunction;

        specialinvoke $r0.<com.google.common.hash.Murmur3_32HashFunction: void <init>(int)>(0);

        <com.google.common.hash.Murmur3_32HashFunction: com.google.common.hash.HashFunction MURMUR3_32> = $r0;

        $r0 = new com.google.common.hash.Murmur3_32HashFunction;

        $i0 = <com.google.common.hash.Hashing: int GOOD_FAST_HASH_SEED>;

        specialinvoke $r0.<com.google.common.hash.Murmur3_32HashFunction: void <init>(int)>($i0);

        <com.google.common.hash.Murmur3_32HashFunction: com.google.common.hash.HashFunction GOOD_FAST_HASH_32> = $r0;

        return;
    }

    public void <init>(int)
    {
        com.google.common.hash.Murmur3_32HashFunction r0;
        int $i0;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.hash.AbstractHashFunction: void <init>()>();

        r0.<com.google.common.hash.Murmur3_32HashFunction: int seed> = $i0;

        return;
    }

    public static int access$000(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixK1(int)>($i0);

        return $i0;
    }

    public static int access$100(int, int)
    {
        int $i0, $i1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixH1(int,int)>($i1, $i0);

        return $i1;
    }

    public static int access$200(byte[], int)
    {
        int $i0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i0 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int getIntLittleEndian(byte[],int)>($r0, $i0);

        return $i0;
    }

    public static long access$300(char)
    {
        char $c0;
        long $l1;

        $c0 := @parameter0: char;

        $l1 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: long charToTwoUtf8Bytes(char)>($c0);

        return $l1;
    }

    public static long access$400(char)
    {
        char $c0;
        long $l1;

        $c0 := @parameter0: char;

        $l1 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: long charToThreeUtf8Bytes(char)>($c0);

        return $l1;
    }

    public static long access$500(int)
    {
        int $i0;
        long $l1;

        $i0 := @parameter0: int;

        $l1 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: long codePointToFourUtf8Bytes(int)>($i0);

        return $l1;
    }

    public static com.google.common.hash.HashCode access$600(int, int)
    {
        int $i0, $i1;
        com.google.common.hash.HashCode $r0;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $r0 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: com.google.common.hash.HashCode fmix(int,int)>($i1, $i0);

        return $r0;
    }

    public static long charToThreeUtf8Bytes(char)
    {
        int $i1, $i2;
        char $c0;
        long $l3;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        $i1 = $i1 >>> 12;

        $i1 = $i1 | 480;

        $i1 = $i1 & 255;

        $i2 = (int) $c0;

        $i2 = $i2 >>> 6;

        $i2 = $i2 & 63;

        $i2 = $i2 | 128;

        $i2 = $i2 << 8;

        $i1 = $i1 | $i2;

        $c0 = $c0 & 63;

        $c0 = $c0 | 128;

        $i2 = (int) $c0;

        $i2 = $i2 << 16;

        $i1 = $i2 | $i1;

        $l3 = (long) $i1;

        return $l3;
    }

    public static long charToTwoUtf8Bytes(char)
    {
        int $i1, $i2;
        char $c0;
        long $l3;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        $i1 = $i1 >>> 6;

        $i1 = $i1 | 960;

        $i1 = $i1 & 255;

        $c0 = $c0 & 63;

        $c0 = $c0 | 128;

        $i2 = (int) $c0;

        $i2 = $i2 << 8;

        $i1 = $i2 | $i1;

        $l3 = (long) $i1;

        return $l3;
    }

    public static long codePointToFourUtf8Bytes(int)
    {
        int $i0, $i1;
        long $l2, $l3;

        $i0 := @parameter0: int;

        $i1 = $i0 >>> 18;

        $l2 = (long) $i1;

        $l2 = $l2 | 240L;

        $l2 = $l2 & 255L;

        $i1 = $i0 >>> 12;

        $i1 = $i1 & 63;

        $l3 = (long) $i1;

        $l3 = $l3 | 128L;

        $l3 = $l3 << 8;

        $l2 = $l2 | $l3;

        $i1 = $i0 >>> 6;

        $i1 = $i1 & 63;

        $l3 = (long) $i1;

        $l3 = $l3 | 128L;

        $l3 = $l3 << 16;

        $l2 = $l2 | $l3;

        $i0 = $i0 & 63;

        $l3 = (long) $i0;

        $l3 = $l3 | 128L;

        $l3 = $l3 << 24;

        $l2 = $l2 | $l3;

        return $l2;
    }

    public static com.google.common.hash.HashCode fmix(int, int)
    {
        int $i0, $i1;
        com.google.common.hash.HashCode $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 ^ $i1;

        $i1 = $i0 >>> 16;

        $i0 = $i0 ^ $i1;

        $i0 = $i0 * -2048144789;

        $i1 = $i0 >>> 13;

        $i0 = $i0 ^ $i1;

        $i0 = $i0 * -1028477387;

        $i1 = $i0 >>> 16;

        $i0 = $i0 ^ $i1;

        $r0 = staticinvoke <com.google.common.hash.HashCode: com.google.common.hash.HashCode fromInt(int)>($i0);

        return $r0;
    }

    public static int getIntLittleEndian(byte[], int)
    {
        byte[] $r0;
        byte $b2, $b3, $b4, $b5;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = $i0 + 3;

        $b2 = $r0[$i1];

        $i1 = $i0 + 2;

        $b3 = $r0[$i1];

        $i1 = $i0 + 1;

        $b4 = $r0[$i1];

        $b5 = $r0[$i0];

        $i0 = staticinvoke <com.google.common.primitives.Ints: int fromBytes(byte,byte,byte,byte)>($b2, $b3, $b4, $b5);

        return $i0;
    }

    public static int mixH1(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 ^ $i1;

        $i0 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($i0, 13);

        $i0 = $i0 * 5;

        $i0 = $i0 + -430675100;

        return $i0;
    }

    public static int mixK1(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 * -862048943;

        $i0 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($i0, 15);

        $i0 = $i0 * 461845907;

        return $i0;
    }

    public int bits()
    {
        com.google.common.hash.Murmur3_32HashFunction r0;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction;

        return 32;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.hash.Murmur3_32HashFunction r0, $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.hash.Murmur3_32HashFunction;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.hash.Murmur3_32HashFunction) $r1;

        $i0 = r0.<com.google.common.hash.Murmur3_32HashFunction: int seed>;

        $i1 = $r2.<com.google.common.hash.Murmur3_32HashFunction: int seed>;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public com.google.common.hash.HashCode hashBytes(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.hash.HashCode $r2;
        com.google.common.hash.Murmur3_32HashFunction r0;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i2, $i3);

        $i2 = 0;

        $i3 = r0.<com.google.common.hash.Murmur3_32HashFunction: int seed>;

        $i4 = 0;

     label1:
        $i5 = $i4 + 4;

        if $i5 > $i1 goto label2;

        $i4 = $i4 + $i0;

        $i4 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int getIntLittleEndian(byte[],int)>($r1, $i4);

        $i4 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixK1(int)>($i4);

        $i3 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixH1(int,int)>($i3, $i4);

        $i4 = $i5;

        goto label1;

     label2:
        $i5 = 0;

     label3:
        if $i4 >= $i1 goto label4;

        $i6 = $i0 + $i4;

        $b7 = $r1[$i6];

        $i6 = staticinvoke <com.google.common.primitives.UnsignedBytes: int toInt(byte)>($b7);

        $i6 = $i6 << $i5;

        $i2 = $i2 ^ $i6;

        $i4 = $i4 + 1;

        $i5 = $i5 + 8;

        goto label3;

     label4:
        $i0 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixK1(int)>($i2);

        $i0 = $i0 ^ $i3;

        $r2 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: com.google.common.hash.HashCode fmix(int,int)>($i0, $i1);

        return $r2;
    }

    public int hashCode()
    {
        com.google.common.hash.Murmur3_32HashFunction r0;
        int $i0, $i1;
        java.lang.Class $r1;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction;

        $r1 = class "Lcom/google/common/hash/Murmur3_32HashFunction;";

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = r0.<com.google.common.hash.Murmur3_32HashFunction: int seed>;

        $i0 = $i1 ^ $i0;

        return $i0;
    }

    public com.google.common.hash.HashCode hashInt(int)
    {
        com.google.common.hash.Murmur3_32HashFunction r0;
        com.google.common.hash.HashCode $r1;
        int $i0, $i1;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixK1(int)>($i0);

        $i1 = r0.<com.google.common.hash.Murmur3_32HashFunction: int seed>;

        $i0 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixH1(int,int)>($i1, $i0);

        $r1 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: com.google.common.hash.HashCode fmix(int,int)>($i0, 4);

        return $r1;
    }

    public com.google.common.hash.HashCode hashLong(long)
    {
        com.google.common.hash.Murmur3_32HashFunction r0;
        com.google.common.hash.HashCode $r1;
        int $i1, $i2, $i3;
        long $l0;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction;

        $l0 := @parameter0: long;

        $i1 = (int) $l0;

        $l0 = $l0 >>> 32;

        $i2 = (int) $l0;

        $i1 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixK1(int)>($i1);

        $i3 = r0.<com.google.common.hash.Murmur3_32HashFunction: int seed>;

        $i1 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixH1(int,int)>($i3, $i1);

        $i2 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixK1(int)>($i2);

        $i2 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixH1(int,int)>($i1, $i2);

        $r1 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: com.google.common.hash.HashCode fmix(int,int)>($i2, 8);

        return $r1;
    }

    public com.google.common.hash.HashCode hashString(java.lang.CharSequence, java.nio.charset.Charset)
    {
        byte[] $r5;
        long $l11, $l12;
        com.google.common.hash.Murmur3_32HashFunction r0;
        java.nio.charset.Charset $r1, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        java.lang.String $r4;
        boolean $z0;
        java.lang.CharSequence $r2;
        com.google.common.hash.HashCode $r6;
        char $c6, $c8, $c9, $c10;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction;

        $r2 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r3 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>;

        $z0 = virtualinvoke $r3.<java.nio.charset.Charset: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label12;

        $i0 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i2 = 0;

        $i3 = r0.<com.google.common.hash.Murmur3_32HashFunction: int seed>;

        $i4 = 0;

        $i1 = 0;

     label01:
        $i5 = $i4 + 4;

        if $i5 > $i0 goto label02;

        $c6 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i4);

        $i7 = $i4 + 1;

        $c8 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i7);

        $i7 = $i4 + 2;

        $c9 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i7);

        $i7 = $i4 + 3;

        $c10 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i7);

        $i7 = (int) $c6;

        if $i7 >= 128 goto label02;

        $i7 = (int) $c8;

        if $i7 >= 128 goto label02;

        $i7 = (int) $c9;

        if $i7 >= 128 goto label02;

        $i7 = (int) $c10;

        if $i7 >= 128 goto label02;

        $i4 = (int) $c8;

        $i4 = $i4 << 8;

        $i7 = (int) $c6;

        $i4 = $i4 | $i7;

        $i7 = (int) $c9;

        $i7 = $i7 << 16;

        $i4 = $i4 | $i7;

        $i7 = (int) $c10;

        $i7 = $i7 << 24;

        $i4 = $i4 | $i7;

        $i4 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixK1(int)>($i4);

        $i3 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixH1(int,int)>($i3, $i4);

        $i1 = $i1 + 4;

        $i4 = $i5;

        goto label01;

     label02:
        $l11 = 0L;

     label03:
        if $i4 >= $i0 goto label11;

        $c6 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i4);

        $i5 = (int) $c6;

        if $i5 >= 128 goto label04;

        $l12 = (long) $c6;

        $l12 = $l12 << $i2;

        $l11 = $l11 | $l12;

        $i2 = $i2 + 8;

        $i1 = $i1 + 1;

        goto label09;

     label04:
        $i5 = (int) $c6;

        if $i5 >= 2048 goto label05;

        $l12 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: long charToTwoUtf8Bytes(char)>($c6);

        $l12 = $l12 << $i2;

        $l11 = $l11 | $l12;

        $i2 = $i2 + 16;

        $i1 = $i1 + 2;

        goto label09;

     label05:
        $i5 = (int) $c6;

        $i7 = 55296;

        if $i5 < $i7 goto label08;

        $i5 = (int) $c6;

        $i7 = 57343;

        if $i5 <= $i7 goto label06;

        goto label08;

     label06:
        $i5 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>($r2, $i4);

        $i7 = (int) $c6;

        if $i5 != $i7 goto label07;

        $r4 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r6 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.HashCode hashBytes(byte[])>($r5);

        return $r6;

     label07:
        $i4 = $i4 + 1;

        $l12 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: long codePointToFourUtf8Bytes(int)>($i5);

        $l12 = $l12 << $i2;

        $l11 = $l11 | $l12;

        $i1 = $i1 + 4;

        goto label09;

     label08:
        $l12 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: long charToThreeUtf8Bytes(char)>($c6);

        $l12 = $l12 << $i2;

        $l11 = $l11 | $l12;

        $i2 = $i2 + 24;

        $i1 = $i1 + 3;

     label09:
        if $i2 < 32 goto label10;

        $i5 = (int) $l11;

        $i5 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixK1(int)>($i5);

        $i3 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixH1(int,int)>($i3, $i5);

        $l11 = $l11 >>> 32;

        $i5 = -32;

        $i2 = $i2 + $i5;

     label10:
        $i4 = $i4 + 1;

        goto label03;

     label11:
        $i0 = (int) $l11;

        $i0 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixK1(int)>($i0);

        $i0 = $i0 ^ $i3;

        $r6 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: com.google.common.hash.HashCode fmix(int,int)>($i0, $i1);

        return $r6;

     label12:
        $r4 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r6 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.HashCode hashBytes(byte[])>($r5);

        return $r6;
    }

    public com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        com.google.common.hash.HashCode $r2;
        char $c3, $c4;
        com.google.common.hash.Murmur3_32HashFunction r0;
        int $i0, $i1, $i2, $i5;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = r0.<com.google.common.hash.Murmur3_32HashFunction: int seed>;

        $i1 = 1;

     label1:
        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i1 >= $i2 goto label2;

        $i2 = -1;

        $i2 = $i1 + $i2;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i2);

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $i2 = (int) $c4;

        $i2 = $i2 << 16;

        $i5 = (int) $c3;

        $i2 = $i5 | $i2;

        $i2 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixK1(int)>($i2);

        $i0 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixH1(int,int)>($i0, $i2);

        $i1 = $i1 + 2;

        goto label1;

     label2:
        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i1 & 1;

        if $i1 != 1 goto label3;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i1 - 1;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $i1 = (int) $c3;

        $i1 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: int mixK1(int)>($i1);

        $i0 = $i0 ^ $i1;

     label3:
        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i1 * 2;

        $r2 = staticinvoke <com.google.common.hash.Murmur3_32HashFunction: com.google.common.hash.HashCode fmix(int,int)>($i0, $i1);

        return $r2;
    }

    public com.google.common.hash.Hasher newHasher()
    {
        com.google.common.hash.Murmur3_32HashFunction r0;
        int $i0;
        com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher $r1;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction;

        $r1 = new com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher;

        $i0 = r0.<com.google.common.hash.Murmur3_32HashFunction: int seed>;

        specialinvoke $r1.<com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher: void <init>(int)>($i0);

        return $r1;
    }

    public java.lang.String toString()
    {
        com.google.common.hash.Murmur3_32HashFunction r0;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;

        r0 := @this: com.google.common.hash.Murmur3_32HashFunction;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hashing.murmur3_32(");

        $i0 = r0.<com.google.common.hash.Murmur3_32HashFunction: int seed>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
}
