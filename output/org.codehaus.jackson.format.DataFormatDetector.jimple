public class org.codehaus.jackson.format.DataFormatDetector extends java.lang.Object
{
    public static final int DEFAULT_MAX_INPUT_LOOKAHEAD;
    public final org.codehaus.jackson.JsonFactory[] _detectors;
    public final int _maxInputLookahead;
    public final org.codehaus.jackson.format.MatchStrength _minimalMatch;
    public final org.codehaus.jackson.format.MatchStrength _optimalMatch;

    public void <init>(java.util.Collection)
    {
        java.lang.Object[] $r3;
        java.util.Collection $r1;
        int $i0;
        org.codehaus.jackson.format.DataFormatDetector r0;
        org.codehaus.jackson.JsonFactory[] $r2;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        $r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $r2 = newarray (org.codehaus.jackson.JsonFactory)[$i0];

        $r3 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r2 = (org.codehaus.jackson.JsonFactory[]) $r3;

        specialinvoke r0.<org.codehaus.jackson.format.DataFormatDetector: void <init>(org.codehaus.jackson.JsonFactory[])>($r2);

        return;
    }

    public transient void <init>(org.codehaus.jackson.JsonFactory[])
    {
        org.codehaus.jackson.format.MatchStrength $r2, $r3;
        org.codehaus.jackson.format.DataFormatDetector r0;
        org.codehaus.jackson.JsonFactory[] $r1;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        $r1 := @parameter0: org.codehaus.jackson.JsonFactory[];

        $r2 = <org.codehaus.jackson.format.MatchStrength: org.codehaus.jackson.format.MatchStrength SOLID_MATCH>;

        $r3 = <org.codehaus.jackson.format.MatchStrength: org.codehaus.jackson.format.MatchStrength WEAK_MATCH>;

        specialinvoke r0.<org.codehaus.jackson.format.DataFormatDetector: void <init>(org.codehaus.jackson.JsonFactory[],org.codehaus.jackson.format.MatchStrength,org.codehaus.jackson.format.MatchStrength,int)>($r1, $r2, $r3, 64);

        return;
    }

    public void <init>(org.codehaus.jackson.JsonFactory[], org.codehaus.jackson.format.MatchStrength, org.codehaus.jackson.format.MatchStrength, int)
    {
        org.codehaus.jackson.format.MatchStrength $r2, $r3;
        int $i0;
        org.codehaus.jackson.format.DataFormatDetector r0;
        org.codehaus.jackson.JsonFactory[] $r1;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        $r1 := @parameter0: org.codehaus.jackson.JsonFactory[];

        $r2 := @parameter1: org.codehaus.jackson.format.MatchStrength;

        $r3 := @parameter2: org.codehaus.jackson.format.MatchStrength;

        $i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.JsonFactory[] _detectors> = $r1;

        r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _optimalMatch> = $r2;

        r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _minimalMatch> = $r3;

        r0.<org.codehaus.jackson.format.DataFormatDetector: int _maxInputLookahead> = $i0;

        return;
    }

    private org.codehaus.jackson.format.DataFormatMatcher _findFormat(org.codehaus.jackson.format.InputAccessor$Std)
    {
        org.codehaus.jackson.format.MatchStrength $r5, $r6, $r7;
        org.codehaus.jackson.format.DataFormatMatcher $r8;
        org.codehaus.jackson.format.InputAccessor$Std $r3;
        org.codehaus.jackson.JsonFactory $r2, $r4;
        int $i0, $i1, $i2, $i3;
        org.codehaus.jackson.format.DataFormatDetector r0;
        org.codehaus.jackson.JsonFactory[] $r1;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        $r3 := @parameter0: org.codehaus.jackson.format.InputAccessor$Std;

        $r1 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.JsonFactory[] _detectors>;

        $i0 = lengthof $r1;

        $r4 = null;

        $i1 = 0;

        $r5 = null;

     label1:
        if $i1 >= $i0 goto label6;

        $r2 = $r1[$i1];

        virtualinvoke $r3.<org.codehaus.jackson.format.InputAccessor$Std: void reset()>();

        $r6 = virtualinvoke $r2.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.format.MatchStrength hasFormat(org.codehaus.jackson.format.InputAccessor)>($r3);

        if $r6 == null goto label5;

        $i2 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>();

        $r7 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _minimalMatch>;

        $i3 = virtualinvoke $r7.<java.lang.Enum: int ordinal()>();

        if $i2 >= $i3 goto label2;

        goto label5;

     label2:
        if $r4 == null goto label3;

        $i2 = virtualinvoke $r5.<java.lang.Enum: int ordinal()>();

        $i3 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>();

        if $i2 < $i3 goto label3;

        goto label5;

     label3:
        $i2 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>();

        $r5 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _optimalMatch>;

        $i3 = virtualinvoke $r5.<java.lang.Enum: int ordinal()>();

        if $i2 < $i3 goto label4;

        $r4 = $r2;

        $r5 = $r6;

        goto label6;

     label4:
        $r4 = $r2;

        $r5 = $r6;

     label5:
        $i1 = $i1 + 1;

        goto label1;

     label6:
        $r8 = virtualinvoke $r3.<org.codehaus.jackson.format.InputAccessor$Std: org.codehaus.jackson.format.DataFormatMatcher createMatcher(org.codehaus.jackson.JsonFactory,org.codehaus.jackson.format.MatchStrength)>($r4, $r5);

        return $r8;
    }

    public org.codehaus.jackson.format.DataFormatMatcher findFormat(java.io.InputStream)
    {
        byte[] $r4;
        int $i0;
        org.codehaus.jackson.format.DataFormatDetector r0;
        org.codehaus.jackson.format.DataFormatMatcher $r2;
        org.codehaus.jackson.format.InputAccessor$Std $r1;
        java.io.InputStream $r3;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        $r3 := @parameter0: java.io.InputStream;

        $r1 = new org.codehaus.jackson.format.InputAccessor$Std;

        $i0 = r0.<org.codehaus.jackson.format.DataFormatDetector: int _maxInputLookahead>;

        $r4 = newarray (byte)[$i0];

        specialinvoke $r1.<org.codehaus.jackson.format.InputAccessor$Std: void <init>(java.io.InputStream,byte[])>($r3, $r4);

        $r2 = specialinvoke r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.DataFormatMatcher _findFormat(org.codehaus.jackson.format.InputAccessor$Std)>($r1);

        return $r2;
    }

    public org.codehaus.jackson.format.DataFormatMatcher findFormat(byte[])
    {
        byte[] $r3;
        org.codehaus.jackson.format.DataFormatDetector r0;
        org.codehaus.jackson.format.DataFormatMatcher $r2;
        org.codehaus.jackson.format.InputAccessor$Std $r1;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        $r3 := @parameter0: byte[];

        $r1 = new org.codehaus.jackson.format.InputAccessor$Std;

        specialinvoke $r1.<org.codehaus.jackson.format.InputAccessor$Std: void <init>(byte[])>($r3);

        $r2 = specialinvoke r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.DataFormatMatcher _findFormat(org.codehaus.jackson.format.InputAccessor$Std)>($r1);

        return $r2;
    }

    public org.codehaus.jackson.format.DataFormatDetector withMaxInputLookahead(int)
    {
        org.codehaus.jackson.format.MatchStrength $r2, $r3;
        int $i0, $i1;
        org.codehaus.jackson.format.DataFormatDetector r0, $r4;
        org.codehaus.jackson.JsonFactory[] $r1;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        $i0 := @parameter0: int;

        $i1 = r0.<org.codehaus.jackson.format.DataFormatDetector: int _maxInputLookahead>;

        if $i0 != $i1 goto label1;

        return r0;

     label1:
        $r4 = new org.codehaus.jackson.format.DataFormatDetector;

        $r1 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.JsonFactory[] _detectors>;

        $r2 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _optimalMatch>;

        $r3 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _minimalMatch>;

        specialinvoke $r4.<org.codehaus.jackson.format.DataFormatDetector: void <init>(org.codehaus.jackson.JsonFactory[],org.codehaus.jackson.format.MatchStrength,org.codehaus.jackson.format.MatchStrength,int)>($r1, $r2, $r3, $i0);

        return $r4;
    }

    public org.codehaus.jackson.format.DataFormatDetector withMinimalMatch(org.codehaus.jackson.format.MatchStrength)
    {
        org.codehaus.jackson.format.MatchStrength $r1, $r3;
        int $i0;
        org.codehaus.jackson.format.DataFormatDetector r0, $r4;
        org.codehaus.jackson.JsonFactory[] $r2;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        $r1 := @parameter0: org.codehaus.jackson.format.MatchStrength;

        $r3 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _minimalMatch>;

        if $r1 != $r3 goto label1;

        return r0;

     label1:
        $r4 = new org.codehaus.jackson.format.DataFormatDetector;

        $r2 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.JsonFactory[] _detectors>;

        $r3 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _optimalMatch>;

        $i0 = r0.<org.codehaus.jackson.format.DataFormatDetector: int _maxInputLookahead>;

        specialinvoke $r4.<org.codehaus.jackson.format.DataFormatDetector: void <init>(org.codehaus.jackson.JsonFactory[],org.codehaus.jackson.format.MatchStrength,org.codehaus.jackson.format.MatchStrength,int)>($r2, $r3, $r1, $i0);

        return $r4;
    }

    public org.codehaus.jackson.format.DataFormatDetector withOptimalMatch(org.codehaus.jackson.format.MatchStrength)
    {
        org.codehaus.jackson.format.MatchStrength $r1, $r3;
        int $i0;
        org.codehaus.jackson.format.DataFormatDetector r0, $r4;
        org.codehaus.jackson.JsonFactory[] $r2;

        r0 := @this: org.codehaus.jackson.format.DataFormatDetector;

        $r1 := @parameter0: org.codehaus.jackson.format.MatchStrength;

        $r3 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _optimalMatch>;

        if $r1 != $r3 goto label1;

        return r0;

     label1:
        $r4 = new org.codehaus.jackson.format.DataFormatDetector;

        $r2 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.JsonFactory[] _detectors>;

        $r3 = r0.<org.codehaus.jackson.format.DataFormatDetector: org.codehaus.jackson.format.MatchStrength _minimalMatch>;

        $i0 = r0.<org.codehaus.jackson.format.DataFormatDetector: int _maxInputLookahead>;

        specialinvoke $r4.<org.codehaus.jackson.format.DataFormatDetector: void <init>(org.codehaus.jackson.JsonFactory[],org.codehaus.jackson.format.MatchStrength,org.codehaus.jackson.format.MatchStrength,int)>($r2, $r1, $r3, $i0);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.format.DataFormatDetector: int DEFAULT_MAX_INPUT_LOOKAHEAD> = 64;

        return;
    }
}
