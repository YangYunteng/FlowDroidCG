public class javax.'annotation'.RegEx$Checker extends java.lang.Object implements javax.'annotation'.meta.TypeQualifierValidator
{

    public void <init>()
    {
        javax.'annotation'.RegEx$Checker r0;

        r0 := @this: javax.'annotation'.RegEx$Checker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile javax.'annotation'.meta.When forConstantValue(java.lang.'annotation'.Annotation, java.lang.Object)
    {
        javax.'annotation'.RegEx$Checker r0;
        java.lang.'annotation'.Annotation $r3;
        java.lang.Object $r1;
        javax.'annotation'.meta.When $r2;
        javax.'annotation'.RegEx $r4;

        r0 := @this: javax.'annotation'.RegEx$Checker;

        $r3 := @parameter0: java.lang.'annotation'.Annotation;

        $r1 := @parameter1: java.lang.Object;

        $r4 = (javax.'annotation'.RegEx) $r3;

        $r2 = virtualinvoke r0.<javax.'annotation'.RegEx$Checker: javax.'annotation'.meta.When forConstantValue(javax.'annotation'.RegEx,java.lang.Object)>($r4, $r1);

        return $r2;
    }

    public javax.'annotation'.meta.When forConstantValue(javax.'annotation'.RegEx, java.lang.Object)
    {
        javax.'annotation'.RegEx$Checker r0;
        java.util.regex.PatternSyntaxException $r1;
        java.lang.Object $r3;
        java.lang.String $r4;
        javax.'annotation'.meta.When r5;
        javax.'annotation'.RegEx $r2;
        boolean $z0;

        r0 := @this: javax.'annotation'.RegEx$Checker;

        $r2 := @parameter0: javax.'annotation'.RegEx;

        $r3 := @parameter1: java.lang.Object;

        $z0 = $r3 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        r5 = <javax.'annotation'.meta.When: javax.'annotation'.meta.When NEVER>;

        return r5;

     label1:
        $r4 = (java.lang.String) $r3;

     label2:
        staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r4);

     label3:
        r5 = <javax.'annotation'.meta.When: javax.'annotation'.meta.When ALWAYS>;

        return r5;

     label4:
        r5 = <javax.'annotation'.meta.When: javax.'annotation'.meta.When NEVER>;

        return r5;

     label5:
        $r1 := @caughtexception;

        goto label4;

        catch java.util.regex.PatternSyntaxException from label2 to label3 with label5;
    }
}
