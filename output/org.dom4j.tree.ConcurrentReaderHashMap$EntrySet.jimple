public class org.dom4j.tree.ConcurrentReaderHashMap$EntrySet extends java.util.AbstractSet
{
    public final org.dom4j.tree.ConcurrentReaderHashMap this$0;

    public void <init>(org.dom4j.tree.ConcurrentReaderHashMap)
    {
        org.dom4j.tree.ConcurrentReaderHashMap$EntrySet r0;
        org.dom4j.tree.ConcurrentReaderHashMap $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$EntrySet;

        $r1 := @parameter0: org.dom4j.tree.ConcurrentReaderHashMap;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap$EntrySet: org.dom4j.tree.ConcurrentReaderHashMap this$0> = $r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public void <init>(org.dom4j.tree.ConcurrentReaderHashMap, org.dom4j.tree.ConcurrentReaderHashMap$EntrySet)
    {
        org.dom4j.tree.ConcurrentReaderHashMap$EntrySet r0, $r2;
        org.dom4j.tree.ConcurrentReaderHashMap $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$EntrySet;

        $r1 := @parameter0: org.dom4j.tree.ConcurrentReaderHashMap;

        $r2 := @parameter1: org.dom4j.tree.ConcurrentReaderHashMap$EntrySet;

        specialinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap$EntrySet: void <init>(org.dom4j.tree.ConcurrentReaderHashMap)>($r1);

        return;
    }

    public void clear()
    {
        org.dom4j.tree.ConcurrentReaderHashMap$EntrySet r0;
        org.dom4j.tree.ConcurrentReaderHashMap $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$EntrySet;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap$EntrySet: org.dom4j.tree.ConcurrentReaderHashMap this$0>;

        virtualinvoke $r1.<org.dom4j.tree.ConcurrentReaderHashMap: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Map$Entry $r2;
        org.dom4j.tree.ConcurrentReaderHashMap $r3;
        org.dom4j.tree.ConcurrentReaderHashMap$EntrySet r0;
        java.lang.Object $r1, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$EntrySet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (java.util.Map$Entry) $r1;

        $r3 = r0.<org.dom4j.tree.ConcurrentReaderHashMap$EntrySet: org.dom4j.tree.ConcurrentReaderHashMap this$0>;

        $r1 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = virtualinvoke $r3.<org.dom4j.tree.ConcurrentReaderHashMap: java.lang.Object get(java.lang.Object)>($r1);

        if $r1 == null goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        org.dom4j.tree.ConcurrentReaderHashMap$EntrySet r0;
        org.dom4j.tree.ConcurrentReaderHashMap $r2;
        org.dom4j.tree.ConcurrentReaderHashMap$HashIterator $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$EntrySet;

        $r1 = new org.dom4j.tree.ConcurrentReaderHashMap$HashIterator;

        $r2 = r0.<org.dom4j.tree.ConcurrentReaderHashMap$EntrySet: org.dom4j.tree.ConcurrentReaderHashMap this$0>;

        specialinvoke $r1.<org.dom4j.tree.ConcurrentReaderHashMap$HashIterator: void <init>(org.dom4j.tree.ConcurrentReaderHashMap)>($r2);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Map$Entry $r3;
        org.dom4j.tree.ConcurrentReaderHashMap $r2;
        org.dom4j.tree.ConcurrentReaderHashMap$EntrySet r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$EntrySet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.dom4j.tree.ConcurrentReaderHashMap$EntrySet: org.dom4j.tree.ConcurrentReaderHashMap this$0>;

        $r3 = (java.util.Map$Entry) $r1;

        $z0 = virtualinvoke $r2.<org.dom4j.tree.ConcurrentReaderHashMap: boolean findAndRemoveEntry(java.util.Map$Entry)>($r3);

        return $z0;
    }

    public int size()
    {
        org.dom4j.tree.ConcurrentReaderHashMap$EntrySet r0;
        int $i0;
        org.dom4j.tree.ConcurrentReaderHashMap $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$EntrySet;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap$EntrySet: org.dom4j.tree.ConcurrentReaderHashMap this$0>;

        $i0 = virtualinvoke $r1.<org.dom4j.tree.ConcurrentReaderHashMap: int size()>();

        return $i0;
    }
}
