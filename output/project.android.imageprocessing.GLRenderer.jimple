public abstract class project.android.imageprocessing.GLRenderer extends java.lang.Object
{
    public static final java.lang.String ATTRIBUTE_POSITION;
    public static final java.lang.String ATTRIBUTE_TEXCOORD;
    public static final java.lang.String UNIFORM_TEXTURE0;
    public static final java.lang.String UNIFORM_TEXTUREBASE;
    public static final java.lang.String VARYING_TEXCOORD;
    public float alpha;
    public float blue;
    public int curRotation;
    public boolean customSizeSet;
    public int fragmentShaderHandle;
    public float green;
    public int height;
    public boolean initialized;
    public int positionHandle;
    public int programHandle;
    public float red;
    public java.nio.FloatBuffer renderVertices;
    public boolean sizeChanged;
    public int texCoordHandle;
    public int textureHandle;
    public java.nio.FloatBuffer[] textureVertices;
    public int texture_in;
    public int vertexShaderHandle;
    public int width;

    public void <init>()
    {
        java.nio.ByteOrder $r4;
        java.nio.FloatBuffer[] $r2;
        java.nio.FloatBuffer $r5;
        int $i0;
        float[] $r1;
        java.nio.ByteBuffer $r3;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<project.android.imageprocessing.GLRenderer: boolean initialized> = 0;

        $r1 = newarray (float)[8];

        $r1[0] = -1.0F;

        $r1[1] = -1.0F;

        $r1[2] = 1.0F;

        $r1[3] = -1.0F;

        $r1[4] = -1.0F;

        $r1[5] = 1.0F;

        $r1[6] = 1.0F;

        $r1[7] = 1.0F;

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void setRenderVertices(float[])>($r1);

        $r2 = newarray (java.nio.FloatBuffer)[4];

        r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices> = $r2;

        $r1 = newarray (float)[8];

        $r1[0] = 0.0F;

        $r1[1] = 0.0F;

        $r1[2] = 1.0F;

        $r1[3] = 0.0F;

        $r1[4] = 0.0F;

        $r1[5] = 1.0F;

        $r1[6] = 1.0F;

        $r1[7] = 1.0F;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i0 = lengthof $r1;

        $i0 = $i0 * 4;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i0);

        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r3 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        $r5 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r2[0] = $r5;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r5 = $r2[0];

        $r5 = virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r1);

        virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $r1 = newarray (float)[8];

        $r1[0] = 0.0F;

        $r1[1] = 1.0F;

        $r1[2] = 0.0F;

        $r1[3] = 0.0F;

        $r1[4] = 1.0F;

        $r1[5] = 1.0F;

        $r1[6] = 1.0F;

        $r1[7] = 0.0F;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i0 = lengthof $r1;

        $i0 = $i0 * 4;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i0);

        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r3 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        $r5 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r2[1] = $r5;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r5 = $r2[1];

        $r5 = virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r1);

        virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $r1 = newarray (float)[8];

        $r1[0] = 1.0F;

        $r1[1] = 1.0F;

        $r1[2] = 0.0F;

        $r1[3] = 1.0F;

        $r1[4] = 1.0F;

        $r1[5] = 0.0F;

        $r1[6] = 0.0F;

        $r1[7] = 0.0F;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i0 = lengthof $r1;

        $i0 = $i0 * 4;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i0);

        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r3 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        $r5 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r2[2] = $r5;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r5 = $r2[2];

        $r5 = virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r1);

        virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $r1 = newarray (float)[8];

        $r1[0] = 1.0F;

        $r1[1] = 0.0F;

        $r1[2] = 1.0F;

        $r1[3] = 1.0F;

        $r1[4] = 0.0F;

        $r1[5] = 0.0F;

        $r1[6] = 0.0F;

        $r1[7] = 1.0F;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i0 = lengthof $r1;

        $i0 = $i0 * 4;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i0);

        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r3 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        $r5 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r2[3] = $r5;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r5 = $r2[3];

        $r5 = virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r1);

        virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        r0.<project.android.imageprocessing.GLRenderer: int curRotation> = 0;

        r0.<project.android.imageprocessing.GLRenderer: int texture_in> = 0;

        r0.<project.android.imageprocessing.GLRenderer: boolean customSizeSet> = 0;

        r0.<project.android.imageprocessing.GLRenderer: boolean initialized> = 0;

        r0.<project.android.imageprocessing.GLRenderer: boolean sizeChanged> = 0;

        return;
    }

    public void bindShaderAttributes()
    {
        int $i0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        staticinvoke <android.opengl.GLES20: void glBindAttribLocation(int,int,java.lang.String)>($i0, 0, "a_Position");

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        staticinvoke <android.opengl.GLES20: void glBindAttribLocation(int,int,java.lang.String)>($i0, 1, "a_TexCoord");

        return;
    }

    public void destroy()
    {
        int $i0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        r0.<project.android.imageprocessing.GLRenderer: boolean initialized> = 0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        if $i0 == 0 goto label1;

        staticinvoke <android.opengl.GLES20: void glDeleteProgram(int)>($i0);

        r0.<project.android.imageprocessing.GLRenderer: int programHandle> = 0;

     label1:
        $i0 = r0.<project.android.imageprocessing.GLRenderer: int vertexShaderHandle>;

        if $i0 == 0 goto label2;

        staticinvoke <android.opengl.GLES20: void glDeleteShader(int)>($i0);

        r0.<project.android.imageprocessing.GLRenderer: int vertexShaderHandle> = 0;

     label2:
        $i0 = r0.<project.android.imageprocessing.GLRenderer: int fragmentShaderHandle>;

        if $i0 == 0 goto label3;

        staticinvoke <android.opengl.GLES20: void glDeleteShader(int)>($i0);

        r0.<project.android.imageprocessing.GLRenderer: int fragmentShaderHandle> = 0;

     label3:
        return;
    }

    public void drawFrame()
    {
        int $i0, $i1;
        float $f0, $f1, $f2, $f3;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int texture_in>;

        if $i0 != 0 goto label1;

        return;

     label1:
        $i0 = r0.<project.android.imageprocessing.GLRenderer: int width>;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int height>;

        staticinvoke <android.opengl.GLES20: void glViewport(int,int,int,int)>(0, 0, $i0, $i1);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        staticinvoke <android.opengl.GLES20: void glUseProgram(int)>($i0);

        staticinvoke <android.opengl.GLES20: void glClear(int)>(16640);

        $f0 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: float getBackgroundRed()>();

        $f1 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: float getBackgroundGreen()>();

        $f2 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: float getBackgroundBlue()>();

        $f3 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: float getBackgroundAlpha()>();

        staticinvoke <android.opengl.GLES20: void glClearColor(float,float,float,float)>($f0, $f1, $f2, $f3);

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void passShaderValues()>();

        staticinvoke <android.opengl.GLES20: void glDrawArrays(int,int,int)>(5, 0, 4);

        return;
    }

    public float getBackgroundAlpha()
    {
        float f0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        f0 = r0.<project.android.imageprocessing.GLRenderer: float alpha>;

        return f0;
    }

    public float getBackgroundBlue()
    {
        float f0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        f0 = r0.<project.android.imageprocessing.GLRenderer: float blue>;

        return f0;
    }

    public float getBackgroundGreen()
    {
        float f0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        f0 = r0.<project.android.imageprocessing.GLRenderer: float green>;

        return f0;
    }

    public float getBackgroundRed()
    {
        float f0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        f0 = r0.<project.android.imageprocessing.GLRenderer: float red>;

        return f0;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        return "precision mediump float;\nuniform sampler2D u_Texture0;\nvarying vec2 v_TexCoord;\nvoid main(){\n   gl_FragColor = texture2D(u_Texture0,v_TexCoord);\n}\n";
    }

    public int getHeight()
    {
        int i0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        i0 = r0.<project.android.imageprocessing.GLRenderer: int height>;

        return i0;
    }

    public java.lang.String getVertexShader()
    {
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        return "attribute vec4 a_Position;\nattribute vec2 a_TexCoord;\nvarying vec2 v_TexCoord;\nvoid main() {\n  v_TexCoord = a_TexCoord;\n   gl_Position = a_Position;\n}\n";
    }

    public int getWidth()
    {
        int i0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        i0 = r0.<project.android.imageprocessing.GLRenderer: int width>;

        return i0;
    }

    public void handleSizeChange()
    {
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        return;
    }

    public void initShaderHandles()
    {
        int $i0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_Texture0");

        r0.<project.android.imageprocessing.GLRenderer: int textureHandle> = $i0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetAttribLocation(int,java.lang.String)>($i0, "a_Position");

        r0.<project.android.imageprocessing.GLRenderer: int positionHandle> = $i0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetAttribLocation(int,java.lang.String)>($i0, "a_TexCoord");

        r0.<project.android.imageprocessing.GLRenderer: int texCoordHandle> = $i0;

        return;
    }

    public void initWithGLContext()
    {
        java.lang.RuntimeException $r5;
        project.android.imageprocessing.GLRenderer r0;
        int[] $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r4, $r6;
        java.lang.String $r1, $r2;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $r1 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: java.lang.String getVertexShader()>();

        $r2 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: java.lang.String getFragmentShader()>();

        $i0 = 35633;

        $i0 = staticinvoke <android.opengl.GLES20: int glCreateShader(int)>($i0);

        r0.<project.android.imageprocessing.GLRenderer: int vertexShaderHandle> = $i0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int vertexShaderHandle>;

        if $i0 == 0 goto label1;

        staticinvoke <android.opengl.GLES20: void glShaderSource(int,java.lang.String)>($i0, $r1);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int vertexShaderHandle>;

        staticinvoke <android.opengl.GLES20: void glCompileShader(int)>($i0);

        $r3 = newarray (int)[1];

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int vertexShaderHandle>;

        $i1 = 35713;

        staticinvoke <android.opengl.GLES20: void glGetShaderiv(int,int,int[],int)>($i0, $i1, $r3, 0);

        $i0 = $r3[0];

        if $i0 != 0 goto label1;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int vertexShaderHandle>;

        $r1 = staticinvoke <android.opengl.GLES20: java.lang.String glGetShaderInfoLog(int)>($i0);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int vertexShaderHandle>;

        staticinvoke <android.opengl.GLES20: void glDeleteShader(int)>($i0);

        r0.<project.android.imageprocessing.GLRenderer: int vertexShaderHandle> = 0;

        goto label2;

     label1:
        $r1 = "none";

     label2:
        $i0 = r0.<project.android.imageprocessing.GLRenderer: int vertexShaderHandle>;

        if $i0 == 0 goto label7;

        $i0 = 35632;

        $i0 = staticinvoke <android.opengl.GLES20: int glCreateShader(int)>($i0);

        r0.<project.android.imageprocessing.GLRenderer: int fragmentShaderHandle> = $i0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int fragmentShaderHandle>;

        if $i0 == 0 goto label3;

        staticinvoke <android.opengl.GLES20: void glShaderSource(int,java.lang.String)>($i0, $r2);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int fragmentShaderHandle>;

        staticinvoke <android.opengl.GLES20: void glCompileShader(int)>($i0);

        $r3 = newarray (int)[1];

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int fragmentShaderHandle>;

        $i1 = 35713;

        staticinvoke <android.opengl.GLES20: void glGetShaderiv(int,int,int[],int)>($i0, $i1, $r3, 0);

        $i0 = $r3[0];

        if $i0 != 0 goto label3;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int fragmentShaderHandle>;

        $r1 = staticinvoke <android.opengl.GLES20: java.lang.String glGetShaderInfoLog(int)>($i0);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int fragmentShaderHandle>;

        staticinvoke <android.opengl.GLES20: void glDeleteShader(int)>($i0);

        r0.<project.android.imageprocessing.GLRenderer: int fragmentShaderHandle> = 0;

     label3:
        $i0 = r0.<project.android.imageprocessing.GLRenderer: int fragmentShaderHandle>;

        if $i0 == 0 goto label6;

        $i0 = staticinvoke <android.opengl.GLES20: int glCreateProgram()>();

        r0.<project.android.imageprocessing.GLRenderer: int programHandle> = $i0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        if $i0 == 0 goto label4;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int vertexShaderHandle>;

        staticinvoke <android.opengl.GLES20: void glAttachShader(int,int)>($i0, $i1);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int fragmentShaderHandle>;

        staticinvoke <android.opengl.GLES20: void glAttachShader(int,int)>($i0, $i1);

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void bindShaderAttributes()>();

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        staticinvoke <android.opengl.GLES20: void glLinkProgram(int)>($i0);

        $r3 = newarray (int)[1];

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i1 = 35714;

        staticinvoke <android.opengl.GLES20: void glGetProgramiv(int,int,int[],int)>($i0, $i1, $r3, 0);

        $i0 = $r3[0];

        if $i0 != 0 goto label4;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        staticinvoke <android.opengl.GLES20: void glDeleteProgram(int)>($i0);

        r0.<project.android.imageprocessing.GLRenderer: int programHandle> = 0;

     label4:
        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        if $i0 == 0 goto label5;

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void initShaderHandles()>();

        return;

     label5:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not create program.");

        throw $r5;

     label6:
        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        $r4 = $r6;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Could not create fragment shader. Reason: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label7:
        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        $r4 = $r6;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Could not create vertex shader. Reason: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r5;
    }

    public void onDrawFrame()
    {
        project.android.imageprocessing.GLRenderer r0;
        boolean $z0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $z0 = r0.<project.android.imageprocessing.GLRenderer: boolean initialized>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void initWithGLContext()>();

        r0.<project.android.imageprocessing.GLRenderer: boolean initialized> = 1;

     label1:
        $z0 = r0.<project.android.imageprocessing.GLRenderer: boolean sizeChanged>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void handleSizeChange()>();

        r0.<project.android.imageprocessing.GLRenderer: boolean sizeChanged> = 0;

     label2:
        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void drawFrame()>();

        return;
    }

    public void passShaderValues()
    {
        java.nio.FloatBuffer $r1;
        java.nio.FloatBuffer[] $r2;
        int $i0, $i1;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $r1 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer renderVertices>;

        virtualinvoke $r1.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int positionHandle>;

        $r1 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer renderVertices>;

        staticinvoke <android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)>($i0, 2, 5126, 0, 8, $r1);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int positionHandle>;

        staticinvoke <android.opengl.GLES20: void glEnableVertexAttribArray(int)>($i0);

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int curRotation>;

        $r1 = $r2[$i0];

        virtualinvoke $r1.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int texCoordHandle>;

        $r2 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int curRotation>;

        $r1 = $r2[$i1];

        staticinvoke <android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)>($i0, 2, 5126, 0, 8, $r1);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int texCoordHandle>;

        staticinvoke <android.opengl.GLES20: void glEnableVertexAttribArray(int)>($i0);

        $i0 = 33984;

        staticinvoke <android.opengl.GLES20: void glActiveTexture(int)>($i0);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int texture_in>;

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>(3553, $i0);

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int textureHandle>;

        staticinvoke <android.opengl.GLES20: void glUniform1i(int,int)>($i0, 0);

        return;
    }

    public void reInitialize()
    {
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        r0.<project.android.imageprocessing.GLRenderer: boolean initialized> = 0;

        return;
    }

    public void rotateClockwise90Degrees(int)
    {
        int $i0, $i1;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $i0 := @parameter0: int;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int curRotation>;

        $i1 = $i1 + $i0;

        r0.<project.android.imageprocessing.GLRenderer: int curRotation> = $i1;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int curRotation>;

        $i1 = $i1 % 4;

        r0.<project.android.imageprocessing.GLRenderer: int curRotation> = $i1;

        $i0 = $i0 % 2;

        if $i0 != 1 goto label1;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int width>;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int height>;

        r0.<project.android.imageprocessing.GLRenderer: int width> = $i1;

        r0.<project.android.imageprocessing.GLRenderer: int height> = $i0;

     label1:
        return;
    }

    public void rotateCounterClockwise90Degrees(int)
    {
        int $i0, $i1, $i2;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $i0 := @parameter0: int;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int curRotation>;

        $i2 = $i0 % 4;

        $i2 = 4 - $i2;

        $i1 = $i1 + $i2;

        r0.<project.android.imageprocessing.GLRenderer: int curRotation> = $i1;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int curRotation>;

        $i1 = $i1 % 4;

        r0.<project.android.imageprocessing.GLRenderer: int curRotation> = $i1;

        $i0 = $i0 % 2;

        if $i0 != 1 goto label1;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int width>;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int height>;

        r0.<project.android.imageprocessing.GLRenderer: int width> = $i1;

        r0.<project.android.imageprocessing.GLRenderer: int height> = $i0;

     label1:
        return;
    }

    public void setBackgroundAlpha(float)
    {
        float $f0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $f0 := @parameter0: float;

        r0.<project.android.imageprocessing.GLRenderer: float alpha> = $f0;

        return;
    }

    public void setBackgroundBlue(float)
    {
        float $f0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $f0 := @parameter0: float;

        r0.<project.android.imageprocessing.GLRenderer: float blue> = $f0;

        return;
    }

    public void setBackgroundColour(float, float, float, float)
    {
        float $f0, $f1, $f2, $f3;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $f3 := @parameter3: float;

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void setBackgroundRed(float)>($f0);

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void setBackgroundGreen(float)>($f1);

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void setBackgroundBlue(float)>($f2);

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void setBackgroundAlpha(float)>($f3);

        return;
    }

    public void setBackgroundGreen(float)
    {
        float $f0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $f0 := @parameter0: float;

        r0.<project.android.imageprocessing.GLRenderer: float green> = $f0;

        return;
    }

    public void setBackgroundRed(float)
    {
        float $f0;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $f0 := @parameter0: float;

        r0.<project.android.imageprocessing.GLRenderer: float red> = $f0;

        return;
    }

    public void setHeight(int)
    {
        int $i0, $i1;
        project.android.imageprocessing.GLRenderer r0;
        boolean $z0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $i0 := @parameter0: int;

        $z0 = r0.<project.android.imageprocessing.GLRenderer: boolean customSizeSet>;

        if $z0 != 0 goto label1;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int height>;

        if $i1 == $i0 goto label1;

        r0.<project.android.imageprocessing.GLRenderer: int height> = $i0;

        r0.<project.android.imageprocessing.GLRenderer: boolean sizeChanged> = 1;

     label1:
        return;
    }

    public void setRenderSize(int, int)
    {
        int $i0, $i1, $i2;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0.<project.android.imageprocessing.GLRenderer: boolean customSizeSet> = 1;

        $i2 = r0.<project.android.imageprocessing.GLRenderer: int curRotation>;

        $i2 = $i2 % 2;

        if $i2 != 1 goto label1;

        r0.<project.android.imageprocessing.GLRenderer: int width> = $i1;

        r0.<project.android.imageprocessing.GLRenderer: int height> = $i0;

        goto label2;

     label1:
        r0.<project.android.imageprocessing.GLRenderer: int width> = $i0;

        r0.<project.android.imageprocessing.GLRenderer: int height> = $i1;

     label2:
        r0.<project.android.imageprocessing.GLRenderer: boolean sizeChanged> = 1;

        return;
    }

    public void setRenderVertices(float[])
    {
        java.nio.ByteOrder $r3;
        java.nio.FloatBuffer $r4;
        int $i0;
        float[] $r1;
        java.nio.ByteBuffer $r2;
        project.android.imageprocessing.GLRenderer r0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $r1 := @parameter0: float[];

        $i0 = lengthof $r1;

        $i0 = $i0 * 4;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i0);

        $r3 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer renderVertices> = $r4;

        $r4 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer renderVertices>;

        $r4 = virtualinvoke $r4.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r1);

        virtualinvoke $r4.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        return;
    }

    public void setWidth(int)
    {
        int $i0, $i1;
        project.android.imageprocessing.GLRenderer r0;
        boolean $z0;

        r0 := @this: project.android.imageprocessing.GLRenderer;

        $i0 := @parameter0: int;

        $z0 = r0.<project.android.imageprocessing.GLRenderer: boolean customSizeSet>;

        if $z0 != 0 goto label1;

        $i1 = r0.<project.android.imageprocessing.GLRenderer: int width>;

        if $i1 == $i0 goto label1;

        r0.<project.android.imageprocessing.GLRenderer: int width> = $i0;

        r0.<project.android.imageprocessing.GLRenderer: boolean sizeChanged> = 1;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <project.android.imageprocessing.GLRenderer: java.lang.String VARYING_TEXCOORD> = "v_TexCoord";

        <project.android.imageprocessing.GLRenderer: java.lang.String UNIFORM_TEXTUREBASE> = "u_Texture";

        <project.android.imageprocessing.GLRenderer: java.lang.String UNIFORM_TEXTURE0> = "u_Texture0";

        <project.android.imageprocessing.GLRenderer: java.lang.String ATTRIBUTE_TEXCOORD> = "a_TexCoord";

        <project.android.imageprocessing.GLRenderer: java.lang.String ATTRIBUTE_POSITION> = "a_Position";

        return;
    }
}
