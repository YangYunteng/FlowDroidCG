public final class com.google.common.collect.Iterators extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.collect.Iterators r0;

        r0 := @this: com.google.common.collect.Iterators;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean addAll(java.util.Collection, java.util.Iterator)
    {
        java.util.Iterator $r1;
        java.util.Collection $r0;
        java.lang.Object $r2;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = 0;

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        $z0 = $z0 | $z1;

        goto label1;

     label2:
        return $z0;
    }

    public static int advance(java.util.Iterator, int)
    {
        java.util.Iterator $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i1 = 0;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "numberToAdvance must be nonnegative");

     label3:
        if $i1 >= $i0 goto label4;

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return $i1;
    }

    public static boolean all(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator $r1;
        com.google.common.base.Predicate $r0;
        java.lang.Object $r2;
        boolean $z0;

        $r1 := @parameter0: java.util.Iterator;

        $r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r0.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public static boolean any(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator $r0;
        com.google.common.base.Predicate $r1;
        int $i0, $i1;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: com.google.common.base.Predicate;

        $i0 = staticinvoke <com.google.common.collect.Iterators: int indexOf(java.util.Iterator,com.google.common.base.Predicate)>($r0, $r1);

        $i1 = -1;

        if $i0 == $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.util.Enumeration asEnumeration(java.util.Iterator)
    {
        com.google.common.collect.Iterators$11 $r1;
        java.util.Iterator $r0;

        $r0 := @parameter0: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.collect.Iterators$11;

        specialinvoke $r1.<com.google.common.collect.Iterators$11: void <init>(java.util.Iterator)>($r0);

        return $r1;
    }

    public static java.util.ListIterator cast(java.util.Iterator)
    {
        java.util.Iterator $r0;
        java.util.ListIterator $r1;

        $r0 := @parameter0: java.util.Iterator;

        $r1 = (java.util.ListIterator) $r0;

        return $r1;
    }

    public static void checkNonnegative(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position (");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must not be negative");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static void clear(java.util.Iterator)
    {
        java.util.Iterator $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

     label1:
        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    public static java.util.Iterator concat(java.util.Iterator)
    {
        java.util.Iterator $r0;
        com.google.common.collect.Iterators$ConcatenatedIterator $r1;

        $r0 := @parameter0: java.util.Iterator;

        $r1 = new com.google.common.collect.Iterators$ConcatenatedIterator;

        specialinvoke $r1.<com.google.common.collect.Iterators$ConcatenatedIterator: void <init>(java.util.Iterator)>($r0);

        return $r1;
    }

    public static java.util.Iterator concat(java.util.Iterator, java.util.Iterator)
    {
        java.util.Iterator $r0, $r1;
        java.util.Iterator[] $r2;

        $r1 := @parameter0: java.util.Iterator;

        $r0 := @parameter1: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = newarray (java.util.Iterator)[2];

        $r2[0] = $r1;

        $r2[1] = $r0;

        $r1 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator consumingForArray(java.lang.Object[])>($r2);

        $r1 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concat(java.util.Iterator)>($r1);

        return $r1;
    }

    public static java.util.Iterator concat(java.util.Iterator, java.util.Iterator, java.util.Iterator)
    {
        java.util.Iterator $r0, $r1, $r2;
        java.util.Iterator[] $r3;

        $r2 := @parameter0: java.util.Iterator;

        $r0 := @parameter1: java.util.Iterator;

        $r1 := @parameter2: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = newarray (java.util.Iterator)[3];

        $r3[0] = $r2;

        $r3[1] = $r0;

        $r3[2] = $r1;

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator consumingForArray(java.lang.Object[])>($r3);

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concat(java.util.Iterator)>($r2);

        return $r2;
    }

    public static java.util.Iterator concat(java.util.Iterator, java.util.Iterator, java.util.Iterator, java.util.Iterator)
    {
        java.util.Iterator $r0, $r1, $r2, $r3;
        java.util.Iterator[] $r4;

        $r3 := @parameter0: java.util.Iterator;

        $r0 := @parameter1: java.util.Iterator;

        $r1 := @parameter2: java.util.Iterator;

        $r2 := @parameter3: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = newarray (java.util.Iterator)[4];

        $r4[0] = $r3;

        $r4[1] = $r0;

        $r4[2] = $r1;

        $r4[3] = $r2;

        $r3 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator consumingForArray(java.lang.Object[])>($r4);

        $r3 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concat(java.util.Iterator)>($r3);

        return $r3;
    }

    public static transient java.util.Iterator concat(java.util.Iterator[])
    {
        java.lang.Object[] $r1;
        java.util.Iterator $r2;
        java.util.Iterator[] $r0;
        int $i0;

        $r0 := @parameter0: java.util.Iterator[];

        $i0 = lengthof $r0;

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i0);

        $r0 = (java.util.Iterator[]) $r1;

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concatNoDefensiveCopy(java.util.Iterator[])>($r0);

        return $r2;
    }

    public static transient java.util.Iterator concatNoDefensiveCopy(java.util.Iterator[])
    {
        java.util.Iterator $r0;
        java.util.Iterator[] $r1, $r2;
        int $i0, $i1;

        $r1 := @parameter0: java.util.Iterator[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = $r1;

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r0 = $r2[$i1];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r0 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator consumingForArray(java.lang.Object[])>($r1);

        $r0 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concat(java.util.Iterator)>($r0);

        return $r0;
    }

    public static transient java.util.Iterator consumingForArray(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        com.google.common.collect.Iterators$3 $r1;

        $r0 := @parameter0: java.lang.Object[];

        $r1 = new com.google.common.collect.Iterators$3;

        specialinvoke $r1.<com.google.common.collect.Iterators$3: void <init>(java.lang.Object[])>($r0);

        return $r1;
    }

    public static java.util.Iterator consumingIterator(java.util.Iterator)
    {
        com.google.common.collect.Iterators$8 $r1;
        java.util.Iterator $r0;

        $r0 := @parameter0: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.collect.Iterators$8;

        specialinvoke $r1.<com.google.common.collect.Iterators$8: void <init>(java.util.Iterator)>($r0);

        return $r1;
    }

    public static boolean contains(java.util.Iterator, java.lang.Object)
    {
        java.util.Iterator $r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: java.lang.Object;

        if $r1 != null goto label2;

     label1:
        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        if $r1 != null goto label1;

        return 1;

     label2:
        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label3:
        return 0;
    }

    public static java.util.Iterator cycle(java.lang.Iterable)
    {
        com.google.common.collect.Iterators$2 $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.collect.Iterators$2;

        specialinvoke $r1.<com.google.common.collect.Iterators$2: void <init>(java.lang.Iterable)>($r0);

        return $r1;
    }

    public static transient java.util.Iterator cycle(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.util.Iterator $r2;
        java.util.ArrayList $r1;

        $r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r0);

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator cycle(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static boolean elementsEqual(java.util.Iterator, java.util.Iterator)
    {
        java.util.Iterator $r0, $r1;
        java.lang.Object $r2, $r3;
        boolean $z0;

        $r1 := @parameter0: java.util.Iterator;

        $r0 := @parameter1: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label1;

        return 0;

     label3:
        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public static com.google.common.collect.UnmodifiableIterator emptyIterator()
    {
        com.google.common.collect.UnmodifiableListIterator $r0;

        $r0 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableListIterator emptyListIterator()>();

        return $r0;
    }

    public static com.google.common.collect.UnmodifiableListIterator emptyListIterator()
    {
        com.google.common.collect.UnmodifiableListIterator r0;

        r0 = <com.google.common.collect.Iterators$ArrayItr: com.google.common.collect.UnmodifiableListIterator EMPTY>;

        return r0;
    }

    public static java.util.Iterator emptyModifiableIterator()
    {
        com.google.common.collect.Iterators$EmptyModifiableIterator r0;

        r0 = <com.google.common.collect.Iterators$EmptyModifiableIterator: com.google.common.collect.Iterators$EmptyModifiableIterator INSTANCE>;

        return r0;
    }

    public static com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator $r0;
        com.google.common.base.Predicate $r1;
        com.google.common.collect.Iterators$5 $r2;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.Iterators$5;

        specialinvoke $r2.<com.google.common.collect.Iterators$5: void <init>(java.util.Iterator,com.google.common.base.Predicate)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator, java.lang.Class)
    {
        java.util.Iterator $r0;
        com.google.common.base.Predicate $r2;
        java.lang.Class $r1;
        com.google.common.collect.UnmodifiableIterator $r3;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate instanceOf(java.lang.Class)>($r1);

        $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate)>($r0, $r2);

        return $r3;
    }

    public static java.lang.Object find(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator $r1;
        com.google.common.base.Predicate $r0;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        $r1 := @parameter0: java.util.Iterator;

        $r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r0.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return $r2;

     label2:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        goto label3;

     label3:
        throw $r3;
    }

    public static java.lang.Object find(java.util.Iterator, com.google.common.base.Predicate, java.lang.Object)
    {
        java.util.Iterator $r0;
        com.google.common.base.Predicate $r1;
        java.lang.Object $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: com.google.common.base.Predicate;

        $r2 := @parameter2: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

     label1:
        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r1.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return $r3;

     label2:
        return $r2;
    }

    public static transient com.google.common.collect.UnmodifiableIterator forArray(java.lang.Object[])
    {
        int $i0;
        java.lang.Object[] $r1;
        com.google.common.collect.UnmodifiableListIterator $r0;

        $r1 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r1;

        $r0 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableListIterator forArray(java.lang.Object[],int,int,int)>($r1, 0, $i0, 0);

        return $r0;
    }

    public static com.google.common.collect.UnmodifiableListIterator forArray(java.lang.Object[], int, int, int)
    {
        java.lang.Object[] $r1;
        com.google.common.collect.UnmodifiableListIterator $r0;
        int $i0, $i1, $i2, $i3, $i4;
        com.google.common.collect.Iterators$ArrayItr $r2;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i4 = $i0 + $i1;

        $i3 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i4, $i3);

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>($i2, $i1);

        if $i1 != 0 goto label3;

        $r0 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableListIterator emptyListIterator()>();

        return $r0;

     label3:
        $r2 = new com.google.common.collect.Iterators$ArrayItr;

        specialinvoke $r2.<com.google.common.collect.Iterators$ArrayItr: void <init>(java.lang.Object[],int,int,int)>($r1, $i0, $i1, $i2);

        return $r2;
    }

    public static com.google.common.collect.UnmodifiableIterator forEnumeration(java.util.Enumeration)
    {
        com.google.common.collect.Iterators$10 $r1;
        java.util.Enumeration $r0;

        $r0 := @parameter0: java.util.Enumeration;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.collect.Iterators$10;

        specialinvoke $r1.<com.google.common.collect.Iterators$10: void <init>(java.util.Enumeration)>($r0);

        return $r1;
    }

    public static int frequency(java.util.Iterator, java.lang.Object)
    {
        java.util.Iterator $r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: java.lang.Object;

        $i0 = 0;

     label1:
        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>($r0, $r1);

        if $z0 == 0 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i0;
    }

    public static java.lang.Object get(java.util.Iterator, int)
    {
        java.lang.IndexOutOfBoundsException $r2;
        java.util.Iterator $r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.collect.Iterators: void checkNonnegative(int)>($i0);

        $i1 = staticinvoke <com.google.common.collect.Iterators: int advance(java.util.Iterator,int)>($r0, $i0);

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        return $r1;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position (");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be less than the number of elements that remained (");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }

    public static java.lang.Object get(java.util.Iterator, int, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0;
        java.util.Iterator $r1;

        $r1 := @parameter0: java.util.Iterator;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.Object;

        staticinvoke <com.google.common.collect.Iterators: void checkNonnegative(int)>($i0);

        staticinvoke <com.google.common.collect.Iterators: int advance(java.util.Iterator,int)>($r1, $i0);

        $r0 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getNext(java.util.Iterator,java.lang.Object)>($r1, $r0);

        return $r0;
    }

    public static java.lang.Object getLast(java.util.Iterator)
    {
        java.lang.Object $r1;
        java.util.Iterator $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

     label1:
        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r1;
    }

    public static java.lang.Object getLast(java.util.Iterator, java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Iterator $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getLast(java.util.Iterator)>($r0);

     label1:
        return $r1;
    }

    public static java.lang.Object getNext(java.util.Iterator, java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Iterator $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

     label1:
        return $r1;
    }

    public static java.lang.Object getOnlyElement(java.util.Iterator)
    {
        java.util.Iterator $r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r1;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected one element but was: <");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $i0 = 0;

     label2:
        if $i0 >= 4 goto label3;

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ...");

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        goto label5;

     label5:
        throw $r3;
    }

    public static java.lang.Object getOnlyElement(java.util.Iterator, java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.Iterator $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getOnlyElement(java.util.Iterator)>($r0);

     label1:
        return $r1;
    }

    public static int indexOf(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator $r1;
        com.google.common.base.Predicate $r0;
        int $i0;
        java.lang.Object $r2;
        boolean $z0;

        $r1 := @parameter0: java.util.Iterator;

        $r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "predicate");

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r0.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i0 = -1;

        return $i0;
    }

    public static java.util.Iterator limit(java.util.Iterator, int)
    {
        com.google.common.collect.Iterators$7 $r1;
        java.util.Iterator $r0;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "limit is negative");

        $r1 = new com.google.common.collect.Iterators$7;

        specialinvoke $r1.<com.google.common.collect.Iterators$7: void <init>(int,java.util.Iterator)>($i0, $r0);

        return $r1;
    }

    public static com.google.common.collect.UnmodifiableIterator mergeSorted(java.lang.Iterable, java.util.Comparator)
    {
        com.google.common.collect.Iterators$MergingIterator $r2;
        java.util.Comparator $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "iterators");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "comparator");

        $r2 = new com.google.common.collect.Iterators$MergingIterator;

        specialinvoke $r2.<com.google.common.collect.Iterators$MergingIterator: void <init>(java.lang.Iterable,java.util.Comparator)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.collect.UnmodifiableIterator paddedPartition(java.util.Iterator, int)
    {
        int $i0;
        com.google.common.collect.UnmodifiableIterator $r0;
        java.util.Iterator $r1;

        $r1 := @parameter0: java.util.Iterator;

        $i0 := @parameter1: int;

        $r0 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator,int,boolean)>($r1, $i0, 1);

        return $r0;
    }

    public static com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator, int)
    {
        int $i0;
        com.google.common.collect.UnmodifiableIterator $r0;
        java.util.Iterator $r1;

        $r1 := @parameter0: java.util.Iterator;

        $i0 := @parameter1: int;

        $r0 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator,int,boolean)>($r1, $i0, 0);

        return $r0;
    }

    public static com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator, int, boolean)
    {
        java.util.Iterator $r0;
        int $i0;
        com.google.common.collect.Iterators$4 $r1;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.Iterator;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        $r1 = new com.google.common.collect.Iterators$4;

        specialinvoke $r1.<com.google.common.collect.Iterators$4: void <init>(java.util.Iterator,int,boolean)>($r0, $i0, $z0);

        return $r1;
    }

    public static com.google.common.collect.PeekingIterator peekingIterator(com.google.common.collect.PeekingIterator)
    {
        com.google.common.collect.PeekingIterator $r0;

        $r0 := @parameter0: com.google.common.collect.PeekingIterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        return $r0;
    }

    public static com.google.common.collect.PeekingIterator peekingIterator(java.util.Iterator)
    {
        java.util.Iterator $r0;
        com.google.common.collect.Iterators$PeekingImpl $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $z0 = $r0 instanceof com.google.common.collect.Iterators$PeekingImpl;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.collect.Iterators$PeekingImpl) $r0;

        return $r1;

     label1:
        $r1 = new com.google.common.collect.Iterators$PeekingImpl;

        specialinvoke $r1.<com.google.common.collect.Iterators$PeekingImpl: void <init>(java.util.Iterator)>($r0);

        return $r1;
    }

    public static java.lang.Object pollNext(java.util.Iterator)
    {
        java.lang.Object $r1;
        java.util.Iterator $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.Iterator: void remove()>();

        return $r1;

     label1:
        return null;
    }

    public static boolean removeAll(java.util.Iterator, java.util.Collection)
    {
        java.util.Iterator $r0;
        java.util.Collection $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = 0;

     label1:
        $z1 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r2 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        interfaceinvoke $r0.<java.util.Iterator: void remove()>();

        $z0 = 1;

        goto label1;

     label2:
        return $z0;
    }

    public static boolean removeIf(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator $r0;
        com.google.common.base.Predicate $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = 0;

     label1:
        $z1 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r2 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r1.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        interfaceinvoke $r0.<java.util.Iterator: void remove()>();

        $z0 = 1;

        goto label1;

     label2:
        return $z0;
    }

    public static boolean retainAll(java.util.Iterator, java.util.Collection)
    {
        java.util.Iterator $r0;
        java.util.Collection $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = 0;

     label1:
        $z1 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r2 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        interfaceinvoke $r0.<java.util.Iterator: void remove()>();

        $z0 = 1;

        goto label1;

     label2:
        return $z0;
    }

    public static com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)
    {
        java.lang.Object $r0;
        com.google.common.collect.Iterators$9 $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 = new com.google.common.collect.Iterators$9;

        specialinvoke $r1.<com.google.common.collect.Iterators$9: void <init>(java.lang.Object)>($r0);

        return $r1;
    }

    public static int size(java.util.Iterator)
    {
        java.util.Iterator $r0;
        int $i1;
        long $l0;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $l0 = 0L;

     label1:
        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $l0 = $l0 + 1L;

        goto label1;

     label2:
        $i1 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l0);

        return $i1;
    }

    public static java.lang.Object[] toArray(java.util.Iterator, java.lang.Class)
    {
        java.lang.Object[] $r3;
        java.util.Iterator $r1;
        java.lang.Class $r0;
        java.util.ArrayList $r2;

        $r1 := @parameter0: java.util.Iterator;

        $r0 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>($r1);

        $r3 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Class)>($r2, $r0);

        return $r3;
    }

    public static java.lang.String toString(java.util.Iterator)
    {
        java.util.Iterator $r1;
        java.lang.StringBuilder $r0;
        java.lang.Object $r2;
        java.lang.String $r3;
        boolean $z0, $z1;

        $r1 := @parameter0: java.util.Iterator;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $z0 = 1;

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        if $z0 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $z0 = 0;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.util.Iterator transform(java.util.Iterator, com.google.common.base.Function)
    {
        com.google.common.collect.Iterators$6 $r2;
        com.google.common.base.Function $r1;
        java.util.Iterator $r0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: com.google.common.base.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.Iterators$6;

        specialinvoke $r2.<com.google.common.collect.Iterators$6: void <init>(java.util.Iterator,com.google.common.base.Function)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.base.Optional tryFind(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator $r1;
        com.google.common.base.Predicate $r0;
        com.google.common.base.Optional $r3;
        java.lang.Object $r2;
        boolean $z0;

        $r1 := @parameter0: java.util.Iterator;

        $r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r0.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r2);

        return $r3;

     label2:
        $r3 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();

        return $r3;
    }

    public static com.google.common.collect.UnmodifiableIterator unmodifiableIterator(com.google.common.collect.UnmodifiableIterator)
    {
        com.google.common.collect.UnmodifiableIterator $r0;

        $r0 := @parameter0: com.google.common.collect.UnmodifiableIterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        return $r0;
    }

    public static com.google.common.collect.UnmodifiableIterator unmodifiableIterator(java.util.Iterator)
    {
        java.util.Iterator $r0;
        com.google.common.collect.UnmodifiableIterator $r1;
        com.google.common.collect.Iterators$1 $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r0 instanceof com.google.common.collect.UnmodifiableIterator;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.collect.UnmodifiableIterator) $r0;

        return $r1;

     label1:
        $r2 = new com.google.common.collect.Iterators$1;

        specialinvoke $r2.<com.google.common.collect.Iterators$1: void <init>(java.util.Iterator)>($r0);

        return $r2;
    }
}
