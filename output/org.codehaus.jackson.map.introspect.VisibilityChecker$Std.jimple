public class org.codehaus.jackson.map.introspect.VisibilityChecker$Std extends java.lang.Object implements org.codehaus.jackson.map.introspect.VisibilityChecker
{
    public static final org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT;
    public final org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel;
    public final org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel;
    public final org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel;
    public final org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel;
    public final org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel;

    static void <clinit>()
    {
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std $r0;
        org.codehaus.jackson.annotate.JsonAutoDetect $r3;

        $r0 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r2 = class "Lorg/codehaus/jackson/map/introspect/VisibilityChecker$Std;";

        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonAutoDetect;");

        $r3 = (org.codehaus.jackson.annotate.JsonAutoDetect) $r1;

        specialinvoke $r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect)>($r3);

        <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT> = $r0;

        return;
    }

    public void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility, org.codehaus.jackson.annotate.JsonAutoDetect$Visibility, org.codehaus.jackson.annotate.JsonAutoDetect$Visibility, org.codehaus.jackson.annotate.JsonAutoDetect$Visibility, org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1, $r2, $r3, $r4, $r5;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r2 := @parameter1: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r3 := @parameter2: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r4 := @parameter3: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r5 := @parameter4: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel> = $r1;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel> = $r2;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel> = $r3;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel> = $r4;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel> = $r5;

        return;
    }

    public void <init>(org.codehaus.jackson.annotate.JsonAutoDetect)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r4;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        org.codehaus.jackson.annotate.JsonAutoDetect $r1;
        org.codehaus.jackson.annotate.JsonMethod[] $r2;
        org.codehaus.jackson.annotate.JsonMethod $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonMethod[] value()>();

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod GETTER>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label01;

        $r4 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility getterVisibility()>();

        goto label02;

     label01:
        $r4 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label02:
        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel> = $r4;

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod IS_GETTER>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label03;

        $r4 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility isGetterVisibility()>();

        goto label04;

     label03:
        $r4 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label04:
        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel> = $r4;

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod SETTER>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label05;

        $r4 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility setterVisibility()>();

        goto label06;

     label05:
        $r4 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label06:
        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel> = $r4;

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod CREATOR>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label07;

        $r4 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility creatorVisibility()>();

        goto label08;

     label07:
        $r4 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label08:
        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel> = $r4;

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod FIELD>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label09;

        $r4 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility fieldVisibility()>();

        goto label10;

     label09:
        $r4 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label10:
        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel> = $r4;

        return;
    }

    public static org.codehaus.jackson.map.introspect.VisibilityChecker$Std defaultInstance()
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;

        r0 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        return r0;
    }

    public static boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[], org.codehaus.jackson.annotate.JsonMethod)
    {
        int $i0, $i1;
        org.codehaus.jackson.annotate.JsonMethod[] $r3;
        org.codehaus.jackson.annotate.JsonMethod $r0, $r1, $r2;

        $r3 := @parameter0: org.codehaus.jackson.annotate.JsonMethod[];

        $r0 := @parameter1: org.codehaus.jackson.annotate.JsonMethod;

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r1 = $r3[$i1];

        if $r1 == $r0 goto label3;

        $r2 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod ALL>;

        if $r1 != $r2 goto label2;

        goto label3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public boolean isCreatorVisible(java.lang.reflect.Member)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1;
        java.lang.reflect.Member $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r2 := @parameter0: java.lang.reflect.Member;

        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>($r2);

        return $z0;
    }

    public boolean isCreatorVisible(org.codehaus.jackson.map.introspect.AnnotatedMember)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMember $r1;
        java.lang.reflect.Member $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.reflect.Member getMember()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean isCreatorVisible(java.lang.reflect.Member)>($r2);

        return $z0;
    }

    public boolean isFieldVisible(java.lang.reflect.Field)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Field $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r2 := @parameter0: java.lang.reflect.Field;

        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>($r2);

        return $z0;
    }

    public boolean isFieldVisible(org.codehaus.jackson.map.introspect.AnnotatedField)
    {
        org.codehaus.jackson.map.introspect.AnnotatedField $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Field $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedField;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.reflect.Field getAnnotated()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean isFieldVisible(java.lang.reflect.Field)>($r2);

        return $z0;
    }

    public boolean isGetterVisible(java.lang.reflect.Method)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>($r2);

        return $z0;
    }

    public boolean isGetterVisible(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean isGetterVisible(java.lang.reflect.Method)>($r2);

        return $z0;
    }

    public boolean isIsGetterVisible(java.lang.reflect.Method)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>($r2);

        return $z0;
    }

    public boolean isIsGetterVisible(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean isIsGetterVisible(java.lang.reflect.Method)>($r2);

        return $z0;
    }

    public boolean isSetterVisible(java.lang.reflect.Method)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>($r2);

        return $z0;
    }

    public boolean isSetterVisible(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean isSetterVisible(java.lang.reflect.Method)>($r2);

        return $z0;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r3;
        java.lang.StringBuilder $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("[Visibility:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getter: ");

        $r3 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isGetter: ");

        $r3 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", setter: ");

        $r3 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", creator: ");

        $r3 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", field: ");

        $r3 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std 'with'(org.codehaus.jackson.annotate.JsonAutoDetect)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r4;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        org.codehaus.jackson.annotate.JsonAutoDetect $r1;
        org.codehaus.jackson.annotate.JsonMethod[] $r2;
        org.codehaus.jackson.annotate.JsonMethod $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect;

        if $r1 != null goto label01;

        return r0;

     label01:
        $r2 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonMethod[] value()>();

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod GETTER>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label02;

        $r4 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility getterVisibility()>();

        goto label03;

     label02:
        $r4 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label03:
        r0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r4);

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod IS_GETTER>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label04;

        $r4 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility isGetterVisibility()>();

        goto label05;

     label04:
        $r4 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label05:
        r0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withIsGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r4);

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod SETTER>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label06;

        $r4 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility setterVisibility()>();

        goto label07;

     label06:
        $r4 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label07:
        r0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withSetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r4);

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod CREATOR>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label08;

        $r4 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility creatorVisibility()>();

        goto label09;

     label08:
        $r4 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label09:
        r0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withCreatorVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r4);

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod FIELD>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label10;

        $r4 = interfaceinvoke $r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility fieldVisibility()>();

        goto label11;

     label10:
        $r4 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label11:
        r0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withFieldVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r4);

        return r0;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker 'with'(org.codehaus.jackson.annotate.JsonAutoDetect)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        org.codehaus.jackson.annotate.JsonAutoDetect $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std 'with'(org.codehaus.jackson.annotate.JsonAutoDetect)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std withCreatorVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1, $r2, $r3, $r4, $r5;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r6;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r5 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r1 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if $r5 != $r1 goto label1;

        $r6 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        $r5 = $r6.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        if $r1 != $r5 goto label2;

        return r0;

     label2:
        $r6 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        $r2 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        $r3 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        $r4 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        specialinvoke $r6.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r1, $r2, $r3, $r5, $r4);

        return $r6;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker withCreatorVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withCreatorVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std withFieldVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1, $r2, $r3, $r4, $r5;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r6;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r5 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r1 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if $r5 != $r1 goto label1;

        $r6 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        $r5 = $r6.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        if $r1 != $r5 goto label2;

        return r0;

     label2:
        $r6 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        $r2 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        $r3 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        $r4 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        specialinvoke $r6.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r1, $r2, $r3, $r4, $r5);

        return $r6;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker withFieldVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withFieldVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std withGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1, $r2, $r3, $r4, $r5;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r6;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r5 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r1 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if $r5 != $r1 goto label1;

        $r6 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        $r5 = $r6.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        if $r1 != $r5 goto label2;

        return r0;

     label2:
        $r6 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        $r2 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        $r3 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        $r4 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        specialinvoke $r6.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r5, $r1, $r2, $r3, $r4);

        return $r6;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker withGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std withIsGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1, $r2, $r3, $r4, $r5;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r6;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r5 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r1 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if $r5 != $r1 goto label1;

        $r6 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        $r5 = $r6.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        if $r1 != $r5 goto label2;

        return r0;

     label2:
        $r6 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        $r2 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        $r3 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        $r4 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        specialinvoke $r6.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r1, $r5, $r2, $r3, $r4);

        return $r6;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker withIsGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withIsGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std withSetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1, $r2, $r3, $r4, $r5;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r6;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r5 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r1 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if $r5 != $r1 goto label1;

        $r6 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        $r5 = $r6.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        if $r1 != $r5 goto label2;

        return r0;

     label2:
        $r6 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        $r2 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        $r3 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        $r4 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        specialinvoke $r6.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r1, $r2, $r5, $r3, $r4);

        return $r6;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker withSetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withSetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r1);

        return r0;
    }
}
