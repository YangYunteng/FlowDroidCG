public final class org.codehaus.jackson.map.introspect.MemberKey extends java.lang.Object
{
    public static final java.lang.Class[] NO_CLASSES;
    public final java.lang.Class[] _argTypes;
    public final java.lang.String _name;

    static void <clinit>()
    {
        java.lang.Class[] $r0;

        $r0 = newarray (java.lang.Class)[0];

        <org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] NO_CLASSES> = $r0;

        return;
    }

    public void <init>(java.lang.String, java.lang.Class[])
    {
        java.lang.Class[] $r2;
        java.lang.String $r1;
        org.codehaus.jackson.map.introspect.MemberKey r0;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.String _name> = $r1;

        if $r2 != null goto label1;

        $r2 = <org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] NO_CLASSES>;

     label1:
        r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes> = $r2;

        return;
    }

    public void <init>(java.lang.reflect.Constructor)
    {
        java.lang.Class[] $r1;
        java.lang.reflect.Constructor $r2;
        org.codehaus.jackson.map.introspect.MemberKey r0;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        $r2 := @parameter0: java.lang.reflect.Constructor;

        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        specialinvoke r0.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.String,java.lang.Class[])>("", $r1);

        return;
    }

    public void <init>(java.lang.reflect.Method)
    {
        java.lang.Class[] $r3;
        java.lang.String $r2;
        java.lang.reflect.Method $r1;
        org.codehaus.jackson.map.introspect.MemberKey r0;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        specialinvoke r0.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.String,java.lang.Class[])>($r2, $r3);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Class[] $r6, $r7;
        org.codehaus.jackson.map.introspect.MemberKey r0, $r3;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.Class $r2, $r8;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label01;

        return 1;

     label01:
        if $r1 != null goto label02;

        return 0;

     label02:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == class "Lorg/codehaus/jackson/map/introspect/MemberKey;" goto label03;

        return 0;

     label03:
        $r3 = (org.codehaus.jackson.map.introspect.MemberKey) $r1;

        $r4 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.String _name>;

        $r5 = $r3.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.String _name>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label04;

        return 0;

     label04:
        $r6 = $r3.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes>;

        $r7 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes>;

        $i0 = lengthof $r7;

        $i1 = lengthof $r6;

        if $i1 == $i0 goto label05;

        return 0;

     label05:
        $i1 = 0;

     label06:
        if $i1 >= $i0 goto label10;

        $r2 = $r6[$i1];

        $r7 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes>;

        $r8 = $r7[$i1];

        if $r2 != $r8 goto label07;

        goto label09;

     label07:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z0 != 0 goto label09;

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label08;

        goto label09;

     label08:
        return 0;

     label09:
        $i1 = $i1 + 1;

        goto label06;

     label10:
        return 1;
    }

    public int hashCode()
    {
        int $i0, $i1;
        java.lang.Class[] $r2;
        java.lang.String $r1;
        org.codehaus.jackson.map.introspect.MemberKey r0;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        $r1 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.String _name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes>;

        $i1 = lengthof $r2;

        $i0 = $i0 + $i1;

        return $i0;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.Class[] $r3;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        org.codehaus.jackson.map.introspect.MemberKey r0;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r1 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.String _name>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes>;

        $i0 = lengthof $r3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-args)");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
}
