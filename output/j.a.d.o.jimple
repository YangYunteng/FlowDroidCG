public final class j.a.d.o extends java.lang.Object
{
    public static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater a;
    public static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater b;
    public static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater c;
    public volatile int consumerIndex;
    public final java.util.concurrent.atomic.AtomicReferenceArray d;
    public volatile java.lang.Object lastScheduledTask;
    public volatile int producerIndex;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lj/a/d/o;", class "Ljava/lang/Object;", "lastScheduledTask");

        <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a> = $r0;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lj/a/d/o;", "producerIndex");

        <j.a.d.o: java.util.concurrent.atomic.AtomicIntegerFieldUpdater b> = $r1;

        $r1 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lj/a/d/o;", "consumerIndex");

        <j.a.d.o: java.util.concurrent.atomic.AtomicIntegerFieldUpdater c> = $r1;

        return;
    }

    public void <init>()
    {
        j.a.d.o r0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;

        r0 := @this: j.a.d.o;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(128);

        r0.<j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray d> = $r1;

        r0.<j.a.d.o: java.lang.Object lastScheduledTask> = null;

        r0.<j.a.d.o: int producerIndex> = 0;

        r0.<j.a.d.o: int consumerIndex> = 0;

        return;
    }

    public static final java.util.concurrent.atomic.AtomicReferenceArray a(j.a.d.o)
    {
        j.a.d.o $r0;
        java.util.concurrent.atomic.AtomicReferenceArray r1;

        $r0 := @parameter0: j.a.d.o;

        r1 = $r0.<j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray d>;

        return r1;
    }

    public final int a()
    {
        int $i0, $i1;
        j.a.d.o r0;

        r0 := @this: j.a.d.o;

        $i1 = r0.<j.a.d.o: int producerIndex>;

        $i0 = r0.<j.a.d.o: int consumerIndex>;

        $i0 = $i1 - $i0;

        return $i0;
    }

    public final void a(j.a.d.e)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r6;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        j.a.d.e $r1;
        j.a.d.i $r4;
        java.util.concurrent.atomic.AtomicReferenceArray $r5;
        j.a.d.o r0;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: j.a.d.o;

        $r1 := @parameter0: j.a.d.e;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "globalQueue");

        $r2 = <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(r0, null);

        $r4 = (j.a.d.i) $r3;

        if $r4 == null goto label1;

        virtualinvoke r0.<j.a.d.o: void a(j.a.d.e,j.a.d.i)>($r1, $r4);

     label1:
        $i1 = r0.<j.a.d.o: int consumerIndex>;

        $i0 = r0.<j.a.d.o: int producerIndex>;

        $i0 = $i1 - $i0;

        if $i0 != 0 goto label2;

        $r4 = null;

        goto label3;

     label2:
        $i2 = $i1 & 127;

        $r5 = staticinvoke <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray a(j.a.d.o)>(r0);

        $r3 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i2);

        $r4 = (j.a.d.i) $r3;

        if $r4 == null goto label1;

        $r6 = <j.a.d.o: java.util.concurrent.atomic.AtomicIntegerFieldUpdater c>;

        $i0 = $i1 + 1;

        $z0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i1, $i0);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray a(j.a.d.o)>(r0);

        $r3 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i2, null);

        $r4 = (j.a.d.i) $r3;

     label3:
        if $r4 == null goto label4;

        virtualinvoke r0.<j.a.d.o: void a(j.a.d.e,j.a.d.i)>($r1, $r4);

        goto label1;

     label4:
        return;
    }

    public final void a(j.a.d.e, j.a.d.i)
    {
        java.lang.IllegalStateException $r3;
        j.a.d.o r0;
        j.a.d.e $r1;
        j.a.d.i $r2;
        boolean $z0;

        r0 := @this: j.a.d.o;

        $r1 := @parameter0: j.a.d.e;

        $r2 := @parameter1: j.a.d.i;

        $z0 = virtualinvoke $r1.<j.a.b.q: boolean a(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("GlobalQueue could not be closed yet");

        throw $r3;
    }

    public final boolean a(long, j.a.d.o, j.a.d.e)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r5;
        j.a.d.e $r2;
        long $l1, $l2;
        j.a.d.i $r4;
        j.a.d.o r0, $r1;
        byte $b0;
        int $i3;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: j.a.d.o;

        $l1 := @parameter0: long;

        $r1 := @parameter1: j.a.d.o;

        $r2 := @parameter2: j.a.d.e;

        $r3 = $r1.<j.a.d.o: java.lang.Object lastScheduledTask>;

        $r4 = (j.a.d.i) $r3;

        if $r4 == null goto label2;

        $l2 = $r4.<j.a.d.i: long a>;

        $l1 = $l1 - $l2;

        $l2 = <j.a.d.m: long a>;

        $b0 = $l1 cmp $l2;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label1;

        return 0;

     label1:
        $r5 = <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r4, null);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<j.a.d.o: boolean a(j.a.d.i,j.a.d.e)>($r4, $r2);

        return 1;

     label2:
        return 0;
    }

    public final boolean a(j.a.d.i)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r4;
        j.a.d.o r0;
        int $i0;
        java.lang.Object $r3;
        j.a.d.i $r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: j.a.d.o;

        $r1 := @parameter0: j.a.d.i;

        $i0 = virtualinvoke r0.<j.a.d.o: int a()>();

        if $i0 != 127 goto label1;

        return 0;

     label1:
        $i0 = r0.<j.a.d.o: int producerIndex>;

        $i0 = $i0 & 127;

        $r2 = r0.<j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray d>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i0);

        if $r3 == null goto label2;

        return 0;

     label2:
        $r2 = r0.<j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray d>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void lazySet(int,java.lang.Object)>($i0, $r1);

        $r4 = <j.a.d.o: java.util.concurrent.atomic.AtomicIntegerFieldUpdater b>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(java.lang.Object)>(r0);

        return 1;
    }

    public final boolean a(j.a.d.i, j.a.d.e)
    {
        j.a.d.o r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;
        j.a.d.e $r1;
        java.lang.Object $r4;
        j.a.d.i $r2;
        boolean $z0;

        r0 := @this: j.a.d.o;

        $r2 := @parameter0: j.a.d.i;

        $r1 := @parameter1: j.a.d.e;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r2, "task");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "globalQueue");

        $r3 = <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(r0, $r2);

        $r2 = (j.a.d.i) $r4;

        if $r2 == null goto label1;

        $z0 = virtualinvoke r0.<j.a.d.o: boolean b(j.a.d.i,j.a.d.e)>($r2, $r1);

        return $z0;

     label1:
        return 1;
    }

    public final boolean a(j.a.d.o, j.a.d.e)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r8;
        j.a.d.e $r2;
        long $l0, $l2, $l7;
        j.a.d.i $r4, $r7;
        java.util.concurrent.atomic.AtomicReferenceArray $r5;
        j.a.d.n $r3;
        j.a.d.o r0, $r1;
        byte $b1;
        int $i3, $i4, $i5, $i6, $i8, $i9;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: j.a.d.o;

        $r1 := @parameter0: j.a.d.o;

        $r2 := @parameter1: j.a.d.e;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "victim");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r2, "globalQueue");

        $r3 = <j.a.d.m: j.a.d.n g>;

        $l2 = virtualinvoke $r3.<j.a.d.n: long a()>();

        $i3 = virtualinvoke $r1.<j.a.d.o: int a()>();

        if $i3 != 0 goto label01;

        $z0 = virtualinvoke r0.<j.a.d.o: boolean a(long,j.a.d.o,j.a.d.e)>($l2, $r1, $r2);

        return $z0;

     label01:
        $i3 = $i3 / 2;

        $i3 = staticinvoke <i.g.f: int a(int,int)>($i3, 1);

        $i4 = 0;

        $z0 = 0;

     label02:
        if $i4 >= $i3 goto label10;

     label03:
        $i5 = $r1.<j.a.d.o: int consumerIndex>;

        $i6 = $r1.<j.a.d.o: int producerIndex>;

        $i6 = $i5 - $i6;

        $r4 = null;

        if $i6 != 0 goto label04;

        goto label09;

     label04:
        $i6 = $i5 & 127;

        $r5 = staticinvoke <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray a(j.a.d.o)>($r1);

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i6);

        $r7 = (j.a.d.i) $r6;

        if $r7 == null goto label03;

        $l0 = $r7.<j.a.d.i: long a>;

        $l7 = $l2 - $l0;

        $l0 = <j.a.d.m: long a>;

        $b1 = $l7 cmp $l0;

        $i8 = (int) $b1;

        if $i8 >= 0 goto label06;

        $i8 = virtualinvoke $r1.<j.a.d.o: int a()>();

        $i9 = <j.a.d.m: int b>;

        if $i8 <= $i9 goto label05;

        goto label06;

     label05:
        $z1 = 0;

        goto label07;

     label06:
        $z1 = 1;

     label07:
        if $z1 != 0 goto label08;

        goto label09;

     label08:
        $r8 = <j.a.d.o: java.util.concurrent.atomic.AtomicIntegerFieldUpdater c>;

        $i8 = $i5 + 1;

        $z1 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>($r1, $i5, $i8);

        if $z1 == 0 goto label03;

        $r5 = staticinvoke <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray a(j.a.d.o)>($r1);

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i6, null);

        $r4 = (j.a.d.i) $r6;

     label09:
        if $r4 == null goto label10;

        virtualinvoke r0.<j.a.d.o: boolean a(j.a.d.i,j.a.d.e)>($r4, $r2);

        $i4 = $i4 + 1;

        $z0 = 1;

        goto label02;

     label10:
        return $z0;
    }

    public final j.a.d.i b()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r5;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        j.a.d.i $r3;
        java.util.concurrent.atomic.AtomicReferenceArray $r4;
        j.a.d.o r0;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: j.a.d.o;

        $r1 = <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(r0, null);

        $r3 = (j.a.d.i) $r2;

        if $r3 == null goto label1;

        return $r3;

     label1:
        $i1 = r0.<j.a.d.o: int consumerIndex>;

        $i0 = r0.<j.a.d.o: int producerIndex>;

        $i0 = $i1 - $i0;

        if $i0 != 0 goto label2;

        return null;

     label2:
        $i2 = $i1 & 127;

        $r4 = staticinvoke <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray a(j.a.d.o)>(r0);

        $r2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i2);

        $r3 = (j.a.d.i) $r2;

        if $r3 == null goto label1;

        $r5 = <j.a.d.o: java.util.concurrent.atomic.AtomicIntegerFieldUpdater c>;

        $i0 = $i1 + 1;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i1, $i0);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray a(j.a.d.o)>(r0);

        $r2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i2, null);

        $r3 = (j.a.d.i) $r2;

        return $r3;
    }

    public final void b(j.a.d.e)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r5;
        j.a.d.e $r1;
        j.a.d.i $r2;
        java.util.concurrent.atomic.AtomicReferenceArray $r3;
        j.a.d.o r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: j.a.d.o;

        $r1 := @parameter0: j.a.d.e;

        $i1 = virtualinvoke r0.<j.a.d.o: int a()>();

        $i1 = $i1 / 2;

        $i1 = staticinvoke <i.g.f: int a(int,int)>($i1, 1);

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label5;

     label2:
        $i3 = r0.<j.a.d.o: int consumerIndex>;

        $i0 = r0.<j.a.d.o: int producerIndex>;

        $i0 = $i3 - $i0;

        $r2 = null;

        if $i0 != 0 goto label3;

        goto label4;

     label3:
        $i4 = $i3 & 127;

        $r3 = staticinvoke <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray a(j.a.d.o)>(r0);

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i4);

        $r2 = (j.a.d.i) $r4;

        if $r2 == null goto label2;

        $r5 = <j.a.d.o: java.util.concurrent.atomic.AtomicIntegerFieldUpdater c>;

        $i0 = $i3 + 1;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, $i3, $i0);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <j.a.d.o: java.util.concurrent.atomic.AtomicReferenceArray a(j.a.d.o)>(r0);

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>($i4, null);

        $r2 = (j.a.d.i) $r4;

     label4:
        if $r2 == null goto label5;

        virtualinvoke r0.<j.a.d.o: void a(j.a.d.e,j.a.d.i)>($r1, $r2);

        $i2 = $i2 + 1;

        goto label1;

     label5:
        return;
    }

    public final boolean b(j.a.d.i, j.a.d.e)
    {
        j.a.d.o r0;
        j.a.d.e $r2;
        j.a.d.i $r1;
        boolean $z0, $z1;

        r0 := @this: j.a.d.o;

        $r1 := @parameter0: j.a.d.i;

        $r2 := @parameter1: j.a.d.e;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "task");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r2, "globalQueue");

        $z1 = 1;

     label1:
        $z0 = virtualinvoke r0.<j.a.d.o: boolean a(j.a.d.i)>($r1);

        if $z0 != 0 goto label2;

        virtualinvoke r0.<j.a.d.o: void b(j.a.d.e)>($r2);

        $z1 = 0;

        goto label1;

     label2:
        return $z1;
    }

    public final int c()
    {
        int $i0;
        java.lang.Object $r1;
        j.a.d.o r0;

        r0 := @this: j.a.d.o;

        $r1 = r0.<j.a.d.o: java.lang.Object lastScheduledTask>;

        if $r1 == null goto label1;

        $i0 = virtualinvoke r0.<j.a.d.o: int a()>();

        $i0 = $i0 + 1;

        return $i0;

     label1:
        $i0 = virtualinvoke r0.<j.a.d.o: int a()>();

        return $i0;
    }
}
