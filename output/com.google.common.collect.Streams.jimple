public final class com.google.common.collect.Streams extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.collect.Streams r0;

        r0 := @this: com.google.common.collect.Streams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Spliterator a(java.util.Spliterator)
    {
        java.util.Spliterator $r0;

        $r0 := @parameter0: java.util.Spliterator;

        return $r0;
    }

    public static java.util.stream.DoubleStream a(java.util.stream.DoubleStream)
    {
        java.util.stream.DoubleStream $r0;

        $r0 := @parameter0: java.util.stream.DoubleStream;

        return $r0;
    }

    public static java.util.stream.IntStream a(java.util.stream.IntStream)
    {
        java.util.stream.IntStream $r0;

        $r0 := @parameter0: java.util.stream.IntStream;

        return $r0;
    }

    public static java.util.stream.LongStream a(java.util.stream.LongStream)
    {
        java.util.stream.LongStream $r0;

        $r0 := @parameter0: java.util.stream.LongStream;

        return $r0;
    }

    public static void a(java.util.function.BiConsumer, com.google.common.collect.Streams$TemporaryPair)
    {
        com.google.common.collect.Streams$TemporaryPair $r2;
        java.util.function.BiConsumer $r0;
        java.lang.Object $r1, $r3;

        $r0 := @parameter0: java.util.function.BiConsumer;

        $r2 := @parameter1: com.google.common.collect.Streams$TemporaryPair;

        $r1 = $r2.<com.google.common.collect.Streams$TemporaryPair: java.lang.Object a>;

        $r3 = $r2.<com.google.common.collect.Streams$TemporaryPair: java.lang.Object b>;

        interfaceinvoke $r0.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r1, $r3);

        return;
    }

    public static void a(java.util.stream.Stream[])
    {
        java.util.stream.Stream $r1;
        java.util.stream.Stream[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: java.util.stream.Stream[];

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r0[$i1];

        interfaceinvoke $r1.<java.util.stream.Stream: void close()>();

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static transient java.util.stream.DoubleStream concat(java.util.stream.DoubleStream[])
    {
        java.util.stream.Stream $r2;
        c.i.b.c.Eb $r0;
        java.util.stream.DoubleStream[] $r1;
        java.util.stream.DoubleStream $r3;

        $r1 := @parameter0: java.util.stream.DoubleStream[];

        $r2 = staticinvoke <g.a.b.e: java.util.stream.Stream a(java.lang.Object[])>($r1);

        $r0 = <c.i.b.c.Eb: c.i.b.c.Eb a>;

        $r3 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.DoubleStream flatMapToDouble(java.util.function.Function)>($r0);

        return $r3;
    }

    public static transient java.util.stream.IntStream concat(java.util.stream.IntStream[])
    {
        java.util.stream.IntStream $r3;
        java.util.stream.Stream $r2;
        c.i.b.c.Db $r0;
        java.util.stream.IntStream[] $r1;

        $r1 := @parameter0: java.util.stream.IntStream[];

        $r2 = staticinvoke <g.a.b.e: java.util.stream.Stream a(java.lang.Object[])>($r1);

        $r0 = <c.i.b.c.Db: c.i.b.c.Db a>;

        $r3 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.IntStream flatMapToInt(java.util.function.Function)>($r0);

        return $r3;
    }

    public static transient java.util.stream.LongStream concat(java.util.stream.LongStream[])
    {
        java.util.stream.Stream $r2;
        java.util.stream.LongStream $r3;
        java.util.stream.LongStream[] $r1;
        c.i.b.c.Gb $r0;

        $r1 := @parameter0: java.util.stream.LongStream[];

        $r2 = staticinvoke <g.a.b.e: java.util.stream.Stream a(java.lang.Object[])>($r1);

        $r0 = <c.i.b.c.Gb: c.i.b.c.Gb a>;

        $r3 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.LongStream flatMapToLong(java.util.function.Function)>($r0);

        return $r3;
    }

    public static transient java.util.stream.Stream concat(java.util.stream.Stream[])
    {
        long $l3, $l5;
        com.google.common.collect.ImmutableList $r4;
        int $i0, $i1, $i2, $i4;
        c.i.b.c.Cb $r6;
        boolean $z0, $z1;
        java.util.stream.Stream[] $r0;
        java.util.stream.Stream $r2;
        java.util.stream.BaseStream $r7;
        java.util.Spliterator $r3;
        c.i.b.c.Fb $r5;
        com.google.common.collect.ImmutableList$Builder $r1;

        $r0 := @parameter0: java.util.stream.Stream[];

        $r1 = new com.google.common.collect.ImmutableList$Builder;

        $i0 = lengthof $r0;

        specialinvoke $r1.<com.google.common.collect.ImmutableList$Builder: void <init>(int)>($i0);

        $i0 = lengthof $r0;

        $i1 = 0;

        $i2 = 336;

        $l3 = 0L;

        $z0 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r0[$i1];

        $z1 = interfaceinvoke $r2.<java.util.stream.Stream: boolean isParallel()>();

        $z0 = $z0 | $z1;

        $r3 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.Spliterator spliterator()>();

        virtualinvoke $r1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r3);

        $i4 = interfaceinvoke $r3.<java.util.Spliterator: int characteristics()>();

        $i2 = $i2 & $i4;

        $l5 = interfaceinvoke $r3.<java.util.Spliterator: long estimateSize()>();

        $l3 = staticinvoke <com.google.common.math.LongMath: long saturatedAdd(long,long)>($l3, $l5);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        $r3 = virtualinvoke $r4.<com.google.common.collect.ImmutableList: java.util.Spliterator spliterator()>();

        $r5 = <c.i.b.c.Fb: c.i.b.c.Fb a>;

        $r3 = staticinvoke <com.google.common.collect.CollectSpliterators: java.util.Spliterator flatMap(java.util.Spliterator,java.util.function.Function,int,long)>($r3, $r5, $i2, $l3);

        $r2 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r3, $z0);

        $r6 = new c.i.b.c.Cb;

        specialinvoke $r6.<c.i.b.c.Cb: void <init>(java.util.stream.Stream[])>($r0);

        $r7 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r6);

        $r2 = (java.util.stream.Stream) $r7;

        return $r2;
    }

    public static java.util.Optional findLast(java.util.stream.Stream)
    {
        c.i.b.c.Y $r6;
        long $l1;
        com.google.common.collect.Streams$1OptionalState $r0;
        java.util.stream.Stream $r1;
        byte $b0;
        java.util.Optional $r7;
        java.lang.Object $r4;
        java.util.ArrayDeque $r2;
        java.util.Spliterator $r3, $r5;
        boolean $z0;

        $r1 := @parameter0: java.util.stream.Stream;

        $r0 = new com.google.common.collect.Streams$1OptionalState;

        specialinvoke $r0.<com.google.common.collect.Streams$1OptionalState: void <init>()>();

        $r2 = new java.util.ArrayDeque;

        specialinvoke $r2.<java.util.ArrayDeque: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.Spliterator spliterator()>();

        interfaceinvoke $r2.<java.util.Deque: void addLast(java.lang.Object)>($r3);

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Deque: boolean isEmpty()>();

        if $z0 != 0 goto label9;

        $r4 = interfaceinvoke $r2.<java.util.Deque: java.lang.Object removeLast()>();

        $r3 = (java.util.Spliterator) $r4;

        $l1 = interfaceinvoke $r3.<java.util.Spliterator: long getExactSizeIfKnown()>();

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label2;

        goto label1;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Spliterator: boolean hasCharacteristics(int)>(16384);

        if $z0 == 0 goto label6;

     label3:
        $r5 = interfaceinvoke $r3.<java.util.Spliterator: java.util.Spliterator trySplit()>();

        if $r5 == null goto label5;

        $l1 = interfaceinvoke $r5.<java.util.Spliterator: long getExactSizeIfKnown()>();

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label4;

        goto label5;

     label4:
        $l1 = interfaceinvoke $r3.<java.util.Spliterator: long getExactSizeIfKnown()>();

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label3;

        $r3 = $r5;

     label5:
        $r6 = new c.i.b.c.Y;

        specialinvoke $r6.<c.i.b.c.Y: void <init>(com.google.common.collect.Streams$1OptionalState)>($r0);

        interfaceinvoke $r3.<java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>($r6);

        $r4 = virtualinvoke $r0.<com.google.common.collect.Streams$1OptionalState: java.lang.Object get()>();

        $r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r4);

        return $r7;

     label6:
        $r5 = interfaceinvoke $r3.<java.util.Spliterator: java.util.Spliterator trySplit()>();

        if $r5 == null goto label8;

        $l1 = interfaceinvoke $r5.<java.util.Spliterator: long getExactSizeIfKnown()>();

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label7;

        goto label8;

     label7:
        interfaceinvoke $r2.<java.util.Deque: void addLast(java.lang.Object)>($r5);

        interfaceinvoke $r2.<java.util.Deque: void addLast(java.lang.Object)>($r3);

        goto label1;

     label8:
        $r6 = new c.i.b.c.Y;

        specialinvoke $r6.<c.i.b.c.Y: void <init>(com.google.common.collect.Streams$1OptionalState)>($r0);

        interfaceinvoke $r3.<java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>($r6);

        $z0 = $r0.<com.google.common.collect.Streams$1OptionalState: boolean set>;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r0.<com.google.common.collect.Streams$1OptionalState: java.lang.Object get()>();

        $r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r4);

        return $r7;

     label9:
        $r7 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r7;
    }

    public static java.util.OptionalDouble findLast(java.util.stream.DoubleStream)
    {
        java.lang.Double $r4;
        java.util.OptionalDouble $r5;
        java.util.stream.DoubleStream $r0;
        java.util.stream.Stream $r1;
        java.util.Optional $r2;
        java.lang.Object $r3;
        boolean $z0;
        double $d0;

        $r0 := @parameter0: java.util.stream.DoubleStream;

        $r1 = interfaceinvoke $r0.<java.util.stream.DoubleStream: java.util.stream.Stream boxed()>();

        $r2 = staticinvoke <com.google.common.collect.Streams: java.util.Optional findLast(java.util.stream.Stream)>($r1);

        $z0 = virtualinvoke $r2.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<java.util.Optional: java.lang.Object get()>();

        $r4 = (java.lang.Double) $r3;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $r5 = staticinvoke <java.util.OptionalDouble: java.util.OptionalDouble of(double)>($d0);

        return $r5;

     label1:
        $r5 = staticinvoke <java.util.OptionalDouble: java.util.OptionalDouble empty()>();

        return $r5;
    }

    public static java.util.OptionalInt findLast(java.util.stream.IntStream)
    {
        java.util.stream.IntStream $r0;
        java.lang.Integer $r4;
        java.util.OptionalInt $r5;
        java.util.stream.Stream $r1;
        int $i0;
        java.util.Optional $r2;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.stream.IntStream;

        $r1 = interfaceinvoke $r0.<java.util.stream.IntStream: java.util.stream.Stream boxed()>();

        $r2 = staticinvoke <com.google.common.collect.Streams: java.util.Optional findLast(java.util.stream.Stream)>($r1);

        $z0 = virtualinvoke $r2.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<java.util.Optional: java.lang.Object get()>();

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = staticinvoke <java.util.OptionalInt: java.util.OptionalInt of(int)>($i0);

        return $r5;

     label1:
        $r5 = staticinvoke <java.util.OptionalInt: java.util.OptionalInt empty()>();

        return $r5;
    }

    public static java.util.OptionalLong findLast(java.util.stream.LongStream)
    {
        java.util.stream.LongStream $r0;
        long $l0;
        java.util.OptionalLong $r5;
        java.util.stream.Stream $r1;
        java.lang.Long $r4;
        java.util.Optional $r2;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.stream.LongStream;

        $r1 = interfaceinvoke $r0.<java.util.stream.LongStream: java.util.stream.Stream boxed()>();

        $r2 = staticinvoke <com.google.common.collect.Streams: java.util.Optional findLast(java.util.stream.Stream)>($r1);

        $z0 = virtualinvoke $r2.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<java.util.Optional: java.lang.Object get()>();

        $r4 = (java.lang.Long) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $r5 = staticinvoke <java.util.OptionalLong: java.util.OptionalLong of(long)>($l0);

        return $r5;

     label1:
        $r5 = staticinvoke <java.util.OptionalLong: java.util.OptionalLong empty()>();

        return $r5;
    }

    public static void forEachPair(java.util.stream.Stream, java.util.stream.Stream, java.util.function.BiConsumer)
    {
        java.util.Iterator $r3, $r4;
        java.util.stream.Stream $r1, $r2;
        c.i.b.c.ac $r7;
        java.util.function.BiConsumer $r0;
        java.lang.Object $r5, $r6;
        c.i.b.c.Hb $r8;
        boolean $z0;

        $r1 := @parameter0: java.util.stream.Stream;

        $r2 := @parameter1: java.util.stream.Stream;

        $r0 := @parameter2: java.util.function.BiConsumer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = interfaceinvoke $r1.<java.util.stream.Stream: boolean isParallel()>();

        if $z0 != 0 goto label3;

        $z0 = interfaceinvoke $r2.<java.util.stream.Stream: boolean isParallel()>();

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r5, $r6);

        goto label2;

     label3:
        $r7 = <c.i.b.c.ac: c.i.b.c.ac a>;

        $r1 = staticinvoke <com.google.common.collect.Streams: java.util.stream.Stream zip(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiFunction)>($r1, $r2, $r7);

        $r8 = new c.i.b.c.Hb;

        specialinvoke $r8.<c.i.b.c.Hb: void <init>(java.util.function.BiConsumer)>($r0);

        interfaceinvoke $r1.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r8);

     label4:
        return;
    }

    public static java.util.stream.Stream mapWithIndex(java.util.stream.DoubleStream, com.google.common.collect.Streams$DoubleFunctionWithIndex)
    {
        c.i.b.c.Z $r6;
        java.util.Spliterator$OfDouble $r2;
        long $l1;
        java.util.stream.DoubleStream $r0;
        com.google.common.collect.Streams$DoubleFunctionWithIndex $r1;
        java.util.PrimitiveIterator$OfDouble $r3;
        java.util.stream.Stream $r5;
        com.google.common.collect.Streams$5 $r4;
        int $i0;
        java.util.stream.BaseStream $r7;
        com.google.common.collect.Streams$4Splitr $r8;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.stream.DoubleStream;

        $r1 := @parameter1: com.google.common.collect.Streams$DoubleFunctionWithIndex;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r0.<java.util.stream.DoubleStream: boolean isParallel()>();

        $r2 = interfaceinvoke $r0.<java.util.stream.DoubleStream: java.util.Spliterator$OfDouble spliterator()>();

        $z1 = interfaceinvoke $r2.<java.util.Spliterator$OfDouble: boolean hasCharacteristics(int)>(16384);

        if $z1 != 0 goto label1;

        $r3 = staticinvoke <java.util.Spliterators: java.util.PrimitiveIterator$OfDouble iterator(java.util.Spliterator$OfDouble)>($r2);

        $r4 = new com.google.common.collect.Streams$5;

        $l1 = interfaceinvoke $r2.<java.util.Spliterator$OfDouble: long estimateSize()>();

        $i0 = interfaceinvoke $r2.<java.util.Spliterator$OfDouble: int characteristics()>();

        $i0 = $i0 & 80;

        specialinvoke $r4.<com.google.common.collect.Streams$5: void <init>(long,int,java.util.PrimitiveIterator$OfDouble,com.google.common.collect.Streams$DoubleFunctionWithIndex)>($l1, $i0, $r3, $r1);

        $r5 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r4, $z0);

        virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = new c.i.b.c.Z;

        specialinvoke $r6.<c.i.b.c.Z: void <init>(java.util.stream.DoubleStream)>($r0);

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r6);

        $r5 = (java.util.stream.Stream) $r7;

        return $r5;

     label1:
        $r8 = new com.google.common.collect.Streams$4Splitr;

        specialinvoke $r8.<com.google.common.collect.Streams$4Splitr: void <init>(java.util.Spliterator$OfDouble,long,com.google.common.collect.Streams$DoubleFunctionWithIndex)>($r2, 0L, $r1);

        $r5 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r8, $z0);

        virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = new c.i.b.c.Z;

        specialinvoke $r6.<c.i.b.c.Z: void <init>(java.util.stream.DoubleStream)>($r0);

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r6);

        $r5 = (java.util.stream.Stream) $r7;

        return $r5;
    }

    public static java.util.stream.Stream mapWithIndex(java.util.stream.IntStream, com.google.common.collect.Streams$IntFunctionWithIndex)
    {
        java.util.stream.IntStream $r0;
        com.google.common.collect.Streams$2Splitr $r8;
        java.util.PrimitiveIterator$OfInt $r3;
        c.i.b.c.Sa $r6;
        long $l1;
        com.google.common.collect.Streams$IntFunctionWithIndex $r1;
        com.google.common.collect.Streams$3 $r4;
        java.util.Spliterator$OfInt $r2;
        java.util.stream.Stream $r5;
        int $i0;
        java.util.stream.BaseStream $r7;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.stream.IntStream;

        $r1 := @parameter1: com.google.common.collect.Streams$IntFunctionWithIndex;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r0.<java.util.stream.IntStream: boolean isParallel()>();

        $r2 = interfaceinvoke $r0.<java.util.stream.IntStream: java.util.Spliterator$OfInt spliterator()>();

        $z1 = interfaceinvoke $r2.<java.util.Spliterator$OfInt: boolean hasCharacteristics(int)>(16384);

        if $z1 != 0 goto label1;

        $r3 = staticinvoke <java.util.Spliterators: java.util.PrimitiveIterator$OfInt iterator(java.util.Spliterator$OfInt)>($r2);

        $r4 = new com.google.common.collect.Streams$3;

        $l1 = interfaceinvoke $r2.<java.util.Spliterator$OfInt: long estimateSize()>();

        $i0 = interfaceinvoke $r2.<java.util.Spliterator$OfInt: int characteristics()>();

        $i0 = $i0 & 80;

        specialinvoke $r4.<com.google.common.collect.Streams$3: void <init>(long,int,java.util.PrimitiveIterator$OfInt,com.google.common.collect.Streams$IntFunctionWithIndex)>($l1, $i0, $r3, $r1);

        $r5 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r4, $z0);

        virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = new c.i.b.c.Sa;

        specialinvoke $r6.<c.i.b.c.Sa: void <init>(java.util.stream.IntStream)>($r0);

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r6);

        $r5 = (java.util.stream.Stream) $r7;

        return $r5;

     label1:
        $r8 = new com.google.common.collect.Streams$2Splitr;

        specialinvoke $r8.<com.google.common.collect.Streams$2Splitr: void <init>(java.util.Spliterator$OfInt,long,com.google.common.collect.Streams$IntFunctionWithIndex)>($r2, 0L, $r1);

        $r5 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r8, $z0);

        virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = new c.i.b.c.Sa;

        specialinvoke $r6.<c.i.b.c.Sa: void <init>(java.util.stream.IntStream)>($r0);

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r6);

        $r5 = (java.util.stream.Stream) $r7;

        return $r5;
    }

    public static java.util.stream.Stream mapWithIndex(java.util.stream.LongStream, com.google.common.collect.Streams$LongFunctionWithIndex)
    {
        java.util.stream.LongStream $r0;
        c.i.b.c.rc $r6;
        com.google.common.collect.Streams$LongFunctionWithIndex $r1;
        long $l1;
        java.util.stream.Stream $r5;
        java.util.Spliterator$OfLong $r2;
        java.util.PrimitiveIterator$OfLong $r3;
        com.google.common.collect.Streams$4 $r4;
        int $i0;
        java.util.stream.BaseStream $r7;
        com.google.common.collect.Streams$3Splitr $r8;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.stream.LongStream;

        $r1 := @parameter1: com.google.common.collect.Streams$LongFunctionWithIndex;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r0.<java.util.stream.LongStream: boolean isParallel()>();

        $r2 = interfaceinvoke $r0.<java.util.stream.LongStream: java.util.Spliterator$OfLong spliterator()>();

        $z1 = interfaceinvoke $r2.<java.util.Spliterator$OfLong: boolean hasCharacteristics(int)>(16384);

        if $z1 != 0 goto label1;

        $r3 = staticinvoke <java.util.Spliterators: java.util.PrimitiveIterator$OfLong iterator(java.util.Spliterator$OfLong)>($r2);

        $r4 = new com.google.common.collect.Streams$4;

        $l1 = interfaceinvoke $r2.<java.util.Spliterator$OfLong: long estimateSize()>();

        $i0 = interfaceinvoke $r2.<java.util.Spliterator$OfLong: int characteristics()>();

        $i0 = $i0 & 80;

        specialinvoke $r4.<com.google.common.collect.Streams$4: void <init>(long,int,java.util.PrimitiveIterator$OfLong,com.google.common.collect.Streams$LongFunctionWithIndex)>($l1, $i0, $r3, $r1);

        $r5 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r4, $z0);

        virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = new c.i.b.c.rc;

        specialinvoke $r6.<c.i.b.c.rc: void <init>(java.util.stream.LongStream)>($r0);

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r6);

        $r5 = (java.util.stream.Stream) $r7;

        return $r5;

     label1:
        $r8 = new com.google.common.collect.Streams$3Splitr;

        specialinvoke $r8.<com.google.common.collect.Streams$3Splitr: void <init>(java.util.Spliterator$OfLong,long,com.google.common.collect.Streams$LongFunctionWithIndex)>($r2, 0L, $r1);

        $r5 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r8, $z0);

        virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = new c.i.b.c.rc;

        specialinvoke $r6.<c.i.b.c.rc: void <init>(java.util.stream.LongStream)>($r0);

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r6);

        $r5 = (java.util.stream.Stream) $r7;

        return $r5;
    }

    public static java.util.stream.Stream mapWithIndex(java.util.stream.Stream, com.google.common.collect.Streams$FunctionWithIndex)
    {
        com.google.common.collect.Streams$FunctionWithIndex $r1;
        java.util.Iterator $r3;
        long $l1;
        c.i.b.c.Sb $r6;
        com.google.common.collect.Streams$1Splitr $r8;
        com.google.common.collect.Streams$2 $r4;
        java.util.stream.Stream $r0, $r5;
        int $i0;
        java.util.stream.BaseStream $r7;
        java.util.Spliterator $r2;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.stream.Stream;

        $r1 := @parameter1: com.google.common.collect.Streams$FunctionWithIndex;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r0.<java.util.stream.Stream: boolean isParallel()>();

        $r2 = interfaceinvoke $r0.<java.util.stream.Stream: java.util.Spliterator spliterator()>();

        $z1 = interfaceinvoke $r2.<java.util.Spliterator: boolean hasCharacteristics(int)>(16384);

        if $z1 != 0 goto label1;

        $r3 = staticinvoke <java.util.Spliterators: java.util.Iterator iterator(java.util.Spliterator)>($r2);

        $r4 = new com.google.common.collect.Streams$2;

        $l1 = interfaceinvoke $r2.<java.util.Spliterator: long estimateSize()>();

        $i0 = interfaceinvoke $r2.<java.util.Spliterator: int characteristics()>();

        $i0 = $i0 & 80;

        specialinvoke $r4.<com.google.common.collect.Streams$2: void <init>(long,int,java.util.Iterator,com.google.common.collect.Streams$FunctionWithIndex)>($l1, $i0, $r3, $r1);

        $r5 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r4, $z0);

        virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = new c.i.b.c.Sb;

        specialinvoke $r6.<c.i.b.c.Sb: void <init>(java.util.stream.Stream)>($r0);

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r6);

        $r0 = (java.util.stream.Stream) $r7;

        return $r0;

     label1:
        $r8 = new com.google.common.collect.Streams$1Splitr;

        specialinvoke $r8.<com.google.common.collect.Streams$1Splitr: void <init>(java.util.Spliterator,long,com.google.common.collect.Streams$FunctionWithIndex)>($r2, 0L, $r1);

        $r5 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r8, $z0);

        virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = new c.i.b.c.Sb;

        specialinvoke $r6.<c.i.b.c.Sb: void <init>(java.util.stream.Stream)>($r0);

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r6);

        $r0 = (java.util.stream.Stream) $r7;

        return $r0;
    }

    public static java.util.stream.DoubleStream stream(java.util.OptionalDouble)
    {
        java.util.OptionalDouble $r0;
        boolean $z0;
        double $d0;
        java.util.stream.DoubleStream $r1;

        $r0 := @parameter0: java.util.OptionalDouble;

        $z0 = virtualinvoke $r0.<java.util.OptionalDouble: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $d0 = virtualinvoke $r0.<java.util.OptionalDouble: double getAsDouble()>();

        $r1 = staticinvoke <g.a.b.b: java.util.stream.DoubleStream a(double)>($d0);

        return $r1;

     label1:
        $r1 = staticinvoke <g.a.b.b: java.util.stream.DoubleStream a()>();

        return $r1;
    }

    public static java.util.stream.IntStream stream(java.util.OptionalInt)
    {
        java.util.stream.IntStream $r1;
        int $i0;
        java.util.OptionalInt $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.OptionalInt;

        $z0 = virtualinvoke $r0.<java.util.OptionalInt: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r0.<java.util.OptionalInt: int getAsInt()>();

        $r1 = staticinvoke <g.a.b.c: java.util.stream.IntStream a(int)>($i0);

        return $r1;

     label1:
        $r1 = staticinvoke <g.a.b.c: java.util.stream.IntStream a()>();

        return $r1;
    }

    public static java.util.stream.LongStream stream(java.util.OptionalLong)
    {
        java.util.OptionalLong $r0;
        java.util.stream.LongStream $r1;
        long $l0;
        boolean $z0;

        $r0 := @parameter0: java.util.OptionalLong;

        $z0 = virtualinvoke $r0.<java.util.OptionalLong: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $l0 = virtualinvoke $r0.<java.util.OptionalLong: long getAsLong()>();

        $r1 = staticinvoke <g.a.b.d: java.util.stream.LongStream a(long)>($l0);

        return $r1;

     label1:
        $r1 = staticinvoke <g.a.b.d: java.util.stream.LongStream a()>();

        return $r1;
    }

    public static java.util.stream.Stream stream(com.google.common.base.Optional)
    {
        java.util.stream.Stream $r2;
        java.lang.Object[] $r3;
        com.google.common.base.Optional $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: com.google.common.base.Optional;

        $z0 = virtualinvoke $r0.<com.google.common.base.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r0.<com.google.common.base.Optional: java.lang.Object get()>();

        $r2 = staticinvoke <g.a.b.e: java.util.stream.Stream a(java.lang.Object)>($r1);

        return $r2;

     label1:
        $r3 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <g.a.b.e: java.util.stream.Stream a(java.lang.Object[])>($r3);

        return $r2;
    }

    public static java.util.stream.Stream stream(java.lang.Iterable)
    {
        java.util.stream.Stream $r2;
        java.util.Collection $r1;
        java.util.Spliterator $r3;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r1 = (java.util.Collection) $r0;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.stream.Stream stream()>();

        return $r2;

     label1:
        $r3 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Spliterator spliterator()>();

        $r2 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r3, 0);

        return $r2;
    }

    public static java.util.stream.Stream stream(java.util.Collection)
    {
        java.util.stream.Stream $r0;
        java.util.Collection $r1;

        $r1 := @parameter0: java.util.Collection;

        $r0 = interfaceinvoke $r1.<java.util.Collection: java.util.stream.Stream stream()>();

        return $r0;
    }

    public static java.util.stream.Stream stream(java.util.Iterator)
    {
        java.util.stream.Stream $r2;
        java.util.Iterator $r0;
        java.util.Spliterator $r1;

        $r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <java.util.Spliterators: java.util.Spliterator spliteratorUnknownSize(java.util.Iterator,int)>($r0, 0);

        $r2 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r1, 0);

        return $r2;
    }

    public static java.util.stream.Stream stream(java.util.Optional)
    {
        java.util.stream.Stream $r2;
        java.lang.Object[] $r3;
        java.util.Optional $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.Optional;

        $z0 = virtualinvoke $r0.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r0.<java.util.Optional: java.lang.Object get()>();

        $r2 = staticinvoke <g.a.b.e: java.util.stream.Stream a(java.lang.Object)>($r1);

        return $r2;

     label1:
        $r3 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <g.a.b.e: java.util.stream.Stream a(java.lang.Object[])>($r3);

        return $r2;
    }

    public static java.util.stream.Stream zip(java.util.stream.Stream, java.util.stream.Stream, java.util.function.BiFunction)
    {
        java.util.function.BiFunction $r2;
        long $l2, $l3;
        int $i0, $i1;
        boolean $z0;
        java.util.Iterator $r5, $r6;
        c.i.b.c.Sb $r9;
        com.google.common.collect.Streams$1 $r7;
        java.util.stream.Stream $r0, $r1, $r8;
        java.util.stream.BaseStream $r10;
        java.util.Spliterator $r3, $r4;

        $r1 := @parameter0: java.util.stream.Stream;

        $r0 := @parameter1: java.util.stream.Stream;

        $r2 := @parameter2: java.util.function.BiFunction;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $z0 = interfaceinvoke $r1.<java.util.stream.Stream: boolean isParallel()>();

        if $z0 != 0 goto label2;

        $z0 = interfaceinvoke $r0.<java.util.stream.Stream: boolean isParallel()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.Spliterator spliterator()>();

        $r4 = interfaceinvoke $r0.<java.util.stream.Stream: java.util.Spliterator spliterator()>();

        $i0 = interfaceinvoke $r3.<java.util.Spliterator: int characteristics()>();

        $i1 = interfaceinvoke $r4.<java.util.Spliterator: int characteristics()>();

        $i0 = $i0 & $i1;

        $i0 = $i0 & 80;

        $r5 = staticinvoke <java.util.Spliterators: java.util.Iterator iterator(java.util.Spliterator)>($r3);

        $r6 = staticinvoke <java.util.Spliterators: java.util.Iterator iterator(java.util.Spliterator)>($r4);

        $r7 = new com.google.common.collect.Streams$1;

        $l2 = interfaceinvoke $r3.<java.util.Spliterator: long estimateSize()>();

        $l3 = interfaceinvoke $r4.<java.util.Spliterator: long estimateSize()>();

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l3);

        specialinvoke $r7.<com.google.common.collect.Streams$1: void <init>(long,int,java.util.Iterator,java.util.Iterator,java.util.function.BiFunction)>($l2, $i0, $r5, $r6, $r2);

        $r8 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r7, $z0);

        virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = new c.i.b.c.Sb;

        specialinvoke $r9.<c.i.b.c.Sb: void <init>(java.util.stream.Stream)>($r1);

        $r10 = interfaceinvoke $r8.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r9);

        $r1 = (java.util.stream.Stream) $r10;

        virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = new c.i.b.c.Sb;

        specialinvoke $r9.<c.i.b.c.Sb: void <init>(java.util.stream.Stream)>($r0);

        $r10 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>($r9);

        $r1 = (java.util.stream.Stream) $r10;

        return $r1;
    }
}
