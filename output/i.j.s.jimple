public class i.j.s extends i.j.p
{

    public static final int a(java.lang.CharSequence, char, int, boolean)
    {
        java.lang.CharSequence $r0;
        char $c0;
        int $i1, $i2;
        char[] $r2;
        java.lang.String $r1;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$indexOf");

        if $z0 != 0 goto label2;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r1 = (java.lang.String) $r0;

        $i2 = (int) $c0;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>($i2, $i1);

        return $i1;

     label2:
        $r2 = newarray (char)[1];

        $r2[0] = $c0;

        $i1 = staticinvoke <i.j.s: int a(java.lang.CharSequence,char[],int,boolean)>($r0, $r2, $i1, $z0);

        return $i1;
    }

    public static int a(java.lang.CharSequence, char, int, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r0;
        int $i1, $i2, $i3;
        char $c0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i2 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i1 = 0;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $z0 = 0;

     label2:
        $i1 = staticinvoke <i.j.s: int a(java.lang.CharSequence,char,int,boolean)>($r0, $c0, $i1, $z0);

        return $i1;
    }

    public static final int a(java.lang.CharSequence, java.lang.CharSequence, int, int, boolean, boolean)
    {
        java.lang.CharSequence $r0, $r1;
        i.g.d $r5;
        i.g.b $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, $r4;
        boolean $z0, $z1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $z1 := @parameter5: boolean;

        if $z1 != 0 goto label01;

        $i0 = staticinvoke <i.g.f: int a(int,int)>($i0, 0);

        $r5 = new i.g.d;

        $r2 = $r5;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <i.g.f: int b(int,int)>($i1, $i2);

        specialinvoke $r5.<i.g.d: void <init>(int,int)>($i0, $i1);

        goto label02;

     label01:
        $i2 = staticinvoke <i.j.s: int c(java.lang.CharSequence)>($r1);

        $i0 = staticinvoke <i.g.f: int b(int,int)>($i0, $i2);

        $i1 = staticinvoke <i.g.f: int a(int,int)>($i1, 0);

        $r2 = staticinvoke <i.g.f: i.g.b c(int,int)>($i0, $i1);

     label02:
        $z1 = $r1 instanceof java.lang.String;

        if $z1 == 0 goto label06;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 == 0 goto label06;

        $i3 = virtualinvoke $r2.<i.g.b: int getFirst()>();

        $i0 = $i3;

        $i1 = virtualinvoke $r2.<i.g.b: int getLast()>();

        $i2 = virtualinvoke $r2.<i.g.b: int a()>();

        if $i2 < 0 goto label03;

        if $i3 > $i1 goto label10;

        goto label04;

     label03:
        if $i3 < $i1 goto label10;

     label04:
        $r3 = (java.lang.String) $r0;

        $r4 = (java.lang.String) $r1;

        $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $z1 = staticinvoke <i.j.p: boolean a(java.lang.String,int,java.lang.String,int,int,boolean)>($r3, 0, $r4, $i0, $i3, $z0);

        if $z1 == 0 goto label05;

        return $i0;

     label05:
        if $i0 == $i1 goto label10;

        $i0 = $i0 + $i2;

        goto label04;

     label06:
        $i3 = virtualinvoke $r2.<i.g.b: int getFirst()>();

        $i0 = $i3;

        $i1 = virtualinvoke $r2.<i.g.b: int getLast()>();

        $i2 = virtualinvoke $r2.<i.g.b: int a()>();

        if $i2 < 0 goto label07;

        if $i3 > $i1 goto label10;

        goto label08;

     label07:
        if $i3 < $i1 goto label10;

     label08:
        $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $z1 = staticinvoke <i.j.s: boolean a(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>($r0, 0, $r1, $i0, $i3, $z0);

        if $z1 == 0 goto label09;

        return $i0;

     label09:
        if $i0 == $i1 goto label10;

        $i0 = $i0 + $i2;

        goto label08;

     label10:
        $i0 = -1;

        return $i0;
    }

    public static int a(java.lang.CharSequence, java.lang.CharSequence, int, int, boolean, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r0, $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r1;
        boolean $z0, $z1;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $z1 := @parameter5: boolean;

        $i2 := @parameter6: int;

        $r1 := @parameter7: java.lang.Object;

        $i2 = $i2 & 16;

        if $i2 == 0 goto label1;

        $z1 = 0;

        goto label1;

     label1:
        $i0 = staticinvoke <i.j.s: int a(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)>($r2, $r0, $i0, $i1, $z0, $z1);

        return $i0;
    }

    public static final int a(java.lang.CharSequence, java.lang.String, int, boolean)
    {
        java.lang.CharSequence $r1;
        int $i0, $i1;
        java.lang.String $r0, $r2;
        boolean $z0, $z1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "$this$indexOf");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "string");

        if $z0 != 0 goto label2;

        $z1 = $r1 instanceof java.lang.String;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r2 = (java.lang.String) $r1;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>($r0, $i0);

        return $i0;

     label2:
        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = staticinvoke <i.j.s: int a(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object)>($r1, $r0, $i0, $i1, $z0, 0, 16, null);

        return $i0;
    }

    public static int a(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        java.lang.String $r0;
        boolean $z0;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $i0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        $i0 = staticinvoke <i.j.s: int a(java.lang.CharSequence,java.lang.String,int,boolean)>($r1, $r0, $i0, $z0);

        return $i0;
    }

    public static final int a(java.lang.CharSequence, char[], int, boolean)
    {
        java.lang.CharSequence $r0;
        char $c3, $c5;
        int $i0, $i1, $i2, $i4;
        char[] $r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: char[];

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$indexOfAny");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "chars");

        if $z0 != 0 goto label1;

        $i2 = lengthof $r1;

        if $i2 != 1 goto label1;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $c3 = staticinvoke <i.a.e: char a(char[])>($r1);

        $r2 = (java.lang.String) $r0;

        $i2 = (int) $c3;

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>($i2, $i1);

        return $i1;

     label1:
        $i0 = staticinvoke <i.g.f: int a(int,int)>($i1, 0);

        $i1 = $i0;

        $i2 = staticinvoke <i.j.s: int c(java.lang.CharSequence)>($r0);

        if $i0 > $i2 goto label8;

     label2:
        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $i0 = lengthof $r1;

        $i4 = 0;

     label3:
        if $i4 >= $i0 goto label5;

        $c5 = $r1[$i4];

        $z1 = staticinvoke <i.j.b: boolean a(char,char,boolean)>($c5, $c3, $z0);

        if $z1 == 0 goto label4;

        $z1 = 1;

        goto label6;

     label4:
        $i4 = $i4 + 1;

        goto label3;

     label5:
        $z1 = 0;

     label6:
        if $z1 == 0 goto label7;

        return $i1;

     label7:
        if $i1 == $i2 goto label8;

        $i1 = $i1 + 1;

        goto label2;

     label8:
        $i1 = -1;

        return $i1;
    }

    public static final i.f a(java.lang.CharSequence, java.util.Collection, int, boolean, boolean)
    {
        i.f $r1;
        java.lang.CharSequence $r2;
        java.util.Collection $r0;
        int $i0;
        boolean $z0, $z1;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $r1 = staticinvoke <i.j.s: i.f b(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)>($r2, $r0, $i0, $z0, $z1);

        return $r1;
    }

    public static final i.i.b a(java.lang.CharSequence, java.lang.String[], int, boolean, int)
    {
        i.j.e $r4;
        java.lang.CharSequence $r1;
        java.lang.String[] $r2;
        java.lang.IllegalArgumentException $r7;
        java.util.List $r3;
        i.j.q $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        boolean $z0, $z1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: java.lang.String[];

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        if $i1 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label3;

        $r3 = staticinvoke <i.a.d: java.util.List a(java.lang.Object[])>($r2);

        $r4 = new i.j.e;

        $r0 = new i.j.q;

        specialinvoke $r0.<i.j.q: void <init>(java.util.List,boolean)>($r3, $z0);

        specialinvoke $r4.<i.j.e: void <init>(java.lang.CharSequence,int,int,i.f.a.p)>($r1, $i0, $i1, $r0);

        return $r4;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit must be non-negative, but was ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r7;
    }

    public static i.i.b a(java.lang.CharSequence, java.lang.String[], int, boolean, int, int, java.lang.Object)
    {
        java.lang.CharSequence $r2;
        i.i.b $r1;
        java.lang.String[] $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;
        boolean $z0;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String[];

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $r3 := @parameter6: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i3 = $i2 & 4;

        if $i3 == 0 goto label2;

        $z0 = 0;

     label2:
        $i2 = $i2 & 8;

        if $i2 == 0 goto label3;

        $i1 = 0;

     label3:
        $r1 = staticinvoke <i.j.s: i.i.b a(java.lang.CharSequence,java.lang.String[],int,boolean,int)>($r2, $r0, $i0, $z0, $i1);

        return $r1;
    }

    public static final java.lang.String a(java.lang.CharSequence, i.g.d)
    {
        java.lang.CharSequence $r0;
        i.g.d $r1;
        int $i0, $i1;
        java.lang.String $r3;
        java.lang.Integer $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: i.g.d;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$substring");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "range");

        $r2 = virtualinvoke $r1.<i.g.d: java.lang.Integer d()>();

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r2 = virtualinvoke $r1.<i.g.d: java.lang.Integer c()>();

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public static final java.lang.String a(java.lang.String, char, java.lang.String)
    {
        int $i1, $i2;
        char $c0;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r1 := @parameter2: java.lang.String;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$substringAfterLast");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "missingDelimiterValue");

        $i1 = staticinvoke <i.j.s: int b(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r0, $c0, 0, 0, 6, null);

        $i2 = -1;

        if $i1 != $i2 goto label1;

        return $r1;

     label1:
        $i1 = $i1 + 1;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        staticinvoke <i.f.b.i: void a(java.lang.Object,java.lang.String)>($r0, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    public static java.lang.String a(java.lang.String, char, java.lang.String, int, java.lang.Object)
    {
        int $i1;
        char $c0;
        java.lang.Object $r0;
        java.lang.String $r1, $r2;

        $r1 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $r2 = $r1;

     label1:
        $r1 = staticinvoke <i.j.s: java.lang.String a(java.lang.String,char,java.lang.String)>($r1, $c0, $r2);

        return $r1;
    }

    public static java.lang.String a(java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        java.lang.String $r0, $r2, $r3;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = $r2;

     label1:
        $r2 = staticinvoke <i.j.s: java.lang.String b(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r3);

        return $r2;
    }

    public static final java.util.List a(java.lang.CharSequence, java.lang.String, boolean, int)
    {
        java.util.ArrayList $r0, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r2, $r4;
        boolean $z0, $z1;
        java.lang.CharSequence $r1, $r3;
        java.lang.IllegalArgumentException $r9;
        java.util.List $r5;
        java.lang.StringBuilder $r6, $r8;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 = 0;

        if $i0 < 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label11;

        $i2 = staticinvoke <i.j.s: int a(java.lang.CharSequence,java.lang.String,int,boolean)>($r1, $r2, 0, $z0);

        $i3 = $i2;

        $i4 = -1;

        if $i2 == $i4 goto label10;

        if $i0 != 1 goto label03;

        goto label10;

     label03:
        if $i0 <= 0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        $r7 = new java.util.ArrayList;

        $r0 = $r7;

        $i2 = 10;

        if $z1 == 0 goto label06;

        $i2 = staticinvoke <i.g.f: int b(int,int)>($i0, 10);

     label06:
        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i2);

     label07:
        $r3 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i3);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i1 + $i3;

        if $z1 == 0 goto label08;

        $i3 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $i2 = -1;

        $i2 = $i0 + $i2;

        if $i3 != $i2 goto label08;

        goto label09;

     label08:
        $i2 = staticinvoke <i.j.s: int a(java.lang.CharSequence,java.lang.String,int,boolean)>($r1, $r2, $i1, $z0);

        $i3 = $i2;

        $i4 = -1;

        if $i2 != $i4 goto label07;

     label09:
        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return $r0;

     label10:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <i.a.g: java.util.List a(java.lang.Object)>($r2);

        return $r5;

     label11:
        $r8 = new java.lang.StringBuilder;

        $r6 = $r8;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit must be non-negative, but was ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        goto label12;

     label12:
        throw $r9;
    }

    public static final java.util.List a(java.lang.CharSequence, java.lang.String[], boolean, int)
    {
        java.lang.CharSequence $r0;
        java.util.Iterator $r7;
        i.i.b $r4;
        i.g.d $r9;
        java.lang.String[] $r1;
        java.lang.Iterable $r5;
        java.util.ArrayList $r6;
        java.util.List $r3;
        int $i0, $i1;
        java.lang.Object $r8;
        java.lang.String $r2;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$split");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "delimiters");

        $i1 = lengthof $r1;

        if $i1 != 1 goto label2;

        $z1 = 0;

        $r2 = $r1[0];

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i1 != 0 goto label1;

        $z1 = 1;

     label1:
        if $z1 != 0 goto label2;

        $r3 = staticinvoke <i.j.s: java.util.List a(java.lang.CharSequence,java.lang.String,boolean,int)>($r0, $r2, $z0, $i0);

        return $r3;

     label2:
        $r4 = staticinvoke <i.j.s: i.i.b a(java.lang.CharSequence,java.lang.String[],int,boolean,int,int,java.lang.Object)>($r0, $r1, 0, $z0, $i0, 2, null);

        $r5 = staticinvoke <i.i.i: java.lang.Iterable b(i.i.b)>($r4);

        $r6 = new java.util.ArrayList;

        $i0 = staticinvoke <i.a.i: int a(java.lang.Iterable,int)>($r5, 10);

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        $r7 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (i.g.d) $r8;

        $r2 = staticinvoke <i.j.s: java.lang.String a(java.lang.CharSequence,i.g.d)>($r0, $r9);

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        goto label3;

     label4:
        return $r6;
    }

    public static java.util.List a(java.lang.CharSequence, java.lang.String[], boolean, int, int, java.lang.Object)
    {
        java.lang.CharSequence $r2;
        java.lang.String[] $r0;
        java.util.List $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        boolean $z0;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $z0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $i0 = 0;

     label2:
        $r1 = staticinvoke <i.j.s: java.util.List a(java.lang.CharSequence,java.lang.String[],boolean,int)>($r2, $r0, $z0, $i0);

        return $r1;
    }

    public static final boolean a(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean)
    {
        java.lang.CharSequence $r0, $r1;
        char $c5, $c6;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.CharSequence;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $z0 := @parameter5: boolean;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "$this$regionMatchesImpl");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "other");

        if $i1 < 0 goto label5;

        if $i0 < 0 goto label5;

        $i3 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i3 = $i3 - $i2;

        if $i0 > $i3 goto label5;

        $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i3 = $i3 - $i2;

        if $i1 <= $i3 goto label1;

        return 0;

     label1:
        $i3 = 0;

     label2:
        if $i3 >= $i2 goto label4;

        $i4 = $i0 + $i3;

        $c5 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i4);

        $i4 = $i1 + $i3;

        $c6 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i4);

        $z1 = staticinvoke <i.j.b: boolean a(char,char,boolean)>($c5, $c6, $z0);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i3 = $i3 + 1;

        goto label2;

     label4:
        return 1;

     label5:
        return 0;
    }

    public static final int b(java.lang.CharSequence, char, int, boolean)
    {
        java.lang.CharSequence $r0;
        char $c0;
        int $i1, $i2;
        char[] $r2;
        java.lang.String $r1;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$lastIndexOf");

        if $z0 != 0 goto label2;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r1 = (java.lang.String) $r0;

        $i2 = (int) $c0;

        $i1 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int,int)>($i2, $i1);

        return $i1;

     label2:
        $r2 = newarray (char)[1];

        $r2[0] = $c0;

        $i1 = staticinvoke <i.j.s: int b(java.lang.CharSequence,char[],int,boolean)>($r0, $r2, $i1, $z0);

        return $i1;
    }

    public static int b(java.lang.CharSequence, char, int, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r0;
        int $i1, $i2, $i3;
        char $c0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i2 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i1 = staticinvoke <i.j.s: int c(java.lang.CharSequence)>($r0);

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $z0 = 0;

     label2:
        $i1 = staticinvoke <i.j.s: int b(java.lang.CharSequence,char,int,boolean)>($r0, $c0, $i1, $z0);

        return $i1;
    }

    public static final int b(java.lang.CharSequence, java.lang.String, int, boolean)
    {
        java.lang.CharSequence $r1;
        int $i0;
        java.lang.String $r0, $r2;
        boolean $z0, $z1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "$this$lastIndexOf");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "string");

        if $z0 != 0 goto label2;

        $z1 = $r1 instanceof java.lang.String;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r2 = (java.lang.String) $r1;

        $i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(java.lang.String,int)>($r0, $i0);

        return $i0;

     label2:
        $i0 = staticinvoke <i.j.s: int a(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)>($r1, $r0, $i0, 0, $z0, 1);

        return $i0;
    }

    public static int b(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        java.lang.String $r0;
        boolean $z0;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $i0 = staticinvoke <i.j.s: int c(java.lang.CharSequence)>($r1);

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        $i0 = staticinvoke <i.j.s: int b(java.lang.CharSequence,java.lang.String,int,boolean)>($r1, $r0, $i0, $z0);

        return $i0;
    }

    public static final int b(java.lang.CharSequence, char[], int, boolean)
    {
        java.lang.CharSequence $r0;
        char $c2, $c4;
        int $i0, $i1, $i3;
        char[] $r1;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: char[];

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$lastIndexOfAny");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "chars");

        if $z0 != 0 goto label1;

        $i0 = lengthof $r1;

        if $i0 != 1 goto label1;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $c2 = staticinvoke <i.a.e: char a(char[])>($r1);

        $r2 = (java.lang.String) $r0;

        $i0 = (int) $c2;

        $i1 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int,int)>($i0, $i1);

        return $i1;

     label1:
        $i0 = staticinvoke <i.j.s: int c(java.lang.CharSequence)>($r0);

        $i1 = staticinvoke <i.g.f: int b(int,int)>($i1, $i0);

     label2:
        if $i1 < 0 goto label7;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $i0 = lengthof $r1;

        $z1 = 0;

        $i3 = 0;

     label3:
        if $i3 >= $i0 goto label5;

        $c4 = $r1[$i3];

        $z2 = staticinvoke <i.j.b: boolean a(char,char,boolean)>($c4, $c2, $z0);

        if $z2 == 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $i3 = $i3 + 1;

        goto label3;

     label5:
        if $z1 == 0 goto label6;

        return $i1;

     label6:
        $i0 = -1;

        $i1 = $i1 + $i0;

        goto label2;

     label7:
        $i1 = -1;

        return $i1;
    }

    public static final i.f b(java.lang.CharSequence, java.util.Collection, int, boolean, boolean)
    {
        i.g.d $r10;
        i.g.b $r6;
        java.lang.Integer $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, $r9;
        boolean $z0, $z1;
        i.f $r5;
        java.lang.CharSequence $r0;
        java.util.Iterator $r7;
        java.util.Collection $r1;
        java.lang.Object $r2, $r8;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        if $z0 != 0 goto label04;

        $i1 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        if $i1 != 1 goto label04;

        $r2 = staticinvoke <i.a.p: java.lang.Object b(java.lang.Iterable)>($r1);

        $r3 = (java.lang.String) $r2;

        if $z1 != 0 goto label01;

        $i0 = staticinvoke <i.j.s: int a(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r0, $r3, $i0, 0, 4, null);

        goto label02;

     label01:
        $i0 = staticinvoke <i.j.s: int b(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r0, $r3, $i0, 0, 4, null);

     label02:
        if $i0 >= 0 goto label03;

        return null;

     label03:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <i.j: i.f a(java.lang.Object,java.lang.Object)>($r4, $r3);

        return $r5;

     label04:
        if $z1 != 0 goto label05;

        $i0 = staticinvoke <i.g.f: int a(int,int)>($i0, 0);

        $r10 = new i.g.d;

        $r6 = $r10;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        specialinvoke $r10.<i.g.d: void <init>(int,int)>($i0, $i1);

        goto label06;

     label05:
        $i1 = staticinvoke <i.j.s: int c(java.lang.CharSequence)>($r0);

        $i0 = staticinvoke <i.g.f: int b(int,int)>($i0, $i1);

        $r6 = staticinvoke <i.g.f: i.g.b c(int,int)>($i0, 0);

     label06:
        $z1 = $r0 instanceof java.lang.String;

        if $z1 == 0 goto label13;

        $i2 = virtualinvoke $r6.<i.g.b: int getFirst()>();

        $i0 = $i2;

        $i1 = virtualinvoke $r6.<i.g.b: int getLast()>();

        $i3 = virtualinvoke $r6.<i.g.b: int a()>();

        if $i3 < 0 goto label07;

        if $i2 > $i1 goto label20;

        goto label08;

     label07:
        if $i2 < $i1 goto label20;

     label08:
        $r7 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r2 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = $r2;

        $r3 = (java.lang.String) $r2;

        $r9 = (java.lang.String) $r0;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $z1 = staticinvoke <i.j.p: boolean a(java.lang.String,int,java.lang.String,int,int,boolean)>($r3, 0, $r9, $i0, $i2, $z0);

        if $z1 == 0 goto label09;

        goto label11;

     label10:
        $r8 = null;

     label11:
        $r3 = (java.lang.String) $r8;

        if $r3 == null goto label12;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <i.j: i.f a(java.lang.Object,java.lang.Object)>($r4, $r3);

        return $r5;

     label12:
        if $i0 == $i1 goto label20;

        $i0 = $i0 + $i3;

        goto label08;

     label13:
        $i2 = virtualinvoke $r6.<i.g.b: int getFirst()>();

        $i0 = $i2;

        $i1 = virtualinvoke $r6.<i.g.b: int getLast()>();

        $i3 = virtualinvoke $r6.<i.g.b: int a()>();

        if $i3 < 0 goto label14;

        if $i2 > $i1 goto label20;

        goto label15;

     label14:
        if $i2 < $i1 goto label20;

     label15:
        $r7 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label16:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $r2 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = $r2;

        $r3 = (java.lang.String) $r2;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $z1 = staticinvoke <i.j.s: boolean a(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>($r3, 0, $r0, $i0, $i2, $z0);

        if $z1 == 0 goto label16;

        goto label18;

     label17:
        $r8 = null;

     label18:
        $r3 = (java.lang.String) $r8;

        if $r3 == null goto label19;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <i.j: i.f a(java.lang.Object,java.lang.Object)>($r4, $r3);

        return $r5;

     label19:
        if $i0 == $i1 goto label20;

        $i0 = $i0 + $i3;

        goto label15;

     label20:
        return null;
    }

    public static final i.g.d b(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        i.g.d $r1;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$indices");

        $r1 = new i.g.d;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        specialinvoke $r1.<i.g.d: void <init>(int,int)>(0, $i0);

        return $r1;
    }

    public static final i.i.b b(java.lang.CharSequence, java.lang.String[], boolean, int)
    {
        java.lang.CharSequence $r0;
        i.i.b $r2;
        i.j.r $r3;
        int $i0;
        java.lang.String[] $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$splitToSequence");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "delimiters");

        $r2 = staticinvoke <i.j.s: i.i.b a(java.lang.CharSequence,java.lang.String[],int,boolean,int,int,java.lang.Object)>($r0, $r1, 0, $z0, $i0, 2, null);

        $r3 = new i.j.r;

        specialinvoke $r3.<i.j.r: void <init>(java.lang.CharSequence)>($r0);

        $r2 = staticinvoke <i.i.i: i.i.b a(i.i.b,i.f.a.l)>($r2, $r3);

        return $r2;
    }

    public static i.i.b b(java.lang.CharSequence, java.lang.String[], boolean, int, int, java.lang.Object)
    {
        java.lang.CharSequence $r2;
        i.i.b $r1;
        java.lang.String[] $r0;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        boolean $z0;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $z0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $i0 = 0;

     label2:
        $r1 = staticinvoke <i.j.s: i.i.b b(java.lang.CharSequence,java.lang.String[],boolean,int)>($r2, $r0, $z0, $i0);

        return $r1;
    }

    public static final java.lang.String b(java.lang.String, char, java.lang.String)
    {
        int $i1, $i2;
        char $c0;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r1 := @parameter2: java.lang.String;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$substringBefore");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "missingDelimiterValue");

        $i1 = staticinvoke <i.j.s: int a(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r0, $c0, 0, 0, 6, null);

        $i2 = -1;

        if $i1 != $i2 goto label1;

        return $r1;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        staticinvoke <i.f.b.i: void a(java.lang.Object,java.lang.String)>($r0, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    public static java.lang.String b(java.lang.String, char, java.lang.String, int, java.lang.Object)
    {
        int $i1;
        char $c0;
        java.lang.Object $r0;
        java.lang.String $r1, $r2;

        $r1 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $r2 = $r1;

     label1:
        $r1 = staticinvoke <i.j.s: java.lang.String b(java.lang.String,char,java.lang.String)>($r1, $c0, $r2);

        return $r1;
    }

    public static final java.lang.String b(java.lang.String, java.lang.String, java.lang.String)
    {
        int $i0, $i1;
        java.lang.String $r0, $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$substringAfter");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "delimiter");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r2, "missingDelimiterValue");

        $i0 = staticinvoke <i.j.s: int a(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r0, $r1, 0, 0, 6, null);

        $i1 = -1;

        if $i0 != $i1 goto label1;

        return $r2;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        staticinvoke <i.f.b.i: void a(java.lang.Object,java.lang.String)>($r0, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    public static java.lang.String b(java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        java.lang.String $r0, $r2, $r3;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = $r2;

     label1:
        $r2 = staticinvoke <i.j.s: java.lang.String c(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r3);

        return $r2;
    }

    public static final int c(java.lang.CharSequence)
    {
        int $i0, $i1;
        java.lang.CharSequence $r0;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$lastIndex");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        return $i0;
    }

    public static final java.lang.String c(java.lang.String, java.lang.String, java.lang.String)
    {
        int $i0, $i1;
        java.lang.String $r0, $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$substringBefore");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "delimiter");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r2, "missingDelimiterValue");

        $i0 = staticinvoke <i.j.s: int a(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r0, $r1, 0, 0, 6, null);

        $i1 = -1;

        if $i0 != $i1 goto label1;

        return $r2;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        staticinvoke <i.f.b.i: void a(java.lang.Object,java.lang.String)>($r0, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    public static final i.i.b d(java.lang.CharSequence)
    {
        java.lang.String[] $r1;
        java.lang.CharSequence $r0;
        i.i.b $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$lineSequence");

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "\r\n";

        $r1[1] = "\n";

        $r1[2] = "\r";

        $r2 = staticinvoke <i.j.s: i.i.b b(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object)>($r0, $r1, 0, 0, 6, null);

        return $r2;
    }

    public static final java.util.List e(java.lang.CharSequence)
    {
        java.util.List $r2;
        java.lang.CharSequence $r0;
        i.i.b $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$lines");

        $r1 = staticinvoke <i.j.s: i.i.b d(java.lang.CharSequence)>($r0);

        $r2 = staticinvoke <i.i.i: java.util.List c(i.i.b)>($r1);

        return $r2;
    }

    public static final java.lang.CharSequence f(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i2;
        char $c3;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$trim");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = $i0 - 1;

        $i0 = 0;

        $z0 = 0;

     label1:
        if $i0 > $i1 goto label7;

        if $z0 != 0 goto label2;

        $i2 = $i0;

        goto label3;

     label2:
        $i2 = $i1;

     label3:
        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i2);

        $z1 = staticinvoke <i.j.a: boolean a(char)>($c3);

        if $z0 != 0 goto label5;

        if $z1 != 0 goto label4;

        $z0 = 1;

        goto label1;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        if $z1 != 0 goto label6;

        goto label7;

     label6:
        $i2 = -1;

        $i1 = $i1 + $i2;

        goto label1;

     label7:
        $i1 = $i1 + 1;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        return $r0;
    }
}
