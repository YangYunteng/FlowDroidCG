public class j.a.b.p extends java.lang.Object
{
    public static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater a;
    public static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater b;
    public static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater c;
    public volatile java.lang.Object _next;
    public volatile java.lang.Object _prev;
    public volatile java.lang.Object _removedRef;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lj/a/b/p;", class "Ljava/lang/Object;", "_next");

        <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a> = $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lj/a/b/p;", class "Ljava/lang/Object;", "_prev");

        <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater b> = $r0;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lj/a/b/p;", class "Ljava/lang/Object;", "_removedRef");

        <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater c> = $r0;

        return;
    }

    public void <init>()
    {
        j.a.b.p r0;

        r0 := @this: j.a.b.p;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<j.a.b.p: java.lang.Object _next> = r0;

        r0.<j.a.b.p: java.lang.Object _prev> = r0;

        r0.<j.a.b.p: java.lang.Object _removedRef> = null;

        return;
    }

    public static final void a(j.a.b.p, j.a.b.p)
    {
        j.a.b.p $r0, $r1;

        $r0 := @parameter0: j.a.b.p;

        $r1 := @parameter1: j.a.b.p;

        virtualinvoke $r0.<j.a.b.p: void b(j.a.b.p)>($r1);

        return;
    }

    public final int a(j.a.b.p, j.a.b.p, j.a.b.p$a)
    {
        j.a.b.p$a $r2;
        j.a.b.p r0, $r1, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: j.a.b.p;

        $r3 := @parameter0: j.a.b.p;

        $r1 := @parameter1: j.a.b.p;

        $r2 := @parameter2: j.a.b.p$a;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r3, "node");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "next");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r2, "condAdd");

        $r4 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater b>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r3, r0);

        $r4 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r3, $r1);

        $r2.<j.a.b.p$a: j.a.b.p b> = $r1;

        $r4 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = virtualinvoke $r2.<j.a.b.c: java.lang.Object a(java.lang.Object)>(r0);

        if $r5 != null goto label2;

        return 1;

     label2:
        return 2;
    }

    public final j.a.b.p a(j.a.b.p, j.a.b.v)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6;
        kotlin.TypeCastException $r10;
        j.a.b.p r0, $r1, $r3, $r8;
        j.a.b.v $r2, $r5;
        java.lang.Object $r4, $r9;
        j.a.b.w $r7;
        boolean $z0;

        r0 := @this: j.a.b.p;

        $r1 := @parameter0: j.a.b.p;

        $r2 := @parameter1: j.a.b.v;

     label01:
        $r3 = null;

     label02:
        $r4 = $r1.<j.a.b.p: java.lang.Object _next>;

        if $r4 != $r2 goto label03;

        return $r1;

     label03:
        $z0 = $r4 instanceof j.a.b.v;

        if $z0 == 0 goto label04;

        $r5 = (j.a.b.v) $r4;

        virtualinvoke $r5.<j.a.b.v: java.lang.Object a(java.lang.Object)>($r1);

        goto label02;

     label04:
        $z0 = $r4 instanceof j.a.b.w;

        if $z0 == 0 goto label06;

        if $r3 == null goto label05;

        virtualinvoke $r1.<j.a.b.p: j.a.b.p j()>();

        $r6 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        $r7 = (j.a.b.w) $r4;

        $r8 = $r7.<j.a.b.w: j.a.b.p a>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r1, $r8);

        $r1 = $r3;

        goto label01;

     label05:
        $r4 = $r1.<j.a.b.p: java.lang.Object _prev>;

        $r1 = staticinvoke <j.a.b.o: j.a.b.p a(java.lang.Object)>($r4);

        goto label02;

     label06:
        $r9 = r0.<j.a.b.p: java.lang.Object _prev>;

        $z0 = $r9 instanceof j.a.b.w;

        if $z0 == 0 goto label07;

        return null;

     label07:
        if $r4 == r0 goto label09;

        if $r4 == null goto label08;

        $r3 = $r1;

        $r1 = (j.a.b.p) $r4;

        goto label02;

     label08:
        $r10 = new kotlin.TypeCastException;

        specialinvoke $r10.<kotlin.TypeCastException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.internal.Node /* = kotlinx.coroutines.internal.LockFreeLinkedListNode */");

        throw $r10;

     label09:
        if $r9 != $r1 goto label10;

        return null;

     label10:
        $r6 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater b>;

        $z0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(r0, $r9, $r1);

        if $z0 == 0 goto label02;

        $r4 = $r1.<j.a.b.p: java.lang.Object _prev>;

        $z0 = $r4 instanceof j.a.b.w;

        if $z0 != 0 goto label02;

        return null;
    }

    public final boolean a(j.a.b.p)
    {
        j.a.b.p r0, $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: j.a.b.p;

        $r1 := @parameter0: j.a.b.p;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "node");

        $r2 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater b>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r1, r0);

        $r2 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>($r1, r0);

     label1:
        $r3 = virtualinvoke r0.<j.a.b.p: java.lang.Object d()>();

        if $r3 == r0 goto label2;

        return 0;

     label2:
        $r2 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(r0, r0, $r1);

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<j.a.b.p: void b(j.a.b.p)>(r0);

        return 1;
    }

    public final void b(j.a.b.p)
    {
        j.a.b.p r0, $r1;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        java.lang.Object $r2, $r3;
        kotlin.TypeCastException $r5;
        boolean $z0;

        r0 := @this: j.a.b.p;

        $r1 := @parameter0: j.a.b.p;

     label1:
        $r2 = $r1.<j.a.b.p: java.lang.Object _prev>;

        $z0 = $r2 instanceof j.a.b.w;

        if $z0 != 0 goto label4;

        $r3 = virtualinvoke r0.<j.a.b.p: java.lang.Object d()>();

        if $r3 == $r1 goto label2;

        return;

     label2:
        $r4 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater b>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, r0);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<j.a.b.p: java.lang.Object d()>();

        $z0 = $r3 instanceof j.a.b.w;

        if $z0 == 0 goto label4;

        if $r2 == null goto label3;

        r0 = (j.a.b.p) $r2;

        virtualinvoke $r1.<j.a.b.p: j.a.b.p a(j.a.b.p,j.a.b.v)>(r0, null);

        return;

     label3:
        $r5 = new kotlin.TypeCastException;

        specialinvoke $r5.<kotlin.TypeCastException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.internal.Node /* = kotlinx.coroutines.internal.LockFreeLinkedListNode */");

        throw $r5;

     label4:
        return;
    }

    public final j.a.b.p c()
    {
        j.a.b.p r0, $r1, $r2;
        java.lang.AssertionError $r3;
        boolean $z0;

        r0 := @this: j.a.b.p;

        $r1 = r0;

     label1:
        $z0 = $r1 instanceof j.a.b.n;

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        $r2 = virtualinvoke $r1.<j.a.b.p: j.a.b.p e()>();

        $r1 = $r2;

        $z0 = staticinvoke <j.a.z: boolean a()>();

        if $z0 == 0 goto label1;

        if $r2 == r0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        goto label1;

     label5:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        goto label6;

     label6:
        throw $r3;
    }

    public final void c(j.a.b.p)
    {
        java.lang.Object $r2;
        j.a.b.p r0, $r1;

        r0 := @this: j.a.b.p;

        $r1 := @parameter0: j.a.b.p;

        virtualinvoke r0.<j.a.b.p: void h()>();

        $r2 = r0.<j.a.b.p: java.lang.Object _prev>;

        r0 = staticinvoke <j.a.b.o: j.a.b.p a(java.lang.Object)>($r2);

        virtualinvoke $r1.<j.a.b.p: j.a.b.p a(j.a.b.p,j.a.b.v)>(r0, null);

        return;
    }

    public final java.lang.Object d()
    {
        j.a.b.p r0;
        j.a.b.v $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: j.a.b.p;

     label1:
        $r1 = r0.<j.a.b.p: java.lang.Object _next>;

        $z0 = $r1 instanceof j.a.b.v;

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        $r2 = (j.a.b.v) $r1;

        virtualinvoke $r2.<j.a.b.v: java.lang.Object a(java.lang.Object)>(r0);

        goto label1;
    }

    public final j.a.b.p e()
    {
        java.lang.Object $r1;
        j.a.b.p r0;

        r0 := @this: j.a.b.p;

        $r1 = virtualinvoke r0.<j.a.b.p: java.lang.Object d()>();

        r0 = staticinvoke <j.a.b.o: j.a.b.p a(java.lang.Object)>($r1);

        return r0;
    }

    public final java.lang.Object f()
    {
        j.a.b.p r0, $r3;
        java.lang.Object $r1, $r2;
        kotlin.TypeCastException $r4;
        boolean $z0;

        r0 := @this: j.a.b.p;

     label1:
        $r2 = r0.<j.a.b.p: java.lang.Object _prev>;

        $z0 = $r2 instanceof j.a.b.w;

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        if $r2 == null goto label4;

        $r3 = (j.a.b.p) $r2;

        $r1 = virtualinvoke $r3.<j.a.b.p: java.lang.Object d()>();

        if $r1 != r0 goto label3;

        return $r2;

     label3:
        virtualinvoke r0.<j.a.b.p: j.a.b.p a(j.a.b.p,j.a.b.v)>($r3, null);

        goto label1;

     label4:
        $r4 = new kotlin.TypeCastException;

        specialinvoke $r4.<kotlin.TypeCastException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.internal.Node /* = kotlinx.coroutines.internal.LockFreeLinkedListNode */");

        goto label5;

     label5:
        throw $r4;
    }

    public final j.a.b.p g()
    {
        java.lang.Object $r1;
        j.a.b.p r0;

        r0 := @this: j.a.b.p;

        $r1 = virtualinvoke r0.<j.a.b.p: java.lang.Object f()>();

        r0 = staticinvoke <j.a.b.o: j.a.b.p a(java.lang.Object)>($r1);

        return r0;
    }

    public final void h()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r6;
        kotlin.TypeCastException $r8;
        j.a.b.p r0, $r1, $r2, $r5, $r7;
        java.lang.Object $r3;
        j.a.b.w $r4;
        boolean $z0;

        r0 := @this: j.a.b.p;

        $r2 = virtualinvoke r0.<j.a.b.p: j.a.b.p j()>();

        $r3 = r0.<j.a.b.p: java.lang.Object _next>;

        if $r3 == null goto label09;

        $r4 = (j.a.b.w) $r3;

        $r1 = $r4.<j.a.b.w: j.a.b.p a>;

     label01:
        $r5 = null;

     label02:
        $r3 = virtualinvoke $r1.<j.a.b.p: java.lang.Object d()>();

        $z0 = $r3 instanceof j.a.b.w;

        if $z0 == 0 goto label03;

        virtualinvoke $r1.<j.a.b.p: j.a.b.p j()>();

        $r4 = (j.a.b.w) $r3;

        $r1 = $r4.<j.a.b.w: j.a.b.p a>;

        goto label02;

     label03:
        $r3 = virtualinvoke $r2.<j.a.b.p: java.lang.Object d()>();

        $z0 = $r3 instanceof j.a.b.w;

        if $z0 == 0 goto label05;

        if $r5 == null goto label04;

        virtualinvoke $r2.<j.a.b.p: j.a.b.p j()>();

        $r6 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        $r4 = (j.a.b.w) $r3;

        $r7 = $r4.<j.a.b.w: j.a.b.p a>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r2, $r7);

        $r2 = $r5;

        goto label01;

     label04:
        $r3 = $r2.<j.a.b.p: java.lang.Object _prev>;

        $r2 = staticinvoke <j.a.b.o: j.a.b.p a(java.lang.Object)>($r3);

        goto label02;

     label05:
        if $r3 == r0 goto label08;

        if $r3 == null goto label07;

        $r7 = (j.a.b.p) $r3;

        if $r7 != $r1 goto label06;

        return;

     label06:
        $r5 = $r2;

        $r2 = $r7;

        goto label02;

     label07:
        $r8 = new kotlin.TypeCastException;

        specialinvoke $r8.<kotlin.TypeCastException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.internal.Node /* = kotlinx.coroutines.internal.LockFreeLinkedListNode */");

        throw $r8;

     label08:
        $r6 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        $z0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, r0, $r1);

        if $z0 == 0 goto label02;

        return;

     label09:
        $r8 = new kotlin.TypeCastException;

        specialinvoke $r8.<kotlin.TypeCastException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.internal.Removed");

        goto label10;

     label10:
        throw $r8;
    }

    public final boolean i()
    {
        java.lang.Object $r1;
        j.a.b.p r0;
        boolean $z0;

        r0 := @this: j.a.b.p;

        $r1 = virtualinvoke r0.<j.a.b.p: java.lang.Object d()>();

        $z0 = $r1 instanceof j.a.b.w;

        return $z0;
    }

    public final j.a.b.p j()
    {
        j.a.b.p r0, $r4;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Object $r2;
        j.a.b.w $r3;
        kotlin.TypeCastException $r5;
        boolean $z0;

        r0 := @this: j.a.b.p;

     label1:
        $r2 = r0.<j.a.b.p: java.lang.Object _prev>;

        $z0 = $r2 instanceof j.a.b.w;

        if $z0 == 0 goto label2;

        $r3 = (j.a.b.w) $r2;

        r0 = $r3.<j.a.b.w: j.a.b.p a>;

        return r0;

     label2:
        if $r2 != r0 goto label3;

        $r4 = virtualinvoke r0.<j.a.b.p: j.a.b.p c()>();

        goto label4;

     label3:
        if $r2 == null goto label5;

        $r4 = (j.a.b.p) $r2;

     label4:
        $r3 = virtualinvoke $r4.<j.a.b.p: j.a.b.w l()>();

        $r1 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater b>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(r0, $r2, $r3);

        if $z0 == 0 goto label1;

        r0 = (j.a.b.p) $r2;

        return r0;

     label5:
        $r5 = new kotlin.TypeCastException;

        specialinvoke $r5.<kotlin.TypeCastException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.internal.Node /* = kotlinx.coroutines.internal.LockFreeLinkedListNode */");

        goto label6;

     label6:
        throw $r5;
    }

    public boolean k()
    {
        j.a.b.p r0, $r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Object $r2;
        j.a.b.w $r4;
        kotlin.TypeCastException $r5;
        boolean $z0;

        r0 := @this: j.a.b.p;

     label1:
        $r2 = virtualinvoke r0.<j.a.b.p: java.lang.Object d()>();

        $z0 = $r2 instanceof j.a.b.w;

        if $z0 == 0 goto label2;

        return 0;

     label2:
        if $r2 != r0 goto label3;

        return 0;

     label3:
        if $r2 == null goto label4;

        $r3 = (j.a.b.p) $r2;

        $r4 = virtualinvoke $r3.<j.a.b.p: j.a.b.w l()>();

        $r1 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater a>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(r0, $r2, $r4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<j.a.b.p: void c(j.a.b.p)>($r3);

        return 1;

     label4:
        $r5 = new kotlin.TypeCastException;

        specialinvoke $r5.<kotlin.TypeCastException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlinx.coroutines.internal.Node /* = kotlinx.coroutines.internal.LockFreeLinkedListNode */");

        goto label5;

     label5:
        throw $r5;
    }

    public final j.a.b.w l()
    {
        j.a.b.p r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        java.lang.Object $r2;
        j.a.b.w $r3;

        r0 := @this: j.a.b.p;

        $r2 = r0.<j.a.b.p: java.lang.Object _removedRef>;

        $r3 = (j.a.b.w) $r2;

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r3 = new j.a.b.w;

        specialinvoke $r3.<j.a.b.w: void <init>(j.a.b.p)>(r0);

        $r1 = <j.a.b.p: java.util.concurrent.atomic.AtomicReferenceFieldUpdater c>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>(r0, $r3);

        return $r3;
    }

    public java.lang.String toString()
    {
        j.a.b.p r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: j.a.b.p;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
