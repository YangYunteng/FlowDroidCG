public class org.dom4j.swing.XMLTableModel extends javax.swing.table.AbstractTableModel
{
    public org.dom4j.swing.XMLTableDefinition definition;
    public java.util.List rows;
    public java.lang.Object source;

    public void <init>(org.dom4j.Document, java.lang.Object)
    {
        org.dom4j.Document $r3;
        org.dom4j.swing.XMLTableModel r0;
        java.lang.Object $r1;
        org.dom4j.swing.XMLTableDefinition $r2;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $r3 := @parameter0: org.dom4j.Document;

        $r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableDefinition load(org.dom4j.Document)>($r3);

        specialinvoke r0.<org.dom4j.swing.XMLTableModel: void <init>(org.dom4j.swing.XMLTableDefinition,java.lang.Object)>($r2, $r1);

        return;
    }

    public void <init>(org.dom4j.Element, java.lang.Object)
    {
        org.dom4j.swing.XMLTableModel r0;
        java.lang.Object $r1;
        org.dom4j.Element $r3;
        org.dom4j.swing.XMLTableDefinition $r2;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $r3 := @parameter0: org.dom4j.Element;

        $r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.dom4j.swing.XMLTableDefinition: org.dom4j.swing.XMLTableDefinition load(org.dom4j.Element)>($r3);

        specialinvoke r0.<org.dom4j.swing.XMLTableModel: void <init>(org.dom4j.swing.XMLTableDefinition,java.lang.Object)>($r2, $r1);

        return;
    }

    public void <init>(org.dom4j.swing.XMLTableDefinition, java.lang.Object)
    {
        org.dom4j.swing.XMLTableModel r0;
        java.lang.Object $r2;
        org.dom4j.swing.XMLTableDefinition $r1;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $r1 := @parameter0: org.dom4j.swing.XMLTableDefinition;

        $r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<javax.swing.table.AbstractTableModel: void <init>()>();

        r0.<org.dom4j.swing.XMLTableModel: org.dom4j.swing.XMLTableDefinition definition> = $r1;

        r0.<org.dom4j.swing.XMLTableModel: java.lang.Object source> = $r2;

        return;
    }

    public java.lang.Class getColumnClass(int)
    {
        org.dom4j.swing.XMLTableModel r0;
        int $i0;
        java.lang.Class $r2;
        org.dom4j.swing.XMLTableDefinition $r1;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $i0 := @parameter0: int;

        $r1 = r0.<org.dom4j.swing.XMLTableModel: org.dom4j.swing.XMLTableDefinition definition>;

        $r2 = virtualinvoke $r1.<org.dom4j.swing.XMLTableDefinition: java.lang.Class getColumnClass(int)>($i0);

        return $r2;
    }

    public int getColumnCount()
    {
        org.dom4j.swing.XMLTableModel r0;
        int $i0;
        org.dom4j.swing.XMLTableDefinition $r1;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $r1 = r0.<org.dom4j.swing.XMLTableModel: org.dom4j.swing.XMLTableDefinition definition>;

        $i0 = virtualinvoke $r1.<org.dom4j.swing.XMLTableDefinition: int getColumnCount()>();

        return $i0;
    }

    public java.lang.String getColumnName(int)
    {
        java.io.PrintStream $r3;
        org.dom4j.XPath $r2;
        org.dom4j.swing.XMLTableModel r0;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.Object $r5;
        org.dom4j.swing.XMLTableDefinition $r1;
        java.lang.String $r6;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $i0 := @parameter0: int;

        $r1 = r0.<org.dom4j.swing.XMLTableModel: org.dom4j.swing.XMLTableDefinition definition>;

        $r2 = virtualinvoke $r1.<org.dom4j.swing.XMLTableDefinition: org.dom4j.XPath getColumnNameXPath(int)>($i0);

        if $r2 == null goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Evaluating column xpath: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value: ");

        $r5 = r0.<org.dom4j.swing.XMLTableModel: java.lang.Object source>;

        $r6 = interfaceinvoke $r2.<org.dom4j.XPath: java.lang.String valueOf(java.lang.Object)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r5 = r0.<org.dom4j.swing.XMLTableModel: java.lang.Object source>;

        $r6 = interfaceinvoke $r2.<org.dom4j.XPath: java.lang.String valueOf(java.lang.Object)>($r5);

        return $r6;

     label1:
        $r1 = r0.<org.dom4j.swing.XMLTableModel: org.dom4j.swing.XMLTableDefinition definition>;

        $r6 = virtualinvoke $r1.<org.dom4j.swing.XMLTableDefinition: java.lang.String getColumnName(int)>($i0);

        return $r6;
    }

    public org.dom4j.swing.XMLTableDefinition getDefinition()
    {
        org.dom4j.swing.XMLTableModel r0;
        org.dom4j.swing.XMLTableDefinition r1;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        r1 = r0.<org.dom4j.swing.XMLTableModel: org.dom4j.swing.XMLTableDefinition definition>;

        return r1;
    }

    public int getRowCount()
    {
        org.dom4j.swing.XMLTableModel r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $r1 = virtualinvoke r0.<org.dom4j.swing.XMLTableModel: java.util.List getRows()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.Object getRowValue(int)
    {
        java.util.List $r1;
        org.dom4j.swing.XMLTableModel r0;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.dom4j.swing.XMLTableModel: java.util.List getRows()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        return $r2;
    }

    public java.util.List getRows()
    {
        java.util.List $r2;
        org.dom4j.XPath $r4;
        org.dom4j.swing.XMLTableModel r0;
        java.lang.Object $r1;
        org.dom4j.swing.XMLTableDefinition $r3;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $r2 = r0.<org.dom4j.swing.XMLTableModel: java.util.List rows>;

        if $r2 != null goto label1;

        $r3 = r0.<org.dom4j.swing.XMLTableModel: org.dom4j.swing.XMLTableDefinition definition>;

        $r4 = virtualinvoke $r3.<org.dom4j.swing.XMLTableDefinition: org.dom4j.XPath getRowXPath()>();

        $r1 = r0.<org.dom4j.swing.XMLTableModel: java.lang.Object source>;

        $r2 = interfaceinvoke $r4.<org.dom4j.XPath: java.util.List selectNodes(java.lang.Object)>($r1);

        r0.<org.dom4j.swing.XMLTableModel: java.util.List rows> = $r2;

     label1:
        $r2 = r0.<org.dom4j.swing.XMLTableModel: java.util.List rows>;

        return $r2;
    }

    public java.lang.Object getSource()
    {
        org.dom4j.swing.XMLTableModel r0;
        java.lang.Object r1;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        r1 = r0.<org.dom4j.swing.XMLTableModel: java.lang.Object source>;

        return r1;
    }

    public java.lang.Object getValueAt(int, int)
    {
        org.dom4j.swing.XMLTableModel r0;
        int $i0, $i1;
        java.lang.Object $r2;
        org.dom4j.swing.XMLTableDefinition $r1;
        java.lang.Exception $r3;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

     label1:
        $r2 = virtualinvoke r0.<org.dom4j.swing.XMLTableModel: java.lang.Object getRowValue(int)>($i1);

        $r1 = r0.<org.dom4j.swing.XMLTableModel: org.dom4j.swing.XMLTableDefinition definition>;

        $r2 = virtualinvoke $r1.<org.dom4j.swing.XMLTableDefinition: java.lang.Object getValueAt(java.lang.Object,int)>($r2, $i0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<org.dom4j.swing.XMLTableModel: void handleException(java.lang.Exception)>($r3);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void handleException(java.lang.Exception)
    {
        java.io.PrintStream $r1;
        org.dom4j.swing.XMLTableModel r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Exception $r4;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $r4 := @parameter0: java.lang.Exception;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Caught: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

        return;
    }

    public void setDefinition(org.dom4j.swing.XMLTableDefinition)
    {
        org.dom4j.swing.XMLTableModel r0;
        org.dom4j.swing.XMLTableDefinition $r1;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $r1 := @parameter0: org.dom4j.swing.XMLTableDefinition;

        r0.<org.dom4j.swing.XMLTableModel: org.dom4j.swing.XMLTableDefinition definition> = $r1;

        return;
    }

    public void setSource(java.lang.Object)
    {
        org.dom4j.swing.XMLTableModel r0;
        java.lang.Object $r1;

        r0 := @this: org.dom4j.swing.XMLTableModel;

        $r1 := @parameter0: java.lang.Object;

        r0.<org.dom4j.swing.XMLTableModel: java.lang.Object source> = $r1;

        r0.<org.dom4j.swing.XMLTableModel: java.util.List rows> = null;

        return;
    }
}
