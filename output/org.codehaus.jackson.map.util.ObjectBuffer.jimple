public final class org.codehaus.jackson.map.util.ObjectBuffer extends java.lang.Object
{
    public static final int INITIAL_CHUNK_SIZE;
    public static final int MAX_CHUNK_SIZE;
    public static final int SMALL_CHUNK_SIZE;
    public org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead;
    public org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail;
    public int _bufferedEntryCount;
    public java.lang.Object[] _freeBuffer;

    public void <init>()
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void _copyTo(java.lang.Object, int, java.lang.Object[], int)
    {
        java.lang.IllegalStateException $r5;
        java.lang.Object[] $r2, $r4;
        org.codehaus.jackson.map.util.ObjectBuffer$Node $r3;
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 := @parameter0: java.lang.Object;

        $i1 := @parameter1: int;

        $r2 := @parameter2: java.lang.Object[];

        $i2 := @parameter3: int;

        $r3 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead>;

        $i3 = 0;

     label1:
        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.util.ObjectBuffer$Node: java.lang.Object[] getData()>();

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r1, $i3, $i0);

        $i3 = $i3 + $i0;

        $r3 = virtualinvoke $r3.<org.codehaus.jackson.map.util.ObjectBuffer$Node: org.codehaus.jackson.map.util.ObjectBuffer$Node next()>();

        goto label1;

     label2:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i3, $i2);

        $i2 = $i3 + $i2;

        if $i2 != $i1 goto label3;

        return;

     label3:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Should have gotten ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries, got ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        goto label4;

     label4:
        throw $r5;
    }

    public void _reset()
    {
        org.codehaus.jackson.map.util.ObjectBuffer$Node $r2;
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r2 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.util.ObjectBuffer$Node: java.lang.Object[] getData()>();

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer> = $r1;

     label1:
        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail> = null;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead> = null;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount> = 0;

        return;
    }

    public java.lang.Object[] appendCompletedChunk(java.lang.Object[])
    {
        org.codehaus.jackson.map.util.ObjectBuffer$Node $r2, $r3;
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 := @parameter0: java.lang.Object[];

        $r2 = new org.codehaus.jackson.map.util.ObjectBuffer$Node;

        specialinvoke $r2.<org.codehaus.jackson.map.util.ObjectBuffer$Node: void <init>(java.lang.Object[])>($r1);

        $r3 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead>;

        if $r3 != null goto label1;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail> = $r2;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead> = $r2;

        goto label2;

     label1:
        $r3 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail>;

        virtualinvoke $r3.<org.codehaus.jackson.map.util.ObjectBuffer$Node: void linkNext(org.codehaus.jackson.map.util.ObjectBuffer$Node)>($r2);

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail> = $r2;

     label2:
        $i0 = lengthof $r1;

        $i1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        $i1 = $i1 + $i0;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount> = $i1;

        if $i0 >= 16384 goto label3;

        $i0 = $i0 + $i0;

        goto label4;

     label3:
        $i1 = $i0 >> 2;

        $i0 = $i0 + $i1;

     label4:
        $r1 = newarray (java.lang.Object)[$i0];

        return $r1;
    }

    public int bufferedSize()
    {
        int i0;
        org.codehaus.jackson.map.util.ObjectBuffer r0;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        i0 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        return i0;
    }

    public void completeAndClearBuffer(java.lang.Object[], int, java.util.List)
    {
        java.lang.Object[] $r1, $r5;
        org.codehaus.jackson.map.util.ObjectBuffer$Node $r4;
        java.util.List $r2;
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        int $i0, $i1, $i2;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.util.List;

        $r4 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead>;

     label1:
        $i2 = 0;

        if $r4 == null goto label4;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.util.ObjectBuffer$Node: java.lang.Object[] getData()>();

        $i1 = lengthof $r5;

     label2:
        if $i2 >= $i1 goto label3;

        $r3 = $r5[$i2];

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r4 = virtualinvoke $r4.<org.codehaus.jackson.map.util.ObjectBuffer$Node: org.codehaus.jackson.map.util.ObjectBuffer$Node next()>();

        goto label1;

     label4:
        if $i2 >= $i0 goto label5;

        $r3 = $r1[$i2];

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i2 = $i2 + 1;

        goto label4;

     label5:
        return;
    }

    public java.lang.Object[] completeAndClearBuffer(java.lang.Object[], int)
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        $i1 = $i1 + $i0;

        $r2 = newarray (java.lang.Object)[$i1];

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _copyTo(java.lang.Object,int,java.lang.Object[],int)>($r2, $i1, $r1, $i0);

        return $r2;
    }

    public java.lang.Object[] completeAndClearBuffer(java.lang.Object[], int, java.lang.Class)
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1, $r4;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.Class $r3;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $r3 := @parameter2: java.lang.Class;

        $i1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        $i1 = $i1 + $i0;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, $i1);

        $r4 = (java.lang.Object[]) $r2;

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _copyTo(java.lang.Object,int,java.lang.Object[],int)>($r4, $i1, $r1, $i0);

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _reset()>();

        return $r4;
    }

    public int initialCapacity()
    {
        int $i0;
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = lengthof $r1;

        return $i0;
    }

    public java.lang.Object[] resetAndStart()
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _reset()>();

        $r1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer>;

        if $r1 != null goto label1;

        $r1 = newarray (java.lang.Object)[12];

     label1:
        return $r1;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.map.util.ObjectBuffer: int SMALL_CHUNK_SIZE> = 16384;

        <org.codehaus.jackson.map.util.ObjectBuffer: int MAX_CHUNK_SIZE> = 262144;

        <org.codehaus.jackson.map.util.ObjectBuffer: int INITIAL_CHUNK_SIZE> = 12;

        return;
    }
}
