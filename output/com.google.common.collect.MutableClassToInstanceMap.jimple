public final class com.google.common.collect.MutableClassToInstanceMap extends com.google.common.collect.ForwardingMap implements com.google.common.collect.ClassToInstanceMap, java.io.Serializable
{
    public final java.util.Map delegate;

    public void <init>(java.util.Map)
    {
        com.google.common.collect.MutableClassToInstanceMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.MutableClassToInstanceMap;

        $r1 := @parameter0: java.util.Map;

        specialinvoke r0.<com.google.common.collect.ForwardingMap: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.collect.MutableClassToInstanceMap: java.util.Map delegate> = $r1;

        return;
    }

    public static java.lang.Object access$000(java.lang.Class, java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.Class $r1;

        $r1 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.Object;

        $r0 = staticinvoke <com.google.common.collect.MutableClassToInstanceMap: java.lang.Object cast(java.lang.Class,java.lang.Object)>($r1, $r0);

        return $r0;
    }

    public static java.util.Map$Entry access$100(java.util.Map$Entry)
    {
        java.util.Map$Entry $r0;

        $r0 := @parameter0: java.util.Map$Entry;

        $r0 = staticinvoke <com.google.common.collect.MutableClassToInstanceMap: java.util.Map$Entry checkedEntry(java.util.Map$Entry)>($r0);

        return $r0;
    }

    public static java.lang.Object cast(java.lang.Class, java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.Class $r1;

        $r1 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <com.google.common.primitives.Primitives: java.lang.Class wrap(java.lang.Class)>($r1);

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r0);

        return $r0;
    }

    public static java.util.Map$Entry checkedEntry(java.util.Map$Entry)
    {
        java.util.Map$Entry $r0;
        com.google.common.collect.MutableClassToInstanceMap$1 $r1;

        $r0 := @parameter0: java.util.Map$Entry;

        $r1 = new com.google.common.collect.MutableClassToInstanceMap$1;

        specialinvoke $r1.<com.google.common.collect.MutableClassToInstanceMap$1: void <init>(java.util.Map$Entry)>($r0);

        return $r1;
    }

    public static com.google.common.collect.MutableClassToInstanceMap create()
    {
        com.google.common.collect.MutableClassToInstanceMap $r0;
        java.util.HashMap $r1;

        $r0 = new com.google.common.collect.MutableClassToInstanceMap;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        specialinvoke $r0.<com.google.common.collect.MutableClassToInstanceMap: void <init>(java.util.Map)>($r1);

        return $r0;
    }

    public static com.google.common.collect.MutableClassToInstanceMap create(java.util.Map)
    {
        com.google.common.collect.MutableClassToInstanceMap $r1;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $r1 = new com.google.common.collect.MutableClassToInstanceMap;

        specialinvoke $r1.<com.google.common.collect.MutableClassToInstanceMap: void <init>(java.util.Map)>($r0);

        return $r1;
    }

    private java.lang.Object writeReplace()
    {
        com.google.common.collect.MutableClassToInstanceMap r0;
        com.google.common.collect.MutableClassToInstanceMap$SerializedForm $r1;
        java.util.Map $r2;

        r0 := @this: com.google.common.collect.MutableClassToInstanceMap;

        $r1 = new com.google.common.collect.MutableClassToInstanceMap$SerializedForm;

        $r2 = virtualinvoke r0.<com.google.common.collect.MutableClassToInstanceMap: java.util.Map delegate()>();

        specialinvoke $r1.<com.google.common.collect.MutableClassToInstanceMap$SerializedForm: void <init>(java.util.Map)>($r2);

        return $r1;
    }

    public volatile java.lang.Object delegate()
    {
        com.google.common.collect.MutableClassToInstanceMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.MutableClassToInstanceMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.MutableClassToInstanceMap: java.util.Map delegate()>();

        return $r1;
    }

    public java.util.Map delegate()
    {
        com.google.common.collect.MutableClassToInstanceMap r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.MutableClassToInstanceMap;

        r1 = r0.<com.google.common.collect.MutableClassToInstanceMap: java.util.Map delegate>;

        return r1;
    }

    public java.util.Set entrySet()
    {
        com.google.common.collect.MutableClassToInstanceMap r0;
        com.google.common.collect.MutableClassToInstanceMap$2 $r1;

        r0 := @this: com.google.common.collect.MutableClassToInstanceMap;

        $r1 = new com.google.common.collect.MutableClassToInstanceMap$2;

        specialinvoke $r1.<com.google.common.collect.MutableClassToInstanceMap$2: void <init>(com.google.common.collect.MutableClassToInstanceMap)>(r0);

        return $r1;
    }

    public java.lang.Object getInstance(java.lang.Class)
    {
        com.google.common.collect.MutableClassToInstanceMap r0;
        java.lang.Class $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.MutableClassToInstanceMap;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingMap: java.lang.Object get(java.lang.Object)>($r1);

        $r2 = staticinvoke <com.google.common.collect.MutableClassToInstanceMap: java.lang.Object cast(java.lang.Class,java.lang.Object)>($r1, $r2);

        return $r2;
    }

    public java.lang.Object put(java.lang.Class, java.lang.Object)
    {
        com.google.common.collect.MutableClassToInstanceMap r0;
        java.lang.Class $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.MutableClassToInstanceMap;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.google.common.collect.MutableClassToInstanceMap: java.lang.Object cast(java.lang.Class,java.lang.Object)>($r1, $r2);

        $r2 = specialinvoke r0.<com.google.common.collect.ForwardingMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r2;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.MutableClassToInstanceMap r0;
        java.lang.Object $r1, $r2;
        java.lang.Class $r3;

        r0 := @this: com.google.common.collect.MutableClassToInstanceMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Class) $r2;

        $r2 = virtualinvoke r0.<com.google.common.collect.MutableClassToInstanceMap: java.lang.Object put(java.lang.Class,java.lang.Object)>($r3, $r1);

        return $r2;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry $r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.util.LinkedHashMap $r1;
        com.google.common.collect.MutableClassToInstanceMap r0;
        java.util.Map $r2;
        java.lang.Object $r5;
        java.lang.Class $r7;
        boolean $z0;

        r0 := @this: com.google.common.collect.MutableClassToInstanceMap;

        $r2 := @parameter0: java.util.Map;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r2);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.Class) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <com.google.common.collect.MutableClassToInstanceMap: java.lang.Object cast(java.lang.Class,java.lang.Object)>($r7, $r5);

        goto label1;

     label2:
        specialinvoke r0.<com.google.common.collect.ForwardingMap: void putAll(java.util.Map)>($r1);

        return;
    }

    public java.lang.Object putInstance(java.lang.Class, java.lang.Object)
    {
        com.google.common.collect.MutableClassToInstanceMap r0;
        java.lang.Class $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.MutableClassToInstanceMap;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.MutableClassToInstanceMap: java.lang.Object put(java.lang.Class,java.lang.Object)>($r1, $r2);

        $r2 = staticinvoke <com.google.common.collect.MutableClassToInstanceMap: java.lang.Object cast(java.lang.Class,java.lang.Object)>($r1, $r2);

        return $r2;
    }
}
