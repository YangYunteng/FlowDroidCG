public final class org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer extends org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer implements org.codehaus.jackson.map.ResolvableSerializer
{
    public org.codehaus.jackson.map.JsonSerializer _elementSerializer;

    public void <init>(org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.BeanProperty $r1;
        org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer: void <init>(java.lang.Class,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(class "[Ljava/lang/String;", null, $r1);

        return;
    }

    private void serializeContentsSlow(java.lang.String[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.String[] $r1;
        org.codehaus.jackson.map.JsonSerializer $r4;
        org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer r0;
        org.codehaus.jackson.JsonGenerator $r2;
        int $i0, $i1;
        java.lang.String $r5;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.JsonSerializer;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r5 = $r1[$i1];

        if $r5 != null goto label2;

        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

        goto label3;

     label2:
        $r5 = $r1[$i1];

        virtualinvoke $r4.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r5, $r2, $r3);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        return;
    }

    public org.codehaus.jackson.map.ser.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.TypeSerializer $r1;
        org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        return r0;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer r0;
        org.codehaus.jackson.node.ObjectNode $r3, $r4;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("array", 1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String)>("string");

        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r4);

        return $r3;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider)
    {
        java.lang.'annotation'.Annotation $r5;
        org.codehaus.jackson.map.SerializerProvider $r1;
        java.lang.Class $r4;
        org.codehaus.jackson.map.JsonSerializer $r3;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 = r0.<org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>(class "Ljava/lang/String;", $r2);

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JacksonStdImpl;");

        if $r5 != null goto label1;

        r0.<org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer> = $r3;

     label1:
        return;
    }

    public volatile void serializeContents(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;
        java.lang.String[] $r4;
        org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.lang.String[]) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer: void serializeContents(java.lang.String[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serializeContents(java.lang.String[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.String[] $r1;
        org.codehaus.jackson.map.JsonSerializer $r4;
        org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer r0;
        org.codehaus.jackson.JsonGenerator $r2;
        int $i0, $i1;
        java.lang.String $r5;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        if $r4 == null goto label2;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer: void serializeContentsSlow(java.lang.String[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>($r1, $r2, $r3, $r4);

        return;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label6;

        $r5 = $r1[$i1];

        if $r5 != null goto label4;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeNull()>();

        goto label5;

     label4:
        $r5 = $r1[$i1];

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeString(java.lang.String)>($r5);

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        return;
    }
}
