public class org.dom4j.IllegalAddException extends java.lang.IllegalArgumentException
{

    public void <init>(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.IllegalAddException r0;

        r0 := @this: org.dom4j.IllegalAddException;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        return;
    }

    public void <init>(org.dom4j.Branch, org.dom4j.Node, java.lang.String)
    {
        org.dom4j.Branch $r3;
        org.dom4j.Node $r4;
        org.dom4j.IllegalAddException r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1, $r5;

        r0 := @this: org.dom4j.IllegalAddException;

        $r3 := @parameter0: org.dom4j.Branch;

        $r4 := @parameter1: org.dom4j.Node;

        $r1 := @parameter2: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("The node \"");

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" could not be added to the branch \"");

        $r5 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" because: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        return;
    }

    public void <init>(org.dom4j.Element, org.dom4j.Node, java.lang.String)
    {
        org.dom4j.Node $r4;
        org.dom4j.IllegalAddException r0;
        java.lang.StringBuilder $r2;
        org.dom4j.Element $r3;
        java.lang.String $r1, $r5;

        r0 := @this: org.dom4j.IllegalAddException;

        $r3 := @parameter0: org.dom4j.Element;

        $r4 := @parameter1: org.dom4j.Node;

        $r1 := @parameter2: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("The node \"");

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" could not be added to the element \"");

        $r5 = interfaceinvoke $r3.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" because: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        return;
    }
}
