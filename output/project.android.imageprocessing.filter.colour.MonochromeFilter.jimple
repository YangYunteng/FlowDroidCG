public class project.android.imageprocessing.filter.colour.MonochromeFilter extends project.android.imageprocessing.filter.BasicFilter
{
    public static final java.lang.String UNIFORM_COLOUR;
    public static final java.lang.String UNIFORM_INTENSITY;
    public float[] colour;
    public int colourHandle;
    public float intensity;
    public int intensityHandle;

    public void <init>(float[], float)
    {
        project.android.imageprocessing.filter.colour.MonochromeFilter r0;
        float $f0;
        float[] $r1;

        r0 := @this: project.android.imageprocessing.filter.colour.MonochromeFilter;

        $r1 := @parameter0: float[];

        $f0 := @parameter1: float;

        specialinvoke r0.<project.android.imageprocessing.filter.BasicFilter: void <init>()>();

        r0.<project.android.imageprocessing.filter.colour.MonochromeFilter: float intensity> = $f0;

        r0.<project.android.imageprocessing.filter.colour.MonochromeFilter: float[] colour> = $r1;

        return;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.filter.colour.MonochromeFilter r0;

        r0 := @this: project.android.imageprocessing.filter.colour.MonochromeFilter;

        return "precision mediump float;\nuniform sampler2D u_Texture0;\nvarying vec2 v_TexCoord;\nuniform float u_Intensity;\nuniform vec3 u_Colour;\nvec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\nvoid main(){\n   vec4 color = texture2D(u_Texture0,v_TexCoord);\n   float luminance =  dot(color.rgb, luminanceWeighting);\n   vec4 desat = vec4(vec3(luminance), 1.0);\n   vec4 outputColour = vec4(\n     (desat.r < 0.5 ? (2.0 * desat.r * u_Colour.r) : (1.0 - 2.0 * (1.0 - desat.r) * (1.0 - u_Colour.r))),\n     (desat.g < 0.5 ? (2.0 * desat.g * u_Colour.g) : (1.0 - 2.0 * (1.0 - desat.g) * (1.0 - u_Colour.g))),\n     (desat.b < 0.5 ? (2.0 * desat.b * u_Colour.b) : (1.0 - 2.0 * (1.0 - desat.b) * (1.0 - u_Colour.b))),\n     1.0);\n   gl_FragColor = vec4(mix(color.rgb, outputColour.rgb, u_Intensity), color.a);\n}\n";
    }

    public void initShaderHandles()
    {
        project.android.imageprocessing.filter.colour.MonochromeFilter r0;
        int $i0;

        r0 := @this: project.android.imageprocessing.filter.colour.MonochromeFilter;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void initShaderHandles()>();

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_Intensity");

        r0.<project.android.imageprocessing.filter.colour.MonochromeFilter: int intensityHandle> = $i0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_Colour");

        r0.<project.android.imageprocessing.filter.colour.MonochromeFilter: int colourHandle> = $i0;

        return;
    }

    public void passShaderValues()
    {
        project.android.imageprocessing.filter.colour.MonochromeFilter r0;
        int $i0;
        float $f0, $f1, $f2;
        float[] $r1;

        r0 := @this: project.android.imageprocessing.filter.colour.MonochromeFilter;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void passShaderValues()>();

        $i0 = r0.<project.android.imageprocessing.filter.colour.MonochromeFilter: int intensityHandle>;

        $f0 = r0.<project.android.imageprocessing.filter.colour.MonochromeFilter: float intensity>;

        staticinvoke <android.opengl.GLES20: void glUniform1f(int,float)>($i0, $f0);

        $i0 = r0.<project.android.imageprocessing.filter.colour.MonochromeFilter: int colourHandle>;

        $r1 = r0.<project.android.imageprocessing.filter.colour.MonochromeFilter: float[] colour>;

        $f0 = $r1[0];

        $f1 = $r1[1];

        $f2 = $r1[2];

        staticinvoke <android.opengl.GLES20: void glUniform3f(int,float,float,float)>($i0, $f0, $f1, $f2);

        return;
    }

    public static void <clinit>()
    {
        <project.android.imageprocessing.filter.colour.MonochromeFilter: java.lang.String UNIFORM_INTENSITY> = "u_Intensity";

        <project.android.imageprocessing.filter.colour.MonochromeFilter: java.lang.String UNIFORM_COLOUR> = "u_Colour";

        return;
    }
}
