public abstract class org.codehaus.jackson.map.type.TypeBase extends org.codehaus.jackson.type.JavaType
{
    public volatile java.lang.String _canonicalName;

    public void <init>(java.lang.Class, int)
    {
        int $i0;
        java.lang.Class $r1;
        org.codehaus.jackson.map.type.TypeBase r0;

        r0 := @this: org.codehaus.jackson.map.type.TypeBase;

        $r1 := @parameter0: java.lang.Class;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.codehaus.jackson.type.JavaType: void <init>(java.lang.Class,int)>($r1, $i0);

        return;
    }

    public static java.lang.StringBuilder _classSignature(java.lang.Class, java.lang.StringBuilder, boolean)
    {
        java.lang.IllegalStateException $r5;
        char $c2, $c3;
        int $i0, $i1, $i4;
        java.lang.Class $r0, $r2;
        java.lang.StringBuilder $r1, $r4;
        java.lang.String $r3;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.StringBuilder;

        $z0 := @parameter2: boolean;

        $z1 = virtualinvoke $r0.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label10;

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r0 != $r2 goto label01;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(90);

        return $r1;

     label01:
        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r0 != $r2 goto label02;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(66);

        return $r1;

     label02:
        $r2 = <java.lang.Short: java.lang.Class TYPE>;

        if $r0 != $r2 goto label03;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(83);

        return $r1;

     label03:
        $r2 = <java.lang.Character: java.lang.Class TYPE>;

        if $r0 != $r2 goto label04;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(67);

        return $r1;

     label04:
        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r0 != $r2 goto label05;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(73);

        return $r1;

     label05:
        $r2 = <java.lang.Long: java.lang.Class TYPE>;

        if $r0 != $r2 goto label06;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(74);

        return $r1;

     label06:
        $r2 = <java.lang.Float: java.lang.Class TYPE>;

        if $r0 != $r2 goto label07;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(70);

        return $r1;

     label07:
        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        if $r0 != $r2 goto label08;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(68);

        return $r1;

     label08:
        $r2 = <java.lang.Void: java.lang.Class TYPE>;

        if $r0 != $r2 goto label09;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(86);

        return $r1;

     label09:
        $r5 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        $r1 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized primitive type: ");

        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r5;

     label10:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(76);

        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = 0;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

     label11:
        if $i0 >= $i1 goto label13;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i0);

        $c3 = $c2;

        $i4 = (int) $c2;

        if $i4 != 46 goto label12;

        $c3 = 47;

     label12:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $i0 = $i0 + 1;

        goto label11;

     label13:
        if $z0 == 0 goto label14;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

     label14:
        return $r1;
    }

    public abstract java.lang.String buildCanonicalName();

    public final org.codehaus.jackson.type.JavaType copyHandlers(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Object $r2;
        org.codehaus.jackson.map.type.TypeBase r0;

        r0 := @this: org.codehaus.jackson.map.type.TypeBase;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        r0.<org.codehaus.jackson.type.JavaType: java.lang.Object _valueHandler> = $r2;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        r0.<org.codehaus.jackson.type.JavaType: java.lang.Object _typeHandler> = $r2;

        return r0;
    }

    public abstract java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder);

    public abstract java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder);

    public java.lang.String toCanonical()
    {
        java.lang.String $r1;
        org.codehaus.jackson.map.type.TypeBase r0;

        r0 := @this: org.codehaus.jackson.map.type.TypeBase;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeBase: java.lang.String _canonicalName>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeBase: java.lang.String buildCanonicalName()>();

     label1:
        return $r1;
    }
}
