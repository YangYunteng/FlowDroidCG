public abstract class org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase extends org.codehaus.jackson.map.TypeDeserializer
{
    public final org.codehaus.jackson.type.JavaType _baseType;
    public final java.util.HashMap _deserializers;
    public final org.codehaus.jackson.map.jsontype.TypeIdResolver _idResolver;
    public final org.codehaus.jackson.map.BeanProperty _property;

    public void <init>(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.jsontype.TypeIdResolver, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase r0;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r1;
        org.codehaus.jackson.type.JavaType $r3;
        java.util.HashMap $r4;
        org.codehaus.jackson.map.BeanProperty $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase;

        $r3 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter1: org.codehaus.jackson.map.jsontype.TypeIdResolver;

        $r2 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.TypeDeserializer: void <init>()>();

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.type.JavaType _baseType> = $r3;

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.map.jsontype.TypeIdResolver _idResolver> = $r1;

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.map.BeanProperty _property> = $r2;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: java.util.HashMap _deserializers> = $r4;

        return;
    }

    public final org.codehaus.jackson.map.JsonDeserializer _findDeserializer(org.codehaus.jackson.map.DeserializationContext, java.lang.String)
    {
        java.lang.Throwable $r18;
        org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase r0;
        java.util.HashMap $r2, $r4;
        org.codehaus.jackson.map.DeserializationConfig $r14;
        org.codehaus.jackson.map.DeserializationContext $r3;
        org.codehaus.jackson.map.JsonMappingException $r17;
        org.codehaus.jackson.type.JavaType $r8, $r9, $r10;
        org.codehaus.jackson.map.JsonDeserializer $r6, $r16;
        java.lang.String $r1;
        org.codehaus.jackson.map.DeserializerProvider $r13;
        org.codehaus.jackson.map.BeanProperty $r15;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r7;
        java.lang.Object $r5;
        java.lang.Class $r11, $r12;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase;

        $r3 := @parameter0: org.codehaus.jackson.map.DeserializationContext;

        $r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: java.util.HashMap _deserializers>;

        entermonitor $r2;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: java.util.HashMap _deserializers>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (org.codehaus.jackson.map.JsonDeserializer) $r5;

        if $r6 != null goto label4;

        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.map.jsontype.TypeIdResolver _idResolver>;

        $r8 = interfaceinvoke $r7.<org.codehaus.jackson.map.jsontype.TypeIdResolver: org.codehaus.jackson.type.JavaType typeFromId(java.lang.String)>($r1);

        $r9 = $r8;

        if $r8 == null goto label3;

        $r10 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.type.JavaType _baseType>;

        if $r10 == null goto label2;

        $r10 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.type.JavaType _baseType>;

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        if $r11 != $r12 goto label2;

        $r9 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.type.JavaType _baseType>;

        $r11 = virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r9 = virtualinvoke $r9.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>($r11);

     label2:
        $r13 = virtualinvoke $r3.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.DeserializerProvider getDeserializerProvider()>();

        $r14 = virtualinvoke $r3.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.DeserializationConfig getConfig()>();

        $r15 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.map.BeanProperty _property>;

        $r16 = virtualinvoke $r13.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r14, $r9, $r15);

        $r6 = $r16;

        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: java.util.HashMap _deserializers>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r16);

        goto label4;

     label3:
        $r8 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.type.JavaType _baseType>;

        $r17 = virtualinvoke $r3.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException unknownTypeException(org.codehaus.jackson.type.JavaType,java.lang.String)>($r8, $r1);

        throw $r17;

     label4:
        exitmonitor $r2;

     label5:
        return $r6;

     label6:
        $r18 := @caughtexception;

        exitmonitor $r2;

     label7:
        throw $r18;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.String baseTypeName()
    {
        org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase;

        $r1 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.type.JavaType _baseType>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r3;
    }

    public java.lang.String getPropertyName()
    {
        org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase;

        return null;
    }

    public org.codehaus.jackson.map.jsontype.TypeIdResolver getTypeIdResolver()
    {
        org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase r0;
        org.codehaus.jackson.map.jsontype.TypeIdResolver r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase;

        r1 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.map.jsontype.TypeIdResolver _idResolver>;

        return r1;
    }

    public abstract org.codehaus.jackson.annotate.JsonTypeInfo$As getTypeInclusion();

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase r0;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r5;
        org.codehaus.jackson.type.JavaType $r4;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; base-type:");

        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.type.JavaType _baseType>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; id-resolver: ");

        $r5 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.map.jsontype.TypeIdResolver _idResolver>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
