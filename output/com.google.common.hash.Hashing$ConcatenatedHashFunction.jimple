public final class com.google.common.hash.Hashing$ConcatenatedHashFunction extends com.google.common.hash.AbstractCompositeHashFunction
{
    public final int bits;

    public transient void <init>(com.google.common.hash.HashFunction[])
    {
        com.google.common.hash.HashFunction[] $r1;
        com.google.common.hash.Hashing$ConcatenatedHashFunction r0;
        int $i0, $i1, $i2, $i3;
        com.google.common.hash.HashFunction $r2;
        boolean $z0;

        r0 := @this: com.google.common.hash.Hashing$ConcatenatedHashFunction;

        $r1 := @parameter0: com.google.common.hash.HashFunction[];

        specialinvoke r0.<com.google.common.hash.AbstractCompositeHashFunction: void <init>(com.google.common.hash.HashFunction[])>($r1);

        $i0 = lengthof $r1;

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r2 = $r1[$i1];

        $i3 = interfaceinvoke $r2.<com.google.common.hash.HashFunction: int bits()>();

        $i2 = $i2 + $i3;

        $i3 = interfaceinvoke $r2.<com.google.common.hash.HashFunction: int bits()>();

        $i3 = $i3 % 8;

        if $i3 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $i3 = interfaceinvoke $r2.<com.google.common.hash.HashFunction: int bits()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,java.lang.Object)>($z0, "the number of bits (%s) in hashFunction (%s) must be divisible by 8", $i3, $r2);

        $i1 = $i1 + 1;

        goto label1;

     label4:
        r0.<com.google.common.hash.Hashing$ConcatenatedHashFunction: int bits> = $i2;

        return;
    }

    public void <init>(com.google.common.hash.HashFunction[], com.google.common.hash.Hashing$1)
    {
        com.google.common.hash.HashFunction[] $r1;
        com.google.common.hash.Hashing$1 $r2;
        com.google.common.hash.Hashing$ConcatenatedHashFunction r0;

        r0 := @this: com.google.common.hash.Hashing$ConcatenatedHashFunction;

        $r1 := @parameter0: com.google.common.hash.HashFunction[];

        $r2 := @parameter1: com.google.common.hash.Hashing$1;

        specialinvoke r0.<com.google.common.hash.Hashing$ConcatenatedHashFunction: void <init>(com.google.common.hash.HashFunction[])>($r1);

        return;
    }

    public int bits()
    {
        int i0;
        com.google.common.hash.Hashing$ConcatenatedHashFunction r0;

        r0 := @this: com.google.common.hash.Hashing$ConcatenatedHashFunction;

        i0 = r0.<com.google.common.hash.Hashing$ConcatenatedHashFunction: int bits>;

        return i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.hash.HashFunction[] $r3, $r4;
        java.lang.Object $r1;
        com.google.common.hash.Hashing$ConcatenatedHashFunction r0, $r2;
        boolean $z0;

        r0 := @this: com.google.common.hash.Hashing$ConcatenatedHashFunction;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.hash.Hashing$ConcatenatedHashFunction;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.hash.Hashing$ConcatenatedHashFunction) $r1;

        $r3 = r0.<com.google.common.hash.AbstractCompositeHashFunction: com.google.common.hash.HashFunction[] functions>;

        $r4 = $r2.<com.google.common.hash.AbstractCompositeHashFunction: com.google.common.hash.HashFunction[] functions>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4);

        return $z0;

     label1:
        return 0;
    }

    public int hashCode()
    {
        int $i0, $i1;
        com.google.common.hash.HashFunction[] $r1;
        com.google.common.hash.Hashing$ConcatenatedHashFunction r0;

        r0 := @this: com.google.common.hash.Hashing$ConcatenatedHashFunction;

        $r1 = r0.<com.google.common.hash.AbstractCompositeHashFunction: com.google.common.hash.HashFunction[] functions>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i1 = $i0 * 31;

        $i0 = r0.<com.google.common.hash.Hashing$ConcatenatedHashFunction: int bits>;

        $i0 = $i1 + $i0;

        return $i0;
    }

    public com.google.common.hash.HashCode makeHash(com.google.common.hash.Hasher[])
    {
        byte[] $r2;
        com.google.common.hash.HashCode $r4;
        com.google.common.hash.Hasher[] $r1;
        com.google.common.hash.Hashing$ConcatenatedHashFunction r0;
        int $i0, $i1, $i2, $i3;
        com.google.common.hash.Hasher $r3;

        r0 := @this: com.google.common.hash.Hashing$ConcatenatedHashFunction;

        $r1 := @parameter0: com.google.common.hash.Hasher[];

        $i0 = r0.<com.google.common.hash.Hashing$ConcatenatedHashFunction: int bits>;

        $i0 = $i0 / 8;

        $r2 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r3 = $r1[$i1];

        $r4 = interfaceinvoke $r3.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>();

        $i3 = virtualinvoke $r4.<com.google.common.hash.HashCode: int bits()>();

        $i3 = $i3 / 8;

        $i3 = virtualinvoke $r4.<com.google.common.hash.HashCode: int writeBytesTo(byte[],int,int)>($r2, $i2, $i3);

        $i2 = $i2 + $i3;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <com.google.common.hash.HashCode: com.google.common.hash.HashCode fromBytesNoCopy(byte[])>($r2);

        return $r4;
    }
}
