public class com.google.common.collect.Collections2$PermutationIterator extends com.google.common.collect.AbstractIterator
{
    public final int[] c;
    public int j;
    public final java.util.List list;
    public final int[] o;

    public void <init>(java.util.List)
    {
        com.google.common.collect.Collections2$PermutationIterator r0;
        java.util.List $r1;
        int[] $r3;
        int $i0;
        java.util.ArrayList $r2;

        r0 := @this: com.google.common.collect.Collections2$PermutationIterator;

        $r1 := @parameter0: java.util.List;

        specialinvoke r0.<com.google.common.collect.AbstractIterator: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

        r0.<com.google.common.collect.Collections2$PermutationIterator: java.util.List list> = $r2;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = newarray (int)[$i0];

        r0.<com.google.common.collect.Collections2$PermutationIterator: int[] c> = $r3;

        $r3 = newarray (int)[$i0];

        r0.<com.google.common.collect.Collections2$PermutationIterator: int[] o> = $r3;

        $r3 = r0.<com.google.common.collect.Collections2$PermutationIterator: int[] c>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r3, 0);

        $r3 = r0.<com.google.common.collect.Collections2$PermutationIterator: int[] o>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r3, 1);

        r0.<com.google.common.collect.Collections2$PermutationIterator: int j> = 2147483647;

        return;
    }

    public void calculateNextPermutation()
    {
        com.google.common.collect.Collections2$PermutationIterator r0;
        java.util.List $r1;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.google.common.collect.Collections2$PermutationIterator;

        $r1 = r0.<com.google.common.collect.Collections2$PermutationIterator: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = -1;

        $i0 = $i0 + $i2;

        r0.<com.google.common.collect.Collections2$PermutationIterator: int j> = $i0;

        $i0 = r0.<com.google.common.collect.Collections2$PermutationIterator: int j>;

        $i2 = -1;

        if $i0 != $i2 goto label1;

        return;

     label1:
        $i0 = 0;

     label2:
        $r2 = r0.<com.google.common.collect.Collections2$PermutationIterator: int[] c>;

        $i1 = r0.<com.google.common.collect.Collections2$PermutationIterator: int j>;

        $i2 = $r2[$i1];

        $r3 = r0.<com.google.common.collect.Collections2$PermutationIterator: int[] o>;

        $i3 = $r3[$i1];

        $i2 = $i2 + $i3;

        if $i2 >= 0 goto label3;

        virtualinvoke r0.<com.google.common.collect.Collections2$PermutationIterator: void switchDirection()>();

        goto label2;

     label3:
        $i3 = $i1 + 1;

        if $i2 != $i3 goto label5;

        if $i1 != 0 goto label4;

        return;

     label4:
        $i0 = $i0 + 1;

        virtualinvoke r0.<com.google.common.collect.Collections2$PermutationIterator: void switchDirection()>();

        goto label2;

     label5:
        $r1 = r0.<com.google.common.collect.Collections2$PermutationIterator: java.util.List list>;

        $i3 = $r2[$i1];

        $i3 = $i1 - $i3;

        $i3 = $i3 + $i0;

        $i1 = $i1 - $i2;

        $i0 = $i1 + $i0;

        staticinvoke <java.util.Collections: void swap(java.util.List,int,int)>($r1, $i3, $i0);

        $r2 = r0.<com.google.common.collect.Collections2$PermutationIterator: int[] c>;

        $i0 = r0.<com.google.common.collect.Collections2$PermutationIterator: int j>;

        $r2[$i0] = $i2;

        return;
    }

    public volatile java.lang.Object computeNext()
    {
        com.google.common.collect.Collections2$PermutationIterator r0;
        java.util.List $r1;

        r0 := @this: com.google.common.collect.Collections2$PermutationIterator;

        $r1 = virtualinvoke r0.<com.google.common.collect.Collections2$PermutationIterator: java.util.List computeNext()>();

        return $r1;
    }

    public java.util.List computeNext()
    {
        com.google.common.collect.Collections2$PermutationIterator r0;
        java.util.List $r2;
        com.google.common.collect.ImmutableList $r3;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.Collections2$PermutationIterator;

        $i0 = r0.<com.google.common.collect.Collections2$PermutationIterator: int j>;

        if $i0 > 0 goto label1;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractIterator: java.lang.Object endOfData()>();

        $r2 = (java.util.List) $r1;

        return $r2;

     label1:
        $r2 = r0.<com.google.common.collect.Collections2$PermutationIterator: java.util.List list>;

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r2);

        virtualinvoke r0.<com.google.common.collect.Collections2$PermutationIterator: void calculateNextPermutation()>();

        return $r3;
    }

    public void switchDirection()
    {
        com.google.common.collect.Collections2$PermutationIterator r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.Collections2$PermutationIterator;

        $r1 = r0.<com.google.common.collect.Collections2$PermutationIterator: int[] o>;

        $i0 = r0.<com.google.common.collect.Collections2$PermutationIterator: int j>;

        $i1 = $r1[$i0];

        $i1 = neg $i1;

        $r1[$i0] = $i1;

        $i1 = -1;

        $i0 = $i0 + $i1;

        r0.<com.google.common.collect.Collections2$PermutationIterator: int j> = $i0;

        return;
    }
}
