public class project.android.imageprocessing.filter.effect.PixellateFilter extends project.android.imageprocessing.filter.BasicFilter
{
    public static final java.lang.String UNIFORM_ASPECT_RATIO;
    public static final java.lang.String UNIFORM_FRACTIONAL_WIDTH;
    public float aspectRatio;
    public int aspectRatioHandle;
    public float fractionalWidth;
    public int fractionalWidthHandle;

    public void <init>(float, float)
    {
        float $f0, $f1;
        project.android.imageprocessing.filter.effect.PixellateFilter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.PixellateFilter;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        specialinvoke r0.<project.android.imageprocessing.filter.BasicFilter: void <init>()>();

        r0.<project.android.imageprocessing.filter.effect.PixellateFilter: float fractionalWidth> = $f0;

        r0.<project.android.imageprocessing.filter.effect.PixellateFilter: float aspectRatio> = $f1;

        return;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.filter.effect.PixellateFilter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.PixellateFilter;

        return "precision mediump float;\nuniform sampler2D u_Texture0;\nvarying vec2 v_TexCoord;\nuniform float u_FractionalWidth;\nuniform float u_AspectRatio;\nvoid main(){\n   highp vec2 sampleDivisor = vec2(u_FractionalWidth, u_FractionalWidth / u_AspectRatio);\n   highp vec2 samplePos = v_TexCoord - mod(v_TexCoord, sampleDivisor) + 0.5 * sampleDivisor;\n   gl_FragColor = texture2D(u_Texture0, samplePos);\n}\n";
    }

    public void initShaderHandles()
    {
        int $i0;
        project.android.imageprocessing.filter.effect.PixellateFilter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.PixellateFilter;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void initShaderHandles()>();

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_FractionalWidth");

        r0.<project.android.imageprocessing.filter.effect.PixellateFilter: int fractionalWidthHandle> = $i0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_AspectRatio");

        r0.<project.android.imageprocessing.filter.effect.PixellateFilter: int aspectRatioHandle> = $i0;

        return;
    }

    public void passShaderValues()
    {
        int $i0;
        float $f0;
        project.android.imageprocessing.filter.effect.PixellateFilter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.PixellateFilter;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void passShaderValues()>();

        $i0 = r0.<project.android.imageprocessing.filter.effect.PixellateFilter: int fractionalWidthHandle>;

        $f0 = r0.<project.android.imageprocessing.filter.effect.PixellateFilter: float fractionalWidth>;

        staticinvoke <android.opengl.GLES20: void glUniform1f(int,float)>($i0, $f0);

        $i0 = r0.<project.android.imageprocessing.filter.effect.PixellateFilter: int aspectRatioHandle>;

        $f0 = r0.<project.android.imageprocessing.filter.effect.PixellateFilter: float aspectRatio>;

        staticinvoke <android.opengl.GLES20: void glUniform1f(int,float)>($i0, $f0);

        return;
    }

    public static void <clinit>()
    {
        <project.android.imageprocessing.filter.effect.PixellateFilter: java.lang.String UNIFORM_FRACTIONAL_WIDTH> = "u_FractionalWidth";

        <project.android.imageprocessing.filter.effect.PixellateFilter: java.lang.String UNIFORM_ASPECT_RATIO> = "u_AspectRatio";

        return;
    }
}
