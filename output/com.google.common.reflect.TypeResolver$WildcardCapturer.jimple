public class com.google.common.reflect.TypeResolver$WildcardCapturer extends java.lang.Object
{
    public final java.util.concurrent.atomic.AtomicInteger id;

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        com.google.common.reflect.TypeResolver$WildcardCapturer r0;

        r0 := @this: com.google.common.reflect.TypeResolver$WildcardCapturer;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        specialinvoke r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: void <init>(java.util.concurrent.atomic.AtomicInteger)>($r1);

        return;
    }

    public void <init>(java.util.concurrent.atomic.AtomicInteger)
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        com.google.common.reflect.TypeResolver$WildcardCapturer r0;

        r0 := @this: com.google.common.reflect.TypeResolver$WildcardCapturer;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: java.util.concurrent.atomic.AtomicInteger id> = $r1;

        return;
    }

    public void <init>(java.util.concurrent.atomic.AtomicInteger, com.google.common.reflect.TypeResolver$1)
    {
        com.google.common.reflect.TypeResolver$1 $r2;
        java.util.concurrent.atomic.AtomicInteger $r1;
        com.google.common.reflect.TypeResolver$WildcardCapturer r0;

        r0 := @this: com.google.common.reflect.TypeResolver$WildcardCapturer;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicInteger;

        $r2 := @parameter1: com.google.common.reflect.TypeResolver$1;

        specialinvoke r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: void <init>(java.util.concurrent.atomic.AtomicInteger)>($r1);

        return;
    }

    private java.lang.reflect.Type captureNullable(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r1;
        com.google.common.reflect.TypeResolver$WildcardCapturer r0;

        r0 := @this: com.google.common.reflect.TypeResolver$WildcardCapturer;

        $r1 := @parameter0: java.lang.reflect.Type;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: java.lang.reflect.Type capture(java.lang.reflect.Type)>($r1);

        return $r1;
    }

    private com.google.common.reflect.TypeResolver$WildcardCapturer forTypeVariable(java.lang.reflect.TypeVariable)
    {
        java.util.concurrent.atomic.AtomicInteger $r3;
        com.google.common.reflect.TypeResolver$WildcardCapturer$1 $r2;
        java.lang.reflect.TypeVariable $r1;
        com.google.common.reflect.TypeResolver$WildcardCapturer r0;

        r0 := @this: com.google.common.reflect.TypeResolver$WildcardCapturer;

        $r1 := @parameter0: java.lang.reflect.TypeVariable;

        $r2 = new com.google.common.reflect.TypeResolver$WildcardCapturer$1;

        $r3 = r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: java.util.concurrent.atomic.AtomicInteger id>;

        specialinvoke $r2.<com.google.common.reflect.TypeResolver$WildcardCapturer$1: void <init>(com.google.common.reflect.TypeResolver$WildcardCapturer,java.util.concurrent.atomic.AtomicInteger,java.lang.reflect.TypeVariable)>(r0, $r3, $r1);

        return $r2;
    }

    private com.google.common.reflect.TypeResolver$WildcardCapturer notForTypeVariable()
    {
        java.util.concurrent.atomic.AtomicInteger $r2;
        com.google.common.reflect.TypeResolver$WildcardCapturer r0, $r1;

        r0 := @this: com.google.common.reflect.TypeResolver$WildcardCapturer;

        $r1 = new com.google.common.reflect.TypeResolver$WildcardCapturer;

        $r2 = r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: java.util.concurrent.atomic.AtomicInteger id>;

        specialinvoke $r1.<com.google.common.reflect.TypeResolver$WildcardCapturer: void <init>(java.util.concurrent.atomic.AtomicInteger)>($r2);

        return $r1;
    }

    public final java.lang.reflect.Type capture(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType $r2;
        java.lang.reflect.TypeVariable $r7;
        java.lang.reflect.WildcardType $r9;
        java.lang.AssertionError $r10;
        com.google.common.reflect.TypeResolver$WildcardCapturer r0, $r8;
        java.lang.reflect.ParameterizedType $r3;
        java.lang.reflect.Type $r1;
        java.lang.reflect.TypeVariable[] $r5;
        java.lang.reflect.Type[] $r6;
        int $i0, $i1;
        java.lang.Class $r4;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeResolver$WildcardCapturer;

        $r1 := @parameter0: java.lang.reflect.Type;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = $r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $z0 = $r1 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        $z0 = $r1 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label3;

        $r2 = (java.lang.reflect.GenericArrayType) $r1;

        r0 = specialinvoke r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: com.google.common.reflect.TypeResolver$WildcardCapturer notForTypeVariable()>();

        $r1 = interfaceinvoke $r2.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r1 = virtualinvoke r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: java.lang.reflect.Type capture(java.lang.reflect.Type)>($r1);

        $r1 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)>($r1);

        return $r1;

     label3:
        $z0 = $r1 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label6;

        $r3 = (java.lang.reflect.ParameterizedType) $r1;

        $r1 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r4 = (java.lang.Class) $r1;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $r6 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = 0;

     label4:
        $i1 = lengthof $r6;

        if $i0 >= $i1 goto label5;

        $r7 = $r5[$i0];

        $r8 = specialinvoke r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: com.google.common.reflect.TypeResolver$WildcardCapturer forTypeVariable(java.lang.reflect.TypeVariable)>($r7);

        $r1 = $r6[$i0];

        $r1 = virtualinvoke $r8.<com.google.common.reflect.TypeResolver$WildcardCapturer: java.lang.reflect.Type capture(java.lang.reflect.Type)>($r1);

        $r6[$i0] = $r1;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        r0 = specialinvoke r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: com.google.common.reflect.TypeResolver$WildcardCapturer notForTypeVariable()>();

        $r1 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r1 = specialinvoke r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: java.lang.reflect.Type captureNullable(java.lang.reflect.Type)>($r1);

        $r3 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])>($r1, $r4, $r6);

        return $r3;

     label6:
        $z0 = $r1 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label7;

        $r9 = (java.lang.reflect.WildcardType) $r1;

        $r6 = interfaceinvoke $r9.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $i0 = lengthof $r6;

        if $i0 != 0 goto label9;

        $r6 = interfaceinvoke $r9.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r7 = virtualinvoke r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: java.lang.reflect.TypeVariable captureAsTypeVariable(java.lang.reflect.Type[])>($r6);

        return $r7;

     label7:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>("must have been one of the known types");

        goto label8;

     label8:
        throw $r10;

     label9:
        return $r1;
    }

    public java.lang.reflect.TypeVariable captureAsTypeVariable(java.lang.reflect.Type[])
    {
        java.lang.reflect.TypeVariable $r6;
        com.google.common.reflect.TypeResolver$WildcardCapturer r0;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.lang.reflect.Type[] $r1;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        com.google.common.base.Joiner $r4;

        r0 := @this: com.google.common.reflect.TypeResolver$WildcardCapturer;

        $r1 := @parameter0: java.lang.reflect.Type[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capture#");

        $r3 = r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: java.util.concurrent.atomic.AtomicInteger id>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-of ? extends ");

        $r4 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(char)>(38);

        $r5 = virtualinvoke $r4.<com.google.common.base.Joiner: java.lang.String join(java.lang.Object[])>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.TypeVariable newArtificialTypeVariable(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])>(class "Lcom/google/common/reflect/TypeResolver$WildcardCapturer;", $r5, $r1);

        return $r6;
    }
}
