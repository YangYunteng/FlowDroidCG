public class org.dom4j.rule.Mode extends java.lang.Object
{
    public java.util.Map attributeNameRuleSets;
    public java.util.Map elementNameRuleSets;
    public org.dom4j.rule.RuleSet[] ruleSets;

    public void <init>()
    {
        org.dom4j.rule.RuleSet[] $r1;
        org.dom4j.rule.Mode r0;

        r0 := @this: org.dom4j.rule.Mode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.dom4j.rule.RuleSet)[14];

        r0.<org.dom4j.rule.Mode: org.dom4j.rule.RuleSet[] ruleSets> = $r1;

        return;
    }

    public void addRule(org.dom4j.rule.Rule)
    {
        org.dom4j.rule.Mode r0;
        org.dom4j.rule.RuleSet $r5;
        short $s0, $s1;
        java.util.Map $r3;
        int $i2, $i3;
        org.dom4j.rule.RuleSet[] $r4;
        org.dom4j.rule.Rule $r1;
        java.lang.String $r2;

        r0 := @this: org.dom4j.rule.Mode;

        $r1 := @parameter0: org.dom4j.rule.Rule;

        $s0 = virtualinvoke $r1.<org.dom4j.rule.Rule: short getMatchType()>();

        $s1 = $s0;

        $r2 = virtualinvoke $r1.<org.dom4j.rule.Rule: java.lang.String getMatchesNodeName()>();

        $i2 = 1;

        if $r2 == null goto label2;

        if $s0 != 1 goto label1;

        $r3 = r0.<org.dom4j.rule.Mode: java.util.Map elementNameRuleSets>;

        $r3 = virtualinvoke r0.<org.dom4j.rule.Mode: java.util.Map addToNameMap(java.util.Map,java.lang.String,org.dom4j.rule.Rule)>($r3, $r2, $r1);

        r0.<org.dom4j.rule.Mode: java.util.Map elementNameRuleSets> = $r3;

        goto label2;

     label1:
        $i3 = (int) $s0;

        if $i3 != 2 goto label2;

        $r3 = r0.<org.dom4j.rule.Mode: java.util.Map attributeNameRuleSets>;

        $r3 = virtualinvoke r0.<org.dom4j.rule.Mode: java.util.Map addToNameMap(java.util.Map,java.lang.String,org.dom4j.rule.Rule)>($r3, $r2, $r1);

        r0.<org.dom4j.rule.Mode: java.util.Map attributeNameRuleSets> = $r3;

     label2:
        $i3 = (int) $s0;

        if $i3 < 14 goto label3;

        $s1 = 0;

     label3:
        if $s1 != 0 goto label7;

        $r4 = r0.<org.dom4j.rule.Mode: org.dom4j.rule.RuleSet[] ruleSets>;

        $i3 = lengthof $r4;

     label4:
        if $i2 < $i3 goto label5;

        goto label7;

     label5:
        $r4 = r0.<org.dom4j.rule.Mode: org.dom4j.rule.RuleSet[] ruleSets>;

        $r5 = $r4[$i2];

        if $r5 == null goto label6;

        virtualinvoke $r5.<org.dom4j.rule.RuleSet: void addRule(org.dom4j.rule.Rule)>($r1);

     label6:
        $i2 = $i2 + 1;

        goto label4;

     label7:
        $r5 = virtualinvoke r0.<org.dom4j.rule.Mode: org.dom4j.rule.RuleSet getRuleSet(int)>($s1);

        virtualinvoke $r5.<org.dom4j.rule.RuleSet: void addRule(org.dom4j.rule.Rule)>($r1);

        return;
    }

    public java.util.Map addToNameMap(java.util.Map, java.lang.String, org.dom4j.rule.Rule)
    {
        org.dom4j.rule.Mode r0;
        java.util.HashMap $r6;
        org.dom4j.rule.RuleSet $r5, $r7;
        java.util.Map $r4;
        java.lang.Object $r3;
        java.lang.String $r1;
        org.dom4j.rule.Rule $r2;

        r0 := @this: org.dom4j.rule.Mode;

        $r4 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.dom4j.rule.Rule;

        if $r4 != null goto label1;

        $r6 = new java.util.HashMap;

        $r4 = $r6;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

     label1:
        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (org.dom4j.rule.RuleSet) $r3;

        if $r5 != null goto label2;

        $r7 = new org.dom4j.rule.RuleSet;

        $r5 = $r7;

        specialinvoke $r7.<org.dom4j.rule.RuleSet: void <init>()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

     label2:
        virtualinvoke $r5.<org.dom4j.rule.RuleSet: void addRule(org.dom4j.rule.Rule)>($r2);

        return $r4;
    }

    public void applyTemplates(org.dom4j.Document)
    {
        org.dom4j.Document $r1;
        org.dom4j.rule.Mode r0;
        org.dom4j.Node $r2;
        int $i0, $i1;

        r0 := @this: org.dom4j.rule.Mode;

        $r1 := @parameter0: org.dom4j.Document;

        $i0 = interfaceinvoke $r1.<org.dom4j.Branch: int nodeCount()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return;

     label2:
        $r2 = interfaceinvoke $r1.<org.dom4j.Branch: org.dom4j.Node node(int)>($i1);

        virtualinvoke r0.<org.dom4j.rule.Mode: void fireRule(org.dom4j.Node)>($r2);

        $i1 = $i1 + 1;

        goto label1;
    }

    public void applyTemplates(org.dom4j.Element)
    {
        org.dom4j.rule.Mode r0;
        org.dom4j.Node $r2;
        int $i0, $i1, $i2;
        org.dom4j.Element $r1;
        org.dom4j.Attribute $r3;

        r0 := @this: org.dom4j.rule.Mode;

        $r1 := @parameter0: org.dom4j.Element;

        $i0 = interfaceinvoke $r1.<org.dom4j.Element: int attributeCount()>();

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i2 < $i0 goto label4;

        $i0 = interfaceinvoke $r1.<org.dom4j.Branch: int nodeCount()>();

     label2:
        if $i1 < $i0 goto label3;

        return;

     label3:
        $r2 = interfaceinvoke $r1.<org.dom4j.Branch: org.dom4j.Node node(int)>($i1);

        virtualinvoke r0.<org.dom4j.rule.Mode: void fireRule(org.dom4j.Node)>($r2);

        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r3 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Attribute attribute(int)>($i2);

        virtualinvoke r0.<org.dom4j.rule.Mode: void fireRule(org.dom4j.Node)>($r3);

        $i2 = $i2 + 1;

        goto label1;
    }

    public void fireRule(org.dom4j.Node)
    {
        org.dom4j.rule.Action $r3;
        org.dom4j.rule.Mode r0;
        org.dom4j.Node $r1;
        org.dom4j.rule.Rule $r2;

        r0 := @this: org.dom4j.rule.Mode;

        $r1 := @parameter0: org.dom4j.Node;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.dom4j.rule.Mode: org.dom4j.rule.Rule getMatchingRule(org.dom4j.Node)>($r1);

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<org.dom4j.rule.Rule: org.dom4j.rule.Action getAction()>();

        if $r3 == null goto label1;

        interfaceinvoke $r3.<org.dom4j.rule.Action: void run(org.dom4j.Node)>($r1);

     label1:
        return;
    }

    public org.dom4j.rule.Rule getMatchingRule(org.dom4j.Node)
    {
        org.dom4j.rule.Mode r0;
        org.dom4j.Node $r1;
        org.dom4j.rule.RuleSet $r5;
        short $s0, $s1;
        java.util.Map $r2;
        org.dom4j.rule.RuleSet[] $r7;
        int $i2, $i3;
        java.lang.Object $r4;
        java.lang.String $r3;
        org.dom4j.rule.Rule $r6;

        r0 := @this: org.dom4j.rule.Mode;

        $r1 := @parameter0: org.dom4j.Node;

        $s0 = interfaceinvoke $r1.<org.dom4j.Node: short getNodeType()>();

        $s1 = $s0;

        if $s0 != 1 goto label1;

        $r2 = r0.<org.dom4j.rule.Mode: java.util.Map elementNameRuleSets>;

        if $r2 == null goto label2;

        $r3 = interfaceinvoke $r1.<org.dom4j.Node: java.lang.String getName()>();

        $r2 = r0.<org.dom4j.rule.Mode: java.util.Map elementNameRuleSets>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (org.dom4j.rule.RuleSet) $r4;

        if $r5 == null goto label2;

        $r6 = virtualinvoke $r5.<org.dom4j.rule.RuleSet: org.dom4j.rule.Rule getMatchingRule(org.dom4j.Node)>($r1);

        if $r6 == null goto label2;

        return $r6;

     label1:
        $i2 = (int) $s0;

        if $i2 != 2 goto label2;

        $r2 = r0.<org.dom4j.rule.Mode: java.util.Map attributeNameRuleSets>;

        if $r2 == null goto label2;

        $r3 = interfaceinvoke $r1.<org.dom4j.Node: java.lang.String getName()>();

        $r2 = r0.<org.dom4j.rule.Mode: java.util.Map attributeNameRuleSets>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (org.dom4j.rule.RuleSet) $r4;

        if $r5 == null goto label2;

        $r6 = virtualinvoke $r5.<org.dom4j.rule.RuleSet: org.dom4j.rule.Rule getMatchingRule(org.dom4j.Node)>($r1);

        if $r6 == null goto label2;

        return $r6;

     label2:
        $i2 = (int) $s0;

        if $i2 < 0 goto label3;

        $r7 = r0.<org.dom4j.rule.Mode: org.dom4j.rule.RuleSet[] ruleSets>;

        $i2 = lengthof $r7;

        $i3 = (int) $s0;

        if $i3 < $i2 goto label4;

     label3:
        $s1 = 0;

     label4:
        $r6 = null;

        $r7 = r0.<org.dom4j.rule.Mode: org.dom4j.rule.RuleSet[] ruleSets>;

        $r5 = $r7[$s1];

        if $r5 == null goto label5;

        $r6 = virtualinvoke $r5.<org.dom4j.rule.RuleSet: org.dom4j.rule.Rule getMatchingRule(org.dom4j.Node)>($r1);

     label5:
        if $r6 != null goto label6;

        if $s1 == 0 goto label6;

        $r7 = r0.<org.dom4j.rule.Mode: org.dom4j.rule.RuleSet[] ruleSets>;

        $r5 = $r7[0];

        if $r5 == null goto label6;

        $r6 = virtualinvoke $r5.<org.dom4j.rule.RuleSet: org.dom4j.rule.Rule getMatchingRule(org.dom4j.Node)>($r1);

     label6:
        return $r6;
    }

    public org.dom4j.rule.RuleSet getRuleSet(int)
    {
        org.dom4j.rule.Mode r0;
        org.dom4j.rule.RuleSet[] $r1;
        int $i0;
        org.dom4j.rule.RuleSet $r2, $r3;

        r0 := @this: org.dom4j.rule.Mode;

        $i0 := @parameter0: int;

        $r1 = r0.<org.dom4j.rule.Mode: org.dom4j.rule.RuleSet[] ruleSets>;

        $r2 = $r1[$i0];

        if $r2 != null goto label1;

        $r2 = new org.dom4j.rule.RuleSet;

        specialinvoke $r2.<org.dom4j.rule.RuleSet: void <init>()>();

        $r1 = r0.<org.dom4j.rule.Mode: org.dom4j.rule.RuleSet[] ruleSets>;

        $r1[$i0] = $r2;

        if $i0 == 0 goto label1;

        $r3 = $r1[0];

        if $r3 == null goto label1;

        virtualinvoke $r2.<org.dom4j.rule.RuleSet: void addAll(org.dom4j.rule.RuleSet)>($r3);

     label1:
        return $r2;
    }

    public void removeFromNameMap(java.util.Map, java.lang.String, org.dom4j.rule.Rule)
    {
        org.dom4j.rule.Mode r0;
        java.util.Map $r4;
        java.lang.Object $r3;
        java.lang.String $r1;
        org.dom4j.rule.Rule $r2;
        org.dom4j.rule.RuleSet $r5;

        r0 := @this: org.dom4j.rule.Mode;

        $r4 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.dom4j.rule.Rule;

        if $r4 == null goto label1;

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (org.dom4j.rule.RuleSet) $r3;

        if $r5 == null goto label1;

        virtualinvoke $r5.<org.dom4j.rule.RuleSet: void removeRule(org.dom4j.rule.Rule)>($r2);

     label1:
        return;
    }

    public void removeRule(org.dom4j.rule.Rule)
    {
        org.dom4j.rule.Mode r0;
        org.dom4j.rule.RuleSet $r4;
        short $s0, $s1;
        java.util.Map $r3;
        int $i2;
        org.dom4j.rule.Rule $r1;
        java.lang.String $r2;

        r0 := @this: org.dom4j.rule.Mode;

        $r1 := @parameter0: org.dom4j.rule.Rule;

        $s0 = virtualinvoke $r1.<org.dom4j.rule.Rule: short getMatchType()>();

        $s1 = $s0;

        $r2 = virtualinvoke $r1.<org.dom4j.rule.Rule: java.lang.String getMatchesNodeName()>();

        if $r2 == null goto label2;

        if $s0 != 1 goto label1;

        $r3 = r0.<org.dom4j.rule.Mode: java.util.Map elementNameRuleSets>;

        virtualinvoke r0.<org.dom4j.rule.Mode: void removeFromNameMap(java.util.Map,java.lang.String,org.dom4j.rule.Rule)>($r3, $r2, $r1);

        goto label2;

     label1:
        $i2 = (int) $s0;

        if $i2 != 2 goto label2;

        $r3 = r0.<org.dom4j.rule.Mode: java.util.Map attributeNameRuleSets>;

        virtualinvoke r0.<org.dom4j.rule.Mode: void removeFromNameMap(java.util.Map,java.lang.String,org.dom4j.rule.Rule)>($r3, $r2, $r1);

     label2:
        $i2 = (int) $s0;

        if $i2 < 14 goto label3;

        $s1 = 0;

     label3:
        $r4 = virtualinvoke r0.<org.dom4j.rule.Mode: org.dom4j.rule.RuleSet getRuleSet(int)>($s1);

        virtualinvoke $r4.<org.dom4j.rule.RuleSet: void removeRule(org.dom4j.rule.Rule)>($r1);

        if $s1 == 0 goto label4;

        $r4 = virtualinvoke r0.<org.dom4j.rule.Mode: org.dom4j.rule.RuleSet getRuleSet(int)>(0);

        virtualinvoke $r4.<org.dom4j.rule.RuleSet: void removeRule(org.dom4j.rule.Rule)>($r1);

     label4:
        return;
    }
}
