public final class com.google.android.gms.common.util.ArrayUtils extends java.lang.Object
{

    public void <init>()
    {
        com.google.android.gms.common.util.ArrayUtils r0;

        r0 := @this: com.google.android.gms.common.util.ArrayUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object[] appendToArray(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] $r0;
        int $i0;
        java.lang.Object $r1, $r4;
        java.lang.Class $r3;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object;

        if $r0 != null goto label2;

        if $r1 == null goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot generate array of generic type w/o class info");

        throw $r2;

     label2:
        if $r0 != null goto label3;

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, 1);

        $r0 = (java.lang.Object[]) $r4;

        goto label4;

     label3:
        $i0 = lengthof $r0;

        $i0 = $i0 + 1;

        $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i0);

     label4:
        $i0 = lengthof $r0;

        $i0 = $i0 - 1;

        $r0[$i0] = $r1;

        return $r0;
    }

    public static transient java.lang.Object[] concat(java.lang.Object[][])
    {
        java.lang.Object[] $r3, $r4;
        java.lang.Object[][] $r0;
        int $i0, $i1, $i2;
        java.lang.Class $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: java.lang.Object[][];

        $i1 = lengthof $r0;

        if $i1 != 0 goto label1;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, 0);

        $r3 = (java.lang.Object[]) $r2;

        return $r3;

     label1:
        $i1 = 0;

        $i2 = 0;

     label2:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label3;

        $r3 = $r0[$i1];

        $i0 = lengthof $r3;

        $i2 = $i2 + $i0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = $r0[0];

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i2);

        $r4 = $r0[0];

        $i1 = lengthof $r4;

        $i2 = 1;

     label4:
        $i0 = lengthof $r0;

        if $i2 >= $i0 goto label5;

        $r4 = $r0[$i2];

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, $i1, $i0);

        $i0 = lengthof $r4;

        $i1 = $i1 + $i0;

        $i2 = $i2 + 1;

        goto label4;

     label5:
        return $r3;
    }

    public static transient byte[] concatByteArrays(byte[][])
    {
        byte[] $r0, $r2;
        byte[][] $r1;
        int $i0, $i1, $i2;

        $r1 := @parameter0: byte[][];

        $i1 = lengthof $r1;

        if $i1 != 0 goto label1;

        $r0 = newarray (byte)[0];

        return $r0;

     label1:
        $i1 = 0;

        $i2 = 0;

     label2:
        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label3;

        $r0 = $r1[$i1];

        $i0 = lengthof $r0;

        $i2 = $i2 + $i0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r0 = $r1[0];

        $r0 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r0, $i2);

        $r2 = $r1[0];

        $i1 = lengthof $r2;

        $i2 = 1;

     label4:
        $i0 = lengthof $r1;

        if $i2 >= $i0 goto label5;

        $r2 = $r1[$i2];

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r0, $i1, $i0);

        $i0 = lengthof $r2;

        $i1 = $i1 + $i0;

        $i2 = $i2 + 1;

        goto label4;

     label5:
        return $r0;
    }

    public static boolean contains(int[], int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        return 0;

     label1:
        $i1 = lengthof $r0;

        $i3 = 0;

     label2:
        if $i3 >= $i1 goto label4;

        $i2 = $r0[$i3];

        if $i2 != $i0 goto label3;

        return 1;

     label3:
        $i3 = $i3 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static boolean contains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Object $r0, $r2;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object[];

        $r0 := @parameter1: java.lang.Object;

        if $r1 == null goto label1;

        $i0 = lengthof $r1;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label5;

        $r2 = $r1[$i1];

        $z0 = staticinvoke <com.google.android.gms.common.internal.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r0);

        if $z0 == 0 goto label4;

        goto label6;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $i1 = -1;

     label6:
        if $i1 < 0 goto label7;

        return 1;

     label7:
        return 0;
    }

    public static java.util.ArrayList newArrayList()
    {
        java.util.ArrayList $r0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        return $r0;
    }

    public static transient java.lang.Object[] removeAll(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] $r0, $r1, $r4;
        int $i0, $i1, $i2;
        java.lang.Class $r2;
        java.lang.Object $r3, $r5;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object[];

        if $r0 != null goto label01;

        return null;

     label01:
        if $r1 == null goto label10;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label02;

        goto label10;

     label02:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $i0 = lengthof $r0;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, $i0);

        $r4 = (java.lang.Object[]) $r3;

        $i0 = lengthof $r1;

        $i1 = 0;

        if $i0 != 1 goto label05;

        $i1 = lengthof $r0;

        $i2 = 0;

        $i0 = 0;

     label03:
        if $i2 >= $i1 goto label08;

        $r3 = $r0[$i2];

        $r5 = $r1[0];

        $z0 = staticinvoke <com.google.android.gms.common.internal.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r5, $r3);

        if $z0 != 0 goto label04;

        $r4[$i0] = $r3;

        $i0 = $i0 + 1;

     label04:
        $i2 = $i2 + 1;

        goto label03;

     label05:
        $i2 = lengthof $r0;

        $i0 = 0;

     label06:
        if $i1 >= $i2 goto label08;

        $r3 = $r0[$i1];

        $z0 = staticinvoke <com.google.android.gms.common.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r1, $r3);

        if $z0 != 0 goto label07;

        $r4[$i0] = $r3;

        $i0 = $i0 + 1;

     label07:
        $i1 = $i1 + 1;

        goto label06;

     label08:
        if $r4 != null goto label09;

        return null;

     label09:
        $i1 = lengthof $r4;

        if $i0 == $i1 goto label11;

        $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r4, $i0);

        return $r0;

     label10:
        $i0 = lengthof $r0;

        $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i0);

        return $r0;

     label11:
        return $r4;
    }

    public static java.util.ArrayList toArrayList(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        int $i0, $i1;
        java.lang.Object $r2;
        java.util.ArrayList $r1;

        $r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r0[$i1];

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static int[] toPrimitiveArray(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection $r0;
        java.lang.Integer $r4;
        int[] $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.Collection;

        $i1 = 0;

        if $r0 == null goto label4;

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label1;

        goto label4;

     label1:
        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        $r1 = newarray (int)[$i0];

        $r2 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r1[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r1;

     label4:
        $r1 = newarray (int)[0];

        return $r1;
    }

    public static java.lang.Integer[] toWrapperArray(int[])
    {
        int[] $r2;
        int $i0, $i1, $i2;
        java.lang.Integer $r1;
        java.lang.Integer[] $r0;

        $r2 := @parameter0: int[];

        if $r2 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r2;

        $r0 = newarray (java.lang.Integer)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $i2 = $r2[$i1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r0[$i1] = $r1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r0;
    }

    public static void writeArray(java.lang.StringBuilder, double[])
    {
        double[] $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r2;
        double $d0;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: double[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        if $i1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $d0 = $r1[$i1];

        $r2 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void writeArray(java.lang.StringBuilder, float[])
    {
        int $i0, $i1;
        float $f0;
        java.lang.StringBuilder $r0;
        float[] $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: float[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        if $i1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $f0 = $r1[$i1];

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void writeArray(java.lang.StringBuilder, int[])
    {
        int[] $r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r0;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: int[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        if $i1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $i2 = $r1[$i1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void writeArray(java.lang.StringBuilder, long[])
    {
        long[] $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        long $l2;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: long[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        if $i1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $l2 = $r1[$i1];

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void writeArray(java.lang.StringBuilder, java.lang.Object[])
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.Object $r3;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.Object[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        if $i1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r3 = $r1[$i1];

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void writeArray(java.lang.StringBuilder, boolean[])
    {
        boolean[] $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: boolean[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        if $i1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $z0 = $r1[$i1];

        $r2 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void writeStringArray(java.lang.StringBuilder, java.lang.String[])
    {
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.String[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        if $i1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r2 = $r1[$i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }
}
