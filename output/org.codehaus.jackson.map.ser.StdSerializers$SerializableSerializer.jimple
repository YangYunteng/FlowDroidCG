public final class org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer extends org.codehaus.jackson.map.ser.SerializerBase
{
    public static final org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer instance;

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer: org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer instance> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void <init>(java.lang.Class)>(class "Lorg/codehaus/jackson/map/JsonSerializable;");

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        java.lang.IllegalStateException $r17;
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.JsonNode $r15;
        org.codehaus.jackson.type.JavaType $r5;
        java.lang.String $r4, $r9, $r10, $r11, $r12;
        org.codehaus.jackson.node.ObjectNode $r3;
        boolean $z0;
        java.io.IOException $r16, $r18;
        java.lang.reflect.Type $r2;
        java.lang.'annotation'.Annotation $r7;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer r0;
        java.lang.Class $r6;
        java.lang.Object $r14;
        org.codehaus.jackson.schema.JsonSerializableSchema $r8;
        org.codehaus.jackson.map.ObjectMapper $r13;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createObjectNode()>();

        $r4 = null;

        if $r2 == null goto label03;

        $r5 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>($r2);

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/codehaus/jackson/schema/JsonSerializableSchema;");

        if $z0 == 0 goto label03;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/schema/JsonSerializableSchema;");

        $r8 = (org.codehaus.jackson.schema.JsonSerializableSchema) $r7;

        $r9 = interfaceinvoke $r8.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaType()>();

        $r10 = interfaceinvoke $r8.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaObjectPropertiesDefinition()>();

        $r11 = "##irrelevant";

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label01;

        $r10 = interfaceinvoke $r8.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaObjectPropertiesDefinition()>();

        goto label02;

     label01:
        $r10 = null;

     label02:
        $r12 = interfaceinvoke $r8.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaItemDefinition()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label04;

        $r4 = interfaceinvoke $r8.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaItemDefinition()>();

        goto label04;

     label03:
        $r9 = "any";

        $r10 = null;

     label04:
        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: void put(java.lang.String,java.lang.String)>("type", $r9);

        if $r10 == null goto label10;

        $r13 = new org.codehaus.jackson.map.ObjectMapper;

     label05:
        specialinvoke $r13.<org.codehaus.jackson.map.ObjectMapper: void <init>()>();

        $r14 = virtualinvoke $r13.<org.codehaus.jackson.map.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>($r10, class "Lorg/codehaus/jackson/JsonNode;");

     label06:
        $r15 = (org.codehaus.jackson.JsonNode) $r14;

     label07:
        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("properties", $r15);

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r16);

        throw $r17;

     label10:
        if $r4 == null goto label16;

        $r13 = new org.codehaus.jackson.map.ObjectMapper;

     label11:
        specialinvoke $r13.<org.codehaus.jackson.map.ObjectMapper: void <init>()>();

        $r14 = virtualinvoke $r13.<org.codehaus.jackson.map.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>($r4, class "Lorg/codehaus/jackson/JsonNode;");

     label12:
        $r15 = (org.codehaus.jackson.JsonNode) $r14;

     label13:
        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r15);

     label14:
        return $r3;

     label15:
        $r18 := @caughtexception;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r18);

        throw $r17;

     label16:
        return $r3;

        catch java.io.IOException from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label11 to label12 with label15;
        catch java.io.IOException from label13 to label14 with label15;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;
        org.codehaus.jackson.map.JsonSerializable $r4;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (org.codehaus.jackson.map.JsonSerializable) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer: void serialize(org.codehaus.jackson.map.JsonSerializable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serialize(org.codehaus.jackson.map.JsonSerializable, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.JsonSerializable $r1;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.JsonSerializable;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        interfaceinvoke $r1.<org.codehaus.jackson.map.JsonSerializable: void serialize(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r2, $r3);

        return;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r4;
        org.codehaus.jackson.map.JsonSerializable $r5;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (org.codehaus.jackson.map.JsonSerializable) $r4;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer: void serializeWithType(org.codehaus.jackson.map.JsonSerializable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, $r1, $r2, $r3);

        return;
    }

    public final void serializeWithType(org.codehaus.jackson.map.JsonSerializable, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.JsonSerializableWithType $r5;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        org.codehaus.jackson.map.JsonSerializable $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer;

        $r4 := @parameter0: org.codehaus.jackson.map.JsonSerializable;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $z0 = $r4 instanceof org.codehaus.jackson.map.JsonSerializableWithType;

        if $z0 == 0 goto label1;

        $r5 = (org.codehaus.jackson.map.JsonSerializableWithType) $r4;

        interfaceinvoke $r5.<org.codehaus.jackson.map.JsonSerializableWithType: void serializeWithType(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r1, $r2, $r3);

        return;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer: void serialize(org.codehaus.jackson.map.JsonSerializable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }
}
