public final class com.google.common.collect.Serialization extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.collect.Serialization r0;

        r0 := @this: com.google.common.collect.Serialization;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class, java.lang.String)
    {
        com.google.common.collect.Serialization$FieldSetter $r3;
        java.lang.NoSuchFieldException $r4;
        java.lang.Class $r1;
        java.lang.String $r2;
        java.lang.AssertionError $r5;
        java.lang.reflect.Field $r0;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

     label1:
        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r2);

     label2:
        $r3 = new com.google.common.collect.Serialization$FieldSetter;

     label3:
        specialinvoke $r3.<com.google.common.collect.Serialization$FieldSetter: void <init>(java.lang.reflect.Field,com.google.common.collect.Serialization$1)>($r0, null);

     label4:
        return $r3;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r5;

        catch java.lang.NoSuchFieldException from label1 to label2 with label5;
        catch java.lang.NoSuchFieldException from label3 to label4 with label5;
    }

    public static void populateMap(java.util.Map, java.io.ObjectInputStream)
    {
        java.io.ObjectInputStream $r1;
        int $i0;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.io.ObjectInputStream;

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        staticinvoke <com.google.common.collect.Serialization: void populateMap(java.util.Map,java.io.ObjectInputStream,int)>($r0, $r1, $i0);

        return;
    }

    public static void populateMap(java.util.Map, java.io.ObjectInputStream, int)
    {
        java.util.Map $r0;
        java.io.ObjectInputStream $r1;
        int $i0, $i1;
        java.lang.Object $r2, $r3;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.io.ObjectInputStream;

        $i0 := @parameter2: int;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void populateMultimap(com.google.common.collect.Multimap, java.io.ObjectInputStream)
    {
        java.io.ObjectInputStream $r1;
        int $i0;
        com.google.common.collect.Multimap $r0;

        $r0 := @parameter0: com.google.common.collect.Multimap;

        $r1 := @parameter1: java.io.ObjectInputStream;

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        staticinvoke <com.google.common.collect.Serialization: void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream,int)>($r0, $r1, $i0);

        return;
    }

    public static void populateMultimap(com.google.common.collect.Multimap, java.io.ObjectInputStream, int)
    {
        java.util.Collection $r3;
        java.io.ObjectInputStream $r1;
        com.google.common.collect.Multimap $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;

        $r0 := @parameter0: com.google.common.collect.Multimap;

        $r1 := @parameter1: java.io.ObjectInputStream;

        $i0 := @parameter2: int;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3 = interfaceinvoke $r0.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>($r2);

        $i2 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        $i3 = 0;

     label2:
        if $i3 >= $i2 goto label3;

        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        return;
    }

    public static void populateMultiset(com.google.common.collect.Multiset, java.io.ObjectInputStream)
    {
        java.io.ObjectInputStream $r1;
        int $i0;
        com.google.common.collect.Multiset $r0;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: java.io.ObjectInputStream;

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        staticinvoke <com.google.common.collect.Serialization: void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream,int)>($r0, $r1, $i0);

        return;
    }

    public static void populateMultiset(com.google.common.collect.Multiset, java.io.ObjectInputStream, int)
    {
        com.google.common.collect.Multiset $r0;
        java.io.ObjectInputStream $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: java.io.ObjectInputStream;

        $i0 := @parameter2: int;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $i2 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        interfaceinvoke $r0.<com.google.common.collect.Multiset: int add(java.lang.Object,int)>($r2, $i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static int readCount(java.io.ObjectInputStream)
    {
        int $i0;
        java.io.ObjectInputStream $r0;

        $r0 := @parameter0: java.io.ObjectInputStream;

        $i0 = virtualinvoke $r0.<java.io.ObjectInputStream: int readInt()>();

        return $i0;
    }

    public static void writeMap(java.util.Map, java.io.ObjectOutputStream)
    {
        java.util.Map$Entry $r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.Map $r1;
        int $i0;
        java.io.ObjectOutputStream $r0;
        java.lang.Object $r4;
        boolean $z0;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.io.ObjectOutputStream;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        virtualinvoke $r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        goto label1;

     label2:
        return;
    }

    public static void writeMultimap(com.google.common.collect.Multimap, java.io.ObjectOutputStream)
    {
        java.util.Map$Entry $r6;
        java.util.Iterator $r4, $r8;
        java.util.Collection $r7;
        java.util.Set $r3;
        com.google.common.collect.Multimap $r1;
        java.util.Map $r2;
        int $i0;
        java.io.ObjectOutputStream $r0;
        java.lang.Object $r5;
        boolean $z0;

        $r1 := @parameter0: com.google.common.collect.Multimap;

        $r0 := @parameter1: java.io.ObjectOutputStream;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multimap: java.util.Map asMap()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        virtualinvoke $r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multimap: java.util.Map asMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.util.Collection) $r5;

        $i0 = interfaceinvoke $r7.<java.util.Collection: int size()>();

        virtualinvoke $r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.util.Collection) $r5;

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        goto label2;

     label3:
        return;
    }

    public static void writeMultiset(com.google.common.collect.Multiset, java.io.ObjectOutputStream)
    {
        java.util.Iterator $r3;
        com.google.common.collect.Multiset $r1;
        java.util.Set $r2;
        com.google.common.collect.Multiset$Entry $r5;
        int $i0;
        java.io.ObjectOutputStream $r0;
        java.lang.Object $r4;
        boolean $z0;

        $r1 := @parameter0: com.google.common.collect.Multiset;

        $r0 := @parameter1: java.io.ObjectOutputStream;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        virtualinvoke $r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.common.collect.Multiset$Entry) $r4;

        $r4 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        virtualinvoke $r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        $i0 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: int getCount()>();

        virtualinvoke $r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        goto label1;

     label2:
        return;
    }
}
