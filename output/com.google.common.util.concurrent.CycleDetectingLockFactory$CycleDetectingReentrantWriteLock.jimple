public class com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock extends java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock
{
    public final com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock;
    public final com.google.common.util.concurrent.CycleDetectingLockFactory this$0;

    public void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory, com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r1;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;

        $r1 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory;

        $r2 := @parameter1: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory this$0> = $r1;

        specialinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>($r2);

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock> = $r2;

        return;
    }

    public void lock()
    {
        java.lang.Throwable $r3;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r1;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;

        $r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory this$0>;

        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r1, $r2);

     label1:
        specialinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

     label2:
        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r2);

        return;

     label3:
        $r3 := @caughtexception;

        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void lockInterruptibly()
    {
        java.lang.Throwable $r3;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r1;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;

        $r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory this$0>;

        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r1, $r2);

     label1:
        specialinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lockInterruptibly()>();

     label2:
        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r2);

        return;

     label3:
        $r3 := @caughtexception;

        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean tryLock()
    {
        java.lang.Throwable $r3;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;

        $r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory this$0>;

        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r1, $r2);

     label1:
        $z0 = specialinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean tryLock()>();

     label2:
        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r2);

        return $z0;

     label3:
        $r3 := @caughtexception;

        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean tryLock(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.lang.Throwable $r4;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock $r3;
        com.google.common.util.concurrent.CycleDetectingLockFactory $r2;
        long $l0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory this$0>;

        $r3 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r2, $r3);

     label1:
        $z0 = specialinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>($l0, $r1);

     label2:
        $r3 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r3);

        return $z0;

     label3:
        $r4 := @caughtexception;

        $r3 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void unlock()
    {
        java.lang.Throwable $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock r0;
        com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock $r1;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;

     label1:
        specialinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

     label2:
        $r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r1);

        return;

     label3:
        $r2 := @caughtexception;

        $r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock: com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock>;

        staticinvoke <com.google.common.util.concurrent.CycleDetectingLockFactory: void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock)>($r1);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
