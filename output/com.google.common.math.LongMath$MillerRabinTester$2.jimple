public final enum class com.google.common.math.LongMath$MillerRabinTester$2 extends com.google.common.math.LongMath$MillerRabinTester
{

    public void <init>(java.lang.String, int)
    {
        int $i0;
        java.lang.String $r1;
        com.google.common.math.LongMath$MillerRabinTester$2 r0;

        r0 := @this: com.google.common.math.LongMath$MillerRabinTester$2;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<com.google.common.math.LongMath$MillerRabinTester: void <init>(java.lang.String,int,com.google.common.math.LongMath$1)>($r1, $i0, null);

        return;
    }

    private long plusMod(long, long, long)
    {
        byte $b3;
        com.google.common.math.LongMath$MillerRabinTester$2 r0;
        int $i5;
        long $l0, $l1, $l2, $l4;

        r0 := @this: com.google.common.math.LongMath$MillerRabinTester$2;

        $l4 := @parameter0: long;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $l2 = $l1 - $l0;

        $b3 = $l4 cmp $l2;

        $i5 = (int) $b3;

        if $i5 < 0 goto label1;

        $l4 = $l4 + $l0;

        $l4 = $l4 - $l1;

        return $l4;

     label1:
        $l4 = $l4 + $l0;

        return $l4;
    }

    private long times2ToThe32Mod(long, long)
    {
        com.google.common.math.LongMath$MillerRabinTester$2 r0;
        int $i2, $i3;
        long $l0, $l1, $l4;

        r0 := @this: com.google.common.math.LongMath$MillerRabinTester$2;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $i2 = 32;

     label1:
        $i3 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l1);

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $l1 = $l1 << $i3;

        $l4 = staticinvoke <com.google.common.primitives.UnsignedLongs: long remainder(long,long)>($l1, $l0);

        $l1 = $l4;

        $i2 = $i2 - $i3;

        if $i2 > 0 goto label1;

        return $l4;
    }

    public long mulMod(long, long, long)
    {
        com.google.common.math.LongMath$MillerRabinTester$2 r0;
        long $l0, $l1, $l2, $l4, $l5, $l6;
        byte $b3;
        int $i7;

        r0 := @this: com.google.common.math.LongMath$MillerRabinTester$2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $l4 = $l0 >>> 32;

        $l5 = $l1 >>> 32;

        $l0 = $l0 & 4294967295L;

        $l1 = $l1 & 4294967295L;

        $l6 = $l4 * $l5;

        $l6 = specialinvoke r0.<com.google.common.math.LongMath$MillerRabinTester$2: long times2ToThe32Mod(long,long)>($l6, $l2);

        $l4 = $l4 * $l1;

        $l4 = $l6 + $l4;

        $b3 = $l4 cmp 0L;

        $i7 = (int) $b3;

        if $i7 >= 0 goto label1;

        $l4 = staticinvoke <com.google.common.primitives.UnsignedLongs: long remainder(long,long)>($l4, $l2);

     label1:
        staticinvoke <java.lang.Long: int signum(long)>($l0);

        $l5 = $l5 * $l0;

        $l5 = $l4 + $l5;

        $l5 = specialinvoke r0.<com.google.common.math.LongMath$MillerRabinTester$2: long times2ToThe32Mod(long,long)>($l5, $l2);

        $l0 = $l0 * $l1;

        $l0 = staticinvoke <com.google.common.primitives.UnsignedLongs: long remainder(long,long)>($l0, $l2);

        $l0 = specialinvoke r0.<com.google.common.math.LongMath$MillerRabinTester$2: long plusMod(long,long,long)>($l5, $l0, $l2);

        return $l0;
    }

    public long squareMod(long, long)
    {
        byte $b1;
        com.google.common.math.LongMath$MillerRabinTester$2 r0;
        int $i5;
        long $l0, $l2, $l3, $l4;

        r0 := @this: com.google.common.math.LongMath$MillerRabinTester$2;

        $l2 := @parameter0: long;

        $l0 := @parameter1: long;

        $l3 = $l2 >>> 32;

        $l2 = $l2 & 4294967295L;

        $l4 = $l3 * $l3;

        $l4 = specialinvoke r0.<com.google.common.math.LongMath$MillerRabinTester$2: long times2ToThe32Mod(long,long)>($l4, $l0);

        $l3 = $l3 * $l2;

        $l3 = $l3 * 2L;

        $b1 = $l3 cmp 0L;

        $i5 = (int) $b1;

        if $i5 >= 0 goto label1;

        $l3 = staticinvoke <com.google.common.primitives.UnsignedLongs: long remainder(long,long)>($l3, $l0);

     label1:
        $l4 = $l4 + $l3;

        $l4 = specialinvoke r0.<com.google.common.math.LongMath$MillerRabinTester$2: long times2ToThe32Mod(long,long)>($l4, $l0);

        $l2 = $l2 * $l2;

        $l2 = staticinvoke <com.google.common.primitives.UnsignedLongs: long remainder(long,long)>($l2, $l0);

        $l2 = specialinvoke r0.<com.google.common.math.LongMath$MillerRabinTester$2: long plusMod(long,long,long)>($l4, $l2, $l0);

        return $l2;
    }
}
