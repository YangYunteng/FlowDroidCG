public class org.dom4j.Namespace extends org.dom4j.tree.AbstractNode
{
    public static final org.dom4j.tree.NamespaceCache CACHE;
    public static final org.dom4j.Namespace NO_NAMESPACE;
    public static final org.dom4j.Namespace XML_NAMESPACE;
    public int hashCode;
    public java.lang.String prefix;
    public java.lang.String uri;

    static void <clinit>()
    {
        org.dom4j.Namespace $r1;
        org.dom4j.tree.NamespaceCache $r0;

        $r0 = new org.dom4j.tree.NamespaceCache;

        specialinvoke $r0.<org.dom4j.tree.NamespaceCache: void <init>()>();

        <org.dom4j.Namespace: org.dom4j.tree.NamespaceCache CACHE> = $r0;

        $r0 = <org.dom4j.Namespace: org.dom4j.tree.NamespaceCache CACHE>;

        $r1 = virtualinvoke $r0.<org.dom4j.tree.NamespaceCache: org.dom4j.Namespace get(java.lang.String,java.lang.String)>("xml", "http://www.w3.org/XML/1998/namespace");

        <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE> = $r1;

        $r0 = <org.dom4j.Namespace: org.dom4j.tree.NamespaceCache CACHE>;

        $r1 = virtualinvoke $r0.<org.dom4j.tree.NamespaceCache: org.dom4j.Namespace get(java.lang.String,java.lang.String)>("", "");

        <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE> = $r1;

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.Namespace r0;

        r0 := @this: org.dom4j.Namespace;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.dom4j.tree.AbstractNode: void <init>()>();

        if $r1 == null goto label1;

        goto label2;

     label1:
        $r1 = "";

     label2:
        r0.<org.dom4j.Namespace: java.lang.String prefix> = $r1;

        if $r2 == null goto label3;

        goto label4;

     label3:
        $r2 = "";

     label4:
        r0.<org.dom4j.Namespace: java.lang.String uri> = $r2;

        return;
    }

    public static org.dom4j.Namespace get(java.lang.String)
    {
        java.lang.String $r2;
        org.dom4j.Namespace $r1;
        org.dom4j.tree.NamespaceCache $r0;

        $r2 := @parameter0: java.lang.String;

        $r0 = <org.dom4j.Namespace: org.dom4j.tree.NamespaceCache CACHE>;

        $r1 = virtualinvoke $r0.<org.dom4j.tree.NamespaceCache: org.dom4j.Namespace get(java.lang.String)>($r2);

        return $r1;
    }

    public static org.dom4j.Namespace get(java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r2;
        org.dom4j.tree.NamespaceCache $r1;
        java.lang.String $r0, $r3;

        $r3 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r1 = <org.dom4j.Namespace: org.dom4j.tree.NamespaceCache CACHE>;

        $r2 = virtualinvoke $r1.<org.dom4j.tree.NamespaceCache: org.dom4j.Namespace get(java.lang.String,java.lang.String)>($r3, $r0);

        return $r2;
    }

    public void accept(org.dom4j.Visitor)
    {
        org.dom4j.Visitor $r1;
        org.dom4j.Namespace r0;

        r0 := @this: org.dom4j.Namespace;

        $r1 := @parameter0: org.dom4j.Visitor;

        interfaceinvoke $r1.<org.dom4j.Visitor: void visit(org.dom4j.Namespace)>(r0);

        return;
    }

    public java.lang.String asXML()
    {
        org.dom4j.Namespace r0;
        java.lang.StringBuffer $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.Namespace;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(10);

        $r2 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        goto label2;

     label1:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns=\"");

     label2:
        $r2 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getURI()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public int createHashCode()
    {
        org.dom4j.Namespace r0;
        int $i0, $i1;
        java.lang.String $r1;

        r0 := @this: org.dom4j.Namespace;

        $r1 = r0.<org.dom4j.Namespace: java.lang.String uri>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r1 = r0.<org.dom4j.Namespace: java.lang.String prefix>;

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i0 ^ $i1;

        if $i0 != 0 goto label1;

        $i0 = 47806;

     label1:
        return $i0;
    }

    public org.dom4j.Node createXPathResult(org.dom4j.Element)
    {
        org.dom4j.tree.DefaultNamespace $r2;
        org.dom4j.Namespace r0;
        org.dom4j.Element $r1;
        java.lang.String $r3, $r4;

        r0 := @this: org.dom4j.Namespace;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = new org.dom4j.tree.DefaultNamespace;

        $r3 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $r4 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getURI()>();

        specialinvoke $r2.<org.dom4j.tree.DefaultNamespace: void <init>(org.dom4j.Element,java.lang.String,java.lang.String)>($r1, $r3, $r4);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.dom4j.Namespace r0, $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.Namespace;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label2;

        $r2 = (org.dom4j.Namespace) $r1;

        $i0 = virtualinvoke r0.<org.dom4j.Namespace: int hashCode()>();

        $i1 = virtualinvoke $r2.<org.dom4j.Namespace: int hashCode()>();

        if $i0 != $i1 goto label2;

        $r3 = r0.<org.dom4j.Namespace: java.lang.String uri>;

        $r4 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r3 = r0.<org.dom4j.Namespace: java.lang.String prefix>;

        $r4 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public short getNodeType()
    {
        org.dom4j.Namespace r0;

        r0 := @this: org.dom4j.Namespace;

        return 13;
    }

    public java.lang.String getPath(org.dom4j.Element)
    {
        org.dom4j.Namespace r0;
        java.lang.StringBuffer $r1;
        org.dom4j.Element $r2, $r3;
        java.lang.String $r4;

        r0 := @this: org.dom4j.Namespace;

        $r2 := @parameter0: org.dom4j.Element;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(10);

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r3 == null goto label1;

        if $r3 == $r2 goto label1;

        $r4 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getPath(org.dom4j.Element)>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

     label1:
        $r4 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getXPathNameStep()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String getPrefix()
    {
        java.lang.String r1;
        org.dom4j.Namespace r0;

        r0 := @this: org.dom4j.Namespace;

        r1 = r0.<org.dom4j.Namespace: java.lang.String prefix>;

        return r1;
    }

    public java.lang.String getStringValue()
    {
        java.lang.String r1;
        org.dom4j.Namespace r0;

        r0 := @this: org.dom4j.Namespace;

        r1 = r0.<org.dom4j.Namespace: java.lang.String uri>;

        return r1;
    }

    public java.lang.String getText()
    {
        java.lang.String r1;
        org.dom4j.Namespace r0;

        r0 := @this: org.dom4j.Namespace;

        r1 = r0.<org.dom4j.Namespace: java.lang.String uri>;

        return r1;
    }

    public java.lang.String getURI()
    {
        java.lang.String r1;
        org.dom4j.Namespace r0;

        r0 := @this: org.dom4j.Namespace;

        r1 = r0.<org.dom4j.Namespace: java.lang.String uri>;

        return r1;
    }

    public java.lang.String getUniquePath(org.dom4j.Element)
    {
        org.dom4j.Namespace r0;
        java.lang.StringBuffer $r1;
        org.dom4j.Element $r2, $r3;
        java.lang.String $r4;

        r0 := @this: org.dom4j.Namespace;

        $r2 := @parameter0: org.dom4j.Element;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(10);

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r3 == null goto label1;

        if $r3 == $r2 goto label1;

        $r4 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getUniquePath(org.dom4j.Element)>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

     label1:
        $r4 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getXPathNameStep()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String getXPathNameStep()
    {
        org.dom4j.Namespace r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.Namespace;

        $r1 = r0.<org.dom4j.Namespace: java.lang.String prefix>;

        if $r1 == null goto label1;

        $r2 = "";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("namespace::");

        $r1 = r0.<org.dom4j.Namespace: java.lang.String prefix>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label1:
        return "namespace::*[name()=\'\']";
    }

    public int hashCode()
    {
        int $i0;
        org.dom4j.Namespace r0;

        r0 := @this: org.dom4j.Namespace;

        $i0 = r0.<org.dom4j.Namespace: int hashCode>;

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<org.dom4j.Namespace: int createHashCode()>();

        r0.<org.dom4j.Namespace: int hashCode> = $i0;

     label1:
        $i0 = r0.<org.dom4j.Namespace: int hashCode>;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.dom4j.Namespace r0;

        r0 := @this: org.dom4j.Namespace;

        $r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [Namespace: prefix ");

        $r2 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mapped to URI \"");

        $r2 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getURI()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
