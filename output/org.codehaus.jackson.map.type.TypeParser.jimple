public class org.codehaus.jackson.map.type.TypeParser extends java.lang.Object
{
    public final org.codehaus.jackson.map.type.TypeFactory _factory;

    public void <init>(org.codehaus.jackson.map.type.TypeFactory)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.map.type.TypeParser r0;

        r0 := @this: org.codehaus.jackson.map.type.TypeParser;

        $r1 := @parameter0: org.codehaus.jackson.map.type.TypeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.map.type.TypeFactory _factory> = $r1;

        return;
    }

    public java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer, java.lang.String)
    {
        org.codehaus.jackson.map.type.TypeParser r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r1, $r5;
        java.lang.IllegalArgumentException $r2;
        org.codehaus.jackson.map.type.TypeParser$MyTokenizer $r4;

        r0 := @this: org.codehaus.jackson.map.type.TypeParser;

        $r4 := @parameter0: org.codehaus.jackson.map.type.TypeParser$MyTokenizer;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse type \'");

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: java.lang.String getAllInput()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (remaining: \'");

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: java.lang.String getRemainingInput()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'): ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.Class findClass(java.lang.String, org.codehaus.jackson.map.type.TypeParser$MyTokenizer)
    {
        java.lang.RuntimeException $r7;
        java.lang.IllegalArgumentException $r9;
        java.lang.Exception $r6;
        org.codehaus.jackson.map.type.TypeParser r0;
        java.lang.Thread $r3;
        java.lang.Class $r5;
        java.lang.StringBuilder $r8;
        java.lang.String $r2;
        java.lang.ClassLoader $r4;
        org.codehaus.jackson.map.type.TypeParser$MyTokenizer $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.TypeParser;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.codehaus.jackson.map.type.TypeParser$MyTokenizer;

     label1:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r2, 1, $r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label4;

        $r7 = (java.lang.RuntimeException) $r6;

        throw $r7;

     label4:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not locate class \'");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', problem: ");

        $r2 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser: java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer,java.lang.String)>($r1, $r2);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.codehaus.jackson.type.JavaType parse(java.lang.String)
    {
        org.codehaus.jackson.map.type.TypeParser r0;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r4;
        org.codehaus.jackson.map.type.TypeParser$MyTokenizer $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.TypeParser;

        $r2 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r1 = new org.codehaus.jackson.map.type.TypeParser$MyTokenizer;

        specialinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.type.JavaType parseType(org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>($r1);

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label1;

        return $r3;

     label1:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser: java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer,java.lang.String)>($r1, "Unexpected tokens after complete type");

        throw $r4;
    }

    public org.codehaus.jackson.type.JavaType parseType(org.codehaus.jackson.map.type.TypeParser$MyTokenizer)
    {
        java.lang.IllegalArgumentException $r8;
        org.codehaus.jackson.map.type.TypeFactory $r5;
        org.codehaus.jackson.map.type.TypeParser r0;
        java.util.List $r6;
        org.codehaus.jackson.type.JavaType $r7;
        java.lang.Class $r3;
        java.lang.String $r2, $r4;
        org.codehaus.jackson.map.type.TypeParser$MyTokenizer $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.TypeParser;

        $r1 := @parameter0: org.codehaus.jackson.map.type.TypeParser$MyTokenizer;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser: java.lang.Class findClass(java.lang.String,org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>($r2, $r1);

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        $r4 = "<";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.map.type.TypeFactory _factory>;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser: java.util.List parseTypes(org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>($r1);

        $r7 = virtualinvoke $r5.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromParameterizedClass(java.lang.Class,java.util.List)>($r3, $r6);

        return $r7;

     label1:
        virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: void pushBack(java.lang.String)>($r2);

     label2:
        $r5 = r0.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.map.type.TypeFactory _factory>;

        $r7 = virtualinvoke $r5.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>($r3, null);

        return $r7;

     label3:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser: java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer,java.lang.String)>($r1, "Unexpected end-of-string");

        throw $r8;
    }

    public java.util.List parseTypes(org.codehaus.jackson.map.type.TypeParser$MyTokenizer)
    {
        java.lang.IllegalArgumentException $r7;
        java.util.ArrayList $r2;
        org.codehaus.jackson.map.type.TypeParser r0;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.StringBuilder $r6;
        java.lang.String $r4, $r5;
        org.codehaus.jackson.map.type.TypeParser$MyTokenizer $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.TypeParser;

        $r1 := @parameter0: org.codehaus.jackson.map.type.TypeParser$MyTokenizer;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label4;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.type.JavaType parseType(org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>($r1);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        $r5 = ">";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        $r5 = ",";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        goto label1;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected token \'");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', expected \',\' or \'>\')");

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser: java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer,java.lang.String)>($r1, $r4);

        throw $r7;

     label4:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser: java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer,java.lang.String)>($r1, "Unexpected end-of-string");

        goto label5;

     label5:
        throw $r7;
    }
}
