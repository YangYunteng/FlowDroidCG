public abstract class org.dom4j.tree.AbstractCDATA extends org.dom4j.tree.AbstractCharacterData implements org.dom4j.CDATA
{

    public void <init>()
    {
        org.dom4j.tree.AbstractCDATA r0;

        r0 := @this: org.dom4j.tree.AbstractCDATA;

        specialinvoke r0.<org.dom4j.tree.AbstractCharacterData: void <init>()>();

        return;
    }

    public void accept(org.dom4j.Visitor)
    {
        org.dom4j.tree.AbstractCDATA r0;
        org.dom4j.Visitor $r1;

        r0 := @this: org.dom4j.tree.AbstractCDATA;

        $r1 := @parameter0: org.dom4j.Visitor;

        interfaceinvoke $r1.<org.dom4j.Visitor: void visit(org.dom4j.CDATA)>(r0);

        return;
    }

    public java.lang.String asXML()
    {
        java.io.StringWriter $r3;
        java.io.IOException $r2;
        org.dom4j.tree.AbstractCDATA r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractCDATA;

        $r3 = new java.io.StringWriter;

        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

     label1:
        virtualinvoke r0.<org.dom4j.tree.AbstractCDATA: void write(java.io.Writer)>($r3);

     label2:
        $r1 = virtualinvoke $r3.<java.io.StringWriter: java.lang.String toString()>();

        return $r1;

     label3:
        $r2 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public short getNodeType()
    {
        org.dom4j.tree.AbstractCDATA r0;

        r0 := @this: org.dom4j.tree.AbstractCDATA;

        return 4;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        org.dom4j.tree.AbstractCDATA r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractCDATA;

        $r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [CDATA: \"");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.String getText()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void write(java.io.Writer)
    {
        java.io.Writer $r1;
        org.dom4j.tree.AbstractCDATA r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractCDATA;

        $r1 := @parameter0: java.io.Writer;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("<![CDATA[");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.String getText()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.String getText()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

     label1:
        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("]]>");

        return;
    }
}
