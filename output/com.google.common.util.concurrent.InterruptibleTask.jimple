public abstract class com.google.common.util.concurrent.InterruptibleTask extends java.util.concurrent.atomic.AtomicReference implements java.lang.Runnable
{
    public static final java.lang.Runnable DONE;
    public static final java.lang.Runnable INTERRUPTING;

    static void <clinit>()
    {
        com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable $r0;

        $r0 = new com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable;

        specialinvoke $r0.<com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable: void <init>(com.google.common.util.concurrent.InterruptibleTask$1)>(null);

        <com.google.common.util.concurrent.InterruptibleTask: java.lang.Runnable DONE> = $r0;

        $r0 = new com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable;

        specialinvoke $r0.<com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable: void <init>(com.google.common.util.concurrent.InterruptibleTask$1)>(null);

        <com.google.common.util.concurrent.InterruptibleTask: java.lang.Runnable INTERRUPTING> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.util.concurrent.InterruptibleTask r0;

        r0 := @this: com.google.common.util.concurrent.InterruptibleTask;

        specialinvoke r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        return;
    }

    public abstract void afterRanInterruptibly(java.lang.Object, java.lang.Throwable);

    public final void interruptTask()
    {
        java.lang.Thread $r4;
        java.lang.Object $r1;
        java.lang.Runnable $r2, $r3;
        com.google.common.util.concurrent.InterruptibleTask r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.InterruptibleTask;

        $r1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = (java.lang.Runnable) $r1;

        $z0 = $r2 instanceof java.lang.Thread;

        if $z0 == 0 goto label1;

        $r3 = <com.google.common.util.concurrent.InterruptibleTask: java.lang.Runnable INTERRUPTING>;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label1;

        $r4 = (java.lang.Thread) $r2;

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

        $r2 = <com.google.common.util.concurrent.InterruptibleTask: java.lang.Runnable DONE>;

        virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r2);

     label1:
        return;
    }

    public abstract boolean isDone();

    public final void run()
    {
        java.lang.Throwable $r3;
        java.lang.Runnable $r4;
        com.google.common.util.concurrent.InterruptibleTask r0;
        java.lang.Thread $r1;
        java.lang.Object $r2, $r5;
        boolean $z0, $z1;

        r0 := @this: com.google.common.util.concurrent.InterruptibleTask;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, $r1);

        if $z0 != 0 goto label01;

        return;

     label01:
        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.InterruptibleTask: boolean isDone()>();

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label07;

     label02:
        $r2 = virtualinvoke r0.<com.google.common.util.concurrent.InterruptibleTask: java.lang.Object runInterruptibly()>();

     label03:
        goto label08;

     label04:
        $r3 := @caughtexception;

        $r4 = <com.google.common.util.concurrent.InterruptibleTask: java.lang.Runnable DONE>;

        $z1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r1, $r4);

        if $z1 != 0 goto label06;

     label05:
        $r2 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = <com.google.common.util.concurrent.InterruptibleTask: java.lang.Runnable INTERRUPTING>;

        if $r2 != $r4 goto label06;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label05;

     label06:
        if $z0 == 0 goto label11;

        virtualinvoke r0.<com.google.common.util.concurrent.InterruptibleTask: void afterRanInterruptibly(java.lang.Object,java.lang.Throwable)>(null, $r3);

        return;

     label07:
        $r2 = null;

     label08:
        $r4 = <com.google.common.util.concurrent.InterruptibleTask: java.lang.Runnable DONE>;

        $z1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r1, $r4);

        if $z1 != 0 goto label10;

     label09:
        $r5 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = <com.google.common.util.concurrent.InterruptibleTask: java.lang.Runnable INTERRUPTING>;

        if $r5 != $r4 goto label10;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label09;

     label10:
        if $z0 == 0 goto label11;

        virtualinvoke r0.<com.google.common.util.concurrent.InterruptibleTask: void afterRanInterruptibly(java.lang.Object,java.lang.Throwable)>($r2, null);

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
    }

    public abstract java.lang.Object runInterruptibly();

    public abstract java.lang.String toString();
}
