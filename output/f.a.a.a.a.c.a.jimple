public final class f.a.a.a.a.c.a extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    public final java.util.concurrent.atomic.AtomicInteger a;

    public void <init>()
    {
        f.a.a.a.a.c.a r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: f.a.a.a.a.c.a;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<f.a.a.a.a.c.a: java.util.concurrent.atomic.AtomicInteger a> = $r1;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        java.util.concurrent.atomic.AtomicInteger $r4;
        java.lang.Thread $r2;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r5;
        f.a.a.a.a.c.a r0;
        java.lang.Runnable $r1;

        r0 := @this: f.a.a.a.a.c.a;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = new java.lang.Thread;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AsyncTask #");

        $r4 = r0.<f.a.a.a.a.c.a: java.util.concurrent.atomic.AtomicInteger a>;

        $i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r1, $r5);

        return $r2;
    }
}
