public class com.google.common.collect.ConcurrentHashMultiset$2 extends com.google.common.collect.AbstractIterator
{
    public final java.util.Iterator mapEntries;
    public final com.google.common.collect.ConcurrentHashMultiset this$0;

    public void <init>(com.google.common.collect.ConcurrentHashMultiset)
    {
        com.google.common.collect.ConcurrentHashMultiset$2 r0;
        com.google.common.collect.ConcurrentHashMultiset $r1;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$2;

        $r1 := @parameter0: com.google.common.collect.ConcurrentHashMultiset;

        r0.<com.google.common.collect.ConcurrentHashMultiset$2: com.google.common.collect.ConcurrentHashMultiset this$0> = $r1;

        specialinvoke r0.<com.google.common.collect.AbstractIterator: void <init>()>();

        $r1 = r0.<com.google.common.collect.ConcurrentHashMultiset$2: com.google.common.collect.ConcurrentHashMultiset this$0>;

        $r2 = staticinvoke <com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        r0.<com.google.common.collect.ConcurrentHashMultiset$2: java.util.Iterator mapEntries> = $r4;

        return;
    }

    public com.google.common.collect.Multiset$Entry computeNext()
    {
        java.util.Map$Entry $r4;
        java.util.Iterator $r1;
        com.google.common.collect.Multiset$Entry $r3;
        com.google.common.collect.ConcurrentHashMultiset$2 r0;
        java.util.concurrent.atomic.AtomicInteger $r5;
        int $i0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$2;

     label1:
        $r1 = r0.<com.google.common.collect.ConcurrentHashMultiset$2: java.util.Iterator mapEntries>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke r0.<com.google.common.collect.AbstractIterator: java.lang.Object endOfData()>();

        $r3 = (com.google.common.collect.Multiset$Entry) $r2;

        return $r3;

     label2:
        $r1 = r0.<com.google.common.collect.ConcurrentHashMultiset$2: java.util.Iterator mapEntries>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.Map$Entry) $r2;

        $r2 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = (java.util.concurrent.atomic.AtomicInteger) $r2;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 == 0 goto label1;

        $r2 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>($r2, $i0);

        return $r3;
    }

    public volatile java.lang.Object computeNext()
    {
        com.google.common.collect.ConcurrentHashMultiset$2 r0;
        com.google.common.collect.Multiset$Entry $r1;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$2;

        $r1 = virtualinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$2: com.google.common.collect.Multiset$Entry computeNext()>();

        return $r1;
    }
}
