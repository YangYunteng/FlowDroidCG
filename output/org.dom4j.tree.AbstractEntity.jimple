public abstract class org.dom4j.tree.AbstractEntity extends org.dom4j.tree.AbstractNode implements org.dom4j.Entity
{

    public void <init>()
    {
        org.dom4j.tree.AbstractEntity r0;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        specialinvoke r0.<org.dom4j.tree.AbstractNode: void <init>()>();

        return;
    }

    public void accept(org.dom4j.Visitor)
    {
        org.dom4j.tree.AbstractEntity r0;
        org.dom4j.Visitor $r1;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        $r1 := @parameter0: org.dom4j.Visitor;

        interfaceinvoke $r1.<org.dom4j.Visitor: void visit(org.dom4j.Entity)>(r0);

        return;
    }

    public java.lang.String asXML()
    {
        java.lang.StringBuilder $r1;
        org.dom4j.tree.AbstractEntity r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("&");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public short getNodeType()
    {
        org.dom4j.tree.AbstractEntity r0;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        return 5;
    }

    public java.lang.String getPath(org.dom4j.Element)
    {
        java.lang.StringBuilder $r1;
        org.dom4j.Element $r2, $r3;
        org.dom4j.tree.AbstractEntity r0;
        java.lang.String $r4;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        $r2 := @parameter0: org.dom4j.Element;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r3 == null goto label1;

        if $r3 == $r2 goto label1;

        $r1 = new java.lang.StringBuilder;

        $r4 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getPath(org.dom4j.Element)>($r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/text()");

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return "text()";
    }

    public java.lang.String getStringValue()
    {
        java.lang.StringBuilder $r1;
        org.dom4j.tree.AbstractEntity r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("&");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String getUniquePath(org.dom4j.Element)
    {
        java.lang.StringBuilder $r1;
        org.dom4j.Element $r2, $r3;
        org.dom4j.tree.AbstractEntity r0;
        java.lang.String $r4;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        $r2 := @parameter0: org.dom4j.Element;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r3 == null goto label1;

        if $r3 == $r2 goto label1;

        $r1 = new java.lang.StringBuilder;

        $r4 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getUniquePath(org.dom4j.Element)>($r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/text()");

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return "text()";
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        org.dom4j.tree.AbstractEntity r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        $r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [Entity: &");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void write(java.io.Writer)
    {
        java.io.Writer $r1;
        org.dom4j.tree.AbstractEntity r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        $r1 := @parameter0: java.io.Writer;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("&");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.String getName()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(";");

        return;
    }
}
