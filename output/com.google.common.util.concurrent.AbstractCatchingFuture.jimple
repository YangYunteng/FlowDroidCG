public abstract class com.google.common.util.concurrent.AbstractCatchingFuture extends com.google.common.util.concurrent.AbstractFuture$TrustedFuture implements java.lang.Runnable
{
    public java.lang.Class exceptionType;
    public java.lang.Object fallback;
    public com.google.common.util.concurrent.ListenableFuture inputFuture;

    public void <init>(com.google.common.util.concurrent.ListenableFuture, java.lang.Class, java.lang.Object)
    {
        com.google.common.util.concurrent.ListenableFuture $r2;
        java.lang.Object $r1;
        java.lang.Class $r3;
        com.google.common.util.concurrent.AbstractCatchingFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractCatchingFuture;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r3 := @parameter1: java.lang.Class;

        $r1 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture$TrustedFuture: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = $r2;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = $r3;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = $r1;

        return;
    }

    public static com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture $r3;
        com.google.common.base.Function $r1;
        com.google.common.util.concurrent.ListenableFuture $r0;
        java.util.concurrent.Executor $r2;
        java.lang.Class $r4;

        $r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r4 := @parameter1: java.lang.Class;

        $r1 := @parameter2: com.google.common.base.Function;

        $r2 := @parameter3: java.util.concurrent.Executor;

        $r3 = new com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture;

        specialinvoke $r3.<com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function)>($r0, $r4, $r1);

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)>($r2, $r3);

        interfaceinvoke $r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r3, $r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.util.concurrent.AsyncFunction, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture $r0;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.AsyncFunction $r1;
        java.lang.Class $r4;
        com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture $r3;

        $r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r4 := @parameter1: java.lang.Class;

        $r1 := @parameter2: com.google.common.util.concurrent.AsyncFunction;

        $r2 := @parameter3: java.util.concurrent.Executor;

        $r3 = new com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture;

        specialinvoke $r3.<com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction)>($r0, $r4, $r1);

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)>($r2, $r3);

        interfaceinvoke $r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r3, $r2);

        return $r3;
    }

    public final void afterDone()
    {
        com.google.common.util.concurrent.ListenableFuture $r1;
        com.google.common.util.concurrent.AbstractCatchingFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractCatchingFuture;

        $r1 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void maybePropagateCancellationTo(java.util.concurrent.Future)>($r1);

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = null;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = null;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = null;

        return;
    }

    public abstract java.lang.Object doFallback(java.lang.Object, java.lang.Throwable);

    public java.lang.String pendingToString()
    {
        com.google.common.util.concurrent.ListenableFuture $r5;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        com.google.common.util.concurrent.AbstractCatchingFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractCatchingFuture;

        $r5 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        $r1 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType>;

        $r2 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback>;

        if $r5 == null goto label1;

        if $r1 == null goto label1;

        if $r2 == null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("input=[");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], exceptionType=[");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], fallback=[");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return null;
    }

    public final void run()
    {
        java.lang.Throwable $r6, $r8;
        com.google.common.util.concurrent.ListenableFuture $r2;
        java.util.concurrent.ExecutionException $r7;
        java.lang.Object $r1, $r4, $r5;
        java.lang.Class $r3;
        com.google.common.util.concurrent.AbstractCatchingFuture r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.google.common.util.concurrent.AbstractCatchingFuture;

        $r2 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        $r3 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType>;

        $r1 = r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback>;

        $z0 = 1;

        if $r2 != null goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $r3 != null goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        $z1 = $z1 | $z2;

        if $r1 != null goto label05;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        $z0 = $z0 | $z1;

        $z1 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$TrustedFuture: boolean isCancelled()>();

        $z0 = $z0 | $z1;

        if $z0 == 0 goto label07;

        return;

     label07:
        $r4 = null;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = null;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = null;

        r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = null;

     label08:
        $r5 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Object getDone(java.util.concurrent.Future)>($r2);

     label09:
        $r4 = $r5;

        $r6 = null;

        goto label12;

     label10:
        $r6 := @caughtexception;

        goto label12;

     label11:
        $r7 := @caughtexception;

        $r6 = virtualinvoke $r7.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r6);

     label12:
        if $r6 != null goto label13;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)>($r4);

        return;

     label13:
        $z0 = staticinvoke <com.google.common.util.concurrent.Platform: boolean isInstanceOfThrowableClass(java.lang.Throwable,java.lang.Class)>($r6, $r3);

        if $z0 != 0 goto label14;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)>($r6);

        return;

     label14:
        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCatchingFuture: java.lang.Object doFallback(java.lang.Object,java.lang.Throwable)>($r1, $r6);

     label15:
        virtualinvoke r0.<com.google.common.util.concurrent.AbstractCatchingFuture: void setResult(java.lang.Object)>($r1);

        return;

     label16:
        $r8 := @caughtexception;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)>($r8);

        return;

        catch java.util.concurrent.ExecutionException from label08 to label09 with label11;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label14 to label15 with label16;
    }

    public abstract void setResult(java.lang.Object);
}
