public class k.a.f.d extends k.a.f.f
{
    public final java.lang.reflect.Method c;
    public final java.lang.reflect.Method d;
    public final java.lang.reflect.Method e;
    public final java.lang.Class f;
    public final java.lang.Class g;

    public void <init>(java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.Class, java.lang.Class)
    {
        java.lang.Class $r4, $r5;
        k.a.f.d r0;
        java.lang.reflect.Method $r1, $r2, $r3;

        r0 := @this: k.a.f.d;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.lang.reflect.Method;

        $r3 := @parameter2: java.lang.reflect.Method;

        $r4 := @parameter3: java.lang.Class;

        $r5 := @parameter4: java.lang.Class;

        specialinvoke r0.<k.a.f.f: void <init>()>();

        r0.<k.a.f.d: java.lang.reflect.Method c> = $r1;

        r0.<k.a.f.d: java.lang.reflect.Method d> = $r2;

        r0.<k.a.f.d: java.lang.reflect.Method e> = $r3;

        r0.<k.a.f.d: java.lang.Class f> = $r4;

        r0.<k.a.f.d: java.lang.Class g> = $r5;

        return;
    }

    public static k.a.f.f e()
    {
        java.lang.NoSuchMethodException $r1;
        java.lang.Class[] $r8;
        k.a.f.d $r12;
        java.lang.ClassNotFoundException $r0;
        java.lang.Class $r2, $r5, $r6, $r7;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.reflect.Method $r9, $r10, $r11;

     label01:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

     label02:
        $r3 = new java.lang.StringBuilder;

     label03:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$Provider");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4);

     label04:
        $r3 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$ClientProvider");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4);

     label06:
        $r3 = new java.lang.StringBuilder;

     label07:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$ServerProvider");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4);

     label08:
        $r8 = newarray (java.lang.Class)[2];

        $r8[0] = class "Ljavax/net/ssl/SSLSocket;";

        $r8[1] = $r5;

     label09:
        $r9 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("put", $r8);

     label10:
        $r8 = newarray (java.lang.Class)[1];

        $r8[0] = class "Ljavax/net/ssl/SSLSocket;";

     label11:
        $r10 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("get", $r8);

     label12:
        $r8 = newarray (java.lang.Class)[1];

        $r8[0] = class "Ljavax/net/ssl/SSLSocket;";

     label13:
        $r11 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("remove", $r8);

     label14:
        $r12 = new k.a.f.d;

     label15:
        specialinvoke $r12.<k.a.f.d: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)>($r9, $r10, $r11, $r6, $r7);

     label16:
        return $r12;

     label17:
        return null;

     label18:
        $r0 := @caughtexception;

        goto label17;

     label19:
        $r1 := @caughtexception;

        goto label17;

        catch java.lang.ClassNotFoundException from label01 to label02 with label18;
        catch java.lang.ClassNotFoundException from label03 to label04 with label18;
        catch java.lang.ClassNotFoundException from label05 to label06 with label18;
        catch java.lang.ClassNotFoundException from label07 to label08 with label18;
        catch java.lang.ClassNotFoundException from label09 to label10 with label18;
        catch java.lang.ClassNotFoundException from label11 to label12 with label18;
        catch java.lang.ClassNotFoundException from label13 to label14 with label18;
        catch java.lang.ClassNotFoundException from label15 to label16 with label18;
        catch java.lang.NoSuchMethodException from label01 to label02 with label19;
        catch java.lang.NoSuchMethodException from label03 to label04 with label19;
        catch java.lang.NoSuchMethodException from label05 to label06 with label19;
        catch java.lang.NoSuchMethodException from label07 to label08 with label19;
        catch java.lang.NoSuchMethodException from label09 to label10 with label19;
        catch java.lang.NoSuchMethodException from label11 to label12 with label19;
        catch java.lang.NoSuchMethodException from label13 to label14 with label19;
        catch java.lang.NoSuchMethodException from label15 to label16 with label19;
    }

    public void a(javax.net.ssl.SSLSocket)
    {
        java.lang.Object[] $r4;
        javax.net.ssl.SSLSocket $r2;
        k.a.f.d r0;
        java.lang.AssertionError $r1;
        java.lang.ReflectiveOperationException $r5;
        java.lang.reflect.Method $r3;

        r0 := @this: k.a.f.d;

        $r2 := @parameter0: javax.net.ssl.SSLSocket;

        $r3 = r0.<k.a.f.d: java.lang.reflect.Method e>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r2;

     label1:
        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        $r1 = staticinvoke <k.a.e: java.lang.AssertionError a(java.lang.String,java.lang.Exception)>("unable to remove alpn", $r5);

        throw $r1;

        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    public void a(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        java.lang.Object[] $r10;
        javax.net.ssl.SSLSocket $r1;
        java.lang.Class[] $r6;
        k.a.f.d r0;
        java.lang.ReflectiveOperationException $r11;
        java.lang.AssertionError $r12;
        java.util.List $r3;
        k.a.f.d$a $r7;
        java.lang.Class $r4;
        java.lang.Object $r8;
        java.lang.String $r2;
        java.lang.ClassLoader $r5;
        java.lang.reflect.Method $r9;

        r0 := @this: k.a.f.d;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.List;

        $r3 = staticinvoke <k.a.f.f: java.util.List a(java.util.List)>($r3);

        $r4 = class "Lk/a/f/f;";

     label1:
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label2:
        $r6 = newarray (java.lang.Class)[2];

        $r4 = r0.<k.a.f.d: java.lang.Class f>;

        $r6[0] = $r4;

        $r4 = r0.<k.a.f.d: java.lang.Class g>;

        $r6[1] = $r4;

        $r7 = new k.a.f.d$a;

     label3:
        specialinvoke $r7.<k.a.f.d$a: void <init>(java.util.List)>($r3);

        $r8 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r5, $r6, $r7);

     label4:
        $r9 = r0.<k.a.f.d: java.lang.reflect.Method c>;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = $r1;

        $r10[1] = $r8;

     label5:
        virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r10);

     label6:
        return;

     label7:
        $r11 := @caughtexception;

        goto label9;

     label8:
        $r11 := @caughtexception;

     label9:
        $r12 = staticinvoke <k.a.e: java.lang.AssertionError a(java.lang.String,java.lang.Exception)>("unable to set alpn", $r11);

        throw $r12;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label8;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label8;
        catch java.lang.reflect.InvocationTargetException from label5 to label6 with label8;
        catch java.lang.IllegalAccessException from label1 to label2 with label7;
        catch java.lang.IllegalAccessException from label3 to label4 with label7;
        catch java.lang.IllegalAccessException from label5 to label6 with label7;
    }

    public java.lang.String b(javax.net.ssl.SSLSocket)
    {
        java.lang.Object[] $r3;
        javax.net.ssl.SSLSocket $r1;
        k.a.f.f $r8;
        k.a.f.d r0;
        java.lang.ReflectiveOperationException $r9;
        java.lang.AssertionError $r10;
        k.a.f.d$a $r6;
        java.lang.Object $r4;
        java.lang.reflect.InvocationHandler $r5;
        java.lang.String $r7;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: k.a.f.d;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = r0.<k.a.f.d: java.lang.reflect.Method d>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

     label1:
        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        $r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>($r4);

     label2:
        $r6 = (k.a.f.d$a) $r5;

        $z0 = $r6.<k.a.f.d$a: boolean b>;

        if $z0 != 0 goto label5;

        $r7 = $r6.<k.a.f.d$a: java.lang.String c>;

        if $r7 != null goto label5;

     label3:
        $r8 = staticinvoke <k.a.f.f: k.a.f.f b()>();

        virtualinvoke $r8.<k.a.f.f: void a(int,java.lang.String,java.lang.Throwable)>(4, "ALPN callback dropped: HTTP/2 is disabled. Is alpn-boot on the boot class path?", null);

     label4:
        return null;

     label5:
        $z0 = $r6.<k.a.f.d$a: boolean b>;

        if $z0 == 0 goto label6;

        return null;

     label6:
        $r7 = $r6.<k.a.f.d$a: java.lang.String c>;

        return $r7;

     label7:
        $r9 := @caughtexception;

        goto label9;

     label8:
        $r9 := @caughtexception;

     label9:
        $r10 = staticinvoke <k.a.e: java.lang.AssertionError a(java.lang.String,java.lang.Exception)>("unable to get selected protocol", $r9);

        throw $r10;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label8;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label8;
        catch java.lang.IllegalAccessException from label1 to label2 with label7;
        catch java.lang.IllegalAccessException from label3 to label4 with label7;
    }
}
