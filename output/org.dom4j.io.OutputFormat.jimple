public class org.dom4j.io.OutputFormat extends java.lang.Object implements java.lang.Cloneable
{
    public static final java.lang.String STANDARD_INDENT;
    public char attributeQuoteChar;
    public boolean doXHTML;
    public java.lang.String encoding;
    public boolean expandEmptyElements;
    public java.lang.String indent;
    public java.lang.String lineSeparator;
    public boolean newLineAfterDeclaration;
    public int newLineAfterNTags;
    public boolean newlines;
    public boolean omitEncoding;
    public boolean padText;
    public boolean suppressDeclaration;
    public boolean trimText;

    public void <init>()
    {
        org.dom4j.io.OutputFormat r0;

        r0 := @this: org.dom4j.io.OutputFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration> = 1;

        r0.<org.dom4j.io.OutputFormat: java.lang.String encoding> = "UTF-8";

        r0.<org.dom4j.io.OutputFormat: boolean omitEncoding> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = null;

        r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator> = "\n";

        r0.<org.dom4j.io.OutputFormat: boolean trimText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean padText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean doXHTML> = 0;

        r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags> = 0;

        r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar> = 34;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration> = 1;

        r0.<org.dom4j.io.OutputFormat: java.lang.String encoding> = "UTF-8";

        r0.<org.dom4j.io.OutputFormat: boolean omitEncoding> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = null;

        r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator> = "\n";

        r0.<org.dom4j.io.OutputFormat: boolean trimText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean padText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean doXHTML> = 0;

        r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags> = 0;

        r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar> = 34;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = $r1;

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration> = 1;

        r0.<org.dom4j.io.OutputFormat: java.lang.String encoding> = "UTF-8";

        r0.<org.dom4j.io.OutputFormat: boolean omitEncoding> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = null;

        r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator> = "\n";

        r0.<org.dom4j.io.OutputFormat: boolean trimText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean padText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean doXHTML> = 0;

        r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags> = 0;

        r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar> = 34;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = $r1;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = $z0;

        return;
    }

    public void <init>(java.lang.String, boolean, java.lang.String)
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration> = 1;

        r0.<org.dom4j.io.OutputFormat: java.lang.String encoding> = "UTF-8";

        r0.<org.dom4j.io.OutputFormat: boolean omitEncoding> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = null;

        r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = 0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator> = "\n";

        r0.<org.dom4j.io.OutputFormat: boolean trimText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean padText> = 0;

        r0.<org.dom4j.io.OutputFormat: boolean doXHTML> = 0;

        r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags> = 0;

        r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar> = 34;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = $r1;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = $z0;

        r0.<org.dom4j.io.OutputFormat: java.lang.String encoding> = $r2;

        return;
    }

    public static org.dom4j.io.OutputFormat createCompactFormat()
    {
        org.dom4j.io.OutputFormat $r0;

        $r0 = new org.dom4j.io.OutputFormat;

        specialinvoke $r0.<org.dom4j.io.OutputFormat: void <init>()>();

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setIndent(boolean)>(0);

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setNewlines(boolean)>(0);

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setTrimText(boolean)>(1);

        return $r0;
    }

    public static org.dom4j.io.OutputFormat createPrettyPrint()
    {
        org.dom4j.io.OutputFormat $r0;

        $r0 = new org.dom4j.io.OutputFormat;

        specialinvoke $r0.<org.dom4j.io.OutputFormat: void <init>()>();

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setIndentSize(int)>(2);

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setNewlines(boolean)>(1);

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setTrimText(boolean)>(1);

        virtualinvoke $r0.<org.dom4j.io.OutputFormat: void setPadText(boolean)>(1);

        return $r0;
    }

    public char getAttributeQuoteCharacter()
    {
        org.dom4j.io.OutputFormat r0;
        char c0;

        r0 := @this: org.dom4j.io.OutputFormat;

        c0 = r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar>;

        return c0;
    }

    public java.lang.String getEncoding()
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        r1 = r0.<org.dom4j.io.OutputFormat: java.lang.String encoding>;

        return r1;
    }

    public java.lang.String getIndent()
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        r1 = r0.<org.dom4j.io.OutputFormat: java.lang.String indent>;

        return r1;
    }

    public java.lang.String getLineSeparator()
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        r1 = r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator>;

        return r1;
    }

    public int getNewLineAfterNTags()
    {
        int i0;
        org.dom4j.io.OutputFormat r0;

        r0 := @this: org.dom4j.io.OutputFormat;

        i0 = r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags>;

        return i0;
    }

    public boolean isExpandEmptyElements()
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 = r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements>;

        return z0;
    }

    public boolean isNewLineAfterDeclaration()
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 = r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration>;

        return z0;
    }

    public boolean isNewlines()
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 = r0.<org.dom4j.io.OutputFormat: boolean newlines>;

        return z0;
    }

    public boolean isOmitEncoding()
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 = r0.<org.dom4j.io.OutputFormat: boolean omitEncoding>;

        return z0;
    }

    public boolean isPadText()
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 = r0.<org.dom4j.io.OutputFormat: boolean padText>;

        return z0;
    }

    public boolean isSuppressDeclaration()
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 = r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration>;

        return z0;
    }

    public boolean isTrimText()
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 = r0.<org.dom4j.io.OutputFormat: boolean trimText>;

        return z0;
    }

    public boolean isXHTML()
    {
        org.dom4j.io.OutputFormat r0;
        boolean z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        z0 = r0.<org.dom4j.io.OutputFormat: boolean doXHTML>;

        return z0;
    }

    public int parseOptions(java.lang.String[], int)
    {
        int $i0, $i1, $i2;
        org.dom4j.io.OutputFormat r0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $r1 := @parameter0: java.lang.String[];

        $i1 := @parameter1: int;

        $i0 = lengthof $r1;

     label01:
        if $i1 < $i0 goto label02;

        return $i1;

     label02:
        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-suppressDeclaration");

        if $z0 == 0 goto label03;

        virtualinvoke r0.<org.dom4j.io.OutputFormat: void setSuppressDeclaration(boolean)>(1);

        goto label13;

     label03:
        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-omitEncoding");

        if $z0 == 0 goto label04;

        virtualinvoke r0.<org.dom4j.io.OutputFormat: void setOmitEncoding(boolean)>(1);

        goto label13;

     label04:
        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-indent");

        if $z0 == 0 goto label05;

        $i1 = $i1 + 1;

        $r2 = $r1[$i1];

        virtualinvoke r0.<org.dom4j.io.OutputFormat: void setIndent(java.lang.String)>($r2);

        goto label13;

     label05:
        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-indentSize");

        if $z0 == 0 goto label06;

        $i1 = $i1 + 1;

        $r2 = $r1[$i1];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        virtualinvoke r0.<org.dom4j.io.OutputFormat: void setIndentSize(int)>($i2);

        goto label13;

     label06:
        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("-expandEmpty");

        if $z0 == 0 goto label07;

        virtualinvoke r0.<org.dom4j.io.OutputFormat: void setExpandEmptyElements(boolean)>(1);

        goto label13;

     label07:
        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-encoding");

        if $z0 == 0 goto label08;

        $i1 = $i1 + 1;

        $r2 = $r1[$i1];

        virtualinvoke r0.<org.dom4j.io.OutputFormat: void setEncoding(java.lang.String)>($r2);

        goto label13;

     label08:
        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-newlines");

        if $z0 == 0 goto label09;

        virtualinvoke r0.<org.dom4j.io.OutputFormat: void setNewlines(boolean)>(1);

        goto label13;

     label09:
        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-lineSeparator");

        if $z0 == 0 goto label10;

        $i1 = $i1 + 1;

        $r2 = $r1[$i1];

        virtualinvoke r0.<org.dom4j.io.OutputFormat: void setLineSeparator(java.lang.String)>($r2);

        goto label13;

     label10:
        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-trimText");

        if $z0 == 0 goto label11;

        virtualinvoke r0.<org.dom4j.io.OutputFormat: void setTrimText(boolean)>(1);

        goto label13;

     label11:
        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-padText");

        if $z0 == 0 goto label12;

        virtualinvoke r0.<org.dom4j.io.OutputFormat: void setPadText(boolean)>(1);

        goto label13;

     label12:
        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("-xhtml");

        if $z0 == 0 goto label14;

        virtualinvoke r0.<org.dom4j.io.OutputFormat: void setXHTML(boolean)>(1);

     label13:
        $i1 = $i1 + 1;

        goto label01;

     label14:
        return $i1;
    }

    public void setAttributeQuoteCharacter(char)
    {
        int $i1;
        org.dom4j.io.OutputFormat r0;
        java.lang.StringBuilder $r1, $r3;
        char $c0;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.dom4j.io.OutputFormat;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 == 39 goto label2;

        $i1 = (int) $c0;

        if $i1 != 34 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        $r1 = $r3;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid attribute quote character (");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r4;

     label2:
        r0.<org.dom4j.io.OutputFormat: char attributeQuoteChar> = $c0;

        return;
    }

    public void setEncoding(java.lang.String)
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        r0.<org.dom4j.io.OutputFormat: java.lang.String encoding> = $r1;

     label1:
        return;
    }

    public void setExpandEmptyElements(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean expandEmptyElements> = $z0;

        return;
    }

    public void setIndent(java.lang.String)
    {
        int $i0;
        org.dom4j.io.OutputFormat r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 > 0 goto label1;

        $r1 = null;

     label1:
        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = $r1;

        return;
    }

    public void setIndent(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = "  ";

        return;

     label1:
        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = null;

        return;
    }

    public void setIndentSize(int)
    {
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        org.dom4j.io.OutputFormat r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.io.OutputFormat;

        $i0 := @parameter0: int;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.dom4j.io.OutputFormat: java.lang.String indent> = $r2;

        return;

     label2:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $i1 = $i1 + 1;

        goto label1;
    }

    public void setLineSeparator(java.lang.String)
    {
        org.dom4j.io.OutputFormat r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.OutputFormat;

        $r1 := @parameter0: java.lang.String;

        r0.<org.dom4j.io.OutputFormat: java.lang.String lineSeparator> = $r1;

        return;
    }

    public void setNewLineAfterDeclaration(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean newLineAfterDeclaration> = $z0;

        return;
    }

    public void setNewLineAfterNTags(int)
    {
        int $i0;
        org.dom4j.io.OutputFormat r0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $i0 := @parameter0: int;

        r0.<org.dom4j.io.OutputFormat: int newLineAfterNTags> = $i0;

        return;
    }

    public void setNewlines(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean newlines> = $z0;

        return;
    }

    public void setOmitEncoding(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean omitEncoding> = $z0;

        return;
    }

    public void setPadText(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean padText> = $z0;

        return;
    }

    public void setSuppressDeclaration(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean suppressDeclaration> = $z0;

        return;
    }

    public void setTrimText(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean trimText> = $z0;

        return;
    }

    public void setXHTML(boolean)
    {
        org.dom4j.io.OutputFormat r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.OutputFormat;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.OutputFormat: boolean doXHTML> = $z0;

        return;
    }

    public static void <clinit>()
    {
        <org.dom4j.io.OutputFormat: java.lang.String STANDARD_INDENT> = "  ";

        return;
    }
}
