public final class com.google.common.util.concurrent.ThreadFactoryBuilder extends java.lang.Object
{
    public java.util.concurrent.ThreadFactory backingThreadFactory;
    public java.lang.Boolean daemon;
    public java.lang.String nameFormat;
    public java.lang.Integer priority;
    public java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler;

    public void <init>()
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder r0;

        r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String nameFormat> = null;

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Boolean daemon> = null;

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Integer priority> = null;

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler> = null;

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory backingThreadFactory> = null;

        return;
    }

    public static java.lang.String access$000(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r0);

        return $r1;
    }

    public static java.util.concurrent.ThreadFactory doBuild(com.google.common.util.concurrent.ThreadFactoryBuilder)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder $r5;
        java.lang.Integer $r3;
        java.util.concurrent.atomic.AtomicLong $r6;
        com.google.common.util.concurrent.ThreadFactoryBuilder$1 $r7;
        java.lang.Thread$UncaughtExceptionHandler $r4;
        java.lang.Boolean $r2;
        java.lang.String $r1;
        java.util.concurrent.ThreadFactory $r0;

        $r5 := @parameter0: com.google.common.util.concurrent.ThreadFactoryBuilder;

        $r1 = $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String nameFormat>;

        $r2 = $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Boolean daemon>;

        $r3 = $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Integer priority>;

        $r4 = $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler>;

        $r0 = $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory backingThreadFactory>;

        if $r0 == null goto label1;

        goto label2;

     label1:
        $r0 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

     label2:
        if $r1 == null goto label3;

        $r6 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        goto label4;

     label3:
        $r6 = null;

     label4:
        $r7 = new com.google.common.util.concurrent.ThreadFactoryBuilder$1;

        specialinvoke $r7.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: void <init>(java.util.concurrent.ThreadFactory,java.lang.String,java.util.concurrent.atomic.AtomicLong,java.lang.Boolean,java.lang.Integer,java.lang.Thread$UncaughtExceptionHandler)>($r0, $r1, $r6, $r2, $r3, $r4);

        return $r7;
    }

    public static transient java.lang.String format(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.lang.String $r2;
        java.util.Locale $r1;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.Object[];

        $r1 = <java.util.Locale: java.util.Locale ROOT>;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, $r2, $r0);

        return $r2;
    }

    public java.util.concurrent.ThreadFactory build()
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder r0;
        java.util.concurrent.ThreadFactory $r1;

        r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder;

        $r1 = staticinvoke <com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory doBuild(com.google.common.util.concurrent.ThreadFactoryBuilder)>(r0);

        return $r1;
    }

    public com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder r0;
        java.lang.Boolean $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder;

        $z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Boolean daemon> = $r1;

        return r0;
    }

    public com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder r0;
        java.lang.Object[] $r3;
        java.lang.String $r1;
        java.lang.Integer $r2;

        r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder;

        $r1 := @parameter0: java.lang.String;

        $r3 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3[0] = $r2;

        staticinvoke <com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r3);

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String nameFormat> = $r1;

        return r0;
    }

    public com.google.common.util.concurrent.ThreadFactoryBuilder setPriority(int)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder r0;
        int $i0;
        java.lang.Integer $r1;
        boolean $z0, $z1;

        r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder;

        $i0 := @parameter0: int;

        $z0 = 0;

        if $i0 < 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z1, "Thread priority (%s) must be >= %s", $i0, 1);

        if $i0 > 10 goto label3;

        $z0 = 1;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "Thread priority (%s) must be <= %s", $i0, 10);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Integer priority> = $r1;

        return r0;
    }

    public com.google.common.util.concurrent.ThreadFactoryBuilder setThreadFactory(java.util.concurrent.ThreadFactory)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder r0;
        java.util.concurrent.ThreadFactory $r1;

        r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder;

        $r1 := @parameter0: java.util.concurrent.ThreadFactory;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory backingThreadFactory> = $r1;

        return r0;
    }

    public com.google.common.util.concurrent.ThreadFactoryBuilder setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder r0;
        java.lang.Thread$UncaughtExceptionHandler $r1;

        r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder;

        $r1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler> = $r1;

        return r0;
    }
}
