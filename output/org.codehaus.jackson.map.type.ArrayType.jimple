public final class org.codehaus.jackson.map.type.ArrayType extends org.codehaus.jackson.map.type.TypeBase
{
    public final org.codehaus.jackson.type.JavaType _componentType;
    public final java.lang.Object _emptyArray;

    public void <init>(org.codehaus.jackson.type.JavaType, java.lang.Object)
    {
        int $i0;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: int hashCode()>();

        specialinvoke r0.<org.codehaus.jackson.map.type.TypeBase: void <init>(java.lang.Class,int)>($r3, $i0);

        r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType> = $r1;

        r0.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _emptyArray> = $r2;

        return;
    }

    public static org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.type.JavaType $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        org.codehaus.jackson.map.type.ArrayType $r3;

        $r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, 0);

        $r3 = new org.codehaus.jackson.map.type.ArrayType;

        specialinvoke $r3.<org.codehaus.jackson.map.type.ArrayType: void <init>(org.codehaus.jackson.type.JavaType,java.lang.Object)>($r0, $r2);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType _narrow(java.lang.Class)
    {
        java.lang.IllegalArgumentException $r5;
        org.codehaus.jackson.map.type.TypeFactory $r3;
        org.codehaus.jackson.type.JavaType $r4;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r6;
        org.codehaus.jackson.map.type.ArrayType r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r2 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $r3 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory defaultInstance()>();

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r2);

        r0 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType)>($r4);

        return r0;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible narrowing operation: trying to narrow ");

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.type.ArrayType: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to class ");

        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public java.lang.String buildCanonicalName()
    {
        java.lang.Class $r2;
        java.lang.String $r1;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r2 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r1;
    }

    public org.codehaus.jackson.type.JavaType containedType(int)
    {
        int $i0;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        r1 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        return r1;

     label1:
        return null;
    }

    public int containedTypeCount()
    {
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        return 1;
    }

    public java.lang.String containedTypeName(int)
    {
        int $i0;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return "E";

     label1:
        return null;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.type.JavaType $r4, $r5;
        java.lang.Object $r1;
        java.lang.Class $r2;
        org.codehaus.jackson.map.type.ArrayType r0, $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == class "Lorg/codehaus/jackson/map/type/ArrayType;" goto label3;

        return 0;

     label3:
        $r3 = (org.codehaus.jackson.map.type.ArrayType) $r1;

        $r4 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r5 = $r3.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public org.codehaus.jackson.type.JavaType getContentType()
    {
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        r1 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        return r1;
    }

    public java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)
    {
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.StringBuilder $r1;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)>($r1);

        return $r1;
    }

    public java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)
    {
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.StringBuilder $r1;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>($r1);

        return $r1;
    }

    public boolean hasGenericTypes()
    {
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.type.ArrayType r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: boolean hasGenericTypes()>();

        return $z0;
    }

    public boolean isAbstract()
    {
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        return 0;
    }

    public boolean isArrayType()
    {
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        return 1;
    }

    public boolean isConcrete()
    {
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        return 1;
    }

    public boolean isContainerType()
    {
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        return 1;
    }

    public org.codehaus.jackson.type.JavaType narrowContentsBy(java.lang.Class)
    {
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r1, $r3;
        org.codehaus.jackson.map.type.ArrayType r0, $r4;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r1 != $r3 goto label1;

        return r0;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>($r1);

        $r4 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType)>($r2);

        $r2 = virtualinvoke $r4.<org.codehaus.jackson.map.type.TypeBase: org.codehaus.jackson.type.JavaType copyHandlers(org.codehaus.jackson.type.JavaType)>(r0);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[array type, component type: ");

        $r3 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public org.codehaus.jackson.type.JavaType widenContentsBy(java.lang.Class)
    {
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r1, $r3;
        org.codehaus.jackson.map.type.ArrayType r0, $r4;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r1 != $r3 goto label1;

        return r0;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenBy(java.lang.Class)>($r1);

        $r4 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType)>($r2);

        $r2 = virtualinvoke $r4.<org.codehaus.jackson.map.type.TypeBase: org.codehaus.jackson.type.JavaType copyHandlers(org.codehaus.jackson.type.JavaType)>(r0);

        return $r2;
    }

    public org.codehaus.jackson.map.type.ArrayType withContentTypeHandler(java.lang.Object)
    {
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Object $r3;
        org.codehaus.jackson.map.type.ArrayType r0, $r1;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r3 := @parameter0: java.lang.Object;

        $r1 = new org.codehaus.jackson.map.type.ArrayType;

        $r2 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)>($r3);

        $r3 = r0.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _emptyArray>;

        specialinvoke $r1.<org.codehaus.jackson.map.type.ArrayType: void <init>(org.codehaus.jackson.type.JavaType,java.lang.Object)>($r2, $r3);

        return $r1;
    }

    public volatile org.codehaus.jackson.type.JavaType withContentTypeHandler(java.lang.Object)
    {
        java.lang.Object $r1;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType withContentTypeHandler(java.lang.Object)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.type.ArrayType withTypeHandler(java.lang.Object)
    {
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Object $r1, $r4;
        org.codehaus.jackson.map.type.ArrayType r0, $r2;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new org.codehaus.jackson.map.type.ArrayType;

        $r3 = r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType _componentType>;

        $r4 = r0.<org.codehaus.jackson.map.type.ArrayType: java.lang.Object _emptyArray>;

        specialinvoke $r2.<org.codehaus.jackson.map.type.ArrayType: void <init>(org.codehaus.jackson.type.JavaType,java.lang.Object)>($r3, $r4);

        $r2.<org.codehaus.jackson.type.JavaType: java.lang.Object _typeHandler> = $r1;

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)
    {
        java.lang.Object $r1;
        org.codehaus.jackson.map.type.ArrayType r0;

        r0 := @this: org.codehaus.jackson.map.type.ArrayType;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType withTypeHandler(java.lang.Object)>($r1);

        return r0;
    }
}
