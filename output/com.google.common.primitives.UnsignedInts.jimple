public final class com.google.common.primitives.UnsignedInts extends java.lang.Object
{
    public static final long INT_MASK;

    public void <init>()
    {
        com.google.common.primitives.UnsignedInts r0;

        r0 := @this: com.google.common.primitives.UnsignedInts;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int checkedCast(long)
    {
        byte $b2;
        int $i1;
        long $l0, $l3;
        boolean $z0;

        $l0 := @parameter0: long;

        $l3 = $l0 >> 32;

        $b2 = $l3 cmp 0L;

        if $b2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "out of range: %s", $l0);

        $i1 = (int) $l0;

        return $i1;
    }

    public static int compare(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = staticinvoke <com.google.common.primitives.UnsignedInts: int flip(int)>($i0);

        $i1 = staticinvoke <com.google.common.primitives.UnsignedInts: int flip(int)>($i1);

        $i0 = staticinvoke <com.google.common.primitives.Ints: int compare(int,int)>($i0, $i1);

        return $i0;
    }

    public static int decode(java.lang.String)
    {
        com.google.common.primitives.ParseRequest $r2;
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.NumberFormatException $r4, $r5;
        java.lang.String $r1, $r3;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.google.common.primitives.ParseRequest: com.google.common.primitives.ParseRequest fromString(java.lang.String)>($r1);

        $r3 = $r2.<com.google.common.primitives.ParseRequest: java.lang.String rawValue>;

        $i0 = $r2.<com.google.common.primitives.ParseRequest: int radix>;

     label1:
        $i0 = staticinvoke <com.google.common.primitives.UnsignedInts: int parseUnsignedInt(java.lang.String,int)>($r3, $i0);

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.NumberFormatException;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing value: ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r1);

        virtualinvoke $r5.<java.lang.NumberFormatException: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static int divide(int, int)
    {
        int $i0, $i1;
        long $l2, $l3;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $l2 = staticinvoke <com.google.common.primitives.UnsignedInts: long toLong(int)>($i1);

        $l3 = staticinvoke <com.google.common.primitives.UnsignedInts: long toLong(int)>($i0);

        $l2 = $l2 / $l3;

        $i1 = (int) $l2;

        return $i1;
    }

    public static int flip(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 ^ -2147483648;

        return $i0;
    }

    public static transient java.lang.String join(java.lang.String, int[])
    {
        int[] $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r1, $r3;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: int[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        $i0 = lengthof $r0;

        $i0 = $i0 * 5;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        $i0 = $r0[0];

        $r3 = staticinvoke <com.google.common.primitives.UnsignedInts: java.lang.String toString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $i0 = 1;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i1 = $r0[$i0];

        $r3 = staticinvoke <com.google.common.primitives.UnsignedInts: java.lang.String toString(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.google.common.primitives.UnsignedInts$LexicographicalComparator r0;

        r0 = <com.google.common.primitives.UnsignedInts$LexicographicalComparator: com.google.common.primitives.UnsignedInts$LexicographicalComparator INSTANCE>;

        return r0;
    }

    public static transient int max(int[])
    {
        int[] $r0;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i0 = $r0[0];

        $i0 = staticinvoke <com.google.common.primitives.UnsignedInts: int flip(int)>($i0);

     label3:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label5;

        $i2 = $r0[$i1];

        $i2 = staticinvoke <com.google.common.primitives.UnsignedInts: int flip(int)>($i2);

        if $i2 <= $i0 goto label4;

        $i0 = $i2;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $i1 = staticinvoke <com.google.common.primitives.UnsignedInts: int flip(int)>($i0);

        return $i1;
    }

    public static transient int min(int[])
    {
        int[] $r0;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i0 = $r0[0];

        $i0 = staticinvoke <com.google.common.primitives.UnsignedInts: int flip(int)>($i0);

     label3:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label5;

        $i2 = $r0[$i1];

        $i2 = staticinvoke <com.google.common.primitives.UnsignedInts: int flip(int)>($i2);

        if $i2 >= $i0 goto label4;

        $i0 = $i2;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $i1 = staticinvoke <com.google.common.primitives.UnsignedInts: int flip(int)>($i0);

        return $i1;
    }

    public static int parseUnsignedInt(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <com.google.common.primitives.UnsignedInts: int parseUnsignedInt(java.lang.String,int)>($r0, 10);

        return $i0;
    }

    public static int parseUnsignedInt(java.lang.String, int)
    {
        byte $b1;
        int $i0;
        java.lang.StringBuilder $r0;
        long $l2, $l3;
        java.lang.NumberFormatException $r2;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r1, $i0);

        $l3 = 4294967295L & $l2;

        $b1 = $l3 cmp $l2;

        if $b1 != 0 goto label1;

        $i0 = (int) $l2;

        return $i0;

     label1:
        $r2 = new java.lang.NumberFormatException;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in base ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not in the range of an unsigned integer");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    public static int remainder(int, int)
    {
        int $i0, $i1;
        long $l2, $l3;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $l2 = staticinvoke <com.google.common.primitives.UnsignedInts: long toLong(int)>($i1);

        $l3 = staticinvoke <com.google.common.primitives.UnsignedInts: long toLong(int)>($i0);

        $l2 = $l2 % $l3;

        $i1 = (int) $l2;

        return $i1;
    }

    public static int saturatedCast(long)
    {
        int $i0;
        long $l1;
        byte $b2;

        $l1 := @parameter0: long;

        $b2 = $l1 cmp 0L;

        $i0 = (int) $b2;

        if $i0 > 0 goto label1;

        return 0;

     label1:
        $b2 = $l1 cmp 4294967296L;

        $i0 = (int) $b2;

        if $i0 < 0 goto label2;

        $i0 = -1;

        return $i0;

     label2:
        $i0 = (int) $l1;

        return $i0;
    }

    public static void sort(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.UnsignedInts: void sort(int[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void sort(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i1, $i0, $i2);

        $i2 = $i1;

     label1:
        if $i2 >= $i0 goto label2;

        $i3 = $r0[$i2];

        $i3 = staticinvoke <com.google.common.primitives.UnsignedInts: int flip(int)>($i3);

        $r0[$i2] = $i3;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        staticinvoke <java.util.Arrays: void sort(int[],int,int)>($r0, $i1, $i0);

     label3:
        if $i1 >= $i0 goto label4;

        $i2 = $r0[$i1];

        $i2 = staticinvoke <com.google.common.primitives.UnsignedInts: int flip(int)>($i2);

        $r0[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return;
    }

    public static void sortDescending(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.UnsignedInts: void sortDescending(int[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void sortDescending(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i3 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i2, $i0, $i3);

        $i3 = $i2;

     label1:
        if $i3 >= $i0 goto label2;

        $i1 = $r0[$i3];

        $i1 = 2147483647 ^ $i1;

        $r0[$i3] = $i1;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        staticinvoke <java.util.Arrays: void sort(int[],int,int)>($r0, $i2, $i0);

     label3:
        if $i2 >= $i0 goto label4;

        $i3 = $r0[$i2];

        $i3 = $i3 ^ 2147483647;

        $r0[$i2] = $i3;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        return;
    }

    public static long toLong(int)
    {
        int $i0;
        long $l1;

        $i0 := @parameter0: int;

        $l1 = (long) $i0;

        $l1 = $l1 & 4294967295L;

        return $l1;
    }

    public static java.lang.String toString(int)
    {
        int $i0;
        java.lang.String $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <com.google.common.primitives.UnsignedInts: java.lang.String toString(int,int)>($i0, 10);

        return $r0;
    }

    public static java.lang.String toString(int, int)
    {
        int $i0, $i1;
        long $l2;
        java.lang.String $r0;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $l2 = (long) $i1;

        $l2 = $l2 & 4294967295L;

        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>($l2, $i0);

        return $r0;
    }

    public static void <clinit>()
    {
        <com.google.common.primitives.UnsignedInts: long INT_MASK> = 4294967295L;

        return;
    }
}
