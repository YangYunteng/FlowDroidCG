public class com.google.common.collect.Iterators$PeekingImpl extends java.lang.Object implements com.google.common.collect.PeekingIterator
{
    public boolean hasPeeked;
    public final java.util.Iterator iterator;
    public java.lang.Object peekedElement;

    public void <init>(java.util.Iterator)
    {
        java.util.Iterator $r1;
        com.google.common.collect.Iterators$PeekingImpl r0;

        r0 := @this: com.google.common.collect.Iterators$PeekingImpl;

        $r1 := @parameter0: java.util.Iterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.collect.Iterators$PeekingImpl: java.util.Iterator iterator> = $r1;

        return;
    }

    public boolean hasNext()
    {
        java.util.Iterator $r1;
        com.google.common.collect.Iterators$PeekingImpl r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Iterators$PeekingImpl;

        $z0 = r0.<com.google.common.collect.Iterators$PeekingImpl: boolean hasPeeked>;

        if $z0 != 0 goto label2;

        $r1 = r0.<com.google.common.collect.Iterators$PeekingImpl: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public java.lang.Object next()
    {
        java.util.Iterator $r2;
        com.google.common.collect.Iterators$PeekingImpl r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Iterators$PeekingImpl;

        $z0 = r0.<com.google.common.collect.Iterators$PeekingImpl: boolean hasPeeked>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.google.common.collect.Iterators$PeekingImpl: java.util.Iterator iterator>;

        $r1 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        return $r1;

     label1:
        $r1 = r0.<com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peekedElement>;

        r0.<com.google.common.collect.Iterators$PeekingImpl: boolean hasPeeked> = 0;

        r0.<com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peekedElement> = null;

        return $r1;
    }

    public java.lang.Object peek()
    {
        java.util.Iterator $r2;
        com.google.common.collect.Iterators$PeekingImpl r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Iterators$PeekingImpl;

        $z0 = r0.<com.google.common.collect.Iterators$PeekingImpl: boolean hasPeeked>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.google.common.collect.Iterators$PeekingImpl: java.util.Iterator iterator>;

        $r1 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r0.<com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peekedElement> = $r1;

        r0.<com.google.common.collect.Iterators$PeekingImpl: boolean hasPeeked> = 1;

     label1:
        $r1 = r0.<com.google.common.collect.Iterators$PeekingImpl: java.lang.Object peekedElement>;

        return $r1;
    }

    public void remove()
    {
        java.util.Iterator $r1;
        com.google.common.collect.Iterators$PeekingImpl r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Iterators$PeekingImpl;

        $z0 = r0.<com.google.common.collect.Iterators$PeekingImpl: boolean hasPeeked>;

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Can\'t remove after you\'ve peeked at next");

        $r1 = r0.<com.google.common.collect.Iterators$PeekingImpl: java.util.Iterator iterator>;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        return;
    }
}
