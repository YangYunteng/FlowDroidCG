public class f.a.a.a.a.c.s extends java.util.concurrent.ThreadPoolExecutor
{
    public static final int a;
    public static final int b;
    public static final int c;

    static void <clinit>()
    {
        int $i0, $i1;
        java.lang.Runtime $r0;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();

        <f.a.a.a.a.c.s: int a> = $i0;

        $i1 = <f.a.a.a.a.c.s: int a>;

        $i0 = $i1 + 1;

        <f.a.a.a.a.c.s: int b> = $i0;

        $i0 = $i1 * 2;

        $i0 = $i0 + 1;

        <f.a.a.a.a.c.s: int c> = $i0;

        return;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, f.a.a.a.a.c.i, java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.TimeUnit $r1;
        f.a.a.a.a.c.i $r2;
        int $i0, $i1;
        long $l2;
        f.a.a.a.a.c.s r0;
        java.util.concurrent.ThreadFactory $r3;

        r0 := @this: f.a.a.a.a.c.s;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $r1 := @parameter3: java.util.concurrent.TimeUnit;

        $r2 := @parameter4: f.a.a.a.a.c.i;

        $r3 := @parameter5: java.util.concurrent.ThreadFactory;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>($i0, $i1, $l2, $r1, $r2, $r3);

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: int prestartAllCoreThreads()>();

        return;
    }

    public static f.a.a.a.a.c.s a()
    {
        int $i0, $i1;
        f.a.a.a.a.c.s $r0;

        $i1 = <f.a.a.a.a.c.s: int b>;

        $i0 = <f.a.a.a.a.c.s: int c>;

        $r0 = staticinvoke <f.a.a.a.a.c.s: f.a.a.a.a.c.s a(int,int)>($i1, $i0);

        return $r0;
    }

    public static f.a.a.a.a.c.s a(int, int)
    {
        java.util.concurrent.TimeUnit $r0;
        f.a.a.a.a.c.s$a $r2;
        f.a.a.a.a.c.i $r1;
        int $i0, $i1;
        f.a.a.a.a.c.s $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r3 = new f.a.a.a.a.c.s;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r1 = new f.a.a.a.a.c.i;

        specialinvoke $r1.<f.a.a.a.a.c.i: void <init>()>();

        $r2 = new f.a.a.a.a.c.s$a;

        specialinvoke $r2.<f.a.a.a.a.c.s$a: void <init>(int)>(10);

        specialinvoke $r3.<f.a.a.a.a.c.s: void <init>(int,int,long,java.util.concurrent.TimeUnit,f.a.a.a.a.c.i,java.util.concurrent.ThreadFactory)>($i0, $i1, 1L, $r0, $r1, $r2);

        return $r3;
    }

    public void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        f.a.a.a.a.c.i $r3;
        f.a.a.a.a.c.t $r4;
        f.a.a.a.a.c.s r0;
        java.lang.Runnable $r1;

        r0 := @this: f.a.a.a.a.c.s;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: java.lang.Throwable;

        $r4 = (f.a.a.a.a.c.t) $r1;

        interfaceinvoke $r4.<f.a.a.a.a.c.t: void setFinished(boolean)>(1);

        interfaceinvoke $r4.<f.a.a.a.a.c.t: void setError(java.lang.Throwable)>($r2);

        $r3 = virtualinvoke r0.<f.a.a.a.a.c.s: f.a.a.a.a.c.i getQueue()>();

        virtualinvoke $r3.<f.a.a.a.a.c.i: void a()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>($r1, $r2);

        return;
    }

    public void execute(java.lang.Runnable)
    {
        java.util.concurrent.RunnableFuture $r2;
        f.a.a.a.a.c.s r0;
        java.lang.Runnable $r1;
        boolean $z0;

        r0 := @this: f.a.a.a.a.c.s;

        $r1 := @parameter0: java.lang.Runnable;

        $z0 = staticinvoke <f.a.a.a.a.c.r: boolean isProperDelegate(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r1);

        return;

     label1:
        $r2 = virtualinvoke r0.<f.a.a.a.a.c.s: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>($r1, null);

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    public f.a.a.a.a.c.i getQueue()
    {
        java.util.concurrent.BlockingQueue $r1;
        f.a.a.a.a.c.s r0;
        f.a.a.a.a.c.i $r2;

        r0 := @this: f.a.a.a.a.c.s;

        $r1 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $r2 = (f.a.a.a.a.c.i) $r1;

        return $r2;
    }

    public volatile java.util.concurrent.BlockingQueue getQueue()
    {
        f.a.a.a.a.c.s r0;
        f.a.a.a.a.c.i $r1;

        r0 := @this: f.a.a.a.a.c.s;

        $r1 = virtualinvoke r0.<f.a.a.a.a.c.s: f.a.a.a.a.c.i getQueue()>();

        return $r1;
    }

    public java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)
    {
        java.lang.Object $r2;
        f.a.a.a.a.c.s r0;
        java.lang.Runnable $r1;
        f.a.a.a.a.c.o $r3;

        r0 := @this: f.a.a.a.a.c.s;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new f.a.a.a.a.c.o;

        specialinvoke $r3.<f.a.a.a.a.c.o: void <init>(java.lang.Runnable,java.lang.Object)>($r1, $r2);

        return $r3;
    }

    public java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable $r1;
        f.a.a.a.a.c.s r0;
        f.a.a.a.a.c.o $r2;

        r0 := @this: f.a.a.a.a.c.s;

        $r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = new f.a.a.a.a.c.o;

        specialinvoke $r2.<f.a.a.a.a.c.o: void <init>(java.util.concurrent.Callable)>($r1);

        return $r2;
    }
}
