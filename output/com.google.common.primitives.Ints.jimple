public final class com.google.common.primitives.Ints extends java.lang.Object
{
    public static final int BYTES;
    public static final int MAX_POWER_OF_TWO;

    public void <init>()
    {
        com.google.common.primitives.Ints r0;

        r0 := @this: com.google.common.primitives.Ints;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int access$000(int[], int, int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i0 = staticinvoke <com.google.common.primitives.Ints: int indexOf(int[],int,int,int)>($r0, $i0, $i1, $i2);

        return $i0;
    }

    public static int access$100(int[], int, int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i0 = staticinvoke <com.google.common.primitives.Ints: int lastIndexOf(int[],int,int,int)>($r0, $i0, $i1, $i2);

        return $i0;
    }

    public static transient java.util.List asList(int[])
    {
        java.util.List $r0;
        int[] $r1;
        com.google.common.primitives.Ints$IntArrayAsList $r2;
        int $i0;

        $r1 := @parameter0: int[];

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r0;

     label1:
        $r2 = new com.google.common.primitives.Ints$IntArrayAsList;

        specialinvoke $r2.<com.google.common.primitives.Ints$IntArrayAsList: void <init>(int[])>($r1);

        return $r2;
    }

    public static int checkedCast(long)
    {
        byte $b2;
        int $i1;
        long $l0, $l3;
        boolean $z0;

        $l0 := @parameter0: long;

        $i1 = (int) $l0;

        $l3 = (long) $i1;

        $b2 = $l3 cmp $l0;

        if $b2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "Out of range: %s", $l0);

        return $i1;
    }

    public static int compare(int, int)
    {
        int $i0, $i1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        if $i1 >= $i0 goto label1;

        $i1 = -1;

        return $i1;

     label1:
        if $i1 <= $i0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static transient int[] concat(int[][])
    {
        int[][] $r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[][];

        $i1 = lengthof $r0;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r1 = $r0[$i2];

        $i0 = lengthof $r1;

        $i3 = $i3 + $i0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r1 = newarray (int)[$i3];

        $i1 = lengthof $r0;

        $i2 = 0;

        $i3 = 0;

     label3:
        if $i2 >= $i1 goto label4;

        $r2 = $r0[$i2];

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i3, $i0);

        $i0 = lengthof $r2;

        $i3 = $i3 + $i0;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        return $r1;
    }

    public static int constrainToRange(int, int, int)
    {
        int $i0, $i1, $i2;
        boolean $z0;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i0 > $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "min (%s) must be less than or equal to max (%s)", $i0, $i1);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i0);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        return $i2;
    }

    public static boolean contains(int[], int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r0;

        $i3 = 0;

     label1:
        if $i3 >= $i1 goto label3;

        $i2 = $r0[$i3];

        if $i2 != $i0 goto label2;

        return 1;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static int[] ensureCapacity(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        $r0 := @parameter0: int[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $z0 = 1;

        if $i1 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z1, "Invalid minLength: %s", $i1);

        if $i0 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "Invalid padding: %s", $i0);

        $i2 = lengthof $r0;

        if $i2 >= $i1 goto label5;

        $i1 = $i1 + $i0;

        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r0, $i1);

     label5:
        return $r0;
    }

    public static int fromByteArray(byte[])
    {
        byte[] $r0;
        byte $b1, $b2, $b3, $b4;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        if $i0 < 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "array too small: %s < %s", $i0, 4);

        $b1 = $r0[0];

        $b2 = $r0[1];

        $b3 = $r0[2];

        $b4 = $r0[3];

        $i0 = staticinvoke <com.google.common.primitives.Ints: int fromBytes(byte,byte,byte,byte)>($b1, $b2, $b3, $b4);

        return $i0;
    }

    public static int fromBytes(byte, byte, byte, byte)
    {
        short $s5;
        byte $b0, $b1, $b2, $b3;
        int $i4, $i6;

        $b2 := @parameter0: byte;

        $b3 := @parameter1: byte;

        $b0 := @parameter2: byte;

        $b1 := @parameter3: byte;

        $i4 = (int) $b2;

        $i4 = $i4 << 24;

        $s5 = (short) $b3;

        $s5 = $s5 & 255;

        $i6 = (int) $s5;

        $i6 = $i6 << 16;

        $i4 = $i4 | $i6;

        $s5 = (short) $b0;

        $s5 = $s5 & 255;

        $i6 = (int) $s5;

        $i6 = $i6 << 8;

        $i4 = $i4 | $i6;

        $s5 = (short) $b1;

        $s5 = $s5 & 255;

        $i6 = (int) $s5;

        $i4 = $i4 | $i6;

        return $i4;
    }

    public static int hashCode(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return $i0;
    }

    public static int indexOf(int[], int)
    {
        int $i0, $i1;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r0;

        $i0 = staticinvoke <com.google.common.primitives.Ints: int indexOf(int[],int,int,int)>($r0, $i0, 0, $i1);

        return $i0;
    }

    public static int indexOf(int[], int, int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i3 := @parameter2: int;

        $i1 := @parameter3: int;

     label1:
        if $i3 >= $i1 goto label3;

        $i2 = $r0[$i3];

        if $i2 != $i0 goto label2;

        return $i3;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        $i0 = -1;

        return $i0;
    }

    public static int indexOf(int[], int[])
    {
        int[] $r0, $r1;
        int $i0, $i1, $i2, $i3;

        $r1 := @parameter0: int[];

        $r0 := @parameter1: int[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "array");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "target");

        $i1 = lengthof $r0;

        if $i1 != 0 goto label1;

        return 0;

     label1:
        $i1 = 0;

     label2:
        $i2 = lengthof $r1;

        $i0 = lengthof $r0;

        $i2 = $i2 - $i0;

        $i2 = $i2 + 1;

        if $i1 >= $i2 goto label6;

        $i2 = 0;

     label3:
        $i0 = lengthof $r0;

        if $i2 >= $i0 goto label5;

        $i0 = $i1 + $i2;

        $i3 = $r1[$i0];

        $i0 = $r0[$i2];

        if $i3 == $i0 goto label4;

        $i1 = $i1 + 1;

        goto label2;

     label4:
        $i2 = $i2 + 1;

        goto label3;

     label5:
        return $i1;

     label6:
        $i1 = -1;

        return $i1;
    }

    public static transient java.lang.String join(java.lang.String, int[])
    {
        int[] $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: int[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        $i0 = lengthof $r0;

        $i0 = $i0 * 5;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        $i0 = $r0[0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $i0 = 1;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i1 = $r0[$i0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static int lastIndexOf(int[], int)
    {
        int $i0, $i1;
        int[] $r0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r0;

        $i0 = staticinvoke <com.google.common.primitives.Ints: int lastIndexOf(int[],int,int,int)>($r0, $i0, 0, $i1);

        return $i0;
    }

    public static int lastIndexOf(int[], int, int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 := @parameter3: int;

        $i2 = -1;

        $i3 = $i3 + $i2;

     label1:
        if $i3 < $i1 goto label3;

        $i2 = $r0[$i3];

        if $i2 != $i0 goto label2;

        return $i3;

     label2:
        $i2 = -1;

        $i3 = $i3 + $i2;

        goto label1;

     label3:
        $i0 = -1;

        return $i0;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.google.common.primitives.Ints$LexicographicalComparator r0;

        r0 = <com.google.common.primitives.Ints$LexicographicalComparator: com.google.common.primitives.Ints$LexicographicalComparator INSTANCE>;

        return r0;
    }

    public static transient int max(int[])
    {
        int[] $r0;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i0 = $r0[0];

     label3:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label5;

        $i2 = $r0[$i1];

        if $i2 <= $i0 goto label4;

        $i0 = $r0[$i1];

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return $i0;
    }

    public static transient int min(int[])
    {
        int[] $r0;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i0 = $r0[0];

     label3:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label5;

        $i2 = $r0[$i1];

        if $i2 >= $i0 goto label4;

        $i0 = $r0[$i1];

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return $i0;
    }

    public static void reverse(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.Ints: void reverse(int[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void reverse(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i1, $i2, $i0);

        $i0 = -1;

        $i2 = $i2 + $i0;

     label1:
        if $i1 >= $i2 goto label2;

        $i3 = $r0[$i1];

        $i0 = $r0[$i2];

        $r0[$i1] = $i0;

        $r0[$i2] = $i3;

        $i1 = $i1 + 1;

        $i0 = -1;

        $i2 = $i2 + $i0;

        goto label1;

     label2:
        return;
    }

    public static int saturatedCast(long)
    {
        int $i0;
        long $l1;
        byte $b2;

        $l1 := @parameter0: long;

        $b2 = $l1 cmp 2147483647L;

        $i0 = (int) $b2;

        if $i0 <= 0 goto label1;

        return 2147483647;

     label1:
        $b2 = $l1 cmp -2147483648L;

        $i0 = (int) $b2;

        if $i0 >= 0 goto label2;

        return -2147483648;

     label2:
        $i0 = (int) $l1;

        return $i0;
    }

    public static void sortDescending(int[])
    {
        int $i0;
        int[] $r0;

        $r0 := @parameter0: int[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.Ints: void sortDescending(int[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void sortDescending(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, $i2);

        staticinvoke <java.util.Arrays: void sort(int[],int,int)>($r0, $i0, $i1);

        staticinvoke <com.google.common.primitives.Ints: void reverse(int[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static com.google.common.base.Converter stringConverter()
    {
        com.google.common.primitives.Ints$IntConverter r0;

        r0 = <com.google.common.primitives.Ints$IntConverter: com.google.common.primitives.Ints$IntConverter INSTANCE>;

        return r0;
    }

    public static int[] toArray(java.util.Collection)
    {
        java.lang.Object[] $r3;
        java.util.Collection $r1;
        int[] $r0;
        com.google.common.primitives.Ints$IntArrayAsList $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        java.lang.Number $r5;
        boolean $z0;

        $r1 := @parameter0: java.util.Collection;

        $z0 = $r1 instanceof com.google.common.primitives.Ints$IntArrayAsList;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.primitives.Ints$IntArrayAsList) $r1;

        $r0 = virtualinvoke $r2.<com.google.common.primitives.Ints$IntArrayAsList: int[] toIntArray()>();

        return $r0;

     label1:
        $r3 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $i0 = lengthof $r3;

        $r0 = newarray (int)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r4 = $r3[$i1];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r5 = (java.lang.Number) $r4;

        $i2 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        $r0[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r0;
    }

    public static byte[] toByteArray(int)
    {
        byte[] $r0;
        byte $b2;
        int $i0, $i1;

        $i0 := @parameter0: int;

        $r0 = newarray (byte)[4];

        $i1 = $i0 >> 24;

        $b2 = (byte) $i1;

        $r0[0] = $b2;

        $i1 = $i0 >> 16;

        $b2 = (byte) $i1;

        $r0[1] = $b2;

        $i1 = $i0 >> 8;

        $b2 = (byte) $i1;

        $r0[2] = $b2;

        $b2 = (byte) $i0;

        $r0[3] = $b2;

        return $r0;
    }

    public static java.lang.Integer tryParse(java.lang.String)
    {
        java.lang.String $r1;
        java.lang.Integer $r0;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.google.common.primitives.Ints: java.lang.Integer tryParse(java.lang.String,int)>($r1, 10);

        return $r0;
    }

    public static java.lang.Integer tryParse(java.lang.String, int)
    {
        byte $b3;
        java.lang.Long $r1;
        int $i1;
        long $l0, $l2;
        java.lang.String $r0;
        java.lang.Integer $r2;

        $r0 := @parameter0: java.lang.String;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <com.google.common.primitives.Longs: java.lang.Long tryParse(java.lang.String,int)>($r0, $i1);

        if $r1 == null goto label2;

        $l2 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        $i1 = virtualinvoke $r1.<java.lang.Long: int intValue()>();

        $l0 = (long) $i1;

        $b3 = $l2 cmp $l0;

        if $b3 == 0 goto label1;

        goto label2;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.Long: int intValue()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r2;

     label2:
        return null;
    }

    public static void <clinit>()
    {
        <com.google.common.primitives.Ints: int MAX_POWER_OF_TWO> = 1073741824;

        <com.google.common.primitives.Ints: int BYTES> = 4;

        return;
    }
}
