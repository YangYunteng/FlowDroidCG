public class com.google.common.reflect.TypeToken$3 extends com.google.common.reflect.TypeVisitor
{
    public final com.google.common.reflect.TypeToken this$0;

    public void <init>(com.google.common.reflect.TypeToken)
    {
        com.google.common.reflect.TypeToken$3 r0;
        com.google.common.reflect.TypeToken $r1;

        r0 := @this: com.google.common.reflect.TypeToken$3;

        $r1 := @parameter0: com.google.common.reflect.TypeToken;

        r0.<com.google.common.reflect.TypeToken$3: com.google.common.reflect.TypeToken this$0> = $r1;

        specialinvoke r0.<com.google.common.reflect.TypeVisitor: void <init>()>();

        return;
    }

    public void visitGenericArrayType(java.lang.reflect.GenericArrayType)
    {
        com.google.common.reflect.TypeToken$3 r0;
        java.lang.reflect.GenericArrayType $r2;
        java.lang.reflect.Type $r1;
        java.lang.reflect.Type[] $r3;

        r0 := @this: com.google.common.reflect.TypeToken$3;

        $r2 := @parameter0: java.lang.reflect.GenericArrayType;

        $r3 = newarray (java.lang.reflect.Type)[1];

        $r1 = interfaceinvoke $r2.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r3[0] = $r1;

        virtualinvoke r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r3);

        return;
    }

    public void visitParameterizedType(java.lang.reflect.ParameterizedType)
    {
        com.google.common.reflect.TypeToken$3 r0;
        java.lang.reflect.ParameterizedType $r1;
        java.lang.reflect.Type $r3;
        java.lang.reflect.Type[] $r2;

        r0 := @this: com.google.common.reflect.TypeToken$3;

        $r1 := @parameter0: java.lang.reflect.ParameterizedType;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        virtualinvoke r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r2);

        $r2 = newarray (java.lang.reflect.Type)[1];

        $r3 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r2[0] = $r3;

        virtualinvoke r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r2);

        return;
    }

    public void visitTypeVariable(java.lang.reflect.TypeVariable)
    {
        com.google.common.reflect.TypeToken$3 r0;
        java.lang.reflect.Type $r5;
        java.lang.reflect.TypeVariable $r1;
        java.lang.StringBuilder $r3;
        com.google.common.reflect.TypeToken $r4;
        java.lang.String $r6;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.google.common.reflect.TypeToken$3;

        $r1 := @parameter0: java.lang.reflect.TypeVariable;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<com.google.common.reflect.TypeToken$3: com.google.common.reflect.TypeToken this$0>;

        $r5 = staticinvoke <com.google.common.reflect.TypeToken: java.lang.reflect.Type access$400(com.google.common.reflect.TypeToken)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("contains a type variable and is not safe for the operation");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public void visitWildcardType(java.lang.reflect.WildcardType)
    {
        com.google.common.reflect.TypeToken$3 r0;
        java.lang.reflect.Type[] $r2;
        java.lang.reflect.WildcardType $r1;

        r0 := @this: com.google.common.reflect.TypeToken$3;

        $r1 := @parameter0: java.lang.reflect.WildcardType;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        virtualinvoke r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r2);

        $r2 = interfaceinvoke $r1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        virtualinvoke r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r2);

        return;
    }
}
