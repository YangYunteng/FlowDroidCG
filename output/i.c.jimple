public final class i.c extends java.lang.Object implements java.lang.Comparable
{
    public static final i.c a;
    public static final i.c$a b;
    public final int c;
    public final int d;
    public final int e;
    public final int f;

    static void <clinit>()
    {
        i.c$a $r0;
        i.c $r1;

        $r0 = new i.c$a;

        specialinvoke $r0.<i.c$a: void <init>(i.f.b.g)>(null);

        <i.c: i.c$a b> = $r0;

        $r1 = new i.c;

        specialinvoke $r1.<i.c: void <init>(int,int,int)>(1, 3, 72);

        <i.c: i.c a> = $r1;

        return;
    }

    public void <init>(int, int, int)
    {
        int $i0, $i1, $i2;
        i.c r0;

        r0 := @this: i.c;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<i.c: int d> = $i0;

        r0.<i.c: int e> = $i1;

        r0.<i.c: int f> = $i2;

        $i0 = r0.<i.c: int d>;

        $i1 = r0.<i.c: int e>;

        $i2 = r0.<i.c: int f>;

        $i0 = virtualinvoke r0.<i.c: int a(int,int,int)>($i0, $i1, $i2);

        r0.<i.c: int c> = $i0;

        return;
    }

    public final int a(int, int, int)
    {
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        i.c r0;
        boolean $z0;

        r0 := @this: i.c;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        if $i1 >= 0 goto label1;

        goto label4;

     label1:
        if 255 < $i1 goto label4;

        if $i2 >= 0 goto label2;

        goto label4;

     label2:
        if 255 < $i2 goto label4;

        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        if 255 < $i0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        if $z0 == 0 goto label6;

        $i1 = $i1 << 16;

        $i2 = $i2 << 8;

        $i1 = $i1 + $i2;

        $i1 = $i1 + $i0;

        return $i1;

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version components are out of range: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    public int a(i.c)
    {
        int $i0, $i1;
        i.c r0, $r1;

        r0 := @this: i.c;

        $r1 := @parameter0: i.c;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = r0.<i.c: int c>;

        $i1 = $r1.<i.c: int c>;

        $i0 = $i0 - $i1;

        return $i0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        i.c r0, $r2;

        r0 := @this: i.c;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (i.c) $r1;

        $i0 = virtualinvoke r0.<i.c: int a(i.c)>($r2);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object $r1;
        i.c r0, $r2;
        boolean $z0;

        r0 := @this: i.c;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof i.c;

        if $z0 != 0 goto label2;

        $r1 = null;

     label2:
        $r2 = (i.c) $r1;

        if $r2 == null goto label4;

        $i0 = r0.<i.c: int c>;

        $i1 = $r2.<i.c: int c>;

        if $i0 != $i1 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        return 0;
    }

    public int hashCode()
    {
        int i0;
        i.c r0;

        r0 := @this: i.c;

        i0 = r0.<i.c: int c>;

        return i0;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        i.c r0;

        r0 := @this: i.c;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i0 = r0.<i.c: int d>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i0 = r0.<i.c: int e>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i0 = r0.<i.c: int f>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
}
