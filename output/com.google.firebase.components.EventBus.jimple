public class com.google.firebase.components.EventBus extends java.lang.Object implements com.google.firebase.events.Subscriber, com.google.firebase.events.Publisher
{
    public final java.util.concurrent.Executor defaultExecutor;
    public final java.util.Map handlerMap;
    public java.util.Queue pendingEvents;

    public void <init>(java.util.concurrent.Executor)
    {
        com.google.firebase.components.EventBus r0;
        java.util.concurrent.Executor $r1;
        java.util.HashMap $r2;
        java.util.ArrayDeque $r3;

        r0 := @this: com.google.firebase.components.EventBus;

        $r1 := @parameter0: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.google.firebase.components.EventBus: java.util.Map handlerMap> = $r2;

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>()>();

        r0.<com.google.firebase.components.EventBus: java.util.Queue pendingEvents> = $r3;

        r0.<com.google.firebase.components.EventBus: java.util.concurrent.Executor defaultExecutor> = $r1;

        return;
    }

    private java.util.Set getHandlers(com.google.firebase.events.Event)
    {
        java.lang.Throwable $r6;
        com.google.firebase.events.Event $r2;
        com.google.firebase.components.EventBus r0;
        java.util.Map $r1;
        java.util.Set $r5;
        java.lang.Class $r3;
        java.lang.Object $r4;

        r0 := @this: com.google.firebase.components.EventBus;

        $r2 := @parameter0: com.google.firebase.events.Event;

        entermonitor r0;

     label1:
        $r1 = r0.<com.google.firebase.components.EventBus: java.util.Map handlerMap>;

        $r3 = virtualinvoke $r2.<com.google.firebase.events.Event: java.lang.Class getType()>();

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r1 = (java.util.Map) $r4;

        if $r1 != null goto label2;

        $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        goto label3;

     label2:
        $r5 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

     label3:
        exitmonitor r0;

        return $r5;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public static void lambda$publish$0(java.util.Map$Entry, com.google.firebase.events.Event)
    {
        com.google.firebase.events.Event $r0;
        java.util.Map$Entry $r2;
        com.google.firebase.events.EventHandler $r3;
        java.lang.Object $r1;

        $r2 := @parameter0: java.util.Map$Entry;

        $r0 := @parameter1: com.google.firebase.events.Event;

        $r1 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (com.google.firebase.events.EventHandler) $r1;

        interfaceinvoke $r3.<com.google.firebase.events.EventHandler: void handle(com.google.firebase.events.Event)>($r0);

        return;
    }

    public void enablePublishingAndFlushPending()
    {
        java.lang.Throwable $r5;
        com.google.firebase.events.Event $r4;
        com.google.firebase.components.EventBus r0;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.util.Queue $r1;
        boolean $z0;

        r0 := @this: com.google.firebase.components.EventBus;

        entermonitor r0;

     label01:
        $r1 = r0.<com.google.firebase.components.EventBus: java.util.Queue pendingEvents>;

        if $r1 == null goto label02;

        $r1 = r0.<com.google.firebase.components.EventBus: java.util.Queue pendingEvents>;

        r0.<com.google.firebase.components.EventBus: java.util.Queue pendingEvents> = null;

        goto label03;

     label02:
        $r1 = null;

     label03:
        exitmonitor r0;

     label04:
        if $r1 == null goto label06;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.firebase.events.Event) $r3;

        virtualinvoke r0.<com.google.firebase.components.EventBus: void publish(com.google.firebase.events.Event)>($r4);

        goto label05;

     label06:
        return;

     label07:
        $r5 := @caughtexception;

     label08:
        exitmonitor r0;

     label09:
        goto label10;

     label10:
        throw $r5;

     label11:
        return;

        catch java.lang.Throwable from label01 to label04 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void publish(com.google.firebase.events.Event)
    {
        java.lang.Throwable $r9;
        com.google.firebase.events.Event $r1;
        java.util.Map$Entry $r6;
        com.google.firebase.components.EventBus r0;
        java.util.Iterator $r4;
        java.util.concurrent.Executor $r7;
        java.util.Set $r3;
        java.lang.Runnable $r8;
        java.lang.Object $r5;
        java.util.Queue $r2;
        boolean $z0;

        r0 := @this: com.google.firebase.components.EventBus;

        $r1 := @parameter0: com.google.firebase.events.Event;

        staticinvoke <com.google.firebase.components.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        entermonitor r0;

     label01:
        $r2 = r0.<com.google.firebase.components.EventBus: java.util.Queue pendingEvents>;

        if $r2 == null goto label03;

        $r2 = r0.<com.google.firebase.components.EventBus: java.util.Queue pendingEvents>;

        interfaceinvoke $r2.<java.util.Queue: boolean add(java.lang.Object)>($r1);

        exitmonitor r0;

     label02:
        return;

     label03:
        exitmonitor r0;

     label04:
        $r3 = specialinvoke r0.<com.google.firebase.components.EventBus: java.util.Set getHandlers(com.google.firebase.events.Event)>($r1);

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.util.concurrent.Executor) $r5;

        $r8 = staticinvoke <com.google.firebase.components.EventBus$$Lambda$1: java.lang.Runnable lambdaFactory$(java.util.Map$Entry,com.google.firebase.events.Event)>($r6, $r1);

        interfaceinvoke $r7.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8);

        goto label05;

     label06:
        return;

     label07:
        $r9 := @caughtexception;

     label08:
        exitmonitor r0;

     label09:
        goto label10;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void subscribe(java.lang.Class, com.google.firebase.events.EventHandler)
    {
        com.google.firebase.components.EventBus r0;
        java.util.concurrent.Executor $r3;
        com.google.firebase.events.EventHandler $r2;
        java.lang.Class $r1;

        r0 := @this: com.google.firebase.components.EventBus;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: com.google.firebase.events.EventHandler;

        $r3 = r0.<com.google.firebase.components.EventBus: java.util.concurrent.Executor defaultExecutor>;

        virtualinvoke r0.<com.google.firebase.components.EventBus: void subscribe(java.lang.Class,java.util.concurrent.Executor,com.google.firebase.events.EventHandler)>($r1, $r3, $r2);

        return;
    }

    public void subscribe(java.lang.Class, java.util.concurrent.Executor, com.google.firebase.events.EventHandler)
    {
        java.lang.Throwable $r7;
        com.google.firebase.components.EventBus r0;
        java.util.concurrent.Executor $r1;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.Map $r5;
        com.google.firebase.events.EventHandler $r2;
        java.lang.Class $r4;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: com.google.firebase.components.EventBus;

        $r4 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.util.concurrent.Executor;

        $r2 := @parameter2: com.google.firebase.events.EventHandler;

        entermonitor r0;

     label1:
        staticinvoke <com.google.firebase.components.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        staticinvoke <com.google.firebase.components.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.firebase.components.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r5 = r0.<com.google.firebase.components.EventBus: java.util.Map handlerMap>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r5 = r0.<com.google.firebase.components.EventBus: java.util.Map handlerMap>;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

     label2:
        $r5 = r0.<com.google.firebase.components.EventBus: java.util.Map handlerMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r3 = (java.util.concurrent.ConcurrentHashMap) $r6;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

     label3:
        exitmonitor r0;

        return;

     label4:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public void unsubscribe(java.lang.Class, com.google.firebase.events.EventHandler)
    {
        java.lang.Throwable $r6;
        com.google.firebase.components.EventBus r0;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.util.Map $r3;
        com.google.firebase.events.EventHandler $r2;
        java.lang.Class $r1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.firebase.components.EventBus;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: com.google.firebase.events.EventHandler;

        entermonitor r0;

     label1:
        staticinvoke <com.google.firebase.components.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.firebase.components.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r3 = r0.<com.google.firebase.components.EventBus: java.util.Map handlerMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

     label2:
        if $z0 != 0 goto label3;

        exitmonitor r0;

        return;

     label3:
        $r3 = r0.<com.google.firebase.components.EventBus: java.util.Map handlerMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.util.concurrent.ConcurrentHashMap) $r4;

        virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r2);

        $z0 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r3 = r0.<com.google.firebase.components.EventBus: java.util.Map handlerMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
}
