public abstract class org.dom4j.tree.AbstractAttribute extends org.dom4j.tree.AbstractNode implements org.dom4j.Attribute
{

    public void <init>()
    {
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        specialinvoke r0.<org.dom4j.tree.AbstractNode: void <init>()>();

        return;
    }

    public void accept(org.dom4j.Visitor)
    {
        org.dom4j.Visitor $r1;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 := @parameter0: org.dom4j.Visitor;

        interfaceinvoke $r1.<org.dom4j.Visitor: void visit(org.dom4j.Attribute)>(r0);

        return;
    }

    public java.lang.String asXML()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getQualifiedName()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $r2 = interfaceinvoke r0.<org.dom4j.Attribute: java.lang.String getValue()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public org.dom4j.Node createXPathResult(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractAttribute r0;
        org.dom4j.tree.DefaultAttribute $r2;
        org.dom4j.Element $r1;
        org.dom4j.QName $r3;
        java.lang.String $r4;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = new org.dom4j.tree.DefaultAttribute;

        $r3 = interfaceinvoke r0.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r4 = interfaceinvoke r0.<org.dom4j.Attribute: java.lang.String getValue()>();

        specialinvoke $r2.<org.dom4j.tree.DefaultAttribute: void <init>(org.dom4j.Element,org.dom4j.QName,java.lang.String)>($r1, $r3, $r4);

        return $r2;
    }

    public java.lang.Object getData()
    {
        java.lang.String $r1;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = interfaceinvoke r0.<org.dom4j.Attribute: java.lang.String getValue()>();

        return $r1;
    }

    public java.lang.String getName()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = interfaceinvoke r0.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getName()>();

        return $r2;
    }

    public org.dom4j.Namespace getNamespace()
    {
        org.dom4j.QName $r1;
        org.dom4j.tree.AbstractAttribute r0;
        org.dom4j.Namespace $r2;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = interfaceinvoke r0.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: org.dom4j.Namespace getNamespace()>();

        return $r2;
    }

    public java.lang.String getNamespacePrefix()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = interfaceinvoke r0.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getNamespacePrefix()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = interfaceinvoke r0.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public short getNodeType()
    {
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        return 2;
    }

    public java.lang.String getPath(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractAttribute r0;
        java.lang.StringBuffer $r1;
        int $i0;
        org.dom4j.Element $r2, $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r2 := @parameter0: org.dom4j.Element;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r3 == null goto label1;

        if $r3 == $r2 goto label1;

        $r4 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getPath(org.dom4j.Element)>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

     label1:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getNamespaceURI()>();

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getNamespacePrefix()>();

        if $r4 == null goto label3;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        if $r5 == null goto label3;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        goto label3;

     label2:
        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getQualifiedName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        goto label4;

     label3:
        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label4:
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String getQualifiedName()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = interfaceinvoke r0.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getQualifiedName()>();

        return $r2;
    }

    public java.lang.String getText()
    {
        java.lang.String $r1;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = interfaceinvoke r0.<org.dom4j.Attribute: java.lang.String getValue()>();

        return $r1;
    }

    public java.lang.String getUniquePath(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractAttribute r0;
        java.lang.StringBuffer $r1;
        int $i0;
        org.dom4j.Element $r2, $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r2 := @parameter0: org.dom4j.Element;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r3 == null goto label1;

        if $r3 == $r2 goto label1;

        $r4 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getUniquePath(org.dom4j.Element)>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

     label1:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getNamespaceURI()>();

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getNamespacePrefix()>();

        if $r4 == null goto label3;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        if $r5 == null goto label3;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        goto label3;

     label2:
        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getQualifiedName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        goto label4;

     label3:
        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label4:
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public void setData(java.lang.Object)
    {
        java.lang.Object $r2;
        java.lang.String $r1;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r2 := @parameter0: java.lang.Object;

        if $r2 != null goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

     label2:
        virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: void setValue(java.lang.String)>($r1);

        return;
    }

    public void setNamespace(org.dom4j.Namespace)
    {
        java.lang.UnsupportedOperationException $r2;
        org.dom4j.tree.AbstractAttribute r0;
        org.dom4j.Namespace $r1;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 := @parameter0: org.dom4j.Namespace;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This Attribute is read only and cannot be changed");

        throw $r2;
    }

    public void setText(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: void setValue(java.lang.String)>($r1);

        return;
    }

    public void setValue(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.String $r1;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This Attribute is read only and cannot be changed");

        throw $r2;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [Attribute: name ");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getQualifiedName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value \"");

        $r2 = interfaceinvoke r0.<org.dom4j.Attribute: java.lang.String getValue()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void write(java.io.Writer)
    {
        java.io.Writer $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractAttribute r0;

        r0 := @this: org.dom4j.tree.AbstractAttribute;

        $r1 := @parameter0: java.io.Writer;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractAttribute: java.lang.String getQualifiedName()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("=\"");

        $r2 = interfaceinvoke r0.<org.dom4j.Attribute: java.lang.String getValue()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("\"");

        return;
    }
}
