public final class com.google.common.collect.Streams$2 extends java.util.Spliterators$AbstractSpliterator
{
    public long index;
    public final java.util.Iterator val$fromIterator;
    public final com.google.common.collect.Streams$FunctionWithIndex val$function;

    public void <init>(long, int, java.util.Iterator, com.google.common.collect.Streams$FunctionWithIndex)
    {
        com.google.common.collect.Streams$2 r0;
        com.google.common.collect.Streams$FunctionWithIndex $r2;
        java.util.Iterator $r1;
        int $i0;
        long $l1;

        r0 := @this: com.google.common.collect.Streams$2;

        $l1 := @parameter0: long;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.Iterator;

        $r2 := @parameter3: com.google.common.collect.Streams$FunctionWithIndex;

        r0.<com.google.common.collect.Streams$2: java.util.Iterator val$fromIterator> = $r1;

        r0.<com.google.common.collect.Streams$2: com.google.common.collect.Streams$FunctionWithIndex val$function> = $r2;

        specialinvoke r0.<java.util.Spliterators$AbstractSpliterator: void <init>(long,int)>($l1, $i0);

        r0.<com.google.common.collect.Streams$2: long index> = 0L;

        return;
    }

    public boolean tryAdvance(java.util.function.Consumer)
    {
        com.google.common.collect.Streams$FunctionWithIndex $r3;
        java.util.Iterator $r2;
        long $l0, $l1;
        java.util.function.Consumer $r1;
        com.google.common.collect.Streams$2 r0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.Streams$2;

        $r1 := @parameter0: java.util.function.Consumer;

        $r2 = r0.<com.google.common.collect.Streams$2: java.util.Iterator val$fromIterator>;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.google.common.collect.Streams$2: com.google.common.collect.Streams$FunctionWithIndex val$function>;

        $r2 = r0.<com.google.common.collect.Streams$2: java.util.Iterator val$fromIterator>;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $l0 = r0.<com.google.common.collect.Streams$2: long index>;

        $l1 = 1L + $l0;

        r0.<com.google.common.collect.Streams$2: long index> = $l1;

        $r4 = interfaceinvoke $r3.<com.google.common.collect.Streams$FunctionWithIndex: java.lang.Object apply(java.lang.Object,long)>($r4, $l0);

        interfaceinvoke $r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r4);

        return 1;

     label1:
        return 0;
    }
}
