public final class com.google.common.collect.Iterables extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.collect.Iterables r0;

        r0 := @this: com.google.common.collect.Iterables;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean addAll(java.util.Collection, java.lang.Iterable)
    {
        java.util.Iterator $r3;
        java.util.Collection $r0, $r2;
        java.lang.Iterable $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.lang.Iterable;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.collect.Collections2: java.util.Collection cast(java.lang.Iterable)>($r1);

        $z0 = interfaceinvoke $r0.<java.util.Collection: boolean addAll(java.util.Collection)>($r2);

        return $z0;

     label1:
        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>($r0, $r3);

        return $z0;
    }

    public static boolean all(java.lang.Iterable, com.google.common.base.Predicate)
    {
        java.util.Iterator $r2;
        com.google.common.base.Predicate $r0;
        java.lang.Iterable $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: com.google.common.base.Predicate;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean all(java.util.Iterator,com.google.common.base.Predicate)>($r2, $r0);

        return $z0;
    }

    public static boolean any(java.lang.Iterable, com.google.common.base.Predicate)
    {
        java.util.Iterator $r2;
        com.google.common.base.Predicate $r0;
        java.lang.Iterable $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: com.google.common.base.Predicate;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean any(java.util.Iterator,com.google.common.base.Predicate)>($r2, $r0);

        return $z0;
    }

    public static java.util.Collection castOrCopyToCollection(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        java.lang.Iterable $r0;
        boolean $z0;
        java.util.ArrayList $r3;

        $r0 := @parameter0: java.lang.Iterable;

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r1 = (java.util.Collection) $r0;

        return $r1;

     label1:
        $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>($r2);

        return $r3;
    }

    public static java.lang.Iterable concat(java.lang.Iterable)
    {
        com.google.common.collect.FluentIterable $r0;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concat(java.lang.Iterable)>($r1);

        return $r0;
    }

    public static java.lang.Iterable concat(java.lang.Iterable, java.lang.Iterable)
    {
        com.google.common.collect.FluentIterable $r1;
        java.lang.Iterable $r0, $r2;

        $r2 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable)>($r2, $r0);

        return $r1;
    }

    public static java.lang.Iterable concat(java.lang.Iterable, java.lang.Iterable, java.lang.Iterable)
    {
        com.google.common.collect.FluentIterable $r2;
        java.lang.Iterable $r0, $r1, $r3;

        $r3 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Iterable;

        $r1 := @parameter2: java.lang.Iterable;

        $r2 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)>($r3, $r0, $r1);

        return $r2;
    }

    public static java.lang.Iterable concat(java.lang.Iterable, java.lang.Iterable, java.lang.Iterable, java.lang.Iterable)
    {
        com.google.common.collect.FluentIterable $r3;
        java.lang.Iterable $r0, $r1, $r2, $r4;

        $r4 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Iterable;

        $r1 := @parameter2: java.lang.Iterable;

        $r2 := @parameter3: java.lang.Iterable;

        $r3 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)>($r4, $r0, $r1, $r2);

        return $r3;
    }

    public static transient java.lang.Iterable concat(java.lang.Iterable[])
    {
        java.lang.Iterable[] $r1;
        com.google.common.collect.FluentIterable $r0;

        $r1 := @parameter0: java.lang.Iterable[];

        $r0 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concat(java.lang.Iterable[])>($r1);

        return $r0;
    }

    public static java.lang.Iterable consumingIterable(java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        com.google.common.collect.Iterables$8 $r1;

        $r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.collect.Iterables$8;

        specialinvoke $r1.<com.google.common.collect.Iterables$8: void <init>(java.lang.Iterable)>($r0);

        return $r1;
    }

    public static boolean contains(java.lang.Iterable, java.lang.Object)
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.lang.Object $r0;
        java.lang.Iterable $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Object;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Collection) $r1;

        $z0 = staticinvoke <com.google.common.collect.Collections2: boolean safeContains(java.util.Collection,java.lang.Object)>($r2, $r0);

        return $z0;

     label1:
        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>($r3, $r0);

        return $z0;
    }

    public static java.lang.Iterable cycle(java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        com.google.common.collect.Iterables$1 $r1;

        $r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.collect.Iterables$1;

        specialinvoke $r1.<com.google.common.collect.Iterables$1: void <init>(java.lang.Iterable)>($r0);

        return $r1;
    }

    public static transient java.lang.Iterable cycle(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.lang.Iterable $r2;
        java.util.ArrayList $r1;

        $r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r0);

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable cycle(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static boolean elementsEqual(java.lang.Iterable, java.lang.Iterable)
    {
        java.util.Iterator $r4, $r5;
        java.util.Collection $r2, $r3;
        java.lang.Iterable $r0, $r1;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.lang.Iterable;

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Collection) $r0;

        $r3 = (java.util.Collection) $r1;

        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r4 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean elementsEqual(java.util.Iterator,java.util.Iterator)>($r4, $r5);

        return $z0;
    }

    public static java.lang.Iterable filter(java.lang.Iterable, com.google.common.base.Predicate)
    {
        com.google.common.collect.Iterables$4 $r2;
        com.google.common.base.Predicate $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.Iterables$4;

        specialinvoke $r2.<com.google.common.collect.Iterables$4: void <init>(java.lang.Iterable,com.google.common.base.Predicate)>($r0, $r1);

        return $r2;
    }

    public static java.lang.Iterable filter(java.lang.Iterable, java.lang.Class)
    {
        java.lang.Class $r1;
        com.google.common.base.Predicate $r2;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.lang.Class;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate instanceOf(java.lang.Class)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,com.google.common.base.Predicate)>($r0, $r2);

        return $r0;
    }

    public static java.lang.Object find(java.lang.Iterable, com.google.common.base.Predicate)
    {
        java.util.Iterator $r2;
        com.google.common.base.Predicate $r0;
        java.lang.Object $r3;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: com.google.common.base.Predicate;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object find(java.util.Iterator,com.google.common.base.Predicate)>($r2, $r0);

        return $r3;
    }

    public static java.lang.Object find(java.lang.Iterable, com.google.common.base.Predicate, java.lang.Object)
    {
        java.util.Iterator $r3;
        com.google.common.base.Predicate $r0;
        java.lang.Object $r1;
        java.lang.Iterable $r2;

        $r2 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: com.google.common.base.Predicate;

        $r1 := @parameter2: java.lang.Object;

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r1 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object find(java.util.Iterator,com.google.common.base.Predicate,java.lang.Object)>($r3, $r0, $r1);

        return $r1;
    }

    public static int frequency(java.lang.Iterable, java.lang.Object)
    {
        java.util.Iterator $r4;
        com.google.common.collect.Multiset $r2;
        int $i0;
        java.util.Set $r3;
        java.lang.Object $r0;
        java.lang.Iterable $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Multiset) $r1;

        $i0 = interfaceinvoke $r2.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r0);

        return $i0;

     label1:
        $z0 = $r1 instanceof java.util.Set;

        if $z0 == 0 goto label2;

        $r3 = (java.util.Set) $r1;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r0);

        $i0 = (int) $z0;

        return $i0;

     label2:
        $r4 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i0 = staticinvoke <com.google.common.collect.Iterators: int frequency(java.util.Iterator,java.lang.Object)>($r4, $r0);

        return $i0;
    }

    public static java.lang.Object get(java.lang.Iterable, int)
    {
        java.util.List $r1;
        java.util.Iterator $r3;
        int $i0;
        java.lang.Object $r2;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r0 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r1 = (java.util.List) $r0;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        return $r2;

     label1:
        $r3 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object get(java.util.Iterator,int)>($r3, $i0);

        return $r2;
    }

    public static java.lang.Object get(java.lang.Iterable, int, java.lang.Object)
    {
        java.util.List $r2;
        java.util.Iterator $r3;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.collect.Iterators: void checkNonnegative(int)>($i0);

        $z0 = $r0 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.List cast(java.lang.Iterable)>($r0);

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 >= $i1 goto label2;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        return $r1;

     label1:
        $r3 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        staticinvoke <com.google.common.collect.Iterators: int advance(java.util.Iterator,int)>($r3, $i0);

        $r1 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getNext(java.util.Iterator,java.lang.Object)>($r3, $r1);

     label2:
        return $r1;
    }

    public static java.lang.Object getFirst(java.lang.Iterable, java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.Iterator $r2;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r0 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getNext(java.util.Iterator,java.lang.Object)>($r2, $r0);

        return $r0;
    }

    public static java.lang.Object getLast(java.lang.Iterable)
    {
        java.util.List $r1;
        java.util.Iterator $r4;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $z0 = $r0 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r1 = (java.util.List) $r0;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getLastInNonemptyList(java.util.List)>($r1);

        return $r2;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label2:
        $r4 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getLast(java.util.Iterator)>($r4);

        return $r2;
    }

    public static java.lang.Object getLast(java.lang.Iterable, java.lang.Object)
    {
        java.util.List $r3;
        java.util.Iterator $r4;
        java.util.Collection $r2;
        java.lang.Object $r0;
        java.lang.Iterable $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Object;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <com.google.common.collect.Collections2: java.util.Collection cast(java.lang.Iterable)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <com.google.common.collect.Lists: java.util.List cast(java.lang.Iterable)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getLastInNonemptyList(java.util.List)>($r3);

        return $r0;

     label2:
        $r4 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r0 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getLast(java.util.Iterator,java.lang.Object)>($r4, $r0);

        return $r0;
    }

    public static java.lang.Object getLastInNonemptyList(java.util.List)
    {
        java.util.List $r0;
        int $i0, $i1;
        java.lang.Object $r1;

        $r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        return $r1;
    }

    public static java.lang.Object getOnlyElement(java.lang.Iterable)
    {
        java.lang.Object $r2;
        java.util.Iterator $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getOnlyElement(java.util.Iterator)>($r1);

        return $r2;
    }

    public static java.lang.Object getOnlyElement(java.lang.Iterable, java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.Iterator $r2;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r0 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getOnlyElement(java.util.Iterator,java.lang.Object)>($r2, $r0);

        return $r0;
    }

    public static int indexOf(java.lang.Iterable, com.google.common.base.Predicate)
    {
        java.util.Iterator $r2;
        com.google.common.base.Predicate $r0;
        int $i0;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: com.google.common.base.Predicate;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i0 = staticinvoke <com.google.common.collect.Iterators: int indexOf(java.util.Iterator,com.google.common.base.Predicate)>($r2, $r0);

        return $i0;
    }

    public static boolean isEmpty(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r1 = (java.util.Collection) $r0;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        return $z0;

     label1:
        $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public static java.lang.Iterable limit(java.lang.Iterable, int)
    {
        com.google.common.collect.Iterables$7 $r1;
        int $i0;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "limit is negative");

        $r1 = new com.google.common.collect.Iterables$7;

        specialinvoke $r1.<com.google.common.collect.Iterables$7: void <init>(java.lang.Iterable,int)>($r0, $i0);

        return $r1;
    }

    public static java.lang.Iterable mergeSorted(java.lang.Iterable, java.util.Comparator)
    {
        com.google.common.collect.Iterables$9 $r2;
        com.google.common.collect.Iterables$UnmodifiableIterable $r3;
        java.util.Comparator $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "iterables");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "comparator");

        $r2 = new com.google.common.collect.Iterables$9;

        specialinvoke $r2.<com.google.common.collect.Iterables$9: void <init>(java.lang.Iterable,java.util.Comparator)>($r0, $r1);

        $r3 = new com.google.common.collect.Iterables$UnmodifiableIterable;

        specialinvoke $r3.<com.google.common.collect.Iterables$UnmodifiableIterable: void <init>(java.lang.Iterable,com.google.common.collect.Iterables$1)>($r2, null);

        return $r3;
    }

    public static java.lang.Iterable paddedPartition(java.lang.Iterable, int)
    {
        com.google.common.collect.Iterables$3 $r1;
        int $i0;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r1 = new com.google.common.collect.Iterables$3;

        specialinvoke $r1.<com.google.common.collect.Iterables$3: void <init>(java.lang.Iterable,int)>($r0, $i0);

        return $r1;
    }

    public static java.lang.Iterable partition(java.lang.Iterable, int)
    {
        com.google.common.collect.Iterables$2 $r1;
        int $i0;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r1 = new com.google.common.collect.Iterables$2;

        specialinvoke $r1.<com.google.common.collect.Iterables$2: void <init>(java.lang.Iterable,int)>($r0, $i0);

        return $r1;
    }

    public static boolean removeAll(java.lang.Iterable, java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection $r1, $r2;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.util.Collection;

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Collection) $r0;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean removeAll(java.util.Collection)>($r1);

        return $z0;

     label1:
        $r3 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean removeAll(java.util.Iterator,java.util.Collection)>($r3, $r1);

        return $z0;
    }

    public static java.lang.Object removeFirstMatching(java.lang.Iterable, com.google.common.base.Predicate)
    {
        java.util.Iterator $r2;
        com.google.common.base.Predicate $r0;
        java.lang.Object $r3;
        java.lang.Iterable $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r0.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        return $r3;

     label2:
        return null;
    }

    public static boolean removeIf(java.lang.Iterable, com.google.common.base.Predicate)
    {
        java.util.Iterator $r3;
        com.google.common.base.Predicate $r0;
        java.util.Collection $r2;
        java.lang.Iterable $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: com.google.common.base.Predicate;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Collection) $r1;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean removeIf(java.util.function.Predicate)>($r0);

        return $z0;

     label1:
        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean removeIf(java.util.Iterator,com.google.common.base.Predicate)>($r3, $r0);

        return $z0;
    }

    public static boolean retainAll(java.lang.Iterable, java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection $r1, $r2;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.util.Collection;

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Collection) $r0;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean retainAll(java.util.Collection)>($r1);

        return $z0;

     label1:
        $r3 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean retainAll(java.util.Iterator,java.util.Collection)>($r3, $r1);

        return $z0;
    }

    public static int size(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        int $i0;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r1 = (java.util.Collection) $r0;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;

     label1:
        $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i0 = staticinvoke <com.google.common.collect.Iterators: int size(java.util.Iterator)>($r2);

        return $i0;
    }

    public static java.lang.Iterable skip(java.lang.Iterable, int)
    {
        com.google.common.collect.Iterables$6 $r1;
        int $i0;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "number to skip cannot be negative");

        $r1 = new com.google.common.collect.Iterables$6;

        specialinvoke $r1.<com.google.common.collect.Iterables$6: void <init>(java.lang.Iterable,int)>($r0, $i0);

        return $r1;
    }

    public static java.lang.Object[] toArray(java.lang.Iterable)
    {
        java.lang.Object[] $r2;
        java.lang.Iterable $r0;
        java.util.Collection $r1;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.collect.Iterables: java.util.Collection castOrCopyToCollection(java.lang.Iterable)>($r0);

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>();

        return $r2;
    }

    public static java.lang.Object[] toArray(java.lang.Iterable, java.lang.Class)
    {
        java.lang.Class $r1;
        java.lang.Object[] $r2;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] newArray(java.lang.Class,int)>($r1, 0);

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>($r0, $r2);

        return $r2;
    }

    public static java.lang.Object[] toArray(java.lang.Iterable, java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.lang.Iterable $r1;
        java.util.Collection $r2;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.util.Collection castOrCopyToCollection(java.lang.Iterable)>($r1);

        $r0 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r0);

        return $r0;
    }

    public static com.google.common.base.Function toIterator()
    {
        com.google.common.collect.Iterables$10 $r0;

        $r0 = new com.google.common.collect.Iterables$10;

        specialinvoke $r0.<com.google.common.collect.Iterables$10: void <init>()>();

        return $r0;
    }

    public static java.lang.String toString(java.lang.Iterable)
    {
        java.lang.String $r2;
        java.util.Iterator $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.lang.String toString(java.util.Iterator)>($r1);

        return $r2;
    }

    public static java.lang.Iterable transform(java.lang.Iterable, com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.Iterables$5 $r2;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: com.google.common.base.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.Iterables$5;

        specialinvoke $r2.<com.google.common.collect.Iterables$5: void <init>(java.lang.Iterable,com.google.common.base.Function)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.base.Optional tryFind(java.lang.Iterable, com.google.common.base.Predicate)
    {
        java.util.Iterator $r2;
        com.google.common.base.Predicate $r0;
        com.google.common.base.Optional $r3;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: com.google.common.base.Predicate;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.base.Optional tryFind(java.util.Iterator,com.google.common.base.Predicate)>($r2, $r0);

        return $r3;
    }

    public static java.lang.Iterable unmodifiableIterable(com.google.common.collect.ImmutableCollection)
    {
        com.google.common.collect.ImmutableCollection $r0;
        java.lang.Iterable $r1;

        $r0 := @parameter0: com.google.common.collect.ImmutableCollection;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = (java.lang.Iterable) $r0;

        return $r1;
    }

    public static java.lang.Iterable unmodifiableIterable(java.lang.Iterable)
    {
        com.google.common.collect.Iterables$UnmodifiableIterable $r1;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r0 instanceof com.google.common.collect.Iterables$UnmodifiableIterable;

        if $z0 != 0 goto label2;

        $z0 = $r0 instanceof com.google.common.collect.ImmutableCollection;

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r1 = new com.google.common.collect.Iterables$UnmodifiableIterable;

        specialinvoke $r1.<com.google.common.collect.Iterables$UnmodifiableIterable: void <init>(java.lang.Iterable,com.google.common.collect.Iterables$1)>($r0, null);

        return $r1;

     label2:
        return $r0;
    }
}
