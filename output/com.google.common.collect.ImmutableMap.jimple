public abstract class com.google.common.collect.ImmutableMap extends java.lang.Object implements java.util.Map, java.io.Serializable
{
    public static final java.util.Map$Entry[] EMPTY_ENTRY_ARRAY;
    public transient com.google.common.collect.ImmutableSet entrySet;
    public transient com.google.common.collect.ImmutableSet keySet;
    public transient com.google.common.collect.ImmutableSetMultimap multimapView;
    public transient com.google.common.collect.ImmutableCollection values;

    static void <clinit>()
    {
        java.util.Map$Entry[] $r0;

        $r0 = newarray (java.util.Map$Entry)[0];

        <com.google.common.collect.ImmutableMap: java.util.Map$Entry[] EMPTY_ENTRY_ARRAY> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.collect.ImmutableMap$Builder builder()
    {
        com.google.common.collect.ImmutableMap$Builder $r0;

        $r0 = new com.google.common.collect.ImmutableMap$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.ImmutableMap$Builder builderWithExpectedSize(int)
    {
        int $i0;
        com.google.common.collect.ImmutableMap$Builder $r0;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "expectedSize");

        $r0 = new com.google.common.collect.ImmutableMap$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: void <init>(int)>($i0);

        return $r0;
    }

    public static void checkNoConflict(boolean, java.lang.String, java.util.Map$Entry, java.util.Map$Entry)
    {
        java.util.Map$Entry $r0, $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r3 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.util.Map$Entry;

        $r1 := @parameter3: java.util.Map$Entry;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple entries with same ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable)
    {
        java.util.Map$Entry $r4;
        java.lang.Object[] $r2;
        com.google.common.collect.RegularImmutableMap $r3;
        com.google.common.collect.ImmutableMap $r7;
        java.lang.Iterable $r0;
        int $i0;
        java.lang.Object $r5, $r6;
        java.util.Map$Entry[] $r1;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = <com.google.common.collect.ImmutableMap: java.util.Map$Entry[] EMPTY_ENTRY_ARRAY>;

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>($r0, $r1);

        $r1 = (java.util.Map$Entry[]) $r2;

        $i0 = lengthof $r1;

        if $i0 == 0 goto label2;

        if $i0 == 1 goto label1;

        $r3 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap fromEntries(java.util.Map$Entry[])>($r1);

        return $r3;

     label1:
        $r4 = $r1[0];

        $r5 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object)>($r5, $r6);

        return $r7;

     label2:
        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        return $r7;
    }

    public static com.google.common.collect.ImmutableMap copyOf(java.util.Map)
    {
        com.google.common.collect.ImmutableMap $r1;
        java.util.EnumMap $r2;
        java.util.Map $r0;
        java.util.Set $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.Map;

        $z0 = $r0 instanceof com.google.common.collect.ImmutableMap;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof java.util.SortedMap;

        if $z0 != 0 goto label1;

        $r1 = (com.google.common.collect.ImmutableMap) $r0;

        $z0 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: boolean isPartialView()>();

        if $z0 != 0 goto label2;

        return $r1;

     label1:
        $z0 = $r0 instanceof java.util.EnumMap;

        if $z0 == 0 goto label2;

        $r2 = (java.util.EnumMap) $r0;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOfEnumMap(java.util.EnumMap)>($r2);

        return $r1;

     label2:
        $r3 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable)>($r3);

        return $r1;
    }

    public static com.google.common.collect.ImmutableMap copyOfEnumMap(java.util.EnumMap)
    {
        java.util.Map$Entry $r5;
        java.util.Iterator $r3;
        java.util.EnumMap $r0, $r1;
        com.google.common.collect.ImmutableMap $r7;
        java.util.Set $r2;
        java.lang.Object $r4, $r6;
        boolean $z0;

        $r1 := @parameter0: java.util.EnumMap;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.util.EnumMap)>($r1);

        $r2 = virtualinvoke $r0.<java.util.EnumMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r4, $r6);

        goto label1;

     label2:
        $r7 = staticinvoke <com.google.common.collect.ImmutableEnumMap: com.google.common.collect.ImmutableMap asImmutable(java.util.EnumMap)>($r0);

        return $r7;
    }

    public static java.util.Map$Entry entryOf(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        java.util.AbstractMap$SimpleImmutableEntry $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r2 = new java.util.AbstractMap$SimpleImmutableEntry;

        specialinvoke $r2.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.collect.ImmutableMap of()
    {
        com.google.common.collect.ImmutableMap r0;

        r0 = <com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMap EMPTY>;

        return r0;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableBiMap $r1;
        java.lang.Object $r0, $r2;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <com.google.common.collect.ImmutableBiMap: com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object)>($r2, $r0);

        return $r1;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r5;
        com.google.common.collect.RegularImmutableMap $r6;
        java.lang.Object $r0, $r1, $r2, $r3;
        java.util.Map$Entry[] $r4;

        $r2 := @parameter0: java.lang.Object;

        $r3 := @parameter1: java.lang.Object;

        $r0 := @parameter2: java.lang.Object;

        $r1 := @parameter3: java.lang.Object;

        $r4 = newarray (java.util.Map$Entry)[2];

        $r5 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r4[0] = $r5;

        $r5 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r4[1] = $r5;

        $r6 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap fromEntries(java.util.Map$Entry[])>($r4);

        return $r6;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r7;
        com.google.common.collect.RegularImmutableMap $r8;
        java.lang.Object $r0, $r1, $r2, $r3, $r4, $r5;
        java.util.Map$Entry[] $r6;

        $r4 := @parameter0: java.lang.Object;

        $r5 := @parameter1: java.lang.Object;

        $r0 := @parameter2: java.lang.Object;

        $r1 := @parameter3: java.lang.Object;

        $r2 := @parameter4: java.lang.Object;

        $r3 := @parameter5: java.lang.Object;

        $r6 = newarray (java.util.Map$Entry)[3];

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6[0] = $r7;

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r6[1] = $r7;

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r6[2] = $r7;

        $r8 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap fromEntries(java.util.Map$Entry[])>($r6);

        return $r8;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r9;
        com.google.common.collect.RegularImmutableMap $r10;
        java.lang.Object $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        java.util.Map$Entry[] $r8;

        $r6 := @parameter0: java.lang.Object;

        $r7 := @parameter1: java.lang.Object;

        $r0 := @parameter2: java.lang.Object;

        $r1 := @parameter3: java.lang.Object;

        $r2 := @parameter4: java.lang.Object;

        $r3 := @parameter5: java.lang.Object;

        $r4 := @parameter6: java.lang.Object;

        $r5 := @parameter7: java.lang.Object;

        $r8 = newarray (java.util.Map$Entry)[4];

        $r9 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8[0] = $r9;

        $r9 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r8[1] = $r9;

        $r9 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r8[2] = $r9;

        $r9 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r8[3] = $r9;

        $r10 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap fromEntries(java.util.Map$Entry[])>($r8);

        return $r10;
    }

    public static com.google.common.collect.ImmutableMap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Map$Entry $r11;
        com.google.common.collect.RegularImmutableMap $r12;
        java.lang.Object $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.util.Map$Entry[] $r10;

        $r8 := @parameter0: java.lang.Object;

        $r9 := @parameter1: java.lang.Object;

        $r0 := @parameter2: java.lang.Object;

        $r1 := @parameter3: java.lang.Object;

        $r2 := @parameter4: java.lang.Object;

        $r3 := @parameter5: java.lang.Object;

        $r4 := @parameter6: java.lang.Object;

        $r5 := @parameter7: java.lang.Object;

        $r6 := @parameter8: java.lang.Object;

        $r7 := @parameter9: java.lang.Object;

        $r10 = newarray (java.util.Map$Entry)[5];

        $r11 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10[0] = $r11;

        $r11 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r10[1] = $r11;

        $r11 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r10[2] = $r11;

        $r11 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r10[3] = $r11;

        $r11 = staticinvoke <com.google.common.collect.ImmutableMap: java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r10[4] = $r11;

        $r12 = staticinvoke <com.google.common.collect.RegularImmutableMap: com.google.common.collect.RegularImmutableMap fromEntries(java.util.Map$Entry[])>($r10);

        return $r12;
    }

    public static java.util.stream.Collector toImmutableMap(java.util.function.Function, java.util.function.Function)
    {
        java.util.stream.Collector $r1;
        java.util.function.Function $r0, $r2;

        $r2 := @parameter0: java.util.function.Function;

        $r0 := @parameter1: java.util.function.Function;

        $r1 = staticinvoke <com.google.common.collect.CollectCollectors: java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function)>($r2, $r0);

        return $r1;
    }

    public static java.util.stream.Collector toImmutableMap(java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator)
    {
        c.i.b.c.Qb $r1;
        java.util.stream.Collector $r4;
        java.util.function.Function $r2, $r3;
        java.util.function.BinaryOperator $r0;
        c.i.b.c.wc $r5;

        $r2 := @parameter0: java.util.function.Function;

        $r3 := @parameter1: java.util.function.Function;

        $r0 := @parameter2: java.util.function.BinaryOperator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = <c.i.b.c.Qb: c.i.b.c.Qb a>;

        $r4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)>($r2, $r3, $r0, $r1);

        $r5 = <c.i.b.c.wc: c.i.b.c.wc a>;

        $r4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>($r4, $r5);

        return $r4;
    }

    public com.google.common.collect.ImmutableSetMultimap asMultimap()
    {
        com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets $r1;
        com.google.common.collect.ImmutableMap r0;
        int $i0;
        boolean $z0;
        com.google.common.collect.ImmutableSetMultimap $r2;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap of()>();

        return $r2;

     label1:
        $r2 = r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSetMultimap multimapView>;

        if $r2 != null goto label2;

        $r2 = new com.google.common.collect.ImmutableSetMultimap;

        $r1 = new com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets;

        specialinvoke $r1.<com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets: void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableMap$1)>(r0, null);

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        specialinvoke $r2.<com.google.common.collect.ImmutableSetMultimap: void <init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator)>($r1, $i0, null);

        r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSetMultimap multimapView> = $r2;

     label2:
        return $r2;
    }

    public final void clear()
    {
        java.lang.UnsupportedOperationException $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public final java.lang.Object compute(java.lang.Object, java.util.function.BiFunction)
    {
        java.lang.UnsupportedOperationException $r3;
        com.google.common.collect.ImmutableMap r0;
        java.util.function.BiFunction $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.function.BiFunction;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public final java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function)
    {
        java.lang.UnsupportedOperationException $r3;
        com.google.common.collect.ImmutableMap r0;
        java.lang.Object $r2;
        java.util.function.Function $r1;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.function.Function;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public final java.lang.Object computeIfPresent(java.lang.Object, java.util.function.BiFunction)
    {
        java.lang.UnsupportedOperationException $r3;
        com.google.common.collect.ImmutableMap r0;
        java.util.function.BiFunction $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.function.BiFunction;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap r0;
        com.google.common.collect.ImmutableCollection $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values()>();

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public abstract com.google.common.collect.ImmutableSet createEntrySet();

    public abstract com.google.common.collect.ImmutableSet createKeySet();

    public abstract com.google.common.collect.ImmutableCollection createValues();

    public com.google.common.collect.ImmutableSet entrySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet createEntrySet()>();

        r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet> = $r1;

     label1:
        return $r1;
    }

    public volatile java.util.Set entrySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean equalsImpl(java.util.Map,java.lang.Object)>(r0, $r1);

        return $z0;
    }

    public abstract java.lang.Object get(java.lang.Object);

    public final java.lang.Object getOrDefault(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r2);

        if $r2 == null goto label1;

        return $r2;

     label1:
        return $r1;
    }

    public int hashCode()
    {
        int $i0;
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $i0 = staticinvoke <com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>($r1);

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isHashCodeFast()
    {
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        return 0;
    }

    public abstract boolean isPartialView();

    public com.google.common.collect.UnmodifiableIterator keyIterator()
    {
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.ImmutableMap r0;
        com.google.common.collect.UnmodifiableIterator $r3;
        com.google.common.collect.ImmutableMap$1 $r1;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        $r1 = new com.google.common.collect.ImmutableMap$1;

        specialinvoke $r1.<com.google.common.collect.ImmutableMap$1: void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.UnmodifiableIterator)>(r0, $r3);

        return $r1;
    }

    public com.google.common.collect.ImmutableSet keySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet createKeySet()>();

        r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet> = $r1;

     label1:
        return $r1;
    }

    public volatile java.util.Set keySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r1;
    }

    public java.util.Spliterator keySpliterator()
    {
        c.i.b.c.Zb $r1;
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.ImmutableMap r0;
        java.util.Spliterator $r3;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: java.util.Spliterator spliterator()>();

        $r1 = <c.i.b.c.Zb: c.i.b.c.Zb a>;

        $r3 = staticinvoke <com.google.common.collect.CollectSpliterators: java.util.Spliterator map(java.util.Spliterator,java.util.function.Function)>($r3, $r1);

        return $r3;
    }

    public final java.lang.Object merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction)
    {
        java.lang.UnsupportedOperationException $r4;
        com.google.common.collect.ImmutableMap r0;
        java.util.function.BiFunction $r2;
        java.lang.Object $r1, $r3;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.util.function.BiFunction;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public final java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        com.google.common.collect.ImmutableMap r0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public final void putAll(java.util.Map)
    {
        java.lang.UnsupportedOperationException $r2;
        com.google.common.collect.ImmutableMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.util.Map;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        com.google.common.collect.ImmutableMap r0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public final java.lang.Object remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final boolean remove(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        com.google.common.collect.ImmutableMap r0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public final java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        com.google.common.collect.ImmutableMap r0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public final boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r4;
        com.google.common.collect.ImmutableMap r0;
        java.lang.Object $r1, $r2, $r3;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public final void replaceAll(java.util.function.BiFunction)
    {
        java.lang.UnsupportedOperationException $r2;
        com.google.common.collect.ImmutableMap r0;
        java.util.function.BiFunction $r1;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 := @parameter0: java.util.function.BiFunction;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.String toStringImpl(java.util.Map)>(r0);

        return $r1;
    }

    public com.google.common.collect.ImmutableCollection values()
    {
        com.google.common.collect.ImmutableCollection $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection createValues()>();

        r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values> = $r1;

     label1:
        return $r1;
    }

    public volatile java.util.Collection values()
    {
        com.google.common.collect.ImmutableCollection $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values()>();

        return $r1;
    }

    public java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableMap$SerializedForm $r1;
        com.google.common.collect.ImmutableMap r0;

        r0 := @this: com.google.common.collect.ImmutableMap;

        $r1 = new com.google.common.collect.ImmutableMap$SerializedForm;

        specialinvoke $r1.<com.google.common.collect.ImmutableMap$SerializedForm: void <init>(com.google.common.collect.ImmutableMap)>(r0);

        return $r1;
    }
}
