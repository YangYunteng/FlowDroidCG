public abstract class org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter extends java.lang.Object
{

    public void <init>()
    {
        org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter r0;

        r0 := @this: org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.codehaus.jackson.map.ser.BeanPropertyWriter constructViewBased(org.codehaus.jackson.map.ser.BeanPropertyWriter, java.lang.Class[])
    {
        org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$SingleView $r2;
        int $i0;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r0;
        java.lang.Class[] $r1;
        java.lang.Class $r3;
        org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView $r4;

        $r0 := @parameter0: org.codehaus.jackson.map.ser.BeanPropertyWriter;

        $r1 := @parameter1: java.lang.Class[];

        $i0 = lengthof $r1;

        if $i0 != 1 goto label1;

        $r2 = new org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$SingleView;

        $r3 = $r1[0];

        specialinvoke $r2.<org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$SingleView: void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter,java.lang.Class)>($r0, $r3);

        return $r2;

     label1:
        $r4 = new org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView;

        specialinvoke $r4.<org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView: void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter,java.lang.Class[])>($r0, $r1);

        return $r4;
    }
}
