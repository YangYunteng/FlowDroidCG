public final class com.google.common.collect.Cut$AboveValue extends com.google.common.collect.Cut
{
    public static final long serialVersionUID;

    public void <init>(java.lang.Comparable)
    {
        com.google.common.collect.Cut$AboveValue r0;
        java.lang.Comparable $r1;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r1 := @parameter0: java.lang.Comparable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        specialinvoke r0.<com.google.common.collect.Cut: void <init>(java.lang.Comparable)>($r1);

        return;
    }

    public com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.Cut $r3;
        com.google.common.collect.DiscreteDomain $r1;
        com.google.common.collect.Cut$AboveValue r0;
        java.lang.Comparable $r2;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r1 := @parameter0: com.google.common.collect.DiscreteDomain;

        $r2 = virtualinvoke r0.<com.google.common.collect.Cut$AboveValue: java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain)>($r1);

        if $r2 == null goto label1;

        $r3 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowValue(java.lang.Comparable)>($r2);

        return $r3;

     label1:
        $r3 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveAll()>();

        return $r3;
    }

    public volatile int compareTo(java.lang.Object)
    {
        com.google.common.collect.Cut $r2;
        com.google.common.collect.Cut$AboveValue r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.common.collect.Cut) $r1;

        $i0 = specialinvoke r0.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r2);

        return $i0;
    }

    public void describeAsLowerBound(java.lang.StringBuilder)
    {
        com.google.common.collect.Cut$AboveValue r0;
        java.lang.StringBuilder $r1;
        java.lang.Comparable $r2;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r2 = r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        return;
    }

    public void describeAsUpperBound(java.lang.StringBuilder)
    {
        com.google.common.collect.Cut$AboveValue r0;
        java.lang.StringBuilder $r1;
        java.lang.Comparable $r2;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    public java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.Cut$AboveValue r0;
        java.lang.Comparable r2;
        com.google.common.collect.DiscreteDomain $r1;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r1 := @parameter0: com.google.common.collect.DiscreteDomain;

        r2 = r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        return r2;
    }

    public int hashCode()
    {
        com.google.common.collect.Cut$AboveValue r0;
        int $i0, $i1;
        java.lang.Comparable $r1;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r1 = r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = -1;

        $i0 = $i0 ^ $i1;

        return $i0;
    }

    public boolean isLessThan(java.lang.Comparable)
    {
        com.google.common.collect.Cut$AboveValue r0;
        int $i0;
        java.lang.Comparable $r1, $r2;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r2 := @parameter0: java.lang.Comparable;

        $r1 = r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        $i0 = staticinvoke <com.google.common.collect.Range: int compareOrThrow(java.lang.Comparable,java.lang.Comparable)>($r1, $r2);

        if $i0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.Cut$AboveValue r0;
        java.lang.Comparable $r1;
        com.google.common.collect.DiscreteDomain $r2;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r2 := @parameter0: com.google.common.collect.DiscreteDomain;

        $r1 = r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.DiscreteDomain: java.lang.Comparable next(java.lang.Comparable)>($r1);

        return $r1;
    }

    public java.lang.String toString()
    {
        com.google.common.collect.Cut$AboveValue r0;
        java.lang.StringBuilder $r2;
        java.lang.Comparable $r3;
        java.lang.String $r1;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r3 = r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public com.google.common.collect.BoundType typeAsLowerBound()
    {
        com.google.common.collect.Cut$AboveValue r0;
        com.google.common.collect.BoundType r1;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        r1 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType OPEN>;

        return r1;
    }

    public com.google.common.collect.BoundType typeAsUpperBound()
    {
        com.google.common.collect.Cut$AboveValue r0;
        com.google.common.collect.BoundType r1;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        r1 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType CLOSED>;

        return r1;
    }

    public com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType, com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.Cut $r6;
        java.lang.AssertionError $r4;
        int[] $r3;
        com.google.common.collect.BoundType $r1;
        com.google.common.collect.DiscreteDomain $r2;
        com.google.common.collect.Cut$AboveValue r0;
        int $i0;
        java.lang.Comparable $r5;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r1 := @parameter0: com.google.common.collect.BoundType;

        $r2 := @parameter1: com.google.common.collect.DiscreteDomain;

        $r3 = <com.google.common.collect.Cut$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $i0 = virtualinvoke $r1.<java.lang.Enum: int ordinal()>();

        $i0 = $r3[$i0];

        if $i0 == 1 goto label2;

        if $i0 != 2 goto label1;

        return r0;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r5 = r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        $r5 = virtualinvoke $r2.<com.google.common.collect.DiscreteDomain: java.lang.Comparable next(java.lang.Comparable)>($r5);

        if $r5 != null goto label3;

        $r6 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowAll()>();

        return $r6;

     label3:
        $r6 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowValue(java.lang.Comparable)>($r5);

        return $r6;
    }

    public com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType, com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.Cut $r5;
        java.lang.AssertionError $r6;
        int[] $r3;
        com.google.common.collect.BoundType $r2;
        com.google.common.collect.DiscreteDomain $r1;
        com.google.common.collect.Cut$AboveValue r0;
        int $i0;
        java.lang.Comparable $r4;

        r0 := @this: com.google.common.collect.Cut$AboveValue;

        $r2 := @parameter0: com.google.common.collect.BoundType;

        $r1 := @parameter1: com.google.common.collect.DiscreteDomain;

        $r3 = <com.google.common.collect.Cut$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $i0 = virtualinvoke $r2.<java.lang.Enum: int ordinal()>();

        $i0 = $r3[$i0];

        if $i0 == 1 goto label3;

        if $i0 != 2 goto label2;

        $r4 = r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        $r4 = virtualinvoke $r1.<com.google.common.collect.DiscreteDomain: java.lang.Comparable next(java.lang.Comparable)>($r4);

        if $r4 != null goto label1;

        $r5 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveAll()>();

        return $r5;

     label1:
        $r5 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowValue(java.lang.Comparable)>($r4);

        return $r5;

     label2:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label3:
        return r0;
    }
}
