public final class com.google.common.base.CharMatcher$Any extends com.google.common.base.CharMatcher$NamedFastMatcher
{
    public static final com.google.common.base.CharMatcher$Any INSTANCE;

    static void <clinit>()
    {
        com.google.common.base.CharMatcher$Any $r0;

        $r0 = new com.google.common.base.CharMatcher$Any;

        specialinvoke $r0.<com.google.common.base.CharMatcher$Any: void <init>()>();

        <com.google.common.base.CharMatcher$Any: com.google.common.base.CharMatcher$Any INSTANCE> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.base.CharMatcher$Any r0;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        specialinvoke r0.<com.google.common.base.CharMatcher$NamedFastMatcher: void <init>(java.lang.String)>("CharMatcher.any()");

        return;
    }

    public com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher)
    {
        com.google.common.base.CharMatcher $r1;
        com.google.common.base.CharMatcher$Any r0;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: com.google.common.base.CharMatcher;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        return $r1;
    }

    public java.lang.String collapseFrom(java.lang.CharSequence, char)
    {
        com.google.common.base.CharMatcher$Any r0;
        java.lang.CharSequence $r1;
        int $i1;
        char $c0;
        java.lang.String $r2;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i1 != 0 goto label1;

        return "";

     label1:
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        return $r2;
    }

    public int countIn(java.lang.CharSequence)
    {
        int $i0;
        com.google.common.base.CharMatcher$Any r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        return $i0;
    }

    public int indexIn(java.lang.CharSequence)
    {
        int $i0;
        com.google.common.base.CharMatcher$Any r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        $i0 = -1;

        return $i0;

     label1:
        return 0;
    }

    public int indexIn(java.lang.CharSequence, int)
    {
        com.google.common.base.CharMatcher$Any r0;
        java.lang.CharSequence $r1;
        int $i0, $i1;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: java.lang.CharSequence;

        $i1 := @parameter1: int;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>($i1, $i0);

        if $i1 != $i0 goto label1;

        $i1 = -1;

     label1:
        return $i1;
    }

    public int lastIndexIn(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher$Any r0;
        java.lang.CharSequence $r1;
        int $i0, $i1;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        return $i0;
    }

    public boolean matches(char)
    {
        char $c0;
        com.google.common.base.CharMatcher$Any r0;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $c0 := @parameter0: char;

        return 1;
    }

    public boolean matchesAllOf(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher$Any r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        return 1;
    }

    public boolean matchesNoneOf(java.lang.CharSequence)
    {
        int $i0;
        com.google.common.base.CharMatcher$Any r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public com.google.common.base.CharMatcher negate()
    {
        com.google.common.base.CharMatcher $r1;
        com.google.common.base.CharMatcher$Any r0;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher none()>();

        return $r1;
    }

    public volatile java.util.function.Predicate negate()
    {
        com.google.common.base.CharMatcher $r1;
        com.google.common.base.CharMatcher$Any r0;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 = virtualinvoke r0.<com.google.common.base.CharMatcher$Any: com.google.common.base.CharMatcher negate()>();

        return $r1;
    }

    public com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)
    {
        com.google.common.base.CharMatcher $r1;
        com.google.common.base.CharMatcher$Any r0;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: com.google.common.base.CharMatcher;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        return r0;
    }

    public java.lang.String removeFrom(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher$Any r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        return "";
    }

    public java.lang.String replaceFrom(java.lang.CharSequence, char)
    {
        com.google.common.base.CharMatcher$Any r0;
        java.lang.CharSequence $r1;
        int $i0;
        char[] $r2;
        char $c1;
        java.lang.String $r3;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: java.lang.CharSequence;

        $c1 := @parameter1: char;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r2 = newarray (char)[$i0];

        staticinvoke <java.util.Arrays: void fill(char[],char)>($r2, $c1);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r2);

        return $r3;
    }

    public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher$Any r0;
        java.lang.CharSequence $r1, $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r3 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $r2 = new java.lang.StringBuilder;

        $i0 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = $i0 * $i1;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        if $i0 >= $i1 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String trimFrom(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher$Any r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.common.base.CharMatcher$Any;

        $r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        return "";
    }
}
