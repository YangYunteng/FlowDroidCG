public final class com.google.common.io.BaseEncoding$Alphabet extends java.lang.Object
{
    public final int bitsPerChar;
    public final int bytesPerChunk;
    public final char[] chars;
    public final int charsPerChunk;
    public final byte[] decodabet;
    public final int mask;
    public final java.lang.String name;
    public final boolean[] validPadding;

    public void <init>(java.lang.String, char[])
    {
        byte[] $r5;
        com.google.common.io.BaseEncoding$Alphabet r0;
        byte $b4;
        int $i0, $i1, $i2, $i5;
        java.lang.ArithmeticException $r7, $r9;
        java.lang.String $r1, $r11;
        java.math.RoundingMode $r4;
        boolean $z0;
        boolean[] $r6;
        char $c3;
        java.lang.IllegalArgumentException $r12;
        char[] $r2, $r3;
        java.lang.StringBuilder $r8, $r10;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: char[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.io.BaseEncoding$Alphabet: java.lang.String name> = $r1;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r3 = $r2;

        r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars> = $r3;

        $i0 = lengthof $r2;

        $r4 = <java.math.RoundingMode: java.math.RoundingMode UNNECESSARY>;

     label01:
        $i0 = staticinvoke <com.google.common.math.IntMath: int log2(int,java.math.RoundingMode)>($i0, $r4);

     label02:
        r0.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar> = $i0;

        $i0 = r0.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $i0 = staticinvoke <java.lang.Integer: int lowestOneBit(int)>($i0);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(8, $i0);

     label03:
        $i1 = 8 / $i0;

     label04:
        r0.<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk> = $i1;

        $i1 = r0.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

     label05:
        $i0 = $i1 / $i0;

     label06:
        r0.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk> = $i0;

        $i0 = lengthof $r2;

        $i0 = $i0 - 1;

        r0.<com.google.common.io.BaseEncoding$Alphabet: int mask> = $i0;

        $r5 = newarray (byte)[128];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r5, -1);

        $i0 = 0;

        $i1 = 0;

     label07:
        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label12;

        $c3 = $r2[$i1];

        $i2 = lengthof $r5;

        $i5 = (int) $c3;

        if $i5 >= $i2 goto label08;

        $z0 = 1;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,char)>($z0, "Non-ASCII character: %s", $c3);

        $i2 = (int) $c3;

        $b4 = $r5[$i2];

        $i2 = (int) $b4;

        $i5 = -1;

        if $i2 != $i5 goto label10;

        $z0 = 1;

        goto label11;

     label10:
        $z0 = 0;

     label11:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,char)>($z0, "Duplicate character: %s", $c3);

        $b4 = (byte) $i1;

        $i2 = (int) $c3;

        $r5[$i2] = $b4;

        $i1 = $i1 + 1;

        goto label07;

     label12:
        r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet> = $r5;

        $i1 = r0.<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk>;

        $r6 = newarray (boolean)[$i1];

     label13:
        $i1 = r0.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>;

        if $i0 >= $i1 goto label14;

        $i1 = $i0 * 8;

        $i2 = r0.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $r4 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i1 = staticinvoke <com.google.common.math.IntMath: int divide(int,int,java.math.RoundingMode)>($i1, $i2, $r4);

        $r6[$i1] = 1;

        $i0 = $i0 + 1;

        goto label13;

     label14:
        r0.<com.google.common.io.BaseEncoding$Alphabet: boolean[] validPadding> = $r6;

        return;

     label15:
        $r7 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        $r8 = $r10;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal alphabet ");

        $r11 = new java.lang.String;

        specialinvoke $r11.<java.lang.String: void <init>(char[])>($r2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r7);

        throw $r12;

     label16:
        $r9 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        $r8 = $r10;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal alphabet length ");

        $i0 = lengthof $r2;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r9);

        goto label17;

     label17:
        throw $r12;

        catch java.lang.ArithmeticException from label01 to label02 with label16;
        catch java.lang.ArithmeticException from label03 to label04 with label15;
        catch java.lang.ArithmeticException from label05 to label06 with label15;
    }

    public static char[] access$000(com.google.common.io.BaseEncoding$Alphabet)
    {
        char[] r1;
        com.google.common.io.BaseEncoding$Alphabet $r0;

        $r0 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        r1 = $r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        return r1;
    }

    private boolean hasLowerCase()
    {
        com.google.common.io.BaseEncoding$Alphabet r0;
        int $i0, $i1;
        char[] $r1;
        char $c2;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = $r1[$i1];

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean isLowerCase(char)>($c2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean hasUpperCase()
    {
        com.google.common.io.BaseEncoding$Alphabet r0;
        int $i0, $i1;
        char[] $r1;
        char $c2;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = $r1[$i1];

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean isUpperCase(char)>($c2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean canDecode(char)
    {
        byte[] $r1;
        byte $b1;
        com.google.common.io.BaseEncoding$Alphabet r0;
        int $i2, $i3;
        char $c0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $c0 := @parameter0: char;

        $i2 = (int) $c0;

        if $i2 > 127 goto label1;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $i2 = (int) $c0;

        $b1 = $r1[$i2];

        $i2 = (int) $b1;

        $i3 = -1;

        if $i2 == $i3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int decode(char)
    {
        byte[] $r1;
        com.google.common.io.BaseEncoding$Alphabet r0;
        com.google.common.io.BaseEncoding$DecodingException $r5;
        char $c0;
        byte $b1;
        int $i2, $i3;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String $r3;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $c0 := @parameter0: char;

        $i2 = (int) $c0;

        if $i2 > 127 goto label3;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $i2 = (int) $c0;

        $b1 = $r1[$i2];

        $i2 = (int) $b1;

        $i3 = -1;

        if $i2 != $i3 goto label4;

        $i2 = (int) $c0;

        if $i2 <= 32 goto label2;

        $i2 = (int) $c0;

        if $i2 != 127 goto label1;

        goto label2;

     label1:
        $r5 = new com.google.common.io.BaseEncoding$DecodingException;

        $r4 = new java.lang.StringBuilder;

        $r2 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r3);

        throw $r5;

     label2:
        $r5 = new com.google.common.io.BaseEncoding$DecodingException;

        $r4 = new java.lang.StringBuilder;

        $r2 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character: 0x");

        $i2 = (int) $c0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r3);

        throw $r5;

     label3:
        $r5 = new com.google.common.io.BaseEncoding$DecodingException;

        $r4 = new java.lang.StringBuilder;

        $r2 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character: 0x");

        $i2 = (int) $c0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r3);

        throw $r5;

     label4:
        $i2 = (int) $b1;

        return $i2;
    }

    public char encode(int)
    {
        com.google.common.io.BaseEncoding$Alphabet r0;
        int $i0;
        char[] $r1;
        char $c1;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $c1 = $r1[$i0];

        return $c1;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.io.BaseEncoding$Alphabet r0, $r2;
        char[] $r3, $r4;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.io.BaseEncoding$Alphabet;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.io.BaseEncoding$Alphabet) $r1;

        $r3 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $r4 = $r2.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r3, $r4);

        return $z0;

     label1:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        char[] $r1;
        com.google.common.io.BaseEncoding$Alphabet r0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(char[])>($r1);

        return $i0;
    }

    public boolean isValidPaddingStartPosition(int)
    {
        com.google.common.io.BaseEncoding$Alphabet r0;
        boolean[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $i1 := @parameter0: int;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: boolean[] validPadding>;

        $i0 = r0.<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk>;

        $i1 = $i1 % $i0;

        $z0 = $r1[$i1];

        return $z0;
    }

    public com.google.common.io.BaseEncoding$Alphabet lowerCase()
    {
        com.google.common.io.BaseEncoding$Alphabet r0, $r3;
        char $c2;
        int $i0, $i1;
        char[] $r1, $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $z0 = specialinvoke r0.<com.google.common.io.BaseEncoding$Alphabet: boolean hasUpperCase()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $z0 = specialinvoke r0.<com.google.common.io.BaseEncoding$Alphabet: boolean hasLowerCase()>();

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot call lowerCase() on a mixed-case alphabet");

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i0 = lengthof $r1;

        $r1 = newarray (char)[$i0];

        $i0 = 0;

     label2:
        $r2 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $c2 = $r2[$i0];

        $c2 = staticinvoke <com.google.common.base.Ascii: char toLowerCase(char)>($c2);

        $r1[$i0] = $c2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r3 = new com.google.common.io.BaseEncoding$Alphabet;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<com.google.common.io.BaseEncoding$Alphabet: java.lang.String name>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lowerCase()");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[])>($r5, $r1);

        return $r3;
    }

    public boolean matches(char)
    {
        byte[] $r1;
        byte $b2;
        com.google.common.io.BaseEncoding$Alphabet r0;
        int $i0, $i3;
        char $c1;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $c1 := @parameter0: char;

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $i0 = lengthof $r1;

        $i3 = (int) $c1;

        if $i3 >= $i0 goto label1;

        $i0 = (int) $c1;

        $b2 = $r1[$i0];

        $i0 = (int) $b2;

        $i3 = -1;

        if $i0 == $i3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        java.lang.String r1;
        com.google.common.io.BaseEncoding$Alphabet r0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: java.lang.String name>;

        return r1;
    }

    public com.google.common.io.BaseEncoding$Alphabet upperCase()
    {
        com.google.common.io.BaseEncoding$Alphabet r0, $r3;
        char $c2;
        int $i0, $i1;
        char[] $r1, $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $z0 = specialinvoke r0.<com.google.common.io.BaseEncoding$Alphabet: boolean hasLowerCase()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $z0 = specialinvoke r0.<com.google.common.io.BaseEncoding$Alphabet: boolean hasUpperCase()>();

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot call upperCase() on a mixed-case alphabet");

        $r1 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i0 = lengthof $r1;

        $r1 = newarray (char)[$i0];

        $i0 = 0;

     label2:
        $r2 = r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $c2 = $r2[$i0];

        $c2 = staticinvoke <com.google.common.base.Ascii: char toUpperCase(char)>($c2);

        $r1[$i0] = $c2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r3 = new com.google.common.io.BaseEncoding$Alphabet;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<com.google.common.io.BaseEncoding$Alphabet: java.lang.String name>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".upperCase()");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[])>($r5, $r1);

        return $r3;
    }
}
