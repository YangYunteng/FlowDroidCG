public class c.f.a.a.b extends java.lang.Object
{
    public static c.f.a.a.b a;
    public final c.f.a.a.a.e b;

    public void <init>(android.content.Context, c.f.a.a.a.e)
    {
        android.content.Context $r6;
        android.content.pm.PackageManager $r13;
        android.content.pm.PackageManager$NameNotFoundException $r1;
        java.security.KeyStoreException $r4;
        android.content.pm.PackageInfo $r14;
        com.datatheorem.android.trustkit.config.ConfigurationException $r17;
        int $i0;
        java.lang.String $r8, $r12, $r15;
        boolean $z0;
        c.f.a.a.b r0;
        java.util.Set $r10, $r11;
        java.io.IOException $r5;
        java.security.cert.CertificateException $r2;
        c.f.a.a.a.e $r7;
        c.f.a.a.c.a $r16;
        java.security.NoSuchAlgorithmException $r3;
        android.content.pm.ApplicationInfo $r9;

        r0 := @this: c.f.a.a.b;

        $r6 := @parameter0: android.content.Context;

        $r7 := @parameter1: c.f.a.a.a.e;

        $r8 = "N/A";

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<c.f.a.a.b: c.f.a.a.a.e b> = $r7;

        $r9 = virtualinvoke $r6.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r9.<android.content.pm.ApplicationInfo: int flags>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $r10 = null;

        if $z0 == 0 goto label04;

        $r11 = virtualinvoke $r7.<c.f.a.a.a.e: java.util.Set a()>();

        $r10 = $r11;

        if $r11 == null goto label03;

        staticinvoke <c.f.a.a.d.a: void a(java.lang.String)>("App is debuggable - processing <debug-overrides> configuration.");

     label03:
        $z0 = virtualinvoke $r7.<c.f.a.a.a.e: boolean b()>();

        goto label05;

     label04:
        $z0 = 0;

     label05:
        $r12 = virtualinvoke $r6.<android.content.Context: java.lang.String getPackageName()>();

     label06:
        $r13 = virtualinvoke $r6.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r14 = virtualinvoke $r13.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r12, 0);

     label07:
        $r15 = $r14.<android.content.pm.PackageInfo: java.lang.String versionName>;

        goto label09;

     label08:
        $r15 = "N/A";

     label09:
        if $r15 != null goto label10;

        goto label11;

     label10:
        $r8 = $r15;

     label11:
        $r15 = staticinvoke <c.f.a.a.d.b: java.lang.String a(android.content.Context)>($r6);

        $r16 = new c.f.a.a.c.a;

        specialinvoke $r16.<c.f.a.a.c.a: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>($r6, $r12, $r8, $r15);

     label12:
        staticinvoke <c.f.a.a.b.g: void a(java.util.Set,boolean,c.f.a.a.c.a)>($r10, $z0, $r16);

     label13:
        return;

     label14:
        $r17 = new com.datatheorem.android.trustkit.config.ConfigurationException;

        specialinvoke $r17.<com.datatheorem.android.trustkit.config.ConfigurationException: void <init>(java.lang.String)>("Could not parse <debug-overrides> certificates");

        throw $r17;

     label15:
        $r1 := @caughtexception;

        goto label08;

     label16:
        $r2 := @caughtexception;

        goto label14;

     label17:
        $r3 := @caughtexception;

        goto label14;

     label18:
        $r4 := @caughtexception;

        goto label14;

     label19:
        $r5 := @caughtexception;

        goto label14;

        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label15;
        catch java.security.cert.CertificateException from label12 to label13 with label16;
        catch java.security.NoSuchAlgorithmException from label12 to label13 with label17;
        catch java.security.KeyStoreException from label12 to label13 with label18;
        catch java.io.IOException from label12 to label13 with label19;
    }

    public static int a(android.content.Context)
    {
        c.f.a.a.a $r0;
        android.content.Context $r1;
        int $i0;
        android.content.pm.ApplicationInfo $r2;

        $r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r0 = new c.f.a.a.a;

        specialinvoke $r0.<c.f.a.a.a: void <init>()>();

        virtualinvoke $r2.<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>($r0, "");

        $i0 = staticinvoke <c.f.a.a.a: int a(c.f.a.a.a)>($r0);

        return $i0;
    }

    public static c.f.a.a.b a(android.content.Context, int)
    {
        java.lang.Throwable $r8;
        android.content.Context $r3;
        c.f.a.a.b $r4, $r10;
        java.lang.IllegalStateException $r11;
        android.content.res.XmlResourceParser $r6;
        java.io.IOException $r1;
        java.security.cert.CertificateException $r2;
        c.f.a.a.a.e $r7;
        org.xmlpull.v1.XmlPullParserException $r0;
        com.datatheorem.android.trustkit.config.ConfigurationException $r9;
        int $i0, $i1, $i2;
        android.content.res.Resources $r5;

        $r3 := @parameter0: android.content.Context;

        $i0 := @parameter1: int;

        entermonitor class "Lc/f/a/a/b;";

     label01:
        $r4 = <c.f.a.a.b: c.f.a.a.b a>;

        if $r4 != null goto label09;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 24 goto label04;

        $i1 = staticinvoke <c.f.a.a.b: int a(android.content.Context)>($r3);

        $i2 = -1;

        if $i1 == $i2 goto label03;

        if $i1 != $i0 goto label02;

        goto label04;

     label02:
        $r9 = new com.datatheorem.android.trustkit.config.ConfigurationException;

        specialinvoke $r9.<com.datatheorem.android.trustkit.config.ConfigurationException: void <init>(java.lang.String)>("TrustKit was initialized with a different network policy than the one configured in the App\'s manifest.");

        throw $r9;

     label03:
        $r9 = new com.datatheorem.android.trustkit.config.ConfigurationException;

        specialinvoke $r9.<com.datatheorem.android.trustkit.config.ConfigurationException: void <init>(java.lang.String)>("TrustKit was initialized with a network policy that was not properly configured for Android N - make sure it is in the App\'s Manifest.");

        throw $r9;

     label04:
        $r5 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>($i0);

        $r7 = staticinvoke <c.f.a.a.a.e: c.f.a.a.a.e a(android.content.Context,org.xmlpull.v1.XmlPullParser)>($r3, $r6);

     label05:
        $r10 = new c.f.a.a.b;

        specialinvoke $r10.<c.f.a.a.b: void <init>(android.content.Context,c.f.a.a.a.e)>($r3, $r7);

        <c.f.a.a.b: c.f.a.a.b a> = $r10;

        $r4 = <c.f.a.a.b: c.f.a.a.b a>;

     label06:
        exitmonitor class "Lc/f/a/a/b;";

        return $r4;

     label07:
        $r9 = new com.datatheorem.android.trustkit.config.ConfigurationException;

        specialinvoke $r9.<com.datatheorem.android.trustkit.config.ConfigurationException: void <init>(java.lang.String)>("Could not find the debug certificate in the network security police file");

        throw $r9;

     label08:
        $r9 = new com.datatheorem.android.trustkit.config.ConfigurationException;

        specialinvoke $r9.<com.datatheorem.android.trustkit.config.ConfigurationException: void <init>(java.lang.String)>("Could not parse network security policy file");

        throw $r9;

     label09:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("TrustKit has already been initialized");

        throw $r11;

     label10:
        $r8 := @caughtexception;

        exitmonitor class "Lc/f/a/a/b;";

        throw $r8;

     label11:
        $r0 := @caughtexception;

        goto label08;

     label12:
        $r1 := @caughtexception;

        goto label08;

     label13:
        $r2 := @caughtexception;

        goto label07;

        catch java.lang.Throwable from label01 to label04 with label10;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label11;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.security.cert.CertificateException from label04 to label05 with label13;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label10 with label10;
    }

    public static c.f.a.a.b b()
    {
        c.f.a.a.b $r0;
        java.lang.IllegalStateException $r1;

        $r0 = <c.f.a.a.b: c.f.a.a.b a>;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("TrustKit has not been initialized");

        throw $r1;
    }

    public static c.f.a.a.b b(android.content.Context)
    {
        java.lang.Throwable $r4;
        android.content.Context $r0;
        c.f.a.a.b $r3;
        int $i0;
        java.lang.String $r2;
        android.content.res.Resources $r1;

        $r0 := @parameter0: android.content.Context;

        entermonitor class "Lc/f/a/a/b;";

     label1:
        $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>("network_security_config", "xml", $r2);

        $r3 = staticinvoke <c.f.a.a.b: c.f.a.a.b a(android.content.Context,int)>($r0, $i0);

     label2:
        exitmonitor class "Lc/f/a/a/b;";

        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor class "Lc/f/a/a/b;";

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public c.f.a.a.a.e a()
    {
        c.f.a.a.b r0;
        c.f.a.a.a.e r1;

        r0 := @this: c.f.a.a.b;

        r1 = r0.<c.f.a.a.b: c.f.a.a.a.e b>;

        return r1;
    }

    public javax.net.ssl.SSLSocketFactory a(java.lang.String)
    {
        c.f.a.a.b r0;
        java.lang.IllegalStateException $r7;
        javax.net.ssl.SSLContext $r2;
        javax.net.ssl.SSLSocketFactory $r5;
        java.security.GeneralSecurityException $r6;
        javax.net.ssl.TrustManager[] $r3;
        javax.net.ssl.X509TrustManager $r4;
        java.lang.String $r1;

        r0 := @this: c.f.a.a.b;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

     label2:
        $r3 = newarray (javax.net.ssl.TrustManager)[1];

     label3:
        $r4 = virtualinvoke r0.<c.f.a.a.b: javax.net.ssl.X509TrustManager b(java.lang.String)>($r1);

     label4:
        $r3[0] = $r4;

     label5:
        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, $r3, null);

        $r5 = virtualinvoke $r2.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label6:
        return $r5;

     label7:
        $r6 := @caughtexception;

        goto label9;

     label8:
        $r6 := @caughtexception;

     label9:
        virtualinvoke $r6.<java.security.GeneralSecurityException: void printStackTrace()>();

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should not happen");

        throw $r7;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label8;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label8;
        catch java.security.NoSuchAlgorithmException from label5 to label6 with label8;
        catch java.security.KeyManagementException from label1 to label2 with label7;
        catch java.security.KeyManagementException from label3 to label4 with label7;
        catch java.security.KeyManagementException from label5 to label6 with label7;
    }

    public javax.net.ssl.X509TrustManager b(java.lang.String)
    {
        c.f.a.a.b r0;
        java.lang.String $r2;
        javax.net.ssl.X509TrustManager $r1;

        r0 := @this: c.f.a.a.b;

        $r2 := @parameter0: java.lang.String;

        $r1 = staticinvoke <c.f.a.a.b.g: javax.net.ssl.X509TrustManager a(java.lang.String)>($r2);

        return $r1;
    }
}
