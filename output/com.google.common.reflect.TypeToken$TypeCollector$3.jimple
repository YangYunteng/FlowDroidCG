public class com.google.common.reflect.TypeToken$TypeCollector$3 extends com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector
{
    public final com.google.common.reflect.TypeToken$TypeCollector this$0;

    public void <init>(com.google.common.reflect.TypeToken$TypeCollector, com.google.common.reflect.TypeToken$TypeCollector)
    {
        com.google.common.reflect.TypeToken$TypeCollector$3 r0;
        com.google.common.reflect.TypeToken$TypeCollector $r1, $r2;

        r0 := @this: com.google.common.reflect.TypeToken$TypeCollector$3;

        $r1 := @parameter0: com.google.common.reflect.TypeToken$TypeCollector;

        $r2 := @parameter1: com.google.common.reflect.TypeToken$TypeCollector;

        r0.<com.google.common.reflect.TypeToken$TypeCollector$3: com.google.common.reflect.TypeToken$TypeCollector this$0> = $r1;

        specialinvoke r0.<com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector: void <init>(com.google.common.reflect.TypeToken$TypeCollector)>($r2);

        return;
    }

    public com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable)
    {
        java.util.Iterator $r3;
        java.lang.Iterable $r1;
        com.google.common.collect.ImmutableList $r6;
        com.google.common.reflect.TypeToken$TypeCollector$3 r0;
        java.lang.Object $r4;
        java.lang.Class $r5;
        com.google.common.collect.ImmutableList$Builder $r2;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken$TypeCollector$3;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke r0.<com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector: java.lang.Class getRawType(java.lang.Object)>($r4);

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r2.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r4);

        goto label1;

     label2:
        $r6 = virtualinvoke $r2.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        $r6 = specialinvoke r0.<com.google.common.reflect.TypeToken$TypeCollector: com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable)>($r6);

        return $r6;
    }

    public java.lang.Iterable getInterfaces(java.lang.Object)
    {
        com.google.common.reflect.TypeToken$TypeCollector$3 r0;
        java.lang.Object $r2;
        com.google.common.collect.ImmutableSet $r1;

        r0 := @this: com.google.common.reflect.TypeToken$TypeCollector$3;

        $r2 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r1;
    }
}
