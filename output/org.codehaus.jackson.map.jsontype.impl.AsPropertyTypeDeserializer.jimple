public class org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer extends org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer
{
    public final java.lang.String _typePropertyName;

    public void <init>(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.jsontype.TypeIdResolver, org.codehaus.jackson.map.BeanProperty, java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r2;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.String $r4;
        org.codehaus.jackson.map.BeanProperty $r3;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: org.codehaus.jackson.map.jsontype.TypeIdResolver;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r3);

        r0.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer: java.lang.String _typePropertyName> = $r4;

        return;
    }

    public java.lang.Object deserializeTypedFromAny(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        org.codehaus.jackson.JsonToken $r2, $r4;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer r0;
        java.lang.Object $r5;
        org.codehaus.jackson.map.DeserializationContext $r1;
        org.codehaus.jackson.JsonParser $r3;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer;

        $r3 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r4 != $r2 goto label1;

        $r5 = specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer: java.lang.Object deserializeTypedFromArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r3, $r1);

        return $r5;

     label1:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer: java.lang.Object deserializeTypedFromObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r3, $r1);

        return $r5;
    }

    public java.lang.Object deserializeTypedFromObject(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        org.codehaus.jackson.JsonToken $r3, $r4, $r5;
        org.codehaus.jackson.util.TokenBuffer $r6;
        org.codehaus.jackson.map.DeserializationContext $r1;
        org.codehaus.jackson.map.JsonMappingException $r13;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer r0;
        org.codehaus.jackson.map.JsonDeserializer $r9;
        java.lang.Object $r11;
        java.lang.StringBuilder $r12;
        java.lang.String $r7, $r8;
        org.codehaus.jackson.JsonParser $r2, $r10;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer;

        $r2 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = $r3;

        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r3 != $r5 goto label1;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        goto label2;

     label1:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r3 != $r5 goto label8;

     label2:
        $r6 = null;

     label3:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r4 != $r3 goto label7;

        $r7 = virtualinvoke $r2.<org.codehaus.jackson.JsonParser: java.lang.String getCurrentName()>();

        virtualinvoke $r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r8 = r0.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer: java.lang.String _typePropertyName>;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label5;

        $r7 = virtualinvoke $r2.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r9 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: org.codehaus.jackson.map.JsonDeserializer _findDeserializer(org.codehaus.jackson.map.DeserializationContext,java.lang.String)>($r1, $r7);

        if $r6 == null goto label4;

        $r10 = virtualinvoke $r6.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.JsonParser asParser(org.codehaus.jackson.JsonParser)>($r2);

        $r2 = staticinvoke <org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.util.JsonParserSequence createFlattened(org.codehaus.jackson.JsonParser,org.codehaus.jackson.JsonParser)>($r10, $r2);

     label4:
        virtualinvoke $r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r11 = virtualinvoke $r9.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r2, $r1);

        return $r11;

     label5:
        if $r6 != null goto label6;

        $r6 = new org.codehaus.jackson.util.TokenBuffer;

        specialinvoke $r6.<org.codehaus.jackson.util.TokenBuffer: void <init>(org.codehaus.jackson.ObjectCodec)>(null);

     label6:
        virtualinvoke $r6.<org.codehaus.jackson.util.TokenBuffer: void writeFieldName(java.lang.String)>($r7);

        virtualinvoke $r6.<org.codehaus.jackson.util.TokenBuffer: void copyCurrentStructure(org.codehaus.jackson.JsonParser)>($r2);

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        goto label3;

     label7:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing property \'");

        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer: java.lang.String _typePropertyName>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' that is to contain type id  (for class ");

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: java.lang.String baseTypeName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException wrongTokenException(org.codehaus.jackson.JsonParser,org.codehaus.jackson.JsonToken,java.lang.String)>($r2, $r3, $r7);

        throw $r13;

     label8:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("need JSON Object to contain As.PROPERTY type information (for class ");

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.TypeDeserializerBase: java.lang.String baseTypeName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException wrongTokenException(org.codehaus.jackson.JsonParser,org.codehaus.jackson.JsonToken,java.lang.String)>($r2, $r4, $r7);

        goto label9;

     label9:
        throw $r13;
    }

    public java.lang.String getPropertyName()
    {
        java.lang.String r1;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer;

        r1 = r0.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer: java.lang.String _typePropertyName>;

        return r1;
    }

    public org.codehaus.jackson.annotate.JsonTypeInfo$As getTypeInclusion()
    {
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer r0;
        org.codehaus.jackson.annotate.JsonTypeInfo$As r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer;

        r1 = <org.codehaus.jackson.annotate.JsonTypeInfo$As: org.codehaus.jackson.annotate.JsonTypeInfo$As PROPERTY>;

        return r1;
    }
}
