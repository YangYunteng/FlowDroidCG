public class i.g.b extends java.lang.Object implements java.lang.Iterable, i.f.b.a.a
{
    public static final i.g.b$a a;
    public final int b;
    public final int c;
    public final int d;

    static void <clinit>()
    {
        i.g.b$a $r0;

        $r0 = new i.g.b$a;

        specialinvoke $r0.<i.g.b$a: void <init>(i.f.b.g)>(null);

        <i.g.b: i.g.b$a a> = $r0;

        return;
    }

    public void <init>(int, int, int)
    {
        i.g.b r0;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: i.g.b;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 == 0 goto label2;

        if $i0 == -2147483648 goto label1;

        r0.<i.g.b: int b> = $i1;

        $i1 = staticinvoke <i.d.c: int b(int,int,int)>($i1, $i2, $i0);

        r0.<i.g.b: int c> = $i1;

        r0.<i.g.b: int d> = $i0;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Step must be greater than Int.MIN_VALUE to avoid overflow on negation.");

        throw $r1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Step must be non-zero.");

        throw $r1;
    }

    public final int a()
    {
        i.g.b r0;
        int i0;

        r0 := @this: i.g.b;

        i0 = r0.<i.g.b: int d>;

        return i0;
    }

    public boolean equals(java.lang.Object)
    {
        i.g.b r0, $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: i.g.b;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof i.g.b;

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke r0.<i.g.b: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = (i.g.b) $r1;

        $z0 = virtualinvoke $r2.<i.g.b: boolean isEmpty()>();

        if $z0 != 0 goto label2;

     label1:
        $i0 = r0.<i.g.b: int b>;

        $r2 = (i.g.b) $r1;

        $i1 = $r2.<i.g.b: int b>;

        if $i0 != $i1 goto label3;

        $i0 = r0.<i.g.b: int c>;

        $i1 = $r2.<i.g.b: int c>;

        if $i0 != $i1 goto label3;

        $i0 = r0.<i.g.b: int d>;

        $i1 = $r2.<i.g.b: int d>;

        if $i0 != $i1 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public final int getFirst()
    {
        i.g.b r0;
        int i0;

        r0 := @this: i.g.b;

        i0 = r0.<i.g.b: int b>;

        return i0;
    }

    public final int getLast()
    {
        i.g.b r0;
        int i0;

        r0 := @this: i.g.b;

        i0 = r0.<i.g.b: int c>;

        return i0;
    }

    public int hashCode()
    {
        i.g.b r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: i.g.b;

        $z0 = virtualinvoke r0.<i.g.b: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $i0 = -1;

        return $i0;

     label1:
        $i0 = r0.<i.g.b: int b>;

        $i0 = $i0 * 31;

        $i1 = r0.<i.g.b: int c>;

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = r0.<i.g.b: int d>;

        $i0 = $i0 + $i1;

        return $i0;
    }

    public boolean isEmpty()
    {
        i.g.b r0;
        int $i0, $i1;

        r0 := @this: i.g.b;

        $i0 = r0.<i.g.b: int d>;

        if $i0 <= 0 goto label1;

        $i0 = r0.<i.g.b: int b>;

        $i1 = r0.<i.g.b: int c>;

        if $i0 <= $i1 goto label2;

        return 1;

     label1:
        $i0 = r0.<i.g.b: int b>;

        $i1 = r0.<i.g.b: int c>;

        if $i0 >= $i1 goto label2;

        return 1;

     label2:
        return 0;
    }

    public i.a.u iterator()
    {
        i.g.b r0;
        int $i0, $i1, $i2;
        i.g.c $r1;

        r0 := @this: i.g.b;

        $r1 = new i.g.c;

        $i0 = r0.<i.g.b: int b>;

        $i1 = r0.<i.g.b: int c>;

        $i2 = r0.<i.g.b: int d>;

        specialinvoke $r1.<i.g.c: void <init>(int,int,int)>($i0, $i1, $i2);

        return $r1;
    }

    public volatile java.util.Iterator iterator()
    {
        i.g.b r0;
        i.a.u $r1;

        r0 := @this: i.g.b;

        $r1 = virtualinvoke r0.<i.g.b: i.a.u iterator()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        i.g.b r0;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;

        r0 := @this: i.g.b;

        $i0 = r0.<i.g.b: int d>;

        if $i0 <= 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i0 = r0.<i.g.b: int b>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $i0 = r0.<i.g.b: int c>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" step ");

        $i0 = r0.<i.g.b: int d>;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i0 = r0.<i.g.b: int b>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" downTo ");

        $i0 = r0.<i.g.b: int c>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" step ");

        $i0 = r0.<i.g.b: int d>;

        $i0 = neg $i0;

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
}
