public final class com.google.common.hash.HashCode$BytesHashCode extends com.google.common.hash.HashCode implements java.io.Serializable
{
    public static final long serialVersionUID;
    public final byte[] bytes;

    public void <init>(byte[])
    {
        byte[] $r1;
        com.google.common.hash.HashCode$BytesHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$BytesHashCode;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<com.google.common.hash.HashCode: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes> = $r1;

        return;
    }

    public byte[] asBytes()
    {
        byte[] $r2;
        java.lang.Object $r1;
        com.google.common.hash.HashCode$BytesHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$BytesHashCode;

        $r2 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (byte[]) $r1;

        return $r2;
    }

    public int asInt()
    {
        byte[] $r1;
        com.google.common.hash.HashCode$BytesHashCode r0;
        short $s2, $s3;
        byte $b1;
        int $i0, $i4;
        boolean $z0;

        r0 := @this: com.google.common.hash.HashCode$BytesHashCode;

        $r1 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i0 = lengthof $r1;

        if $i0 < 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i0 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,int)>($z0, "HashCode#asInt() requires >= 4 bytes (it only has %s bytes).", $i0);

        $r1 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $b1 = $r1[0];

        $s2 = (short) $b1;

        $s2 = $s2 & 255;

        $b1 = $r1[1];

        $s3 = (short) $b1;

        $s3 = $s3 & 255;

        $i0 = (int) $s3;

        $i0 = $i0 << 8;

        $i4 = (int) $s2;

        $i0 = $i0 | $i4;

        $b1 = $r1[2];

        $s2 = (short) $b1;

        $s2 = $s2 & 255;

        $i4 = (int) $s2;

        $i4 = $i4 << 16;

        $i0 = $i0 | $i4;

        $b1 = $r1[3];

        $s2 = (short) $b1;

        $s2 = $s2 & 255;

        $i4 = (int) $s2;

        $i4 = $i4 << 24;

        $i0 = $i4 | $i0;

        return $i0;
    }

    public long asLong()
    {
        byte[] $r1;
        int $i1;
        long $l0;
        com.google.common.hash.HashCode$BytesHashCode r0;
        boolean $z0;

        r0 := @this: com.google.common.hash.HashCode$BytesHashCode;

        $r1 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i1 = lengthof $r1;

        if $i1 < 8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i1 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,int)>($z0, "HashCode#asLong() requires >= 8 bytes (it only has %s bytes).", $i1);

        $l0 = virtualinvoke r0.<com.google.common.hash.HashCode$BytesHashCode: long padToLong()>();

        return $l0;
    }

    public int bits()
    {
        int $i0;
        byte[] $r1;
        com.google.common.hash.HashCode$BytesHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$BytesHashCode;

        $r1 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i0 = lengthof $r1;

        $i0 = $i0 * 8;

        return $i0;
    }

    public boolean equalsSameBits(com.google.common.hash.HashCode)
    {
        byte[] $r2;
        com.google.common.hash.HashCode $r1;
        com.google.common.hash.HashCode$BytesHashCode r0;
        byte $b2, $b3;
        int $i0, $i1, $i4;
        boolean $z0, $z1;

        r0 := @this: com.google.common.hash.HashCode$BytesHashCode;

        $r1 := @parameter0: com.google.common.hash.HashCode;

        $r2 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i0 = lengthof $r2;

        $r2 = virtualinvoke $r1.<com.google.common.hash.HashCode: byte[] getBytesInternal()>();

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $i0 = 0;

        $z0 = 1;

     label2:
        $r2 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label5;

        $b2 = $r2[$i0];

        $r2 = virtualinvoke $r1.<com.google.common.hash.HashCode: byte[] getBytesInternal()>();

        $b3 = $r2[$i0];

        $i1 = (int) $b2;

        $i4 = (int) $b3;

        if $i1 != $i4 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z0 = $z0 & $z1;

        $i0 = $i0 + 1;

        goto label2;

     label5:
        return $z0;
    }

    public byte[] getBytesInternal()
    {
        byte[] r1;
        com.google.common.hash.HashCode$BytesHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$BytesHashCode;

        r1 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        return r1;
    }

    public long padToLong()
    {
        byte[] $r1;
        long $l3, $l5;
        com.google.common.hash.HashCode$BytesHashCode r0;
        short $s2;
        byte $b1;
        int $i0, $i4;

        r0 := @this: com.google.common.hash.HashCode$BytesHashCode;

        $r1 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $b1 = $r1[0];

        $s2 = (short) $b1;

        $s2 = $s2 & 255;

        $l3 = (long) $s2;

        $i4 = 1;

     label1:
        $r1 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i0 = lengthof $r1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 8);

        if $i4 >= $i0 goto label2;

        $r1 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $b1 = $r1[$i4];

        $l5 = (long) $b1;

        $l5 = $l5 & 255L;

        $i0 = $i4 * 8;

        $l5 = $l5 << $i0;

        $l3 = $l3 | $l5;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return $l3;
    }

    public void writeBytesToImpl(byte[], int, int)
    {
        byte[] $r1, $r2;
        int $i0, $i1;
        com.google.common.hash.HashCode$BytesHashCode r0;

        r0 := @this: com.google.common.hash.HashCode$BytesHashCode;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i0, $i1);

        return;
    }
}
