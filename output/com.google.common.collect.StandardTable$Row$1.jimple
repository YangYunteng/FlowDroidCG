public class com.google.common.collect.StandardTable$Row$1 extends java.lang.Object implements java.util.Iterator
{
    public final com.google.common.collect.StandardTable$Row this$1;
    public final java.util.Iterator val$iterator;

    public void <init>(com.google.common.collect.StandardTable$Row, java.util.Iterator)
    {
        com.google.common.collect.StandardTable$Row $r1;
        java.util.Iterator $r2;
        com.google.common.collect.StandardTable$Row$1 r0;

        r0 := @this: com.google.common.collect.StandardTable$Row$1;

        $r1 := @parameter0: com.google.common.collect.StandardTable$Row;

        $r2 := @parameter1: java.util.Iterator;

        r0.<com.google.common.collect.StandardTable$Row$1: com.google.common.collect.StandardTable$Row this$1> = $r1;

        r0.<com.google.common.collect.StandardTable$Row$1: java.util.Iterator val$iterator> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean hasNext()
    {
        java.util.Iterator $r1;
        com.google.common.collect.StandardTable$Row$1 r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable$Row$1;

        $r1 = r0.<com.google.common.collect.StandardTable$Row$1: java.util.Iterator val$iterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public volatile java.lang.Object next()
    {
        java.util.Map$Entry $r1;
        com.google.common.collect.StandardTable$Row$1 r0;

        r0 := @this: com.google.common.collect.StandardTable$Row$1;

        $r1 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row$1: java.util.Map$Entry next()>();

        return $r1;
    }

    public java.util.Map$Entry next()
    {
        java.util.Map$Entry $r4;
        java.util.Iterator $r2;
        com.google.common.collect.StandardTable$Row$1 r0;
        com.google.common.collect.StandardTable$Row $r1;
        java.lang.Object $r3;

        r0 := @this: com.google.common.collect.StandardTable$Row$1;

        $r1 = r0.<com.google.common.collect.StandardTable$Row$1: com.google.common.collect.StandardTable$Row this$1>;

        $r2 = r0.<com.google.common.collect.StandardTable$Row$1: java.util.Iterator val$iterator>;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.Map$Entry) $r3;

        $r4 = virtualinvoke $r1.<com.google.common.collect.StandardTable$Row: java.util.Map$Entry wrapEntry(java.util.Map$Entry)>($r4);

        return $r4;
    }

    public void remove()
    {
        com.google.common.collect.StandardTable$Row $r2;
        java.util.Iterator $r1;
        com.google.common.collect.StandardTable$Row$1 r0;

        r0 := @this: com.google.common.collect.StandardTable$Row$1;

        $r1 = r0.<com.google.common.collect.StandardTable$Row$1: java.util.Iterator val$iterator>;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        $r2 = r0.<com.google.common.collect.StandardTable$Row$1: com.google.common.collect.StandardTable$Row this$1>;

        virtualinvoke $r2.<com.google.common.collect.StandardTable$Row: void maintainEmptyInvariant()>();

        return;
    }
}
