public abstract class project.android.imageprocessing.input.GLTextureOutputRenderer extends project.android.imageprocessing.GLRenderer
{
    public int[] depthRenderBuffer;
    public boolean dirty;
    public int[] frameBuffer;
    public java.lang.Object listLock;
    public java.util.List targets;
    public int[] texture_out;

    public void <init>()
    {
        java.lang.Object $r1;
        project.android.imageprocessing.input.GLTextureOutputRenderer r0;
        java.util.ArrayList $r2;

        r0 := @this: project.android.imageprocessing.input.GLTextureOutputRenderer;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: java.lang.Object listLock> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: java.util.List targets> = $r2;

        return;
    }

    private void initFBO()
    {
        project.android.imageprocessing.input.GLTextureOutputRenderer r0;
        java.lang.RuntimeException $r5;
        int[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String $r3;

        r0 := @this: project.android.imageprocessing.input.GLTextureOutputRenderer;

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] frameBuffer>;

        if $r1 == null goto label1;

        staticinvoke <android.opengl.GLES20: void glDeleteFramebuffers(int,int[],int)>(1, $r1, 0);

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] frameBuffer> = null;

     label1:
        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] texture_out>;

        if $r1 == null goto label2;

        staticinvoke <android.opengl.GLES20: void glDeleteTextures(int,int[],int)>(1, $r1, 0);

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] texture_out> = null;

     label2:
        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] depthRenderBuffer>;

        if $r1 == null goto label3;

        staticinvoke <android.opengl.GLES20: void glDeleteRenderbuffers(int,int[],int)>(1, $r1, 0);

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] depthRenderBuffer> = null;

     label3:
        $r1 = newarray (int)[1];

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] frameBuffer> = $r1;

        $r1 = newarray (int)[1];

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] texture_out> = $r1;

        $r1 = newarray (int)[1];

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] depthRenderBuffer> = $r1;

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] frameBuffer>;

        staticinvoke <android.opengl.GLES20: void glGenFramebuffers(int,int[],int)>(1, $r1, 0);

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] depthRenderBuffer>;

        staticinvoke <android.opengl.GLES20: void glGenRenderbuffers(int,int[],int)>(1, $r1, 0);

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] texture_out>;

        staticinvoke <android.opengl.GLES20: void glGenTextures(int,int[],int)>(1, $r1, 0);

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] frameBuffer>;

        $i0 = $r1[0];

        $i1 = 36160;

        staticinvoke <android.opengl.GLES20: void glBindFramebuffer(int,int)>($i1, $i0);

        $i0 = 33984;

        staticinvoke <android.opengl.GLES20: void glActiveTexture(int)>($i0);

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] texture_out>;

        $i0 = $r1[0];

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>(3553, $i0);

        $i0 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: int getWidth()>();

        $i1 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: int getHeight()>();

        staticinvoke <android.opengl.GLES20: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>(3553, 0, 6408, $i0, $i1, 0, 6408, 5121, null);

        $i0 = 33071;

        staticinvoke <android.opengl.GLES20: void glTexParameteri(int,int,int)>(3553, 10242, $i0);

        $i0 = 33071;

        staticinvoke <android.opengl.GLES20: void glTexParameteri(int,int,int)>(3553, 10243, $i0);

        staticinvoke <android.opengl.GLES20: void glTexParameteri(int,int,int)>(3553, 10240, 9729);

        staticinvoke <android.opengl.GLES20: void glTexParameteri(int,int,int)>(3553, 10241, 9729);

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] texture_out>;

        $i0 = $r1[0];

        $i1 = 36160;

        $i2 = 36064;

        staticinvoke <android.opengl.GLES20: void glFramebufferTexture2D(int,int,int,int,int)>($i1, $i2, 3553, $i0, 0);

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] depthRenderBuffer>;

        $i0 = $r1[0];

        $i1 = 36161;

        staticinvoke <android.opengl.GLES20: void glBindRenderbuffer(int,int)>($i1, $i0);

        $i0 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: int getWidth()>();

        $i1 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: int getHeight()>();

        $i2 = 36161;

        $i3 = 33189;

        staticinvoke <android.opengl.GLES20: void glRenderbufferStorage(int,int,int,int)>($i2, $i3, $i0, $i1);

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] depthRenderBuffer>;

        $i0 = $r1[0];

        $i1 = 36160;

        $i2 = 36096;

        $i3 = 36161;

        staticinvoke <android.opengl.GLES20: void glFramebufferRenderbuffer(int,int,int,int)>($i1, $i2, $i3, $i0);

        $i0 = 36160;

        $i0 = staticinvoke <android.opengl.GLES20: int glCheckFramebufferStatus(int)>($i0);

        $i1 = 36053;

        if $i0 != $i1 goto label4;

        return;

     label4:
        $r5 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        $r2 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Failed to set up render buffer with status ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and error ");

        $i0 = staticinvoke <android.opengl.GLES20: int glGetError()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r5;
    }

    public void addTarget(project.android.imageprocessing.output.GLTextureInputRenderer)
    {
        java.lang.Throwable $r4, $r5;
        java.util.List $r2;
        project.android.imageprocessing.output.GLTextureInputRenderer $r3;
        project.android.imageprocessing.input.GLTextureOutputRenderer r0;
        java.lang.Object $r1;

        r0 := @this: project.android.imageprocessing.input.GLTextureOutputRenderer;

        $r3 := @parameter0: project.android.imageprocessing.output.GLTextureInputRenderer;

        entermonitor r0;

     label1:
        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: java.lang.Object listLock>;

        entermonitor $r1;

     label2:
        $r2 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: java.util.List targets>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        exitmonitor $r1;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r4;

     label7:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public void destroy()
    {
        int[] $r1;
        project.android.imageprocessing.input.GLTextureOutputRenderer r0;

        r0 := @this: project.android.imageprocessing.input.GLTextureOutputRenderer;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void destroy()>();

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] frameBuffer>;

        if $r1 == null goto label1;

        staticinvoke <android.opengl.GLES20: void glDeleteFramebuffers(int,int[],int)>(1, $r1, 0);

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] frameBuffer> = null;

     label1:
        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] texture_out>;

        if $r1 == null goto label2;

        staticinvoke <android.opengl.GLES20: void glDeleteTextures(int,int[],int)>(1, $r1, 0);

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] texture_out> = null;

     label2:
        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] depthRenderBuffer>;

        if $r1 == null goto label3;

        staticinvoke <android.opengl.GLES20: void glDeleteRenderbuffers(int,int[],int)>(1, $r1, 0);

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] depthRenderBuffer> = null;

     label3:
        return;
    }

    public void drawFrame()
    {
        java.lang.Throwable $r7;
        java.util.Iterator $r4;
        project.android.imageprocessing.output.GLTextureInputRenderer $r6;
        project.android.imageprocessing.input.GLTextureOutputRenderer r0;
        java.util.List $r3;
        int[] $r1;
        int $i0, $i1;
        java.lang.Object $r2, $r5;
        boolean $z0, $z1;

        r0 := @this: project.android.imageprocessing.input.GLTextureOutputRenderer;

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] frameBuffer>;

        if $r1 != null goto label02;

        $i0 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: int getWidth()>();

        if $i0 == 0 goto label01;

        $i0 = virtualinvoke r0.<project.android.imageprocessing.GLRenderer: int getHeight()>();

        if $i0 == 0 goto label12;

        specialinvoke r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: void initFBO()>();

        goto label02;

     label01:
        return;

     label02:
        $z0 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: boolean dirty>;

        if $z0 == 0 goto label03;

        $z0 = 1;

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] frameBuffer>;

        $i0 = $r1[0];

        $i1 = 36160;

        staticinvoke <android.opengl.GLES20: void glBindFramebuffer(int,int)>($i1, $i0);

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void drawFrame()>();

        $i0 = 36160;

        staticinvoke <android.opengl.GLES20: void glBindFramebuffer(int,int)>($i0, 0);

        goto label04;

     label03:
        $z0 = 0;

     label04:
        $r2 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: java.lang.Object listLock>;

        entermonitor $r2;

     label05:
        $r3 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: java.util.List targets>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label08;

        exitmonitor $r2;

     label07:
        return;

     label08:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (project.android.imageprocessing.output.GLTextureInputRenderer) $r5;

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: int[] texture_out>;

        $i0 = $r1[0];

        interfaceinvoke $r6.<project.android.imageprocessing.output.GLTextureInputRenderer: void newTextureReady(int,project.android.imageprocessing.input.GLTextureOutputRenderer,boolean)>($i0, r0, $z0);

        goto label06;

     label09:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label10:
        goto label11;

     label11:
        throw $r7;

     label12:
        return;

        catch java.lang.Throwable from label05 to label07 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    public java.lang.Object getLockObject()
    {
        java.lang.Object r1;
        project.android.imageprocessing.input.GLTextureOutputRenderer r0;

        r0 := @this: project.android.imageprocessing.input.GLTextureOutputRenderer;

        r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: java.lang.Object listLock>;

        return r1;
    }

    public java.util.List getTargets()
    {
        java.util.List r1;
        project.android.imageprocessing.input.GLTextureOutputRenderer r0;

        r0 := @this: project.android.imageprocessing.input.GLTextureOutputRenderer;

        r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: java.util.List targets>;

        return r1;
    }

    public void handleSizeChange()
    {
        project.android.imageprocessing.input.GLTextureOutputRenderer r0;

        r0 := @this: project.android.imageprocessing.input.GLTextureOutputRenderer;

        specialinvoke r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: void initFBO()>();

        return;
    }

    public void markAsDirty()
    {
        project.android.imageprocessing.input.GLTextureOutputRenderer r0;

        r0 := @this: project.android.imageprocessing.input.GLTextureOutputRenderer;

        r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: boolean dirty> = 1;

        return;
    }

    public void removeTarget(project.android.imageprocessing.output.GLTextureInputRenderer)
    {
        java.lang.Throwable $r4;
        java.util.List $r2;
        project.android.imageprocessing.output.GLTextureInputRenderer $r3;
        project.android.imageprocessing.input.GLTextureOutputRenderer r0;
        java.lang.Object $r1;

        r0 := @this: project.android.imageprocessing.input.GLTextureOutputRenderer;

        $r3 := @parameter0: project.android.imageprocessing.output.GLTextureInputRenderer;

        $r1 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: java.lang.Object listLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: java.util.List targets>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r3);

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
