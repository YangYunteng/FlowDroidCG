public class org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer extends org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer
{

    public void <init>(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer r0;
        org.codehaus.jackson.map.TypeSerializer $r2;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.BeanProperty $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r1, $z0, $r2, $r3, null);

        return;
    }

    public void <init>(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer r0;
        org.codehaus.jackson.map.TypeSerializer $r2;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.JsonSerializer $r4;
        org.codehaus.jackson.map.BeanProperty $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r4 := @parameter4: org.codehaus.jackson.map.JsonSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>(class "Ljava/util/Collection;", $r1, $z0, $r2, $r3, $r4);

        return;
    }

    public org.codehaus.jackson.map.ser.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer r0, $r2;
        org.codehaus.jackson.map.TypeSerializer $r1;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        $r2 = new org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer;

        $r3 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $z0 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: boolean _staticTyping>;

        $r4 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r3, $z0, $r1, $r4);

        return $r2;
    }

    public volatile void serializeContents(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        java.util.Collection $r4;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.util.Collection) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serializeContents(java.util.Collection, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        java.util.Iterator $r6;
        java.util.Collection $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        org.codehaus.jackson.map.JsonSerializer $r5, $r10;
        java.lang.Exception $r12;
        org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer r0;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.JsonGenerator $r4;
        int $i0;
        org.codehaus.jackson.type.JavaType $r11;
        java.lang.Object $r8;
        java.lang.Class $r9;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer;

        $r1 := @parameter0: java.util.Collection;

        $r4 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r5 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        if $r5 == null goto label01;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>($r1, $r4, $r2, $r5);

        return;

     label01:
        $r6 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label02;

        return;

     label02:
        $r7 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

        $r3 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        $i0 = 0;

     label03:
        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label04:
        if $r8 != null goto label07;

     label05:
        virtualinvoke $r2.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r4);

     label06:
        goto label20;

     label07:
        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r7.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.JsonSerializer serializerFor(java.lang.Class)>($r9);

     label08:
        $r10 = $r5;

        if $r5 != null goto label16;

     label09:
        $r11 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $z0 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: boolean hasGenericTypes()>();

     label10:
        if $z0 == 0 goto label13;

     label11:
        $r11 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $r11 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType forcedNarrowBy(java.lang.Class)>($r9);

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializerProvider)>($r7, $r11, $r2);

     label12:
        goto label14;

     label13:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,java.lang.Class,org.codehaus.jackson.map.SerializerProvider)>($r7, $r9, $r2);

     label14:
        $r10 = $r5;

     label15:
        $r7 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

     label16:
        if $r3 != null goto label19;

     label17:
        virtualinvoke $r10.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r8, $r4, $r2);

     label18:
        goto label20;

     label19:
        virtualinvoke $r10.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r8, $r4, $r2, $r3);

     label20:
        $i0 = $i0 + 1;

     label21:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label22:
        if $z0 != 0 goto label03;

        return;

     label23:
        $r12 := @caughtexception;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>($r2, $r12, $r1, $i0);

        return;

        catch java.lang.Exception from label03 to label04 with label23;
        catch java.lang.Exception from label05 to label06 with label23;
        catch java.lang.Exception from label07 to label08 with label23;
        catch java.lang.Exception from label09 to label10 with label23;
        catch java.lang.Exception from label11 to label12 with label23;
        catch java.lang.Exception from label13 to label14 with label23;
        catch java.lang.Exception from label15 to label16 with label23;
        catch java.lang.Exception from label17 to label18 with label23;
        catch java.lang.Exception from label19 to label20 with label23;
        catch java.lang.Exception from label21 to label22 with label23;
    }

    public void serializeContentsUsing(java.util.Collection, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.JsonSerializer)
    {
        java.util.Iterator $r5;
        java.util.Collection $r1;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.JsonSerializer $r4;
        java.lang.Exception $r8;
        org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer r0;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.TypeSerializer $r6;
        int $i0;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$CollectionSerializer;

        $r1 := @parameter0: java.util.Collection;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.JsonSerializer;

        $r5 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r6 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        $i0 = 0;

     label01:
        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        if $r7 != null goto label05;

     label02:
        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

     label03:
        goto label09;

     label04:
        $r8 := @caughtexception;

        goto label10;

     label05:
        if $r6 != null goto label08;

     label06:
        virtualinvoke $r4.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r7, $r2, $r3);

     label07:
        goto label09;

     label08:
        virtualinvoke $r4.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r7, $r2, $r3, $r6);

     label09:
        $i0 = $i0 + 1;

        goto label11;

     label10:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>($r3, $r8, $r1, $i0);

     label11:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label01;

     label12:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label06 to label07 with label04;
        catch java.lang.Exception from label08 to label09 with label04;
    }
}
