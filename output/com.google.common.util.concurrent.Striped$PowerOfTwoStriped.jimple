public abstract class com.google.common.util.concurrent.Striped$PowerOfTwoStriped extends com.google.common.util.concurrent.Striped
{
    public final int mask;

    public void <init>(int)
    {
        int $i0;
        com.google.common.util.concurrent.Striped$PowerOfTwoStriped r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.Striped$PowerOfTwoStriped;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.util.concurrent.Striped: void <init>(com.google.common.util.concurrent.Striped$1)>(null);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Stripes must be positive");

        if $i0 <= 1073741824 goto label3;

        $i0 = -1;

        goto label4;

     label3:
        $i0 = staticinvoke <com.google.common.util.concurrent.Striped: int access$200(int)>($i0);

        $i0 = $i0 - 1;

     label4:
        r0.<com.google.common.util.concurrent.Striped$PowerOfTwoStriped: int mask> = $i0;

        return;
    }

    public final java.lang.Object get(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.util.concurrent.Striped$PowerOfTwoStriped r0;

        r0 := @this: com.google.common.util.concurrent.Striped$PowerOfTwoStriped;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.util.concurrent.Striped$PowerOfTwoStriped: int indexFor(java.lang.Object)>($r1);

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.Striped: java.lang.Object getAt(int)>($i0);

        return $r1;
    }

    public final int indexFor(java.lang.Object)
    {
        com.google.common.util.concurrent.Striped$PowerOfTwoStriped r0;
        int $i0, $i1;
        java.lang.Object $r1;

        r0 := @this: com.google.common.util.concurrent.Striped$PowerOfTwoStriped;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <com.google.common.util.concurrent.Striped: int access$300(int)>($i0);

        $i0 = r0.<com.google.common.util.concurrent.Striped$PowerOfTwoStriped: int mask>;

        $i0 = $i1 & $i0;

        return $i0;
    }
}
