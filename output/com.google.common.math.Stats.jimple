public final class com.google.common.math.Stats extends java.lang.Object implements java.io.Serializable
{
    public static final int BYTES;
    public static final long serialVersionUID;
    public final long count;
    public final double max;
    public final double mean;
    public final double min;
    public final double sumOfSquaresOfDeltas;

    public void <init>(long, double, double, double, double)
    {
        com.google.common.math.Stats r0;
        long $l0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.google.common.math.Stats;

        $l0 := @parameter0: long;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.math.Stats: long count> = $l0;

        r0.<com.google.common.math.Stats: double mean> = $d0;

        r0.<com.google.common.math.Stats: double sumOfSquaresOfDeltas> = $d1;

        r0.<com.google.common.math.Stats: double min> = $d2;

        r0.<com.google.common.math.Stats: double max> = $d3;

        return;
    }

    public static com.google.common.math.Stats fromByteArray(byte[])
    {
        byte[] $r0;
        java.nio.ByteOrder $r2;
        com.google.common.math.Stats $r3;
        int $i0;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        $r0 := @parameter0: byte[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        if $i0 != 40 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "Expected Stats.BYTES = %s remaining , got %s", 40, $i0);

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r0);

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r1 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        $r3 = staticinvoke <com.google.common.math.Stats: com.google.common.math.Stats readFrom(java.nio.ByteBuffer)>($r1);

        return $r3;
    }

    public static double meanOf(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.lang.Iterable $r0;
        double $d0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $d0 = staticinvoke <com.google.common.math.Stats: double meanOf(java.util.Iterator)>($r1);

        return $d0;
    }

    public static double meanOf(java.util.Iterator)
    {
        java.util.Iterator $r0;
        long $l0;
        java.lang.Object $r1;
        java.lang.Number $r2;
        boolean $z0;
        double $d0, $d1, $d2;

        $r0 := @parameter0: java.util.Iterator;

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Number) $r1;

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        $l0 = 1L;

     label1:
        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Number) $r1;

        $d1 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        $l0 = $l0 + 1L;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d1);

        if $z0 == 0 goto label2;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label2;

        $d1 = $d1 - $d0;

        $d2 = (double) $l0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        $d1 = $d1 / $d2;

        $d0 = $d0 + $d1;

        goto label1;

     label2:
        $d0 = staticinvoke <com.google.common.math.StatsAccumulator: double calculateNewMeanNonFinite(double,double)>($d0, $d1);

        goto label1;

     label3:
        return $d0;
    }

    public static transient double meanOf(double[])
    {
        double[] $r0;
        int $i0, $i1;
        boolean $z0;
        double $d0, $d1, $d2;

        $r0 := @parameter0: double[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $d0 = $r0[0];

     label3:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label6;

        $d1 = $r0[$i1];

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d1);

        if $z0 == 0 goto label4;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label4;

        $d1 = $d1 - $d0;

        $i0 = $i1 + 1;

        $d2 = (double) $i0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        $d1 = $d1 / $d2;

        $d0 = $d0 + $d1;

        goto label5;

     label4:
        $d0 = staticinvoke <com.google.common.math.StatsAccumulator: double calculateNewMeanNonFinite(double,double)>($d0, $d1);

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        return $d0;
    }

    public static transient double meanOf(int[])
    {
        int[] $r0;
        int $i0, $i1;
        boolean $z0;
        double $d0, $d1, $d2;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i0 = $r0[0];

        $d0 = (double) $i0;

     label3:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label6;

        $i0 = $r0[$i1];

        $d1 = (double) $i0;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d1);

        if $z0 == 0 goto label4;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label4;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d1 = $d1 - $d0;

        $i0 = $i1 + 1;

        $d2 = (double) $i0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        $d1 = $d1 / $d2;

        $d0 = $d0 + $d1;

        goto label5;

     label4:
        $d0 = staticinvoke <com.google.common.math.StatsAccumulator: double calculateNewMeanNonFinite(double,double)>($d0, $d1);

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        return $d0;
    }

    public static transient double meanOf(long[])
    {
        long $l2;
        long[] $r0;
        int $i0, $i1;
        boolean $z0;
        double $d0, $d1, $d2;

        $r0 := @parameter0: long[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $l2 = $r0[0];

        $d0 = (double) $l2;

     label3:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label6;

        $l2 = $r0[$i1];

        $d1 = (double) $l2;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d1);

        if $z0 == 0 goto label4;

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label4;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d1 = $d1 - $d0;

        $i0 = $i1 + 1;

        $d2 = (double) $i0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        $d1 = $d1 / $d2;

        $d0 = $d0 + $d1;

        goto label5;

     label4:
        $d0 = staticinvoke <com.google.common.math.StatsAccumulator: double calculateNewMeanNonFinite(double,double)>($d0, $d1);

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        return $d0;
    }

    public static com.google.common.math.Stats of(java.lang.Iterable)
    {
        com.google.common.math.StatsAccumulator $r0;
        java.lang.Iterable $r2;
        com.google.common.math.Stats $r1;

        $r2 := @parameter0: java.lang.Iterable;

        $r0 = new com.google.common.math.StatsAccumulator;

        specialinvoke $r0.<com.google.common.math.StatsAccumulator: void <init>()>();

        virtualinvoke $r0.<com.google.common.math.StatsAccumulator: void addAll(java.lang.Iterable)>($r2);

        $r1 = virtualinvoke $r0.<com.google.common.math.StatsAccumulator: com.google.common.math.Stats snapshot()>();

        return $r1;
    }

    public static com.google.common.math.Stats of(java.util.Iterator)
    {
        java.util.Iterator $r2;
        com.google.common.math.StatsAccumulator $r0;
        com.google.common.math.Stats $r1;

        $r2 := @parameter0: java.util.Iterator;

        $r0 = new com.google.common.math.StatsAccumulator;

        specialinvoke $r0.<com.google.common.math.StatsAccumulator: void <init>()>();

        virtualinvoke $r0.<com.google.common.math.StatsAccumulator: void addAll(java.util.Iterator)>($r2);

        $r1 = virtualinvoke $r0.<com.google.common.math.StatsAccumulator: com.google.common.math.Stats snapshot()>();

        return $r1;
    }

    public static transient com.google.common.math.Stats of(double[])
    {
        double[] $r2;
        com.google.common.math.StatsAccumulator $r0;
        com.google.common.math.Stats $r1;

        $r2 := @parameter0: double[];

        $r0 = new com.google.common.math.StatsAccumulator;

        specialinvoke $r0.<com.google.common.math.StatsAccumulator: void <init>()>();

        virtualinvoke $r0.<com.google.common.math.StatsAccumulator: void addAll(double[])>($r2);

        $r1 = virtualinvoke $r0.<com.google.common.math.StatsAccumulator: com.google.common.math.Stats snapshot()>();

        return $r1;
    }

    public static transient com.google.common.math.Stats of(int[])
    {
        com.google.common.math.StatsAccumulator $r0;
        int[] $r2;
        com.google.common.math.Stats $r1;

        $r2 := @parameter0: int[];

        $r0 = new com.google.common.math.StatsAccumulator;

        specialinvoke $r0.<com.google.common.math.StatsAccumulator: void <init>()>();

        virtualinvoke $r0.<com.google.common.math.StatsAccumulator: void addAll(int[])>($r2);

        $r1 = virtualinvoke $r0.<com.google.common.math.StatsAccumulator: com.google.common.math.Stats snapshot()>();

        return $r1;
    }

    public static transient com.google.common.math.Stats of(long[])
    {
        long[] $r2;
        com.google.common.math.StatsAccumulator $r0;
        com.google.common.math.Stats $r1;

        $r2 := @parameter0: long[];

        $r0 = new com.google.common.math.StatsAccumulator;

        specialinvoke $r0.<com.google.common.math.StatsAccumulator: void <init>()>();

        virtualinvoke $r0.<com.google.common.math.StatsAccumulator: void addAll(long[])>($r2);

        $r1 = virtualinvoke $r0.<com.google.common.math.StatsAccumulator: com.google.common.math.Stats snapshot()>();

        return $r1;
    }

    public static com.google.common.math.Stats readFrom(java.nio.ByteBuffer)
    {
        long $l1;
        java.nio.ByteBuffer $r0;
        com.google.common.math.Stats $r1;
        int $i0;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        $r0 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int remaining()>();

        if $i0 < 40 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int remaining()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "Expected at least Stats.BYTES = %s remaining , got %s", 40, $i0);

        $r1 = new com.google.common.math.Stats;

        $l1 = virtualinvoke $r0.<java.nio.ByteBuffer: long getLong()>();

        $d0 = virtualinvoke $r0.<java.nio.ByteBuffer: double getDouble()>();

        $d1 = virtualinvoke $r0.<java.nio.ByteBuffer: double getDouble()>();

        $d2 = virtualinvoke $r0.<java.nio.ByteBuffer: double getDouble()>();

        $d3 = virtualinvoke $r0.<java.nio.ByteBuffer: double getDouble()>();

        specialinvoke $r1.<com.google.common.math.Stats: void <init>(long,double,double,double,double)>($l1, $d0, $d1, $d2, $d3);

        return $r1;
    }

    public long count()
    {
        long l0;
        com.google.common.math.Stats r0;

        r0 := @this: com.google.common.math.Stats;

        l0 = r0.<com.google.common.math.Stats: long count>;

        return l0;
    }

    public boolean equals(java.lang.Object)
    {
        long $l0, $l1;
        byte $b2;
        com.google.common.math.Stats r0, $r3;
        java.lang.Object $r1;
        java.lang.Class $r2;
        double $d0;

        r0 := @this: com.google.common.math.Stats;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if class "Lcom/google/common/math/Stats;" == $r2 goto label2;

        return 0;

     label2:
        $r3 = (com.google.common.math.Stats) $r1;

        $l0 = r0.<com.google.common.math.Stats: long count>;

        $l1 = $r3.<com.google.common.math.Stats: long count>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $d0 = r0.<com.google.common.math.Stats: double mean>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = $r3.<com.google.common.math.Stats: double mean>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $d0 = r0.<com.google.common.math.Stats: double sumOfSquaresOfDeltas>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = $r3.<com.google.common.math.Stats: double sumOfSquaresOfDeltas>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $d0 = r0.<com.google.common.math.Stats: double min>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = $r3.<com.google.common.math.Stats: double min>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $d0 = r0.<com.google.common.math.Stats: double max>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d0 = $r3.<com.google.common.math.Stats: double max>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        java.lang.Object[] $r1;
        java.lang.Long $r2;
        java.lang.Double $r3;
        com.google.common.math.Stats r0;
        int $i1;
        long $l0;
        double $d0;

        r0 := @this: com.google.common.math.Stats;

        $r1 = newarray (java.lang.Object)[5];

        $l0 = r0.<com.google.common.math.Stats: long count>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r1[0] = $r2;

        $d0 = r0.<com.google.common.math.Stats: double mean>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[1] = $r3;

        $d0 = r0.<com.google.common.math.Stats: double sumOfSquaresOfDeltas>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[2] = $r3;

        $d0 = r0.<com.google.common.math.Stats: double min>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[3] = $r3;

        $d0 = r0.<com.google.common.math.Stats: double max>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[4] = $r3;

        $i1 = staticinvoke <com.google.common.base.Objects: int hashCode(java.lang.Object[])>($r1);

        return $i1;
    }

    public double max()
    {
        byte $b0;
        com.google.common.math.Stats r0;
        long $l1;
        boolean $z0;
        double d0;

        r0 := @this: com.google.common.math.Stats;

        $l1 = r0.<com.google.common.math.Stats: long count>;

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        d0 = r0.<com.google.common.math.Stats: double max>;

        return d0;
    }

    public double mean()
    {
        byte $b0;
        com.google.common.math.Stats r0;
        long $l1;
        boolean $z0;
        double d0;

        r0 := @this: com.google.common.math.Stats;

        $l1 = r0.<com.google.common.math.Stats: long count>;

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        d0 = r0.<com.google.common.math.Stats: double mean>;

        return d0;
    }

    public double min()
    {
        byte $b0;
        com.google.common.math.Stats r0;
        long $l1;
        boolean $z0;
        double d0;

        r0 := @this: com.google.common.math.Stats;

        $l1 = r0.<com.google.common.math.Stats: long count>;

        $b0 = $l1 cmp 0L;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        d0 = r0.<com.google.common.math.Stats: double min>;

        return d0;
    }

    public double populationStandardDeviation()
    {
        com.google.common.math.Stats r0;
        double $d0;

        r0 := @this: com.google.common.math.Stats;

        $d0 = virtualinvoke r0.<com.google.common.math.Stats: double populationVariance()>();

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        return $d0;
    }

    public double populationVariance()
    {
        byte $b1;
        com.google.common.math.Stats r0;
        int $i2;
        long $l0;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.Stats;

        $l0 = r0.<com.google.common.math.Stats: long count>;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $d0 = r0.<com.google.common.math.Stats: double sumOfSquaresOfDeltas>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label3;

        return #NaN;

     label3:
        $l0 = r0.<com.google.common.math.Stats: long count>;

        $b1 = $l0 cmp 1L;

        if $b1 != 0 goto label4;

        return 0.0;

     label4:
        $d0 = r0.<com.google.common.math.Stats: double sumOfSquaresOfDeltas>;

        $d0 = staticinvoke <com.google.common.math.DoubleUtils: double ensureNonNegative(double)>($d0);

        $l0 = virtualinvoke r0.<com.google.common.math.Stats: long count()>();

        $d1 = (double) $l0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 / $d1;

        return $d0;
    }

    public double sampleStandardDeviation()
    {
        com.google.common.math.Stats r0;
        double $d0;

        r0 := @this: com.google.common.math.Stats;

        $d0 = virtualinvoke r0.<com.google.common.math.Stats: double sampleVariance()>();

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        return $d0;
    }

    public double sampleVariance()
    {
        byte $b1;
        com.google.common.math.Stats r0;
        int $i2;
        long $l0;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.Stats;

        $l0 = r0.<com.google.common.math.Stats: long count>;

        $b1 = $l0 cmp 1L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $d0 = r0.<com.google.common.math.Stats: double sumOfSquaresOfDeltas>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label3;

        return #NaN;

     label3:
        $d0 = r0.<com.google.common.math.Stats: double sumOfSquaresOfDeltas>;

        $d0 = staticinvoke <com.google.common.math.DoubleUtils: double ensureNonNegative(double)>($d0);

        $l0 = r0.<com.google.common.math.Stats: long count>;

        $l0 = $l0 - 1L;

        $d1 = (double) $l0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 / $d1;

        return $d0;
    }

    public double sum()
    {
        com.google.common.math.Stats r0;
        long $l0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.Stats;

        $d0 = r0.<com.google.common.math.Stats: double mean>;

        $l0 = r0.<com.google.common.math.Stats: long count>;

        $d1 = (double) $l0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 * $d1;

        return $d0;
    }

    public double sumOfSquaresOfDeltas()
    {
        com.google.common.math.Stats r0;
        double d0;

        r0 := @this: com.google.common.math.Stats;

        d0 = r0.<com.google.common.math.Stats: double sumOfSquaresOfDeltas>;

        return d0;
    }

    public byte[] toByteArray()
    {
        java.nio.ByteOrder $r1;
        byte[] $r3;
        com.google.common.math.Stats r0;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.google.common.math.Stats;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(40);

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        virtualinvoke r0.<com.google.common.math.Stats: void writeTo(java.nio.ByteBuffer)>($r2);

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        return $r3;
    }

    public java.lang.String toString()
    {
        byte $b0;
        com.google.common.math.Stats r0;
        com.google.common.base.MoreObjects$ToStringHelper $r1;
        int $i2;
        long $l1;
        java.lang.String $r2;
        double $d0;

        r0 := @this: com.google.common.math.Stats;

        $l1 = virtualinvoke r0.<com.google.common.math.Stats: long count()>();

        $b0 = $l1 cmp 0L;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label1;

        $r1 = staticinvoke <com.google.common.base.MoreObjects: com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object)>(r0);

        $l1 = r0.<com.google.common.math.Stats: long count>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,long)>("count", $l1);

        $d0 = r0.<com.google.common.math.Stats: double mean>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,double)>("mean", $d0);

        $d0 = virtualinvoke r0.<com.google.common.math.Stats: double populationStandardDeviation()>();

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,double)>("populationStandardDeviation", $d0);

        $d0 = r0.<com.google.common.math.Stats: double min>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,double)>("min", $d0);

        $d0 = r0.<com.google.common.math.Stats: double max>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,double)>("max", $d0);

        $r2 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: java.lang.String toString()>();

        return $r2;

     label1:
        $r1 = staticinvoke <com.google.common.base.MoreObjects: com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object)>(r0);

        $l1 = r0.<com.google.common.math.Stats: long count>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,long)>("count", $l1);

        $r2 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: java.lang.String toString()>();

        return $r2;
    }

    public void writeTo(java.nio.ByteBuffer)
    {
        com.google.common.math.Stats r0;
        int $i0;
        long $l1;
        java.nio.ByteBuffer $r1;
        boolean $z0;
        double $d0;

        r0 := @this: com.google.common.math.Stats;

        $r1 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 < 40 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "Expected at least Stats.BYTES = %s remaining , got %s", 40, $i0);

        $l1 = r0.<com.google.common.math.Stats: long count>;

        $r1 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l1);

        $d0 = r0.<com.google.common.math.Stats: double mean>;

        $r1 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>($d0);

        $d0 = r0.<com.google.common.math.Stats: double sumOfSquaresOfDeltas>;

        $r1 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>($d0);

        $d0 = r0.<com.google.common.math.Stats: double min>;

        $r1 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>($d0);

        $d0 = r0.<com.google.common.math.Stats: double max>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>($d0);

        return;
    }

    public static void <clinit>()
    {
        <com.google.common.math.Stats: int BYTES> = 40;

        return;
    }
}
