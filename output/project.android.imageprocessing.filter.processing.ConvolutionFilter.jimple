public class project.android.imageprocessing.filter.processing.ConvolutionFilter extends project.android.imageprocessing.filter.MultiPixelRenderer
{
    public static final java.lang.String UNIFORM_FILTER;
    public float[] filter;
    public java.lang.String filterBody;
    public int filterHandle;
    public int filterSize;

    public void <init>(float[], int, int)
    {
        project.android.imageprocessing.filter.processing.ConvolutionFilter r0;
        int $i0, $i1;
        float[] $r2;
        java.lang.String $r1;

        r0 := @this: project.android.imageprocessing.filter.processing.ConvolutionFilter;

        $r2 := @parameter0: float[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        specialinvoke r0.<project.android.imageprocessing.filter.MultiPixelRenderer: void <init>()>();

        r0.<project.android.imageprocessing.filter.processing.ConvolutionFilter: float[] filter> = $r2;

        $r1 = specialinvoke r0.<project.android.imageprocessing.filter.processing.ConvolutionFilter: java.lang.String createFilterBody(int,int)>($i1, $i0);

        r0.<project.android.imageprocessing.filter.processing.ConvolutionFilter: java.lang.String filterBody> = $r1;

        $i1 = $i1 * $i0;

        r0.<project.android.imageprocessing.filter.processing.ConvolutionFilter: int filterSize> = $i1;

        return;
    }

    private java.lang.String createFilterBody(int, int)
    {
        project.android.imageprocessing.filter.processing.ConvolutionFilter r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.StringBuilder $r2, $r3;
        java.lang.String $r1;

        r0 := @this: project.android.imageprocessing.filter.processing.ConvolutionFilter;

        $i4 := @parameter0: int;

        $i5 := @parameter1: int;

        $i0 = -1;

        $i0 = $i4 + $i0;

        $i1 = $i0 / 2;

        $i2 = -1;

        $i2 = $i5 + $i2;

        $i3 = $i2 / 2;

        $r1 = "   vec3 color = ";

        $i6 = 0;

     label1:
        if $i6 < $i5 goto label2;

        $r3 = new java.lang.StringBuilder;

        $r2 = $r3;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   gl_FragColor = vec4(color, 1);\n");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label2:
        $i7 = 0;

     label3:
        if $i7 < $i4 goto label4;

        $i6 = $i6 + 1;

        goto label1;

     label4:
        $r3 = new java.lang.StringBuilder;

        $r2 = $r3;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   texture2D(u_Texture0,v_TexCoord + widthStep * ");

        $i8 = $i7 - $i1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".0 + heightStep * ");

        $i8 = $i6 - $i3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".0).rgb * ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("u_Filter");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $i8 = $i6 * $i4;

        $i8 = $i8 + $i7;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        if $i7 != $i0 goto label5;

        if $i6 != $i2 goto label5;

        $r3 = new java.lang.StringBuilder;

        $r2 = $r3;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        $r3 = new java.lang.StringBuilder;

        $r2 = $r3;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" +\n");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $i7 = $i7 + 1;

        goto label3;
    }

    private int getFilterSize()
    {
        int i0;
        project.android.imageprocessing.filter.processing.ConvolutionFilter r0;

        r0 := @this: project.android.imageprocessing.filter.processing.ConvolutionFilter;

        i0 = r0.<project.android.imageprocessing.filter.processing.ConvolutionFilter: int filterSize>;

        return i0;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.filter.processing.ConvolutionFilter r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: project.android.imageprocessing.filter.processing.ConvolutionFilter;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("precision mediump float;\nuniform sampler2D u_Texture0;\nuniform float u_TexelWidth;\nuniform float u_TexelHeight;\nuniform float u_Filter[");

        $i0 = specialinvoke r0.<project.android.imageprocessing.filter.processing.ConvolutionFilter: int getFilterSize()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("varying vec2 ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("v_TexCoord");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("void main(){\n");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   vec2 widthStep = vec2(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("u_TexelWidth");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", 0);");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   vec2 heightStep = vec2(0, ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("u_TexelHeight");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r2 = r0.<project.android.imageprocessing.filter.processing.ConvolutionFilter: java.lang.String filterBody>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}\n");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void initShaderHandles()
    {
        int $i0;
        project.android.imageprocessing.filter.processing.ConvolutionFilter r0;

        r0 := @this: project.android.imageprocessing.filter.processing.ConvolutionFilter;

        specialinvoke r0.<project.android.imageprocessing.filter.MultiPixelRenderer: void initShaderHandles()>();

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_Filter");

        r0.<project.android.imageprocessing.filter.processing.ConvolutionFilter: int filterHandle> = $i0;

        return;
    }

    public void passShaderValues()
    {
        project.android.imageprocessing.filter.processing.ConvolutionFilter r0;
        int $i0, $i1;
        float[] $r1;

        r0 := @this: project.android.imageprocessing.filter.processing.ConvolutionFilter;

        specialinvoke r0.<project.android.imageprocessing.filter.MultiPixelRenderer: void passShaderValues()>();

        $i0 = r0.<project.android.imageprocessing.filter.processing.ConvolutionFilter: int filterHandle>;

        $i1 = r0.<project.android.imageprocessing.filter.processing.ConvolutionFilter: int filterSize>;

        $r1 = r0.<project.android.imageprocessing.filter.processing.ConvolutionFilter: float[] filter>;

        staticinvoke <android.opengl.GLES20: void glUniform1fv(int,int,float[],int)>($i0, $i1, $r1, 0);

        return;
    }

    public static void <clinit>()
    {
        <project.android.imageprocessing.filter.processing.ConvolutionFilter: java.lang.String UNIFORM_FILTER> = "u_Filter";

        return;
    }
}
