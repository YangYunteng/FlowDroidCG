public class com.google.common.collect.Maps$MapDifferenceImpl extends java.lang.Object implements com.google.common.collect.MapDifference
{
    public final java.util.Map differences;
    public final java.util.Map onBoth;
    public final java.util.Map onlyOnLeft;
    public final java.util.Map onlyOnRight;

    public void <init>(java.util.Map, java.util.Map, java.util.Map, java.util.Map)
    {
        java.util.Map $r1, $r2, $r3, $r4;
        com.google.common.collect.Maps$MapDifferenceImpl r0;

        r0 := @this: com.google.common.collect.Maps$MapDifferenceImpl;

        $r4 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: java.util.Map;

        $r3 := @parameter3: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.Map access$100(java.util.Map)>($r4);

        r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onlyOnLeft> = $r4;

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.Map access$100(java.util.Map)>($r1);

        r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onlyOnRight> = $r4;

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.Map access$100(java.util.Map)>($r2);

        r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onBoth> = $r4;

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.Map access$100(java.util.Map)>($r3);

        r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map differences> = $r4;

        return;
    }

    public boolean areEqual()
    {
        com.google.common.collect.Maps$MapDifferenceImpl r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$MapDifferenceImpl;

        $r1 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onlyOnLeft>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onlyOnRight>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map differences>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Map entriesDiffering()
    {
        com.google.common.collect.Maps$MapDifferenceImpl r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.Maps$MapDifferenceImpl;

        r1 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map differences>;

        return r1;
    }

    public java.util.Map entriesInCommon()
    {
        com.google.common.collect.Maps$MapDifferenceImpl r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.Maps$MapDifferenceImpl;

        r1 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onBoth>;

        return r1;
    }

    public java.util.Map entriesOnlyOnLeft()
    {
        com.google.common.collect.Maps$MapDifferenceImpl r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.Maps$MapDifferenceImpl;

        r1 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onlyOnLeft>;

        return r1;
    }

    public java.util.Map entriesOnlyOnRight()
    {
        com.google.common.collect.Maps$MapDifferenceImpl r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.Maps$MapDifferenceImpl;

        r1 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onlyOnRight>;

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.collect.MapDifference $r2;
        java.util.Map $r3, $r4;
        java.lang.Object $r1;
        com.google.common.collect.Maps$MapDifferenceImpl r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$MapDifferenceImpl;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof com.google.common.collect.MapDifference;

        if $z0 == 0 goto label3;

        $r2 = (com.google.common.collect.MapDifference) $r1;

        $r3 = virtualinvoke r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map entriesOnlyOnLeft()>();

        $r4 = interfaceinvoke $r2.<com.google.common.collect.MapDifference: java.util.Map entriesOnlyOnLeft()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map entriesOnlyOnRight()>();

        $r4 = interfaceinvoke $r2.<com.google.common.collect.MapDifference: java.util.Map entriesOnlyOnRight()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map entriesInCommon()>();

        $r4 = interfaceinvoke $r2.<com.google.common.collect.MapDifference: java.util.Map entriesInCommon()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map entriesDiffering()>();

        $r4 = interfaceinvoke $r2.<com.google.common.collect.MapDifference: java.util.Map entriesDiffering()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        return 0;
    }

    public int hashCode()
    {
        java.lang.Object[] $r1;
        java.util.Map $r2;
        int $i0;
        com.google.common.collect.Maps$MapDifferenceImpl r0;

        r0 := @this: com.google.common.collect.Maps$MapDifferenceImpl;

        $r1 = newarray (java.lang.Object)[4];

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map entriesOnlyOnLeft()>();

        $r1[0] = $r2;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map entriesOnlyOnRight()>();

        $r1[1] = $r2;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map entriesInCommon()>();

        $r1[2] = $r2;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map entriesDiffering()>();

        $r1[3] = $r2;

        $i0 = staticinvoke <com.google.common.base.Objects: int hashCode(java.lang.Object[])>($r1);

        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.Map $r2;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;
        com.google.common.collect.Maps$MapDifferenceImpl r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$MapDifferenceImpl;

        $z0 = virtualinvoke r0.<com.google.common.collect.Maps$MapDifferenceImpl: boolean areEqual()>();

        if $z0 == 0 goto label1;

        return "equal";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("not equal");

        $r2 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onlyOnLeft>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": only on left=");

        $r2 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onlyOnLeft>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

     label2:
        $r2 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onlyOnRight>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": only on right=");

        $r2 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map onlyOnRight>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

     label3:
        $r2 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map differences>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": value differences=");

        $r2 = r0.<com.google.common.collect.Maps$MapDifferenceImpl: java.util.Map differences>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

     label4:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
