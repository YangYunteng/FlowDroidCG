public final class org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView extends org.codehaus.jackson.map.ser.BeanPropertyWriter
{
    public final java.lang.Class[] _views;

    public void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter, java.lang.Class[])
    {
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r1;
        java.lang.Class[] $r2;
        org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView r0;

        r0 := @this: org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView;

        $r1 := @parameter0: org.codehaus.jackson.map.ser.BeanPropertyWriter;

        $r2 := @parameter1: java.lang.Class[];

        specialinvoke r0.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter)>($r1);

        r0.<org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView: java.lang.Class[] _views> = $r2;

        return;
    }

    public void <init>(org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView, org.codehaus.jackson.map.JsonSerializer)
    {
        java.lang.Class[] $r3;
        org.codehaus.jackson.map.JsonSerializer $r1;
        org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView r0, $r2;

        r0 := @this: org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView;

        $r2 := @parameter0: org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView;

        $r1 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter,org.codehaus.jackson.map.JsonSerializer)>($r2, $r1);

        $r3 = $r2.<org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView: java.lang.Class[] _views>;

        r0.<org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView: java.lang.Class[] _views> = $r3;

        return;
    }

    public void serializeAsField(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.Class[] $r5;
        org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView r0;
        org.codehaus.jackson.JsonGenerator $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.Class $r4, $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: java.lang.Class getSerializationView()>();

        if $r4 == null goto label4;

        $i0 = 0;

        $r5 = r0.<org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView: java.lang.Class[] _views>;

        $i1 = lengthof $r5;

     label1:
        if $i0 >= $i1 goto label3;

        $r5 = r0.<org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView: java.lang.Class[] _views>;

        $r6 = $r5[$i0];

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        if $i0 != $i1 goto label4;

        return;

     label4:
        specialinvoke r0.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        return;
    }

    public org.codehaus.jackson.map.ser.BeanPropertyWriter withSerializer(org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.JsonSerializer $r1;
        org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView r0, $r2;

        r0 := @this: org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView;

        $r1 := @parameter0: org.codehaus.jackson.map.JsonSerializer;

        $r2 = new org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView: void <init>(org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView,org.codehaus.jackson.map.JsonSerializer)>(r0, $r1);

        return $r2;
    }
}
