public class androidx.lifecycle.ClassesInfoCache extends java.lang.Object
{
    public static final int CALL_TYPE_NO_ARG;
    public static final int CALL_TYPE_PROVIDER;
    public static final int CALL_TYPE_PROVIDER_WITH_EVENT;
    public static androidx.lifecycle.ClassesInfoCache sInstance;
    public final java.util.Map mCallbackMap;
    public final java.util.Map mHasLifecycleMethods;

    static void <clinit>()
    {
        androidx.lifecycle.ClassesInfoCache $r0;

        <androidx.lifecycle.ClassesInfoCache: int CALL_TYPE_PROVIDER_WITH_EVENT> = 2;

        <androidx.lifecycle.ClassesInfoCache: int CALL_TYPE_PROVIDER> = 1;

        <androidx.lifecycle.ClassesInfoCache: int CALL_TYPE_NO_ARG> = 0;

        $r0 = new androidx.lifecycle.ClassesInfoCache;

        specialinvoke $r0.<androidx.lifecycle.ClassesInfoCache: void <init>()>();

        <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache sInstance> = $r0;

        return;
    }

    public void <init>()
    {
        java.util.HashMap $r1;
        androidx.lifecycle.ClassesInfoCache r0;

        r0 := @this: androidx.lifecycle.ClassesInfoCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<androidx.lifecycle.ClassesInfoCache: java.util.Map mCallbackMap> = $r1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<androidx.lifecycle.ClassesInfoCache: java.util.Map mHasLifecycleMethods> = $r1;

        return;
    }

    private androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class, java.lang.reflect.Method[])
    {
        java.util.HashMap $r4;
        androidx.lifecycle.ClassesInfoCache r0;
        java.lang.reflect.Method[] $r2;
        byte $b3;
        java.util.Map $r6;
        int $i0, $i1, $i2;
        java.lang.Boolean $r19;
        java.lang.reflect.Method $r14;
        boolean $z0;
        java.util.Map$Entry $r11;
        androidx.lifecycle.ClassesInfoCache$CallbackInfo $r5;
        java.util.Iterator $r9;
        androidx.lifecycle.OnLifecycleEvent $r16;
        java.lang.Class[] $r7;
        java.util.Set $r8;
        java.lang.IllegalArgumentException $r17;
        androidx.lifecycle.ClassesInfoCache$MethodReference $r12;
        androidx.lifecycle.Lifecycle$Event $r13, $r18;
        java.lang.'annotation'.Annotation $r15;
        java.lang.Class $r1, $r3;
        java.lang.Object $r10;

        r0 := @this: androidx.lifecycle.ClassesInfoCache;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.reflect.Method[];

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        if $r3 == null goto label01;

        $r5 = virtualinvoke r0.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)>($r3);

        if $r5 == null goto label01;

        $r6 = $r5.<androidx.lifecycle.ClassesInfoCache$CallbackInfo: java.util.Map mHandlerToEvent>;

        interfaceinvoke $r4.<java.util.Map: void putAll(java.util.Map)>($r6);

     label01:
        $r7 = virtualinvoke $r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $i0 = lengthof $r7;

        $i1 = 0;

     label02:
        if $i1 >= $i0 goto label05;

        $r3 = $r7[$i1];

        $r5 = virtualinvoke r0.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)>($r3);

        $r6 = $r5.<androidx.lifecycle.ClassesInfoCache$CallbackInfo: java.util.Map mHandlerToEvent>;

        $r8 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.util.Map$Entry) $r10;

        $r10 = interfaceinvoke $r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (androidx.lifecycle.ClassesInfoCache$MethodReference) $r10;

        $r10 = interfaceinvoke $r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (androidx.lifecycle.Lifecycle$Event) $r10;

        specialinvoke r0.<androidx.lifecycle.ClassesInfoCache: void verifyAndPutHandler(java.util.Map,androidx.lifecycle.ClassesInfoCache$MethodReference,androidx.lifecycle.Lifecycle$Event,java.lang.Class)>($r4, $r12, $r13, $r1);

        goto label03;

     label04:
        $i1 = $i1 + 1;

        goto label02;

     label05:
        if $r2 == null goto label06;

        goto label07;

     label06:
        $r2 = specialinvoke r0.<androidx.lifecycle.ClassesInfoCache: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>($r1);

     label07:
        $i0 = lengthof $r2;

        $i1 = 0;

        $z0 = 0;

     label08:
        if $i1 >= $i0 goto label18;

        $r14 = $r2[$i1];

        $r15 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroidx/lifecycle/OnLifecycleEvent;");

        $r16 = (androidx.lifecycle.OnLifecycleEvent) $r15;

        if $r16 != null goto label09;

        goto label16;

     label09:
        $r7 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r7;

        if $i2 <= 0 goto label11;

        $r3 = $r7[0];

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Landroidx/lifecycle/LifecycleOwner;");

        if $z0 == 0 goto label10;

        $b3 = 1;

        goto label12;

     label10:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid parameter type. Must be one and instanceof LifecycleOwner");

        throw $r17;

     label11:
        $b3 = 0;

     label12:
        $r13 = interfaceinvoke $r16.<androidx.lifecycle.OnLifecycleEvent: androidx.lifecycle.Lifecycle$Event value()>();

        $i2 = lengthof $r7;

        if $i2 <= 1 goto label15;

        $r3 = $r7[1];

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Landroidx/lifecycle/Lifecycle$Event;");

        if $z0 == 0 goto label14;

        $r18 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY>;

        if $r13 != $r18 goto label13;

        $b3 = 2;

        goto label15;

     label13:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Second arg is supported only for ON_ANY value");

        throw $r17;

     label14:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid parameter type. second arg must be an event");

        throw $r17;

     label15:
        $i2 = lengthof $r7;

        if $i2 > 2 goto label17;

        $r12 = new androidx.lifecycle.ClassesInfoCache$MethodReference;

        specialinvoke $r12.<androidx.lifecycle.ClassesInfoCache$MethodReference: void <init>(int,java.lang.reflect.Method)>($b3, $r14);

        specialinvoke r0.<androidx.lifecycle.ClassesInfoCache: void verifyAndPutHandler(java.util.Map,androidx.lifecycle.ClassesInfoCache$MethodReference,androidx.lifecycle.Lifecycle$Event,java.lang.Class)>($r4, $r12, $r13, $r1);

        $z0 = 1;

     label16:
        $i1 = $i1 + 1;

        goto label08;

     label17:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot have more than 2 params");

        throw $r17;

     label18:
        $r5 = new androidx.lifecycle.ClassesInfoCache$CallbackInfo;

        specialinvoke $r5.<androidx.lifecycle.ClassesInfoCache$CallbackInfo: void <init>(java.util.Map)>($r4);

        $r6 = r0.<androidx.lifecycle.ClassesInfoCache: java.util.Map mCallbackMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

        $r6 = r0.<androidx.lifecycle.ClassesInfoCache: java.util.Map mHasLifecycleMethods>;

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r19);

        return $r5;
    }

    private java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)
    {
        java.lang.Class $r3;
        java.lang.IllegalArgumentException $r1;
        java.lang.NoClassDefFoundError $r4;
        androidx.lifecycle.ClassesInfoCache r0;
        java.lang.reflect.Method[] $r2;

        r0 := @this: androidx.lifecycle.ClassesInfoCache;

        $r3 := @parameter0: java.lang.Class;

     label1:
        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("The observer class has some methods that use newer APIs which are not available in the current OS version. Lifecycles cannot access even other methods so you should make sure that your observer classes only access framework classes that are available in your min API level OR use lifecycle:compiler annotation processor.", $r4);

        throw $r1;

        catch java.lang.NoClassDefFoundError from label1 to label2 with label3;
    }

    private void verifyAndPutHandler(java.util.Map, androidx.lifecycle.ClassesInfoCache$MethodReference, androidx.lifecycle.Lifecycle$Event, java.lang.Class)
    {
        java.lang.IllegalArgumentException $r9;
        androidx.lifecycle.ClassesInfoCache r0;
        androidx.lifecycle.Lifecycle$Event $r1, $r7;
        androidx.lifecycle.ClassesInfoCache$MethodReference $r5;
        java.util.Map $r4;
        java.lang.Class $r2;
        java.lang.StringBuilder $r3;
        java.lang.Object $r6;
        java.lang.String $r10;
        java.lang.reflect.Method $r8;

        r0 := @this: androidx.lifecycle.ClassesInfoCache;

        $r4 := @parameter0: java.util.Map;

        $r5 := @parameter1: androidx.lifecycle.ClassesInfoCache$MethodReference;

        $r1 := @parameter2: androidx.lifecycle.Lifecycle$Event;

        $r2 := @parameter3: java.lang.Class;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (androidx.lifecycle.Lifecycle$Event) $r6;

        if $r7 == null goto label2;

        if $r1 != $r7 goto label1;

        goto label2;

     label1:
        $r8 = $r5.<androidx.lifecycle.ClassesInfoCache$MethodReference: java.lang.reflect.Method mMethod>;

        $r9 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r10 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r10 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already declared with different @OnLifecycleEvent value: previous value ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", new value ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label2:
        if $r7 != null goto label3;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r1);

     label3:
        return;
    }

    public androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)
    {
        androidx.lifecycle.ClassesInfoCache$CallbackInfo $r4;
        java.util.Map $r2;
        java.lang.Class $r1;
        java.lang.Object $r3;
        androidx.lifecycle.ClassesInfoCache r0;

        r0 := @this: androidx.lifecycle.ClassesInfoCache;

        $r1 := @parameter0: java.lang.Class;

        $r2 = r0.<androidx.lifecycle.ClassesInfoCache: java.util.Map mCallbackMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (androidx.lifecycle.ClassesInfoCache$CallbackInfo) $r3;

        if $r4 == null goto label1;

        return $r4;

     label1:
        $r4 = specialinvoke r0.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])>($r1, null);

        return $r4;
    }

    public boolean hasLifecycleMethods(java.lang.Class)
    {
        androidx.lifecycle.OnLifecycleEvent $r8;
        androidx.lifecycle.ClassesInfoCache r0;
        java.lang.reflect.Method[] $r5;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.'annotation'.Annotation $r7;
        java.lang.Boolean $r4;
        java.lang.Class $r1;
        java.lang.Object $r3;
        java.lang.reflect.Method $r6;
        boolean $z0;

        r0 := @this: androidx.lifecycle.ClassesInfoCache;

        $r1 := @parameter0: java.lang.Class;

        $r2 = r0.<androidx.lifecycle.ClassesInfoCache: java.util.Map mHasLifecycleMethods>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.Boolean) $r3;

        if $r4 == null goto label1;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label1:
        $r5 = specialinvoke r0.<androidx.lifecycle.ClassesInfoCache: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>($r1);

        $i0 = lengthof $r5;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r6 = $r5[$i1];

        $r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroidx/lifecycle/OnLifecycleEvent;");

        $r8 = (androidx.lifecycle.OnLifecycleEvent) $r7;

        if $r8 == null goto label3;

        specialinvoke r0.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])>($r1, $r5);

        return 1;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r2 = r0.<androidx.lifecycle.ClassesInfoCache: java.util.Map mHasLifecycleMethods>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        return 0;
    }
}
