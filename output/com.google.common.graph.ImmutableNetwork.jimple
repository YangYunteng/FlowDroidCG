public final class com.google.common.graph.ImmutableNetwork extends com.google.common.graph.ConfigurableNetwork
{

    public void <init>(com.google.common.graph.Network)
    {
        com.google.common.graph.NetworkBuilder $r2;
        java.util.Map $r3, $r4;
        com.google.common.graph.ImmutableNetwork r0;
        com.google.common.graph.Network $r1;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r1 := @parameter0: com.google.common.graph.Network;

        $r2 = staticinvoke <com.google.common.graph.NetworkBuilder: com.google.common.graph.NetworkBuilder 'from'(com.google.common.graph.Network)>($r1);

        $r3 = staticinvoke <com.google.common.graph.ImmutableNetwork: java.util.Map getNodeConnections(com.google.common.graph.Network)>($r1);

        $r4 = staticinvoke <com.google.common.graph.ImmutableNetwork: java.util.Map getEdgeToReferenceNode(com.google.common.graph.Network)>($r1);

        specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: void <init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map)>($r2, $r3, $r4);

        return;
    }

    public static com.google.common.base.Function adjacentNodeFn(com.google.common.graph.Network, java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.graph.Network $r0;
        com.google.common.graph.ImmutableNetwork$3 $r2;

        $r0 := @parameter0: com.google.common.graph.Network;

        $r1 := @parameter1: java.lang.Object;

        $r2 = new com.google.common.graph.ImmutableNetwork$3;

        specialinvoke $r2.<com.google.common.graph.ImmutableNetwork$3: void <init>(com.google.common.graph.Network,java.lang.Object)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network, java.lang.Object)
    {
        com.google.common.graph.UndirectedMultiNetworkConnections $r8;
        com.google.common.base.Function $r3;
        com.google.common.graph.DirectedNetworkConnections $r7;
        java.util.Set $r2;
        com.google.common.graph.DirectedMultiNetworkConnections $r6;
        com.google.common.graph.UndirectedNetworkConnections $r9;
        java.util.Map $r4, $r5;
        int $i0;
        java.lang.Object $r1;
        com.google.common.graph.Network $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Network;

        $r1 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke $r0.<com.google.common.graph.Network: boolean isDirected()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set inEdges(java.lang.Object)>($r1);

        $r3 = staticinvoke <com.google.common.graph.ImmutableNetwork: com.google.common.base.Function sourceNodeFn(com.google.common.graph.Network)>($r0);

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.Map asMap(java.util.Set,com.google.common.base.Function)>($r2, $r3);

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set outEdges(java.lang.Object)>($r1);

        $r3 = staticinvoke <com.google.common.graph.ImmutableNetwork: com.google.common.base.Function targetNodeFn(com.google.common.graph.Network)>($r0);

        $r5 = staticinvoke <com.google.common.collect.Maps: java.util.Map asMap(java.util.Set,com.google.common.base.Function)>($r2, $r3);

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set edgesConnecting(java.lang.Object,java.lang.Object)>($r1, $r1);

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $z0 = interfaceinvoke $r0.<com.google.common.graph.Network: boolean allowsParallelEdges()>();

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <com.google.common.graph.DirectedMultiNetworkConnections: com.google.common.graph.DirectedMultiNetworkConnections ofImmutable(java.util.Map,java.util.Map,int)>($r4, $r5, $i0);

        return $r6;

     label1:
        $r7 = staticinvoke <com.google.common.graph.DirectedNetworkConnections: com.google.common.graph.DirectedNetworkConnections ofImmutable(java.util.Map,java.util.Map,int)>($r4, $r5, $i0);

        return $r7;

     label2:
        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set incidentEdges(java.lang.Object)>($r1);

        $r3 = staticinvoke <com.google.common.graph.ImmutableNetwork: com.google.common.base.Function adjacentNodeFn(com.google.common.graph.Network,java.lang.Object)>($r0, $r1);

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.Map asMap(java.util.Set,com.google.common.base.Function)>($r2, $r3);

        $z0 = interfaceinvoke $r0.<com.google.common.graph.Network: boolean allowsParallelEdges()>();

        if $z0 == 0 goto label3;

        $r8 = staticinvoke <com.google.common.graph.UndirectedMultiNetworkConnections: com.google.common.graph.UndirectedMultiNetworkConnections ofImmutable(java.util.Map)>($r4);

        return $r8;

     label3:
        $r9 = staticinvoke <com.google.common.graph.UndirectedNetworkConnections: com.google.common.graph.UndirectedNetworkConnections ofImmutable(java.util.Map)>($r4);

        return $r9;
    }

    public static com.google.common.graph.ImmutableNetwork copyOf(com.google.common.graph.ImmutableNetwork)
    {
        com.google.common.graph.ImmutableNetwork $r0;

        $r0 := @parameter0: com.google.common.graph.ImmutableNetwork;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        return $r0;
    }

    public static com.google.common.graph.ImmutableNetwork copyOf(com.google.common.graph.Network)
    {
        com.google.common.graph.ImmutableNetwork $r1;
        com.google.common.graph.Network $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Network;

        $z0 = $r0 instanceof com.google.common.graph.ImmutableNetwork;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.graph.ImmutableNetwork) $r0;

        return $r1;

     label1:
        $r1 = new com.google.common.graph.ImmutableNetwork;

        specialinvoke $r1.<com.google.common.graph.ImmutableNetwork: void <init>(com.google.common.graph.Network)>($r0);

        return $r1;
    }

    public static java.util.Map getEdgeToReferenceNode(com.google.common.graph.Network)
    {
        java.util.Iterator $r3;
        com.google.common.collect.ImmutableMap $r7;
        java.util.Set $r2;
        com.google.common.collect.ImmutableMap$Builder $r1;
        com.google.common.graph.EndpointPair $r5;
        java.lang.Object $r4, $r6;
        com.google.common.graph.Network $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Network;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set edges()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r0.<com.google.common.graph.Network: com.google.common.graph.EndpointPair incidentNodes(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<com.google.common.graph.EndpointPair: java.lang.Object nodeU()>();

        virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r4, $r6);

        goto label1;

     label2:
        $r7 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

        return $r7;
    }

    public static java.util.Map getNodeConnections(com.google.common.graph.Network)
    {
        com.google.common.graph.NetworkConnections $r5;
        java.util.Iterator $r3;
        com.google.common.collect.ImmutableMap $r6;
        java.util.Set $r2;
        com.google.common.collect.ImmutableMap$Builder $r1;
        java.lang.Object $r4;
        com.google.common.graph.Network $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Network;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set nodes()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = staticinvoke <com.google.common.graph.ImmutableNetwork: com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object)>($r0, $r4);

        virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r4, $r5);

        goto label1;

     label2:
        $r6 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

        return $r6;
    }

    public static com.google.common.base.Function sourceNodeFn(com.google.common.graph.Network)
    {
        com.google.common.graph.Network $r0;
        com.google.common.graph.ImmutableNetwork$1 $r1;

        $r0 := @parameter0: com.google.common.graph.Network;

        $r1 = new com.google.common.graph.ImmutableNetwork$1;

        specialinvoke $r1.<com.google.common.graph.ImmutableNetwork$1: void <init>(com.google.common.graph.Network)>($r0);

        return $r1;
    }

    public static com.google.common.base.Function targetNodeFn(com.google.common.graph.Network)
    {
        com.google.common.graph.Network $r0;
        com.google.common.graph.ImmutableNetwork$2 $r1;

        $r0 := @parameter0: com.google.common.graph.Network;

        $r1 = new com.google.common.graph.ImmutableNetwork$2;

        specialinvoke $r1.<com.google.common.graph.ImmutableNetwork$2: void <init>(com.google.common.graph.Network)>($r0);

        return $r1;
    }

    public volatile java.util.Set adjacentNodes(java.lang.Object)
    {
        com.google.common.graph.ImmutableNetwork r0;
        java.util.Set $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: java.util.Set adjacentNodes(java.lang.Object)>($r2);

        return $r1;
    }

    public volatile boolean allowsParallelEdges()
    {
        com.google.common.graph.ImmutableNetwork r0;
        boolean $z0;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $z0 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: boolean allowsParallelEdges()>();

        return $z0;
    }

    public volatile boolean allowsSelfLoops()
    {
        com.google.common.graph.ImmutableNetwork r0;
        boolean $z0;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $z0 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: boolean allowsSelfLoops()>();

        return $z0;
    }

    public volatile com.google.common.graph.Graph asGraph()
    {
        com.google.common.graph.ImmutableNetwork r0;
        com.google.common.graph.ImmutableGraph $r1;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r1 = virtualinvoke r0.<com.google.common.graph.ImmutableNetwork: com.google.common.graph.ImmutableGraph asGraph()>();

        return $r1;
    }

    public com.google.common.graph.ImmutableGraph asGraph()
    {
        com.google.common.graph.ImmutableNetwork r0;
        com.google.common.graph.ImmutableGraph $r1;
        com.google.common.graph.Graph $r2;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r1 = new com.google.common.graph.ImmutableGraph;

        $r2 = specialinvoke r0.<com.google.common.graph.AbstractNetwork: com.google.common.graph.Graph asGraph()>();

        specialinvoke $r1.<com.google.common.graph.ImmutableGraph: void <init>(com.google.common.graph.BaseGraph)>($r2);

        return $r1;
    }

    public volatile com.google.common.graph.ElementOrder edgeOrder()
    {
        com.google.common.graph.ImmutableNetwork r0;
        com.google.common.graph.ElementOrder $r1;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r1 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: com.google.common.graph.ElementOrder edgeOrder()>();

        return $r1;
    }

    public volatile java.util.Set edges()
    {
        com.google.common.graph.ImmutableNetwork r0;
        java.util.Set $r1;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r1 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: java.util.Set edges()>();

        return $r1;
    }

    public volatile java.util.Set edgesConnecting(java.lang.Object, java.lang.Object)
    {
        com.google.common.graph.ImmutableNetwork r0;
        java.util.Set $r2;
        java.lang.Object $r1, $r3;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: java.util.Set edgesConnecting(java.lang.Object,java.lang.Object)>($r3, $r1);

        return $r2;
    }

    public volatile java.util.Set inEdges(java.lang.Object)
    {
        com.google.common.graph.ImmutableNetwork r0;
        java.util.Set $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: java.util.Set inEdges(java.lang.Object)>($r2);

        return $r1;
    }

    public volatile java.util.Set incidentEdges(java.lang.Object)
    {
        com.google.common.graph.ImmutableNetwork r0;
        java.util.Set $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: java.util.Set incidentEdges(java.lang.Object)>($r2);

        return $r1;
    }

    public volatile com.google.common.graph.EndpointPair incidentNodes(java.lang.Object)
    {
        com.google.common.graph.ImmutableNetwork r0;
        java.lang.Object $r2;
        com.google.common.graph.EndpointPair $r1;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: com.google.common.graph.EndpointPair incidentNodes(java.lang.Object)>($r2);

        return $r1;
    }

    public volatile boolean isDirected()
    {
        com.google.common.graph.ImmutableNetwork r0;
        boolean $z0;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $z0 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: boolean isDirected()>();

        return $z0;
    }

    public volatile com.google.common.graph.ElementOrder nodeOrder()
    {
        com.google.common.graph.ImmutableNetwork r0;
        com.google.common.graph.ElementOrder $r1;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r1 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: com.google.common.graph.ElementOrder nodeOrder()>();

        return $r1;
    }

    public volatile java.util.Set nodes()
    {
        com.google.common.graph.ImmutableNetwork r0;
        java.util.Set $r1;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r1 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: java.util.Set nodes()>();

        return $r1;
    }

    public volatile java.util.Set outEdges(java.lang.Object)
    {
        com.google.common.graph.ImmutableNetwork r0;
        java.util.Set $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: java.util.Set outEdges(java.lang.Object)>($r2);

        return $r1;
    }

    public volatile java.util.Set predecessors(java.lang.Object)
    {
        com.google.common.graph.ImmutableNetwork r0;
        java.util.Set $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: java.util.Set predecessors(java.lang.Object)>($r2);

        return $r1;
    }

    public volatile java.util.Set successors(java.lang.Object)
    {
        com.google.common.graph.ImmutableNetwork r0;
        java.util.Set $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.graph.ImmutableNetwork;

        $r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<com.google.common.graph.ConfigurableNetwork: java.util.Set successors(java.lang.Object)>($r2);

        return $r1;
    }
}
