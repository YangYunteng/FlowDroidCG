public final class com.google.common.collect.Iterables$6 extends com.google.common.collect.FluentIterable
{
    public final java.lang.Iterable val$iterable;
    public final int val$numberToSkip;

    public void <init>(java.lang.Iterable, int)
    {
        int $i0;
        com.google.common.collect.Iterables$6 r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.Iterables$6;

        $r1 := @parameter0: java.lang.Iterable;

        $i0 := @parameter1: int;

        r0.<com.google.common.collect.Iterables$6: java.lang.Iterable val$iterable> = $r1;

        r0.<com.google.common.collect.Iterables$6: int val$numberToSkip> = $i0;

        specialinvoke r0.<com.google.common.collect.FluentIterable: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.Iterables$6 r0;
        java.util.Iterator $r3;
        java.lang.Iterable $r1;
        java.util.List $r2;
        int $i0, $i1;
        com.google.common.collect.Iterables$6$1 $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.Iterables$6;

        $r1 = r0.<com.google.common.collect.Iterables$6: java.lang.Iterable val$iterable>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = r0.<com.google.common.collect.Iterables$6: int val$numberToSkip>;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r2 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;

     label1:
        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i0 = r0.<com.google.common.collect.Iterables$6: int val$numberToSkip>;

        staticinvoke <com.google.common.collect.Iterators: int advance(java.util.Iterator,int)>($r3, $i0);

        $r4 = new com.google.common.collect.Iterables$6$1;

        specialinvoke $r4.<com.google.common.collect.Iterables$6$1: void <init>(com.google.common.collect.Iterables$6,java.util.Iterator)>(r0, $r3);

        return $r4;
    }

    public java.util.Spliterator spliterator()
    {
        com.google.common.collect.Iterables$6 r0;
        long $l2;
        java.lang.Iterable $r1;
        java.util.List $r2;
        java.util.stream.Stream $r4;
        int $i0, $i1;
        java.util.Spliterator $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.Iterables$6;

        $r1 = r0.<com.google.common.collect.Iterables$6: java.lang.Iterable val$iterable>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = r0.<com.google.common.collect.Iterables$6: int val$numberToSkip>;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r2 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Spliterator spliterator()>();

        return $r3;

     label1:
        $r4 = staticinvoke <com.google.common.collect.Streams: java.util.stream.Stream stream(java.lang.Iterable)>($r1);

        $i0 = r0.<com.google.common.collect.Iterables$6: int val$numberToSkip>;

        $l2 = (long) $i0;

        $r4 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream skip(long)>($l2);

        $r3 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.Spliterator spliterator()>();

        return $r3;
    }
}
