public final class org.codehaus.jackson.map.ext.JodaSerializers$LocalDateTimeSerializer extends org.codehaus.jackson.map.ext.JodaSerializers$JodaSerializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.ext.JodaSerializers$LocalDateTimeSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ext.JodaSerializers$LocalDateTimeSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ext.JodaSerializers$JodaSerializer: void <init>(java.lang.Class)>(class "Lorg/joda/time/LocalDateTime;");

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.ext.JodaSerializers$LocalDateTimeSerializer r0;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.map.SerializerProvider $r1;
        java.lang.String $r4;
        org.codehaus.jackson.map.SerializationConfig$Feature $r3;
        boolean $z0;
        org.codehaus.jackson.node.ObjectNode $r5;

        r0 := @this: org.codehaus.jackson.map.ext.JodaSerializers$LocalDateTimeSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATES_AS_TIMESTAMPS>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r3);

        if $z0 == 0 goto label1;

        $r4 = "array";

        goto label2;

     label1:
        $r4 = "string";

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>($r4, 1);

        return $r5;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ext.JodaSerializers$LocalDateTimeSerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;
        org.joda.time.LocalDateTime $r4;

        r0 := @this: org.codehaus.jackson.map.ext.JodaSerializers$LocalDateTimeSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (org.joda.time.LocalDateTime) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ext.JodaSerializers$LocalDateTimeSerializer: void serialize(org.joda.time.LocalDateTime,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serialize(org.joda.time.LocalDateTime, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ext.JodaSerializers$LocalDateTimeSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r4;
        org.joda.time.LocalDateTime $r3;
        org.codehaus.jackson.JsonGenerator $r1;
        org.joda.time.LocalDateTime$Property $r5;
        int $i0;
        org.joda.time.ReadablePartial $r7;
        java.lang.String $r6;
        org.codehaus.jackson.map.SerializationConfig$Feature $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ext.JodaSerializers$LocalDateTimeSerializer;

        $r3 := @parameter0: org.joda.time.LocalDateTime;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r4 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r2 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATES_AS_TIMESTAMPS>;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        $r5 = virtualinvoke $r3.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property year()>();

        $i0 = virtualinvoke $r5.<org.joda.time.LocalDateTime$Property: int get()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        $r5 = virtualinvoke $r3.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property monthOfYear()>();

        $i0 = virtualinvoke $r5.<org.joda.time.LocalDateTime$Property: int get()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        $r5 = virtualinvoke $r3.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfMonth()>();

        $i0 = virtualinvoke $r5.<org.joda.time.LocalDateTime$Property: int get()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        $r5 = virtualinvoke $r3.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property hourOfDay()>();

        $i0 = virtualinvoke $r5.<org.joda.time.LocalDateTime$Property: int get()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        $r5 = virtualinvoke $r3.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property minuteOfHour()>();

        $i0 = virtualinvoke $r5.<org.joda.time.LocalDateTime$Property: int get()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        $r5 = virtualinvoke $r3.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property secondOfMinute()>();

        $i0 = virtualinvoke $r5.<org.joda.time.LocalDateTime$Property: int get()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        $r5 = virtualinvoke $r3.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property millisOfSecond()>();

        $i0 = virtualinvoke $r5.<org.joda.time.LocalDateTime$Property: int get()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeEndArray()>();

        return;

     label1:
        $r7 = (org.joda.time.ReadablePartial) $r3;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.ext.JodaSerializers$JodaSerializer: java.lang.String printLocalDateTime(org.joda.time.ReadablePartial)>($r7);

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeString(java.lang.String)>($r6);

        return;
    }
}
