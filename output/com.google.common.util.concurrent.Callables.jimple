public final class com.google.common.util.concurrent.Callables extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.util.concurrent.Callables r0;

        r0 := @this: com.google.common.util.concurrent.Callables;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean access$000(java.lang.String, java.lang.Thread)
    {
        java.lang.String $r1;
        java.lang.Thread $r0;
        boolean $z0;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.Thread;

        $z0 = staticinvoke <com.google.common.util.concurrent.Callables: boolean trySetName(java.lang.String,java.lang.Thread)>($r1, $r0);

        return $z0;
    }

    public static com.google.common.util.concurrent.AsyncCallable asAsyncCallable(java.util.concurrent.Callable, com.google.common.util.concurrent.ListeningExecutorService)
    {
        java.util.concurrent.Callable $r0;
        com.google.common.util.concurrent.Callables$2 $r2;
        com.google.common.util.concurrent.ListeningExecutorService $r1;

        $r0 := @parameter0: java.util.concurrent.Callable;

        $r1 := @parameter1: com.google.common.util.concurrent.ListeningExecutorService;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.util.concurrent.Callables$2;

        specialinvoke $r2.<com.google.common.util.concurrent.Callables$2: void <init>(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable)>($r1, $r0);

        return $r2;
    }

    public static java.util.concurrent.Callable returning(java.lang.Object)
    {
        java.lang.Object $r0;
        com.google.common.util.concurrent.Callables$1 $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 = new com.google.common.util.concurrent.Callables$1;

        specialinvoke $r1.<com.google.common.util.concurrent.Callables$1: void <init>(java.lang.Object)>($r0);

        return $r1;
    }

    public static java.lang.Runnable threadRenaming(java.lang.Runnable, com.google.common.base.Supplier)
    {
        com.google.common.base.Supplier $r1;
        com.google.common.util.concurrent.Callables$4 $r2;
        java.lang.Runnable $r0;

        $r0 := @parameter0: java.lang.Runnable;

        $r1 := @parameter1: com.google.common.base.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = new com.google.common.util.concurrent.Callables$4;

        specialinvoke $r2.<com.google.common.util.concurrent.Callables$4: void <init>(com.google.common.base.Supplier,java.lang.Runnable)>($r1, $r0);

        return $r2;
    }

    public static java.util.concurrent.Callable threadRenaming(java.util.concurrent.Callable, com.google.common.base.Supplier)
    {
        com.google.common.base.Supplier $r1;
        java.util.concurrent.Callable $r0;
        com.google.common.util.concurrent.Callables$3 $r2;

        $r0 := @parameter0: java.util.concurrent.Callable;

        $r1 := @parameter1: com.google.common.base.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = new com.google.common.util.concurrent.Callables$3;

        specialinvoke $r2.<com.google.common.util.concurrent.Callables$3: void <init>(com.google.common.base.Supplier,java.util.concurrent.Callable)>($r1, $r0);

        return $r2;
    }

    public static boolean trySetName(java.lang.String, java.lang.Thread)
    {
        java.lang.SecurityException $r1;
        java.lang.String $r2;
        java.lang.Thread $r0;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.Thread;

     label1:
        virtualinvoke $r0.<java.lang.Thread: void setName(java.lang.String)>($r2);

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r1 := @caughtexception;

        goto label3;

        catch java.lang.SecurityException from label1 to label2 with label4;
    }
}
