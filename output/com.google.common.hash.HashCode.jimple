public abstract class com.google.common.hash.HashCode extends java.lang.Object
{
    public static final char[] hexDigits;

    static void <clinit>()
    {
        char[] $r0;
        java.lang.String $r1;

        $r1 = "0123456789abcdef";

        $r0 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        <com.google.common.hash.HashCode: char[] hexDigits> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.hash.HashCode r0;

        r0 := @this: com.google.common.hash.HashCode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int decode(char)
    {
        int $i1;
        char $c0;
        java.lang.StringBuilder $r1, $r2;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r3;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 < 48 goto label1;

        $i1 = (int) $c0;

        if $i1 > 57 goto label1;

        $i1 = (int) $c0;

        $i1 = $i1 - 48;

        return $i1;

     label1:
        $i1 = (int) $c0;

        if $i1 < 97 goto label2;

        $i1 = (int) $c0;

        if $i1 > 102 goto label2;

        $i1 = (int) $c0;

        $i1 = $i1 - 97;

        $i1 = $i1 + 10;

        return $i1;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        $r1 = $r2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal hexadecimal character: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r3;
    }

    public static com.google.common.hash.HashCode fromBytes(byte[])
    {
        byte[] $r0;
        com.google.common.hash.HashCode $r2;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $z0 = 1;

        if $i0 < 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "A HashCode must contain at least 1 byte.");

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r0 = (byte[]) $r1;

        $r2 = staticinvoke <com.google.common.hash.HashCode: com.google.common.hash.HashCode fromBytesNoCopy(byte[])>($r0);

        return $r2;
    }

    public static com.google.common.hash.HashCode fromBytesNoCopy(byte[])
    {
        byte[] $r0;
        com.google.common.hash.HashCode$BytesHashCode $r1;

        $r0 := @parameter0: byte[];

        $r1 = new com.google.common.hash.HashCode$BytesHashCode;

        specialinvoke $r1.<com.google.common.hash.HashCode$BytesHashCode: void <init>(byte[])>($r0);

        return $r1;
    }

    public static com.google.common.hash.HashCode fromInt(int)
    {
        int $i0;
        com.google.common.hash.HashCode$IntHashCode $r0;

        $i0 := @parameter0: int;

        $r0 = new com.google.common.hash.HashCode$IntHashCode;

        specialinvoke $r0.<com.google.common.hash.HashCode$IntHashCode: void <init>(int)>($i0);

        return $r0;
    }

    public static com.google.common.hash.HashCode fromLong(long)
    {
        com.google.common.hash.HashCode$LongHashCode $r0;
        long $l0;

        $l0 := @parameter0: long;

        $r0 = new com.google.common.hash.HashCode$LongHashCode;

        specialinvoke $r0.<com.google.common.hash.HashCode$LongHashCode: void <init>(long)>($l0);

        return $r0;
    }

    public static com.google.common.hash.HashCode fromString(java.lang.String)
    {
        byte[] $r1;
        com.google.common.hash.HashCode $r2;
        char $c2;
        byte $b5;
        int $i0, $i1, $i3, $i4;
        java.lang.String $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $z0 = 1;

        $i1 = 0;

        if $i0 < 2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z1, "input string (%s) must have at least 2 characters", $r0);

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 % 2;

        if $i0 != 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "input string (%s) must have an even number of characters", $r0);

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 / 2;

        $r1 = newarray (byte)[$i0];

     label5:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 >= $i0 goto label6;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $i0 = staticinvoke <com.google.common.hash.HashCode: int decode(char)>($c2);

        $i0 = $i0 << 4;

        $i3 = $i1 + 1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        $i4 = staticinvoke <com.google.common.hash.HashCode: int decode(char)>($c2);

        $i3 = $i1 / 2;

        $i0 = $i0 + $i4;

        $b5 = (byte) $i0;

        $r1[$i3] = $b5;

        $i1 = $i1 + 2;

        goto label5;

     label6:
        $r2 = staticinvoke <com.google.common.hash.HashCode: com.google.common.hash.HashCode fromBytesNoCopy(byte[])>($r1);

        return $r2;
    }

    public abstract byte[] asBytes();

    public abstract int asInt();

    public abstract long asLong();

    public abstract int bits();

    public final boolean equals(java.lang.Object)
    {
        com.google.common.hash.HashCode r0, $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.hash.HashCode;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.hash.HashCode;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.hash.HashCode) $r1;

        $i0 = virtualinvoke r0.<com.google.common.hash.HashCode: int bits()>();

        $i1 = virtualinvoke $r2.<com.google.common.hash.HashCode: int bits()>();

        if $i0 != $i1 goto label1;

        $z0 = virtualinvoke r0.<com.google.common.hash.HashCode: boolean equalsSameBits(com.google.common.hash.HashCode)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public abstract boolean equalsSameBits(com.google.common.hash.HashCode);

    public byte[] getBytesInternal()
    {
        byte[] $r1;
        com.google.common.hash.HashCode r0;

        r0 := @this: com.google.common.hash.HashCode;

        $r1 = virtualinvoke r0.<com.google.common.hash.HashCode: byte[] asBytes()>();

        return $r1;
    }

    public final int hashCode()
    {
        byte[] $r1;
        com.google.common.hash.HashCode r0;
        short $s4;
        byte $b2;
        int $i0, $i1, $i3, $i5;

        r0 := @this: com.google.common.hash.HashCode;

        $i1 = virtualinvoke r0.<com.google.common.hash.HashCode: int bits()>();

        if $i1 < 32 goto label1;

        $i1 = virtualinvoke r0.<com.google.common.hash.HashCode: int asInt()>();

        return $i1;

     label1:
        $r1 = virtualinvoke r0.<com.google.common.hash.HashCode: byte[] getBytesInternal()>();

        $b2 = $r1[0];

        $i1 = (int) $b2;

        $i1 = $i1 & 255;

        $i3 = 1;

     label2:
        $i0 = lengthof $r1;

        if $i3 >= $i0 goto label3;

        $b2 = $r1[$i3];

        $s4 = (short) $b2;

        $s4 = $s4 & 255;

        $i0 = $i3 * 8;

        $i5 = (int) $s4;

        $i0 = $i5 << $i0;

        $i1 = $i1 | $i0;

        $i3 = $i3 + 1;

        goto label2;

     label3:
        return $i1;
    }

    public abstract long padToLong();

    public final java.lang.String toString()
    {
        byte[] $r2;
        com.google.common.hash.HashCode r0;
        char $c4;
        byte $b2;
        int $i0, $i1, $i3;
        char[] $r3;
        java.lang.StringBuilder $r1, $r5;
        java.lang.String $r4;

        r0 := @this: com.google.common.hash.HashCode;

        $r2 = virtualinvoke r0.<com.google.common.hash.HashCode: byte[] getBytesInternal()>();

        $r5 = new java.lang.StringBuilder;

        $r1 = $r5;

        $i0 = lengthof $r2;

        $i0 = $i0 * 2;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i0);

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = $r2[$i1];

        $r3 = <com.google.common.hash.HashCode: char[] hexDigits>;

        $i3 = (int) $b2;

        $i3 = $i3 >> 4;

        $i3 = $i3 & 15;

        $c4 = $r3[$i3];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r3 = <com.google.common.hash.HashCode: char[] hexDigits>;

        $b2 = $b2 & 15;

        $i3 = (int) $b2;

        $c4 = $r3[$i3];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public int writeBytesTo(byte[], int, int)
    {
        byte[] $r1;
        int[] $r2;
        com.google.common.hash.HashCode r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.google.common.hash.HashCode;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = newarray (int)[2];

        $r2[0] = $i1;

        $i1 = virtualinvoke r0.<com.google.common.hash.HashCode: int bits()>();

        $i1 = $i1 / 8;

        $r2[1] = $i1;

        $i1 = staticinvoke <com.google.common.primitives.Ints: int min(int[])>($r2);

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i2, $i3);

        virtualinvoke r0.<com.google.common.hash.HashCode: void writeBytesToImpl(byte[],int,int)>($r1, $i0, $i1);

        return $i1;
    }

    public abstract void writeBytesToImpl(byte[], int, int);
}
