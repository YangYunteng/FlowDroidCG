public final class com.google.common.escape.ArrayBasedEscaperMap extends java.lang.Object
{
    public static final char[][] EMPTY_REPLACEMENT_ARRAY;
    public final char[][] replacementArray;

    static void <clinit>()
    {
        java.lang.Object $r1;
        char[][] $r2;
        int[] $r0;

        $r0 = newarray (int)[2];

        $r0[0] = 0;

        $r0[1] = 0;

        $r1 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "C", $r0);

        $r2 = (char[][]) $r1;

        <com.google.common.escape.ArrayBasedEscaperMap: char[][] EMPTY_REPLACEMENT_ARRAY> = $r2;

        return;
    }

    public void <init>(char[][])
    {
        com.google.common.escape.ArrayBasedEscaperMap r0;
        char[][] $r1;

        r0 := @this: com.google.common.escape.ArrayBasedEscaperMap;

        $r1 := @parameter0: char[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.escape.ArrayBasedEscaperMap: char[][] replacementArray> = $r1;

        return;
    }

    public static com.google.common.escape.ArrayBasedEscaperMap create(java.util.Map)
    {
        com.google.common.escape.ArrayBasedEscaperMap $r0;
        char[][] $r1;
        java.util.Map $r2;

        $r2 := @parameter0: java.util.Map;

        $r0 = new com.google.common.escape.ArrayBasedEscaperMap;

        $r1 = staticinvoke <com.google.common.escape.ArrayBasedEscaperMap: char[][] createReplacementArray(java.util.Map)>($r2);

        specialinvoke $r0.<com.google.common.escape.ArrayBasedEscaperMap: void <init>(char[][])>($r1);

        return $r0;
    }

    public static char[][] createReplacementArray(java.util.Map)
    {
        java.util.Iterator $r5;
        java.util.Set $r1;
        char $c0;
        char[][] $r4;
        java.lang.Character $r3;
        java.util.Map $r0;
        int $i1;
        char[] $r7;
        java.lang.Object $r2;
        java.lang.String $r6;
        boolean $z0;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = <com.google.common.escape.ArrayBasedEscaperMap: char[][] EMPTY_REPLACEMENT_ARRAY>;

        return $r4;

     label1:
        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>($r1);

        $r3 = (java.lang.Character) $r2;

        $c0 = virtualinvoke $r3.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        $i1 = $i1 + 1;

        $r4 = newarray (char[])[$i1];

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Character) $r2;

        $c0 = virtualinvoke $r3.<java.lang.Character: char charValue()>();

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r6 = (java.lang.String) $r2;

        $r7 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        $i1 = (int) $c0;

        $r4[$i1] = $r7;

        goto label2;

     label3:
        return $r4;
    }

    public char[][] getReplacementArray()
    {
        com.google.common.escape.ArrayBasedEscaperMap r0;
        char[][] r1;

        r0 := @this: com.google.common.escape.ArrayBasedEscaperMap;

        r1 = r0.<com.google.common.escape.ArrayBasedEscaperMap: char[][] replacementArray>;

        return r1;
    }
}
