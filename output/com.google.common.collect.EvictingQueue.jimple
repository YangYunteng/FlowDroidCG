public final class com.google.common.collect.EvictingQueue extends com.google.common.collect.ForwardingQueue implements java.io.Serializable
{
    public static final long serialVersionUID;
    public final java.util.Queue delegate;
    public final int maxSize;

    public void <init>(int)
    {
        com.google.common.collect.EvictingQueue r0;
        int $i0;
        java.util.ArrayDeque $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.EvictingQueue;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.collect.ForwardingQueue: void <init>()>();

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "maxSize (%s) must >= 0", $i0);

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>(int)>($i0);

        r0.<com.google.common.collect.EvictingQueue: java.util.Queue delegate> = $r1;

        r0.<com.google.common.collect.EvictingQueue: int maxSize> = $i0;

        return;
    }

    public static com.google.common.collect.EvictingQueue create(int)
    {
        int $i0;
        com.google.common.collect.EvictingQueue $r0;

        $i0 := @parameter0: int;

        $r0 = new com.google.common.collect.EvictingQueue;

        specialinvoke $r0.<com.google.common.collect.EvictingQueue: void <init>(int)>($i0);

        return $r0;
    }

    public boolean add(java.lang.Object)
    {
        com.google.common.collect.EvictingQueue r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.util.Queue $r2;

        r0 := @this: com.google.common.collect.EvictingQueue;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = r0.<com.google.common.collect.EvictingQueue: int maxSize>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $i1 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: int size()>();

        $i0 = r0.<com.google.common.collect.EvictingQueue: int maxSize>;

        if $i1 != $i0 goto label2;

        $r2 = r0.<com.google.common.collect.EvictingQueue: java.util.Queue delegate>;

        interfaceinvoke $r2.<java.util.Queue: java.lang.Object remove()>();

     label2:
        $r2 = r0.<com.google.common.collect.EvictingQueue: java.util.Queue delegate>;

        interfaceinvoke $r2.<java.util.Queue: boolean add(java.lang.Object)>($r1);

        return 1;
    }

    public boolean addAll(java.util.Collection)
    {
        com.google.common.collect.EvictingQueue r0;
        java.util.Collection $r1;
        int $i0, $i1;
        java.lang.Iterable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.EvictingQueue;

        $r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i1 = r0.<com.google.common.collect.EvictingQueue: int maxSize>;

        if $i0 < $i1 goto label1;

        virtualinvoke r0.<com.google.common.collect.ForwardingCollection: void clear()>();

        $i1 = r0.<com.google.common.collect.EvictingQueue: int maxSize>;

        $i0 = $i0 - $i1;

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable skip(java.lang.Iterable,int)>($r1, $i0);

        $z0 = staticinvoke <com.google.common.collect.Iterables: boolean addAll(java.util.Collection,java.lang.Iterable)>(r0, $r2);

        return $z0;

     label1:
        $z0 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: boolean standardAddAll(java.util.Collection)>($r1);

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.EvictingQueue r0;
        java.lang.Object $r1;
        java.util.Queue $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.EvictingQueue;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.EvictingQueue: java.util.Queue delegate()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.Queue: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public volatile java.lang.Object delegate()
    {
        java.util.Queue $r1;
        com.google.common.collect.EvictingQueue r0;

        r0 := @this: com.google.common.collect.EvictingQueue;

        $r1 = virtualinvoke r0.<com.google.common.collect.EvictingQueue: java.util.Queue delegate()>();

        return $r1;
    }

    public volatile java.util.Collection delegate()
    {
        java.util.Queue $r1;
        com.google.common.collect.EvictingQueue r0;

        r0 := @this: com.google.common.collect.EvictingQueue;

        $r1 = virtualinvoke r0.<com.google.common.collect.EvictingQueue: java.util.Queue delegate()>();

        return $r1;
    }

    public java.util.Queue delegate()
    {
        java.util.Queue r1;
        com.google.common.collect.EvictingQueue r0;

        r0 := @this: com.google.common.collect.EvictingQueue;

        r1 = r0.<com.google.common.collect.EvictingQueue: java.util.Queue delegate>;

        return r1;
    }

    public boolean offer(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.EvictingQueue r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.EvictingQueue;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.EvictingQueue: boolean add(java.lang.Object)>($r1);

        return $z0;
    }

    public int remainingCapacity()
    {
        int $i0, $i1;
        com.google.common.collect.EvictingQueue r0;

        r0 := @this: com.google.common.collect.EvictingQueue;

        $i1 = r0.<com.google.common.collect.EvictingQueue: int maxSize>;

        $i0 = virtualinvoke r0.<com.google.common.collect.ForwardingCollection: int size()>();

        $i0 = $i1 - $i0;

        return $i0;
    }

    public boolean remove(java.lang.Object)
    {
        com.google.common.collect.EvictingQueue r0;
        java.lang.Object $r1;
        java.util.Queue $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.EvictingQueue;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.EvictingQueue: java.util.Queue delegate()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.Queue: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }
}
