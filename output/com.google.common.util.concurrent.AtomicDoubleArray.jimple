public class com.google.common.util.concurrent.AtomicDoubleArray extends java.lang.Object implements java.io.Serializable
{
    public static final long serialVersionUID;
    public transient java.util.concurrent.atomic.AtomicLongArray longs;

    public void <init>(int)
    {
        int $i0;
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        java.util.concurrent.atomic.AtomicLongArray $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLongArray;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: void <init>(int)>($i0);

        r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs> = $r1;

        return;
    }

    public void <init>(double[])
    {
        double[] $r2;
        long $l1;
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        long[] $r1;
        int $i0, $i2;
        double $d0;
        java.util.concurrent.atomic.AtomicLongArray $r3;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $r2 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r2;

        $r1 = newarray (long)[$i0];

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $d0 = $r2[$i2];

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $r1[$i2] = $l1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r3 = new java.util.concurrent.atomic.AtomicLongArray;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLongArray: void <init>(long[])>($r1);

        r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs> = $r3;

        return;
    }

    private void readObject(java.io.ObjectInputStream)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        java.io.ObjectInputStream $r1;
        int $i0, $i1;
        java.util.concurrent.atomic.AtomicLongArray $r2;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        $r2 = new java.util.concurrent.atomic.AtomicLongArray;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLongArray: void <init>(int)>($i0);

        r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs> = $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $d0 = virtualinvoke $r1.<java.io.ObjectInputStream: double readDouble()>();

        virtualinvoke r0.<com.google.common.util.concurrent.AtomicDoubleArray: void set(int,double)>($i1, $d0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int $i0, $i1;
        java.io.ObjectOutputStream $r1;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $i0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDoubleArray: int length()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $d0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDoubleArray: double get(int)>($i1);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeDouble(double)>($d0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public double addAndGet(int, double)
    {
        long $l1, $l2;
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int $i0;
        double $d0, $d1;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

     label1:
        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>($i0);

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        $d1 = $d1 + $d0;

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d1);

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSet(int,long,long)>($i0, $l1, $l2);

        if $z0 == 0 goto label1;

        return $d1;
    }

    public final boolean compareAndSet(int, double, double)
    {
        long $l1, $l2;
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int $i0;
        double $d0, $d1;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d1);

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSet(int,long,long)>($i0, $l1, $l2);

        return $z0;
    }

    public final double get(int)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int $i0;
        long $l1;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>($i0);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d0;
    }

    public final double getAndAdd(int, double)
    {
        long $l1, $l2;
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int $i0;
        double $d0, $d1, $d2;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

     label1:
        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>($i0);

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        $d2 = $d1 + $d0;

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d2);

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSet(int,long,long)>($i0, $l1, $l2);

        if $z0 == 0 goto label1;

        return $d1;
    }

    public final double getAndSet(int, double)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int $i0;
        long $l1;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: long getAndSet(int,long)>($i0, $l1);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d0;
    }

    public final void lazySet(int, double)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int $i0;
        long $l1;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: void lazySet(int,long)>($i0, $l1);

        return;
    }

    public final int length()
    {
        int $i0;
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        java.util.concurrent.atomic.AtomicLongArray $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        return $i0;
    }

    public final void set(int, double)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int $i0;
        long $l1;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: void set(int,long)>($i0, $l1);

        return;
    }

    public java.lang.String toString()
    {
        long $l2;
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r4;
        java.lang.String $r3;
        java.util.concurrent.atomic.AtomicLongArray $r2;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $i0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDoubleArray: int length()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $i1 = -1;

        if $i0 != $i1 goto label1;

        return "[]";

     label1:
        $r4 = new java.lang.StringBuilder;

        $r1 = $r4;

        $i1 = $i0 + 1;

        $i1 = $i1 * 19;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $i1 = 0;

     label2:
        $r2 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>($i1);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        if $i1 != $i0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i1 = $i1 + 1;

        goto label2;
    }

    public final boolean weakCompareAndSet(int, double, double)
    {
        long $l1, $l2;
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int $i0;
        double $d0, $d1;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d1);

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: boolean weakCompareAndSet(int,long,long)>($i0, $l1, $l2);

        return $z0;
    }
}
