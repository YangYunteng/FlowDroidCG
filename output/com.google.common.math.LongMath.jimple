public final class com.google.common.math.LongMath extends java.lang.Object
{
    public static final long FLOOR_SQRT_MAX_LONG;
    public static final long MAX_POWER_OF_SQRT2_UNSIGNED;
    public static final long MAX_SIGNED_POWER_OF_TWO;
    public static final int SIEVE_30;
    public static final int[] biggestBinomials;
    public static final int[] biggestSimpleBinomials;
    public static final long[] factorials;
    public static final long[] halfPowersOf10;
    public static final byte[] maxLog10ForLeadingZeros;
    public static final long[][] millerRabinBaseSets;
    public static final long[] powersOf10;

    static void <clinit>()
    {
        long[][] $r3;
        byte[] $r0;
        long[] $r1;
        int[] $r2;

        <com.google.common.math.LongMath: int SIEVE_30> = -545925251;

        <com.google.common.math.LongMath: long MAX_SIGNED_POWER_OF_TWO> = 4611686018427387904L;

        <com.google.common.math.LongMath: long MAX_POWER_OF_SQRT2_UNSIGNED> = -5402926248376769404L;

        <com.google.common.math.LongMath: long FLOOR_SQRT_MAX_LONG> = 3037000499L;

        $r0 = newarray (byte)[64];

        $r0[0] = 19;

        $r0[1] = 18;

        $r0[2] = 18;

        $r0[3] = 18;

        $r0[4] = 18;

        $r0[5] = 17;

        $r0[6] = 17;

        $r0[7] = 17;

        $r0[8] = 16;

        $r0[9] = 16;

        $r0[10] = 16;

        $r0[11] = 15;

        $r0[12] = 15;

        $r0[13] = 15;

        $r0[14] = 15;

        $r0[15] = 14;

        $r0[16] = 14;

        $r0[17] = 14;

        $r0[18] = 13;

        $r0[19] = 13;

        $r0[20] = 13;

        $r0[21] = 12;

        $r0[22] = 12;

        $r0[23] = 12;

        $r0[24] = 12;

        $r0[25] = 11;

        $r0[26] = 11;

        $r0[27] = 11;

        $r0[28] = 10;

        $r0[29] = 10;

        $r0[30] = 10;

        $r0[31] = 9;

        $r0[32] = 9;

        $r0[33] = 9;

        $r0[34] = 9;

        $r0[35] = 8;

        $r0[36] = 8;

        $r0[37] = 8;

        $r0[38] = 7;

        $r0[39] = 7;

        $r0[40] = 7;

        $r0[41] = 6;

        $r0[42] = 6;

        $r0[43] = 6;

        $r0[44] = 6;

        $r0[45] = 5;

        $r0[46] = 5;

        $r0[47] = 5;

        $r0[48] = 4;

        $r0[49] = 4;

        $r0[50] = 4;

        $r0[51] = 3;

        $r0[52] = 3;

        $r0[53] = 3;

        $r0[54] = 3;

        $r0[55] = 2;

        $r0[56] = 2;

        $r0[57] = 2;

        $r0[58] = 1;

        $r0[59] = 1;

        $r0[60] = 1;

        $r0[61] = 0;

        $r0[62] = 0;

        $r0[63] = 0;

        <com.google.common.math.LongMath: byte[] maxLog10ForLeadingZeros> = $r0;

        $r1 = newarray (long)[19];

        $r1[0] = 1L;

        $r1[1] = 10L;

        $r1[2] = 100L;

        $r1[3] = 1000L;

        $r1[4] = 10000L;

        $r1[5] = 100000L;

        $r1[6] = 1000000L;

        $r1[7] = 10000000L;

        $r1[8] = 100000000L;

        $r1[9] = 1000000000L;

        $r1[10] = 10000000000L;

        $r1[11] = 100000000000L;

        $r1[12] = 1000000000000L;

        $r1[13] = 10000000000000L;

        $r1[14] = 100000000000000L;

        $r1[15] = 1000000000000000L;

        $r1[16] = 10000000000000000L;

        $r1[17] = 100000000000000000L;

        $r1[18] = 1000000000000000000L;

        <com.google.common.math.LongMath: long[] powersOf10> = $r1;

        $r1 = newarray (long)[19];

        $r1[0] = 3L;

        $r1[1] = 31L;

        $r1[2] = 316L;

        $r1[3] = 3162L;

        $r1[4] = 31622L;

        $r1[5] = 316227L;

        $r1[6] = 3162277L;

        $r1[7] = 31622776L;

        $r1[8] = 316227766L;

        $r1[9] = 3162277660L;

        $r1[10] = 31622776601L;

        $r1[11] = 316227766016L;

        $r1[12] = 3162277660168L;

        $r1[13] = 31622776601683L;

        $r1[14] = 316227766016837L;

        $r1[15] = 3162277660168379L;

        $r1[16] = 31622776601683793L;

        $r1[17] = 316227766016837933L;

        $r1[18] = 3162277660168379331L;

        <com.google.common.math.LongMath: long[] halfPowersOf10> = $r1;

        $r1 = newarray (long)[21];

        $r1[0] = 1L;

        $r1[1] = 1L;

        $r1[2] = 2L;

        $r1[3] = 6L;

        $r1[4] = 24L;

        $r1[5] = 120L;

        $r1[6] = 720L;

        $r1[7] = 5040L;

        $r1[8] = 40320L;

        $r1[9] = 362880L;

        $r1[10] = 3628800L;

        $r1[11] = 39916800L;

        $r1[12] = 479001600L;

        $r1[13] = 6227020800L;

        $r1[14] = 87178291200L;

        $r1[15] = 1307674368000L;

        $r1[16] = 20922789888000L;

        $r1[17] = 355687428096000L;

        $r1[18] = 6402373705728000L;

        $r1[19] = 121645100408832000L;

        $r1[20] = 2432902008176640000L;

        <com.google.common.math.LongMath: long[] factorials> = $r1;

        $r2 = newarray (int)[34];

        $r2[0] = 2147483647;

        $r2[1] = 2147483647;

        $r2[2] = 2147483647;

        $r2[3] = 3810779;

        $r2[4] = 121977;

        $r2[5] = 16175;

        $r2[6] = 4337;

        $r2[7] = 1733;

        $r2[8] = 887;

        $r2[9] = 534;

        $r2[10] = 361;

        $r2[11] = 265;

        $r2[12] = 206;

        $r2[13] = 169;

        $r2[14] = 143;

        $r2[15] = 125;

        $r2[16] = 111;

        $r2[17] = 101;

        $r2[18] = 94;

        $r2[19] = 88;

        $r2[20] = 83;

        $r2[21] = 79;

        $r2[22] = 76;

        $r2[23] = 74;

        $r2[24] = 72;

        $r2[25] = 70;

        $r2[26] = 69;

        $r2[27] = 68;

        $r2[28] = 67;

        $r2[29] = 67;

        $r2[30] = 66;

        $r2[31] = 66;

        $r2[32] = 66;

        $r2[33] = 66;

        <com.google.common.math.LongMath: int[] biggestBinomials> = $r2;

        $r2 = newarray (int)[31];

        $r2[0] = 2147483647;

        $r2[1] = 2147483647;

        $r2[2] = 2147483647;

        $r2[3] = 2642246;

        $r2[4] = 86251;

        $r2[5] = 11724;

        $r2[6] = 3218;

        $r2[7] = 1313;

        $r2[8] = 684;

        $r2[9] = 419;

        $r2[10] = 287;

        $r2[11] = 214;

        $r2[12] = 169;

        $r2[13] = 139;

        $r2[14] = 119;

        $r2[15] = 105;

        $r2[16] = 95;

        $r2[17] = 87;

        $r2[18] = 81;

        $r2[19] = 76;

        $r2[20] = 73;

        $r2[21] = 70;

        $r2[22] = 68;

        $r2[23] = 66;

        $r2[24] = 64;

        $r2[25] = 63;

        $r2[26] = 62;

        $r2[27] = 62;

        $r2[28] = 61;

        $r2[29] = 61;

        $r2[30] = 61;

        <com.google.common.math.LongMath: int[] biggestSimpleBinomials> = $r2;

        $r3 = newarray (long[])[7];

        $r1 = newarray (long)[2];

        $r1[0] = 291830L;

        $r1[1] = 126401071349994536L;

        $r3[0] = $r1;

        $r1 = newarray (long)[3];

        $r1[0] = 885594168L;

        $r1[1] = 725270293939359937L;

        $r1[2] = 3569819667048198375L;

        $r3[1] = $r1;

        $r1 = newarray (long)[4];

        $r1[0] = 273919523040L;

        $r1[1] = 15L;

        $r1[2] = 7363882082L;

        $r1[3] = 992620450144556L;

        $r3[2] = $r1;

        $r1 = newarray (long)[5];

        $r1[0] = 47636622961200L;

        $r1[1] = 2L;

        $r1[2] = 2570940L;

        $r1[3] = 211991001L;

        $r1[4] = 3749873356L;

        $r3[3] = $r1;

        $r1 = newarray (long)[6];

        $r1[0] = 7999252175582850L;

        $r1[1] = 2L;

        $r1[2] = 4130806001517L;

        $r1[3] = 149795463772692060L;

        $r1[4] = 186635894390467037L;

        $r1[5] = 3967304179347715805L;

        $r3[4] = $r1;

        $r1 = newarray (long)[7];

        $r1[0] = 585226005592931976L;

        $r1[1] = 2L;

        $r1[2] = 123635709730000L;

        $r1[3] = 9233062284813009L;

        $r1[4] = 43835965440333360L;

        $r1[5] = 761179012939631437L;

        $r1[6] = 1263739024124850375L;

        $r3[5] = $r1;

        $r1 = newarray (long)[8];

        $r1[0] = 9223372036854775807L;

        $r1[1] = 2L;

        $r1[2] = 325L;

        $r1[3] = 9375L;

        $r1[4] = 28178L;

        $r1[5] = 450775L;

        $r1[6] = 9780504L;

        $r1[7] = 1795265022L;

        $r3[6] = $r1;

        <com.google.common.math.LongMath: long[][] millerRabinBaseSets> = $r3;

        return;
    }

    public void <init>()
    {
        com.google.common.math.LongMath r0;

        r0 := @this: com.google.common.math.LongMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long binomial(int, int)
    {
        long $l3, $l4, $l5, $l8;
        long[] $r0;
        int[] $r1;
        int $i0, $i1, $i2, $i6, $i7, $i9;
        boolean $z0;
        java.math.RoundingMode $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", $i0);

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("k", $i1);

        if $i1 > $i0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "k (%s) > n (%s)", $i1, $i0);

        $i2 = $i0 >> 1;

        if $i1 <= $i2 goto label03;

        $i1 = $i0 - $i1;

     label03:
        if $i1 == 0 goto label15;

        if $i1 == 1 goto label14;

        $r0 = <com.google.common.math.LongMath: long[] factorials>;

        $i2 = lengthof $r0;

        if $i0 >= $i2 goto label04;

        $l3 = $r0[$i0];

        $l4 = $r0[$i1];

        $i0 = $i0 - $i1;

        $l5 = $r0[$i0];

        $l4 = $l4 * $l5;

        $l3 = $l3 / $l4;

        return $l3;

     label04:
        $r1 = <com.google.common.math.LongMath: int[] biggestBinomials>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label13;

        $i2 = $r1[$i1];

        if $i0 <= $i2 goto label05;

        goto label13;

     label05:
        $r1 = <com.google.common.math.LongMath: int[] biggestSimpleBinomials>;

        $i6 = lengthof $r1;

        $i2 = 2;

        if $i1 >= $i6 goto label08;

        $i6 = $r1[$i1];

        if $i0 > $i6 goto label08;

        $i6 = -1;

        $i6 = $i0 + $i6;

        $l3 = (long) $i0;

     label06:
        if $i2 > $i1 goto label07;

        $l4 = (long) $i6;

        $l3 = $l3 * $l4;

        $l4 = (long) $i2;

        $l3 = $l3 / $l4;

        $i0 = -1;

        $i6 = $i6 + $i0;

        $i2 = $i2 + 1;

        goto label06;

     label07:
        return $l3;

     label08:
        $l4 = (long) $i0;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i6 = staticinvoke <com.google.common.math.LongMath: int log2(long,java.math.RoundingMode)>($l4, $r2);

        $i7 = -1;

        $l3 = 1L;

        $i0 = $i0 + $i7;

        $i7 = $i6;

        $l5 = 1L;

     label09:
        if $i2 > $i1 goto label12;

        $i7 = $i7 + $i6;

        if $i7 >= 63 goto label10;

        $l8 = (long) $i0;

        $l4 = $l4 * $l8;

        $l8 = (long) $i2;

        $l3 = $l3 * $l8;

        goto label11;

     label10:
        $l5 = staticinvoke <com.google.common.math.LongMath: long multiplyFraction(long,long,long)>($l5, $l4, $l3);

        $i7 = $i6;

        $l3 = (long) $i2;

        $l4 = (long) $i0;

     label11:
        $i2 = $i2 + 1;

        $i9 = -1;

        $i0 = $i0 + $i9;

        goto label09;

     label12:
        $l3 = staticinvoke <com.google.common.math.LongMath: long multiplyFraction(long,long,long)>($l5, $l4, $l3);

        return $l3;

     label13:
        return 9223372036854775807L;

     label14:
        $l3 = (long) $i0;

        return $l3;

     label15:
        return 1L;
    }

    public static long ceilingPowerOfTwo(long)
    {
        byte $b1;
        int $i2;
        java.lang.StringBuilder $r0, $r2;
        long $l0;
        java.lang.ArithmeticException $r3;
        java.lang.String $r1;

        $l0 := @parameter0: long;

        staticinvoke <com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", $l0);

        $b1 = $l0 cmp 4611686018427387904L;

        $i2 = (int) $b1;

        if $i2 > 0 goto label1;

        $l0 = $l0 - 1L;

        $i2 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        $i2 = neg $i2;

        $l0 = 1L << $i2;

        return $l0;

     label1:
        $r3 = new java.lang.ArithmeticException;

        $r2 = new java.lang.StringBuilder;

        $r0 = $r2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ceilingPowerOfTwo(");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not representable as a long");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }

    public static long checkedAdd(long, long)
    {
        byte $b0;
        int $i4;
        long $l1, $l2, $l3;
        boolean $z0, $z1;

        $l2 := @parameter0: long;

        $l3 := @parameter1: long;

        $l1 = $l2 + $l3;

        $l3 = $l3 ^ $l2;

        $z0 = 1;

        $b0 = $l3 cmp 0L;

        $i4 = (int) $b0;

        if $i4 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l2 = $l2 ^ $l1;

        $b0 = $l2 cmp 0L;

        $i4 = (int) $b0;

        if $i4 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z1 | $z0;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        return $l1;
    }

    public static long checkedMultiply(long, long)
    {
        long $l0, $l2, $l4;
        byte $b1;
        int $i3, $i5;
        boolean $z0, $z1, $z2;

        $l2 := @parameter0: long;

        $l0 := @parameter1: long;

        $i3 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l2);

        $l4 = $l2 ^ -1L;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l4);

        $i3 = $i3 + $i5;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        $i3 = $i3 + $i5;

        $l4 = -1L ^ $l0;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l4);

        $i3 = $i3 + $i5;

        if $i3 <= 65 goto label1;

        $l2 = $l2 * $l0;

        return $l2;

     label1:
        $z0 = 1;

        if $i3 < 64 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z1);

        $b1 = $l2 cmp 0L;

        $i3 = (int) $b1;

        if $i3 < 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 == 0 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        $z1 = $z1 | $z2;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z1);

        $l4 = $l2 * $l0;

        $b1 = $l2 cmp 0L;

        if $b1 == 0 goto label9;

        $l2 = $l4 / $l2;

        $b1 = $l2 cmp $l0;

        if $b1 != 0 goto label8;

        goto label9;

     label8:
        $z0 = 0;

     label9:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        return $l4;
    }

    public static long checkedPow(long, int)
    {
        long $l2, $l4;
        java.lang.AssertionError $r0;
        byte $b1;
        int $i0, $i3, $i5;
        boolean $z0, $z1, $z2;

        $l2 := @parameter0: long;

        $i3 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", $i3);

        $z0 = 0;

        $b1 = $l2 cmp -2L;

        $i0 = (int) $b1;

        if $i0 < 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        $b1 = $l2 cmp 2L;

        $i0 = (int) $b1;

        if $i0 > 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        $z1 = $z1 & $z2;

        $l4 = 1L;

        if $z1 == 0 goto label14;

        $i0 = (int) $l2;

        $i5 = -2;

        if $i0 == $i5 goto label11;

        $i5 = -1;

        if $i0 == $i5 goto label09;

        if $i0 == 0 goto label07;

        if $i0 == 1 goto label20;

        if $i0 != 2 goto label06;

        if $i3 >= 63 goto label05;

        $z0 = 1;

     label05:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        $l2 = 1L << $i3;

        return $l2;

     label06:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label07:
        if $i3 != 0 goto label08;

        return 1L;

     label08:
        return 0L;

     label09:
        $i3 = $i3 & 1;

        if $i3 != 0 goto label10;

        return 1L;

     label10:
        return -1L;

     label11:
        if $i3 >= 64 goto label12;

        $z0 = 1;

     label12:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        $i0 = $i3 & 1;

        if $i0 != 0 goto label13;

        $l2 = 1L << $i3;

        return $l2;

     label13:
        $l2 = -1L << $i3;

        return $l2;

     label14:
        if $i3 == 0 goto label19;

        if $i3 == 1 goto label18;

        $i0 = $i3 & 1;

        if $i0 == 0 goto label15;

        $l4 = staticinvoke <com.google.common.math.LongMath: long checkedMultiply(long,long)>($l4, $l2);

     label15:
        $i3 = $i3 >> 1;

        if $i3 <= 0 goto label14;

        $b1 = -3037000499L cmp $l2;

        $i0 = (int) $b1;

        if $i0 > 0 goto label16;

        $b1 = $l2 cmp 3037000499L;

        $i0 = (int) $b1;

        if $i0 > 0 goto label16;

        $z0 = 1;

        goto label17;

     label16:
        $z0 = 0;

     label17:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        $l2 = $l2 * $l2;

        goto label14;

     label18:
        $l2 = staticinvoke <com.google.common.math.LongMath: long checkedMultiply(long,long)>($l4, $l2);

        return $l2;

     label19:
        return $l4;

     label20:
        return 1L;
    }

    public static long checkedSubtract(long, long)
    {
        byte $b0;
        int $i4;
        long $l1, $l2, $l3;
        boolean $z0, $z1;

        $l2 := @parameter0: long;

        $l3 := @parameter1: long;

        $l1 = $l2 - $l3;

        $l3 = $l3 ^ $l2;

        $z0 = 1;

        $b0 = $l3 cmp 0L;

        $i4 = (int) $b0;

        if $i4 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l2 = $l2 ^ $l1;

        $b0 = $l2 cmp 0L;

        $i4 = (int) $b0;

        if $i4 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z1 | $z0;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        return $l1;
    }

    public static long divide(long, long, java.math.RoundingMode)
    {
        long $l0, $l1, $l2, $l3;
        java.lang.AssertionError $r3;
        byte $b4;
        int[] $r1;
        int $i5, $i6;
        java.math.RoundingMode $r0, $r2;
        boolean $z0, $z1, $z2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: java.math.RoundingMode;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $l2 = $l0 / $l1;

        $l3 = $l1 * $l2;

        $l3 = $l0 - $l3;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label01;

        return $l2;

     label01:
        $l0 = $l0 ^ $l1;

        $l0 = $l0 >> 63;

        $i5 = (int) $l0;

        $z0 = 1;

        $i5 = $i5 | 1;

        $r1 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i6 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i6 = $r1[$i6];

        lookupswitch($i6)
        {
            case 1: goto label13;
            case 2: goto label16;
            case 3: goto label12;
            case 4: goto label17;
            case 5: goto label11;
            case 6: goto label03;
            case 7: goto label03;
            case 8: goto label03;
            default: goto label02;
        };

     label02:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label03:
        $l0 = staticinvoke <java.lang.Math: long abs(long)>($l3);

        $l1 = staticinvoke <java.lang.Math: long abs(long)>($l1);

        $l1 = $l1 - $l0;

        $l0 = $l0 - $l1;

        $b4 = $l0 cmp 0L;

        if $b4 != 0 goto label10;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        if $r0 != $r2 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        $r2 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        if $r0 != $r2 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        $l0 = 1L & $l2;

        $b4 = $l0 cmp 0L;

        if $b4 == 0 goto label08;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        $z0 = $z0 & $z2;

        $z0 = $z0 | $z1;

        goto label17;

     label10:
        $b4 = $l0 cmp 0L;

        $i6 = (int) $b4;

        if $i6 <= 0 goto label16;

        goto label17;

     label11:
        if $i5 <= 0 goto label16;

        goto label17;

     label12:
        if $i5 >= 0 goto label16;

        goto label17;

     label13:
        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label14;

        goto label15;

     label14:
        $z0 = 0;

     label15:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label16:
        $z0 = 0;

     label17:
        if $z0 == 0 goto label18;

        $l0 = (long) $i5;

        $l0 = $l2 + $l0;

        return $l0;

     label18:
        return $l2;
    }

    public static long factorial(int)
    {
        long[] $r0;
        int $i0, $i1;
        long $l2;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", $i0);

        $r0 = <com.google.common.math.LongMath: long[] factorials>;

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label1;

        $l2 = $r0[$i0];

        return $l2;

     label1:
        return 9223372036854775807L;
    }

    public static boolean fitsInInt(long)
    {
        byte $b0;
        int $i2;
        long $l1, $l3;

        $l1 := @parameter0: long;

        $i2 = (int) $l1;

        $l3 = (long) $i2;

        $b0 = $l3 cmp $l1;

        if $b0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static long floorPowerOfTwo(long)
    {
        int $i0;
        long $l1;

        $l1 := @parameter0: long;

        staticinvoke <com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", $l1);

        $i0 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l1);

        $i0 = 63 - $i0;

        $l1 = 1L << $i0;

        return $l1;
    }

    public static long gcd(long, long)
    {
        byte $b2;
        int $i3, $i5, $i6;
        long $l0, $l1, $l4;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        staticinvoke <com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("a", $l0);

        staticinvoke <com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("b", $l1);

        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label1;

        return $l1;

     label1:
        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label2;

        return $l0;

     label2:
        $i3 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l0);

        $l4 = $l0 >> $i3;

        $i5 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l1);

        $l0 = $l1 >> $i5;

     label3:
        $b2 = $l4 cmp $l0;

        if $b2 == 0 goto label4;

        $l4 = $l4 - $l0;

        $l1 = $l4 >> 63;

        $l1 = $l1 & $l4;

        $l4 = $l4 - $l1;

        $l4 = $l4 - $l1;

        $l0 = $l0 + $l1;

        $i6 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l4);

        $l4 = $l4 >> $i6;

        goto label3;

     label4:
        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i5);

        $l0 = $l4 << $i3;

        return $l0;
    }

    public static boolean isPowerOfTwo(long)
    {
        byte $b1;
        int $i3;
        long $l0, $l2;
        boolean $z0, $z1;

        $l0 := @parameter0: long;

        $z0 = 1;

        $b1 = $l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l2 = $l0 - 1L;

        $l0 = $l0 & $l2;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z1 & $z0;

        return $z0;
    }

    public static boolean isPrime(long)
    {
        long[][] $r1;
        long $l0, $l2;
        java.lang.AssertionError $r2;
        long[] $r0;
        byte $b1;
        int $i3, $i4, $i5;
        boolean $z0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 2L;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label01;

        staticinvoke <com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("n", $l0);

        return 0;

     label01:
        $b1 = $l0 cmp 2L;

        if $b1 == 0 goto label12;

        $b1 = $l0 cmp 3L;

        if $b1 == 0 goto label12;

        $b1 = $l0 cmp 5L;

        if $b1 == 0 goto label12;

        $b1 = $l0 cmp 7L;

        if $b1 == 0 goto label12;

        $b1 = $l0 cmp 11L;

        if $b1 == 0 goto label12;

        $b1 = $l0 cmp 13L;

        if $b1 != 0 goto label02;

        return 1;

     label02:
        $l2 = $l0 % 30L;

        $i3 = (int) $l2;

        $i3 = 1 << $i3;

        $i3 = -545925251 & $i3;

        if $i3 == 0 goto label03;

        return 0;

     label03:
        $l2 = $l0 % 7L;

        $b1 = $l2 cmp 0L;

        if $b1 == 0 goto label13;

        $l2 = $l0 % 11L;

        $b1 = $l2 cmp 0L;

        if $b1 == 0 goto label13;

        $l2 = $l0 % 13L;

        $b1 = $l2 cmp 0L;

        if $b1 != 0 goto label04;

        return 0;

     label04:
        $b1 = $l0 cmp 289L;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label05;

        return 1;

     label05:
        $r1 = <com.google.common.math.LongMath: long[][] millerRabinBaseSets>;

        $i3 = lengthof $r1;

        $i4 = 0;

     label06:
        if $i4 >= $i3 goto label11;

        $r0 = $r1[$i4];

        $l2 = $r0[0];

        $b1 = $l0 cmp $l2;

        $i5 = (int) $b1;

        if $i5 > 0 goto label10;

        $i3 = 1;

     label07:
        $i4 = lengthof $r0;

        if $i3 >= $i4 goto label09;

        $l2 = $r0[$i3];

        $z0 = staticinvoke <com.google.common.math.LongMath$MillerRabinTester: boolean test(long,long)>($l2, $l0);

        if $z0 != 0 goto label08;

        return 0;

     label08:
        $i3 = $i3 + 1;

        goto label07;

     label09:
        return 1;

     label10:
        $i4 = $i4 + 1;

        goto label06;

     label11:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label12:
        return 1;

     label13:
        return 0;
    }

    public static int lessThanBranchFree(long, long)
    {
        int $i0;
        long $l1, $l2;

        $l1 := @parameter0: long;

        $l2 := @parameter1: long;

        $l1 = $l1 - $l2;

        $l1 = $l1 ^ -1L;

        $l1 = $l1 ^ -1L;

        $l1 = $l1 >>> 63;

        $i0 = (int) $l1;

        return $i0;
    }

    public static int log10(long, java.math.RoundingMode)
    {
        long $l0, $l1;
        java.lang.AssertionError $r3;
        long[] $r1;
        byte $b4;
        int[] $r2;
        int $i2, $i3;
        java.math.RoundingMode $r0;
        boolean $z0;

        $l1 := @parameter0: long;

        $r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", $l1);

        $i2 = staticinvoke <com.google.common.math.LongMath: int log10Floor(long)>($l1);

        $r1 = <com.google.common.math.LongMath: long[] powersOf10>;

        $l0 = $r1[$i2];

        $r2 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i3 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i3 = $r2[$i3];

        lookupswitch($i3)
        {
            case 1: goto label5;
            case 2: goto label8;
            case 3: goto label8;
            case 4: goto label4;
            case 5: goto label4;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $r1 = <com.google.common.math.LongMath: long[] halfPowersOf10>;

        $l0 = $r1[$i2];

        $i3 = staticinvoke <com.google.common.math.LongMath: int lessThanBranchFree(long,long)>($l0, $l1);

     label3:
        $i2 = $i2 + $i3;

        return $i2;

     label4:
        $i3 = staticinvoke <com.google.common.math.LongMath: int lessThanBranchFree(long,long)>($l0, $l1);

        goto label3;

     label5:
        $b4 = $l1 cmp $l0;

        if $b4 != 0 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label8:
        return $i2;
    }

    public static int log10Floor(long)
    {
        byte[] $r0;
        long[] $r1;
        byte $b3;
        int $i2, $i4;
        long $l0, $l1;

        $l1 := @parameter0: long;

        $r0 = <com.google.common.math.LongMath: byte[] maxLog10ForLeadingZeros>;

        $i2 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l1);

        $b3 = $r0[$i2];

        $r1 = <com.google.common.math.LongMath: long[] powersOf10>;

        $i2 = (int) $b3;

        $l0 = $r1[$i2];

        $i2 = staticinvoke <com.google.common.math.LongMath: int lessThanBranchFree(long,long)>($l1, $l0);

        $i4 = (int) $b3;

        $i2 = $i4 - $i2;

        return $i2;
    }

    public static int log2(long, java.math.RoundingMode)
    {
        long $l0, $l2;
        java.lang.AssertionError $r2;
        int[] $r1;
        int $i1, $i3;
        java.math.RoundingMode $r0;
        boolean $z0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", $l0);

        $r1 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i1 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i1 = $r1[$i1];

        lookupswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("impossible");

        throw $r2;

     label2:
        $i1 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        $l2 = -5402926248376769404L >>> $i1;

        $i1 = 63 - $i1;

        $i3 = staticinvoke <com.google.common.math.LongMath: int lessThanBranchFree(long,long)>($l2, $l0);

        $i1 = $i1 + $i3;

        return $i1;

     label3:
        $l0 = $l0 - 1L;

        $i1 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        $i1 = 64 - $i1;

        return $i1;

     label4:
        $z0 = staticinvoke <com.google.common.math.LongMath: boolean isPowerOfTwo(long)>($l0);

        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label5:
        $i1 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        $i1 = 63 - $i1;

        return $i1;
    }

    public static long mean(long, long)
    {
        long $l0, $l1, $l2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 = $l0 & $l1;

        $l0 = $l0 ^ $l1;

        $l0 = $l0 >> 1;

        $l0 = $l2 + $l0;

        return $l0;
    }

    public static int mod(long, int)
    {
        int $i0;
        long $l1, $l2;

        $l2 := @parameter0: long;

        $i0 := @parameter1: int;

        $l1 = (long) $i0;

        $l2 = staticinvoke <com.google.common.math.LongMath: long mod(long,long)>($l2, $l1);

        $i0 = (int) $l2;

        return $i0;
    }

    public static long mod(long, long)
    {
        byte $b2;
        int $i3;
        long $l0, $l1;
        java.lang.ArithmeticException $r0;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $b2 = $l0 cmp 0L;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label2;

        $l1 = $l1 % $l0;

        $b2 = $l1 cmp 0L;

        $i3 = (int) $b2;

        if $i3 < 0 goto label1;

        return $l1;

     label1:
        $l1 = $l1 + $l0;

        return $l1;

     label2:
        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Modulus must be positive");

        throw $r0;
    }

    public static long multiplyFraction(long, long, long)
    {
        byte $b0;
        long $l1, $l2, $l3, $l4;

        $l2 := @parameter0: long;

        $l3 := @parameter1: long;

        $l4 := @parameter2: long;

        $b0 = $l2 cmp 1L;

        if $b0 != 0 goto label1;

        $l2 = $l3 / $l4;

        return $l2;

     label1:
        $l1 = staticinvoke <com.google.common.math.LongMath: long gcd(long,long)>($l2, $l4);

        $l2 = $l2 / $l1;

        $l4 = $l4 / $l1;

        $l3 = $l3 / $l4;

        $l2 = $l2 * $l3;

        return $l2;
    }

    public static long pow(long, int)
    {
        long $l1, $l4, $l5;
        java.lang.AssertionError $r0;
        byte $b3;
        int $i0, $i2, $i6;

        $l1 := @parameter0: long;

        $i2 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", $i2);

        $b3 = -2L cmp $l1;

        $i0 = (int) $b3;

        if $i0 > 0 goto label09;

        $b3 = $l1 cmp 2L;

        $i0 = (int) $b3;

        if $i0 > 0 goto label09;

        $i0 = (int) $l1;

        $i6 = -2;

        if $i0 == $i6 goto label06;

        $i6 = -1;

        if $i0 == $i6 goto label04;

        if $i0 == 0 goto label02;

        if $i0 == 1 goto label14;

        if $i0 != 2 goto label01;

        if $i2 >= 64 goto label15;

        $l1 = 1L << $i2;

        return $l1;

     label01:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        if $i2 != 0 goto label03;

        return 1L;

     label03:
        return 0L;

     label04:
        $i2 = $i2 & 1;

        if $i2 != 0 goto label05;

        return 1L;

     label05:
        return -1L;

     label06:
        if $i2 >= 64 goto label08;

        $i0 = $i2 & 1;

        if $i0 != 0 goto label07;

        $l1 = 1L << $i2;

        return $l1;

     label07:
        $l1 = 1L << $i2;

        $l1 = neg $l1;

        return $l1;

     label08:
        return 0L;

     label09:
        $l4 = 1L;

     label10:
        if $i2 == 0 goto label16;

        if $i2 == 1 goto label13;

        $i0 = $i2 & 1;

        if $i0 != 0 goto label11;

        $l5 = 1L;

        goto label12;

     label11:
        $l5 = $l1;

     label12:
        $l4 = $l4 * $l5;

        $l1 = $l1 * $l1;

        $i2 = $i2 >> 1;

        goto label10;

     label13:
        $l1 = $l4 * $l1;

        return $l1;

     label14:
        return 1L;

     label15:
        return 0L;

     label16:
        return $l4;
    }

    public static long saturatedAdd(long, long)
    {
        byte $b0;
        int $i4;
        long $l1, $l2, $l3;
        boolean $z0, $z1;

        $l1 := @parameter0: long;

        $l2 := @parameter1: long;

        $l3 = $l1 + $l2;

        $l2 = $l2 ^ $l1;

        $z0 = 1;

        $b0 = $l2 cmp 0L;

        $i4 = (int) $b0;

        if $i4 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l1 = $l1 ^ $l3;

        $b0 = $l1 cmp 0L;

        $i4 = (int) $b0;

        if $i4 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z1 | $z0;

        if $z0 == 0 goto label5;

        return $l3;

     label5:
        $l1 = $l3 >>> 63;

        $l1 = $l1 ^ 1L;

        $l1 = $l1 + 9223372036854775807L;

        return $l1;
    }

    public static long saturatedMultiply(long, long)
    {
        long $l0, $l2, $l4, $l6;
        byte $b1;
        int $i3, $i5;
        boolean $z0, $z1, $z2;

        $l2 := @parameter0: long;

        $l0 := @parameter1: long;

        $i3 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l2);

        $l4 = $l2 ^ -1L;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l4);

        $i3 = $i3 + $i5;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l0);

        $i3 = $i3 + $i5;

        $l4 = -1L ^ $l0;

        $i5 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l4);

        $i3 = $i3 + $i5;

        if $i3 <= 65 goto label01;

        $l2 = $l2 * $l0;

        return $l2;

     label01:
        $l4 = $l2 ^ $l0;

        $l4 = $l4 >>> 63;

        $l4 = $l4 + 9223372036854775807L;

        $z0 = 1;

        if $i3 >= 64 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        $b1 = $l2 cmp 0L;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label06;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        $z0 = $z2 & $z0;

        $z1 = $z1 | $z0;

        if $z1 == 0 goto label08;

        return $l4;

     label08:
        $l6 = $l2 * $l0;

        $b1 = $l2 cmp 0L;

        if $b1 == 0 goto label10;

        $l2 = $l6 / $l2;

        $b1 = $l2 cmp $l0;

        if $b1 != 0 goto label09;

        return $l6;

     label09:
        return $l4;

     label10:
        return $l6;
    }

    public static long saturatedPow(long, int)
    {
        long $l1, $l4, $l5, $l6;
        java.lang.AssertionError $r0;
        byte $b3;
        int $i0, $i2, $i7;
        boolean $z0, $z1;

        $l1 := @parameter0: long;

        $i2 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", $i2);

        $b3 = $l1 cmp -2L;

        $i0 = (int) $b3;

        if $i0 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $b3 = $l1 cmp 2L;

        $i0 = (int) $b3;

        if $i0 > 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        $z0 = $z0 & $z1;

        $l4 = 1L;

        if $z0 == 0 goto label14;

        $i0 = (int) $l1;

        $i7 = -2;

        if $i0 == $i7 goto label11;

        $i7 = -1;

        if $i0 == $i7 goto label09;

        if $i0 == 0 goto label07;

        if $i0 == 1 goto label24;

        if $i0 != 2 goto label06;

        if $i2 < 63 goto label05;

        return 9223372036854775807L;

     label05:
        $l1 = 1L << $i2;

        return $l1;

     label06:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label07:
        if $i2 != 0 goto label08;

        return 1L;

     label08:
        return 0L;

     label09:
        $i2 = $i2 & 1;

        if $i2 != 0 goto label10;

        return 1L;

     label10:
        return -1L;

     label11:
        if $i2 < 64 goto label12;

        $i2 = $i2 & 1;

        $l1 = (long) $i2;

        $l1 = $l1 + 9223372036854775807L;

        return $l1;

     label12:
        $i0 = $i2 & 1;

        if $i0 != 0 goto label13;

        $l1 = 1L << $i2;

        return $l1;

     label13:
        $l1 = -1L << $i2;

        return $l1;

     label14:
        $l5 = $l1 >>> 63;

        $i0 = $i2 & 1;

        $l6 = (long) $i0;

        $l5 = $l5 & $l6;

        $l5 = $l5 + 9223372036854775807L;

     label15:
        if $i2 == 0 goto label23;

        if $i2 == 1 goto label22;

        $i0 = $i2 & 1;

        if $i0 == 0 goto label16;

        $l4 = staticinvoke <com.google.common.math.LongMath: long saturatedMultiply(long,long)>($l4, $l1);

     label16:
        $i2 = $i2 >> 1;

        if $i2 <= 0 goto label15;

        $b3 = -3037000499L cmp $l1;

        $i0 = (int) $b3;

        if $i0 <= 0 goto label17;

        $z0 = 1;

        goto label18;

     label17:
        $z0 = 0;

     label18:
        $b3 = $l1 cmp 3037000499L;

        $i0 = (int) $b3;

        if $i0 <= 0 goto label19;

        $z1 = 1;

        goto label20;

     label19:
        $z1 = 0;

     label20:
        $z0 = $z0 | $z1;

        if $z0 == 0 goto label21;

        return $l5;

     label21:
        $l1 = $l1 * $l1;

        goto label15;

     label22:
        $l1 = staticinvoke <com.google.common.math.LongMath: long saturatedMultiply(long,long)>($l4, $l1);

        return $l1;

     label23:
        return $l4;

     label24:
        return 1L;
    }

    public static long saturatedSubtract(long, long)
    {
        byte $b0;
        int $i4;
        long $l1, $l2, $l3;
        boolean $z0, $z1;

        $l1 := @parameter0: long;

        $l2 := @parameter1: long;

        $l3 = $l1 - $l2;

        $l2 = $l2 ^ $l1;

        $z0 = 1;

        $b0 = $l2 cmp 0L;

        $i4 = (int) $b0;

        if $i4 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l1 = $l1 ^ $l3;

        $b0 = $l1 cmp 0L;

        $i4 = (int) $b0;

        if $i4 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z1 | $z0;

        if $z0 == 0 goto label5;

        return $l3;

     label5:
        $l1 = $l3 >>> 63;

        $l1 = $l1 ^ 1L;

        $l1 = $l1 + 9223372036854775807L;

        return $l1;
    }

    public static long sqrt(long, java.math.RoundingMode)
    {
        long $l1, $l2, $l3;
        java.lang.AssertionError $r2;
        byte $b4;
        int[] $r1;
        int $i0;
        java.math.RoundingMode $r0;
        boolean $z0;
        double $d0;

        $l1 := @parameter0: long;

        $r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("x", $l1);

        $z0 = staticinvoke <com.google.common.math.LongMath: boolean fitsInInt(long)>($l1);

        if $z0 == 0 goto label01;

        $i0 = (int) $l1;

        $i0 = staticinvoke <com.google.common.math.IntMath: int sqrt(int,java.math.RoundingMode)>($i0, $r0);

        $l1 = (long) $i0;

        return $l1;

     label01:
        $d0 = (double) $l1;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $l2 = (long) $d0;

        $l3 = $l2 * $l2;

        $r1 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i0 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i0 = $r1[$i0];

        $z0 = 1;

        lookupswitch($i0)
        {
            case 1: goto label08;
            case 2: goto label07;
            case 3: goto label07;
            case 4: goto label06;
            case 5: goto label06;
            case 6: goto label03;
            case 7: goto label03;
            case 8: goto label03;
            default: goto label02;
        };

     label02:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        $b4 = $l1 cmp $l3;

        $i0 = (int) $b4;

        if $i0 >= 0 goto label04;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        $l3 = (long) $z0;

        $l2 = $l2 - $l3;

        $l3 = $l2 * $l2;

        $l3 = $l3 + $l2;

        $i0 = staticinvoke <com.google.common.math.LongMath: int lessThanBranchFree(long,long)>($l3, $l1);

        $l1 = (long) $i0;

        $l1 = $l2 + $l1;

        return $l1;

     label06:
        $b4 = $l1 cmp $l3;

        $i0 = (int) $b4;

        if $i0 <= 0 goto label11;

        $l1 = $l2 + 1L;

        return $l1;

     label07:
        $b4 = $l1 cmp $l3;

        $i0 = (int) $b4;

        if $i0 >= 0 goto label11;

        $l1 = $l2 - 1L;

        return $l1;

     label08:
        $b4 = $l3 cmp $l1;

        if $b4 != 0 goto label09;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label11:
        return $l2;
    }
}
