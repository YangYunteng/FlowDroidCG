public class com.google.firebase.installations.FirebaseInstallations extends java.lang.Object implements com.google.firebase.installations.FirebaseInstallationsApi
{
    public static final java.lang.String API_KEY_VALIDATION_MSG;
    public static final java.lang.String APP_ID_VALIDATION_MSG;
    public static final java.lang.String AUTH_ERROR_MSG;
    public static final java.lang.String CHIME_FIREBASE_APP_NAME;
    public static final int CORE_POOL_SIZE;
    public static final long KEEP_ALIVE_TIME_IN_SECONDS;
    public static final java.lang.String LOCKFILE_NAME_GENERATE_FID;
    public static final int MAXIMUM_POOL_SIZE;
    public static final java.lang.String PROJECT_ID_VALIDATION_MSG;
    public static final java.util.concurrent.ThreadFactory THREAD_FACTORY;
    public static final java.lang.Object lockGenerateFid;
    public final java.util.concurrent.ExecutorService backgroundExecutor;
    public java.lang.String cachedFid;
    public final com.google.firebase.installations.RandomFidGenerator fidGenerator;
    public final com.google.firebase.FirebaseApp firebaseApp;
    public final com.google.firebase.installations.local.IidStore iidStore;
    public final java.util.List listeners;
    public final java.lang.Object lock;
    public final java.util.concurrent.ExecutorService networkExecutor;
    public final com.google.firebase.installations.local.PersistedInstallation persistedInstallation;
    public final com.google.firebase.installations.remote.FirebaseInstallationServiceClient serviceClient;
    public final com.google.firebase.installations.Utils utils;

    static void <clinit>()
    {
        java.lang.Object $r0;
        com.google.firebase.installations.FirebaseInstallations$1 $r1;

        <com.google.firebase.installations.FirebaseInstallations: java.lang.String PROJECT_ID_VALIDATION_MSG> = "Please set your Project ID. A valid Firebase Project ID is required to communicate with Firebase server APIs: It identifies your application with Firebase.Please refer to https://firebase.google.com/support/privacy/init-options.";

        <com.google.firebase.installations.FirebaseInstallations: int MAXIMUM_POOL_SIZE> = 1;

        <com.google.firebase.installations.FirebaseInstallations: java.lang.String LOCKFILE_NAME_GENERATE_FID> = "generatefid.lock";

        <com.google.firebase.installations.FirebaseInstallations: long KEEP_ALIVE_TIME_IN_SECONDS> = 30L;

        <com.google.firebase.installations.FirebaseInstallations: int CORE_POOL_SIZE> = 0;

        <com.google.firebase.installations.FirebaseInstallations: java.lang.String CHIME_FIREBASE_APP_NAME> = "CHIME_ANDROID_SDK";

        <com.google.firebase.installations.FirebaseInstallations: java.lang.String AUTH_ERROR_MSG> = "Installation ID could not be validated with the Firebase servers (maybe it was deleted). Firebase Installations will need to create a new Installation ID and auth token. Please retry your last request.";

        <com.google.firebase.installations.FirebaseInstallations: java.lang.String APP_ID_VALIDATION_MSG> = "Please set your Application ID. A valid Firebase App ID is required to communicate with Firebase server APIs: It identifies your application with Firebase.Please refer to https://firebase.google.com/support/privacy/init-options.";

        <com.google.firebase.installations.FirebaseInstallations: java.lang.String API_KEY_VALIDATION_MSG> = "Please set a valid API key. A Firebase API key is required to communicate with Firebase server APIs: It authenticates your project with Google.Please refer to https://firebase.google.com/support/privacy/init-options.";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.google.firebase.installations.FirebaseInstallations: java.lang.Object lockGenerateFid> = $r0;

        $r1 = new com.google.firebase.installations.FirebaseInstallations$1;

        specialinvoke $r1.<com.google.firebase.installations.FirebaseInstallations$1: void <init>()>();

        <com.google.firebase.installations.FirebaseInstallations: java.util.concurrent.ThreadFactory THREAD_FACTORY> = $r1;

        return;
    }

    public void <init>(com.google.firebase.FirebaseApp, com.google.firebase.platforminfo.UserAgentPublisher, com.google.firebase.heartbeatinfo.HeartBeatInfo)
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.installations.local.PersistedInstallation $r4;
        android.content.Context $r6;
        java.util.concurrent.ThreadPoolExecutor $r5;
        com.google.firebase.platforminfo.UserAgentPublisher $r2;
        com.google.firebase.heartbeatinfo.HeartBeatInfo $r3;
        java.util.concurrent.LinkedBlockingQueue $r8;
        java.util.concurrent.TimeUnit $r7;
        com.google.firebase.installations.remote.FirebaseInstallationServiceClient $r10;
        com.google.firebase.installations.RandomFidGenerator $r13;
        com.google.firebase.installations.local.IidStore $r12;
        com.google.firebase.installations.Utils $r11;
        java.util.concurrent.ThreadFactory $r9;
        com.google.firebase.FirebaseApp $r1;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 := @parameter0: com.google.firebase.FirebaseApp;

        $r2 := @parameter1: com.google.firebase.platforminfo.UserAgentPublisher;

        $r3 := @parameter2: com.google.firebase.heartbeatinfo.HeartBeatInfo;

        $r5 = new java.util.concurrent.ThreadPoolExecutor;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r8 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r8.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        $r9 = <com.google.firebase.installations.FirebaseInstallations: java.util.concurrent.ThreadFactory THREAD_FACTORY>;

        specialinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 1, 30L, $r7, $r8, $r9);

        $r10 = new com.google.firebase.installations.remote.FirebaseInstallationServiceClient;

        $r6 = virtualinvoke $r1.<com.google.firebase.FirebaseApp: android.content.Context getApplicationContext()>();

        specialinvoke $r10.<com.google.firebase.installations.remote.FirebaseInstallationServiceClient: void <init>(android.content.Context,com.google.firebase.platforminfo.UserAgentPublisher,com.google.firebase.heartbeatinfo.HeartBeatInfo)>($r6, $r2, $r3);

        $r4 = new com.google.firebase.installations.local.PersistedInstallation;

        specialinvoke $r4.<com.google.firebase.installations.local.PersistedInstallation: void <init>(com.google.firebase.FirebaseApp)>($r1);

        $r11 = new com.google.firebase.installations.Utils;

        specialinvoke $r11.<com.google.firebase.installations.Utils: void <init>()>();

        $r12 = new com.google.firebase.installations.local.IidStore;

        specialinvoke $r12.<com.google.firebase.installations.local.IidStore: void <init>(com.google.firebase.FirebaseApp)>($r1);

        $r13 = new com.google.firebase.installations.RandomFidGenerator;

        specialinvoke $r13.<com.google.firebase.installations.RandomFidGenerator: void <init>()>();

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void <init>(java.util.concurrent.ExecutorService,com.google.firebase.FirebaseApp,com.google.firebase.installations.remote.FirebaseInstallationServiceClient,com.google.firebase.installations.local.PersistedInstallation,com.google.firebase.installations.Utils,com.google.firebase.installations.local.IidStore,com.google.firebase.installations.RandomFidGenerator)>($r5, $r1, $r10, $r4, $r11, $r12, $r13);

        return;
    }

    public void <init>(java.util.concurrent.ExecutorService, com.google.firebase.FirebaseApp, com.google.firebase.installations.remote.FirebaseInstallationServiceClient, com.google.firebase.installations.local.PersistedInstallation, com.google.firebase.installations.Utils, com.google.firebase.installations.local.IidStore, com.google.firebase.installations.RandomFidGenerator)
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.installations.local.PersistedInstallation $r4;
        java.util.concurrent.ThreadPoolExecutor $r11;
        java.util.concurrent.LinkedBlockingQueue $r9;
        java.util.ArrayList $r13;
        java.util.concurrent.TimeUnit $r8;
        com.google.firebase.installations.remote.FirebaseInstallationServiceClient $r3;
        com.google.firebase.installations.RandomFidGenerator $r7;
        com.google.firebase.installations.local.IidStore $r6;
        com.google.firebase.installations.Utils $r5;
        java.lang.Object $r12;
        java.util.concurrent.ThreadFactory $r10;
        java.util.concurrent.ExecutorService $r1;
        com.google.firebase.FirebaseApp $r2;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        $r2 := @parameter1: com.google.firebase.FirebaseApp;

        $r3 := @parameter2: com.google.firebase.installations.remote.FirebaseInstallationServiceClient;

        $r4 := @parameter3: com.google.firebase.installations.local.PersistedInstallation;

        $r5 := @parameter4: com.google.firebase.installations.Utils;

        $r6 := @parameter5: com.google.firebase.installations.local.IidStore;

        $r7 := @parameter6: com.google.firebase.installations.RandomFidGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r12 = new java.lang.Object;

        specialinvoke $r12.<java.lang.Object: void <init>()>();

        r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.Object lock> = $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<com.google.firebase.installations.FirebaseInstallations: java.util.List listeners> = $r13;

        r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.FirebaseApp firebaseApp> = $r2;

        r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.remote.FirebaseInstallationServiceClient serviceClient> = $r3;

        r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.PersistedInstallation persistedInstallation> = $r4;

        r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.Utils utils> = $r5;

        r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.IidStore iidStore> = $r6;

        r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.RandomFidGenerator fidGenerator> = $r7;

        r0.<com.google.firebase.installations.FirebaseInstallations: java.util.concurrent.ExecutorService backgroundExecutor> = $r1;

        $r11 = new java.util.concurrent.ThreadPoolExecutor;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r9 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r9.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        $r10 = <com.google.firebase.installations.FirebaseInstallations: java.util.concurrent.ThreadFactory THREAD_FACTORY>;

        specialinvoke $r11.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 1, 30L, $r8, $r9, $r10);

        r0.<com.google.firebase.installations.FirebaseInstallations: java.util.concurrent.ExecutorService networkExecutor> = $r11;

        return;
    }

    public static java.lang.Void access$lambda$0(com.google.firebase.installations.FirebaseInstallations)
    {
        com.google.firebase.installations.FirebaseInstallations $r1;
        java.lang.Void $r0;

        $r1 := @parameter0: com.google.firebase.installations.FirebaseInstallations;

        $r0 = specialinvoke $r1.<com.google.firebase.installations.FirebaseInstallations: java.lang.Void deleteFirebaseInstallationId()>();

        return $r0;
    }

    private com.google.android.gms.tasks.Task addGetAuthTokenListener()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.installations.Utils $r2;
        com.google.android.gms.tasks.TaskCompletionSource $r4;
        com.google.firebase.installations.GetAuthTokenListener $r1;
        com.google.android.gms.tasks.Task $r3;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r4 = new com.google.android.gms.tasks.TaskCompletionSource;

        specialinvoke $r4.<com.google.android.gms.tasks.TaskCompletionSource: void <init>()>();

        $r1 = new com.google.firebase.installations.GetAuthTokenListener;

        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.Utils utils>;

        specialinvoke $r1.<com.google.firebase.installations.GetAuthTokenListener: void <init>(com.google.firebase.installations.Utils,com.google.android.gms.tasks.TaskCompletionSource)>($r2, $r4);

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void addStateListeners(com.google.firebase.installations.StateListener)>($r1);

        $r3 = virtualinvoke $r4.<com.google.android.gms.tasks.TaskCompletionSource: com.google.android.gms.tasks.Task getTask()>();

        return $r3;
    }

    private com.google.android.gms.tasks.Task addGetIdListener()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.android.gms.tasks.TaskCompletionSource $r3;
        com.google.firebase.installations.GetIdListener $r1;
        com.google.android.gms.tasks.Task $r2;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r3 = new com.google.android.gms.tasks.TaskCompletionSource;

        specialinvoke $r3.<com.google.android.gms.tasks.TaskCompletionSource: void <init>()>();

        $r1 = new com.google.firebase.installations.GetIdListener;

        specialinvoke $r1.<com.google.firebase.installations.GetIdListener: void <init>(com.google.android.gms.tasks.TaskCompletionSource)>($r3);

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void addStateListeners(com.google.firebase.installations.StateListener)>($r1);

        $r2 = virtualinvoke $r3.<com.google.android.gms.tasks.TaskCompletionSource: com.google.android.gms.tasks.Task getTask()>();

        return $r2;
    }

    private void addStateListeners(com.google.firebase.installations.StateListener)
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        java.lang.Throwable $r4;
        java.util.List $r2;
        java.lang.Object $r1;
        com.google.firebase.installations.StateListener $r3;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r3 := @parameter0: com.google.firebase.installations.StateListener;

        $r1 = r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.Void deleteFirebaseInstallationId()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.installations.remote.FirebaseInstallationServiceClient $r2;
        com.google.firebase.installations.local.PersistedInstallationEntry $r1;
        java.lang.String $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void updateCacheFid(java.lang.String)>(null);

        $r1 = specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.PersistedInstallationEntry getMultiProcessSafePrefs()>();

        $z0 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: boolean isRegistered()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.remote.FirebaseInstallationServiceClient serviceClient>;

        $r3 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getApiKey()>();

        $r4 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: java.lang.String getFirebaseInstallationId()>();

        $r5 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getProjectIdentifier()>();

        $r6 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: java.lang.String getRefreshToken()>();

        virtualinvoke $r2.<com.google.firebase.installations.remote.FirebaseInstallationServiceClient: void deleteFirebaseInstallation(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r5, $r6);

     label1:
        $r1 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: com.google.firebase.installations.local.PersistedInstallationEntry withNoGeneratedFid()>();

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void insertOrUpdatePrefs(com.google.firebase.installations.local.PersistedInstallationEntry)>($r1);

        return null;
    }

    private void doNetworkCallIfNecessary(boolean)
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        java.io.IOException $r7;
        com.google.firebase.installations.FirebaseInstallationsException $r5;
        com.google.firebase.installations.FirebaseInstallationsException$Status $r6;
        com.google.firebase.installations.Utils $r2;
        com.google.firebase.installations.local.PersistedInstallationEntry $r1, $r3;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.PersistedInstallationEntry getMultiProcessSafePrefs()>();

     label01:
        $z1 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: boolean isErrored()>();

     label02:
        if $z1 != 0 goto label11;

     label03:
        $z1 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: boolean isUnregistered()>();

     label04:
        if $z1 == 0 goto label05;

        goto label11;

     label05:
        if $z0 != 0 goto label09;

        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.Utils utils>;

     label06:
        $z0 = virtualinvoke $r2.<com.google.firebase.installations.Utils: boolean isAuthTokenExpired(com.google.firebase.installations.local.PersistedInstallationEntry)>($r1);

     label07:
        if $z0 == 0 goto label08;

        goto label09;

     label08:
        return;

     label09:
        $r3 = specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.PersistedInstallationEntry fetchAuthTokenFromServer(com.google.firebase.installations.local.PersistedInstallationEntry)>($r1);

     label10:
        goto label12;

     label11:
        $r3 = specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.PersistedInstallationEntry registerFidWithServer(com.google.firebase.installations.local.PersistedInstallationEntry)>($r1);

     label12:
        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void insertOrUpdatePrefs(com.google.firebase.installations.local.PersistedInstallationEntry)>($r3);

        $z0 = virtualinvoke $r3.<com.google.firebase.installations.local.PersistedInstallationEntry: boolean isRegistered()>();

        if $z0 == 0 goto label13;

        $r4 = virtualinvoke $r3.<com.google.firebase.installations.local.PersistedInstallationEntry: java.lang.String getFirebaseInstallationId()>();

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void updateCacheFid(java.lang.String)>($r4);

     label13:
        $z0 = virtualinvoke $r3.<com.google.firebase.installations.local.PersistedInstallationEntry: boolean isErrored()>();

        if $z0 == 0 goto label14;

        $r5 = new com.google.firebase.installations.FirebaseInstallationsException;

        $r6 = <com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status BAD_CONFIG>;

        specialinvoke $r5.<com.google.firebase.installations.FirebaseInstallationsException: void <init>(com.google.firebase.installations.FirebaseInstallationsException$Status)>($r6);

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void triggerOnException(com.google.firebase.installations.local.PersistedInstallationEntry,java.lang.Exception)>($r3, $r5);

        return;

     label14:
        $z0 = virtualinvoke $r3.<com.google.firebase.installations.local.PersistedInstallationEntry: boolean isNotGenerated()>();

        if $z0 == 0 goto label15;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Installation ID could not be validated with the Firebase servers (maybe it was deleted). Firebase Installations will need to create a new Installation ID and auth token. Please retry your last request.");

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void triggerOnException(com.google.firebase.installations.local.PersistedInstallationEntry,java.lang.Exception)>($r3, $r7);

        return;

     label15:
        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void triggerOnStateReached(com.google.firebase.installations.local.PersistedInstallationEntry)>($r3);

        return;

     label16:
        $r5 := @caughtexception;

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void triggerOnException(com.google.firebase.installations.local.PersistedInstallationEntry,java.lang.Exception)>($r1, $r5);

        return;

        catch com.google.firebase.installations.FirebaseInstallationsException from label01 to label02 with label16;
        catch com.google.firebase.installations.FirebaseInstallationsException from label03 to label04 with label16;
        catch com.google.firebase.installations.FirebaseInstallationsException from label06 to label07 with label16;
        catch com.google.firebase.installations.FirebaseInstallationsException from label09 to label10 with label16;
        catch com.google.firebase.installations.FirebaseInstallationsException from label11 to label12 with label16;
    }

    private final void doRegistrationOrRefresh(boolean)
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.installations.local.PersistedInstallationEntry $r1, $r2;
        java.lang.Runnable $r4;
        java.util.concurrent.ExecutorService $r3;
        boolean $z0;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.PersistedInstallationEntry getPrefsWithGeneratedIdMultiProcessSafe()>();

        $r2 = $r1;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: com.google.firebase.installations.local.PersistedInstallationEntry withClearedAuthToken()>();

     label1:
        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void triggerOnStateReached(com.google.firebase.installations.local.PersistedInstallationEntry)>($r2);

        $r3 = r0.<com.google.firebase.installations.FirebaseInstallations: java.util.concurrent.ExecutorService networkExecutor>;

        $r4 = staticinvoke <com.google.firebase.installations.FirebaseInstallations$$Lambda$4: java.lang.Runnable lambdaFactory$(com.google.firebase.installations.FirebaseInstallations,boolean)>(r0, $z0);

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r4);

        return;
    }

    private com.google.firebase.installations.local.PersistedInstallationEntry fetchAuthTokenFromServer(com.google.firebase.installations.local.PersistedInstallationEntry)
    {
        long $l1, $l2;
        com.google.firebase.installations.FirebaseInstallationsException $r10;
        com.google.firebase.installations.FirebaseInstallationsException$Status $r11;
        com.google.firebase.installations.remote.FirebaseInstallationServiceClient $r2;
        int[] $r8;
        int $i0;
        java.lang.String $r3, $r4, $r5, $r6;
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.installations.remote.TokenResult$ResponseCode $r9;
        com.google.firebase.installations.remote.TokenResult $r7;
        com.google.firebase.installations.Utils $r12;
        com.google.firebase.installations.local.PersistedInstallationEntry $r1;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 := @parameter0: com.google.firebase.installations.local.PersistedInstallationEntry;

        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.remote.FirebaseInstallationServiceClient serviceClient>;

        $r3 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getApiKey()>();

        $r4 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: java.lang.String getFirebaseInstallationId()>();

        $r5 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getProjectIdentifier()>();

        $r6 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: java.lang.String getRefreshToken()>();

        $r7 = virtualinvoke $r2.<com.google.firebase.installations.remote.FirebaseInstallationServiceClient: com.google.firebase.installations.remote.TokenResult generateAuthToken(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r5, $r6);

        $r8 = <com.google.firebase.installations.FirebaseInstallations$2: int[] $SwitchMap$com$google$firebase$installations$remote$TokenResult$ResponseCode>;

        $r9 = virtualinvoke $r7.<com.google.firebase.installations.remote.TokenResult: com.google.firebase.installations.remote.TokenResult$ResponseCode getResponseCode()>();

        $i0 = virtualinvoke $r9.<java.lang.Enum: int ordinal()>();

        $i0 = $r8[$i0];

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 != 3 goto label1;

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void updateCacheFid(java.lang.String)>(null);

        $r1 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: com.google.firebase.installations.local.PersistedInstallationEntry withNoGeneratedFid()>();

        return $r1;

     label1:
        $r10 = new com.google.firebase.installations.FirebaseInstallationsException;

        $r11 = <com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status UNAVAILABLE>;

        specialinvoke $r10.<com.google.firebase.installations.FirebaseInstallationsException: void <init>(java.lang.String,com.google.firebase.installations.FirebaseInstallationsException$Status)>("Firebase Installations Service is unavailable. Please try again later.", $r11);

        throw $r10;

     label2:
        $r1 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: com.google.firebase.installations.local.PersistedInstallationEntry withFisError(java.lang.String)>("BAD CONFIG");

        return $r1;

     label3:
        $r3 = virtualinvoke $r7.<com.google.firebase.installations.remote.TokenResult: java.lang.String getToken()>();

        $l1 = virtualinvoke $r7.<com.google.firebase.installations.remote.TokenResult: long getTokenExpirationTimestamp()>();

        $r12 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.Utils utils>;

        $l2 = virtualinvoke $r12.<com.google.firebase.installations.Utils: long currentTimeInSecs()>();

        $r1 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: com.google.firebase.installations.local.PersistedInstallationEntry withAuthToken(java.lang.String,long,long)>($r3, $l1, $l2);

        return $r1;
    }

    private java.lang.String getCacheFid()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        entermonitor r0;

     label1:
        r2 = r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String cachedFid>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static com.google.firebase.installations.FirebaseInstallations getInstance()
    {
        com.google.firebase.installations.FirebaseInstallations $r1;
        com.google.firebase.FirebaseApp $r0;

        $r0 = staticinvoke <com.google.firebase.FirebaseApp: com.google.firebase.FirebaseApp getInstance()>();

        $r1 = staticinvoke <com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.FirebaseInstallations getInstance(com.google.firebase.FirebaseApp)>($r0);

        return $r1;
    }

    public static com.google.firebase.installations.FirebaseInstallations getInstance(com.google.firebase.FirebaseApp)
    {
        com.google.firebase.installations.FirebaseInstallations $r2;
        java.lang.Object $r0;
        com.google.firebase.FirebaseApp $r1;
        boolean $z0;

        $r1 := @parameter0: com.google.firebase.FirebaseApp;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.android.gms.common.internal.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Null is not a valid value of FirebaseApp.");

        $r0 = virtualinvoke $r1.<com.google.firebase.FirebaseApp: java.lang.Object get(java.lang.Class)>(class "Lcom/google/firebase/installations/FirebaseInstallationsApi;");

        $r2 = (com.google.firebase.installations.FirebaseInstallations) $r0;

        return $r2;
    }

    private com.google.firebase.installations.local.PersistedInstallationEntry getMultiProcessSafePrefs()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.installations.local.PersistedInstallation $r5;
        java.lang.Throwable $r7, $r8;
        android.content.Context $r3;
        com.google.firebase.installations.CrossProcessLock $r4;
        java.lang.Object $r1;
        com.google.firebase.installations.local.PersistedInstallationEntry $r6;
        com.google.firebase.FirebaseApp $r2;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 = <com.google.firebase.installations.FirebaseInstallations: java.lang.Object lockGenerateFid>;

        entermonitor $r1;

     label01:
        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.FirebaseApp firebaseApp>;

        $r3 = virtualinvoke $r2.<com.google.firebase.FirebaseApp: android.content.Context getApplicationContext()>();

        $r4 = staticinvoke <com.google.firebase.installations.CrossProcessLock: com.google.firebase.installations.CrossProcessLock acquire(android.content.Context,java.lang.String)>($r3, "generatefid.lock");

     label02:
        $r5 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.PersistedInstallation persistedInstallation>;

        $r6 = virtualinvoke $r5.<com.google.firebase.installations.local.PersistedInstallation: com.google.firebase.installations.local.PersistedInstallationEntry readPersistedInstallationEntryValue()>();

     label03:
        if $r4 == null goto label05;

     label04:
        virtualinvoke $r4.<com.google.firebase.installations.CrossProcessLock: void releaseAndClose()>();

     label05:
        exitmonitor $r1;

     label06:
        return $r6;

     label07:
        $r7 := @caughtexception;

        if $r4 == null goto label08;

        virtualinvoke $r4.<com.google.firebase.installations.CrossProcessLock: void releaseAndClose()>();

     label08:
        throw $r7;

     label09:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label10:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label07 to label10 with label09;
    }

    private com.google.firebase.installations.local.PersistedInstallationEntry getPrefsWithGeneratedIdMultiProcessSafe()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.installations.local.PersistedInstallation $r2;
        java.lang.Throwable $r9, $r10;
        android.content.Context $r4;
        com.google.firebase.installations.CrossProcessLock $r5;
        java.lang.Object $r1;
        com.google.firebase.installations.local.PersistedInstallationEntry $r6, $r7;
        java.lang.String $r8;
        com.google.firebase.FirebaseApp $r3;
        boolean $z0;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 = <com.google.firebase.installations.FirebaseInstallations: java.lang.Object lockGenerateFid>;

        entermonitor $r1;

     label01:
        $r3 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.FirebaseApp firebaseApp>;

        $r4 = virtualinvoke $r3.<com.google.firebase.FirebaseApp: android.content.Context getApplicationContext()>();

        $r5 = staticinvoke <com.google.firebase.installations.CrossProcessLock: com.google.firebase.installations.CrossProcessLock acquire(android.content.Context,java.lang.String)>($r4, "generatefid.lock");

     label02:
        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.PersistedInstallation persistedInstallation>;

        $r6 = virtualinvoke $r2.<com.google.firebase.installations.local.PersistedInstallation: com.google.firebase.installations.local.PersistedInstallationEntry readPersistedInstallationEntryValue()>();

        $r7 = $r6;

        $z0 = virtualinvoke $r6.<com.google.firebase.installations.local.PersistedInstallationEntry: boolean isNotGenerated()>();

        if $z0 == 0 goto label03;

        $r8 = specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String readExistingIidOrCreateFid(com.google.firebase.installations.local.PersistedInstallationEntry)>($r6);

        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.PersistedInstallation persistedInstallation>;

        $r6 = virtualinvoke $r6.<com.google.firebase.installations.local.PersistedInstallationEntry: com.google.firebase.installations.local.PersistedInstallationEntry withUnregisteredFid(java.lang.String)>($r8);

        $r7 = virtualinvoke $r2.<com.google.firebase.installations.local.PersistedInstallation: com.google.firebase.installations.local.PersistedInstallationEntry insertOrUpdatePersistedInstallationEntry(com.google.firebase.installations.local.PersistedInstallationEntry)>($r6);

     label03:
        if $r5 == null goto label05;

     label04:
        virtualinvoke $r5.<com.google.firebase.installations.CrossProcessLock: void releaseAndClose()>();

     label05:
        exitmonitor $r1;

     label06:
        return $r7;

     label07:
        $r9 := @caughtexception;

        if $r5 == null goto label08;

        virtualinvoke $r5.<com.google.firebase.installations.CrossProcessLock: void releaseAndClose()>();

     label08:
        throw $r9;

     label09:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label07 to label10 with label09;
    }

    private void insertOrUpdatePrefs(com.google.firebase.installations.local.PersistedInstallationEntry)
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.installations.local.PersistedInstallation $r6;
        java.lang.Throwable $r7, $r8;
        android.content.Context $r4;
        com.google.firebase.installations.CrossProcessLock $r5;
        java.lang.Object $r1;
        com.google.firebase.installations.local.PersistedInstallationEntry $r2;
        com.google.firebase.FirebaseApp $r3;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r2 := @parameter0: com.google.firebase.installations.local.PersistedInstallationEntry;

        $r1 = <com.google.firebase.installations.FirebaseInstallations: java.lang.Object lockGenerateFid>;

        entermonitor $r1;

     label01:
        $r3 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.FirebaseApp firebaseApp>;

        $r4 = virtualinvoke $r3.<com.google.firebase.FirebaseApp: android.content.Context getApplicationContext()>();

        $r5 = staticinvoke <com.google.firebase.installations.CrossProcessLock: com.google.firebase.installations.CrossProcessLock acquire(android.content.Context,java.lang.String)>($r4, "generatefid.lock");

     label02:
        $r6 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.PersistedInstallation persistedInstallation>;

        virtualinvoke $r6.<com.google.firebase.installations.local.PersistedInstallation: com.google.firebase.installations.local.PersistedInstallationEntry insertOrUpdatePersistedInstallationEntry(com.google.firebase.installations.local.PersistedInstallationEntry)>($r2);

     label03:
        if $r5 == null goto label05;

     label04:
        virtualinvoke $r5.<com.google.firebase.installations.CrossProcessLock: void releaseAndClose()>();

     label05:
        exitmonitor $r1;

     label06:
        return;

     label07:
        $r7 := @caughtexception;

        if $r5 == null goto label08;

        virtualinvoke $r5.<com.google.firebase.installations.CrossProcessLock: void releaseAndClose()>();

     label08:
        throw $r7;

     label09:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label10:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label07 to label10 with label09;
    }

    public static void lambda$doRegistrationOrRefresh$2(com.google.firebase.installations.FirebaseInstallations, boolean)
    {
        com.google.firebase.installations.FirebaseInstallations $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.firebase.installations.FirebaseInstallations;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<com.google.firebase.installations.FirebaseInstallations: void doNetworkCallIfNecessary(boolean)>($z0);

        return;
    }

    public static void lambda$getId$0(com.google.firebase.installations.FirebaseInstallations)
    {
        com.google.firebase.installations.FirebaseInstallations $r0;

        $r0 := @parameter0: com.google.firebase.installations.FirebaseInstallations;

        specialinvoke $r0.<com.google.firebase.installations.FirebaseInstallations: void doRegistrationOrRefresh(boolean)>(0);

        return;
    }

    public static void lambda$getToken$1(com.google.firebase.installations.FirebaseInstallations, boolean)
    {
        com.google.firebase.installations.FirebaseInstallations $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.firebase.installations.FirebaseInstallations;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<com.google.firebase.installations.FirebaseInstallations: void doRegistrationOrRefresh(boolean)>($z0);

        return;
    }

    private void preConditionChecks()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getApplicationId()>();

        staticinvoke <com.google.android.gms.common.internal.Preconditions: java.lang.String checkNotEmpty(java.lang.String,java.lang.Object)>($r1, "Please set your Application ID. A valid Firebase App ID is required to communicate with Firebase server APIs: It identifies your application with Firebase.Please refer to https://firebase.google.com/support/privacy/init-options.");

        $r1 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getProjectIdentifier()>();

        staticinvoke <com.google.android.gms.common.internal.Preconditions: java.lang.String checkNotEmpty(java.lang.String,java.lang.Object)>($r1, "Please set your Project ID. A valid Firebase Project ID is required to communicate with Firebase server APIs: It identifies your application with Firebase.Please refer to https://firebase.google.com/support/privacy/init-options.");

        $r1 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getApiKey()>();

        staticinvoke <com.google.android.gms.common.internal.Preconditions: java.lang.String checkNotEmpty(java.lang.String,java.lang.Object)>($r1, "Please set a valid API key. A Firebase API key is required to communicate with Firebase server APIs: It authenticates your project with Google.Please refer to https://firebase.google.com/support/privacy/init-options.");

        $r1 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getApplicationId()>();

        $z0 = staticinvoke <com.google.firebase.installations.Utils: boolean isValidAppIdFormat(java.lang.String)>($r1);

        staticinvoke <com.google.android.gms.common.internal.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Please set your Application ID. A valid Firebase App ID is required to communicate with Firebase server APIs: It identifies your application with Firebase.Please refer to https://firebase.google.com/support/privacy/init-options.");

        $r1 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getApiKey()>();

        $z0 = staticinvoke <com.google.firebase.installations.Utils: boolean isValidApiKeyFormat(java.lang.String)>($r1);

        staticinvoke <com.google.android.gms.common.internal.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Please set a valid API key. A Firebase API key is required to communicate with Firebase server APIs: It authenticates your project with Google.Please refer to https://firebase.google.com/support/privacy/init-options.");

        return;
    }

    private java.lang.String readExistingIidOrCreateFid(com.google.firebase.installations.local.PersistedInstallationEntry)
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.installations.RandomFidGenerator $r4;
        com.google.firebase.installations.local.IidStore $r5;
        com.google.firebase.installations.local.PersistedInstallationEntry $r1;
        java.lang.String $r3;
        com.google.firebase.FirebaseApp $r2;
        boolean $z0;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 := @parameter0: com.google.firebase.installations.local.PersistedInstallationEntry;

        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.FirebaseApp firebaseApp>;

        $r3 = virtualinvoke $r2.<com.google.firebase.FirebaseApp: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("CHIME_ANDROID_SDK");

        if $z0 != 0 goto label1;

        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.FirebaseApp firebaseApp>;

        $z0 = virtualinvoke $r2.<com.google.firebase.FirebaseApp: boolean isDefaultApp()>();

        if $z0 == 0 goto label2;

     label1:
        $z0 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: boolean shouldAttemptMigration()>();

        if $z0 != 0 goto label3;

     label2:
        $r4 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.RandomFidGenerator fidGenerator>;

        $r3 = virtualinvoke $r4.<com.google.firebase.installations.RandomFidGenerator: java.lang.String createRandomFid()>();

        return $r3;

     label3:
        $r5 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.IidStore iidStore>;

        $r3 = virtualinvoke $r5.<com.google.firebase.installations.local.IidStore: java.lang.String readIid()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 == 0 goto label4;

        $r4 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.RandomFidGenerator fidGenerator>;

        $r3 = virtualinvoke $r4.<com.google.firebase.installations.RandomFidGenerator: java.lang.String createRandomFid()>();

     label4:
        return $r3;
    }

    private com.google.firebase.installations.local.PersistedInstallationEntry registerFidWithServer(com.google.firebase.installations.local.PersistedInstallationEntry)
    {
        long $l1, $l2;
        com.google.firebase.installations.FirebaseInstallationsException $r12;
        com.google.firebase.installations.FirebaseInstallationsException$Status $r13;
        com.google.firebase.installations.remote.FirebaseInstallationServiceClient $r4;
        int[] $r10;
        int $i0;
        java.lang.String $r2, $r5, $r6, $r7, $r8;
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.installations.remote.InstallationResponse $r9;
        com.google.firebase.installations.local.IidStore $r3;
        com.google.firebase.installations.Utils $r14;
        com.google.firebase.installations.remote.TokenResult $r15;
        com.google.firebase.installations.local.PersistedInstallationEntry $r1;
        com.google.firebase.installations.remote.InstallationResponse$ResponseCode $r11;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 := @parameter0: com.google.firebase.installations.local.PersistedInstallationEntry;

        $r2 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: java.lang.String getFirebaseInstallationId()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: java.lang.String getFirebaseInstallationId()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 11 goto label1;

        $r3 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.local.IidStore iidStore>;

        $r2 = virtualinvoke $r3.<com.google.firebase.installations.local.IidStore: java.lang.String readToken()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        $r4 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.remote.FirebaseInstallationServiceClient serviceClient>;

        $r5 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getApiKey()>();

        $r6 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: java.lang.String getFirebaseInstallationId()>();

        $r7 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getProjectIdentifier()>();

        $r8 = virtualinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getApplicationId()>();

        $r9 = virtualinvoke $r4.<com.google.firebase.installations.remote.FirebaseInstallationServiceClient: com.google.firebase.installations.remote.InstallationResponse createFirebaseInstallation(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r5, $r6, $r7, $r8, $r2);

        $r10 = <com.google.firebase.installations.FirebaseInstallations$2: int[] $SwitchMap$com$google$firebase$installations$remote$InstallationResponse$ResponseCode>;

        $r11 = virtualinvoke $r9.<com.google.firebase.installations.remote.InstallationResponse: com.google.firebase.installations.remote.InstallationResponse$ResponseCode getResponseCode()>();

        $i0 = virtualinvoke $r11.<java.lang.Enum: int ordinal()>();

        $i0 = $r10[$i0];

        if $i0 == 1 goto label4;

        if $i0 != 2 goto label3;

        $r1 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: com.google.firebase.installations.local.PersistedInstallationEntry withFisError(java.lang.String)>("BAD CONFIG");

        return $r1;

     label3:
        $r12 = new com.google.firebase.installations.FirebaseInstallationsException;

        $r13 = <com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status UNAVAILABLE>;

        specialinvoke $r12.<com.google.firebase.installations.FirebaseInstallationsException: void <init>(java.lang.String,com.google.firebase.installations.FirebaseInstallationsException$Status)>("Firebase Installations Service is unavailable. Please try again later.", $r13);

        throw $r12;

     label4:
        $r2 = virtualinvoke $r9.<com.google.firebase.installations.remote.InstallationResponse: java.lang.String getFid()>();

        $r5 = virtualinvoke $r9.<com.google.firebase.installations.remote.InstallationResponse: java.lang.String getRefreshToken()>();

        $r14 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.installations.Utils utils>;

        $l1 = virtualinvoke $r14.<com.google.firebase.installations.Utils: long currentTimeInSecs()>();

        $r15 = virtualinvoke $r9.<com.google.firebase.installations.remote.InstallationResponse: com.google.firebase.installations.remote.TokenResult getAuthToken()>();

        $r6 = virtualinvoke $r15.<com.google.firebase.installations.remote.TokenResult: java.lang.String getToken()>();

        $r15 = virtualinvoke $r9.<com.google.firebase.installations.remote.InstallationResponse: com.google.firebase.installations.remote.TokenResult getAuthToken()>();

        $l2 = virtualinvoke $r15.<com.google.firebase.installations.remote.TokenResult: long getTokenExpirationTimestamp()>();

        $r1 = virtualinvoke $r1.<com.google.firebase.installations.local.PersistedInstallationEntry: com.google.firebase.installations.local.PersistedInstallationEntry withRegisteredFid(java.lang.String,java.lang.String,long,java.lang.String,long)>($r2, $r5, $l1, $r6, $l2);

        return $r1;
    }

    private void triggerOnException(com.google.firebase.installations.local.PersistedInstallationEntry, java.lang.Exception)
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        java.lang.Throwable $r8;
        java.util.Iterator $r5;
        java.lang.Exception $r1;
        java.util.List $r4;
        java.lang.Object $r2, $r6;
        com.google.firebase.installations.local.PersistedInstallationEntry $r3;
        com.google.firebase.installations.StateListener $r7;
        boolean $z0;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r3 := @parameter0: com.google.firebase.installations.local.PersistedInstallationEntry;

        $r1 := @parameter1: java.lang.Exception;

        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.Object lock>;

        entermonitor $r2;

     label1:
        $r4 = r0.<com.google.firebase.installations.FirebaseInstallations: java.util.List listeners>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.google.firebase.installations.StateListener) $r6;

        $z0 = interfaceinvoke $r7.<com.google.firebase.installations.StateListener: boolean onException(com.google.firebase.installations.local.PersistedInstallationEntry,java.lang.Exception)>($r3, $r1);

        if $z0 == 0 goto label2;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        goto label2;

     label3:
        exitmonitor $r2;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r2;

     label6:
        goto label7;

     label7:
        throw $r8;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void triggerOnStateReached(com.google.firebase.installations.local.PersistedInstallationEntry)
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        java.lang.Throwable $r7;
        java.util.Iterator $r4;
        java.util.List $r3;
        java.lang.Object $r1, $r5;
        com.google.firebase.installations.local.PersistedInstallationEntry $r2;
        com.google.firebase.installations.StateListener $r6;
        boolean $z0;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r2 := @parameter0: com.google.firebase.installations.local.PersistedInstallationEntry;

        $r1 = r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        $r3 = r0.<com.google.firebase.installations.FirebaseInstallations: java.util.List listeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.firebase.installations.StateListener) $r5;

        $z0 = interfaceinvoke $r6.<com.google.firebase.installations.StateListener: boolean onStateReached(com.google.firebase.installations.local.PersistedInstallationEntry)>($r2);

        if $z0 == 0 goto label2;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        goto label2;

     label3:
        exitmonitor $r1;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label6:
        goto label7;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void updateCacheFid(java.lang.String)
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        java.lang.Throwable $r2;
        java.lang.String $r1;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String cachedFid> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public com.google.android.gms.tasks.Task delete()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        java.util.concurrent.Callable $r2;
        java.util.concurrent.ExecutorService $r1;
        com.google.android.gms.tasks.Task $r3;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 = r0.<com.google.firebase.installations.FirebaseInstallations: java.util.concurrent.ExecutorService backgroundExecutor>;

        $r2 = staticinvoke <com.google.firebase.installations.FirebaseInstallations$$Lambda$3: java.util.concurrent.Callable lambdaFactory$(com.google.firebase.installations.FirebaseInstallations)>(r0);

        $r3 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task call(java.util.concurrent.Executor,java.util.concurrent.Callable)>($r1, $r2);

        return $r3;
    }

    public java.lang.String getApiKey()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.FirebaseOptions $r2;
        java.lang.String $r3;
        com.google.firebase.FirebaseApp $r1;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.FirebaseApp firebaseApp>;

        $r2 = virtualinvoke $r1.<com.google.firebase.FirebaseApp: com.google.firebase.FirebaseOptions getOptions()>();

        $r3 = virtualinvoke $r2.<com.google.firebase.FirebaseOptions: java.lang.String getApiKey()>();

        return $r3;
    }

    public java.lang.String getApplicationId()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.FirebaseOptions $r2;
        java.lang.String $r3;
        com.google.firebase.FirebaseApp $r1;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.FirebaseApp firebaseApp>;

        $r2 = virtualinvoke $r1.<com.google.firebase.FirebaseApp: com.google.firebase.FirebaseOptions getOptions()>();

        $r3 = virtualinvoke $r2.<com.google.firebase.FirebaseOptions: java.lang.String getApplicationId()>();

        return $r3;
    }

    public com.google.android.gms.tasks.Task getId()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        java.lang.String $r2;
        java.lang.Runnable $r4;
        java.util.concurrent.ExecutorService $r1;
        com.google.android.gms.tasks.Task $r3;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void preConditionChecks()>();

        $r2 = specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: java.lang.String getCacheFid()>();

        if $r2 == null goto label1;

        $r3 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task forResult(java.lang.Object)>($r2);

        return $r3;

     label1:
        $r3 = specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: com.google.android.gms.tasks.Task addGetIdListener()>();

        $r1 = r0.<com.google.firebase.installations.FirebaseInstallations: java.util.concurrent.ExecutorService backgroundExecutor>;

        $r4 = staticinvoke <com.google.firebase.installations.FirebaseInstallations$$Lambda$1: java.lang.Runnable lambdaFactory$(com.google.firebase.installations.FirebaseInstallations)>(r0);

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r4);

        return $r3;
    }

    public java.lang.String getName()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        java.lang.String $r1;
        com.google.firebase.FirebaseApp $r2;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r2 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.FirebaseApp firebaseApp>;

        $r1 = virtualinvoke $r2.<com.google.firebase.FirebaseApp: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.String getProjectIdentifier()
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        com.google.firebase.FirebaseOptions $r2;
        java.lang.String $r3;
        com.google.firebase.FirebaseApp $r1;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $r1 = r0.<com.google.firebase.installations.FirebaseInstallations: com.google.firebase.FirebaseApp firebaseApp>;

        $r2 = virtualinvoke $r1.<com.google.firebase.FirebaseApp: com.google.firebase.FirebaseOptions getOptions()>();

        $r3 = virtualinvoke $r2.<com.google.firebase.FirebaseOptions: java.lang.String getProjectId()>();

        return $r3;
    }

    public com.google.android.gms.tasks.Task getToken(boolean)
    {
        com.google.firebase.installations.FirebaseInstallations r0;
        java.lang.Runnable $r3;
        java.util.concurrent.ExecutorService $r1;
        com.google.android.gms.tasks.Task $r2;
        boolean $z0;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: void preConditionChecks()>();

        $r2 = specialinvoke r0.<com.google.firebase.installations.FirebaseInstallations: com.google.android.gms.tasks.Task addGetAuthTokenListener()>();

        $r1 = r0.<com.google.firebase.installations.FirebaseInstallations: java.util.concurrent.ExecutorService backgroundExecutor>;

        $r3 = staticinvoke <com.google.firebase.installations.FirebaseInstallations$$Lambda$2: java.lang.Runnable lambdaFactory$(com.google.firebase.installations.FirebaseInstallations,boolean)>(r0, $z0);

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r3);

        return $r2;
    }
}
