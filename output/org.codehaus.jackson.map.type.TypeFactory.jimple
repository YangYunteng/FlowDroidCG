public final class org.codehaus.jackson.map.type.TypeFactory extends java.lang.Object
{
    public static final org.codehaus.jackson.type.JavaType[] NO_TYPES;
    public static final org.codehaus.jackson.map.type.TypeFactory instance;
    public final org.codehaus.jackson.map.type.TypeModifier[] _modifiers;
    public final org.codehaus.jackson.map.type.TypeParser _parser;

    static void <clinit>()
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.type.JavaType[] $r1;

        $r0 = new org.codehaus.jackson.map.type.TypeFactory;

        specialinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: void <init>()>();

        <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance> = $r0;

        $r1 = newarray (org.codehaus.jackson.type.JavaType)[0];

        <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] NO_TYPES> = $r1;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.TypeParser $r1;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.codehaus.jackson.map.type.TypeParser;

        specialinvoke $r1.<org.codehaus.jackson.map.type.TypeParser: void <init>(org.codehaus.jackson.map.type.TypeFactory)>(r0);

        r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeParser _parser> = $r1;

        r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeModifier[] _modifiers> = null;

        return;
    }

    public void <init>(org.codehaus.jackson.map.type.TypeParser, org.codehaus.jackson.map.type.TypeModifier[])
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.TypeParser $r1;
        org.codehaus.jackson.map.type.TypeModifier[] $r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.type.TypeParser;

        $r2 := @parameter1: org.codehaus.jackson.map.type.TypeModifier[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeParser _parser> = $r1;

        r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeModifier[] _modifiers> = $r2;

        return;
    }

    private org.codehaus.jackson.type.JavaType _collectionType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.CollectionType $r4;
        org.codehaus.jackson.type.JavaType[] $r2;
        java.lang.IllegalArgumentException $r5;
        org.codehaus.jackson.map.type.TypeFactory r0;
        int $i0;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r1;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class)>($r1, class "Ljava/util/Collection;");

        if $r2 != null goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        $r4 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>($r1, $r3);

        return $r4;

     label1:
        $i0 = lengthof $r2;

        if $i0 != 1 goto label2;

        $r3 = $r2[0];

        $r4 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>($r1, $r3);

        return $r4;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Strange Collection type ");

        $r7 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": can not determine type parameters");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;
    }

    public static org.codehaus.jackson.map.type.HierarchicType _findSuperClassChain(java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.reflect.Type $r2;
        java.lang.Class $r0, $r3;
        org.codehaus.jackson.map.type.HierarchicType $r1, $r4;

        $r2 := @parameter0: java.lang.reflect.Type;

        $r0 := @parameter1: java.lang.Class;

        $r1 = new org.codehaus.jackson.map.type.HierarchicType;

        specialinvoke $r1.<org.codehaus.jackson.map.type.HierarchicType: void <init>(java.lang.reflect.Type)>($r2);

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class getRawClass()>();

        if $r3 != $r0 goto label1;

        return $r1;

     label1:
        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        if $r2 == null goto label2;

        $r4 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperClassChain(java.lang.reflect.Type,java.lang.Class)>($r2, $r0);

        if $r4 == null goto label2;

        virtualinvoke $r4.<org.codehaus.jackson.map.type.HierarchicType: void setSubType(org.codehaus.jackson.map.type.HierarchicType)>($r1);

        virtualinvoke $r1.<org.codehaus.jackson.map.type.HierarchicType: void setSuperType(org.codehaus.jackson.map.type.HierarchicType)>($r4);

        return $r1;

     label2:
        return null;
    }

    public static org.codehaus.jackson.map.type.HierarchicType _findSuperInterfaceChain(java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.reflect.Type $r2;
        int $i0, $i1;
        java.lang.reflect.Type[] $r4;
        java.lang.Class $r0, $r3;
        org.codehaus.jackson.map.type.HierarchicType $r1, $r5;

        $r2 := @parameter0: java.lang.reflect.Type;

        $r0 := @parameter1: java.lang.Class;

        $r1 = new org.codehaus.jackson.map.type.HierarchicType;

        specialinvoke $r1.<org.codehaus.jackson.map.type.HierarchicType: void <init>(java.lang.reflect.Type)>($r2);

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class getRawClass()>();

        if $r3 != $r0 goto label1;

        return $r1;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        if $r4 == null goto label4;

        $i0 = lengthof $r4;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r2 = $r4[$i1];

        $r5 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperInterfaceChain(java.lang.reflect.Type,java.lang.Class)>($r2, $r0);

        if $r5 == null goto label3;

        virtualinvoke $r5.<org.codehaus.jackson.map.type.HierarchicType: void setSubType(org.codehaus.jackson.map.type.HierarchicType)>($r1);

        virtualinvoke $r1.<org.codehaus.jackson.map.type.HierarchicType: void setSuperType(org.codehaus.jackson.map.type.HierarchicType)>($r5);

        return $r1;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        if $r2 == null goto label5;

        $r5 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperInterfaceChain(java.lang.reflect.Type,java.lang.Class)>($r2, $r0);

        if $r5 == null goto label5;

        virtualinvoke $r5.<org.codehaus.jackson.map.type.HierarchicType: void setSubType(org.codehaus.jackson.map.type.HierarchicType)>($r1);

        virtualinvoke $r1.<org.codehaus.jackson.map.type.HierarchicType: void setSuperType(org.codehaus.jackson.map.type.HierarchicType)>($r5);

        return $r1;

     label5:
        return null;
    }

    public static org.codehaus.jackson.map.type.HierarchicType _findSuperTypeChain(java.lang.Class, java.lang.Class)
    {
        java.lang.Class $r0, $r1;
        org.codehaus.jackson.map.type.HierarchicType $r2;
        boolean $z0;

        $r1 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperInterfaceChain(java.lang.reflect.Type,java.lang.Class)>($r1, $r0);

        return $r2;

     label1:
        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperClassChain(java.lang.reflect.Type,java.lang.Class)>($r1, $r0);

        return $r2;
    }

    private org.codehaus.jackson.type.JavaType _mapType(java.lang.Class)
    {
        org.codehaus.jackson.type.JavaType[] $r2;
        java.lang.IllegalArgumentException $r6;
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.MapType $r5;
        int $i0;
        org.codehaus.jackson.type.JavaType $r3, $r4;
        java.lang.Class $r1;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class)>($r1, class "Ljava/util/Map;");

        if $r2 != null goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        $r5 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r3, $r4);

        return $r5;

     label1:
        $i0 = lengthof $r2;

        if $i0 != 2 goto label2;

        $r3 = $r2[0];

        $r4 = $r2[1];

        $r5 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r3, $r4);

        return $r5;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Strange Map type ");

        $r8 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": can not determine type parameters");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;
    }

    public static org.codehaus.jackson.type.JavaType arrayType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r1;
        org.codehaus.jackson.map.type.ArrayType $r3;

        $r1 := @parameter0: java.lang.Class;

        $r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r1);

        $r3 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.ArrayType constructArrayType(org.codehaus.jackson.type.JavaType)>($r2);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType arrayType(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.type.ArrayType $r1;

        $r2 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.ArrayType constructArrayType(org.codehaus.jackson.type.JavaType)>($r2);

        return $r1;
    }

    public static org.codehaus.jackson.type.JavaType collectionType(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.map.type.CollectionType $r4;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r1, $r2;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.Class;

        $r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r2);

        $r4 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class,org.codehaus.jackson.type.JavaType)>($r1, $r3);

        return $r4;
    }

    public static org.codehaus.jackson.type.JavaType collectionType(java.lang.Class, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.map.type.CollectionType $r2;
        org.codehaus.jackson.type.JavaType $r0;
        java.lang.Class $r3;

        $r3 := @parameter0: java.lang.Class;

        $r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class,org.codehaus.jackson.type.JavaType)>($r3, $r0);

        return $r2;
    }

    public static org.codehaus.jackson.map.type.TypeFactory defaultInstance()
    {
        org.codehaus.jackson.map.type.TypeFactory r0;

        r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        return r0;
    }

    public static org.codehaus.jackson.type.JavaType fastSimpleType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class $r2;

        $r2 := @parameter0: java.lang.Class;

        $r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType uncheckedSimpleType(java.lang.Class)>($r2);

        return $r1;
    }

    public static org.codehaus.jackson.type.JavaType[] findParameterTypes(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        java.lang.Class $r0, $r3;
        org.codehaus.jackson.type.JavaType[] $r2;

        $r3 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.Class;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class)>($r3, $r0);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType[] findParameterTypes(java.lang.Class, java.lang.Class, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        java.lang.Class $r0, $r4;
        org.codehaus.jackson.map.type.TypeBindings $r1;
        org.codehaus.jackson.type.JavaType[] $r3;

        $r4 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.Class;

        $r1 := @parameter2: org.codehaus.jackson.map.type.TypeBindings;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>($r4, $r0, $r1);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType[] findParameterTypes(org.codehaus.jackson.type.JavaType, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r0;
        org.codehaus.jackson.type.JavaType[] $r2;

        $r3 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r0 := @parameter1: java.lang.Class;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r3, $r0);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType fromCanonical(java.lang.String)
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.String $r2;

        $r2 := @parameter0: java.lang.String;

        $r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructFromCanonical(java.lang.String)>($r2);

        return $r1;
    }

    public static org.codehaus.jackson.type.JavaType fromClass(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class $r2;

        $r2 := @parameter0: java.lang.Class;

        $r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>($r2, null);

        return $r1;
    }

    public static org.codehaus.jackson.type.JavaType fromType(java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.reflect.Type $r2;

        $r2 := @parameter0: java.lang.reflect.Type;

        $r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r2, null);

        return $r1;
    }

    public static org.codehaus.jackson.type.JavaType fromTypeReference(org.codehaus.jackson.type.TypeReference)
    {
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.reflect.Type $r1;
        org.codehaus.jackson.type.TypeReference $r0;

        $r0 := @parameter0: org.codehaus.jackson.type.TypeReference;

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.type.TypeReference: java.lang.reflect.Type getType()>();

        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>($r1);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType mapType(java.lang.Class, java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r0, $r1;
        org.codehaus.jackson.map.type.MapType $r7;
        org.codehaus.jackson.type.JavaType $r5, $r6;
        java.lang.Class $r2, $r3, $r4;

        $r2 := @parameter0: java.lang.Class;

        $r3 := @parameter1: java.lang.Class;

        $r4 := @parameter2: java.lang.Class;

        $r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r5 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>($r3);

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r4);

        $r7 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r2, $r5, $r6);

        return $r7;
    }

    public static org.codehaus.jackson.type.JavaType mapType(java.lang.Class, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        org.codehaus.jackson.map.type.MapType $r3;
        org.codehaus.jackson.type.JavaType $r0, $r1;
        java.lang.Class $r4;

        $r4 := @parameter0: java.lang.Class;

        $r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r2 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r4, $r0, $r1);

        return $r3;
    }

    public static transient org.codehaus.jackson.type.JavaType parametricType(java.lang.Class, java.lang.Class[])
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        java.lang.Class[] $r0;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r3;

        $r3 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.Class[];

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructParametricType(java.lang.Class,java.lang.Class[])>($r3, $r0);

        return $r2;
    }

    public static transient org.codehaus.jackson.type.JavaType parametricType(java.lang.Class, org.codehaus.jackson.type.JavaType[])
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r3;
        org.codehaus.jackson.type.JavaType[] $r0;

        $r3 := @parameter0: java.lang.Class;

        $r0 := @parameter1: org.codehaus.jackson.type.JavaType[];

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructParametricType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>($r3, $r0);

        return $r2;
    }

    public static java.lang.Class rawClass(java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        java.lang.reflect.Type $r0;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.reflect.Type;

        $z0 = $r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Class) $r0;

        return $r1;

     label1:
        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory defaultInstance()>();

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r0);

        $r1 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        return $r1;
    }

    public static org.codehaus.jackson.type.JavaType specialize(org.codehaus.jackson.type.JavaType, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r0;

        $r2 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r0 := @parameter1: java.lang.Class;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r2, $r0);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.reflect.Type $r2;

        $r2 := @parameter0: java.lang.reflect.Type;

        $r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r2, null);

        return $r1;
    }

    public static org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        java.lang.reflect.Type $r3;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r0;

        $r3 := @parameter0: java.lang.reflect.Type;

        $r0 := @parameter1: java.lang.Class;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type,java.lang.Class)>($r3, $r0);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        java.lang.reflect.Type $r3;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.type.TypeBindings $r0;

        $r3 := @parameter0: java.lang.reflect.Type;

        $r0 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r3, $r0);

        return $r2;
    }

    public static org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.type.JavaType $r0;
        java.lang.reflect.Type $r2;

        $r2 := @parameter0: java.lang.reflect.Type;

        $r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r0 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type,org.codehaus.jackson.type.JavaType)>($r2, $r0);

        return $r0;
    }

    public static org.codehaus.jackson.type.JavaType type(org.codehaus.jackson.type.TypeReference)
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.type.TypeReference $r1;
        org.codehaus.jackson.type.JavaType $r3;

        $r1 := @parameter0: org.codehaus.jackson.type.TypeReference;

        $r0 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.type.TypeReference: java.lang.reflect.Type getType()>();

        $r3 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r2);

        return $r3;
    }

    public static org.codehaus.jackson.type.JavaType unknownType()
    {
        org.codehaus.jackson.map.type.TypeFactory $r0;
        org.codehaus.jackson.type.JavaType $r1;

        $r0 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory defaultInstance()>();

        $r1 = virtualinvoke $r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        return $r1;
    }

    public org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type, org.codehaus.jackson.map.type.TypeBindings)
    {
        java.lang.reflect.GenericArrayType $r7;
        java.lang.reflect.WildcardType $r9;
        org.codehaus.jackson.map.type.TypeBindings $r3;
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.TypeModifier $r1;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r5;
        java.lang.String $r13;
        boolean $z0;
        org.codehaus.jackson.map.type.TypeModifier[] $r10;
        java.lang.reflect.TypeVariable $r8;
        java.lang.IllegalArgumentException $r11;
        java.lang.reflect.ParameterizedType $r6;
        java.lang.reflect.Type $r2;
        java.lang.Class $r4;
        java.lang.StringBuilder $r12;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r2 := @parameter0: java.lang.reflect.Type;

        $r3 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label02;

        $r4 = (java.lang.Class) $r2;

        if $r3 != null goto label01;

        $r3 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r3.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,java.lang.Class)>(r0, $r4);

     label01:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>($r4, $r3);

        goto label06;

     label02:
        $z0 = $r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label03;

        $r6 = (java.lang.reflect.ParameterizedType) $r2;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromParamType(java.lang.reflect.ParameterizedType,org.codehaus.jackson.map.type.TypeBindings)>($r6, $r3);

        goto label06;

     label03:
        $z0 = $r2 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label04;

        $r7 = (java.lang.reflect.GenericArrayType) $r2;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromArrayType(java.lang.reflect.GenericArrayType,org.codehaus.jackson.map.type.TypeBindings)>($r7, $r3);

        goto label06;

     label04:
        $z0 = $r2 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label05;

        $r8 = (java.lang.reflect.TypeVariable) $r2;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromVariable(java.lang.reflect.TypeVariable,org.codehaus.jackson.map.type.TypeBindings)>($r8, $r3);

        goto label06;

     label05:
        $z0 = $r2 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label09;

        $r9 = (java.lang.reflect.WildcardType) $r2;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromWildcard(java.lang.reflect.WildcardType,org.codehaus.jackson.map.type.TypeBindings)>($r9, $r3);

     label06:
        $r10 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeModifier[] _modifiers>;

        if $r10 == null goto label08;

        $z0 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 != 0 goto label11;

        $r10 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeModifier[] _modifiers>;

        $i0 = lengthof $r10;

        $i1 = 0;

     label07:
        if $i1 >= $i0 goto label11;

        $r1 = $r10[$i1];

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeModifier: org.codehaus.jackson.type.JavaType modifyType(org.codehaus.jackson.type.JavaType,java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings,org.codehaus.jackson.map.type.TypeFactory)>($r5, $r2, $r3, r0);

        $i1 = $i1 + 1;

        goto label07;

     label08:
        return $r5;

     label09:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized Type: ");

        $r13 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        goto label10;

     label10:
        throw $r11;

     label11:
        return $r5;
    }

    public org.codehaus.jackson.type.JavaType _fromArrayType(java.lang.reflect.GenericArrayType, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.GenericArrayType $r2;
        java.lang.reflect.Type $r3;
        org.codehaus.jackson.type.JavaType $r4;
        org.codehaus.jackson.map.type.TypeBindings $r1;
        org.codehaus.jackson.map.type.ArrayType $r5;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r2 := @parameter0: java.lang.reflect.GenericArrayType;

        $r1 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r3, $r1);

        $r5 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType)>($r4);

        return $r5;
    }

    public org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.SimpleType $r5;
        org.codehaus.jackson.map.type.TypeBindings $r2;
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r1, $r6;
        org.codehaus.jackson.map.type.ArrayType $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r1, null);

        $r4 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType)>($r3);

        return $r4;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isEnum()>();

        if $z0 == 0 goto label2;

        $r5 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r5.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>($r1);

        return $r5;

     label2:
        $r6 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label3;

        $r3 = specialinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _mapType(java.lang.Class)>($r1);

        return $r3;

     label3:
        $r6 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label4;

        $r3 = specialinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _collectionType(java.lang.Class)>($r1);

        return $r3;

     label4:
        $r5 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r5.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>($r1);

        return $r5;
    }

    public org.codehaus.jackson.type.JavaType _fromParamType(java.lang.reflect.ParameterizedType, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.SimpleType $r15;
        org.codehaus.jackson.map.type.TypeBindings $r2;
        org.codehaus.jackson.map.type.TypeFactory r0;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r7, $r9;
        java.lang.String $r13;
        boolean $z0;
        org.codehaus.jackson.map.type.CollectionType $r14;
        org.codehaus.jackson.type.JavaType[] $r6;
        java.lang.IllegalArgumentException $r11;
        java.lang.reflect.ParameterizedType $r1;
        java.lang.reflect.Type $r3;
        org.codehaus.jackson.map.type.MapType $r10;
        java.lang.reflect.Type[] $r5;
        java.lang.Class $r4, $r8;
        java.lang.StringBuilder $r12;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.reflect.ParameterizedType;

        $r2 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r3 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r4 = (java.lang.Class) $r3;

        $r5 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        if $r5 != null goto label01;

        $i0 = 0;

        goto label02;

     label01:
        $i0 = lengthof $r5;

     label02:
        if $i0 != 0 goto label03;

        $r6 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] NO_TYPES>;

        goto label05;

     label03:
        $r6 = newarray (org.codehaus.jackson.type.JavaType)[$i0];

        $i1 = 0;

     label04:
        if $i1 >= $i0 goto label05;

        $r3 = $r5[$i1];

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r3, $r2);

        $r6[$i1] = $r7;

        $i1 = $i1 + 1;

        goto label04;

     label05:
        $r8 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label07;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>($r4, $r6);

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r7, class "Ljava/util/Map;");

        $i0 = lengthof $r6;

        if $i0 != 2 goto label06;

        $r7 = $r6[0];

        $r9 = $r6[1];

        $r10 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r4, $r7, $r9);

        return $r10;

     label06:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find 2 type parameters for Map class ");

        $r13 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (found ");

        $i0 = lengthof $r6;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r11;

     label07:
        $r8 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label09;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>($r4, $r6);

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r7, class "Ljava/util/Collection;");

        $i0 = lengthof $r6;

        if $i0 != 1 goto label08;

        $r7 = $r6[0];

        $r14 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>($r4, $r7);

        return $r14;

     label08:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find 1 type parameter for Collection class ");

        $r13 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (found ");

        $i0 = lengthof $r6;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r11;

     label09:
        if $i0 != 0 goto label10;

        $r15 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r15.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>($r4);

        return $r15;

     label10:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>($r4, $r6);

        return $r7;
    }

    public org.codehaus.jackson.type.JavaType _fromParameterizedClass(java.lang.Class, java.util.List)
    {
        java.lang.Object[] $r12;
        org.codehaus.jackson.map.type.SimpleType $r5;
        org.codehaus.jackson.map.type.CollectionType $r10;
        org.codehaus.jackson.type.JavaType[] $r11;
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.util.List $r2;
        org.codehaus.jackson.map.type.MapType $r9;
        int $i0;
        org.codehaus.jackson.type.JavaType $r3, $r8;
        java.lang.Class $r1, $r6;
        java.lang.Object $r7;
        org.codehaus.jackson.map.type.ArrayType $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.util.List;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r1, null);

        $r4 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType)>($r3);

        return $r4;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isEnum()>();

        if $z0 == 0 goto label2;

        $r5 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r5.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>($r1);

        return $r5;

     label2:
        $r6 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label6;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label5;

        $r7 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.codehaus.jackson.type.JavaType) $r7;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 < 2 goto label3;

        $r7 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(1);

        $r8 = (org.codehaus.jackson.type.JavaType) $r7;

        goto label4;

     label3:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

     label4:
        $r9 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r3, $r8);

        return $r9;

     label5:
        $r3 = specialinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _mapType(java.lang.Class)>($r1);

        return $r3;

     label6:
        $r6 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label8;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 < 1 goto label7;

        $r7 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.codehaus.jackson.type.JavaType) $r7;

        $r10 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>($r1, $r3);

        return $r10;

     label7:
        $r3 = specialinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _collectionType(java.lang.Class)>($r1);

        return $r3;

     label8:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label9;

        $r5 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r5.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>($r1);

        return $r5;

     label9:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r11 = newarray (org.codehaus.jackson.type.JavaType)[$i0];

        $r12 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r11 = (org.codehaus.jackson.type.JavaType[]) $r12;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>($r1, $r11);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType _fromVariable(java.lang.reflect.TypeVariable, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.Type $r6;
        java.lang.reflect.TypeVariable $r2;
        java.lang.reflect.Type[] $r5;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.type.TypeBindings $r1;
        java.lang.String $r4;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r2 := @parameter0: java.lang.reflect.TypeVariable;

        $r1 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        return $r3;

     label1:
        $r4 = interfaceinvoke $r2.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType findType(java.lang.String)>($r4);

        if $r3 == null goto label2;

        return $r3;

     label2:
        $r5 = interfaceinvoke $r2.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeBindings: void _addPlaceholder(java.lang.String)>($r4);

        $r6 = $r5[0];

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r6, $r1);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType _fromWildcard(java.lang.reflect.WildcardType, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.Type $r4;
        java.lang.reflect.WildcardType $r2;
        java.lang.reflect.Type[] $r3;
        org.codehaus.jackson.type.JavaType $r5;
        org.codehaus.jackson.map.type.TypeBindings $r1;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r2 := @parameter0: java.lang.reflect.WildcardType;

        $r1 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r4 = $r3[0];

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r4, $r1);

        return $r5;
    }

    public org.codehaus.jackson.type.JavaType _resolveVariableViaSubTypes(org.codehaus.jackson.map.type.HierarchicType, java.lang.String, org.codehaus.jackson.map.type.TypeBindings)
    {
        java.lang.reflect.TypeVariable $r6;
        org.codehaus.jackson.map.type.TypeBindings $r1;
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.ParameterizedType $r8;
        java.lang.reflect.Type $r10;
        java.lang.reflect.TypeVariable[] $r5;
        int $i0, $i1;
        java.lang.reflect.Type[] $r9;
        org.codehaus.jackson.type.JavaType $r11;
        org.codehaus.jackson.map.type.HierarchicType $r2;
        java.lang.Class $r4;
        java.lang.String $r3, $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r2 := @parameter0: org.codehaus.jackson.map.type.HierarchicType;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: org.codehaus.jackson.map.type.TypeBindings;

        if $r2 == null goto label4;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.type.HierarchicType: boolean isGeneric()>();

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class getRawClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i1 = 0;

        $i0 = lengthof $r5;

     label1:
        if $i1 >= $i0 goto label4;

        $r6 = $r5[$i1];

        $r7 = interfaceinvoke $r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType asGeneric()>();

        $r9 = interfaceinvoke $r8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r10 = $r9[$i1];

        $z0 = $r10 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType getSubType()>();

        $r6 = (java.lang.reflect.TypeVariable) $r10;

        $r3 = interfaceinvoke $r6.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _resolveVariableViaSubTypes(org.codehaus.jackson.map.type.HierarchicType,java.lang.String,org.codehaus.jackson.map.type.TypeBindings)>($r2, $r3, $r1);

        return $r11;

     label2:
        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r10, $r1);

        return $r11;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _unknownType()>();

        return $r11;
    }

    public org.codehaus.jackson.type.JavaType _unknownType()
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.SimpleType $r1;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r1.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[])>(class "Ljava/lang/Object;", null, null);

        return $r1;
    }

    public org.codehaus.jackson.map.type.ArrayType constructArrayType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r1;
        org.codehaus.jackson.map.type.ArrayType $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r1, null);

        $r3 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType)>($r2);

        return $r3;
    }

    public org.codehaus.jackson.map.type.ArrayType constructArrayType(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.type.ArrayType $r1;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r2 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 = staticinvoke <org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.map.type.ArrayType construct(org.codehaus.jackson.type.JavaType)>($r2);

        return $r1;
    }

    public org.codehaus.jackson.map.type.CollectionLikeType constructCollectionLikeType(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.CollectionLikeType $r4;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r1, $r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r2);

        $r4 = staticinvoke <org.codehaus.jackson.map.type.CollectionLikeType: org.codehaus.jackson.map.type.CollectionLikeType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>($r1, $r3);

        return $r4;
    }

    public org.codehaus.jackson.map.type.CollectionLikeType constructCollectionLikeType(java.lang.Class, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.CollectionLikeType $r2;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r3 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 = staticinvoke <org.codehaus.jackson.map.type.CollectionLikeType: org.codehaus.jackson.map.type.CollectionLikeType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>($r3, $r1);

        return $r2;
    }

    public org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.CollectionType $r4;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r1, $r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r2);

        $r4 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>($r1, $r3);

        return $r4;
    }

    public org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.CollectionType $r2;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r3 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 = staticinvoke <org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.map.type.CollectionType construct(java.lang.Class,org.codehaus.jackson.type.JavaType)>($r3, $r1);

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType constructFromCanonical(java.lang.String)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.TypeParser $r1;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeParser _parser>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.type.JavaType parse(java.lang.String)>($r3);

        return $r2;
    }

    public org.codehaus.jackson.map.type.MapLikeType constructMapLikeType(java.lang.Class, java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.MapType $r6;
        org.codehaus.jackson.type.JavaType $r4, $r5;
        java.lang.Class $r1, $r2, $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.Class;

        $r3 := @parameter2: java.lang.Class;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r2);

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r3);

        $r6 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r4, $r5);

        return $r6;
    }

    public org.codehaus.jackson.map.type.MapLikeType constructMapLikeType(java.lang.Class, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.MapLikeType $r3;
        org.codehaus.jackson.type.JavaType $r1, $r2;
        java.lang.Class $r4;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r4 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r3 = staticinvoke <org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.map.type.MapLikeType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r4, $r1, $r2);

        return $r3;
    }

    public org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class, java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.MapType $r6;
        org.codehaus.jackson.type.JavaType $r4, $r5;
        java.lang.Class $r1, $r2, $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.Class;

        $r3 := @parameter2: java.lang.Class;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r2);

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r3);

        $r6 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r4, $r5);

        return $r6;
    }

    public org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.MapType $r3;
        org.codehaus.jackson.type.JavaType $r1, $r2;
        java.lang.Class $r4;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r4 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r3 = staticinvoke <org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType construct(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r4, $r1, $r2);

        return $r3;
    }

    public transient org.codehaus.jackson.type.JavaType constructParametricType(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class[] $r1;
        org.codehaus.jackson.type.JavaType[] $r2;
        org.codehaus.jackson.map.type.TypeFactory r0;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r5;
        java.lang.Class $r3, $r4;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r3 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.Class[];

        $i0 = lengthof $r1;

        $r2 = newarray (org.codehaus.jackson.type.JavaType)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r4 = $r1[$i1];

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>($r4, null);

        $r2[$i1] = $r5;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructParametricType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>($r3, $r2);

        return $r5;
    }

    public transient org.codehaus.jackson.type.JavaType constructParametricType(java.lang.Class, org.codehaus.jackson.type.JavaType[])
    {
        org.codehaus.jackson.map.type.CollectionType $r11;
        org.codehaus.jackson.type.JavaType[] $r2;
        java.lang.IllegalArgumentException $r5;
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.map.type.MapType $r10;
        int $i0;
        org.codehaus.jackson.type.JavaType $r3, $r9;
        java.lang.Class $r1, $r8;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        org.codehaus.jackson.map.type.ArrayType $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType[];

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $i0 = lengthof $r2;

        if $i0 != 1 goto label1;

        $r3 = $r2[0];

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.ArrayType constructArrayType(org.codehaus.jackson.type.JavaType)>($r3);

        return $r4;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need exactly 1 parameter type for arrays (");

        $r7 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label2:
        $r8 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label4;

        $i0 = lengthof $r2;

        if $i0 != 2 goto label3;

        $r3 = $r2[0];

        $r9 = $r2[1];

        $r10 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r3, $r9);

        return $r10;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need exactly 2 parameter types for Map types (");

        $r7 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label4:
        $r8 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label6;

        $i0 = lengthof $r2;

        if $i0 != 1 goto label5;

        $r3 = $r2[0];

        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class,org.codehaus.jackson.type.JavaType)>($r1, $r3);

        return $r11;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need exactly 1 parameter type for Collection types (");

        $r7 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label6:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class,org.codehaus.jackson.type.JavaType[])>($r1, $r2);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType constructSimpleType(java.lang.Class, org.codehaus.jackson.type.JavaType[])
    {
        org.codehaus.jackson.map.type.SimpleType $r7;
        java.lang.reflect.TypeVariable $r5;
        java.lang.String[] $r4;
        org.codehaus.jackson.type.JavaType[] $r1;
        java.lang.IllegalArgumentException $r8;
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.TypeVariable[] $r3;
        int $i0, $i1;
        java.lang.Class $r2;
        java.lang.StringBuilder $r9;
        java.lang.String $r6;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r2 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType[];

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i0 = lengthof $r3;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label3;

        $i0 = lengthof $r3;

        $r4 = newarray (java.lang.String)[$i0];

        $i0 = 0;

        $i1 = lengthof $r3;

     label1:
        if $i0 >= $i1 goto label2;

        $r5 = $r3[$i0];

        $r6 = interfaceinvoke $r5.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r4[$i0] = $r6;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r7 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r7.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[])>($r2, $r4, $r1);

        return $r7;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parameter type mismatch for ");

        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": expected ");

        $i0 = lengthof $r3;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parameters, was given ");

        $i0 = lengthof $r1;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label4;

     label4:
        throw $r8;
    }

    public org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeBindings $r5;
        java.lang.IllegalArgumentException $r8;
        org.codehaus.jackson.map.type.TypeFactory r0, $r4;
        org.codehaus.jackson.type.JavaType $r1, $r6;
        java.lang.Class $r2, $r3;
        java.lang.Object $r7;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: java.lang.Class;

        $z0 = $r1 instanceof org.codehaus.jackson.map.type.SimpleType;

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r3 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 != 0 goto label1;

        $r3 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label4;

     label1:
        $r3 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label3;

        $r4 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r5 = new org.codehaus.jackson.map.type.TypeBindings;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        specialinvoke $r5.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,java.lang.Class)>(r0, $r3);

        $r6 = virtualinvoke $r4.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>($r2, $r5);

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        if $r7 == null goto label2;

        virtualinvoke $r6.<org.codehaus.jackson.type.JavaType: void setValueHandler(java.lang.Object)>($r7);

     label2:
        $r7 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        if $r7 == null goto label5;

        $r1 = virtualinvoke $r6.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)>($r7);

        return $r1;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not subtype of ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label4:
        $r1 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>($r2);

        return $r1;

     label5:
        return $r6;
    }

    public org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.reflect.Type $r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r2 := @parameter0: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r2, null);

        return $r1;
    }

    public org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.Type $r4;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r1;
        org.codehaus.jackson.map.type.TypeBindings $r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r4 := @parameter0: java.lang.reflect.Type;

        $r1 := @parameter1: java.lang.Class;

        $r2 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r2.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,java.lang.Class)>(r0, $r1);

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r4, $r2);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.Type $r3;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.type.TypeBindings $r1;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r3 := @parameter0: java.lang.reflect.Type;

        $r1 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r3, $r1);

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.Type $r3;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.type.TypeBindings $r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r3 := @parameter0: java.lang.reflect.Type;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r2.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.type.JavaType)>(r0, $r1);

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r3, $r2);

        return $r1;
    }

    public org.codehaus.jackson.type.JavaType constructType(org.codehaus.jackson.type.TypeReference)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.type.TypeReference $r1;
        org.codehaus.jackson.type.JavaType $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: org.codehaus.jackson.type.TypeReference;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.type.TypeReference: java.lang.reflect.Type getType()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r2, null);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.Class $r1, $r4;
        org.codehaus.jackson.map.type.TypeBindings $r2;
        org.codehaus.jackson.type.JavaType[] $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r4 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.Class;

        $r2 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r2.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,java.lang.Class)>(r0, $r4);

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>($r4, $r1, $r2);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class, java.lang.Class, org.codehaus.jackson.map.type.TypeBindings)
    {
        org.codehaus.jackson.map.type.TypeBindings $r4, $r7;
        org.codehaus.jackson.map.type.TypeFactory r0, $r13;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r14;
        java.lang.String $r12;
        boolean $z0;
        java.lang.reflect.TypeVariable $r11;
        org.codehaus.jackson.type.JavaType[] $r15;
        java.lang.IllegalArgumentException $r16;
        java.lang.reflect.ParameterizedType $r8;
        java.lang.reflect.Type $r1;
        java.lang.reflect.TypeVariable[] $r10;
        java.lang.reflect.Type[] $r9;
        java.lang.Class $r2, $r3;
        org.codehaus.jackson.map.type.HierarchicType $r5, $r6;
        java.lang.StringBuilder $r17;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r2 := @parameter0: java.lang.Class;

        $r3 := @parameter1: java.lang.Class;

        $r4 := @parameter2: org.codehaus.jackson.map.type.TypeBindings;

        $r5 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.HierarchicType _findSuperTypeChain(java.lang.Class,java.lang.Class)>($r2, $r3);

        $r6 = $r5;

        if $r5 == null goto label6;

     label1:
        $r5 = virtualinvoke $r6.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType getSuperType()>();

        if $r5 == null goto label4;

        $r5 = virtualinvoke $r6.<org.codehaus.jackson.map.type.HierarchicType: org.codehaus.jackson.map.type.HierarchicType getSuperType()>();

        $r6 = $r5;

        $r2 = virtualinvoke $r5.<org.codehaus.jackson.map.type.HierarchicType: java.lang.Class getRawClass()>();

        $r7 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r7.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,java.lang.Class)>(r0, $r2);

        $z0 = virtualinvoke $r5.<org.codehaus.jackson.map.type.HierarchicType: boolean isGeneric()>();

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke $r5.<org.codehaus.jackson.map.type.HierarchicType: java.lang.reflect.ParameterizedType asGeneric()>();

        $r9 = interfaceinvoke $r8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r10 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i0 = lengthof $r9;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r11 = $r10[$i1];

        $r12 = interfaceinvoke $r11.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r13 = <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory instance>;

        $r1 = $r9[$i1];

        $r14 = virtualinvoke $r13.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r1, $r4);

        virtualinvoke $r7.<org.codehaus.jackson.map.type.TypeBindings: void addBinding(java.lang.String,org.codehaus.jackson.type.JavaType)>($r12, $r14);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r4 = $r7;

        goto label1;

     label4:
        $z0 = virtualinvoke $r6.<org.codehaus.jackson.map.type.HierarchicType: boolean isGeneric()>();

        if $z0 != 0 goto label5;

        return null;

     label5:
        $r15 = virtualinvoke $r4.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType[] typesAsArray()>();

        return $r15;

     label6:
        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r12 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a subtype of ");

        $r12 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        goto label7;

     label7:
        throw $r16;
    }

    public org.codehaus.jackson.type.JavaType[] findTypeParameters(org.codehaus.jackson.type.JavaType, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeBindings $r6;
        org.codehaus.jackson.type.JavaType[] $r4;
        org.codehaus.jackson.map.type.TypeFactory r0;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r1, $r5;
        java.lang.Class $r2, $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r3 != $r2 goto label4;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: int containedTypeCount()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r4 = newarray (org.codehaus.jackson.type.JavaType)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType containedType(int)>($i1);

        $r4[$i1] = $r5;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r4;

     label4:
        $r6 = new org.codehaus.jackson.map.type.TypeBindings;

        specialinvoke $r6.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.type.JavaType)>(r0, $r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(java.lang.Class,java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>($r3, $r2, $r6);

        return $r4;
    }

    public org.codehaus.jackson.type.JavaType uncheckedSimpleType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r0;
        java.lang.Class $r1;
        org.codehaus.jackson.map.type.SimpleType $r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r2.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[])>($r1, null, null);

        return $r2;
    }

    public org.codehaus.jackson.map.type.TypeFactory withModifier(org.codehaus.jackson.map.type.TypeModifier)
    {
        org.codehaus.jackson.map.type.TypeFactory r0, $r4;
        org.codehaus.jackson.map.type.TypeParser $r5;
        java.lang.Object[] $r1;
        org.codehaus.jackson.map.type.TypeModifier[] $r3;
        org.codehaus.jackson.map.type.TypeModifier $r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeFactory;

        $r2 := @parameter0: org.codehaus.jackson.map.type.TypeModifier;

        $r3 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeModifier[] _modifiers>;

        if $r3 != null goto label1;

        $r4 = new org.codehaus.jackson.map.type.TypeFactory;

        $r5 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeParser _parser>;

        $r3 = newarray (org.codehaus.jackson.map.type.TypeModifier)[1];

        $r3[0] = $r2;

        specialinvoke $r4.<org.codehaus.jackson.map.type.TypeFactory: void <init>(org.codehaus.jackson.map.type.TypeParser,org.codehaus.jackson.map.type.TypeModifier[])>($r5, $r3);

        return $r4;

     label1:
        $r4 = new org.codehaus.jackson.map.type.TypeFactory;

        $r5 = r0.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeParser _parser>;

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ArrayBuilders: java.lang.Object[] insertInListNoDup(java.lang.Object[],java.lang.Object)>($r3, $r2);

        $r3 = (org.codehaus.jackson.map.type.TypeModifier[]) $r1;

        specialinvoke $r4.<org.codehaus.jackson.map.type.TypeFactory: void <init>(org.codehaus.jackson.map.type.TypeParser,org.codehaus.jackson.map.type.TypeModifier[])>($r5, $r3);

        return $r4;
    }
}
