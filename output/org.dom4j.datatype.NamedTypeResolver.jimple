public class org.dom4j.datatype.NamedTypeResolver extends java.lang.Object
{
    public java.util.Map complexTypeMap;
    public org.dom4j.DocumentFactory documentFactory;
    public java.util.Map elementFactoryMap;
    public java.util.Map simpleTypeMap;
    public java.util.Map typedElementMap;

    public void <init>(org.dom4j.DocumentFactory)
    {
        java.util.HashMap $r2;
        org.dom4j.datatype.NamedTypeResolver r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map complexTypeMap> = $r2;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map simpleTypeMap> = $r2;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map typedElementMap> = $r2;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map elementFactoryMap> = $r2;

        r0.<org.dom4j.datatype.NamedTypeResolver: org.dom4j.DocumentFactory documentFactory> = $r1;

        return;
    }

    private org.dom4j.QName getQName(java.lang.String)
    {
        org.dom4j.datatype.NamedTypeResolver r0;
        org.dom4j.QName $r2;
        java.lang.String $r3;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        $r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.dom4j.datatype.NamedTypeResolver: org.dom4j.DocumentFactory documentFactory>;

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>($r3);

        return $r2;
    }

    private org.dom4j.QName getQNameOfSchemaElement(org.dom4j.Element)
    {
        org.dom4j.datatype.NamedTypeResolver r0;
        org.dom4j.Element $r1;
        org.dom4j.QName $r3;
        java.lang.String $r2;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name");

        $r3 = specialinvoke r0.<org.dom4j.datatype.NamedTypeResolver: org.dom4j.QName getQName(java.lang.String)>($r2);

        return $r3;
    }

    public void registerComplexType(org.dom4j.QName, org.dom4j.DocumentFactory)
    {
        org.dom4j.datatype.NamedTypeResolver r0;
        java.util.Map $r3;
        org.dom4j.QName $r1;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 := @parameter1: org.dom4j.DocumentFactory;

        $r3 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map complexTypeMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void registerSimpleType(org.dom4j.QName, com.sun.msv.datatype.xsd.XSDatatype)
    {
        org.dom4j.datatype.NamedTypeResolver r0;
        java.util.Map $r3;
        com.sun.msv.datatype.xsd.XSDatatype $r2;
        org.dom4j.QName $r1;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 := @parameter1: com.sun.msv.datatype.xsd.XSDatatype;

        $r3 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map simpleTypeMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void registerTypedElement(org.dom4j.Element, org.dom4j.QName, org.dom4j.DocumentFactory)
    {
        org.dom4j.datatype.NamedTypeResolver r0;
        java.util.Map $r3;
        org.dom4j.Element $r1;
        org.dom4j.QName $r4;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        $r1 := @parameter0: org.dom4j.Element;

        $r4 := @parameter1: org.dom4j.QName;

        $r2 := @parameter2: org.dom4j.DocumentFactory;

        $r3 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map typedElementMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        $r3 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map elementFactoryMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void resolveElementTypes()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.dom4j.DocumentFactory $r8;
        org.dom4j.datatype.DatatypeElementFactory $r10;
        org.dom4j.datatype.NamedTypeResolver r0;
        java.util.Map $r1;
        com.sun.msv.datatype.xsd.XSDatatype $r9;
        java.lang.Object $r4;
        org.dom4j.Element $r5;
        org.dom4j.QName $r6, $r7;
        boolean $z0;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        $r1 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map typedElementMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.dom4j.Element) $r4;

        $r6 = specialinvoke r0.<org.dom4j.datatype.NamedTypeResolver: org.dom4j.QName getQNameOfSchemaElement(org.dom4j.Element)>($r5);

        $r1 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map typedElementMap>;

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (org.dom4j.QName) $r4;

        $r1 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map complexTypeMap>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z0 == 0 goto label3;

        $r1 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map complexTypeMap>;

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r8 = (org.dom4j.DocumentFactory) $r4;

        virtualinvoke $r6.<org.dom4j.QName: void setDocumentFactory(org.dom4j.DocumentFactory)>($r8);

        goto label1;

     label3:
        $r1 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map simpleTypeMap>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r1 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map simpleTypeMap>;

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r9 = (com.sun.msv.datatype.xsd.XSDatatype) $r4;

        $r1 = r0.<org.dom4j.datatype.NamedTypeResolver: java.util.Map elementFactoryMap>;

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (org.dom4j.DocumentFactory) $r4;

        $z0 = $r8 instanceof org.dom4j.datatype.DatatypeElementFactory;

        if $z0 == 0 goto label1;

        $r10 = (org.dom4j.datatype.DatatypeElementFactory) $r8;

        virtualinvoke $r10.<org.dom4j.datatype.DatatypeElementFactory: void setChildElementXSDatatype(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r6, $r9);

        goto label1;
    }

    public void resolveNamedTypes()
    {
        org.dom4j.datatype.NamedTypeResolver r0;

        r0 := @this: org.dom4j.datatype.NamedTypeResolver;

        virtualinvoke r0.<org.dom4j.datatype.NamedTypeResolver: void resolveElementTypes()>();

        return;
    }
}
