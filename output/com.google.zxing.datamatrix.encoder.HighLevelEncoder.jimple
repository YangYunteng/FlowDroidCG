public final class com.google.zxing.datamatrix.encoder.HighLevelEncoder extends java.lang.Object
{
    public static final int ASCII_ENCODATION;
    public static final int BASE256_ENCODATION;
    public static final int C40_ENCODATION;
    public static final char C40_UNLATCH;
    public static final int EDIFACT_ENCODATION;
    public static final char LATCH_TO_ANSIX12;
    public static final char LATCH_TO_BASE256;
    public static final char LATCH_TO_C40;
    public static final char LATCH_TO_EDIFACT;
    public static final char LATCH_TO_TEXT;
    public static final char MACRO_05;
    public static final java.lang.String MACRO_05_HEADER;
    public static final char MACRO_06;
    public static final java.lang.String MACRO_06_HEADER;
    public static final java.lang.String MACRO_TRAILER;
    public static final char PAD;
    public static final int TEXT_ENCODATION;
    public static final char UPPER_SHIFT;
    public static final int X12_ENCODATION;
    public static final char X12_UNLATCH;

    public void <init>()
    {
        com.google.zxing.datamatrix.encoder.HighLevelEncoder r0;

        r0 := @this: com.google.zxing.datamatrix.encoder.HighLevelEncoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int determineConsecutiveDigitCount(java.lang.CharSequence, int)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i2;
        char $c3;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i2 = 0;

        if $i0 >= $i1 goto label2;

        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

     label1:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isDigit(char)>($c3);

        if $z0 == 0 goto label3;

        if $i0 >= $i1 goto label3;

        $i2 = $i2 + 1;

        $i0 = $i0 + 1;

        if $i0 >= $i1 goto label1;

        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        goto label1;

     label2:
        return 0;

     label3:
        return $i2;
    }

    public static java.lang.String encodeHighLevel(java.lang.String)
    {
        com.google.zxing.datamatrix.encoder.SymbolShapeHint $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 = <com.google.zxing.datamatrix.encoder.SymbolShapeHint: com.google.zxing.datamatrix.encoder.SymbolShapeHint FORCE_NONE>;

        $r1 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: java.lang.String encodeHighLevel(java.lang.String,com.google.zxing.datamatrix.encoder.SymbolShapeHint,com.google.zxing.Dimension,com.google.zxing.Dimension)>($r1, $r0, null, null);

        return $r1;
    }

    public static java.lang.String encodeHighLevel(java.lang.String, com.google.zxing.datamatrix.encoder.SymbolShapeHint, com.google.zxing.Dimension, com.google.zxing.Dimension)
    {
        com.google.zxing.datamatrix.encoder.X12Encoder $r8;
        com.google.zxing.datamatrix.encoder.EncoderContext $r11;
        com.google.zxing.datamatrix.encoder.C40Encoder $r6;
        com.google.zxing.datamatrix.encoder.Encoder $r12;
        com.google.zxing.datamatrix.encoder.ASCIIEncoder $r5;
        int $i0, $i1, $i2;
        com.google.zxing.datamatrix.encoder.SymbolInfo $r13;
        java.lang.String $r0;
        boolean $z0;
        com.google.zxing.datamatrix.encoder.EdifactEncoder $r9;
        char $c3;
        com.google.zxing.datamatrix.encoder.SymbolShapeHint $r1;
        com.google.zxing.datamatrix.encoder.Encoder[] $r4;
        com.google.zxing.Dimension $r2, $r3;
        com.google.zxing.datamatrix.encoder.TextEncoder $r7;
        java.lang.StringBuilder $r14;
        com.google.zxing.datamatrix.encoder.Base256Encoder $r10;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.google.zxing.datamatrix.encoder.SymbolShapeHint;

        $r2 := @parameter2: com.google.zxing.Dimension;

        $r3 := @parameter3: com.google.zxing.Dimension;

        $r4 = newarray (com.google.zxing.datamatrix.encoder.Encoder)[6];

        $r5 = new com.google.zxing.datamatrix.encoder.ASCIIEncoder;

        specialinvoke $r5.<com.google.zxing.datamatrix.encoder.ASCIIEncoder: void <init>()>();

        $i0 = 0;

        $r4[0] = $r5;

        $r6 = new com.google.zxing.datamatrix.encoder.C40Encoder;

        specialinvoke $r6.<com.google.zxing.datamatrix.encoder.C40Encoder: void <init>()>();

        $r4[1] = $r6;

        $r7 = new com.google.zxing.datamatrix.encoder.TextEncoder;

        specialinvoke $r7.<com.google.zxing.datamatrix.encoder.TextEncoder: void <init>()>();

        $r4[2] = $r7;

        $r8 = new com.google.zxing.datamatrix.encoder.X12Encoder;

        specialinvoke $r8.<com.google.zxing.datamatrix.encoder.X12Encoder: void <init>()>();

        $r4[3] = $r8;

        $r9 = new com.google.zxing.datamatrix.encoder.EdifactEncoder;

        specialinvoke $r9.<com.google.zxing.datamatrix.encoder.EdifactEncoder: void <init>()>();

        $r4[4] = $r9;

        $r10 = new com.google.zxing.datamatrix.encoder.Base256Encoder;

        specialinvoke $r10.<com.google.zxing.datamatrix.encoder.Base256Encoder: void <init>()>();

        $r4[5] = $r10;

        $r11 = new com.google.zxing.datamatrix.encoder.EncoderContext;

        specialinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: void <init>(java.lang.String)>($r0);

        virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: void setSymbolShape(com.google.zxing.datamatrix.encoder.SymbolShapeHint)>($r1);

        virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: void setSizeConstraints(com.google.zxing.Dimension,com.google.zxing.Dimension)>($r2, $r3);

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("[)>\u001e05\u001d");

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("\u001e\u0004");

        if $z0 == 0 goto label1;

        virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: void writeCodeword(char)>(236);

        virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: void setSkipAtEnd(int)>(2);

        $i1 = $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: int pos>;

        $i1 = $i1 + 7;

        $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: int pos> = $i1;

        goto label2;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("[)>\u001e06\u001d");

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("\u001e\u0004");

        if $z0 == 0 goto label2;

        virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: void writeCodeword(char)>(237);

        virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: void setSkipAtEnd(int)>(2);

        $i1 = $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: int pos>;

        $i1 = $i1 + 7;

        $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: int pos> = $i1;

     label2:
        $z0 = virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: boolean hasMoreCharacters()>();

        if $z0 == 0 goto label3;

        $r12 = $r4[$i0];

        interfaceinvoke $r12.<com.google.zxing.datamatrix.encoder.Encoder: void encode(com.google.zxing.datamatrix.encoder.EncoderContext)>($r11);

        $i1 = virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: int getNewEncoding()>();

        if $i1 < 0 goto label2;

        $i0 = virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: int getNewEncoding()>();

        virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: void resetEncoderSignal()>();

        goto label2;

     label3:
        $i2 = virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: int getCodewordCount()>();

        virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: void updateSymbolInfo()>();

        $r13 = virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: com.google.zxing.datamatrix.encoder.SymbolInfo getSymbolInfo()>();

        $i1 = virtualinvoke $r13.<com.google.zxing.datamatrix.encoder.SymbolInfo: int getDataCapacity()>();

        if $i2 >= $i1 goto label4;

        if $i0 == 0 goto label4;

        if $i0 == 5 goto label4;

        virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: void writeCodeword(char)>(254);

     label4:
        $r14 = virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: java.lang.StringBuilder getCodewords()>();

        $i0 = virtualinvoke $r14.<java.lang.StringBuilder: int length()>();

        if $i0 >= $i1 goto label5;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(129);

     label5:
        $i0 = virtualinvoke $r14.<java.lang.StringBuilder: int length()>();

        if $i0 >= $i1 goto label6;

        $i0 = virtualinvoke $r14.<java.lang.StringBuilder: int length()>();

        $i0 = $i0 + 1;

        $c3 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char randomize253State(char,int)>(129, $i0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        goto label5;

     label6:
        $r14 = virtualinvoke $r11.<com.google.zxing.datamatrix.encoder.EncoderContext: java.lang.StringBuilder getCodewords()>();

        $r0 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static int findMinimums(float[], int[], int, byte[])
    {
        byte[] $r2;
        float[] $r0;
        byte $b3;
        int[] $r1;
        int $i0, $i1, $i2;
        float $f0;
        double $d0;

        $r0 := @parameter0: float[];

        $r1 := @parameter1: int[];

        $i0 := @parameter2: int;

        $r2 := @parameter3: byte[];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r2, 0);

        $i1 = 0;

     label1:
        if $i1 >= 6 goto label4;

        $f0 = $r0[$i1];

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i2 = (int) $d0;

        $r1[$i1] = $i2;

        $i2 = $r1[$i1];

        if $i0 <= $i2 goto label2;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r2, 0);

        $i0 = $i2;

     label2:
        if $i0 != $i2 goto label3;

        $b3 = $r2[$i1];

        $i2 = (int) $b3;

        $i2 = $i2 + 1;

        $b3 = (byte) $i2;

        $r2[$i1] = $b3;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        return $i0;
    }

    public static int getMinimumCount(byte[])
    {
        byte[] $r0;
        byte $b2;
        int $i0, $i1, $i3;

        $r0 := @parameter0: byte[];

        $i0 = 0;

        $i1 = 0;

     label1:
        if $i0 >= 6 goto label2;

        $b2 = $r0[$i0];

        $i3 = (int) $b2;

        $i1 = $i1 + $i3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i1;
    }

    public static void illegalCharacter(char)
    {
        int $i1;
        char $c0;
        java.lang.StringBuilder $r1, $r3;
        java.lang.String $r0, $r2;
        java.lang.IllegalArgumentException $r4;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r3 = new java.lang.StringBuilder;

        $r1 = $r3;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = 4 - $i1;

        $r2 = "0000";

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        $r1 = $r3;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (0x");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r4;
    }

    public static boolean isDigit(char)
    {
        int $i1;
        char $c0;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 < 48 goto label1;

        $i1 = (int) $c0;

        if $i1 > 57 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isExtendedASCII(char)
    {
        int $i1;
        char $c0;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 < 128 goto label1;

        $i1 = (int) $c0;

        if $i1 > 255 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isNativeC40(char)
    {
        int $i1;
        char $c0;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 == 32 goto label3;

        $i1 = (int) $c0;

        if $i1 < 48 goto label1;

        $i1 = (int) $c0;

        if $i1 <= 57 goto label3;

     label1:
        $i1 = (int) $c0;

        if $i1 < 65 goto label2;

        $i1 = (int) $c0;

        if $i1 > 90 goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public static boolean isNativeEDIFACT(char)
    {
        int $i1;
        char $c0;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 < 32 goto label1;

        $i1 = (int) $c0;

        if $i1 > 94 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isNativeText(char)
    {
        int $i1;
        char $c0;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 == 32 goto label3;

        $i1 = (int) $c0;

        if $i1 < 48 goto label1;

        $i1 = (int) $c0;

        if $i1 <= 57 goto label3;

     label1:
        $i1 = (int) $c0;

        if $i1 < 97 goto label2;

        $i1 = (int) $c0;

        if $i1 > 122 goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public static boolean isNativeX12(char)
    {
        int $i1;
        char $c0;
        boolean $z0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isX12TermSep(char)>($c0);

        if $z0 != 0 goto label3;

        $i1 = (int) $c0;

        if $i1 == 32 goto label3;

        $i1 = (int) $c0;

        if $i1 < 48 goto label1;

        $i1 = (int) $c0;

        if $i1 <= 57 goto label3;

     label1:
        $i1 = (int) $c0;

        if $i1 < 65 goto label2;

        $i1 = (int) $c0;

        if $i1 > 90 goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public static boolean isSpecialB256(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        return 0;
    }

    public static boolean isX12TermSep(char)
    {
        int $i1;
        char $c0;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 == 13 goto label2;

        $i1 = (int) $c0;

        if $i1 == 42 goto label2;

        $i1 = (int) $c0;

        if $i1 != 62 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static int lookAheadTest(java.lang.CharSequence, int, int)
    {
        byte[] $r2;
        java.lang.CharSequence $r0;
        float[] $r1;
        char $c5;
        byte $b4, $b7;
        int[] $r3;
        int $i0, $i1, $i2, $i3, $i6;
        float $f0;
        boolean $z0;
        double $d0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 < $i3 goto label01;

        return $i1;

     label01:
        if $i1 != 0 goto label02;

        $r1 = newarray (float)[6];

        $r1[0] = 0.0F;

        $r1[1] = 1.0F;

        $r1[2] = 1.0F;

        $r1[3] = 1.0F;

        $r1[4] = 1.0F;

        $r1[5] = 1.25F;

        goto label03;

     label02:
        $r1 = newarray (float)[6];

        $r1[0] = 1.0F;

        $r1[1] = 2.0F;

        $r1[2] = 2.0F;

        $r1[3] = 2.0F;

        $r1[4] = 2.0F;

        $r1[5] = 2.25F;

        $r1[$i1] = 0.0F;

     label03:
        $i1 = 0;

     label04:
        $i3 = $i0 + $i1;

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i3 != $i2 goto label10;

        $r2 = newarray (byte)[6];

        $r3 = newarray (int)[6];

        $i1 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int findMinimums(float[],int[],int,byte[])>($r1, $r3, 2147483647, $r2);

        $i0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int getMinimumCount(byte[])>($r2);

        $i3 = $r3[0];

        if $i3 != $i1 goto label05;

        return 0;

     label05:
        if $i0 != 1 goto label06;

        $b4 = $r2[5];

        $i1 = (int) $b4;

        if $i1 <= 0 goto label06;

        return 5;

     label06:
        if $i0 != 1 goto label07;

        $b4 = $r2[4];

        $i1 = (int) $b4;

        if $i1 <= 0 goto label07;

        return 4;

     label07:
        if $i0 != 1 goto label08;

        $b4 = $r2[2];

        $i1 = (int) $b4;

        if $i1 <= 0 goto label08;

        return 2;

     label08:
        if $i0 != 1 goto label09;

        $b4 = $r2[3];

        $i0 = (int) $b4;

        if $i0 <= 0 goto label39;

        return 3;

     label09:
        return 1;

     label10:
        $c5 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i3);

        $i1 = $i1 + 1;

        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isDigit(char)>($c5);

        if $z0 == 0 goto label11;

        $f0 = $r1[0];

        $d0 = (double) $f0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 + 0.5;

        $f0 = (float) $d0;

        $r1[0] = $f0;

        goto label13;

     label11:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isExtendedASCII(char)>($c5);

        if $z0 == 0 goto label12;

        $f0 = $r1[0];

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i3 = (int) $d0;

        $f0 = (float) $i3;

        $r1[0] = $f0;

        $f0 = $r1[0];

        $f0 = $f0 + 2.0F;

        $r1[0] = $f0;

        goto label13;

     label12:
        $f0 = $r1[0];

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i3 = (int) $d0;

        $f0 = (float) $i3;

        $r1[0] = $f0;

        $f0 = $r1[0];

        $f0 = $f0 + 1.0F;

        $r1[0] = $f0;

     label13:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isNativeC40(char)>($c5);

        if $z0 == 0 goto label14;

        $f0 = $r1[1];

        $f0 = $f0 + 0.6666667F;

        $r1[1] = $f0;

        goto label16;

     label14:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isExtendedASCII(char)>($c5);

        if $z0 == 0 goto label15;

        $f0 = $r1[1];

        $f0 = $f0 + 2.6666667F;

        $r1[1] = $f0;

        goto label16;

     label15:
        $f0 = $r1[1];

        $f0 = $f0 + 1.3333334F;

        $r1[1] = $f0;

     label16:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isNativeText(char)>($c5);

        if $z0 == 0 goto label17;

        $f0 = $r1[2];

        $f0 = $f0 + 0.6666667F;

        $r1[2] = $f0;

        goto label19;

     label17:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isExtendedASCII(char)>($c5);

        if $z0 == 0 goto label18;

        $f0 = $r1[2];

        $f0 = $f0 + 2.6666667F;

        $r1[2] = $f0;

        goto label19;

     label18:
        $f0 = $r1[2];

        $f0 = $f0 + 1.3333334F;

        $r1[2] = $f0;

     label19:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isNativeX12(char)>($c5);

        if $z0 == 0 goto label20;

        $f0 = $r1[3];

        $f0 = $f0 + 0.6666667F;

        $r1[3] = $f0;

        goto label22;

     label20:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isExtendedASCII(char)>($c5);

        if $z0 == 0 goto label21;

        $f0 = $r1[3];

        $f0 = $f0 + 4.3333335F;

        $r1[3] = $f0;

        goto label22;

     label21:
        $f0 = $r1[3];

        $f0 = $f0 + 3.3333333F;

        $r1[3] = $f0;

     label22:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isNativeEDIFACT(char)>($c5);

        if $z0 == 0 goto label23;

        $f0 = $r1[4];

        $f0 = $f0 + 0.75F;

        $r1[4] = $f0;

        goto label25;

     label23:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isExtendedASCII(char)>($c5);

        if $z0 == 0 goto label24;

        $f0 = $r1[4];

        $f0 = $f0 + 4.25F;

        $r1[4] = $f0;

        goto label25;

     label24:
        $f0 = $r1[4];

        $f0 = $f0 + 3.25F;

        $r1[4] = $f0;

     label25:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isSpecialB256(char)>($c5);

        if $z0 == 0 goto label26;

        $f0 = $r1[5];

        $f0 = $f0 + 4.0F;

        $r1[5] = $f0;

        goto label27;

     label26:
        $f0 = $r1[5];

        $f0 = $f0 + 1.0F;

        $r1[5] = $f0;

     label27:
        if $i1 < 4 goto label04;

        $r3 = newarray (int)[6];

        $r2 = newarray (byte)[6];

        staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int findMinimums(float[],int[],int,byte[])>($r1, $r3, 2147483647, $r2);

        $i3 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int getMinimumCount(byte[])>($r2);

        $i6 = $r3[0];

        $i2 = $r3[5];

        if $i6 >= $i2 goto label28;

        $i2 = $r3[0];

        $i6 = $r3[1];

        if $i2 >= $i6 goto label28;

        $i2 = $r3[0];

        $i6 = $r3[2];

        if $i2 >= $i6 goto label28;

        $i2 = $r3[0];

        $i6 = $r3[3];

        if $i2 >= $i6 goto label28;

        $i2 = $r3[0];

        $i6 = $r3[4];

        if $i2 >= $i6 goto label28;

        return 0;

     label28:
        $i2 = $r3[5];

        $i6 = $r3[0];

        if $i2 < $i6 goto label38;

        $b4 = $r2[1];

        $b7 = $r2[2];

        $i2 = (int) $b4;

        $i6 = (int) $b7;

        $i2 = $i2 + $i6;

        $b4 = $r2[3];

        $i6 = (int) $b4;

        $i2 = $i2 + $i6;

        $b4 = $r2[4];

        $i6 = (int) $b4;

        $i2 = $i2 + $i6;

        if $i2 != 0 goto label29;

        goto label38;

     label29:
        if $i3 != 1 goto label30;

        $b4 = $r2[4];

        $i2 = (int) $b4;

        if $i2 <= 0 goto label30;

        return 4;

     label30:
        if $i3 != 1 goto label31;

        $b4 = $r2[2];

        $i2 = (int) $b4;

        if $i2 <= 0 goto label31;

        return 2;

     label31:
        if $i3 != 1 goto label32;

        $b4 = $r2[3];

        $i3 = (int) $b4;

        if $i3 <= 0 goto label32;

        return 3;

     label32:
        $i3 = $r3[1];

        $i3 = $i3 + 1;

        $i2 = $r3[0];

        if $i3 >= $i2 goto label04;

        $i3 = $r3[1];

        $i3 = $i3 + 1;

        $i2 = $r3[5];

        if $i3 >= $i2 goto label04;

        $i3 = $r3[1];

        $i3 = $i3 + 1;

        $i2 = $r3[4];

        if $i3 >= $i2 goto label04;

        $i3 = $r3[1];

        $i3 = $i3 + 1;

        $i2 = $r3[2];

        if $i3 >= $i2 goto label04;

        $i3 = $r3[1];

        $i2 = $r3[3];

        if $i3 >= $i2 goto label33;

        return 1;

     label33:
        $i3 = $r3[1];

        $i2 = $r3[3];

        if $i3 != $i2 goto label04;

        $i0 = $i0 + $i1;

        $i0 = $i0 + 1;

     label34:
        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 >= $i1 goto label37;

        $c5 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isX12TermSep(char)>($c5);

        if $z0 == 0 goto label35;

        return 3;

     label35:
        $z0 = staticinvoke <com.google.zxing.datamatrix.encoder.HighLevelEncoder: boolean isNativeX12(char)>($c5);

        if $z0 != 0 goto label36;

        return 1;

     label36:
        $i0 = $i0 + 1;

        goto label34;

     label37:
        return 1;

     label38:
        return 5;

     label39:
        return 1;
    }

    public static char randomize253State(char, int)
    {
        int $i1, $i2;
        char $c0;

        $c0 := @parameter0: char;

        $i1 := @parameter1: int;

        $i1 = $i1 * 149;

        $i1 = $i1 % 253;

        $i1 = $i1 + 1;

        $i2 = (int) $c0;

        $i1 = $i2 + $i1;

        if $i1 > 254 goto label1;

        goto label2;

     label1:
        $i1 = $i1 - 254;

     label2:
        $c0 = (char) $i1;

        return $c0;
    }

    public static void <clinit>()
    {
        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char X12_UNLATCH> = 254;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int X12_ENCODATION> = 3;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char UPPER_SHIFT> = 235;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int TEXT_ENCODATION> = 2;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char PAD> = 129;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: java.lang.String MACRO_TRAILER> = "\u001e\u0004";

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: java.lang.String MACRO_06_HEADER> = "[)>\u001e06\u001d";

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char MACRO_06> = 237;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: java.lang.String MACRO_05_HEADER> = "[)>\u001e05\u001d";

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char MACRO_05> = 236;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char LATCH_TO_TEXT> = 239;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char LATCH_TO_EDIFACT> = 240;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char LATCH_TO_C40> = 230;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char LATCH_TO_BASE256> = 231;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char LATCH_TO_ANSIX12> = 238;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int EDIFACT_ENCODATION> = 4;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: char C40_UNLATCH> = 254;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int C40_ENCODATION> = 1;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int BASE256_ENCODATION> = 5;

        <com.google.zxing.datamatrix.encoder.HighLevelEncoder: int ASCII_ENCODATION> = 0;

        return;
    }
}
