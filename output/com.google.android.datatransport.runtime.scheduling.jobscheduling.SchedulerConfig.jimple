public abstract class com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig extends java.lang.Object
{
    public static final long BACKOFF_LOG_BASE;
    public static final long ONE_SECOND;
    public static final long THIRTY_SECONDS;
    public static final long TWENTY_FOUR_HOURS;

    public void <init>()
    {
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig r0;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private long adjustedExponentialBackoff(int, long)
    {
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig r0;
        long $l0, $l3, $l4;
        byte $b2;
        int $i1, $i5;
        double $d0, $d1, $d2;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig;

        $i1 := @parameter0: int;

        $l0 := @parameter1: long;

        $i5 = -1;

        $i1 = $i1 + $i5;

        $b2 = $l0 cmp 1L;

        $i5 = (int) $b2;

        if $i5 <= 0 goto label1;

        $l3 = $l0;

        goto label2;

     label1:
        $l3 = 2L;

     label2:
        $d0 = staticinvoke <java.lang.Math: double log(double)>(10000.0);

        $l4 = (long) $i1;

        $l3 = $l3 * $l4;

        $d1 = (double) $l3;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d1);

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>(1.0, $d0);

        $d1 = (double) $i1;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(3.0, $d1);

        $d2 = (double) $l0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        $d1 = $d1 * $d2;

        $d0 = $d1 * $d0;

        $l0 = (long) $d0;

        return $l0;
    }

    public static com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder builder()
    {
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder $r0;

        $r0 = new com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder;

        specialinvoke $r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder: void <init>()>();

        return $r0;
    }

    public static com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig create(com.google.android.datatransport.runtime.time.Clock, java.util.Map)
    {
        com.google.android.datatransport.runtime.time.Clock $r0;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.AutoValue_SchedulerConfig $r2;
        java.util.Map $r1;

        $r0 := @parameter0: com.google.android.datatransport.runtime.time.Clock;

        $r1 := @parameter1: java.util.Map;

        $r2 = new com.google.android.datatransport.runtime.scheduling.jobscheduling.AutoValue_SchedulerConfig;

        specialinvoke $r2.<com.google.android.datatransport.runtime.scheduling.jobscheduling.AutoValue_SchedulerConfig: void <init>(com.google.android.datatransport.runtime.time.Clock,java.util.Map)>($r0, $r1);

        return $r2;
    }

    public static com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig getDefault(com.google.android.datatransport.runtime.time.Clock)
    {
        com.google.android.datatransport.runtime.time.Clock $r0;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig $r8;
        com.google.android.datatransport.Priority $r2;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue $r4;
        java.util.Set $r7;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder $r3;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag $r6;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder $r1;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag[] $r5;

        $r0 := @parameter0: com.google.android.datatransport.runtime.time.Clock;

        $r1 = staticinvoke <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder builder()>();

        $r2 = <com.google.android.datatransport.Priority: com.google.android.datatransport.Priority DEFAULT>;

        $r3 = staticinvoke <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder builder()>();

        $r3 = virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder setDelta(long)>(30000L);

        $r3 = virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder setMaxAllowedDelay(long)>(86400000L);

        $r4 = virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue build()>();

        $r1 = virtualinvoke $r1.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder addConfig(com.google.android.datatransport.Priority,com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue)>($r2, $r4);

        $r2 = <com.google.android.datatransport.Priority: com.google.android.datatransport.Priority HIGHEST>;

        $r3 = staticinvoke <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder builder()>();

        $r3 = virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder setDelta(long)>(1000L);

        $r3 = virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder setMaxAllowedDelay(long)>(86400000L);

        $r4 = virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue build()>();

        $r1 = virtualinvoke $r1.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder addConfig(com.google.android.datatransport.Priority,com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue)>($r2, $r4);

        $r2 = <com.google.android.datatransport.Priority: com.google.android.datatransport.Priority VERY_LOW>;

        $r3 = staticinvoke <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder builder()>();

        $r3 = virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder setDelta(long)>(86400000L);

        $r3 = virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder setMaxAllowedDelay(long)>(86400000L);

        $r5 = newarray (com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag)[2];

        $r6 = <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag NETWORK_UNMETERED>;

        $r5[0] = $r6;

        $r6 = <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag DEVICE_IDLE>;

        $r5[1] = $r6;

        $r7 = staticinvoke <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: java.util.Set immutableSetOf(java.lang.Object[])>($r5);

        $r3 = virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder setFlags(java.util.Set)>($r7);

        $r4 = virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue build()>();

        $r1 = virtualinvoke $r1.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder addConfig(com.google.android.datatransport.Priority,com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue)>($r2, $r4);

        $r1 = virtualinvoke $r1.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder setClock(com.google.android.datatransport.runtime.time.Clock)>($r0);

        $r8 = virtualinvoke $r1.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Builder: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig build()>();

        return $r8;
    }

    public static transient java.util.Set immutableSetOf(java.lang.Object[])
    {
        java.util.HashSet $r0;
        java.util.List $r2;
        java.lang.Object[] $r1;
        java.util.Set $r3;

        $r1 := @parameter0: java.lang.Object[];

        $r0 = new java.util.HashSet;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        return $r3;
    }

    private void populateFlags(android.app.job.JobInfo$Builder, java.util.Set)
    {
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig r0;
        java.util.Set $r2;
        android.app.job.JobInfo$Builder $r1;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag $r3;
        boolean $z0;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig;

        $r1 := @parameter0: android.app.job.JobInfo$Builder;

        $r2 := @parameter1: java.util.Set;

        $r3 = <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag NETWORK_UNMETERED>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>(2);

        goto label2;

     label1:
        virtualinvoke $r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>(1);

     label2:
        $r3 = <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag DEVICE_CHARGING>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresCharging(boolean)>(1);

     label3:
        $r3 = <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag DEVICE_IDLE>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

        virtualinvoke $r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresDeviceIdle(boolean)>(1);

     label4:
        return;
    }

    public android.app.job.JobInfo$Builder configureJob(android.app.job.JobInfo$Builder, com.google.android.datatransport.Priority, long, int)
    {
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig r0;
        com.google.android.datatransport.Priority $r2;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue $r5;
        java.util.Set $r6;
        long $l1;
        java.util.Map $r3;
        int $i0;
        java.lang.Object $r4;
        android.app.job.JobInfo$Builder $r1;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig;

        $r1 := @parameter0: android.app.job.JobInfo$Builder;

        $r2 := @parameter1: com.google.android.datatransport.Priority;

        $l1 := @parameter2: long;

        $i0 := @parameter3: int;

        $l1 = virtualinvoke r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: long getScheduleDelay(com.google.android.datatransport.Priority,long,int)>($r2, $l1, $i0);

        virtualinvoke $r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>($l1);

        $r3 = virtualinvoke r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: java.util.Map getValues()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue) $r4;

        $r6 = virtualinvoke $r5.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue: java.util.Set getFlags()>();

        specialinvoke r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: void populateFlags(android.app.job.JobInfo$Builder,java.util.Set)>($r1, $r6);

        return $r1;
    }

    public abstract com.google.android.datatransport.runtime.time.Clock getClock();

    public java.util.Set getFlags(com.google.android.datatransport.Priority)
    {
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig r0;
        com.google.android.datatransport.Priority $r1;
        java.util.Map $r2;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue $r4;
        java.util.Set $r5;
        java.lang.Object $r3;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig;

        $r1 := @parameter0: com.google.android.datatransport.Priority;

        $r2 = virtualinvoke r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: java.util.Map getValues()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue) $r3;

        $r5 = virtualinvoke $r4.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue: java.util.Set getFlags()>();

        return $r5;
    }

    public long getScheduleDelay(com.google.android.datatransport.Priority, long, int)
    {
        com.google.android.datatransport.runtime.time.Clock $r2;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig r0;
        com.google.android.datatransport.Priority $r1;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue $r5;
        long $l1, $l2;
        java.util.Map $r3;
        int $i0;
        java.lang.Object $r4;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig;

        $r1 := @parameter0: com.google.android.datatransport.Priority;

        $l1 := @parameter1: long;

        $i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: com.google.android.datatransport.runtime.time.Clock getClock()>();

        $l2 = interfaceinvoke $r2.<com.google.android.datatransport.runtime.time.Clock: long getTime()>();

        $l1 = $l1 - $l2;

        $r3 = virtualinvoke r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: java.util.Map getValues()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue) $r4;

        $l2 = virtualinvoke $r5.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue: long getDelta()>();

        $l2 = specialinvoke r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: long adjustedExponentialBackoff(int,long)>($i0, $l2);

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l2, $l1);

        $l2 = virtualinvoke $r5.<com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$ConfigValue: long getMaxAllowedDelay()>();

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l2);

        return $l1;
    }

    public abstract java.util.Map getValues();

    public static void <clinit>()
    {
        <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: long TWENTY_FOUR_HOURS> = 86400000L;

        <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: long THIRTY_SECONDS> = 30000L;

        <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: long ONE_SECOND> = 1000L;

        <com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig: long BACKOFF_LOG_BASE> = 10000L;

        return;
    }
}
