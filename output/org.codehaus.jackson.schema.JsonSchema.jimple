public class org.codehaus.jackson.schema.JsonSchema extends java.lang.Object
{
    public final org.codehaus.jackson.node.ObjectNode schema;

    public void <init>(org.codehaus.jackson.node.ObjectNode)
    {
        org.codehaus.jackson.schema.JsonSchema r0;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.schema.JsonSchema;

        $r1 := @parameter0: org.codehaus.jackson.node.ObjectNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema> = $r1;

        return;
    }

    public static org.codehaus.jackson.JsonNode getDefaultSchemaNode()
    {
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        org.codehaus.jackson.node.ObjectNode $r0;

        $r1 = <org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.JsonNodeFactory instance>;

        $r0 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.ObjectNode objectNode()>();

        virtualinvoke $r0.<org.codehaus.jackson.node.ObjectNode: void put(java.lang.String,java.lang.String)>("type", "any");

        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.schema.JsonSchema r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        org.codehaus.jackson.node.ObjectNode $r3, $r4;

        r0 := @this: org.codehaus.jackson.schema.JsonSchema;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        $z0 = $r1 instanceof org.codehaus.jackson.schema.JsonSchema;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $r2 = (org.codehaus.jackson.schema.JsonSchema) $r1;

        $r3 = r0.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema>;

        if $r3 != null goto label5;

        $r3 = $r2.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema>;

        if $r3 != null goto label4;

        return 1;

     label4:
        return 0;

     label5:
        $r4 = $r2.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema>;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    public org.codehaus.jackson.node.ObjectNode getSchemaNode()
    {
        org.codehaus.jackson.schema.JsonSchema r0;
        org.codehaus.jackson.node.ObjectNode r1;

        r0 := @this: org.codehaus.jackson.schema.JsonSchema;

        r1 = r0.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema>;

        return r1;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.schema.JsonSchema r0;
        java.lang.String $r1;
        org.codehaus.jackson.node.ObjectNode $r2;

        r0 := @this: org.codehaus.jackson.schema.JsonSchema;

        $r2 = r0.<org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.node.ObjectNode schema>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.node.ObjectNode: java.lang.String toString()>();

        return $r1;
    }
}
