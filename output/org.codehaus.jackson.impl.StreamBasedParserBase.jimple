public abstract class org.codehaus.jackson.impl.StreamBasedParserBase extends org.codehaus.jackson.impl.JsonNumericParserBase
{
    public boolean _bufferRecyclable;
    public byte[] _inputBuffer;
    public java.io.InputStream _inputStream;

    public void <init>(org.codehaus.jackson.io.IOContext, int, java.io.InputStream, byte[], int, int, boolean)
    {
        org.codehaus.jackson.io.IOContext $r1;
        byte[] $r3;
        org.codehaus.jackson.impl.StreamBasedParserBase r0;
        int $i0, $i1, $i2;
        java.io.InputStream $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.StreamBasedParserBase;

        $r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.io.InputStream;

        $r3 := @parameter3: byte[];

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $z0 := @parameter6: boolean;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void <init>(org.codehaus.jackson.io.IOContext,int)>($r1, $i0);

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream> = $r2;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer> = $r3;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd> = $i2;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: boolean _bufferRecyclable> = $z0;

        return;
    }

    public void _closeInput()
    {
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.impl.StreamBasedParserBase r0;
        org.codehaus.jackson.JsonParser$Feature $r3;
        java.io.InputStream $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.StreamBasedParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream>;

        if $r1 == null goto label3;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.io.IOContext: boolean isResourceManaged()>();

        if $z0 != 0 goto label1;

        $r3 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature AUTO_CLOSE_SOURCE>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r3);

        if $z0 == 0 goto label2;

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label2:
        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream> = null;

     label3:
        return;
    }

    public final boolean _loadToHaveAtLeast(int)
    {
        byte[] $r2;
        long $l3, $l4;
        java.io.IOException $r3;
        org.codehaus.jackson.impl.StreamBasedParserBase r0;
        int $i0, $i1, $i2, $i5;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.InputStream $r1;

        r0 := @this: org.codehaus.jackson.impl.StreamBasedParserBase;

        $i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        $i2 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i1 = $i1 - $i2;

        if $i1 <= 0 goto label2;

        if $i2 <= 0 goto label2;

        $l3 = r0.<org.codehaus.jackson.impl.JsonParserBase: long _currInputProcessed>;

        $l4 = (long) $i2;

        $l3 = $l3 + $l4;

        r0.<org.codehaus.jackson.impl.JsonParserBase: long _currInputProcessed> = $l3;

        $i5 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _currInputRowStart>;

        $i5 = $i5 - $i2;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _currInputRowStart> = $i5;

        $r2 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, $r2, 0, $i1);

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd> = $i1;

        goto label3;

     label2:
        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd> = 0;

     label3:
        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = 0;

     label4:
        $i2 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i2 >= $i0 goto label7;

        $r1 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream>;

        $r2 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer>;

        $i5 = lengthof $r2;

        $i5 = $i5 - $i2;

        $i2 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, $i2, $i5);

        if $i2 >= 1 goto label6;

        virtualinvoke r0.<org.codehaus.jackson.impl.StreamBasedParserBase: void _closeInput()>();

        if $i2 == 0 goto label5;

        return 0;

     label5:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InputStream.read() returned 0 characters when trying to read ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label6:
        $i5 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        $i2 = $i5 + $i2;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd> = $i2;

        goto label4;

     label7:
        return 1;
    }

    public void _releaseBuffers()
    {
        byte[] $r1;
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.impl.StreamBasedParserBase r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.StreamBasedParserBase;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _releaseBuffers()>();

        $z0 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: boolean _bufferRecyclable>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer>;

        if $r1 == null goto label1;

        r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer> = null;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        virtualinvoke $r2.<org.codehaus.jackson.io.IOContext: void releaseReadIOBuffer(byte[])>($r1);

     label1:
        return;
    }

    public java.lang.Object getInputSource()
    {
        org.codehaus.jackson.impl.StreamBasedParserBase r0;
        java.io.InputStream r1;

        r0 := @this: org.codehaus.jackson.impl.StreamBasedParserBase;

        r1 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream>;

        return r1;
    }

    public final boolean loadMore()
    {
        byte[] $r2;
        long $l0, $l2;
        java.io.IOException $r3;
        org.codehaus.jackson.impl.StreamBasedParserBase r0;
        int $i1, $i3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.InputStream $r1;

        r0 := @this: org.codehaus.jackson.impl.StreamBasedParserBase;

        $l0 = r0.<org.codehaus.jackson.impl.JsonParserBase: long _currInputProcessed>;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        $l2 = (long) $i1;

        $l0 = $l0 + $l2;

        r0.<org.codehaus.jackson.impl.JsonParserBase: long _currInputProcessed> = $l0;

        $i3 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _currInputRowStart>;

        $i1 = $i3 - $i1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _currInputRowStart> = $i1;

        $r1 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: java.io.InputStream _inputStream>;

        if $r1 == null goto label3;

        $r2 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer>;

        $i1 = lengthof $r2;

        $i1 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i1);

        if $i1 <= 0 goto label1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = 0;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd> = $i1;

        return 1;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.impl.StreamBasedParserBase: void _closeInput()>();

        if $i1 == 0 goto label2;

        return 0;

     label2:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InputStream.read() returned 0 characters when trying to read ");

        $r2 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer>;

        $i1 = lengthof $r2;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        return 0;
    }

    public int releaseBuffered(java.io.OutputStream)
    {
        java.io.OutputStream $r1;
        byte[] $r2;
        int $i0, $i1;
        org.codehaus.jackson.impl.StreamBasedParserBase r0;

        r0 := @this: org.codehaus.jackson.impl.StreamBasedParserBase;

        $r1 := @parameter0: java.io.OutputStream;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i1 = $i1 - $i0;

        if $i1 >= 1 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.StreamBasedParserBase: byte[] _inputBuffer>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, $i0, $i1);

        return $i1;
    }
}
