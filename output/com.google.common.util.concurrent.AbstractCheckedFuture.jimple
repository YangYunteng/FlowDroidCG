public abstract class com.google.common.util.concurrent.AbstractCheckedFuture extends com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture implements com.google.common.util.concurrent.CheckedFuture
{

    public void <init>(com.google.common.util.concurrent.ListenableFuture)
    {
        com.google.common.util.concurrent.ListenableFuture $r1;
        com.google.common.util.concurrent.AbstractCheckedFuture r0;

        r0 := @this: com.google.common.util.concurrent.AbstractCheckedFuture;

        $r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        specialinvoke r0.<com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture: void <init>(com.google.common.util.concurrent.ListenableFuture)>($r1);

        return;
    }

    public java.lang.Object checkedGet()
    {
        java.lang.InterruptedException $r4;
        com.google.common.util.concurrent.AbstractCheckedFuture r0;
        java.lang.Thread $r5;
        java.lang.Object $r1;
        java.lang.Exception $r2, $r3;

        r0 := @this: com.google.common.util.concurrent.AbstractCheckedFuture;

     label1:
        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingFuture: java.lang.Object get()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        goto label5;

     label4:
        $r2 := @caughtexception;

     label5:
        $r3 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Exception mapException(java.lang.Exception)>($r2);

        throw $r3;

     label6:
        $r4 := @caughtexception;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

        $r3 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Exception mapException(java.lang.Exception)>($r4);

        throw $r3;

        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.util.concurrent.CancellationException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public java.lang.Object checkedGet(long, java.util.concurrent.TimeUnit)
    {
        long $l0;
        java.lang.Exception $r3, $r4;
        java.util.concurrent.TimeUnit $r1;
        java.lang.InterruptedException $r5;
        com.google.common.util.concurrent.AbstractCheckedFuture r0;
        java.lang.Thread $r6;
        java.lang.Object $r2;

        r0 := @this: com.google.common.util.concurrent.AbstractCheckedFuture;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l0, $r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        goto label5;

     label4:
        $r3 := @caughtexception;

     label5:
        $r4 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Exception mapException(java.lang.Exception)>($r3);

        throw $r4;

     label6:
        $r5 := @caughtexception;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

        $r4 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Exception mapException(java.lang.Exception)>($r5);

        throw $r4;

        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.util.concurrent.CancellationException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public abstract java.lang.Exception mapException(java.lang.Exception);
}
