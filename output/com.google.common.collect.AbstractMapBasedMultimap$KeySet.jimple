public class com.google.common.collect.AbstractMapBasedMultimap$KeySet extends com.google.common.collect.Maps$KeySet
{
    public final com.google.common.collect.AbstractMapBasedMultimap this$0;

    public void <init>(com.google.common.collect.AbstractMapBasedMultimap, java.util.Map)
    {
        com.google.common.collect.AbstractMapBasedMultimap $r1;
        com.google.common.collect.AbstractMapBasedMultimap$KeySet r0;
        java.util.Map $r2;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultimap$KeySet;

        $r1 := @parameter0: com.google.common.collect.AbstractMapBasedMultimap;

        $r2 := @parameter1: java.util.Map;

        r0.<com.google.common.collect.AbstractMapBasedMultimap$KeySet: com.google.common.collect.AbstractMapBasedMultimap this$0> = $r1;

        specialinvoke r0.<com.google.common.collect.Maps$KeySet: void <init>(java.util.Map)>($r2);

        return;
    }

    public void clear()
    {
        java.util.Iterator $r1;
        com.google.common.collect.AbstractMapBasedMultimap$KeySet r0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultimap$KeySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultimap$KeySet: java.util.Iterator iterator()>();

        staticinvoke <com.google.common.collect.Iterators: void clear(java.util.Iterator)>($r1);

        return;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Collection $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        com.google.common.collect.AbstractMapBasedMultimap$KeySet r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultimap$KeySet;

        $r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean containsAll(java.util.Collection)>($r1);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Map $r2;
        java.util.Set $r3;
        java.lang.Object $r1;
        com.google.common.collect.AbstractMapBasedMultimap$KeySet r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultimap$KeySet;

        $r1 := @parameter0: java.lang.Object;

        if r0 == $r1 goto label2;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public int hashCode()
    {
        java.util.Map $r1;
        int $i0;
        java.util.Set $r2;
        com.google.common.collect.AbstractMapBasedMultimap$KeySet r0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultimap$KeySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int hashCode()>();

        return $i0;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.AbstractMapBasedMultimap$KeySet$1 $r1;
        java.util.Iterator $r4;
        java.util.Map $r2;
        java.util.Set $r3;
        com.google.common.collect.AbstractMapBasedMultimap$KeySet r0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultimap$KeySet;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r1 = new com.google.common.collect.AbstractMapBasedMultimap$KeySet$1;

        specialinvoke $r1.<com.google.common.collect.AbstractMapBasedMultimap$KeySet$1: void <init>(com.google.common.collect.AbstractMapBasedMultimap$KeySet,java.util.Iterator)>(r0, $r4);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Collection $r3;
        com.google.common.collect.AbstractMapBasedMultimap$KeySet r0;
        com.google.common.collect.AbstractMapBasedMultimap $r4;
        java.util.Map $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultimap$KeySet;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r3 = (java.util.Collection) $r1;

        if $r3 == null goto label1;

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        $i1 = $i0;

        interfaceinvoke $r3.<java.util.Collection: void clear()>();

        $r4 = r0.<com.google.common.collect.AbstractMapBasedMultimap$KeySet: com.google.common.collect.AbstractMapBasedMultimap this$0>;

        $i2 = staticinvoke <com.google.common.collect.AbstractMapBasedMultimap: int access$200(com.google.common.collect.AbstractMapBasedMultimap)>($r4);

        $i0 = $i2 - $i0;

        staticinvoke <com.google.common.collect.AbstractMapBasedMultimap: int access$202(com.google.common.collect.AbstractMapBasedMultimap,int)>($r4, $i0);

        goto label2;

     label1:
        $i1 = 0;

     label2:
        if $i1 <= 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public java.util.Spliterator spliterator()
    {
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Spliterator $r3;
        com.google.common.collect.AbstractMapBasedMultimap$KeySet r0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultimap$KeySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Spliterator spliterator()>();

        return $r3;
    }
}
