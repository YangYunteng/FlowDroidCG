public class org.codehaus.jackson.map.ser.impl.InetAddressSerializer extends org.codehaus.jackson.map.ser.ScalarSerializerBase
{
    public static final org.codehaus.jackson.map.ser.impl.InetAddressSerializer instance;

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.impl.InetAddressSerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.impl.InetAddressSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.impl.InetAddressSerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.impl.InetAddressSerializer: org.codehaus.jackson.map.ser.impl.InetAddressSerializer instance> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.ser.impl.InetAddressSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.InetAddressSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ScalarSerializerBase: void <init>(java.lang.Class)>(class "Ljava/net/InetAddress;");

        return;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        java.net.InetAddress $r4;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;
        org.codehaus.jackson.map.ser.impl.InetAddressSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.InetAddressSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.net.InetAddress) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.InetAddressSerializer: void serialize(java.net.InetAddress,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serialize(java.net.InetAddress, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        java.net.InetAddress $r2;
        org.codehaus.jackson.JsonGenerator $r1;
        int $i0;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.String $r4, $r5;
        org.codehaus.jackson.map.ser.impl.InetAddressSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.InetAddressSerializer;

        $r2 := @parameter0: java.net.InetAddress;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = virtualinvoke $r2.<java.net.InetAddress: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r5 = $r4;

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(47);

        if $i0 < 0 goto label2;

        if $i0 != 0 goto label1;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(1);

        goto label2;

     label1:
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeString(java.lang.String)>($r5);

        return;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        java.net.InetAddress $r5;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r4;
        org.codehaus.jackson.map.ser.impl.InetAddressSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.InetAddressSerializer;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (java.net.InetAddress) $r4;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.InetAddressSerializer: void serializeWithType(java.net.InetAddress,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, $r1, $r2, $r3);

        return;
    }

    public void serializeWithType(java.net.InetAddress, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        java.net.InetAddress $r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.TypeSerializer $r4;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.ser.impl.InetAddressSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.InetAddressSerializer;

        $r1 := @parameter0: java.net.InetAddress;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator,java.lang.Class)>($r1, $r2, class "Ljava/net/InetAddress;");

        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.InetAddressSerializer: void serialize(java.net.InetAddress,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        return;
    }
}
