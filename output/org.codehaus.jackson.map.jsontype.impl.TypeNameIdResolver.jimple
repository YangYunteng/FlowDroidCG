public class org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver extends org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase
{
    public final org.codehaus.jackson.map.MapperConfig _config;
    public final java.util.HashMap _idToType;
    public final java.util.HashMap _typeToId;

    public void <init>(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, java.util.HashMap, java.util.HashMap)
    {
        org.codehaus.jackson.map.type.TypeFactory $r5;
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        org.codehaus.jackson.type.JavaType $r2;
        java.util.HashMap $r3, $r4;
        org.codehaus.jackson.map.MapperConfig $r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        $r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: java.util.HashMap;

        $r4 := @parameter3: java.util.HashMap;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.type.TypeFactory)>($r2, $r5);

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: org.codehaus.jackson.map.MapperConfig _config> = $r1;

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _typeToId> = $r3;

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _idToType> = $r4;

        return;
    }

    public static java.lang.String _defaultTypeId(java.lang.Class)
    {
        int $i0;
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 >= 0 goto label1;

        return $r1;

     label1:
        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r1;
    }

    public static org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver construct(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, java.util.Collection, boolean, boolean)
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver $r13;
        java.util.HashMap $r3, $r4;
        org.codehaus.jackson.map.jsontype.NamedType $r7;
        org.codehaus.jackson.type.JavaType $r0, $r11;
        java.lang.String $r9, $r10;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        java.util.Collection $r2;
        org.codehaus.jackson.map.MapperConfig $r1;
        java.lang.IllegalArgumentException $r14;
        java.lang.Object $r6;
        java.lang.Class $r8, $r12;

        $r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        $r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter2: java.util.Collection;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        if $z0 == $z1 goto label10;

        $r3 = null;

        if $z0 == 0 goto label01;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        goto label02;

     label01:
        $r4 = null;

     label02:
        if $z1 == 0 goto label03;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

     label03:
        if $r2 == null goto label09;

        $r5 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.codehaus.jackson.map.jsontype.NamedType) $r6;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.Class getType()>();

        $z2 = virtualinvoke $r7.<org.codehaus.jackson.map.jsontype.NamedType: boolean hasName()>();

        if $z2 == 0 goto label05;

        $r9 = virtualinvoke $r7.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.String getName()>();

        goto label06;

     label05:
        $r9 = staticinvoke <org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.lang.String _defaultTypeId(java.lang.Class)>($r8);

     label06:
        if $z0 == 0 goto label07;

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

     label07:
        if $z1 == 0 goto label04;

        $r6 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (org.codehaus.jackson.type.JavaType) $r6;

        if $r11 == null goto label08;

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z2 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12);

        if $z2 == 0 goto label08;

        goto label04;

     label08:
        $r11 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.type.JavaType constructType(java.lang.Class)>($r8);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11);

        goto label04;

     label09:
        $r13 = new org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        specialinvoke $r13.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: void <init>(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,java.util.HashMap,java.util.HashMap)>($r1, $r0, $r4, $r3);

        return $r13;

     label10:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        goto label11;

     label11:
        throw $r14;
    }

    public org.codehaus.jackson.annotate.JsonTypeInfo$Id getMechanism()
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        r1 = <org.codehaus.jackson.annotate.JsonTypeInfo$Id: org.codehaus.jackson.annotate.JsonTypeInfo$Id NAME>;

        return r1;
    }

    public java.lang.String idFromValue(java.lang.Object)
    {
        java.lang.Throwable $r12;
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r9;
        java.util.HashMap $r1, $r5;
        org.codehaus.jackson.map.MapperConfig $r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r10;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r11;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r6;
        org.codehaus.jackson.map.BeanDescription $r8;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        $r2 := @parameter0: java.lang.Object;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r1 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _typeToId>;

        entermonitor $r1;

     label1:
        $r5 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _typeToId>;

        $r2 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.lang.String) $r2;

        if $r6 != null goto label4;

        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: org.codehaus.jackson.map.MapperConfig _config>;

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.map.MapperConfig: boolean isAnnotationProcessingEnabled()>();

        if $z0 == 0 goto label2;

        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: org.codehaus.jackson.map.MapperConfig _config>;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r3);

        $r9 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r8;

        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: org.codehaus.jackson.map.MapperConfig _config>;

        $r10 = virtualinvoke $r7.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r11 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r6 = virtualinvoke $r10.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findTypeName(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r11);

     label2:
        if $r6 != null goto label3;

        $r6 = staticinvoke <org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.lang.String _defaultTypeId(java.lang.Class)>($r3);

     label3:
        $r5 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _typeToId>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

     label4:
        exitmonitor $r1;

     label5:
        return $r6;

     label6:
        $r12 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r12;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.String idFromValueAndType(java.lang.Object, java.lang.Class)
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        java.lang.Class $r1;
        java.lang.Object $r3;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.lang.String idFromValue(java.lang.Object)>($r3);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.util.HashMap $r4;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = class "Lorg/codehaus/jackson/map/jsontype/impl/TypeNameIdResolver;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; id-to-type=");

        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _idToType>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType typeFromId(java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        org.codehaus.jackson.type.JavaType $r4;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        $r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _idToType>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r4 = (org.codehaus.jackson.type.JavaType) $r2;

        return $r4;
    }
}
