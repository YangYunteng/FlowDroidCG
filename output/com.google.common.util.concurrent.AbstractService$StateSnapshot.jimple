public final class com.google.common.util.concurrent.AbstractService$StateSnapshot extends java.lang.Object
{
    public final java.lang.Throwable failure;
    public final boolean shutdownWhenStartupFinishes;
    public final com.google.common.util.concurrent.Service$State state;

    public void <init>(com.google.common.util.concurrent.Service$State)
    {
        com.google.common.util.concurrent.AbstractService$StateSnapshot r0;
        com.google.common.util.concurrent.Service$State $r1;

        r0 := @this: com.google.common.util.concurrent.AbstractService$StateSnapshot;

        $r1 := @parameter0: com.google.common.util.concurrent.Service$State;

        specialinvoke r0.<com.google.common.util.concurrent.AbstractService$StateSnapshot: void <init>(com.google.common.util.concurrent.Service$State,boolean,java.lang.Throwable)>($r1, 0, null);

        return;
    }

    public void <init>(com.google.common.util.concurrent.Service$State, boolean, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        com.google.common.util.concurrent.AbstractService$StateSnapshot r0;
        com.google.common.util.concurrent.Service$State $r1, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.google.common.util.concurrent.AbstractService$StateSnapshot;

        $r1 := @parameter0: com.google.common.util.concurrent.Service$State;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z1 = 0;

        if $z0 == 0 goto label2;

        $r3 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State STARTING>;

        if $r1 != $r3 goto label1;

        goto label2;

     label1:
        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z2, "shutdownWhenStartupFinishes can only be set if state is STARTING. Got %s instead.", $r1);

        if $r2 == null goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        $r3 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State FAILED>;

        if $r1 != $r3 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        $z2 = $z2 ^ $z3;

        if $z2 != 0 goto label8;

        $z1 = 1;

     label8:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z1, "A failure cause should be set if and only if the state is failed.  Got %s and %s instead.", $r1, $r2);

        r0.<com.google.common.util.concurrent.AbstractService$StateSnapshot: com.google.common.util.concurrent.Service$State state> = $r1;

        r0.<com.google.common.util.concurrent.AbstractService$StateSnapshot: boolean shutdownWhenStartupFinishes> = $z0;

        r0.<com.google.common.util.concurrent.AbstractService$StateSnapshot: java.lang.Throwable failure> = $r2;

        return;
    }

    public com.google.common.util.concurrent.Service$State externalState()
    {
        com.google.common.util.concurrent.Service$State $r1, $r2;
        com.google.common.util.concurrent.AbstractService$StateSnapshot r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractService$StateSnapshot;

        $z0 = r0.<com.google.common.util.concurrent.AbstractService$StateSnapshot: boolean shutdownWhenStartupFinishes>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.common.util.concurrent.AbstractService$StateSnapshot: com.google.common.util.concurrent.Service$State state>;

        $r1 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State STARTING>;

        if $r2 != $r1 goto label1;

        $r1 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State STOPPING>;

        return $r1;

     label1:
        $r1 = r0.<com.google.common.util.concurrent.AbstractService$StateSnapshot: com.google.common.util.concurrent.Service$State state>;

        return $r1;
    }

    public java.lang.Throwable failureCause()
    {
        java.lang.Throwable r3;
        com.google.common.util.concurrent.Service$State $r1, $r2;
        com.google.common.util.concurrent.AbstractService$StateSnapshot r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractService$StateSnapshot;

        $r1 = r0.<com.google.common.util.concurrent.AbstractService$StateSnapshot: com.google.common.util.concurrent.Service$State state>;

        $r2 = <com.google.common.util.concurrent.Service$State: com.google.common.util.concurrent.Service$State FAILED>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = r0.<com.google.common.util.concurrent.AbstractService$StateSnapshot: com.google.common.util.concurrent.Service$State state>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object)>($z0, "failureCause() is only valid if the service has failed, service is %s", $r1);

        r3 = r0.<com.google.common.util.concurrent.AbstractService$StateSnapshot: java.lang.Throwable failure>;

        return r3;
    }
}
