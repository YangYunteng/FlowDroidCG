public final class com.google.common.base.Ascii extends java.lang.Object
{
    public static final byte ACK;
    public static final byte BEL;
    public static final byte BS;
    public static final byte CAN;
    public static final byte CR;
    public static final byte DC1;
    public static final byte DC2;
    public static final byte DC3;
    public static final byte DC4;
    public static final byte DEL;
    public static final byte DLE;
    public static final byte EM;
    public static final byte ENQ;
    public static final byte EOT;
    public static final byte ESC;
    public static final byte ETB;
    public static final byte ETX;
    public static final byte FF;
    public static final byte FS;
    public static final byte GS;
    public static final byte HT;
    public static final byte LF;
    public static final char MAX;
    public static final char MIN;
    public static final byte NAK;
    public static final byte NL;
    public static final byte NUL;
    public static final byte RS;
    public static final byte SI;
    public static final byte SO;
    public static final byte SOH;
    public static final byte SP;
    public static final byte SPACE;
    public static final byte STX;
    public static final byte SUB;
    public static final byte SYN;
    public static final byte US;
    public static final byte VT;
    public static final byte XOFF;
    public static final byte XON;

    public void <init>()
    {
        com.google.common.base.Ascii r0;

        r0 := @this: com.google.common.base.Ascii;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        char $c2, $c3;
        int $i0, $i1, $i4, $i5;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label7;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $i4 = (int) $c2;

        $i5 = (int) $c3;

        if $i4 != $i5 goto label4;

        goto label5;

     label4:
        $i4 = staticinvoke <com.google.common.base.Ascii: int getAlphaIndex(char)>($c2);

        if $i4 >= 26 goto label6;

        $i5 = staticinvoke <com.google.common.base.Ascii: int getAlphaIndex(char)>($c3);

        if $i4 != $i5 goto label8;

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        return 0;

     label7:
        return 1;

     label8:
        return 0;
    }

    public static int getAlphaIndex(char)
    {
        int $i1, $i2;
        char $c0;

        $c0 := @parameter0: char;

        $c0 = $c0 | 32;

        $i1 = (int) $c0;

        $i2 = -97;

        $i1 = $i1 + $i2;

        $c0 = (char) $i1;

        $i1 = (int) $c0;

        return $i1;
    }

    public static boolean isLowerCase(char)
    {
        int $i1;
        char $c0;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 < 97 goto label1;

        $i1 = (int) $c0;

        if $i1 > 122 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isUpperCase(char)
    {
        int $i1;
        char $c0;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 < 65 goto label1;

        $i1 = (int) $c0;

        if $i1 > 90 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static char toLowerCase(char)
    {
        char $c0;
        boolean $z0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean isUpperCase(char)>($c0);

        if $z0 == 0 goto label1;

        $c0 = $c0 ^ 32;

     label1:
        return $c0;
    }

    public static java.lang.String toLowerCase(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1;
        char[] $r2;
        char $c2;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $z0 = $r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.String) $r0;

        $r1 = staticinvoke <com.google.common.base.Ascii: java.lang.String toLowerCase(java.lang.String)>($r1);

        return $r1;

     label1:
        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r2 = newarray (char)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $c2 = staticinvoke <com.google.common.base.Ascii: char toLowerCase(char)>($c2);

        $r2[$i0] = $c2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r2);

        return $r1;
    }

    public static java.lang.String toLowerCase(java.lang.String)
    {
        int $i0, $i1;
        char[] $r1;
        char $c2;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label6;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean isUpperCase(char)>($c2);

        if $z0 == 0 goto label5;

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

     label2:
        if $i1 >= $i0 goto label4;

        $c2 = $r1[$i1];

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean isUpperCase(char)>($c2);

        if $z0 == 0 goto label3;

        $c2 = $c2 ^ 32;

        $r1[$i1] = $c2;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r1);

        return $r0;

     label5:
        $i1 = $i1 + 1;

        goto label1;

     label6:
        return $r0;
    }

    public static char toUpperCase(char)
    {
        char $c0;
        boolean $z0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean isLowerCase(char)>($c0);

        if $z0 == 0 goto label1;

        $c0 = $c0 & 95;

     label1:
        return $c0;
    }

    public static java.lang.String toUpperCase(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1;
        char[] $r2;
        char $c2;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $z0 = $r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.String) $r0;

        $r1 = staticinvoke <com.google.common.base.Ascii: java.lang.String toUpperCase(java.lang.String)>($r1);

        return $r1;

     label1:
        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r2 = newarray (char)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $c2 = staticinvoke <com.google.common.base.Ascii: char toUpperCase(char)>($c2);

        $r2[$i0] = $c2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r2);

        return $r1;
    }

    public static java.lang.String toUpperCase(java.lang.String)
    {
        int $i0, $i1;
        char[] $r1;
        char $c2;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label6;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean isLowerCase(char)>($c2);

        if $z0 == 0 goto label5;

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

     label2:
        if $i1 >= $i0 goto label4;

        $c2 = $r1[$i1];

        $z0 = staticinvoke <com.google.common.base.Ascii: boolean isLowerCase(char)>($c2);

        if $z0 == 0 goto label3;

        $c2 = $c2 & 95;

        $r1[$i1] = $c2;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r1);

        return $r0;

     label5:
        $i1 = $i1 + 1;

        goto label1;

     label6:
        return $r0;
    }

    public static java.lang.String truncate(java.lang.CharSequence, int, java.lang.String)
    {
        java.lang.CharSequence $r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r3;
        java.lang.String $r0, $r2;
        boolean $z0;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i0 - $i1;

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "maxLength (%s) must be >= length of the truncation indicator (%s)", $i0, $i2);

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i2 > $i0 goto label3;

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r1 = $r2;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 > $i0 goto label3;

        return $r2;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r1, 0, $i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static void <clinit>()
    {
        <com.google.common.base.Ascii: byte XON> = 17;

        <com.google.common.base.Ascii: byte XOFF> = 19;

        <com.google.common.base.Ascii: byte VT> = 11;

        <com.google.common.base.Ascii: byte US> = 31;

        <com.google.common.base.Ascii: byte SYN> = 22;

        <com.google.common.base.Ascii: byte SUB> = 26;

        <com.google.common.base.Ascii: byte STX> = 2;

        <com.google.common.base.Ascii: byte SPACE> = 32;

        <com.google.common.base.Ascii: byte SP> = 32;

        <com.google.common.base.Ascii: byte SOH> = 1;

        <com.google.common.base.Ascii: byte SO> = 14;

        <com.google.common.base.Ascii: byte SI> = 15;

        <com.google.common.base.Ascii: byte RS> = 30;

        <com.google.common.base.Ascii: byte NUL> = 0;

        <com.google.common.base.Ascii: byte NL> = 10;

        <com.google.common.base.Ascii: byte NAK> = 21;

        <com.google.common.base.Ascii: char MIN> = 0;

        <com.google.common.base.Ascii: char MAX> = 127;

        <com.google.common.base.Ascii: byte LF> = 10;

        <com.google.common.base.Ascii: byte HT> = 9;

        <com.google.common.base.Ascii: byte GS> = 29;

        <com.google.common.base.Ascii: byte FS> = 28;

        <com.google.common.base.Ascii: byte FF> = 12;

        <com.google.common.base.Ascii: byte ETX> = 3;

        <com.google.common.base.Ascii: byte ETB> = 23;

        <com.google.common.base.Ascii: byte ESC> = 27;

        <com.google.common.base.Ascii: byte EOT> = 4;

        <com.google.common.base.Ascii: byte ENQ> = 5;

        <com.google.common.base.Ascii: byte EM> = 25;

        <com.google.common.base.Ascii: byte DLE> = 16;

        <com.google.common.base.Ascii: byte DEL> = 127;

        <com.google.common.base.Ascii: byte DC4> = 20;

        <com.google.common.base.Ascii: byte DC3> = 19;

        <com.google.common.base.Ascii: byte DC2> = 18;

        <com.google.common.base.Ascii: byte DC1> = 17;

        <com.google.common.base.Ascii: byte CR> = 13;

        <com.google.common.base.Ascii: byte CAN> = 24;

        <com.google.common.base.Ascii: byte BS> = 8;

        <com.google.common.base.Ascii: byte BEL> = 7;

        <com.google.common.base.Ascii: byte ACK> = 6;

        return;
    }
}
