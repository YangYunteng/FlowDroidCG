public class project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter extends project.android.imageprocessing.filter.CompositeFilter
{
    public static final java.lang.String UNIFORM_ASPECT_RATIO;
    public static final java.lang.String UNIFORM_BLUR_SIZE;
    public static final java.lang.String UNIFORM_EXCLUDE_CIRCLE_POINT;
    public static final java.lang.String UNIFORM_EXCLUDE_CIRCLE_RADIUS;
    public float aspectRatio;
    public int aspectRatioHandle;
    public project.android.imageprocessing.filter.processing.GaussianBlurFilter blur;
    public float blurSize;
    public int blurSizeHandle;
    public android.graphics.PointF excludedCirclePoint;
    public int excludedCirclePointHandle;
    public float excludedCircleRadius;
    public int excludedCircleRadiusHandle;

    public void <init>(float, float, android.graphics.PointF, float, float)
    {
        android.graphics.PointF $r1;
        project.android.imageprocessing.filter.processing.GaussianBlurFilter $r2;
        project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter r0;
        float $f0, $f1, $f2, $f3;

        r0 := @this: project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter;

        $f2 := @parameter0: float;

        $f3 := @parameter1: float;

        $r1 := @parameter2: android.graphics.PointF;

        $f0 := @parameter3: float;

        $f1 := @parameter4: float;

        specialinvoke r0.<project.android.imageprocessing.filter.CompositeFilter: void <init>(int)>(2);

        r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: float blurSize> = $f1;

        r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: float aspectRatio> = $f3;

        r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: android.graphics.PointF excludedCirclePoint> = $r1;

        r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: float excludedCircleRadius> = $f0;

        $r2 = new project.android.imageprocessing.filter.processing.GaussianBlurFilter;

        specialinvoke $r2.<project.android.imageprocessing.filter.processing.GaussianBlurFilter: void <init>(float)>($f2);

        r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: project.android.imageprocessing.filter.processing.GaussianBlurFilter blur> = $r2;

        $r2 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: project.android.imageprocessing.filter.processing.GaussianBlurFilter blur>;

        virtualinvoke $r2.<project.android.imageprocessing.input.GLTextureOutputRenderer: void addTarget(project.android.imageprocessing.output.GLTextureInputRenderer)>(r0);

        $r2 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: project.android.imageprocessing.filter.processing.GaussianBlurFilter blur>;

        virtualinvoke r0.<project.android.imageprocessing.filter.CompositeFilter: void registerInitialFilter(project.android.imageprocessing.filter.BasicFilter)>($r2);

        $r2 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: project.android.imageprocessing.filter.processing.GaussianBlurFilter blur>;

        virtualinvoke r0.<project.android.imageprocessing.filter.CompositeFilter: void registerTerminalFilter(project.android.imageprocessing.input.GLTextureOutputRenderer)>($r2);

        return;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter r0;

        r0 := @this: project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter;

        return "precision mediump float;\nuniform sampler2D u_Texture0;\nuniform sampler2D u_Texture1;\nvarying vec2 v_TexCoord;\nuniform float u_BlurSize;\nuniform float u_AspectRatio;\nuniform vec2 u_ExcludeCirclePoint;\nuniform float u_ExcludeCircleRadius;\nvoid main(){\n   vec4 sharpImageColor = texture2D(u_Texture0, v_TexCoord);\n   vec4 blurredImageColor = texture2D(u_Texture1, v_TexCoord);\n   vec2 texCoordAfterAspect = vec2(v_TexCoord.x, v_TexCoord.y * u_AspectRatio + 0.5 - 0.5 * u_AspectRatio);\n   float distanceFromCenter = distance(u_ExcludeCirclePoint, texCoordAfterAspect);\n   gl_FragColor = mix(blurredImageColor, sharpImageColor, smoothstep(u_ExcludeCircleRadius - u_BlurSize, u_ExcludeCircleRadius, distanceFromCenter));\n}\n";
    }

    public void initShaderHandles()
    {
        project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter r0;
        int $i0;

        r0 := @this: project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter;

        specialinvoke r0.<project.android.imageprocessing.filter.MultiInputFilter: void initShaderHandles()>();

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_BlurSize");

        r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: int blurSizeHandle> = $i0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_AspectRatio");

        r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: int aspectRatioHandle> = $i0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_ExcludeCirclePoint");

        r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: int excludedCirclePointHandle> = $i0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_ExcludeCircleRadius");

        r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: int excludedCircleRadiusHandle> = $i0;

        return;
    }

    public void newTextureReady(int, project.android.imageprocessing.input.GLTextureOutputRenderer, boolean)
    {
        project.android.imageprocessing.input.GLTextureOutputRenderer $r1;
        project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter r0;
        java.util.List $r2;
        project.android.imageprocessing.filter.processing.GaussianBlurFilter $r3;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter;

        $i0 := @parameter0: int;

        $r1 := @parameter1: project.android.imageprocessing.input.GLTextureOutputRenderer;

        $z0 := @parameter2: boolean;

        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List filterLocations>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 < 2 goto label1;

        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List filterLocations>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r1);

        if $z1 != 0 goto label2;

     label1:
        virtualinvoke r0.<project.android.imageprocessing.filter.MultiInputFilter: void clearRegisteredFilterLocations()>();

        virtualinvoke r0.<project.android.imageprocessing.filter.MultiInputFilter: void registerFilterLocation(project.android.imageprocessing.input.GLTextureOutputRenderer,int)>($r1, 0);

        $r3 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: project.android.imageprocessing.filter.processing.GaussianBlurFilter blur>;

        virtualinvoke r0.<project.android.imageprocessing.filter.MultiInputFilter: void registerFilterLocation(project.android.imageprocessing.input.GLTextureOutputRenderer,int)>($r3, 1);

        virtualinvoke r0.<project.android.imageprocessing.filter.CompositeFilter: void registerInputOutputFilter(project.android.imageprocessing.input.GLTextureOutputRenderer)>($r1);

     label2:
        specialinvoke r0.<project.android.imageprocessing.filter.CompositeFilter: void newTextureReady(int,project.android.imageprocessing.input.GLTextureOutputRenderer,boolean)>($i0, $r1, $z0);

        return;
    }

    public void passShaderValues()
    {
        android.graphics.PointF $r1;
        project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter r0;
        int $i0;
        float $f0, $f1;

        r0 := @this: project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter;

        specialinvoke r0.<project.android.imageprocessing.filter.MultiInputFilter: void passShaderValues()>();

        $i0 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: int blurSizeHandle>;

        $f0 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: float blurSize>;

        staticinvoke <android.opengl.GLES20: void glUniform1f(int,float)>($i0, $f0);

        $i0 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: int aspectRatioHandle>;

        $f0 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: float aspectRatio>;

        staticinvoke <android.opengl.GLES20: void glUniform1f(int,float)>($i0, $f0);

        $i0 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: int excludedCircleRadiusHandle>;

        $f0 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: float excludedCircleRadius>;

        staticinvoke <android.opengl.GLES20: void glUniform1f(int,float)>($i0, $f0);

        $i0 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: int excludedCirclePointHandle>;

        $r1 = r0.<project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: android.graphics.PointF excludedCirclePoint>;

        $f0 = $r1.<android.graphics.PointF: float x>;

        $f1 = $r1.<android.graphics.PointF: float y>;

        staticinvoke <android.opengl.GLES20: void glUniform2f(int,float,float)>($i0, $f0, $f1);

        return;
    }

    public static void <clinit>()
    {
        <project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: java.lang.String UNIFORM_EXCLUDE_CIRCLE_RADIUS> = "u_ExcludeCircleRadius";

        <project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: java.lang.String UNIFORM_EXCLUDE_CIRCLE_POINT> = "u_ExcludeCirclePoint";

        <project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: java.lang.String UNIFORM_BLUR_SIZE> = "u_BlurSize";

        <project.android.imageprocessing.filter.processing.GaussianBlurPositionFilter: java.lang.String UNIFORM_ASPECT_RATIO> = "u_AspectRatio";

        return;
    }
}
