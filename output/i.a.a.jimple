public final class i.a.a extends java.lang.Object implements java.util.Collection, i.f.b.a.a
{
    public final java.lang.Object[] a;
    public final boolean b;

    public void <init>(java.lang.Object[], boolean)
    {
        i.a.a r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: i.a.a;

        $r1 := @parameter0: java.lang.Object[];

        $z0 := @parameter1: boolean;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "values");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<i.a.a: java.lang.Object[] a> = $r1;

        r0.<i.a.a: boolean b> = $z0;

        return;
    }

    public int a()
    {
        int $i0;
        i.a.a r0;
        java.lang.Object[] $r1;

        r0 := @this: i.a.a;

        $r1 = r0.<i.a.a: java.lang.Object[] a>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        i.a.a r0;
        java.lang.Object $r1;

        r0 := @this: i.a.a;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        i.a.a r0;
        java.util.Collection $r1;

        r0 := @this: i.a.a;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r1;
        i.a.a r0;

        r0 := @this: i.a.a;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public boolean contains(java.lang.Object)
    {
        i.a.a r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: i.a.a;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<i.a.a: java.lang.Object[] a>;

        $z0 = staticinvoke <i.a.e: boolean a(java.lang.Object[],java.lang.Object)>($r1, $r2);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        i.a.a r0;
        java.util.Iterator $r2;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: i.a.a;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "elements");

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke r0.<i.a.a: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        return 0;

     label3:
        return 1;
    }

    public boolean isEmpty()
    {
        int $i0;
        i.a.a r0;
        java.lang.Object[] $r1;

        r0 := @this: i.a.a;

        $r1 = r0.<i.a.a: java.lang.Object[] a>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        i.a.a r0;
        java.lang.Object[] $r2;
        java.util.Iterator $r1;

        r0 := @this: i.a.a;

        $r2 = r0.<i.a.a: java.lang.Object[] a>;

        $r1 = staticinvoke <i.f.b.b: java.util.Iterator a(java.lang.Object[])>($r2);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        i.a.a r0;
        java.lang.Object $r1;

        r0 := @this: i.a.a;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        i.a.a r0;
        java.util.Collection $r1;

        r0 := @this: i.a.a;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        i.a.a r0;
        java.util.Collection $r1;

        r0 := @this: i.a.a;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public final volatile int size()
    {
        int $i0;
        i.a.a r0;

        r0 := @this: i.a.a;

        $i0 = virtualinvoke r0.<i.a.a: int a()>();

        return $i0;
    }

    public final java.lang.Object[] toArray()
    {
        i.a.a r0;
        java.lang.Object[] $r1;
        boolean $z0;

        r0 := @this: i.a.a;

        $r1 = r0.<i.a.a: java.lang.Object[] a>;

        $z0 = r0.<i.a.a: boolean b>;

        $r1 = staticinvoke <i.a.g: java.lang.Object[] a(java.lang.Object[],boolean)>($r1, $z0);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        i.a.a r0;
        java.lang.Object[] $r1;

        r0 := @this: i.a.a;

        $r1 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <i.f.b.f: java.lang.Object[] a(java.util.Collection,java.lang.Object[])>(r0, $r1);

        return $r1;
    }
}
