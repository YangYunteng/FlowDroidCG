public abstract class com.google.common.reflect.TypeCapture extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.reflect.TypeCapture r0;

        r0 := @this: com.google.common.reflect.TypeCapture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.reflect.Type capture()
    {
        com.google.common.reflect.TypeCapture r0;
        java.lang.reflect.ParameterizedType $r3;
        java.lang.reflect.Type $r2;
        java.lang.reflect.Type[] $r4;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeCapture;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $z0 = $r2 instanceof java.lang.reflect.ParameterizedType;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "%s isn\'t parameterized", $r2);

        $r3 = (java.lang.reflect.ParameterizedType) $r2;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r2 = $r4[0];

        return $r2;
    }
}
