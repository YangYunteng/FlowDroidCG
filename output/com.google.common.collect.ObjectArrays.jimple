public final class com.google.common.collect.ObjectArrays extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.collect.ObjectArrays r0;

        r0 := @this: com.google.common.collect.ObjectArrays;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object checkElementNotNull(java.lang.Object, int)
    {
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.Object $r2;
        java.lang.String $r1;
        java.lang.NullPointerException $r3;

        $r2 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = new java.lang.NullPointerException;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at index ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }

    public static transient java.lang.Object[] checkElementsNotNull(java.lang.Object[])
    {
        int $i0;
        java.lang.Object[] $r0;

        $r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] checkElementsNotNull(java.lang.Object[],int)>($r0, $i0);

        return $r0;
    }

    public static java.lang.Object[] checkElementsNotNull(java.lang.Object[], int)
    {
        java.lang.Object[] $r0;
        int $i0, $i1;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r0[$i1];

        staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object checkElementNotNull(java.lang.Object,int)>($r1, $i1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public static java.lang.Object[] concat(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] $r0, $r1;
        int $i0;
        java.lang.Object $r2;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object[];

        $i0 = lengthof $r0;

        $i0 = $i0 + 1;

        $r1 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] newArray(java.lang.Object[],int)>($r0, $i0);

        $r1[0] = $r2;

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 1, $i0);

        return $r1;
    }

    public static java.lang.Object[] concat(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] $r1, $r2;
        int $i0;
        java.lang.Object $r0;

        $r2 := @parameter0: java.lang.Object[];

        $r0 := @parameter1: java.lang.Object;

        $i0 = lengthof $r2;

        $i0 = $i0 + 1;

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $i0 = lengthof $r2;

        $r1[$i0] = $r0;

        return $r1;
    }

    public static java.lang.Object[] concat(java.lang.Object[], java.lang.Object[], java.lang.Class)
    {
        java.lang.Object[] $r0, $r1, $r2;
        int $i0, $i1;
        java.lang.Class $r3;

        $r2 := @parameter0: java.lang.Object[];

        $r0 := @parameter1: java.lang.Object[];

        $r3 := @parameter2: java.lang.Class;

        $i0 = lengthof $r2;

        $i1 = lengthof $r0;

        $i0 = $i0 + $i1;

        $r1 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] newArray(java.lang.Class,int)>($r3, $i0);

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        $i0 = lengthof $r2;

        $i1 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, $i0, $i1);

        return $r1;
    }

    public static java.lang.Object[] copyAsObjectArray(java.lang.Object[], int, int)
    {
        java.lang.Object[] $r0, $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i2, $i3);

        if $i1 != 0 goto label1;

        $r0 = newarray (java.lang.Object)[0];

        return $r0;

     label1:
        $r1 = newarray (java.lang.Object)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r1, 0, $i1);

        return $r1;
    }

    public static java.lang.Object[] fillArray(java.lang.Iterable, java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.util.Iterator $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.Iterable $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Object[];

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r0[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public static java.lang.Object[] newArray(java.lang.Class, int)
    {
        java.lang.Object[] $r2;
        int $i0;
        java.lang.Object $r0;
        java.lang.Class $r1;

        $r1 := @parameter0: java.lang.Class;

        $i0 := @parameter1: int;

        $r0 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, $i0);

        $r2 = (java.lang.Object[]) $r0;

        return $r2;
    }

    public static java.lang.Object[] newArray(java.lang.Object[], int)
    {
        int $i0;
        java.lang.Object[] $r0;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $r0 = staticinvoke <com.google.common.collect.Platform: java.lang.Object[] newArray(java.lang.Object[],int)>($r0, $i0);

        return $r0;
    }

    public static void swap(java.lang.Object[], int, int)
    {
        java.lang.Object[] $r0;
        int $i0, $i1;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = $r0[$i0];

        $r2 = $r0[$i1];

        $r0[$i0] = $r2;

        $r0[$i1] = $r1;

        return;
    }

    public static java.lang.Object[] toArrayImpl(java.util.Collection)
    {
        int $i0;
        java.lang.Object[] $r1;
        java.util.Collection $r0;

        $r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        $r1 = newarray (java.lang.Object)[$i0];

        staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] fillArray(java.lang.Iterable,java.lang.Object[])>($r0, $r1);

        return $r1;
    }

    public static java.lang.Object[] toArrayImpl(java.util.Collection, java.lang.Object[])
    {
        java.lang.Object[] $r1;
        java.util.Collection $r0;
        int $i0, $i1;

        $r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.lang.Object[];

        $i1 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        $i0 = lengthof $r1;

        if $i0 >= $i1 goto label1;

        $r1 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] newArray(java.lang.Object[],int)>($r1, $i1);

     label1:
        staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] fillArray(java.lang.Iterable,java.lang.Object[])>($r0, $r1);

        $i0 = lengthof $r1;

        if $i0 <= $i1 goto label2;

        $r1[$i1] = null;

     label2:
        return $r1;
    }

    public static java.lang.Object[] toArrayImpl(java.lang.Object[], int, int, java.lang.Object[])
    {
        java.lang.Object[] $r0, $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: java.lang.Object[];

        $i3 = $i0 + $i1;

        $i2 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i3, $i2);

        $i2 = lengthof $r1;

        if $i2 >= $i1 goto label1;

        $r1 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] newArray(java.lang.Object[],int)>($r1, $i1);

        goto label2;

     label1:
        $i2 = lengthof $r1;

        if $i2 <= $i1 goto label2;

        $r1[$i1] = null;

     label2:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r1, 0, $i1);

        return $r1;
    }
}
