public class org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver extends org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase
{

    public void <init>(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.type.TypeFactory)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: org.codehaus.jackson.map.type.TypeFactory;

        specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.type.TypeFactory)>($r1, $r2);

        return;
    }

    public final java.lang.String _idFrom(java.lang.Object, java.lang.Class)
    {
        java.util.EnumMap $r8;
        org.codehaus.jackson.map.type.CollectionType $r7;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;
        org.codehaus.jackson.map.type.TypeFactory $r6;
        org.codehaus.jackson.map.type.MapType $r9;
        int $i0;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        java.lang.String $r4, $r10;
        java.util.EnumSet $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Class;

        $r3 = class "Ljava/lang/Enum;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isEnum()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getSuperclass()>();

     label1:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("java.util");

        if $z0 == 0 goto label5;

        $z0 = $r1 instanceof java.util.EnumSet;

        if $z0 == 0 goto label2;

        $r5 = (java.util.EnumSet) $r1;

        $r2 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findEnumType(java.util.EnumSet)>($r5);

        $r6 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory defaultInstance()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.CollectionType constructCollectionType(java.lang.Class,java.lang.Class)>(class "Ljava/util/EnumSet;", $r2);

        $r4 = virtualinvoke $r7.<org.codehaus.jackson.map.type.TypeBase: java.lang.String toCanonical()>();

        return $r4;

     label2:
        $z0 = $r1 instanceof java.util.EnumMap;

        if $z0 == 0 goto label3;

        $r8 = (java.util.EnumMap) $r1;

        $r2 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findEnumType(java.util.EnumMap)>($r8);

        $r6 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.TypeFactory defaultInstance()>();

        $r9 = virtualinvoke $r6.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.map.type.MapType constructMapType(java.lang.Class,java.lang.Class,java.lang.Class)>(class "Ljava/util/EnumMap;", $r2, class "Ljava/lang/Object;");

        $r4 = virtualinvoke $r9.<org.codehaus.jackson.map.type.TypeBase: java.lang.String toCanonical()>();

        return $r4;

     label3:
        $r10 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(9);

        $z0 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>(".Arrays$");

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>(".Collections$");

        if $z0 == 0 goto label5;

     label4:
        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>("List");

        if $i0 < 0 goto label5;

        return "java.util.ArrayList";

     label5:
        return $r4;
    }

    public org.codehaus.jackson.annotate.JsonTypeInfo$Id getMechanism()
    {
        org.codehaus.jackson.annotate.JsonTypeInfo$Id r1;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        r1 = <org.codehaus.jackson.annotate.JsonTypeInfo$Id: org.codehaus.jackson.annotate.JsonTypeInfo$Id CLASS>;

        return r1;
    }

    public java.lang.String idFromValue(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: java.lang.String _idFrom(java.lang.Object,java.lang.Class)>($r1, $r2);

        return $r3;
    }

    public java.lang.String idFromValueAndType(java.lang.Object, java.lang.Class)
    {
        java.lang.Class $r1;
        java.lang.Object $r3;
        java.lang.String $r2;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: java.lang.String _idFrom(java.lang.Object,java.lang.Class)>($r3, $r1);

        return $r2;
    }

    public void registerSubtype(java.lang.Class, java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        return;
    }

    public org.codehaus.jackson.type.JavaType typeFromId(java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;
        java.lang.IllegalArgumentException $r9;
        java.lang.Exception $r8;
        org.codehaus.jackson.map.type.TypeFactory $r7;
        java.lang.Thread $r4;
        int $i0;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.ClassNotFoundException $r1;
        java.lang.Class $r6;
        java.lang.StringBuilder $r10;
        java.lang.String $r2;
        java.lang.ClassLoader $r5;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        $r2 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(60);

        if $i0 <= 0 goto label1;

        $r3 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType fromCanonical(java.lang.String)>($r2);

        return $r3;

     label1:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r2, 1, $r5);

     label2:
        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase: org.codehaus.jackson.map.type.TypeFactory _typeFactory>;

        $r3 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase: org.codehaus.jackson.type.JavaType _baseType>;

     label3:
        $r3 = virtualinvoke $r7.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r3, $r6);

     label4:
        return $r3;

     label5:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type id \'");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (for id type \'Id.class\'): ");

        $r2 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r8);

        throw $r9;

     label6:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type id \'");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (for id type \'Id.class\'): no such class found");

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r9;

     label7:
        $r1 := @caughtexception;

        goto label6;

        catch java.lang.ClassNotFoundException from label1 to label2 with label7;
        catch java.lang.ClassNotFoundException from label3 to label4 with label7;
        catch java.lang.Exception from label1 to label4 with label5;
    }
}
