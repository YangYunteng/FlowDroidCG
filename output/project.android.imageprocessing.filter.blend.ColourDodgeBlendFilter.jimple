public class project.android.imageprocessing.filter.blend.ColourDodgeBlendFilter extends project.android.imageprocessing.filter.MultiInputFilter
{

    public void <init>()
    {
        project.android.imageprocessing.filter.blend.ColourDodgeBlendFilter r0;

        r0 := @this: project.android.imageprocessing.filter.blend.ColourDodgeBlendFilter;

        specialinvoke r0.<project.android.imageprocessing.filter.MultiInputFilter: void <init>(int)>(2);

        return;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.filter.blend.ColourDodgeBlendFilter r0;

        r0 := @this: project.android.imageprocessing.filter.blend.ColourDodgeBlendFilter;

        return "precision mediump float;\nuniform sampler2D u_Texture0;\nuniform sampler2D u_Texture1;\nvarying vec2 v_TexCoord;\nvoid main(){\n   vec4 color1 = texture2D(u_Texture0,v_TexCoord);\n   vec4 color2 = texture2D(u_Texture1,v_TexCoord);\n   vec3 baseOverlayAlphaProduct = vec3(color2.a * color1.a);\n   vec3 rightHandProduct = color2.rgb * (1.0 - color1.a) + color1.rgb * (1.0 - color2.a);\n   vec3 firstBlendColor = baseOverlayAlphaProduct + rightHandProduct;\n   vec3 overlayRGB = clamp((color2.rgb / clamp(color2.a, 0.01, 1.0)) * step(0.0, color2.a), 0.0, 0.99);\n   vec3 secondBlendColor = (color1.rgb * color2.a) / (1.0 - overlayRGB) + rightHandProduct;\n   vec3 colorChoice = step((color2.rgb * color1.a + color1.rgb * color2.a), baseOverlayAlphaProduct);\n   gl_FragColor = vec4(mix(firstBlendColor, secondBlendColor, colorChoice), 1.0);\n}\n";
    }
}
