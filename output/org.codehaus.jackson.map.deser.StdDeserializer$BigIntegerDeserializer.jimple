public class org.codehaus.jackson.map.deser.StdDeserializer$BigIntegerDeserializer extends org.codehaus.jackson.map.deser.StdScalarDeserializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.StdDeserializer$BigIntegerDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer$BigIntegerDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.StdScalarDeserializer: void <init>(java.lang.Class)>(class "Ljava/math/BigInteger;");

        return;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        java.math.BigInteger $r2;
        org.codehaus.jackson.map.deser.StdDeserializer$BigIntegerDeserializer r0;
        org.codehaus.jackson.map.DeserializationContext $r1;
        org.codehaus.jackson.JsonParser $r3;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer$BigIntegerDeserializer;

        $r3 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer$BigIntegerDeserializer: java.math.BigInteger deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r3, $r1);

        return $r2;
    }

    public java.math.BigInteger deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        org.codehaus.jackson.JsonToken $r4, $r5;
        long $l1;
        org.codehaus.jackson.map.deser.StdDeserializer$BigIntegerDeserializer r0;
        java.lang.IllegalArgumentException $r2;
        org.codehaus.jackson.JsonParser$NumberType $r7;
        org.codehaus.jackson.map.DeserializationContext $r1;
        java.math.BigDecimal $r9;
        org.codehaus.jackson.map.JsonMappingException $r12;
        int[] $r6;
        int $i0;
        java.math.BigInteger $r8;
        java.lang.Class $r11;
        java.lang.String $r10;
        org.codehaus.jackson.JsonParser $r3;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer$BigIntegerDeserializer;

        $r3 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r4 != $r5 goto label02;

        $r6 = <org.codehaus.jackson.map.deser.StdDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r7 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i0 = virtualinvoke $r7.<java.lang.Enum: int ordinal()>();

        $i0 = $r6[$i0];

        if $i0 == 1 goto label01;

        if $i0 == 2 goto label01;

        goto label04;

     label01:
        $l1 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        $r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        return $r8;

     label02:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r4 != $r5 goto label03;

        $r9 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        $r8 = virtualinvoke $r9.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        return $r8;

     label03:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r4 != $r5 goto label09;

     label04:
        $r10 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i0 != 0 goto label05;

        return null;

     label05:
        $r8 = new java.math.BigInteger;

     label06:
        specialinvoke $r8.<java.math.BigInteger: void <init>(java.lang.String)>($r10);

     label07:
        return $r8;

     label08:
        $r11 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r12 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r11, "not a valid representation");

        throw $r12;

     label09:
        $r11 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r12 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r11);

        throw $r12;

     label10:
        $r2 := @caughtexception;

        goto label08;

        catch java.lang.IllegalArgumentException from label06 to label07 with label10;
    }
}
