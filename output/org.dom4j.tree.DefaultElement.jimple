public class org.dom4j.tree.DefaultElement extends org.dom4j.tree.AbstractElement
{
    public static final transient org.dom4j.DocumentFactory DOCUMENT_FACTORY;
    public java.lang.Object attributes;
    public java.lang.Object content;
    public org.dom4j.Branch parentBranch;
    public org.dom4j.QName qname;

    static void <clinit>()
    {
        org.dom4j.DocumentFactory $r0;

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        <org.dom4j.tree.DefaultElement: org.dom4j.DocumentFactory DOCUMENT_FACTORY> = $r0;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.QName $r2;
        java.lang.String $r3;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r3 := @parameter0: java.lang.String;

        specialinvoke r0.<org.dom4j.tree.AbstractElement: void <init>()>();

        $r1 = <org.dom4j.tree.DefaultElement: org.dom4j.DocumentFactory DOCUMENT_FACTORY>;

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>($r3);

        r0.<org.dom4j.tree.DefaultElement: org.dom4j.QName qname> = $r2;

        return;
    }

    public void <init>(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Namespace $r1;
        org.dom4j.QName $r3;
        java.lang.String $r4;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r4 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.dom4j.Namespace;

        specialinvoke r0.<org.dom4j.tree.AbstractElement: void <init>()>();

        $r2 = <org.dom4j.tree.DefaultElement: org.dom4j.DocumentFactory DOCUMENT_FACTORY>;

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r4, $r1);

        r0.<org.dom4j.tree.DefaultElement: org.dom4j.QName qname> = $r3;

        return;
    }

    public void <init>(org.dom4j.QName)
    {
        org.dom4j.QName $r1;
        org.dom4j.tree.DefaultElement r0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.QName;

        specialinvoke r0.<org.dom4j.tree.AbstractElement: void <init>()>();

        r0.<org.dom4j.tree.DefaultElement: org.dom4j.QName qname> = $r1;

        return;
    }

    public void <init>(org.dom4j.QName, int)
    {
        org.dom4j.tree.DefaultElement r0;
        int $i0;
        org.dom4j.QName $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.QName;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.dom4j.tree.AbstractElement: void <init>()>();

        r0.<org.dom4j.tree.DefaultElement: org.dom4j.QName qname> = $r1;

        if $i0 <= 1 goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes> = $r2;

     label1:
        return;
    }

    public void add(org.dom4j.Attribute)
    {
        org.dom4j.tree.DefaultElement r0;
        java.util.List $r6;
        org.dom4j.IllegalAddException $r8;
        org.dom4j.Element $r2;
        org.dom4j.QName $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7;
        java.lang.String $r3;
        org.dom4j.Attribute $r1;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.Attribute;

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Element getParent()>();

        if $r2 != null goto label4;

        $r3 = interfaceinvoke $r1.<org.dom4j.Attribute: java.lang.String getValue()>();

        if $r3 != null goto label1;

        $r4 = interfaceinvoke $r1.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r1 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: org.dom4j.Attribute attribute(org.dom4j.QName)>($r4);

        if $r1 == null goto label5;

        virtualinvoke r0.<org.dom4j.tree.DefaultElement: boolean remove(org.dom4j.Attribute)>($r1);

        return;

     label1:
        $r5 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes>;

        if $r5 != null goto label2;

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes> = $r1;

        goto label3;

     label2:
        $r6 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: java.util.List attributeList()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r1);

     label3:
        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childAdded(org.dom4j.Node)>($r1);

        return;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("The Attribute already has an existing parent \"");

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Element getParent()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new org.dom4j.IllegalAddException;

        specialinvoke $r8.<org.dom4j.IllegalAddException: void <init>(org.dom4j.Element,org.dom4j.Node,java.lang.String)>(r0, $r1, $r3);

        throw $r8;

     label5:
        return;
    }

    public void addNewNode(org.dom4j.Node)
    {
        java.util.List $r2;
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Node $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.Node;

        $r3 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        if $r3 != null goto label1;

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object content> = $r1;

        goto label3;

     label1:
        $z0 = $r3 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r2 = (java.util.List) $r3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createContentList()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object content> = $r2;

     label3:
        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childAdded(org.dom4j.Node)>($r1);

        return;
    }

    public java.util.List additionalNamespaces()
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Namespace $r4, $r5;
        org.dom4j.tree.BackedList $r3;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r2 = (java.util.List) $r1;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r3;

     label2:
        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r1 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label3;

        $r4 = (org.dom4j.Namespace) $r1;

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Namespace getNamespace()>();

        $z0 = virtualinvoke $r4.<org.dom4j.Namespace: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        virtualinvoke $r3.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r4);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $z0 = $r1 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label6;

        $r4 = (org.dom4j.Namespace) $r1;

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Namespace getNamespace()>();

        $z0 = virtualinvoke $r4.<org.dom4j.Namespace: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label5;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createEmptyList()>();

        return $r2;

     label5:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createSingleResultList(java.lang.Object)>($r4);

        return $r2;

     label6:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createEmptyList()>();

        return $r2;
    }

    public java.util.List additionalNamespaces(java.lang.String)
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Namespace $r5;
        org.dom4j.tree.BackedList $r4;
        java.util.List $r3;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r1, $r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r3 = (java.util.List) $r2;

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r4;

     label2:
        $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r2 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label3;

        $r5 = (org.dom4j.Namespace) $r2;

        $r6 = virtualinvoke $r5.<org.dom4j.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label3;

        virtualinvoke $r4.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r5);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $z0 = $r2 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label5;

        $r5 = (org.dom4j.Namespace) $r2;

        $r6 = virtualinvoke $r5.<org.dom4j.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createSingleResultList(java.lang.Object)>($r5);

        return $r3;

     label5:
        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createEmptyList()>();

        return $r3;
    }

    public org.dom4j.Attribute attribute(int)
    {
        java.util.List $r2;
        org.dom4j.tree.DefaultElement r0;
        int $i0;
        java.lang.Object $r1;
        org.dom4j.Attribute $r3;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $i0 := @parameter0: int;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.dom4j.Attribute) $r1;

        return $r3;

     label1:
        if $r1 == null goto label2;

        if $i0 != 0 goto label2;

        $r3 = (org.dom4j.Attribute) $r1;

        return $r3;

     label2:
        return null;
    }

    public org.dom4j.Attribute attribute(java.lang.String)
    {
        org.dom4j.tree.DefaultElement r0;
        java.util.List $r3;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r1, $r5;
        org.dom4j.Attribute $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r3 = (java.util.List) $r2;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        goto label5;

     label2:
        $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (org.dom4j.Attribute) $r2;

        $r5 = interfaceinvoke $r4.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $r2 == null goto label5;

        $r4 = (org.dom4j.Attribute) $r2;

        $r5 = interfaceinvoke $r4.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label5;

        return $r4;

     label5:
        return null;
    }

    public org.dom4j.Attribute attribute(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Namespace $r1;
        org.dom4j.QName $r4;
        java.lang.String $r2;
        org.dom4j.Attribute $r5;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.dom4j.Namespace;

        $r3 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r2, $r1);

        $r5 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: org.dom4j.Attribute attribute(org.dom4j.QName)>($r4);

        return $r5;
    }

    public org.dom4j.Attribute attribute(org.dom4j.QName)
    {
        org.dom4j.tree.DefaultElement r0;
        java.util.List $r3;
        int $i0, $i1;
        org.dom4j.QName $r1, $r5;
        java.lang.Object $r2;
        org.dom4j.Attribute $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r3 = (java.util.List) $r2;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        goto label5;

     label2:
        $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (org.dom4j.Attribute) $r2;

        $r5 = interfaceinvoke $r4.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $z0 = virtualinvoke $r1.<org.dom4j.QName: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $r2 == null goto label5;

        $r4 = (org.dom4j.Attribute) $r2;

        $r5 = interfaceinvoke $r4.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $z0 = virtualinvoke $r1.<org.dom4j.QName: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label5;

        return $r4;

     label5:
        return null;
    }

    public int attributeCount()
    {
        java.util.List $r2;
        org.dom4j.tree.DefaultElement r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        return $i0;

     label1:
        if $r1 == null goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.util.Iterator attributeIterator()
    {
        java.util.List $r2;
        org.dom4j.tree.DefaultElement r0;
        java.util.Iterator $r3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;

     label1:
        if $r1 == null goto label2;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.Iterator createSingleIterator(java.lang.Object)>($r1);

        return $r3;

     label2:
        $r3 = <org.dom4j.tree.AbstractElement: java.util.Iterator EMPTY_ITERATOR>;

        return $r3;
    }

    public java.util.List attributeList()
    {
        java.util.List $r2;
        org.dom4j.tree.DefaultElement r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        return $r2;

     label1:
        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List createAttributeList()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes> = $r2;

        return $r2;

     label2:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List createAttributeList()>();

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes> = $r2;

        return $r2;
    }

    public java.util.List attributeList(int)
    {
        java.util.List $r2;
        org.dom4j.tree.DefaultElement r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $i0 := @parameter0: int;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        return $r2;

     label1:
        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List createAttributeList(int)>($i0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes> = $r2;

        return $r2;

     label2:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List createAttributeList(int)>($i0);

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes> = $r2;

        return $r2;
    }

    public java.util.List attributes()
    {
        org.dom4j.tree.ContentListFacade $r1;
        java.util.List $r2;
        org.dom4j.tree.DefaultElement r0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = new org.dom4j.tree.ContentListFacade;

        $r2 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: java.util.List attributeList()>();

        specialinvoke $r1.<org.dom4j.tree.ContentListFacade: void <init>(org.dom4j.tree.AbstractBranch,java.util.List)>(r0, $r2);

        return $r1;
    }

    public void clearContent()
    {
        java.lang.Object $r1;
        org.dom4j.tree.DefaultElement r0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void contentRemoved()>();

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object content> = null;

     label1:
        return;
    }

    public java.lang.Object clone()
    {
        java.lang.Object $r1;
        org.dom4j.tree.DefaultElement r0, $r2;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = specialinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.Object clone()>();

        $r2 = (org.dom4j.tree.DefaultElement) $r1;

        if $r2 == r0 goto label1;

        $r2.<org.dom4j.tree.DefaultElement: java.lang.Object content> = null;

        $r2.<org.dom4j.tree.DefaultElement: java.lang.Object attributes> = null;

        virtualinvoke $r2.<org.dom4j.tree.AbstractElement: void appendAttributes(org.dom4j.Element)>(r0);

        virtualinvoke $r2.<org.dom4j.tree.AbstractBranch: void appendContent(org.dom4j.Branch)>(r0);

     label1:
        return $r2;
    }

    public java.util.List contentList()
    {
        java.util.List $r1;
        org.dom4j.tree.DefaultElement r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r1 = (java.util.List) $r2;

        return $r1;

     label1:
        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createContentList()>();

        if $r2 == null goto label2;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label2:
        r0.<org.dom4j.tree.DefaultElement: java.lang.Object content> = $r1;

        return $r1;
    }

    public java.util.List declaredNamespaces()
    {
        java.util.List $r3;
        org.dom4j.tree.DefaultElement r0;
        int $i0, $i1;
        java.lang.Object $r2;
        org.dom4j.tree.BackedList $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r3 = (java.util.List) $r2;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r1;

     label2:
        $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r2 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r2);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $z0 = $r2 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label5;

        virtualinvoke $r1.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r2);

     label5:
        return $r1;
    }

    public org.dom4j.Element element(java.lang.String)
    {
        org.dom4j.tree.DefaultElement r0;
        java.util.List $r3;
        int $i0, $i1;
        java.lang.Object $r2;
        org.dom4j.Element $r4;
        java.lang.String $r1, $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r3 = (java.util.List) $r2;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        goto label5;

     label2:
        $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r2 instanceof org.dom4j.Element;

        if $z0 == 0 goto label3;

        $r4 = (org.dom4j.Element) $r2;

        $r5 = interfaceinvoke $r4.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $z0 = $r2 instanceof org.dom4j.Element;

        if $z0 == 0 goto label5;

        $r4 = (org.dom4j.Element) $r2;

        $r5 = interfaceinvoke $r4.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label5;

        return $r4;

     label5:
        return null;
    }

    public org.dom4j.Element element(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Namespace $r1;
        org.dom4j.QName $r4;
        org.dom4j.Element $r5;
        java.lang.String $r2;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.dom4j.Namespace;

        $r3 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r2, $r1);

        $r5 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: org.dom4j.Element element(org.dom4j.QName)>($r4);

        return $r5;
    }

    public org.dom4j.Element element(org.dom4j.QName)
    {
        org.dom4j.tree.DefaultElement r0;
        java.util.List $r3;
        int $i0, $i1;
        org.dom4j.QName $r1, $r5;
        java.lang.Object $r2;
        org.dom4j.Element $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r3 = (java.util.List) $r2;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        goto label5;

     label2:
        $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r2 instanceof org.dom4j.Element;

        if $z0 == 0 goto label3;

        $r4 = (org.dom4j.Element) $r2;

        $r5 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $z0 = virtualinvoke $r1.<org.dom4j.QName: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $z0 = $r2 instanceof org.dom4j.Element;

        if $z0 == 0 goto label5;

        $r4 = (org.dom4j.Element) $r2;

        $r5 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $z0 = virtualinvoke $r1.<org.dom4j.QName: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label5;

        return $r4;

     label5:
        return null;
    }

    public org.dom4j.Document getDocument()
    {
        org.dom4j.Document $r1;
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Branch $r2;
        org.dom4j.Element $r3;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r2 = r0.<org.dom4j.tree.DefaultElement: org.dom4j.Branch parentBranch>;

        $z0 = $r2 instanceof org.dom4j.Document;

        if $z0 == 0 goto label1;

        $r1 = (org.dom4j.Document) $r2;

        return $r1;

     label1:
        $z0 = $r2 instanceof org.dom4j.Element;

        if $z0 == 0 goto label2;

        $r3 = (org.dom4j.Element) $r2;

        $r1 = interfaceinvoke $r3.<org.dom4j.Node: org.dom4j.Document getDocument()>();

        return $r1;

     label2:
        return null;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.QName $r2;
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r2 = r0.<org.dom4j.tree.DefaultElement: org.dom4j.QName qname>;

        $r1 = virtualinvoke $r2.<org.dom4j.QName: org.dom4j.DocumentFactory getDocumentFactory()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r1 = <org.dom4j.tree.DefaultElement: org.dom4j.DocumentFactory DOCUMENT_FACTORY>;

        return $r1;
    }

    public org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Namespace $r3;
        java.util.List $r5;
        int $i0, $i1;
        java.lang.Object $r4;
        org.dom4j.Element $r6;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label01;

        $r1 = "";

     label01:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getNamespacePrefix()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label02;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Namespace getNamespace()>();

        return $r3;

     label02:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z0 == 0 goto label03;

        $r3 = <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE>;

        return $r3;

     label03:
        $r4 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r4 instanceof java.util.List;

        if $z0 == 0 goto label07;

        $r5 = (java.util.List) $r4;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i1 = 0;

     label04:
        if $i1 < $i0 goto label05;

        goto label08;

     label05:
        $r4 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r4 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label06;

        $r3 = (org.dom4j.Namespace) $r4;

        $r2 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label06;

        return $r3;

     label06:
        $i1 = $i1 + 1;

        goto label04;

     label07:
        $z0 = $r4 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label08;

        $r3 = (org.dom4j.Namespace) $r4;

        $r2 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label08;

        return $r3;

     label08:
        $r6 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: org.dom4j.Element getParent()>();

        if $r6 == null goto label09;

        $r3 = interfaceinvoke $r6.<org.dom4j.Element: org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)>($r1);

        if $r3 == null goto label09;

        return $r3;

     label09:
        if $r1 == null goto label11;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 > 0 goto label10;

        goto label11;

     label10:
        return null;

     label11:
        $r3 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        return $r3;
    }

    public org.dom4j.Namespace getNamespaceForURI(java.lang.String)
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Namespace $r3;
        java.util.List $r5;
        int $i0, $i1;
        java.lang.Object $r4;
        org.dom4j.Element $r6;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label9;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 > 0 goto label1;

        goto label9;

     label1:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Namespace getNamespace()>();

        return $r3;

     label2:
        $r4 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r4 instanceof java.util.List;

        if $z0 == 0 goto label6;

        $r5 = (java.util.List) $r4;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i1 = 0;

     label3:
        if $i1 < $i0 goto label4;

        goto label7;

     label4:
        $r4 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r4 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label5;

        $r3 = (org.dom4j.Namespace) $r4;

        $r2 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        return $r3;

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        $z0 = $r4 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label7;

        $r3 = (org.dom4j.Namespace) $r4;

        $r2 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label7;

        return $r3;

     label7:
        $r6 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: org.dom4j.Element getParent()>();

        if $r6 == null goto label8;

        $r3 = interfaceinvoke $r6.<org.dom4j.Element: org.dom4j.Namespace getNamespaceForURI(java.lang.String)>($r1);

        return $r3;

     label8:
        return null;

     label9:
        $r3 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        return $r3;
    }

    public org.dom4j.Element getParent()
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Branch $r1;
        org.dom4j.Element $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = r0.<org.dom4j.tree.DefaultElement: org.dom4j.Branch parentBranch>;

        $z0 = $r1 instanceof org.dom4j.Element;

        if $z0 == 0 goto label1;

        $r2 = (org.dom4j.Element) $r1;

        return $r2;

     label1:
        return null;
    }

    public org.dom4j.QName getQName()
    {
        org.dom4j.QName r1;
        org.dom4j.tree.DefaultElement r0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        r1 = r0.<org.dom4j.tree.DefaultElement: org.dom4j.QName qname>;

        return r1;
    }

    public java.lang.String getStringValue()
    {
        org.dom4j.tree.DefaultElement r0;
        java.util.List $r2;
        java.lang.StringBuffer $r4;
        int $i0, $i1, $i2;
        java.lang.Object $r1;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label5;

        $r2 = (java.util.List) $r1;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label6;

        $i1 = 0;

        if $i0 != 1 goto label1;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getContentAsStringValue(java.lang.Object)>($r1);

        return $r3;

     label1:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

     label2:
        if $i1 < $i0 goto label3;

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label3:
        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getContentAsStringValue(java.lang.Object)>($r1);

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 <= 0 goto label4;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        if $r1 == null goto label6;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getContentAsStringValue(java.lang.Object)>($r1);

        return $r3;

     label6:
        return "";
    }

    public java.lang.String getText()
    {
        org.dom4j.tree.DefaultElement r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getText()>();

        return $r2;

     label1:
        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getContentAsText(java.lang.Object)>($r1);

        return $r2;

     label2:
        return "";
    }

    public int indexOf(org.dom4j.Node)
    {
        java.util.List $r3;
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Node $r1;
        int $i0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.Node;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r3 = (java.util.List) $r2;

        $i0 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>($r1);

        return $i0;

     label1:
        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $i0 = -1;

        return $i0;
    }

    public org.dom4j.Node node(int)
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Node $r3;
        org.dom4j.tree.DefaultText $r4;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label6;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r2 = (java.util.List) $r1;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 < $i1 goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        goto label4;

     label2:
        if $i0 != 0 goto label3;

        goto label4;

     label3:
        $r1 = null;

     label4:
        if $r1 == null goto label6;

        $z0 = $r1 instanceof org.dom4j.Node;

        if $z0 == 0 goto label5;

        $r3 = (org.dom4j.Node) $r1;

        return $r3;

     label5:
        $r4 = new org.dom4j.tree.DefaultText;

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<org.dom4j.tree.DefaultText: void <init>(java.lang.String)>($r5);

        return $r4;

     label6:
        return null;
    }

    public int nodeCount()
    {
        java.util.List $r2;
        org.dom4j.tree.DefaultElement r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        return $i0;

     label1:
        if $r1 == null goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.util.Iterator nodeIterator()
    {
        java.util.List $r2;
        org.dom4j.tree.DefaultElement r0;
        java.util.Iterator $r3;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;

     label1:
        if $r1 == null goto label2;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.Iterator createSingleIterator(java.lang.Object)>($r1);

        return $r3;

     label2:
        $r3 = <org.dom4j.tree.AbstractElement: java.util.Iterator EMPTY_ITERATOR>;

        return $r3;
    }

    public org.dom4j.ProcessingInstruction processingInstruction(java.lang.String)
    {
        org.dom4j.tree.DefaultElement r0;
        java.util.List $r3;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r1, $r5;
        org.dom4j.ProcessingInstruction $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r3 = (java.util.List) $r2;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        goto label5;

     label2:
        $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r2 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label3;

        $r4 = (org.dom4j.ProcessingInstruction) $r2;

        $r5 = interfaceinvoke $r4.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $z0 = $r2 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label5;

        $r4 = (org.dom4j.ProcessingInstruction) $r2;

        $r5 = interfaceinvoke $r4.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label5;

        return $r4;

     label5:
        return null;
    }

    public java.util.List processingInstructions()
    {
        java.util.List $r2;
        org.dom4j.tree.DefaultElement r0;
        int $i0, $i1;
        java.lang.Object $r1;
        org.dom4j.tree.BackedList $r3;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r2 = (java.util.List) $r1;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r3;

     label2:
        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r1 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label3;

        virtualinvoke $r3.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r1);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $z0 = $r1 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label5;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createSingleResultList(java.lang.Object)>($r1);

        return $r2;

     label5:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createEmptyList()>();

        return $r2;
    }

    public java.util.List processingInstructions(java.lang.String)
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.tree.BackedList $r4;
        java.util.List $r3;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r1, $r6;
        org.dom4j.ProcessingInstruction $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r3 = (java.util.List) $r2;

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r4;

     label2:
        $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r2 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label3;

        $r5 = (org.dom4j.ProcessingInstruction) $r2;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        virtualinvoke $r4.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r5);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $z0 = $r2 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label5;

        $r5 = (org.dom4j.ProcessingInstruction) $r2;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label5;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createSingleResultList(java.lang.Object)>($r5);

        return $r3;

     label5:
        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createEmptyList()>();

        return $r3;
    }

    public boolean remove(org.dom4j.Attribute)
    {
        org.dom4j.tree.DefaultElement r0;
        java.util.List $r3;
        java.lang.Object $r2;
        org.dom4j.QName $r4, $r6;
        org.dom4j.Attribute $r1, $r5;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.Attribute;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes>;

        $z0 = $r2 instanceof java.util.List;

        $z1 = 1;

        if $z0 == 0 goto label2;

        $r3 = (java.util.List) $r2;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r4 = interfaceinvoke $r1.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r5 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: org.dom4j.Attribute attribute(org.dom4j.QName)>($r4);

        if $r5 == null goto label1;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>($r5);

        goto label5;

     label1:
        $z1 = $z0;

        goto label5;

     label2:
        if $r2 == null goto label4;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes> = null;

        goto label5;

     label3:
        $r5 = (org.dom4j.Attribute) $r2;

        $r4 = interfaceinvoke $r1.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r6 = interfaceinvoke $r5.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $z0 = virtualinvoke $r4.<org.dom4j.QName: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes> = null;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        if $z1 == 0 goto label6;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childRemoved(org.dom4j.Node)>($r1);

     label6:
        return $z1;
    }

    public boolean removeNode(org.dom4j.Node)
    {
        java.util.List $r3;
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Node $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.Node;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        if $r2 == null goto label2;

        if $r2 != $r1 goto label1;

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object content> = null;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r3 = (java.util.List) $r2;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>($r1);

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childRemoved(org.dom4j.Node)>($r1);

     label4:
        return $z0;
    }

    public boolean removeProcessingInstruction(java.lang.String)
    {
        org.dom4j.tree.DefaultElement r0;
        java.util.Iterator $r4;
        java.util.List $r3;
        java.lang.Object $r2;
        java.lang.String $r1, $r6;
        org.dom4j.ProcessingInstruction $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.tree.DefaultElement: java.lang.Object content>;

        $z0 = $r2 instanceof java.util.List;

        if $z0 == 0 goto label3;

        $r3 = (java.util.List) $r2;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $r2 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r2 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label1;

        $r5 = (org.dom4j.ProcessingInstruction) $r2;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        return 1;

     label3:
        $z0 = $r2 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label4;

        $r5 = (org.dom4j.ProcessingInstruction) $r2;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object content> = null;

        return 1;

     label4:
        return 0;
    }

    public void setAttributeList(java.util.List)
    {
        java.util.List $r1;
        org.dom4j.tree.DefaultElement r0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: java.util.List;

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes> = $r1;

        return;
    }

    public void setAttributes(java.util.List)
    {
        org.dom4j.tree.ContentListFacade $r2;
        java.util.List $r1;
        org.dom4j.tree.DefaultElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: java.util.List;

        $z0 = $r1 instanceof org.dom4j.tree.ContentListFacade;

        if $z0 == 0 goto label1;

        $r2 = (org.dom4j.tree.ContentListFacade) $r1;

        $r1 = virtualinvoke $r2.<org.dom4j.tree.ContentListFacade: java.util.List getBackingList()>();

     label1:
        r0.<org.dom4j.tree.DefaultElement: java.lang.Object attributes> = $r1;

        return;
    }

    public void setContent(java.util.List)
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Node $r5;
        org.dom4j.Text $r9;
        org.dom4j.DocumentFactory $r8;
        org.dom4j.tree.ContentListFacade $r2;
        java.util.List $r1, $r3;
        int $i0, $i1;
        java.lang.Object $r4;
        org.dom4j.Element $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void contentRemoved()>();

        $z0 = $r1 instanceof org.dom4j.tree.ContentListFacade;

        if $z0 == 0 goto label1;

        $r2 = (org.dom4j.tree.ContentListFacade) $r1;

        $r1 = virtualinvoke $r2.<org.dom4j.tree.ContentListFacade: java.util.List getBackingList()>();

     label1:
        if $r1 != null goto label2;

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object content> = null;

        return;

     label2:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createContentList(int)>($i0);

        $i1 = 0;

     label3:
        if $i1 < $i0 goto label4;

        r0.<org.dom4j.tree.DefaultElement: java.lang.Object content> = $r3;

        return;

     label4:
        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r4 instanceof org.dom4j.Node;

        if $z0 == 0 goto label6;

        $r5 = (org.dom4j.Node) $r4;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: org.dom4j.Element getParent()>();

        if $r6 == null goto label5;

        if $r6 == r0 goto label5;

        $r4 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.Object clone()>();

        $r5 = (org.dom4j.Node) $r4;

     label5:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childAdded(org.dom4j.Node)>($r5);

        goto label7;

     label6:
        if $r4 == null goto label7;

        $r7 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<org.dom4j.tree.DefaultElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r9 = virtualinvoke $r8.<org.dom4j.DocumentFactory: org.dom4j.Text createText(java.lang.String)>($r7);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childAdded(org.dom4j.Node)>($r9);

     label7:
        $i1 = $i1 + 1;

        goto label3;
    }

    public void setDocument(org.dom4j.Document)
    {
        org.dom4j.Document $r1;
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Branch $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.Document;

        $r2 = r0.<org.dom4j.tree.DefaultElement: org.dom4j.Branch parentBranch>;

        $z0 = $r2 instanceof org.dom4j.Document;

        if $z0 != 0 goto label1;

        if $r1 == null goto label2;

     label1:
        r0.<org.dom4j.tree.DefaultElement: org.dom4j.Branch parentBranch> = $r1;

     label2:
        return;
    }

    public void setParent(org.dom4j.Element)
    {
        org.dom4j.tree.DefaultElement r0;
        org.dom4j.Branch $r2;
        org.dom4j.Element $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = r0.<org.dom4j.tree.DefaultElement: org.dom4j.Branch parentBranch>;

        $z0 = $r2 instanceof org.dom4j.Element;

        if $z0 != 0 goto label1;

        if $r1 == null goto label2;

     label1:
        r0.<org.dom4j.tree.DefaultElement: org.dom4j.Branch parentBranch> = $r1;

     label2:
        return;
    }

    public void setQName(org.dom4j.QName)
    {
        org.dom4j.QName $r1;
        org.dom4j.tree.DefaultElement r0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        $r1 := @parameter0: org.dom4j.QName;

        r0.<org.dom4j.tree.DefaultElement: org.dom4j.QName qname> = $r1;

        return;
    }

    public boolean supportsParent()
    {
        org.dom4j.tree.DefaultElement r0;

        r0 := @this: org.dom4j.tree.DefaultElement;

        return 1;
    }
}
