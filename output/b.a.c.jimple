public abstract class b.a.c extends java.lang.Object
{
    public boolean a;
    public java.util.concurrent.CopyOnWriteArrayList b;

    public void <init>(boolean)
    {
        b.a.c r0;
        boolean $z0;
        java.util.concurrent.CopyOnWriteArrayList $r1;

        r0 := @this: b.a.c;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<b.a.c: java.util.concurrent.CopyOnWriteArrayList b> = $r1;

        r0.<b.a.c: boolean a> = $z0;

        return;
    }

    public abstract void a();

    public void a(b.a.a)
    {
        b.a.c r0;
        b.a.a $r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        r0 := @this: b.a.c;

        $r1 := @parameter0: b.a.a;

        $r2 = r0.<b.a.c: java.util.concurrent.CopyOnWriteArrayList b>;

        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }

    public final void a(boolean)
    {
        b.a.c r0;
        boolean $z0;

        r0 := @this: b.a.c;

        $z0 := @parameter0: boolean;

        r0.<b.a.c: boolean a> = $z0;

        return;
    }

    public void b(b.a.a)
    {
        b.a.c r0;
        b.a.a $r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        r0 := @this: b.a.c;

        $r1 := @parameter0: b.a.a;

        $r2 = r0.<b.a.c: java.util.concurrent.CopyOnWriteArrayList b>;

        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>($r1);

        return;
    }

    public final boolean b()
    {
        b.a.c r0;
        boolean z0;

        r0 := @this: b.a.c;

        z0 = r0.<b.a.c: boolean a>;

        return z0;
    }

    public final void c()
    {
        b.a.c r0;
        b.a.a $r4;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        boolean $z0;

        r0 := @this: b.a.c;

        $r1 = r0.<b.a.c: java.util.concurrent.CopyOnWriteArrayList b>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (b.a.a) $r3;

        interfaceinvoke $r4.<b.a.a: void cancel()>();

        goto label1;

     label2:
        return;
    }
}
