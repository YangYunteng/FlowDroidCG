public abstract class com.google.common.hash.AbstractNonStreamingHashFunction extends com.google.common.hash.AbstractHashFunction
{

    public void <init>()
    {
        com.google.common.hash.AbstractNonStreamingHashFunction r0;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction;

        specialinvoke r0.<com.google.common.hash.AbstractHashFunction: void <init>()>();

        return;
    }

    public com.google.common.hash.HashCode hashBytes(java.nio.ByteBuffer)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction r0;
        com.google.common.hash.HashCode $r3;
        int $i0;
        com.google.common.hash.Hasher $r2;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractNonStreamingHashFunction: com.google.common.hash.Hasher newHasher(int)>($i0);

        $r2 = interfaceinvoke $r2.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)>($r1);

        $r3 = interfaceinvoke $r2.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>();

        return $r3;
    }

    public abstract com.google.common.hash.HashCode hashBytes(byte[], int, int);

    public com.google.common.hash.HashCode hashInt(int)
    {
        java.nio.ByteOrder $r1;
        byte[] $r3;
        com.google.common.hash.AbstractNonStreamingHashFunction r0;
        com.google.common.hash.HashCode $r4;
        int $i0;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction;

        $i0 := @parameter0: int;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4);

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $r4 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.HashCode hashBytes(byte[])>($r3);

        return $r4;
    }

    public com.google.common.hash.HashCode hashLong(long)
    {
        java.nio.ByteOrder $r1;
        byte[] $r3;
        com.google.common.hash.AbstractNonStreamingHashFunction r0;
        com.google.common.hash.HashCode $r4;
        long $l0;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction;

        $l0 := @parameter0: long;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l0);

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $r4 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.HashCode hashBytes(byte[])>($r3);

        return $r4;
    }

    public com.google.common.hash.HashCode hashString(java.lang.CharSequence, java.nio.charset.Charset)
    {
        byte[] $r4;
        com.google.common.hash.AbstractNonStreamingHashFunction r0;
        java.nio.charset.Charset $r1;
        java.lang.CharSequence $r2;
        com.google.common.hash.HashCode $r5;
        java.lang.String $r3;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction;

        $r2 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r5 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.HashCode hashBytes(byte[])>($r4);

        return $r5;
    }

    public com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence)
    {
        byte[] $r4;
        java.lang.CharSequence $r1;
        com.google.common.hash.HashCode $r5;
        char $c2;
        java.nio.ByteBuffer $r2;
        java.nio.ByteOrder $r3;
        com.google.common.hash.AbstractNonStreamingHashFunction r0;
        int $i0, $i1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i0 * 2;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>($c2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $r5 = virtualinvoke r0.<com.google.common.hash.AbstractHashFunction: com.google.common.hash.HashCode hashBytes(byte[])>($r4);

        return $r5;
    }

    public com.google.common.hash.Hasher newHasher()
    {
        com.google.common.hash.AbstractNonStreamingHashFunction r0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractNonStreamingHashFunction: com.google.common.hash.Hasher newHasher(int)>(32);

        return $r1;
    }

    public com.google.common.hash.Hasher newHasher(int)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction r0;
        int $i0;
        boolean $z0;
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher $r1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r1 = new com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        specialinvoke $r1.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: void <init>(com.google.common.hash.AbstractNonStreamingHashFunction,int)>(r0, $i0);

        return $r1;
    }
}
