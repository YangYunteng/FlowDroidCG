public class org.apache.james.mime4j.codec.Base64OutputStream extends java.io.FilterOutputStream
{
    public static final boolean $assertionsDisabled;
    public static final java.util.Set BASE64_CHARS;
    public static final byte BASE64_PAD;
    public static final byte[] BASE64_TABLE;
    public static final byte[] CRLF_SEPARATOR;
    public static final int DEFAULT_LINE_LENGTH;
    public static final int ENCODED_BUFFER_SIZE;
    public static final int MASK_6BITS;
    public boolean closed;
    public int data;
    public final byte[] encoded;
    public final int lineLength;
    public int linePosition;
    public final byte[] lineSeparator;
    public int modulus;
    public int position;
    public final byte[] singleByte;

    static void <clinit>()
    {
        java.util.HashSet $r2;
        byte[] $r1;
        byte $b2;
        int $i0, $i1;
        java.util.Set $r0;
        java.lang.Byte $r3;

        <org.apache.james.mime4j.codec.Base64OutputStream: int MASK_6BITS> = 63;

        <org.apache.james.mime4j.codec.Base64OutputStream: int ENCODED_BUFFER_SIZE> = 2048;

        <org.apache.james.mime4j.codec.Base64OutputStream: int DEFAULT_LINE_LENGTH> = 76;

        <org.apache.james.mime4j.codec.Base64OutputStream: byte BASE64_PAD> = 61;

        <org.apache.james.mime4j.codec.Base64OutputStream: boolean $assertionsDisabled> = 0;

        $r1 = newarray (byte)[2];

        $r1[0] = 13;

        $r1[1] = 10;

        <org.apache.james.mime4j.codec.Base64OutputStream: byte[] CRLF_SEPARATOR> = $r1;

        $r1 = newarray (byte)[64];

        $r1[0] = 65;

        $r1[1] = 66;

        $r1[2] = 67;

        $r1[3] = 68;

        $r1[4] = 69;

        $r1[5] = 70;

        $r1[6] = 71;

        $r1[7] = 72;

        $r1[8] = 73;

        $r1[9] = 74;

        $r1[10] = 75;

        $r1[11] = 76;

        $r1[12] = 77;

        $r1[13] = 78;

        $r1[14] = 79;

        $r1[15] = 80;

        $r1[16] = 81;

        $r1[17] = 82;

        $r1[18] = 83;

        $r1[19] = 84;

        $r1[20] = 85;

        $r1[21] = 86;

        $r1[22] = 87;

        $r1[23] = 88;

        $r1[24] = 89;

        $r1[25] = 90;

        $r1[26] = 97;

        $r1[27] = 98;

        $r1[28] = 99;

        $r1[29] = 100;

        $r1[30] = 101;

        $r1[31] = 102;

        $r1[32] = 103;

        $r1[33] = 104;

        $r1[34] = 105;

        $r1[35] = 106;

        $r1[36] = 107;

        $r1[37] = 108;

        $r1[38] = 109;

        $r1[39] = 110;

        $r1[40] = 111;

        $r1[41] = 112;

        $r1[42] = 113;

        $r1[43] = 114;

        $r1[44] = 115;

        $r1[45] = 116;

        $r1[46] = 117;

        $r1[47] = 118;

        $r1[48] = 119;

        $r1[49] = 120;

        $r1[50] = 121;

        $r1[51] = 122;

        $r1[52] = 48;

        $r1[53] = 49;

        $r1[54] = 50;

        $r1[55] = 51;

        $r1[56] = 52;

        $r1[57] = 53;

        $r1[58] = 54;

        $r1[59] = 55;

        $r1[60] = 56;

        $r1[61] = 57;

        $r1[62] = 43;

        $r1[63] = 47;

        <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS> = $r2;

        $r1 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = $r1[$i1];

        $r0 = <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS>;

        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r0 = <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS>;

        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(61);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream $r1;
        byte[] $r2;
        org.apache.james.mime4j.codec.Base64OutputStream r0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] CRLF_SEPARATOR>;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream,int,byte[])>($r1, 76, $r2);

        return;
    }

    public void <init>(java.io.OutputStream, int)
    {
        java.io.OutputStream $r1;
        byte[] $r2;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        int $i0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] CRLF_SEPARATOR>;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream,int,byte[])>($r1, $i0, $r2);

        return;
    }

    public void <init>(java.io.OutputStream, int, byte[])
    {
        java.io.OutputStream $r2;
        byte[] $r1, $r3;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r2 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r2);

        $r3 = newarray (byte)[1];

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] singleByte> = $r3;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus> = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = 0;

        if $r2 == null goto label2;

        if $i0 < 0 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void checkLineSeparator(byte[])>($r1);

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength> = $i0;

        $i0 = lengthof $r1;

        $r3 = newarray (byte)[$i0];

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator> = $r3;

        $r3 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, $i0);

        $r1 = newarray (byte)[2048];

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded> = $r1;

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;
    }

    private void checkLineSeparator(byte[])
    {
        byte[] $r1;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        java.util.Set $r2;
        char $c4;
        java.lang.IllegalArgumentException $r7;
        short $s3;
        byte $b0;
        int $i1, $i2;
        java.lang.StringBuilder $r4, $r6;
        java.lang.String $r5;
        java.lang.Byte $r3;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: byte[];

        $i1 = lengthof $r1;

        if $i1 > 2048 goto label3;

        $i1 = lengthof $r1;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label5;

        $b0 = $r1[$i2];

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: java.util.Set BASE64_CHARS>;

        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        $r4 = $r6;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line separator must not contain base64 character \'");

        $s3 = (short) $b0;

        $s3 = $s3 & 255;

        $c4 = (char) $s3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("line separator length exceeds 2048");

        goto label4;

     label4:
        throw $r7;

     label5:
        return;
    }

    private void close0()
    {
        int $i0;
        org.apache.james.mime4j.codec.Base64OutputStream r0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus>;

        if $i0 == 0 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void writePad()>();

     label1:
        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if $i0 <= 0 goto label2;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        if $i0 <= 0 goto label2;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void writeLineSeparator()>();

     label2:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

        return;
    }

    private void flush0()
    {
        java.io.OutputStream $r1;
        byte[] $r2;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        int $i0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        if $i0 <= 0 goto label1;

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = 0;

     label1:
        return;
    }

    private void write0(byte[], int, int)
    {
        byte[] $r1, $r2, $r3;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        short $s5;
        byte $b4;
        int $i0, $i1, $i2, $i3, $i6, $i7;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

     label1:
        if $i2 >= $i0 goto label7;

        $i3 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i3 = $i3 << 8;

        $b4 = $r1[$i2];

        $s5 = (short) $b4;

        $s5 = $s5 & 255;

        $i1 = (int) $s5;

        $i3 = $i3 | $i1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data> = $i3;

        $i3 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus>;

        $i3 = $i3 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus> = $i3;

        if $i3 != 3 goto label6;

        $i3 = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus> = 0;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if $i1 <= 0 goto label4;

        $i6 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        if $i6 < $i1 goto label4;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = 0;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i1 = lengthof $r2;

        $i6 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i1 - $i6;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i6 = lengthof $r2;

        if $i1 >= $i6 goto label2;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label2:
        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i6 = lengthof $r2;

     label3:
        if $i3 >= $i6 goto label4;

        $b4 = $r2[$i3];

        $r3 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i7 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i7 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r3[$i7] = $b4;

        $i3 = $i3 + 1;

        goto label3;

     label4:
        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i3 = lengthof $r2;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i3 = $i3 - $i1;

        if $i3 >= 4 goto label5;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label5:
        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i3 = $i1 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i3;

        $r3 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i3 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i6 = $i3 >> 18;

        $i6 = $i6 & 63;

        $b4 = $r3[$i6];

        $r2[$i1] = $b4;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i6 = $i1 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i6;

        $i6 = $i3 >> 12;

        $i6 = $i6 & 63;

        $b4 = $r3[$i6];

        $r2[$i1] = $b4;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i6 = $i1 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i6;

        $i6 = $i3 >> 6;

        $i6 = $i6 & 63;

        $b4 = $r3[$i6];

        $r2[$i1] = $b4;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i6 = $i1 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i6;

        $i3 = $i3 & 63;

        $b4 = $r3[$i3];

        $r2[$i1] = $b4;

        $i3 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        $i3 = $i3 + 4;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = $i3;

     label6:
        $i2 = $i2 + 1;

        goto label1;

     label7:
        return;
    }

    private void writeLineSeparator()
    {
        byte[] $r1, $r2;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        byte $b0;
        int $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i3 = 0;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = 0;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i1 = lengthof $r1;

        $i2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i1 - $i2;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label1:
        $r2 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] lineSeparator>;

        $i4 = lengthof $r2;

     label2:
        if $i3 >= $i4 goto label3;

        $b0 = $r2[$i3];

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i2 = $i1 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i2;

        $r1[$i1] = $b0;

        $i3 = $i3 + 1;

        goto label2;

     label3:
        return;
    }

    private void writePad()
    {
        byte[] $r1, $r2;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        byte $b3;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int lineLength>;

        if $i0 <= 0 goto label1;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        if $i1 < $i0 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void writeLineSeparator()>();

     label1:
        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i0 = lengthof $r1;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i0 = $i0 - $i1;

        if $i0 >= 4 goto label2;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

     label2:
        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int modulus>;

        if $i0 != 1 goto label3;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i0 = $i1 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i0;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i2 = $i0 >> 2;

        $i2 = $i2 & 63;

        $b3 = $r2[$i2];

        $r1[$i1] = $b3;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i2 = $i1 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i2;

        $i0 = $i0 << 4;

        $i0 = $i0 & 63;

        $b3 = $r2[$i0];

        $r1[$i1] = $b3;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i0 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r1[$i0] = 61;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i0 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r1[$i0] = 61;

        goto label4;

     label3:
        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] encoded>;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i0 = $i1 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i0;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int data>;

        $i2 = $i0 >> 10;

        $i2 = $i2 & 63;

        $b3 = $r2[$i2];

        $r1[$i1] = $b3;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i2 = $i1 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i2;

        $i2 = $i0 >> 4;

        $i2 = $i2 & 63;

        $b3 = $r2[$i2];

        $r1[$i1] = $b3;

        $i1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i2 = $i1 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i2;

        $i0 = $i0 << 2;

        $i0 = $i0 & 63;

        $b3 = $r2[$i0];

        $r1[$i1] = $b3;

        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position>;

        $i1 = $i0 + 1;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int position> = $i1;

        $r1[$i0] = 61;

     label4:
        $i0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition>;

        $i0 = $i0 + 4;

        r0.<org.apache.james.mime4j.codec.Base64OutputStream: int linePosition> = $i0;

        return;
    }

    public void close()
    {
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed> = 1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void close0()>();

        return;
    }

    public void flush()
    {
        java.io.IOException $r1;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>();

        return;

     label1:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r1;
    }

    public final void write(int)
    {
        byte[] $r1;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        byte $b1;
        int $i0;
        java.io.IOException $r2;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $i0 := @parameter0: int;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: byte[] singleByte>;

        $b1 = (byte) $i0;

        $r1[0] = $b1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>($r1, 0, 1);

        return;

     label1:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r2;
    }

    public final void write(byte[])
    {
        byte[] $r1;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        int $i0;
        java.io.IOException $r3;
        java.lang.NullPointerException $r2;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: byte[];

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 != 0 goto label3;

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return;

     label1:
        $i0 = lengthof $r1;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>($r1, 0, $i0);

        return;

     label2:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label3:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r3;
    }

    public final void write(byte[], int, int)
    {
        byte[] $r1;
        java.lang.IndexOutOfBoundsException $r2;
        org.apache.james.mime4j.codec.Base64OutputStream r0;
        java.io.IOException $r4;
        java.lang.NullPointerException $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64OutputStream;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64OutputStream: boolean closed>;

        if $z0 != 0 goto label4;

        if $r1 == null goto label3;

        if $i2 < 0 goto label2;

        if $i0 < 0 goto label2;

        $i3 = $i2 + $i0;

        $i1 = lengthof $r1;

        if $i3 > $i1 goto label2;

        if $i0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>($r1, $i2, $i3);

        return;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label4:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Base64OutputStream has been closed");

        throw $r4;
    }
}
