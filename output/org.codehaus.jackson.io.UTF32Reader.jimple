public final class org.codehaus.jackson.io.UTF32Reader extends org.codehaus.jackson.io.BaseReader
{
    public final boolean mBigEndian;
    public int mByteCount;
    public int mCharCount;
    public char mSurrogate;

    public void <init>(org.codehaus.jackson.io.IOContext, java.io.InputStream, byte[], int, int, boolean)
    {
        byte[] $r2;
        org.codehaus.jackson.io.IOContext $r3;
        org.codehaus.jackson.io.UTF32Reader r0;
        int $i0, $i1;
        java.io.InputStream $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        $r3 := @parameter0: org.codehaus.jackson.io.IOContext;

        $r1 := @parameter1: java.io.InputStream;

        $r2 := @parameter2: byte[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $z0 := @parameter5: boolean;

        specialinvoke r0.<org.codehaus.jackson.io.BaseReader: void <init>(org.codehaus.jackson.io.IOContext,java.io.InputStream,byte[],int,int)>($r3, $r1, $r2, $i0, $i1);

        r0.<org.codehaus.jackson.io.UTF32Reader: char mSurrogate> = 0;

        r0.<org.codehaus.jackson.io.UTF32Reader: int mCharCount> = 0;

        r0.<org.codehaus.jackson.io.UTF32Reader: int mByteCount> = 0;

        r0.<org.codehaus.jackson.io.UTF32Reader: boolean mBigEndian> = $z0;

        return;
    }

    private boolean loadMore(int)
    {
        byte[] $r1;
        org.codehaus.jackson.io.UTF32Reader r0;
        java.lang.NullPointerException r3;
        byte $b3;
        int $i0, $i1, $i2;
        java.io.InputStream $r2;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        $i0 := @parameter0: int;

        $i1 = r0.<org.codehaus.jackson.io.UTF32Reader: int mByteCount>;

        $i2 = r0.<org.codehaus.jackson.io.BaseReader: int _length>;

        $i2 = $i2 - $i0;

        $i1 = $i1 + $i2;

        r0.<org.codehaus.jackson.io.UTF32Reader: int mByteCount> = $i1;

        if $i0 <= 0 goto label04;

        $i1 = r0.<org.codehaus.jackson.io.BaseReader: int _ptr>;

        if $i1 <= 0 goto label03;

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label02;

        $r1 = r0.<org.codehaus.jackson.io.BaseReader: byte[] _buffer>;

        $i2 = r0.<org.codehaus.jackson.io.BaseReader: int _ptr>;

        $i2 = $i2 + $i1;

        $b3 = $r1[$i2];

        $r1[$i1] = $b3;

        $i1 = $i1 + 1;

        goto label01;

     label02:
        r0.<org.codehaus.jackson.io.BaseReader: int _ptr> = 0;

     label03:
        r0.<org.codehaus.jackson.io.BaseReader: int _length> = $i0;

        goto label07;

     label04:
        r0.<org.codehaus.jackson.io.BaseReader: int _ptr> = 0;

        $r2 = r0.<org.codehaus.jackson.io.BaseReader: java.io.InputStream _in>;

        $r1 = r0.<org.codehaus.jackson.io.BaseReader: byte[] _buffer>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r1);

        if $i0 >= 1 goto label06;

        r0.<org.codehaus.jackson.io.BaseReader: int _length> = 0;

        if $i0 >= 0 goto label05;

        virtualinvoke r0.<org.codehaus.jackson.io.BaseReader: void freeBuffers()>();

        return 0;

     label05:
        virtualinvoke r0.<org.codehaus.jackson.io.BaseReader: void reportStrangeStream()>();

     label06:
        r0.<org.codehaus.jackson.io.BaseReader: int _length> = $i0;

     label07:
        $i0 = r0.<org.codehaus.jackson.io.BaseReader: int _length>;

        if $i0 >= 4 goto label10;

        $r2 = r0.<org.codehaus.jackson.io.BaseReader: java.io.InputStream _in>;

        $r1 = r0.<org.codehaus.jackson.io.BaseReader: byte[] _buffer>;

        $i1 = lengthof $r1;

        $i1 = $i1 - $i0;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i1);

        if $i0 >= 1 goto label09;

        if $i0 < 0 goto label08;

        virtualinvoke r0.<org.codehaus.jackson.io.BaseReader: void reportStrangeStream()>();

        goto label09;

     label08:
        virtualinvoke r0.<org.codehaus.jackson.io.BaseReader: void freeBuffers()>();

        $i0 = r0.<org.codehaus.jackson.io.BaseReader: int _length>;

        specialinvoke r0.<org.codehaus.jackson.io.UTF32Reader: void reportUnexpectedEOF(int,int)>($i0, 4);

        r3 = new java.lang.NullPointerException;

        specialinvoke r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r3;

     label09:
        $i1 = r0.<org.codehaus.jackson.io.BaseReader: int _length>;

        $i0 = $i1 + $i0;

        r0.<org.codehaus.jackson.io.BaseReader: int _length> = $i0;

        goto label07;

     label10:
        return 1;
    }

    private void reportInvalid(int, int, java.lang.String)
    {
        org.codehaus.jackson.io.UTF32Reader r0;
        java.io.CharConversionException $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String $r1, $r3;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $i2 = r0.<org.codehaus.jackson.io.UTF32Reader: int mByteCount>;

        $i3 = r0.<org.codehaus.jackson.io.BaseReader: int _ptr>;

        $i2 = $i2 + $i3;

        $i3 = -1;

        $i2 = $i2 + $i3;

        $i3 = r0.<org.codehaus.jackson.io.UTF32Reader: int mCharCount>;

        $i1 = $i3 + $i1;

        $r5 = new java.io.CharConversionException;

        $r4 = new java.lang.StringBuilder;

        $r2 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid UTF-32 character 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at char #");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", byte #");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.CharConversionException: void <init>(java.lang.String)>($r1);

        throw $r5;
    }

    private void reportUnexpectedEOF(int, int)
    {
        org.codehaus.jackson.io.UTF32Reader r0;
        java.io.CharConversionException $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = r0.<org.codehaus.jackson.io.UTF32Reader: int mByteCount>;

        $i3 = $i1 + $i2;

        $i1 = r0.<org.codehaus.jackson.io.UTF32Reader: int mCharCount>;

        $r1 = new java.io.CharConversionException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected EOF in the middle of a 4-byte UTF-32 char: got ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", needed ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", at char #");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", byte #");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.CharConversionException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public volatile void close()
    {
        org.codehaus.jackson.io.UTF32Reader r0;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        specialinvoke r0.<org.codehaus.jackson.io.BaseReader: void close()>();

        return;
    }

    public volatile int read()
    {
        int $i0;
        org.codehaus.jackson.io.UTF32Reader r0;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        $i0 = specialinvoke r0.<org.codehaus.jackson.io.BaseReader: int read()>();

        return $i0;
    }

    public int read(char[], int, int)
    {
        byte[] $r2;
        java.lang.NullPointerException $r6;
        short $s8, $s9;
        byte $b5;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i10;
        java.lang.String $r4;
        boolean $z0;
        org.codehaus.jackson.io.UTF32Reader r0;
        char $c4;
        char[] $r1;
        java.lang.StringBuilder $r3, $r5;

        r0 := @this: org.codehaus.jackson.io.UTF32Reader;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.codehaus.jackson.io.BaseReader: byte[] _buffer>;

        if $r2 != null goto label01;

        $i0 = -1;

        return $i0;

     label01:
        if $i1 >= 1 goto label02;

        return $i1;

     label02:
        if $i0 < 0 goto label03;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label04;

     label03:
        virtualinvoke r0.<org.codehaus.jackson.io.BaseReader: void reportBounds(char[],int,int)>($r1, $i0, $i1);

     label04:
        $i1 = $i1 + $i0;

        $c4 = r0.<org.codehaus.jackson.io.UTF32Reader: char mSurrogate>;

        if $c4 == 0 goto label05;

        $i2 = $i0 + 1;

        $r1[$i0] = $c4;

        r0.<org.codehaus.jackson.io.UTF32Reader: char mSurrogate> = 0;

        goto label07;

     label05:
        $i2 = r0.<org.codehaus.jackson.io.BaseReader: int _length>;

        $i3 = r0.<org.codehaus.jackson.io.BaseReader: int _ptr>;

        $i2 = $i2 - $i3;

        if $i2 >= 4 goto label06;

        $z0 = specialinvoke r0.<org.codehaus.jackson.io.UTF32Reader: boolean loadMore(int)>($i2);

        if $z0 != 0 goto label06;

        $i0 = -1;

        return $i0;

     label06:
        $i2 = $i0;

     label07:
        if $i2 >= $i1 goto label14;

        $i3 = r0.<org.codehaus.jackson.io.BaseReader: int _ptr>;

        $z0 = r0.<org.codehaus.jackson.io.UTF32Reader: boolean mBigEndian>;

        if $z0 == 0 goto label08;

        $r2 = r0.<org.codehaus.jackson.io.BaseReader: byte[] _buffer>;

        $b5 = $r2[$i3];

        $i6 = (int) $b5;

        $i6 = $i6 << 24;

        $i7 = $i3 + 1;

        $b5 = $r2[$i7];

        $s8 = (short) $b5;

        $s8 = $s8 & 255;

        $i7 = (int) $s8;

        $i7 = $i7 << 16;

        $i6 = $i6 | $i7;

        $i7 = $i3 + 2;

        $b5 = $r2[$i7];

        $s8 = (short) $b5;

        $s8 = $s8 & 255;

        $i7 = (int) $s8;

        $i7 = $i7 << 8;

        $i6 = $i6 | $i7;

        $i3 = $i3 + 3;

        $b5 = $r2[$i3];

        $i3 = (int) $b5;

        $i3 = $i3 & 255;

        goto label09;

     label08:
        $r2 = r0.<org.codehaus.jackson.io.BaseReader: byte[] _buffer>;

        $b5 = $r2[$i3];

        $s8 = (short) $b5;

        $s8 = $s8 & 255;

        $i6 = $i3 + 1;

        $b5 = $r2[$i6];

        $s9 = (short) $b5;

        $s9 = $s9 & 255;

        $i6 = (int) $s9;

        $i6 = $i6 << 8;

        $i7 = (int) $s8;

        $i6 = $i7 | $i6;

        $i7 = $i3 + 2;

        $b5 = $r2[$i7];

        $s8 = (short) $b5;

        $s8 = $s8 & 255;

        $i7 = (int) $s8;

        $i7 = $i7 << 16;

        $i6 = $i6 | $i7;

        $i3 = $i3 + 3;

        $b5 = $r2[$i3];

        $i3 = (int) $b5;

        $i3 = $i3 << 24;

     label09:
        $i6 = $i3 | $i6;

        $i3 = r0.<org.codehaus.jackson.io.BaseReader: int _ptr>;

        $i3 = $i3 + 4;

        r0.<org.codehaus.jackson.io.BaseReader: int _ptr> = $i3;

        $i3 = 65535;

        if $i6 <= $i3 goto label12;

        if $i6 > 1114111 goto label11;

        $i6 = $i6 - 65536;

        $i3 = $i2 + 1;

        $i7 = $i6 >> 10;

        $i10 = 55296;

        $i7 = $i7 + $i10;

        $c4 = (char) $i7;

        $r1[$i2] = $c4;

        $i2 = $i6 & 1023;

        $i6 = 56320;

        $i6 = $i2 | $i6;

        if $i3 < $i1 goto label10;

        $c4 = (char) $i6;

        r0.<org.codehaus.jackson.io.UTF32Reader: char mSurrogate> = $c4;

        goto label15;

     label10:
        $i2 = $i3;

        goto label12;

     label11:
        $i0 = $i2 - $i0;

        $r5 = new java.lang.StringBuilder;

        $r3 = $r5;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(above ");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(1114111);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.codehaus.jackson.io.UTF32Reader: void reportInvalid(int,int,java.lang.String)>($i6, $i0, $r4);

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw $r6;

     label12:
        $i3 = $i2 + 1;

        $c4 = (char) $i6;

        $r1[$i2] = $c4;

        $i2 = r0.<org.codehaus.jackson.io.BaseReader: int _ptr>;

        $i6 = r0.<org.codehaus.jackson.io.BaseReader: int _length>;

        if $i2 < $i6 goto label13;

        goto label15;

     label13:
        $i2 = $i3;

        goto label07;

     label14:
        $i3 = $i2;

     label15:
        $i0 = $i3 - $i0;

        $i1 = r0.<org.codehaus.jackson.io.UTF32Reader: int mCharCount>;

        $i1 = $i1 + $i0;

        r0.<org.codehaus.jackson.io.UTF32Reader: int mCharCount> = $i1;

        return $i0;
    }
}
