public abstract class com.google.common.collect.DiscreteDomain extends java.lang.Object
{
    public final boolean supportsFastOffset;

    public void <init>()
    {
        com.google.common.collect.DiscreteDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain;

        specialinvoke r0.<com.google.common.collect.DiscreteDomain: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        com.google.common.collect.DiscreteDomain r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.DiscreteDomain;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.collect.DiscreteDomain: boolean supportsFastOffset> = $z0;

        return;
    }

    public void <init>(boolean, com.google.common.collect.DiscreteDomain$1)
    {
        com.google.common.collect.DiscreteDomain$1 $r1;
        com.google.common.collect.DiscreteDomain r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.DiscreteDomain;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: com.google.common.collect.DiscreteDomain$1;

        specialinvoke r0.<com.google.common.collect.DiscreteDomain: void <init>(boolean)>($z0);

        return;
    }

    public static com.google.common.collect.DiscreteDomain bigIntegers()
    {
        com.google.common.collect.DiscreteDomain$BigIntegerDomain $r0;

        $r0 = staticinvoke <com.google.common.collect.DiscreteDomain$BigIntegerDomain: com.google.common.collect.DiscreteDomain$BigIntegerDomain access$300()>();

        return $r0;
    }

    public static com.google.common.collect.DiscreteDomain integers()
    {
        com.google.common.collect.DiscreteDomain$IntegerDomain $r0;

        $r0 = staticinvoke <com.google.common.collect.DiscreteDomain$IntegerDomain: com.google.common.collect.DiscreteDomain$IntegerDomain access$000()>();

        return $r0;
    }

    public static com.google.common.collect.DiscreteDomain longs()
    {
        com.google.common.collect.DiscreteDomain$LongDomain $r0;

        $r0 = staticinvoke <com.google.common.collect.DiscreteDomain$LongDomain: com.google.common.collect.DiscreteDomain$LongDomain access$200()>();

        return $r0;
    }

    public abstract long distance(java.lang.Comparable, java.lang.Comparable);

    public java.lang.Comparable maxValue()
    {
        java.util.NoSuchElementException $r1;
        com.google.common.collect.DiscreteDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;
    }

    public java.lang.Comparable minValue()
    {
        java.util.NoSuchElementException $r1;
        com.google.common.collect.DiscreteDomain r0;

        r0 := @this: com.google.common.collect.DiscreteDomain;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;
    }

    public abstract java.lang.Comparable next(java.lang.Comparable);

    public java.lang.Comparable offset(java.lang.Comparable, long)
    {
        byte $b2;
        com.google.common.collect.DiscreteDomain r0;
        int $i3;
        long $l0, $l1;
        java.lang.Comparable $r1;

        r0 := @this: com.google.common.collect.DiscreteDomain;

        $r1 := @parameter0: java.lang.Comparable;

        $l0 := @parameter1: long;

        staticinvoke <com.google.common.collect.CollectPreconditions: long checkNonnegative(long,java.lang.String)>($l0, "distance");

        $l1 = 0L;

     label1:
        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label2;

        $r1 = virtualinvoke r0.<com.google.common.collect.DiscreteDomain: java.lang.Comparable next(java.lang.Comparable)>($r1);

        $l1 = $l1 + 1L;

        goto label1;

     label2:
        return $r1;
    }

    public abstract java.lang.Comparable previous(java.lang.Comparable);
}
