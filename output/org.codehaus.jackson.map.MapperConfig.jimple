public abstract class org.codehaus.jackson.map.MapperConfig extends java.lang.Object implements org.codehaus.jackson.map.ClassIntrospector$MixInResolver
{
    public static final java.text.DateFormat DEFAULT_DATE_FORMAT;
    public org.codehaus.jackson.map.MapperConfig$Base _base;
    public java.util.HashMap _mixInAnnotations;
    public boolean _mixInAnnotationsShared;
    public org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver;

    static void <clinit>()
    {
        org.codehaus.jackson.map.util.StdDateFormat $r0;

        $r0 = <org.codehaus.jackson.map.util.StdDateFormat: org.codehaus.jackson.map.util.StdDateFormat instance>;

        <org.codehaus.jackson.map.MapperConfig: java.text.DateFormat DEFAULT_DATE_FORMAT> = $r0;

        return;
    }

    public void <init>(org.codehaus.jackson.map.ClassIntrospector, org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.introspect.VisibilityChecker, org.codehaus.jackson.map.jsontype.SubtypeResolver, org.codehaus.jackson.map.PropertyNamingStrategy, org.codehaus.jackson.map.type.TypeFactory, org.codehaus.jackson.map.HandlerInstantiator)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r4;
        org.codehaus.jackson.map.HandlerInstantiator $r7;
        org.codehaus.jackson.map.PropertyNamingStrategy $r5;
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r2;
        org.codehaus.jackson.map.type.TypeFactory $r6;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r3;
        org.codehaus.jackson.map.ClassIntrospector $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r9;
        java.text.DateFormat $r8;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.ClassIntrospector;

        $r2 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r4 := @parameter3: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        $r5 := @parameter4: org.codehaus.jackson.map.PropertyNamingStrategy;

        $r6 := @parameter5: org.codehaus.jackson.map.type.TypeFactory;

        $r7 := @parameter6: org.codehaus.jackson.map.HandlerInstantiator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r9 = new org.codehaus.jackson.map.MapperConfig$Base;

        $r8 = <org.codehaus.jackson.map.MapperConfig: java.text.DateFormat DEFAULT_DATE_FORMAT>;

        specialinvoke $r9.<org.codehaus.jackson.map.MapperConfig$Base: void <init>(org.codehaus.jackson.map.ClassIntrospector,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.introspect.VisibilityChecker,org.codehaus.jackson.map.PropertyNamingStrategy,org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.map.jsontype.TypeResolverBuilder,java.text.DateFormat,org.codehaus.jackson.map.HandlerInstantiator)>($r1, $r2, $r3, $r5, $r6, null, $r8, $r7);

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base> = $r9;

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r4;

        r0.<org.codehaus.jackson.map.MapperConfig: boolean _mixInAnnotationsShared> = 1;

        return;
    }

    public void <init>(org.codehaus.jackson.map.MapperConfig)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r3;
        org.codehaus.jackson.map.MapperConfig r0, $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r2;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        $r2 = $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r3 = $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver>;

        specialinvoke r0.<org.codehaus.jackson.map.MapperConfig: void <init>(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.MapperConfig$Base,org.codehaus.jackson.map.jsontype.SubtypeResolver)>($r1, $r2, $r3);

        return;
    }

    public void <init>(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.map.MapperConfig$Base, org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r1;
        java.util.HashMap $r4;
        org.codehaus.jackson.map.MapperConfig r0, $r2;
        org.codehaus.jackson.map.MapperConfig$Base $r3;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        $r3 := @parameter1: org.codehaus.jackson.map.MapperConfig$Base;

        $r1 := @parameter2: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base> = $r3;

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r1;

        r0.<org.codehaus.jackson.map.MapperConfig: boolean _mixInAnnotationsShared> = 1;

        $r4 = $r2.<org.codehaus.jackson.map.MapperConfig: java.util.HashMap _mixInAnnotations>;

        r0.<org.codehaus.jackson.map.MapperConfig: java.util.HashMap _mixInAnnotations> = $r4;

        return;
    }

    public final void addMixInAnnotations(java.lang.Class, java.lang.Class)
    {
        java.lang.Class $r1, $r2;
        java.util.HashMap $r3, $r4;
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.type.ClassKey $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.Class;

        $r3 = r0.<org.codehaus.jackson.map.MapperConfig: java.util.HashMap _mixInAnnotations>;

        if $r3 != null goto label1;

        r0.<org.codehaus.jackson.map.MapperConfig: boolean _mixInAnnotationsShared> = 0;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jackson.map.MapperConfig: java.util.HashMap _mixInAnnotations> = $r3;

        goto label2;

     label1:
        $z0 = r0.<org.codehaus.jackson.map.MapperConfig: boolean _mixInAnnotationsShared>;

        if $z0 == 0 goto label2;

        r0.<org.codehaus.jackson.map.MapperConfig: boolean _mixInAnnotationsShared> = 0;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>($r3);

        r0.<org.codehaus.jackson.map.MapperConfig: java.util.HashMap _mixInAnnotations> = $r4;

     label2:
        $r3 = r0.<org.codehaus.jackson.map.MapperConfig: java.util.HashMap _mixInAnnotations>;

        $r5 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r5.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>($r1);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r2);

        return;
    }

    public final void appendAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)
    {
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r2, $r3;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.AnnotationIntrospector;

        $r1 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r2 = staticinvoke <org.codehaus.jackson.map.AnnotationIntrospector$Pair: org.codehaus.jackson.map.AnnotationIntrospector create(org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.AnnotationIntrospector)>($r3, $r2);

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)>($r2);

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base> = $r1;

        return;
    }

    public abstract boolean canOverrideAccessModifiers();

    public final org.codehaus.jackson.type.JavaType constructType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r1;
        org.codehaus.jackson.map.MapperConfig r0;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r1);

        return $r3;
    }

    public abstract org.codehaus.jackson.map.MapperConfig createUnshared(org.codehaus.jackson.map.jsontype.SubtypeResolver);

    public abstract org.codehaus.jackson.map.MapperConfig createUnshared(org.codehaus.jackson.map.jsontype.TypeResolverBuilder, org.codehaus.jackson.map.introspect.VisibilityChecker, org.codehaus.jackson.map.jsontype.SubtypeResolver);

    public final java.lang.Class findMixInClassFor(java.lang.Class)
    {
        java.util.HashMap $r1;
        java.lang.Object $r3;
        java.lang.Class $r4;
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.type.ClassKey $r2;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r4 := @parameter0: java.lang.Class;

        $r1 = r0.<org.codehaus.jackson.map.MapperConfig: java.util.HashMap _mixInAnnotations>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r2.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>($r4);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.Class) $r3;

        return $r4;
    }

    public abstract void fromAnnotations(java.lang.Class);

    public org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()
    {
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        return $r1;
    }

    public org.codehaus.jackson.map.ClassIntrospector getClassIntrospector()
    {
        org.codehaus.jackson.map.ClassIntrospector $r1;
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r2;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.ClassIntrospector getClassIntrospector()>();

        return $r1;
    }

    public final java.text.DateFormat getDateFormat()
    {
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r2;
        java.text.DateFormat $r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: java.text.DateFormat getDateFormat()>();

        return $r1;
    }

    public final org.codehaus.jackson.map.jsontype.TypeResolverBuilder getDefaultTyper(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r3;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r3 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r1 = virtualinvoke $r3.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.jsontype.TypeResolverBuilder getTypeResolverBuilder()>();

        return $r1;
    }

    public final org.codehaus.jackson.map.introspect.VisibilityChecker getDefaultVisibilityChecker()
    {
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.introspect.VisibilityChecker getVisibilityChecker()>();

        return $r1;
    }

    public final org.codehaus.jackson.map.HandlerInstantiator getHandlerInstantiator()
    {
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r2;
        org.codehaus.jackson.map.HandlerInstantiator $r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.HandlerInstantiator getHandlerInstantiator()>();

        return $r1;
    }

    public final org.codehaus.jackson.map.PropertyNamingStrategy getPropertyNamingStrategy()
    {
        org.codehaus.jackson.map.PropertyNamingStrategy $r1;
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r2;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.PropertyNamingStrategy getPropertyNamingStrategy()>();

        return $r1;
    }

    public final org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()
    {
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r1;
        org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver $r2;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r1 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver>;

        if $r1 != null goto label1;

        $r2 = new org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver;

        specialinvoke $r2.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: void <init>()>();

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r2;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver>;

        return $r1;
    }

    public final org.codehaus.jackson.map.type.TypeFactory getTypeFactory()
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r2;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        return $r1;
    }

    public final void insertAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)
    {
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r2, $r3;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.AnnotationIntrospector;

        $r1 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r2 = staticinvoke <org.codehaus.jackson.map.AnnotationIntrospector$Pair: org.codehaus.jackson.map.AnnotationIntrospector create(org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.AnnotationIntrospector)>($r2, $r3);

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)>($r2);

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base> = $r1;

        return;
    }

    public abstract org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class);

    public abstract org.codehaus.jackson.map.BeanDescription introspectDirectClassAnnotations(java.lang.Class);

    public abstract boolean isAnnotationProcessingEnabled();

    public final int mixInCount()
    {
        int $i0;
        java.util.HashMap $r1;
        org.codehaus.jackson.map.MapperConfig r0;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r1 = r0.<org.codehaus.jackson.map.MapperConfig: java.util.HashMap _mixInAnnotations>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        return $i0;
    }

    public final void setAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)
    {
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r2;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.AnnotationIntrospector;

        $r1 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)>($r2);

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base> = $r1;

        return;
    }

    public void setDateFormat(java.text.DateFormat)
    {
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r1;
        java.text.DateFormat $r2;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter0: java.text.DateFormat;

        if $r2 != null goto label1;

        $r2 = <org.codehaus.jackson.map.util.StdDateFormat: org.codehaus.jackson.map.util.StdDateFormat instance>;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withDateFormat(java.text.DateFormat)>($r2);

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base> = $r1;

        return;
    }

    public final void setIntrospector(org.codehaus.jackson.map.ClassIntrospector)
    {
        org.codehaus.jackson.map.ClassIntrospector $r2;
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.MapperConfig$Base $r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.ClassIntrospector;

        $r1 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withClassIntrospector(org.codehaus.jackson.map.ClassIntrospector)>($r2);

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base> = $r1;

        return;
    }

    public final void setMixInAnnotations(java.util.Map)
    {
        java.util.Map$Entry $r7;
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.util.HashMap $r3;
        org.codehaus.jackson.map.MapperConfig r0;
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r6;
        java.lang.Class $r8;
        org.codehaus.jackson.map.type.ClassKey $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter0: java.util.Map;

        if $r2 == null goto label2;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 <= 0 goto label2;

        $r3 = new java.util.HashMap;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r1 = new org.codehaus.jackson.map.type.ClassKey;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.Class) $r6;

        specialinvoke $r1.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>($r8);

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

        goto label1;

     label2:
        $r3 = null;

     label3:
        r0.<org.codehaus.jackson.map.MapperConfig: boolean _mixInAnnotationsShared> = 0;

        r0.<org.codehaus.jackson.map.MapperConfig: java.util.HashMap _mixInAnnotations> = $r3;

        return;
    }

    public final void setSubtypeResolver(org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.MapperConfig r0;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r1;

        return;
    }

    public org.codehaus.jackson.map.jsontype.TypeIdResolver typeIdResolverInstance(org.codehaus.jackson.map.introspect.Annotated, java.lang.Class)
    {
        org.codehaus.jackson.map.introspect.Annotated $r2;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r4;
        org.codehaus.jackson.map.HandlerInstantiator $r3;
        java.lang.Class $r1;
        java.lang.Object $r5;
        org.codehaus.jackson.map.MapperConfig r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.HandlerInstantiator getHandlerInstantiator()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.HandlerInstantiator: org.codehaus.jackson.map.jsontype.TypeIdResolver typeIdResolverInstance(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r0, $r2, $r1);

        if $r4 == null goto label1;

        return $r4;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: boolean canOverrideAccessModifiers()>();

        $r5 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>($r1, $z0);

        $r4 = (org.codehaus.jackson.map.jsontype.TypeIdResolver) $r5;

        return $r4;
    }

    public org.codehaus.jackson.map.jsontype.TypeResolverBuilder typeResolverBuilderInstance(org.codehaus.jackson.map.introspect.Annotated, java.lang.Class)
    {
        org.codehaus.jackson.map.introspect.Annotated $r2;
        org.codehaus.jackson.map.HandlerInstantiator $r3;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r4;
        java.lang.Class $r1;
        java.lang.Object $r5;
        org.codehaus.jackson.map.MapperConfig r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.HandlerInstantiator getHandlerInstantiator()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.HandlerInstantiator: org.codehaus.jackson.map.jsontype.TypeResolverBuilder typeResolverBuilderInstance(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r0, $r2, $r1);

        if $r4 == null goto label1;

        return $r4;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: boolean canOverrideAccessModifiers()>();

        $r5 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>($r1, $z0);

        $r4 = (org.codehaus.jackson.map.jsontype.TypeResolverBuilder) $r5;

        return $r4;
    }

    public abstract org.codehaus.jackson.map.MapperConfig withAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector);

    public abstract org.codehaus.jackson.map.MapperConfig withClassIntrospector(org.codehaus.jackson.map.ClassIntrospector);

    public abstract org.codehaus.jackson.map.MapperConfig withDateFormat(java.text.DateFormat);

    public abstract org.codehaus.jackson.map.MapperConfig withHandlerInstantiator(org.codehaus.jackson.map.HandlerInstantiator);

    public abstract org.codehaus.jackson.map.MapperConfig withPropertyNamingStrategy(org.codehaus.jackson.map.PropertyNamingStrategy);

    public abstract org.codehaus.jackson.map.MapperConfig withSubtypeResolver(org.codehaus.jackson.map.jsontype.SubtypeResolver);

    public abstract org.codehaus.jackson.map.MapperConfig withTypeFactory(org.codehaus.jackson.map.type.TypeFactory);

    public abstract org.codehaus.jackson.map.MapperConfig withTypeResolverBuilder(org.codehaus.jackson.map.jsontype.TypeResolverBuilder);

    public abstract org.codehaus.jackson.map.MapperConfig withVisibilityChecker(org.codehaus.jackson.map.introspect.VisibilityChecker);
}
