public class com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable extends com.google.common.util.concurrent.ForwardingFuture implements java.util.concurrent.Callable
{
    public java.util.concurrent.Future currentFuture;
    public final java.util.concurrent.ScheduledExecutorService executor;
    public final java.util.concurrent.locks.ReentrantLock lock;
    public final com.google.common.util.concurrent.AbstractService service;
    public final com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler this$0;
    public final java.lang.Runnable wrappedRunnable;

    public void <init>(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler, com.google.common.util.concurrent.AbstractService, java.util.concurrent.ScheduledExecutorService, java.lang.Runnable)
    {
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler $r4;
        java.util.concurrent.locks.ReentrantLock $r5;
        com.google.common.util.concurrent.AbstractService $r1;
        java.util.concurrent.ScheduledExecutorService $r2;
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable r0;
        java.lang.Runnable $r3;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable;

        $r4 := @parameter0: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler;

        $r1 := @parameter1: com.google.common.util.concurrent.AbstractService;

        $r2 := @parameter2: java.util.concurrent.ScheduledExecutorService;

        $r3 := @parameter3: java.lang.Runnable;

        r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler this$0> = $r4;

        specialinvoke r0.<com.google.common.util.concurrent.ForwardingFuture: void <init>()>();

        $r5 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.locks.ReentrantLock lock> = $r5;

        r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Runnable wrappedRunnable> = $r3;

        r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.ScheduledExecutorService executor> = $r2;

        r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: com.google.common.util.concurrent.AbstractService service> = $r1;

        return;
    }

    public volatile java.lang.Object call()
    {
        java.lang.Void $r1;
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable r0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Void call()>();

        return $r1;
    }

    public java.lang.Void call()
    {
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable r0;
        java.lang.Runnable $r1;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable;

        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.lang.Runnable wrappedRunnable>;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: void reschedule()>();

        return null;
    }

    public boolean cancel(boolean)
    {
        java.lang.Throwable $r3;
        java.util.concurrent.Future $r2;
        java.util.concurrent.locks.ReentrantLock $r1;
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r2 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.Future currentFuture>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.Future: boolean cancel(boolean)>($z0);

     label2:
        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $z0;

     label3:
        $r3 := @caughtexception;

        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public volatile java.lang.Object delegate()
    {
        java.util.concurrent.Future $r1;
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable r0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.Future delegate()>();

        return $r1;
    }

    public java.util.concurrent.Future delegate()
    {
        java.lang.UnsupportedOperationException $r1;
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable r0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Only cancel and isCancelled is supported by this future");

        throw $r1;
    }

    public boolean isCancelled()
    {
        java.lang.Throwable $r3;
        java.util.concurrent.Future $r2;
        java.util.concurrent.locks.ReentrantLock $r1;
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable;

        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r2 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.Future currentFuture>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.Future: boolean isCancelled()>();

     label2:
        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $z0;

     label3:
        $r3 := @caughtexception;

        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void reschedule()
    {
        java.lang.Throwable $r3, $r10;
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler $r1;
        java.util.concurrent.ScheduledFuture $r8;
        java.util.concurrent.locks.ReentrantLock $r4;
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule $r2;
        long $l0;
        com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable r0;
        java.util.concurrent.TimeUnit $r7;
        java.util.concurrent.Future $r5;
        java.util.concurrent.ScheduledExecutorService $r6;
        com.google.common.util.concurrent.AbstractService $r9;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable;

     label01:
        $r1 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler this$0>;

        $r2 = virtualinvoke $r1.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler: com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule getNextSchedule()>();

     label02:
        $r3 = null;

        $r4 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label03:
        $r5 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.Future currentFuture>;

     label04:
        if $r5 == null goto label07;

     label05:
        $r5 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.Future currentFuture>;

        $z0 = interfaceinvoke $r5.<java.util.concurrent.Future: boolean isCancelled()>();

     label06:
        if $z0 != 0 goto label10;

     label07:
        $r6 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.ScheduledExecutorService executor>;

        $l0 = staticinvoke <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule: long access$800(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule)>($r2);

        $r7 = staticinvoke <com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule: java.util.concurrent.TimeUnit access$900(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule)>($r2);

        $r8 = interfaceinvoke $r6.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>(r0, $l0, $r7);

        r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.Future currentFuture> = $r8;

     label08:
        goto label10;

     label09:
        $r3 := @caughtexception;

     label10:
        $r4 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        if $r3 == null goto label12;

        $r9 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: com.google.common.util.concurrent.AbstractService service>;

        virtualinvoke $r9.<com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>($r3);

        return;

     label11:
        $r10 := @caughtexception;

        $r9 = r0.<com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable: com.google.common.util.concurrent.AbstractService service>;

        virtualinvoke $r9.<com.google.common.util.concurrent.AbstractService: void notifyFailed(java.lang.Throwable)>($r10);

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }
}
