public final class com.google.common.math.BigIntegerMath extends java.lang.Object
{
    public static final double LN_10;
    public static final double LN_2;
    public static final java.math.BigInteger SQRT2_PRECOMPUTED_BITS;
    public static final int SQRT2_PRECOMPUTE_THRESHOLD;

    static void <clinit>()
    {
        java.math.BigInteger $r0;
        double $d0;

        <com.google.common.math.BigIntegerMath: int SQRT2_PRECOMPUTE_THRESHOLD> = 256;

        <com.google.common.math.BigIntegerMath: double LN_10> = 0.0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("16a09e667f3bcc908b2fb1366ea957d3e3adec17512775099da2f590b0667322a", 16);

        <com.google.common.math.BigIntegerMath: java.math.BigInteger SQRT2_PRECOMPUTED_BITS> = $r0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        <com.google.common.math.BigIntegerMath: double LN_10> = $d0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        <com.google.common.math.BigIntegerMath: double LN_2> = $d0;

        return;
    }

    public void <init>()
    {
        com.google.common.math.BigIntegerMath r0;

        r0 := @this: com.google.common.math.BigIntegerMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.math.BigInteger binomial(int, int)
    {
        long $l4, $l5, $l8;
        int[] $r0;
        int $i0, $i1, $i2, $i3, $i6, $i7;
        java.math.BigInteger $r1, $r3;
        boolean $z0;
        java.math.RoundingMode $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", $i0);

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("k", $i1);

        $i2 = 1;

        if $i1 > $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "k (%s) > n (%s)", $i1, $i0);

        $i3 = $i0 >> 1;

        if $i1 <= $i3 goto label3;

        $i1 = $i0 - $i1;

     label3:
        $r0 = <com.google.common.math.LongMath: int[] biggestBinomials>;

        $i3 = lengthof $r0;

        if $i1 >= $i3 goto label4;

        $i3 = $r0[$i1];

        if $i0 > $i3 goto label4;

        $l4 = staticinvoke <com.google.common.math.LongMath: long binomial(int,int)>($i0, $i1);

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l4);

        return $r1;

     label4:
        $r1 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $l4 = (long) $i0;

        $l5 = 1L;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i3 = staticinvoke <com.google.common.math.LongMath: int log2(long,java.math.RoundingMode)>($l4, $r2);

     label5:
        $i6 = $i3;

     label6:
        if $i2 >= $i1 goto label8;

        $i7 = $i0 - $i2;

        $i2 = $i2 + 1;

        $i6 = $i6 + $i3;

        if $i6 < 63 goto label7;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l4);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r3);

        $l4 = (long) $i7;

        $l5 = (long) $i2;

        goto label5;

     label7:
        $l8 = (long) $i7;

        $l4 = $l4 * $l8;

        $l8 = (long) $i2;

        $l5 = $l5 * $l8;

        goto label6;

     label8:
        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l4);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r3);

        return $r1;
    }

    public static java.math.BigInteger ceilingPowerOfTwo(java.math.BigInteger)
    {
        int $i0;
        java.math.BigInteger $r0, $r2;
        java.math.RoundingMode $r1;

        $r2 := @parameter0: java.math.BigInteger;

        $r0 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $r1 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i0 = staticinvoke <com.google.common.math.BigIntegerMath: int log2(java.math.BigInteger,java.math.RoundingMode)>($r2, $r1);

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger setBit(int)>($i0);

        return $r2;
    }

    public static java.math.BigInteger divide(java.math.BigInteger, java.math.BigInteger, java.math.RoundingMode)
    {
        java.math.BigDecimal $r1, $r4;
        java.math.BigInteger $r2, $r3;
        java.math.RoundingMode $r0;

        $r2 := @parameter0: java.math.BigInteger;

        $r3 := @parameter1: java.math.BigInteger;

        $r0 := @parameter2: java.math.RoundingMode;

        $r1 = new java.math.BigDecimal;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r2);

        $r4 = new java.math.BigDecimal;

        specialinvoke $r4.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r3);

        $r1 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,java.math.RoundingMode)>($r4, 0, $r0);

        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigInteger toBigIntegerExact()>();

        return $r2;
    }

    public static java.math.BigInteger factorial(int)
    {
        long $l3, $l6, $l8;
        java.util.ArrayList $r3, $r4;
        long[] $r0;
        byte $b1;
        int $i0, $i2, $i4, $i5, $i7, $i9;
        java.math.BigInteger $r1;
        java.math.RoundingMode $r2;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", $i0);

        $r0 = <com.google.common.math.LongMath: long[] factorials>;

        $i2 = lengthof $r0;

        if $i0 >= $i2 goto label1;

        $l3 = $r0[$i0];

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        return $r1;

     label1:
        $r2 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i2 = staticinvoke <com.google.common.math.IntMath: int log2(int,java.math.RoundingMode)>($i0, $r2);

        $i2 = $i2 * $i0;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i2 = staticinvoke <com.google.common.math.IntMath: int divide(int,int,java.math.RoundingMode)>($i2, 64, $r2);

        $r4 = new java.util.ArrayList;

        $r3 = $r4;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2);

        $r0 = <com.google.common.math.LongMath: long[] factorials>;

        $i4 = lengthof $r0;

        $i2 = -1;

        $i2 = $i4 + $i2;

        $l3 = $r0[$i2];

        $i5 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l3);

        $i2 = $i5;

        $l3 = $l3 >> $i5;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

        $i5 = staticinvoke <com.google.common.math.LongMath: int log2(long,java.math.RoundingMode)>($l3, $r2);

        $i5 = $i5 + 1;

        $l6 = (long) $i4;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

        $i4 = staticinvoke <com.google.common.math.LongMath: int log2(long,java.math.RoundingMode)>($l6, $r2);

        $i4 = $i4 + 1;

        $i7 = -1;

        $i7 = $i4 + $i7;

        $i7 = 1 << $i7;

     label2:
        $l8 = (long) $i0;

        $b1 = $l6 cmp $l8;

        $i9 = (int) $b1;

        if $i9 > 0 goto label5;

        $l8 = (long) $i7;

        $l8 = $l8 & $l6;

        $b1 = $l8 cmp 0L;

        if $b1 == 0 goto label3;

        $i7 = $i7 << 1;

        $i4 = $i4 + 1;

     label3:
        $i9 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l6);

        $l8 = $l6 >> $i9;

        $i2 = $i2 + $i9;

        $i9 = $i4 - $i9;

        $i5 = $i9 + $i5;

        if $i5 < 64 goto label4;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $l3 = 1L;

     label4:
        $l3 = $l3 * $l8;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

        $i5 = staticinvoke <com.google.common.math.LongMath: int log2(long,java.math.RoundingMode)>($l3, $r2);

        $i5 = $i5 + 1;

        $l6 = $l6 + 1L;

        goto label2;

     label5:
        $b1 = $l3 cmp 1L;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label6;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label6:
        $r1 = staticinvoke <com.google.common.math.BigIntegerMath: java.math.BigInteger listProduct(java.util.List)>($r3);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i2);

        return $r1;
    }

    public static boolean fitsInLong(java.math.BigInteger)
    {
        int $i0;
        java.math.BigInteger $r0;

        $r0 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        if $i0 > 63 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.math.BigInteger floorPowerOfTwo(java.math.BigInteger)
    {
        int $i0;
        java.math.BigInteger $r0, $r2;
        java.math.RoundingMode $r1;

        $r2 := @parameter0: java.math.BigInteger;

        $r0 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $r1 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

        $i0 = staticinvoke <com.google.common.math.BigIntegerMath: int log2(java.math.BigInteger,java.math.RoundingMode)>($r2, $r1);

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger setBit(int)>($i0);

        return $r2;
    }

    public static boolean isPowerOfTwo(java.math.BigInteger)
    {
        int $i0, $i1;
        java.math.BigInteger $r0;

        $r0 := @parameter0: java.math.BigInteger;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int signum()>();

        if $i0 <= 0 goto label1;

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int getLowestSetBit()>();

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i1 = $i1 - 1;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.math.BigInteger listProduct(java.util.List)
    {
        int $i0;
        java.util.List $r0;
        java.math.BigInteger $r1;

        $r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r1 = staticinvoke <com.google.common.math.BigIntegerMath: java.math.BigInteger listProduct(java.util.List,int,int)>($r0, 0, $i0);

        return $r1;
    }

    public static java.math.BigInteger listProduct(java.util.List, int, int)
    {
        java.util.List $r0;
        int $i0, $i1, $i2;
        java.math.BigInteger $r1, $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i1 - $i0;

        if $i2 == 0 goto label4;

        if $i2 == 1 goto label3;

        if $i2 == 2 goto label2;

        if $i2 == 3 goto label1;

        $i2 = $i1 + $i0;

        $i2 = $i2 >>> 1;

        $r1 = staticinvoke <com.google.common.math.BigIntegerMath: java.math.BigInteger listProduct(java.util.List,int,int)>($r0, $i0, $i2);

        $r2 = staticinvoke <com.google.common.math.BigIntegerMath: java.math.BigInteger listProduct(java.util.List,int,int)>($r0, $i2, $i1);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        return $r1;

     label1:
        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r1 = (java.math.BigInteger) $r3;

        $i1 = $i0 + 1;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        $r2 = (java.math.BigInteger) $r3;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $i0 = $i0 + 2;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r2 = (java.math.BigInteger) $r3;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        return $r1;

     label2:
        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r1 = (java.math.BigInteger) $r3;

        $i0 = $i0 + 1;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r2 = (java.math.BigInteger) $r3;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        return $r1;

     label3:
        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r1 = (java.math.BigInteger) $r3;

        return $r1;

     label4:
        $r1 = <java.math.BigInteger: java.math.BigInteger ONE>;

        return $r1;
    }

    public static int log10(java.math.BigInteger, java.math.RoundingMode)
    {
        long $l0;
        java.lang.AssertionError $r7;
        int[] $r6;
        int $i1, $i2, $i3, $i4;
        java.math.BigInteger $r0, $r3, $r4, $r5;
        java.math.RoundingMode $r1, $r2;
        boolean $z0;
        double $d0, $d1;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: java.math.BigInteger checkPositive(java.lang.String,java.math.BigInteger)>("x", $r0);

        $z0 = staticinvoke <com.google.common.math.BigIntegerMath: boolean fitsInLong(java.math.BigInteger)>($r0);

        if $z0 == 0 goto label01;

        $l0 = virtualinvoke $r0.<java.math.BigInteger: long longValue()>();

        $i1 = staticinvoke <com.google.common.math.LongMath: int log10(long,java.math.RoundingMode)>($l0, $r1);

        return $i1;

     label01:
        $r2 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

        $i1 = staticinvoke <com.google.common.math.BigIntegerMath: int log2(java.math.BigInteger,java.math.RoundingMode)>($r0, $r2);

        $d0 = (double) $i1;

        $d1 = <com.google.common.math.BigIntegerMath: double LN_2>;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 * $d1;

        $d1 = <com.google.common.math.BigIntegerMath: double LN_10>;

        $d0 = $d0 / $d1;

        $i1 = (int) $d0;

        $r3 = <java.math.BigInteger: java.math.BigInteger TEN>;

        $r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger pow(int)>($i1);

        $r3 = $r4;

        $i2 = virtualinvoke $r4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r0);

        if $i2 <= 0 goto label03;

     label02:
        $i2 = -1;

        $i1 = $i1 + $i2;

        $r4 = <java.math.BigInteger: java.math.BigInteger TEN>;

        $r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r4);

        $r3 = $r4;

        $i3 = virtualinvoke $r4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r0);

        $i2 = $i3;

        if $i3 > 0 goto label02;

        goto label05;

     label03:
        $r5 = <java.math.BigInteger: java.math.BigInteger TEN>;

        $r4 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $i3 = virtualinvoke $r4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r0);

     label04:
        if $i3 > 0 goto label05;

        $i1 = $i1 + 1;

        $r3 = <java.math.BigInteger: java.math.BigInteger TEN>;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $i4 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r0);

        $r5 = $r4;

        $r4 = $r3;

        $r3 = $r5;

        $i2 = $i3;

        $i3 = $i4;

        goto label04;

     label05:
        $r6 = <com.google.common.math.BigIntegerMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i3 = virtualinvoke $r1.<java.math.RoundingMode: int ordinal()>();

        $i3 = $r6[$i3];

        lookupswitch($i3)
        {
            case 1: goto label11;
            case 2: goto label14;
            case 3: goto label14;
            case 4: goto label09;
            case 5: goto label09;
            case 6: goto label07;
            case 7: goto label07;
            case 8: goto label07;
            default: goto label06;
        };

     label06:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label07:
        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        $r4 = <java.math.BigInteger: java.math.BigInteger TEN>;

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $i2 = virtualinvoke $r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i2 > 0 goto label08;

        return $i1;

     label08:
        $i1 = $i1 + 1;

        return $i1;

     label09:
        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label10;

        return $i1;

     label10:
        $i1 = $i1 + 1;

        return $i1;

     label11:
        if $i2 != 0 goto label12;

        $z0 = 1;

        goto label13;

     label12:
        $z0 = 0;

     label13:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label14:
        return $i1;
    }

    public static int log2(java.math.BigInteger, java.math.RoundingMode)
    {
        java.lang.AssertionError $r4;
        int[] $r3;
        int $i0, $i1, $i2;
        java.math.BigInteger $r0, $r2;
        java.math.RoundingMode $r1;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = $r0;

        staticinvoke <com.google.common.math.MathPreconditions: java.math.BigInteger checkPositive(java.lang.String,java.math.BigInteger)>("x", $r2);

        $i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r3 = <com.google.common.math.BigIntegerMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i1 = virtualinvoke $r1.<java.math.RoundingMode: int ordinal()>();

        $i1 = $r3[$i1];

        lookupswitch($i1)
        {
            case 1: goto label8;
            case 2: goto label9;
            case 3: goto label9;
            case 4: goto label6;
            case 5: goto label6;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        if $i0 >= 256 goto label4;

        $r2 = <com.google.common.math.BigIntegerMath: java.math.BigInteger SQRT2_PRECOMPUTED_BITS>;

        $i1 = 256 - $i0;

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i1);

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i1 > 0 goto label3;

        return $i0;

     label3:
        $i0 = $i0 + 1;

        return $i0;

     label4:
        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i2 = -1;

        $i1 = $i1 + $i2;

        $i2 = $i0 * 2;

        $i2 = $i2 + 1;

        if $i1 >= $i2 goto label5;

        return $i0;

     label5:
        $i0 = $i0 + 1;

        return $i0;

     label6:
        $z0 = staticinvoke <com.google.common.math.BigIntegerMath: boolean isPowerOfTwo(java.math.BigInteger)>($r0);

        if $z0 == 0 goto label7;

        return $i0;

     label7:
        $i0 = $i0 + 1;

        return $i0;

     label8:
        $z0 = staticinvoke <com.google.common.math.BigIntegerMath: boolean isPowerOfTwo(java.math.BigInteger)>($r0);

        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label9:
        return $i0;
    }

    public static java.math.BigInteger sqrt(java.math.BigInteger, java.math.RoundingMode)
    {
        long $l0;
        java.lang.AssertionError $r4;
        int[] $r3;
        int $i1, $i2;
        java.math.BigInteger $r0, $r2, $r5;
        java.math.RoundingMode $r1;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: java.math.BigInteger checkNonNegative(java.lang.String,java.math.BigInteger)>("x", $r0);

        $z0 = staticinvoke <com.google.common.math.BigIntegerMath: boolean fitsInLong(java.math.BigInteger)>($r0);

        if $z0 == 0 goto label01;

        $l0 = virtualinvoke $r0.<java.math.BigInteger: long longValue()>();

        $l0 = staticinvoke <com.google.common.math.LongMath: long sqrt(long,java.math.RoundingMode)>($l0, $r1);

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        return $r0;

     label01:
        $r2 = staticinvoke <com.google.common.math.BigIntegerMath: java.math.BigInteger sqrtFloor(java.math.BigInteger)>($r0);

        $r3 = <com.google.common.math.BigIntegerMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i1 = virtualinvoke $r1.<java.math.RoundingMode: int ordinal()>();

        $i1 = $r3[$i1];

        lookupswitch($i1)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label10;
            case 4: goto label05;
            case 5: goto label05;
            case 6: goto label03;
            case 7: goto label03;
            case 8: goto label03;
            default: goto label02;
        };

     label02:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label03:
        $r5 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        $r5 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        $i1 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r0);

        if $i1 < 0 goto label04;

        return $r2;

     label04:
        $r0 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r0 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r0);

        return $r0;

     label05:
        $i1 = virtualinvoke $r2.<java.math.BigInteger: int intValue()>();

        $i1 = $i1 * $i1;

        $i2 = virtualinvoke $r0.<java.math.BigInteger: int intValue()>();

        if $i1 != $i2 goto label06;

        $r5 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        if $z0 == 0 goto label08;

        return $r2;

     label08:
        $r0 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r0 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r0);

        return $r0;

     label09:
        $r5 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r0);

        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label10:
        return $r2;
    }

    public static java.math.BigInteger sqrtApproxWithDoubles(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        double $d0;
        java.math.RoundingMode $r1;

        $r0 := @parameter0: java.math.BigInteger;

        $d0 = staticinvoke <com.google.common.math.DoubleUtils: double bigToDouble(java.math.BigInteger)>($r0);

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $r1 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        $r0 = staticinvoke <com.google.common.math.DoubleMath: java.math.BigInteger roundToBigInteger(double,java.math.RoundingMode)>($d0, $r1);

        return $r0;
    }

    public static java.math.BigInteger sqrtFloor(java.math.BigInteger)
    {
        int $i0, $i1;
        java.math.BigInteger $r0, $r2, $r3, $r4;
        java.math.RoundingMode $r1;
        boolean $z0;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

        $i0 = staticinvoke <com.google.common.math.BigIntegerMath: int log2(java.math.BigInteger,java.math.RoundingMode)>($r0, $r1);

        if $i0 >= 1023 goto label1;

        $r3 = staticinvoke <com.google.common.math.BigIntegerMath: java.math.BigInteger sqrtApproxWithDoubles(java.math.BigInteger)>($r0);

        goto label2;

     label1:
        $i1 = -52;

        $i0 = $i0 + $i1;

        $i1 = -2;

        $i0 = $i0 & $i1;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i0);

        $r2 = staticinvoke <com.google.common.math.BigIntegerMath: java.math.BigInteger sqrtApproxWithDoubles(java.math.BigInteger)>($r2);

        $i0 = $i0 >> 1;

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i0);

     label2:
        $r2 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r3);

        $r2 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $r2 = $r4;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        return $r3;

     label3:
        $r3 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r2);

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 < 0 goto label4;

        return $r2;

     label4:
        $r2 = $r3;

        goto label3;
    }
}
