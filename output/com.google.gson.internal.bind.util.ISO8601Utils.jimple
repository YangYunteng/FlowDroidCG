public class com.google.gson.internal.bind.util.ISO8601Utils extends java.lang.Object
{
    public static final java.util.TimeZone TIMEZONE_UTC;
    public static final java.lang.String UTC_ID;

    static void <clinit>()
    {
        java.util.TimeZone $r0;

        <com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String UTC_ID> = "UTC";

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        <com.google.gson.internal.bind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_UTC> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.gson.internal.bind.util.ISO8601Utils r0;

        r0 := @this: com.google.gson.internal.bind.util.ISO8601Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean checkOffset(java.lang.String, int, char)
    {
        int $i0, $i2;
        char $c1, $c3;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i2 goto label1;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i0 = (int) $c3;

        $i2 = (int) $c1;

        if $i0 != $i2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.lang.String format(java.util.Date)
    {
        java.lang.String $r1;
        java.util.TimeZone $r0;
        java.util.Date $r2;

        $r2 := @parameter0: java.util.Date;

        $r0 = <com.google.gson.internal.bind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_UTC>;

        $r1 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean,java.util.TimeZone)>($r2, 0, $r0);

        return $r1;
    }

    public static java.lang.String format(java.util.Date, boolean)
    {
        java.util.TimeZone $r0;
        java.util.Date $r2;
        java.lang.String $r1;
        boolean $z0;

        $r2 := @parameter0: java.util.Date;

        $z0 := @parameter1: boolean;

        $r0 = <com.google.gson.internal.bind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_UTC>;

        $r1 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean,java.util.TimeZone)>($r2, $z0, $r0);

        return $r1;
    }

    public static java.lang.String format(java.util.Date, boolean, java.util.TimeZone)
    {
        java.util.GregorianCalendar $r2, $r6;
        java.util.Date $r0;
        java.util.TimeZone $r1;
        char $c3;
        long $l4;
        byte $b0;
        java.util.Locale $r3;
        int $i1, $i2, $i5;
        java.lang.StringBuilder $r4, $r7;
        java.lang.String $r5;
        boolean $z0;

        $r0 := @parameter0: java.util.Date;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.util.TimeZone;

        $r6 = new java.util.GregorianCalendar;

        $r2 = $r6;

        $r3 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r6.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>($r1, $r3);

        virtualinvoke $r2.<java.util.Calendar: void setTime(java.util.Date)>($r0);

        if $z0 == 0 goto label1;

        $b0 = 4;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        $i1 = 19 + $b0;

        $i2 = virtualinvoke $r1.<java.util.TimeZone: int getRawOffset()>();

        if $i2 != 0 goto label3;

        $b0 = 1;

        goto label4;

     label3:
        $b0 = 6;

     label4:
        $i1 = $i1 + $b0;

        $r7 = new java.lang.StringBuilder;

        $r4 = $r7;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i1);

        $i1 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(1);

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r4, $i1, 4);

        $c3 = 45;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i1 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(2);

        $i1 = $i1 + 1;

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r4, $i1, 2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i1 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(5);

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r4, $i1, 2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(84);

        $i1 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(11);

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r4, $i1, 2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i1 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(12);

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r4, $i1, 2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i1 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(13);

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r4, $i1, 2);

        if $z0 == 0 goto label5;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i1 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(14);

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r4, $i1, 3);

     label5:
        $l4 = virtualinvoke $r2.<java.util.Calendar: long getTimeInMillis()>();

        $i1 = virtualinvoke $r1.<java.util.TimeZone: int getOffset(long)>($l4);

        if $i1 == 0 goto label8;

        $i2 = 60000;

        $i5 = $i1 / $i2;

        $i2 = $i5 / 60;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        $i5 = $i5 % 60;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        if $i1 >= 0 goto label6;

        goto label7;

     label6:
        $c3 = 43;

     label7:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r4, $i2, 2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r4, $i5, 2);

        goto label9;

     label8:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(90);

     label9:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static int indexOfNonDigit(java.lang.String, int)
    {
        int $i0, $i1;
        char $c2;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label4;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i1 = (int) $c2;

        if $i1 < 48 goto label3;

        $i1 = (int) $c2;

        if $i1 <= 57 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $i0;

     label4:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        return $i0;
    }

    public static void padInt(java.lang.StringBuilder, int, int)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.StringBuilder;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i1 - $i0;

     label1:
        if $i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        $i1 = -1;

        $i0 = $i0 + $i1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        return;
    }

    public static java.util.Date parse(java.lang.String, java.text.ParsePosition)
    {
        java.lang.IndexOutOfBoundsException $r5, $r15;
        java.util.Date $r3;
        java.text.ParsePosition $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11;
        java.lang.String $r0, $r7, $r8;
        java.text.ParseException $r12, $r17;
        boolean $z0;
        java.util.GregorianCalendar $r2, $r13;
        java.util.TimeZone $r4;
        char $c7;
        java.lang.RuntimeException $r10;
        java.lang.IllegalArgumentException $r9, $r16;
        java.lang.StringBuilder $r6, $r14;
        java.lang.Class $r11;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.text.ParsePosition;

     label01:
        $i0 = virtualinvoke $r1.<java.text.ParsePosition: int getIndex()>();

     label02:
        $i1 = $i0 + 4;

     label03:
        $i0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, $i0, $i1);

        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, $i1, 45);

     label04:
        if $z0 == 0 goto label05;

        $i1 = $i1 + 1;

     label05:
        $i2 = $i1 + 2;

     label06:
        $i1 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, $i1, $i2);

        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, $i2, 45);

     label07:
        if $z0 == 0 goto label08;

        $i2 = $i2 + 1;

     label08:
        $i3 = $i2 + 2;

     label09:
        $i2 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, $i2, $i3);

        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, $i3, 84);

     label10:
        if $z0 != 0 goto label15;

     label11:
        $i4 = virtualinvoke $r0.<java.lang.String: int length()>();

     label12:
        if $i4 > $i3 goto label15;

        $r13 = new java.util.GregorianCalendar;

        $r2 = $r13;

        $i1 = $i1 - 1;

     label13:
        specialinvoke $r13.<java.util.GregorianCalendar: void <init>(int,int,int)>($i0, $i1, $i2);

        virtualinvoke $r1.<java.text.ParsePosition: void setIndex(int)>($i3);

        $r3 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

     label14:
        return $r3;

     label15:
        if $z0 == 0 goto label40;

        $i3 = $i3 + 1;

        $i4 = $i3 + 2;

     label16:
        $i3 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, $i3, $i4);

     label17:
        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, $i4, 58);

     label18:
        if $z0 == 0 goto label19;

        $i4 = $i4 + 1;

     label19:
        $i5 = $i4 + 2;

     label20:
        $i4 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, $i4, $i5);

     label21:
        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, $i5, 58);

     label22:
        if $z0 == 0 goto label23;

        $i5 = $i5 + 1;

     label23:
        $i6 = virtualinvoke $r0.<java.lang.String: int length()>();

     label24:
        if $i6 <= $i5 goto label41;

     label25:
        $c7 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i5);

     label26:
        $i6 = (int) $c7;

        if $i6 == 90 goto label41;

        $i6 = (int) $c7;

        if $i6 == 43 goto label41;

        $i6 = (int) $c7;

        if $i6 == 45 goto label41;

        $i6 = $i5 + 2;

     label27:
        $i8 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, $i5, $i6);

     label28:
        $i5 = $i8;

        if $i8 <= 59 goto label29;

        if $i8 >= 63 goto label29;

        $i5 = 59;

     label29:
        $z0 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>($r0, $i6, 46);

     label30:
        if $z0 == 0 goto label39;

        $i6 = $i6 + 1;

        $i8 = $i6 + 1;

     label31:
        $i9 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int indexOfNonDigit(java.lang.String,int)>($r0, $i8);

     label32:
        $i8 = $i6 + 3;

     label33:
        $i10 = staticinvoke <java.lang.Math: int min(int,int)>($i9, $i8);

        $i8 = staticinvoke <com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>($r0, $i6, $i10);

     label34:
        $i11 = $i8;

        $i6 = $i10 - $i6;

        if $i6 == 1 goto label37;

        if $i6 == 2 goto label36;

     label35:
        goto label38;

     label36:
        $i11 = $i8 * 10;

        goto label35;

     label37:
        $i11 = $i8 * 100;

        goto label35;

     label38:
        $i6 = $i11;

        $i8 = $i5;

        $i5 = $i9;

        goto label43;

     label39:
        $i8 = $i5;

        $i5 = $i6;

        goto label42;

     label40:
        $i5 = $i3;

        $i3 = 0;

        $i4 = 0;

     label41:
        $i8 = 0;

     label42:
        $i6 = 0;

     label43:
        $i9 = virtualinvoke $r0.<java.lang.String: int length()>();

     label44:
        if $i9 <= $i5 goto label78;

     label45:
        $c7 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i5);

     label46:
        $i9 = (int) $c7;

        if $i9 != 90 goto label47;

        $r4 = <com.google.gson.internal.bind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_UTC>;

        $i5 = $i5 + 1;

        goto label73;

     label47:
        $i9 = (int) $c7;

        if $i9 == 43 goto label51;

        $i9 = (int) $c7;

        if $i9 != 45 goto label48;

        goto label51;

     label48:
        $r15 = new java.lang.IndexOutOfBoundsException;

        $r5 = $r15;

        $r14 = new java.lang.StringBuilder;

        $r6 = $r14;

     label49:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid time zone indicator \'");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

     label50:
        throw $r5;

     label51:
        $r8 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i5);

     label52:
        $r7 = $r8;

     label53:
        $i9 = virtualinvoke $r8.<java.lang.String: int length()>();

     label54:
        if $i9 < 5 goto label55;

        goto label57;

     label55:
        $r14 = new java.lang.StringBuilder;

        $r6 = $r14;

     label56:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label57:
        $i9 = virtualinvoke $r7.<java.lang.String: int length()>();

     label58:
        $i5 = $i5 + $i9;

        $r8 = "+0000";

     label59:
        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

     label60:
        if $z0 != 0 goto label72;

        $r8 = "+00:00";

     label61:
        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

     label62:
        if $z0 == 0 goto label63;

        goto label72;

     label63:
        $r14 = new java.lang.StringBuilder;

        $r6 = $r14;

     label64:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GMT");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r7);

        $r8 = virtualinvoke $r4.<java.util.TimeZone: java.lang.String getID()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

     label65:
        if $z0 != 0 goto label71;

     label66:
        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "");

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

     label67:
        if $z0 == 0 goto label68;

        goto label71;

     label68:
        $r15 = new java.lang.IndexOutOfBoundsException;

        $r5 = $r15;

        $r14 = new java.lang.StringBuilder;

        $r6 = $r14;

     label69:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatching time zone indicator: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" given, resolves to ");

        $r7 = virtualinvoke $r4.<java.util.TimeZone: java.lang.String getID()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

     label70:
        throw $r5;

     label71:
        goto label73;

     label72:
        $r4 = <com.google.gson.internal.bind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_UTC>;

     label73:
        $r13 = new java.util.GregorianCalendar;

        $r2 = $r13;

     label74:
        specialinvoke $r13.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r4);

        virtualinvoke $r2.<java.util.Calendar: void setLenient(boolean)>(0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(1, $i0);

     label75:
        $i0 = $i1 - 1;

     label76:
        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(2, $i0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(5, $i2);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(11, $i3);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(12, $i4);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(13, $i8);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(14, $i6);

        virtualinvoke $r1.<java.text.ParsePosition: void setIndex(int)>($i5);

        $r3 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

     label77:
        return $r3;

     label78:
        $r16 = new java.lang.IllegalArgumentException;

        $r9 = $r16;

     label79:
        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No time zone indicator");

     label80:
        throw $r9;

     label81:
        $r10 := @caughtexception;

        goto label84;

     label82:
        $r10 := @caughtexception;

        goto label84;

     label83:
        $r10 := @caughtexception;

     label84:
        if $r0 != null goto label85;

        $r0 = null;

        goto label86;

     label85:
        $r14 = new java.lang.StringBuilder;

        $r6 = $r14;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label86:
        $r7 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = $r7;

        if $r7 == null goto label87;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label88;

     label87:
        $r14 = new java.lang.StringBuilder;

        $r6 = $r14;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label88:
        $r17 = new java.text.ParseException;

        $r12 = $r17;

        $r14 = new java.lang.StringBuilder;

        $r6 = $r14;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse date [");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.text.ParsePosition: int getIndex()>();

        specialinvoke $r17.<java.text.ParseException: void <init>(java.lang.String,int)>($r0, $i0);

        virtualinvoke $r12.<java.text.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>($r10);

        goto label89;

     label89:
        throw $r12;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label83;
        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label83;
        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label83;
        catch java.lang.IndexOutOfBoundsException from label09 to label10 with label83;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label83;
        catch java.lang.IndexOutOfBoundsException from label13 to label14 with label83;
        catch java.lang.IndexOutOfBoundsException from label16 to label17 with label83;
        catch java.lang.IndexOutOfBoundsException from label17 to label18 with label83;
        catch java.lang.IndexOutOfBoundsException from label20 to label21 with label83;
        catch java.lang.IndexOutOfBoundsException from label21 to label22 with label83;
        catch java.lang.IndexOutOfBoundsException from label23 to label24 with label83;
        catch java.lang.IndexOutOfBoundsException from label25 to label26 with label83;
        catch java.lang.IndexOutOfBoundsException from label27 to label28 with label83;
        catch java.lang.IndexOutOfBoundsException from label29 to label30 with label83;
        catch java.lang.IndexOutOfBoundsException from label31 to label32 with label83;
        catch java.lang.IndexOutOfBoundsException from label33 to label34 with label83;
        catch java.lang.IndexOutOfBoundsException from label43 to label44 with label83;
        catch java.lang.IndexOutOfBoundsException from label45 to label46 with label83;
        catch java.lang.IndexOutOfBoundsException from label49 to label52 with label83;
        catch java.lang.IndexOutOfBoundsException from label53 to label54 with label83;
        catch java.lang.IndexOutOfBoundsException from label56 to label57 with label83;
        catch java.lang.IndexOutOfBoundsException from label57 to label58 with label83;
        catch java.lang.IndexOutOfBoundsException from label59 to label60 with label83;
        catch java.lang.IndexOutOfBoundsException from label61 to label62 with label83;
        catch java.lang.IndexOutOfBoundsException from label64 to label65 with label83;
        catch java.lang.IndexOutOfBoundsException from label66 to label67 with label83;
        catch java.lang.IndexOutOfBoundsException from label69 to label71 with label83;
        catch java.lang.IndexOutOfBoundsException from label74 to label75 with label83;
        catch java.lang.IndexOutOfBoundsException from label76 to label77 with label83;
        catch java.lang.IndexOutOfBoundsException from label79 to label80 with label83;
        catch java.lang.NumberFormatException from label01 to label02 with label82;
        catch java.lang.NumberFormatException from label03 to label04 with label82;
        catch java.lang.NumberFormatException from label06 to label07 with label82;
        catch java.lang.NumberFormatException from label09 to label10 with label82;
        catch java.lang.NumberFormatException from label11 to label12 with label82;
        catch java.lang.NumberFormatException from label13 to label14 with label82;
        catch java.lang.NumberFormatException from label16 to label17 with label82;
        catch java.lang.NumberFormatException from label17 to label18 with label82;
        catch java.lang.NumberFormatException from label20 to label21 with label82;
        catch java.lang.NumberFormatException from label21 to label22 with label82;
        catch java.lang.NumberFormatException from label23 to label24 with label82;
        catch java.lang.NumberFormatException from label25 to label26 with label82;
        catch java.lang.NumberFormatException from label27 to label28 with label82;
        catch java.lang.NumberFormatException from label29 to label30 with label82;
        catch java.lang.NumberFormatException from label31 to label32 with label82;
        catch java.lang.NumberFormatException from label33 to label34 with label82;
        catch java.lang.NumberFormatException from label43 to label44 with label82;
        catch java.lang.NumberFormatException from label45 to label46 with label82;
        catch java.lang.NumberFormatException from label49 to label50 with label82;
        catch java.lang.NumberFormatException from label51 to label52 with label82;
        catch java.lang.NumberFormatException from label53 to label54 with label82;
        catch java.lang.NumberFormatException from label56 to label57 with label82;
        catch java.lang.NumberFormatException from label57 to label58 with label82;
        catch java.lang.NumberFormatException from label59 to label60 with label82;
        catch java.lang.NumberFormatException from label61 to label62 with label82;
        catch java.lang.NumberFormatException from label64 to label65 with label82;
        catch java.lang.NumberFormatException from label66 to label67 with label82;
        catch java.lang.NumberFormatException from label69 to label70 with label82;
        catch java.lang.NumberFormatException from label74 to label75 with label82;
        catch java.lang.NumberFormatException from label76 to label77 with label82;
        catch java.lang.NumberFormatException from label79 to label81 with label82;
        catch java.lang.IllegalArgumentException from label01 to label02 with label81;
        catch java.lang.IllegalArgumentException from label03 to label04 with label81;
        catch java.lang.IllegalArgumentException from label06 to label07 with label81;
        catch java.lang.IllegalArgumentException from label09 to label10 with label81;
        catch java.lang.IllegalArgumentException from label11 to label12 with label81;
        catch java.lang.IllegalArgumentException from label13 to label14 with label81;
        catch java.lang.IllegalArgumentException from label16 to label17 with label81;
        catch java.lang.IllegalArgumentException from label17 to label18 with label81;
        catch java.lang.IllegalArgumentException from label20 to label21 with label81;
        catch java.lang.IllegalArgumentException from label21 to label22 with label81;
        catch java.lang.IllegalArgumentException from label23 to label24 with label81;
        catch java.lang.IllegalArgumentException from label25 to label26 with label81;
        catch java.lang.IllegalArgumentException from label27 to label28 with label81;
        catch java.lang.IllegalArgumentException from label29 to label30 with label81;
        catch java.lang.IllegalArgumentException from label31 to label32 with label81;
        catch java.lang.IllegalArgumentException from label33 to label34 with label81;
        catch java.lang.IllegalArgumentException from label43 to label44 with label81;
        catch java.lang.IllegalArgumentException from label45 to label46 with label81;
        catch java.lang.IllegalArgumentException from label49 to label50 with label81;
        catch java.lang.IllegalArgumentException from label51 to label52 with label81;
        catch java.lang.IllegalArgumentException from label53 to label54 with label81;
        catch java.lang.IllegalArgumentException from label56 to label57 with label81;
        catch java.lang.IllegalArgumentException from label57 to label58 with label81;
        catch java.lang.IllegalArgumentException from label59 to label60 with label81;
        catch java.lang.IllegalArgumentException from label61 to label62 with label81;
        catch java.lang.IllegalArgumentException from label64 to label65 with label81;
        catch java.lang.IllegalArgumentException from label66 to label67 with label81;
        catch java.lang.IllegalArgumentException from label69 to label70 with label81;
        catch java.lang.IllegalArgumentException from label74 to label75 with label81;
        catch java.lang.IllegalArgumentException from label76 to label77 with label81;
        catch java.lang.IllegalArgumentException from label79 to label81 with label81;
    }

    public static int parseInt(java.lang.String, int, int)
    {
        char $c4;
        java.lang.NumberFormatException $r1;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.StringBuilder $r2;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        if $i2 < 0 goto label6;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 > $i1 goto label6;

        if $i2 > $i0 goto label6;

        if $i2 >= $i0 goto label2;

        $i3 = $i2 + 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i2);

        $i1 = staticinvoke <java.lang.Character: int digit(char,int)>($c4, 10);

        if $i1 < 0 goto label1;

        $i5 = neg $i1;

        goto label3;

     label1:
        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid number: ");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label2:
        $i3 = $i2;

        $i5 = 0;

     label3:
        if $i3 >= $i0 goto label5;

        $i1 = $i3 + 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        $i3 = staticinvoke <java.lang.Character: int digit(char,int)>($c4, 10);

        if $i3 < 0 goto label4;

        $i5 = $i5 * 10;

        $i5 = $i5 - $i3;

        $i3 = $i1;

        goto label3;

     label4:
        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid number: ");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label5:
        $i2 = neg $i5;

        return $i2;

     label6:
        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        goto label7;

     label7:
        throw $r1;
    }
}
