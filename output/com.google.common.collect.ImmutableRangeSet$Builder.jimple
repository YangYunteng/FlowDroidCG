public class com.google.common.collect.ImmutableRangeSet$Builder extends java.lang.Object
{
    public final java.util.List ranges;

    public void <init>()
    {
        com.google.common.collect.ImmutableRangeSet$Builder r0;
        java.util.ArrayList $r1;

        r0 := @this: com.google.common.collect.ImmutableRangeSet$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.common.collect.ImmutableRangeSet$Builder: java.util.List ranges> = $r1;

        return;
    }

    public com.google.common.collect.ImmutableRangeSet$Builder add(com.google.common.collect.Range)
    {
        java.util.List $r2;
        com.google.common.collect.ImmutableRangeSet$Builder r0;
        com.google.common.collect.Range $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableRangeSet$Builder;

        $r1 := @parameter0: com.google.common.collect.Range;

        $z0 = virtualinvoke $r1.<com.google.common.collect.Range: boolean isEmpty()>();

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "range must not be empty, but was %s", $r1);

        $r2 = r0.<com.google.common.collect.ImmutableRangeSet$Builder: java.util.List ranges>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public com.google.common.collect.ImmutableRangeSet$Builder addAll(com.google.common.collect.RangeSet)
    {
        java.util.Set $r2;
        com.google.common.collect.ImmutableRangeSet$Builder r0;
        com.google.common.collect.RangeSet $r1;

        r0 := @this: com.google.common.collect.ImmutableRangeSet$Builder;

        $r1 := @parameter0: com.google.common.collect.RangeSet;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.RangeSet: java.util.Set asRanges()>();

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableRangeSet$Builder: com.google.common.collect.ImmutableRangeSet$Builder addAll(java.lang.Iterable)>($r2);

        return r0;
    }

    public com.google.common.collect.ImmutableRangeSet$Builder addAll(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableRangeSet$Builder r0;
        java.util.Iterator $r2;
        com.google.common.collect.Range $r4;
        java.lang.Object $r3;
        java.lang.Iterable $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableRangeSet$Builder;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.common.collect.Range) $r3;

        virtualinvoke r0.<com.google.common.collect.ImmutableRangeSet$Builder: com.google.common.collect.ImmutableRangeSet$Builder add(com.google.common.collect.Range)>($r4);

        goto label1;

     label2:
        return r0;
    }

    public com.google.common.collect.ImmutableRangeSet build()
    {
        com.google.common.collect.ImmutableRangeSet$Builder r0;
        java.util.Iterator $r4;
        com.google.common.collect.Range $r7, $r8, $r9;
        com.google.common.collect.PeekingIterator $r5;
        java.util.List $r2;
        com.google.common.collect.Ordering $r3;
        com.google.common.collect.ImmutableList $r10;
        int $i0;
        java.lang.Object $r6;
        com.google.common.collect.ImmutableRangeSet $r11;
        com.google.common.collect.ImmutableList$Builder $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableRangeSet$Builder;

        $r1 = new com.google.common.collect.ImmutableList$Builder;

        $r2 = r0.<com.google.common.collect.ImmutableRangeSet$Builder: java.util.List ranges>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableList$Builder: void <init>(int)>($i0);

        $r2 = r0.<com.google.common.collect.ImmutableRangeSet$Builder: java.util.List ranges>;

        $r3 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Ordering rangeLexOrdering()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r2, $r3);

        $r2 = r0.<com.google.common.collect.ImmutableRangeSet$Builder: java.util.List ranges>;

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $r5 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.PeekingIterator peekingIterator(java.util.Iterator)>($r4);

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<com.google.common.collect.PeekingIterator: java.lang.Object next()>();

        $r7 = (com.google.common.collect.Range) $r6;

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<com.google.common.collect.PeekingIterator: java.lang.Object peek()>();

        $r8 = (com.google.common.collect.Range) $r6;

        $z0 = virtualinvoke $r7.<com.google.common.collect.Range: boolean isConnected(com.google.common.collect.Range)>($r8);

        if $z0 == 0 goto label3;

        $r9 = virtualinvoke $r7.<com.google.common.collect.Range: com.google.common.collect.Range intersection(com.google.common.collect.Range)>($r8);

        $z0 = virtualinvoke $r9.<com.google.common.collect.Range: boolean isEmpty()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "Overlapping ranges not permitted but found %s overlapping %s", $r7, $r8);

        $r6 = interfaceinvoke $r5.<com.google.common.collect.PeekingIterator: java.lang.Object next()>();

        $r8 = (com.google.common.collect.Range) $r6;

        $r7 = virtualinvoke $r7.<com.google.common.collect.Range: com.google.common.collect.Range span(com.google.common.collect.Range)>($r8);

        goto label2;

     label3:
        virtualinvoke $r1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r7);

        goto label1;

     label4:
        $r10 = virtualinvoke $r1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        $z0 = virtualinvoke $r10.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        $r11 = staticinvoke <com.google.common.collect.ImmutableRangeSet: com.google.common.collect.ImmutableRangeSet of()>();

        return $r11;

     label5:
        $i0 = virtualinvoke $r10.<java.util.AbstractCollection: int size()>();

        if $i0 != 1 goto label6;

        $r6 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>($r10);

        $r7 = (com.google.common.collect.Range) $r6;

        $r8 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range all()>();

        $z0 = virtualinvoke $r7.<com.google.common.collect.Range: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label6;

        $r11 = staticinvoke <com.google.common.collect.ImmutableRangeSet: com.google.common.collect.ImmutableRangeSet all()>();

        return $r11;

     label6:
        $r11 = new com.google.common.collect.ImmutableRangeSet;

        specialinvoke $r11.<com.google.common.collect.ImmutableRangeSet: void <init>(com.google.common.collect.ImmutableList)>($r10);

        return $r11;
    }

    public com.google.common.collect.ImmutableRangeSet$Builder combine(com.google.common.collect.ImmutableRangeSet$Builder)
    {
        java.util.List $r2;
        com.google.common.collect.ImmutableRangeSet$Builder r0, $r1;

        r0 := @this: com.google.common.collect.ImmutableRangeSet$Builder;

        $r1 := @parameter0: com.google.common.collect.ImmutableRangeSet$Builder;

        $r2 = $r1.<com.google.common.collect.ImmutableRangeSet$Builder: java.util.List ranges>;

        virtualinvoke r0.<com.google.common.collect.ImmutableRangeSet$Builder: com.google.common.collect.ImmutableRangeSet$Builder addAll(java.lang.Iterable)>($r2);

        return r0;
    }
}
