public class org.codehaus.jackson.map.ser.impl.StringCollectionSerializer extends org.codehaus.jackson.map.ser.impl.StaticListSerializerBase implements org.codehaus.jackson.map.ResolvableSerializer
{
    public org.codehaus.jackson.map.JsonSerializer _serializer;

    public void <init>(org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.impl.StringCollectionSerializer r0;
        org.codehaus.jackson.map.BeanProperty $r1;

        r0 := @this: org.codehaus.jackson.map.ser.impl.StringCollectionSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.impl.StaticListSerializerBase: void <init>(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>(class "Ljava/util/Collection;", $r1);

        return;
    }

    private final void serializeContents(java.util.Collection, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        java.util.Iterator $r5;
        java.util.Collection $r1;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.JsonSerializer $r4;
        java.lang.Exception $r8;
        org.codehaus.jackson.map.ser.impl.StringCollectionSerializer r0;
        org.codehaus.jackson.JsonGenerator $r2;
        int $i0;
        java.lang.Object $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.StringCollectionSerializer;

        $r1 := @parameter0: java.util.Collection;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: org.codehaus.jackson.map.JsonSerializer _serializer>;

        if $r4 == null goto label1;

        specialinvoke r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        return;

     label1:
        $i0 = 0;

        $r5 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        if $r7 != null goto label5;

     label3:
        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

     label4:
        goto label6;

     label5:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeString(java.lang.String)>($r7);

     label6:
        $i0 = $i0 + 1;

        goto label2;

     label7:
        $r8 := @caughtexception;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>($r3, $r8, $r1, $i0);

        goto label2;

     label8:
        return;

        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    private void serializeUsingCustom(java.util.Collection, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        java.util.Iterator $r5;
        java.util.Collection $r1;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.JsonSerializer $r4;
        java.lang.Exception $r8;
        org.codehaus.jackson.map.ser.impl.StringCollectionSerializer r0;
        org.codehaus.jackson.JsonGenerator $r2;
        java.lang.Object $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.StringCollectionSerializer;

        $r1 := @parameter0: java.util.Collection;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: org.codehaus.jackson.map.JsonSerializer _serializer>;

        $r5 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        if $r7 != null goto label4;

     label2:
        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

     label3:
        goto label1;

     label4:
        virtualinvoke $r4.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r7, $r2, $r3);

     label5:
        goto label1;

     label6:
        $r8 := @caughtexception;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>($r3, $r8, $r1, 0);

        goto label1;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public org.codehaus.jackson.JsonNode contentSchema()
    {
        org.codehaus.jackson.map.ser.impl.StringCollectionSerializer r0;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.map.ser.impl.StringCollectionSerializer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("string", 1);

        return $r1;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ser.impl.StringCollectionSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        org.codehaus.jackson.map.JsonSerializer $r3;
        org.codehaus.jackson.map.BeanProperty $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.impl.StringCollectionSerializer;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.impl.StaticListSerializerBase: org.codehaus.jackson.map.BeanProperty _property>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>(class "Ljava/lang/String;", $r1);

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: boolean isDefaultSerializer(org.codehaus.jackson.map.JsonSerializer)>($r3);

        if $z0 != 0 goto label1;

        r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: org.codehaus.jackson.map.JsonSerializer _serializer> = $r3;

     label1:
        return;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ser.impl.StringCollectionSerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        java.util.Collection $r4;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.map.ser.impl.StringCollectionSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.util.Collection) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: void serialize(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serialize(java.util.Collection, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ser.impl.StringCollectionSerializer r0;
        org.codehaus.jackson.JsonGenerator $r2;
        java.util.Collection $r1;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.JsonSerializer $r4;

        r0 := @this: org.codehaus.jackson.map.ser.impl.StringCollectionSerializer;

        $r1 := @parameter0: java.util.Collection;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        $r4 = r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: org.codehaus.jackson.map.JsonSerializer _serializer>;

        if $r4 != null goto label1;

        specialinvoke r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        goto label2;

     label1:
        specialinvoke r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

     label2:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeEndArray()>();

        return;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.impl.StringCollectionSerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.TypeSerializer $r3;
        java.util.Collection $r5;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.map.ser.impl.StringCollectionSerializer;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (java.util.Collection) $r4;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: void serializeWithType(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, $r1, $r2, $r3);

        return;
    }

    public void serializeWithType(java.util.Collection, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.impl.StringCollectionSerializer r0;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.TypeSerializer $r4;
        java.util.Collection $r1;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.JsonSerializer $r5;

        r0 := @this: org.codehaus.jackson.map.ser.impl.StringCollectionSerializer;

        $r1 := @parameter0: java.util.Collection;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        $r5 = r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: org.codehaus.jackson.map.JsonSerializer _serializer>;

        if $r5 != null goto label1;

        specialinvoke r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        goto label2;

     label1:
        specialinvoke r0.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: void serializeUsingCustom(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

     label2:
        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        return;
    }
}
