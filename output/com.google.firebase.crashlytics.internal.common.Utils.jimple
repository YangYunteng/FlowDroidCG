public final class com.google.firebase.crashlytics.internal.common.Utils extends java.lang.Object
{
    public static final java.io.FilenameFilter ALL_FILES_FILTER;
    public static final java.util.concurrent.ExecutorService TASK_CONTINUATION_EXECUTOR_SERVICE;

    static void <clinit>()
    {
        com.google.firebase.crashlytics.internal.common.Utils$1 $r1;
        java.util.concurrent.ExecutorService $r0;

        $r1 = new com.google.firebase.crashlytics.internal.common.Utils$1;

        specialinvoke $r1.<com.google.firebase.crashlytics.internal.common.Utils$1: void <init>()>();

        <com.google.firebase.crashlytics.internal.common.Utils: java.io.FilenameFilter ALL_FILES_FILTER> = $r1;

        $r0 = staticinvoke <com.google.firebase.crashlytics.internal.common.ExecutorUtils: java.util.concurrent.ExecutorService buildSingleThreadExecutorService(java.lang.String)>("awaitEvenIfOnMainThread task continuation executor");

        <com.google.firebase.crashlytics.internal.common.Utils: java.util.concurrent.ExecutorService TASK_CONTINUATION_EXECUTOR_SERVICE> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.firebase.crashlytics.internal.common.Utils r0;

        r0 := @this: com.google.firebase.crashlytics.internal.common.Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object awaitEvenIfOnMainThread(com.google.android.gms.tasks.Task)
    {
        java.lang.IllegalStateException $r8;
        java.util.concurrent.CancellationException $r11;
        java.util.concurrent.TimeoutException $r10;
        com.google.android.gms.tasks.Task $r1;
        java.lang.Exception $r9;
        java.util.concurrent.TimeUnit $r0;
        java.util.concurrent.CountDownLatch $r2;
        android.os.Looper $r5, $r6;
        com.google.android.gms.tasks.Continuation $r4;
        java.lang.Object $r7;
        java.util.concurrent.ExecutorService $r3;
        boolean $z0;

        $r1 := @parameter0: com.google.android.gms.tasks.Task;

        $r2 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r3 = <com.google.firebase.crashlytics.internal.common.Utils: java.util.concurrent.ExecutorService TASK_CONTINUATION_EXECUTOR_SERVICE>;

        $r4 = staticinvoke <com.google.firebase.crashlytics.internal.common.Utils$$Lambda$1: com.google.android.gms.tasks.Continuation lambdaFactory$(java.util.concurrent.CountDownLatch)>($r2);

        virtualinvoke $r1.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task continueWith(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation)>($r3, $r4);

        $r5 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r6 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r5 != $r6 goto label1;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(4L, $r0);

        goto label2;

     label1:
        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        $z0 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: boolean isSuccessful()>();

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: java.lang.Object getResult()>();

        return $r7;

     label3:
        $z0 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: boolean isCanceled()>();

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: boolean isComplete()>();

        if $z0 == 0 goto label4;

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r1.<com.google.android.gms.tasks.Task: java.lang.Exception getException()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r9);

        throw $r8;

     label4:
        $r10 = new java.util.concurrent.TimeoutException;

        specialinvoke $r10.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r10;

     label5:
        $r11 = new java.util.concurrent.CancellationException;

        specialinvoke $r11.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Task is already canceled");

        throw $r11;
    }

    public static com.google.android.gms.tasks.Task callTask(java.util.concurrent.Executor, java.util.concurrent.Callable)
    {
        java.util.concurrent.Executor $r4;
        com.google.android.gms.tasks.TaskCompletionSource $r1;
        java.util.concurrent.Callable $r0;
        com.google.firebase.crashlytics.internal.common.Utils$3 $r2;
        com.google.android.gms.tasks.Task $r3;

        $r4 := @parameter0: java.util.concurrent.Executor;

        $r0 := @parameter1: java.util.concurrent.Callable;

        $r1 = new com.google.android.gms.tasks.TaskCompletionSource;

        specialinvoke $r1.<com.google.android.gms.tasks.TaskCompletionSource: void <init>()>();

        $r2 = new com.google.firebase.crashlytics.internal.common.Utils$3;

        specialinvoke $r2.<com.google.firebase.crashlytics.internal.common.Utils$3: void <init>(java.util.concurrent.Callable,com.google.android.gms.tasks.TaskCompletionSource)>($r0, $r1);

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        $r3 = virtualinvoke $r1.<com.google.android.gms.tasks.TaskCompletionSource: com.google.android.gms.tasks.Task getTask()>();

        return $r3;
    }

    public static int capFileCount(java.io.File, int, java.util.Comparator)
    {
        java.io.FilenameFilter $r1;
        int $i0;
        java.util.Comparator $r0;
        java.io.File $r2;

        $r2 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.util.Comparator;

        $r1 = <com.google.firebase.crashlytics.internal.common.Utils: java.io.FilenameFilter ALL_FILES_FILTER>;

        $i0 = staticinvoke <com.google.firebase.crashlytics.internal.common.Utils: int capFileCount(java.io.File,java.io.FilenameFilter,int,java.util.Comparator)>($r2, $r1, $i0, $r0);

        return $i0;
    }

    public static int capFileCount(java.io.File, java.io.FilenameFilter, int, java.util.Comparator)
    {
        java.io.FilenameFilter $r0;
        java.util.List $r4;
        int $i0;
        java.util.Comparator $r1;
        java.io.File[] $r3;
        java.io.File $r2;

        $r2 := @parameter0: java.io.File;

        $r0 := @parameter1: java.io.FilenameFilter;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.util.Comparator;

        $r3 = virtualinvoke $r2.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r0);

        if $r3 != null goto label1;

        return 0;

     label1:
        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $i0 = staticinvoke <com.google.firebase.crashlytics.internal.common.Utils: int capFileCount(java.util.List,int,java.util.Comparator)>($r4, $i0, $r1);

        return $i0;
    }

    public static int capFileCount(java.util.List, int, java.util.Comparator)
    {
        java.util.Iterator $r2;
        java.io.File $r4;
        java.util.List $r0;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.util.Comparator $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.Comparator;

        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r0, $r1);

        $r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.io.File) $r3;

        if $i1 > $i0 goto label2;

        return $i1;

     label2:
        staticinvoke <com.google.firebase.crashlytics.internal.common.Utils: void recursiveDelete(java.io.File)>($r4);

        $i2 = -1;

        $i1 = $i1 + $i2;

        goto label1;

     label3:
        return $i1;
    }

    public static int capSessionCount(java.io.File, java.io.File, int, java.util.Comparator)
    {
        java.io.FilenameFilter $r6;
        java.io.File $r2, $r3;
        java.util.ArrayList $r1;
        java.util.List $r9;
        int $i0;
        java.util.Comparator $r0;
        java.io.File[] $r4, $r5, $r7, $r8;

        $r2 := @parameter0: java.io.File;

        $r3 := @parameter1: java.io.File;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.util.Comparator;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke $r2.<java.io.File: java.io.File[] listFiles()>();

        $r5 = $r4;

        $r6 = <com.google.firebase.crashlytics.internal.common.Utils: java.io.FilenameFilter ALL_FILES_FILTER>;

        $r7 = virtualinvoke $r3.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r6);

        $r8 = $r7;

        if $r4 == null goto label1;

        goto label2;

     label1:
        $r5 = newarray (java.io.File)[0];

     label2:
        if $r7 == null goto label3;

        goto label4;

     label3:
        $r8 = newarray (java.io.File)[0];

     label4:
        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        $i0 = staticinvoke <com.google.firebase.crashlytics.internal.common.Utils: int capFileCount(java.util.List,int,java.util.Comparator)>($r1, $i0, $r0);

        return $i0;
    }

    public static java.lang.Object lambda$awaitEvenIfOnMainThread$0(java.util.concurrent.CountDownLatch, com.google.android.gms.tasks.Task)
    {
        java.util.concurrent.CountDownLatch $r1;
        com.google.android.gms.tasks.Task $r0;

        $r1 := @parameter0: java.util.concurrent.CountDownLatch;

        $r0 := @parameter1: com.google.android.gms.tasks.Task;

        virtualinvoke $r1.<java.util.concurrent.CountDownLatch: void countDown()>();

        return null;
    }

    public static com.google.android.gms.tasks.Task race(com.google.android.gms.tasks.Task, com.google.android.gms.tasks.Task)
    {
        com.google.android.gms.tasks.TaskCompletionSource $r1;
        com.google.firebase.crashlytics.internal.common.Utils$2 $r2;
        com.google.android.gms.tasks.Task $r0, $r3;

        $r3 := @parameter0: com.google.android.gms.tasks.Task;

        $r0 := @parameter1: com.google.android.gms.tasks.Task;

        $r1 = new com.google.android.gms.tasks.TaskCompletionSource;

        specialinvoke $r1.<com.google.android.gms.tasks.TaskCompletionSource: void <init>()>();

        $r2 = new com.google.firebase.crashlytics.internal.common.Utils$2;

        specialinvoke $r2.<com.google.firebase.crashlytics.internal.common.Utils$2: void <init>(com.google.android.gms.tasks.TaskCompletionSource)>($r1);

        virtualinvoke $r3.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task continueWith(com.google.android.gms.tasks.Continuation)>($r2);

        virtualinvoke $r0.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task continueWith(com.google.android.gms.tasks.Continuation)>($r2);

        $r3 = virtualinvoke $r1.<com.google.android.gms.tasks.TaskCompletionSource: com.google.android.gms.tasks.Task getTask()>();

        return $r3;
    }

    public static void recursiveDelete(java.io.File)
    {
        int $i0, $i1;
        java.io.File[] $r2;
        java.io.File $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r2[$i1];

        staticinvoke <com.google.firebase.crashlytics.internal.common.Utils: void recursiveDelete(java.io.File)>($r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.io.File: boolean delete()>();

        return;
    }
}
