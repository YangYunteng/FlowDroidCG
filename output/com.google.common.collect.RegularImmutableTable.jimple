public abstract class com.google.common.collect.RegularImmutableTable extends com.google.common.collect.ImmutableTable
{

    public void <init>()
    {
        com.google.common.collect.RegularImmutableTable r0;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        specialinvoke r0.<com.google.common.collect.ImmutableTable: void <init>()>();

        return;
    }

    public static com.google.common.collect.RegularImmutableTable forCells(java.lang.Iterable)
    {
        com.google.common.collect.RegularImmutableTable $r0;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.google.common.collect.RegularImmutableTable: com.google.common.collect.RegularImmutableTable forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator)>($r1, null, null);

        return $r0;
    }

    public static com.google.common.collect.RegularImmutableTable forCells(java.util.List, java.util.Comparator, java.util.Comparator)
    {
        java.util.List $r4;
        com.google.common.collect.RegularImmutableTable $r3;
        java.util.Comparator $r0, $r1;
        com.google.common.collect.RegularImmutableTable$1 $r2;

        $r4 := @parameter0: java.util.List;

        $r0 := @parameter1: java.util.Comparator;

        $r1 := @parameter2: java.util.Comparator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        if $r0 != null goto label1;

        if $r1 == null goto label2;

     label1:
        $r2 = new com.google.common.collect.RegularImmutableTable$1;

        specialinvoke $r2.<com.google.common.collect.RegularImmutableTable$1: void <init>(java.util.Comparator,java.util.Comparator)>($r0, $r1);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r4, $r2);

     label2:
        $r3 = staticinvoke <com.google.common.collect.RegularImmutableTable: com.google.common.collect.RegularImmutableTable forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator)>($r4, $r0, $r1);

        return $r3;
    }

    public static final com.google.common.collect.RegularImmutableTable forCellsInternal(java.lang.Iterable, java.util.Comparator, java.util.Comparator)
    {
        com.google.common.collect.ImmutableSet $r9, $r11;
        java.util.Iterator $r6;
        java.lang.Iterable $r3;
        com.google.common.collect.ImmutableList $r5, $r10;
        com.google.common.collect.Table$Cell $r8;
        com.google.common.collect.RegularImmutableTable $r12;
        java.lang.Object $r7;
        java.util.Comparator $r0, $r4;
        java.util.LinkedHashSet $r1, $r2;
        boolean $z0;

        $r3 := @parameter0: java.lang.Iterable;

        $r4 := @parameter1: java.util.Comparator;

        $r0 := @parameter2: java.util.Comparator;

        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        $r5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r3);

        $r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.google.common.collect.Table$Cell) $r7;

        $r7 = interfaceinvoke $r8.<com.google.common.collect.Table$Cell: java.lang.Object getRowKey()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $r7 = interfaceinvoke $r8.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        if $r4 != null goto label3;

        $r9 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r1);

        goto label4;

     label3:
        $r10 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList sortedCopyOf(java.util.Comparator,java.lang.Iterable)>($r4, $r1);

        $r9 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r10);

     label4:
        if $r0 != null goto label5;

        $r11 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r2);

        goto label6;

     label5:
        $r10 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList sortedCopyOf(java.util.Comparator,java.lang.Iterable)>($r0, $r2);

        $r11 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r10);

     label6:
        $r12 = staticinvoke <com.google.common.collect.RegularImmutableTable: com.google.common.collect.RegularImmutableTable forOrderedComponents(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)>($r5, $r9, $r11);

        return $r12;
    }

    public static com.google.common.collect.RegularImmutableTable forOrderedComponents(com.google.common.collect.ImmutableList, com.google.common.collect.ImmutableSet, com.google.common.collect.ImmutableSet)
    {
        com.google.common.collect.DenseImmutableTable $r3;
        com.google.common.collect.ImmutableSet $r1, $r2;
        long $l1, $l2, $l3;
        com.google.common.collect.ImmutableList $r0;
        byte $b4;
        com.google.common.collect.SparseImmutableTable $r4;
        int $i0;

        $r0 := @parameter0: com.google.common.collect.ImmutableList;

        $r1 := @parameter1: com.google.common.collect.ImmutableSet;

        $r2 := @parameter2: com.google.common.collect.ImmutableSet;

        $i0 = virtualinvoke $r0.<java.util.AbstractCollection: int size()>();

        $l1 = (long) $i0;

        $i0 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        $l2 = (long) $i0;

        $i0 = virtualinvoke $r2.<java.util.AbstractCollection: int size()>();

        $l3 = (long) $i0;

        $l2 = $l2 * $l3;

        $l2 = $l2 / 2L;

        $b4 = $l1 cmp $l2;

        $i0 = (int) $b4;

        if $i0 <= 0 goto label1;

        $r3 = new com.google.common.collect.DenseImmutableTable;

        specialinvoke $r3.<com.google.common.collect.DenseImmutableTable: void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)>($r0, $r1, $r2);

        return $r3;

     label1:
        $r4 = new com.google.common.collect.SparseImmutableTable;

        specialinvoke $r4.<com.google.common.collect.SparseImmutableTable: void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)>($r0, $r1, $r2);

        return $r4;
    }

    public final com.google.common.collect.ImmutableSet createCellSet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.RegularImmutableTable r0;
        boolean $z0;
        com.google.common.collect.RegularImmutableTable$CellSet $r2;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r1;

     label1:
        $r2 = new com.google.common.collect.RegularImmutableTable$CellSet;

        specialinvoke $r2.<com.google.common.collect.RegularImmutableTable$CellSet: void <init>(com.google.common.collect.RegularImmutableTable,com.google.common.collect.RegularImmutableTable$1)>(r0, null);

        return $r2;
    }

    public volatile java.util.Set createCellSet()
    {
        com.google.common.collect.RegularImmutableTable r0;
        com.google.common.collect.ImmutableSet $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableSet createCellSet()>();

        return $r1;
    }

    public final com.google.common.collect.ImmutableCollection createValues()
    {
        com.google.common.collect.ImmutableList $r1;
        com.google.common.collect.RegularImmutableTable r0;
        com.google.common.collect.RegularImmutableTable$Values $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        return $r1;

     label1:
        $r2 = new com.google.common.collect.RegularImmutableTable$Values;

        specialinvoke $r2.<com.google.common.collect.RegularImmutableTable$Values: void <init>(com.google.common.collect.RegularImmutableTable,com.google.common.collect.RegularImmutableTable$1)>(r0, null);

        return $r2;
    }

    public volatile java.util.Collection createValues()
    {
        com.google.common.collect.RegularImmutableTable r0;
        com.google.common.collect.ImmutableCollection $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableCollection createValues()>();

        return $r1;
    }

    public abstract com.google.common.collect.Table$Cell getCell(int);

    public abstract java.lang.Object getValue(int);
}
