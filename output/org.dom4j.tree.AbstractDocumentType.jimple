public abstract class org.dom4j.tree.AbstractDocumentType extends org.dom4j.tree.AbstractNode implements org.dom4j.DocumentType
{

    public void <init>()
    {
        org.dom4j.tree.AbstractDocumentType r0;

        r0 := @this: org.dom4j.tree.AbstractDocumentType;

        specialinvoke r0.<org.dom4j.tree.AbstractNode: void <init>()>();

        return;
    }

    public void accept(org.dom4j.Visitor)
    {
        org.dom4j.Visitor $r1;
        org.dom4j.tree.AbstractDocumentType r0;

        r0 := @this: org.dom4j.tree.AbstractDocumentType;

        $r1 := @parameter0: org.dom4j.Visitor;

        interfaceinvoke $r1.<org.dom4j.Visitor: void visit(org.dom4j.DocumentType)>(r0);

        return;
    }

    public java.lang.String asXML()
    {
        java.lang.StringBuffer $r1;
        int $i0;
        java.lang.String $r2;
        org.dom4j.tree.AbstractDocumentType r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractDocumentType;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("<!DOCTYPE ");

        $r2 = interfaceinvoke r0.<org.dom4j.DocumentType: java.lang.String getElementName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = interfaceinvoke r0.<org.dom4j.DocumentType: java.lang.String getPublicID()>();

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" PUBLIC \"");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = interfaceinvoke r0.<org.dom4j.DocumentType: java.lang.String getSystemID()>();

        if $r2 == null goto label4;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        if $z0 != 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" SYSTEM");

     label3:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" \"");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

     label4:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.dom4j.tree.AbstractDocumentType r0;

        r0 := @this: org.dom4j.tree.AbstractDocumentType;

        $r1 = interfaceinvoke r0.<org.dom4j.DocumentType: java.lang.String getElementName()>();

        return $r1;
    }

    public short getNodeType()
    {
        org.dom4j.tree.AbstractDocumentType r0;

        r0 := @this: org.dom4j.tree.AbstractDocumentType;

        return 10;
    }

    public java.lang.String getPath(org.dom4j.Element)
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.AbstractDocumentType r0;

        r0 := @this: org.dom4j.tree.AbstractDocumentType;

        $r1 := @parameter0: org.dom4j.Element;

        return "";
    }

    public java.lang.String getText()
    {
        java.util.Iterator $r3;
        org.dom4j.tree.AbstractDocumentType r0;
        java.util.List $r1;
        java.lang.StringBuffer $r2;
        int $i0;
        java.lang.Object $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractDocumentType;

        $r1 = interfaceinvoke r0.<org.dom4j.DocumentType: java.util.List getInternalDeclarations()>();

        if $r1 == null goto label4;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label4;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label1;

     label3:
        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;

     label4:
        return "";
    }

    public java.lang.String getUniquePath(org.dom4j.Element)
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.AbstractDocumentType r0;

        r0 := @this: org.dom4j.tree.AbstractDocumentType;

        $r1 := @parameter0: org.dom4j.Element;

        return "";
    }

    public void setName(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.tree.AbstractDocumentType r0;

        r0 := @this: org.dom4j.tree.AbstractDocumentType;

        $r1 := @parameter0: java.lang.String;

        interfaceinvoke r0.<org.dom4j.DocumentType: void setElementName(java.lang.String)>($r1);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractDocumentType r0;

        r0 := @this: org.dom4j.tree.AbstractDocumentType;

        $r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [DocumentType: ");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractDocumentType: java.lang.String asXML()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void write(java.io.Writer)
    {
        java.util.Iterator $r4;
        org.dom4j.tree.AbstractDocumentType r0;
        java.util.List $r3;
        java.io.Writer $r1;
        int $i0;
        java.lang.Object $r5;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractDocumentType;

        $r1 := @parameter0: java.io.Writer;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("<!DOCTYPE ");

        $r2 = interfaceinvoke r0.<org.dom4j.DocumentType: java.lang.String getElementName()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        $r2 = interfaceinvoke r0.<org.dom4j.DocumentType: java.lang.String getPublicID()>();

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(" PUBLIC \"");

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("\"");

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = interfaceinvoke r0.<org.dom4j.DocumentType: java.lang.String getSystemID()>();

        if $r2 == null goto label4;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        if $z0 != 0 goto label3;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(" SYSTEM");

     label3:
        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(" \"");

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("\"");

     label4:
        $r3 = interfaceinvoke r0.<org.dom4j.DocumentType: java.util.List getInternalDeclarations()>();

        if $r3 == null goto label7;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label7;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(" [");

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label6;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("\n]");

        goto label7;

     label6:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("\n  ");

        $r2 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        goto label5;

     label7:
        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(">");

        return;
    }
}
