public class com.google.common.collect.AbstractTable$CellSet extends java.util.AbstractSet
{
    public final com.google.common.collect.AbstractTable this$0;

    public void <init>(com.google.common.collect.AbstractTable)
    {
        com.google.common.collect.AbstractTable$CellSet r0;
        com.google.common.collect.AbstractTable $r1;

        r0 := @this: com.google.common.collect.AbstractTable$CellSet;

        $r1 := @parameter0: com.google.common.collect.AbstractTable;

        r0.<com.google.common.collect.AbstractTable$CellSet: com.google.common.collect.AbstractTable this$0> = $r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public void clear()
    {
        com.google.common.collect.AbstractTable$CellSet r0;
        com.google.common.collect.AbstractTable $r1;

        r0 := @this: com.google.common.collect.AbstractTable$CellSet;

        $r1 = r0.<com.google.common.collect.AbstractTable$CellSet: com.google.common.collect.AbstractTable this$0>;

        virtualinvoke $r1.<com.google.common.collect.AbstractTable: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Map$Entry $r7;
        com.google.common.collect.AbstractTable$CellSet r0;
        com.google.common.collect.AbstractTable $r3;
        java.util.Set $r5;
        java.util.Map $r4;
        com.google.common.collect.Table$Cell $r2;
        java.lang.Object $r1, $r6;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractTable$CellSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.collect.Table$Cell;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Table$Cell) $r1;

        $r3 = r0.<com.google.common.collect.AbstractTable$CellSet: com.google.common.collect.AbstractTable this$0>;

        $r4 = interfaceinvoke $r3.<com.google.common.collect.Table: java.util.Map rowMap()>();

        $r1 = interfaceinvoke $r2.<com.google.common.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r4, $r1);

        $r4 = (java.util.Map) $r1;

        if $r4 == null goto label1;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r1 = interfaceinvoke $r2.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r6 = interfaceinvoke $r2.<com.google.common.collect.Table$Cell: java.lang.Object getValue()>();

        $r7 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>($r1, $r6);

        $z0 = staticinvoke <com.google.common.collect.Collections2: boolean safeContains(java.util.Collection,java.lang.Object)>($r5, $r7);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.AbstractTable$CellSet r0;
        java.util.Iterator $r1;
        com.google.common.collect.AbstractTable $r2;

        r0 := @this: com.google.common.collect.AbstractTable$CellSet;

        $r2 = r0.<com.google.common.collect.AbstractTable$CellSet: com.google.common.collect.AbstractTable this$0>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.AbstractTable: java.util.Iterator cellIterator()>();

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Map$Entry $r7;
        com.google.common.collect.AbstractTable$CellSet r0;
        com.google.common.collect.AbstractTable $r3;
        java.util.Set $r5;
        java.util.Map $r4;
        com.google.common.collect.Table$Cell $r2;
        java.lang.Object $r1, $r6;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractTable$CellSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.collect.Table$Cell;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Table$Cell) $r1;

        $r3 = r0.<com.google.common.collect.AbstractTable$CellSet: com.google.common.collect.AbstractTable this$0>;

        $r4 = interfaceinvoke $r3.<com.google.common.collect.Table: java.util.Map rowMap()>();

        $r1 = interfaceinvoke $r2.<com.google.common.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r4, $r1);

        $r4 = (java.util.Map) $r1;

        if $r4 == null goto label1;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r1 = interfaceinvoke $r2.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r6 = interfaceinvoke $r2.<com.google.common.collect.Table$Cell: java.lang.Object getValue()>();

        $r7 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>($r1, $r6);

        $z0 = staticinvoke <com.google.common.collect.Collections2: boolean safeRemove(java.util.Collection,java.lang.Object)>($r5, $r7);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.AbstractTable$CellSet r0;
        com.google.common.collect.AbstractTable $r1;

        r0 := @this: com.google.common.collect.AbstractTable$CellSet;

        $r1 = r0.<com.google.common.collect.AbstractTable$CellSet: com.google.common.collect.AbstractTable this$0>;

        $i0 = interfaceinvoke $r1.<com.google.common.collect.Table: int size()>();

        return $i0;
    }

    public java.util.Spliterator spliterator()
    {
        com.google.common.collect.AbstractTable$CellSet r0;
        java.util.Spliterator $r1;
        com.google.common.collect.AbstractTable $r2;

        r0 := @this: com.google.common.collect.AbstractTable$CellSet;

        $r2 = r0.<com.google.common.collect.AbstractTable$CellSet: com.google.common.collect.AbstractTable this$0>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.AbstractTable: java.util.Spliterator cellSpliterator()>();

        return $r1;
    }
}
