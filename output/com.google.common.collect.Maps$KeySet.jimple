public class com.google.common.collect.Maps$KeySet extends com.google.common.collect.Sets$ImprovedAbstractSet
{
    public final java.util.Map map;

    public void <init>(java.util.Map)
    {
        com.google.common.collect.Maps$KeySet r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 := @parameter0: java.util.Map;

        specialinvoke r0.<com.google.common.collect.Sets$ImprovedAbstractSet: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.collect.Maps$KeySet: java.util.Map map> = $r1;

        return;
    }

    public static void a(java.util.function.Consumer, java.lang.Object, java.lang.Object)
    {
        java.util.function.Consumer $r0;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.util.function.Consumer;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        interfaceinvoke $r0.<java.util.function.Consumer: void accept(java.lang.Object)>($r1);

        return;
    }

    public void clear()
    {
        com.google.common.collect.Maps$KeySet r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object $r1;
        com.google.common.collect.Maps$KeySet r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public void forEach(java.util.function.Consumer)
    {
        java.util.function.Consumer $r1;
        java.util.Map $r2;
        c.i.b.c.Wa $r3;
        com.google.common.collect.Maps$KeySet r0;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 := @parameter0: java.util.function.Consumer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.collect.Maps$KeySet: java.util.Map map>;

        $r3 = new c.i.b.c.Wa;

        specialinvoke $r3.<c.i.b.c.Wa: void <init>(java.util.function.Consumer)>($r1);

        interfaceinvoke $r2.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r3);

        return;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.Maps$KeySet r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        com.google.common.collect.Maps$KeySet r0;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.google.common.collect.Maps: java.util.Iterator keyIterator(java.util.Iterator)>($r3);

        return $r3;
    }

    public java.util.Map map()
    {
        com.google.common.collect.Maps$KeySet r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        r1 = r0.<com.google.common.collect.Maps$KeySet: java.util.Map map>;

        return r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Object $r1;
        com.google.common.collect.Maps$KeySet r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return 1;

     label1:
        return 0;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.Maps$KeySet r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }
}
