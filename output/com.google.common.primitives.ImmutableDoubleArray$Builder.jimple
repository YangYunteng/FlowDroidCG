public final class com.google.common.primitives.ImmutableDoubleArray$Builder extends java.lang.Object
{
    public double[] array;
    public int count;

    public void <init>(int)
    {
        com.google.common.primitives.ImmutableDoubleArray$Builder r0;
        int $i0;
        double[] $r1;

        r0 := @this: com.google.common.primitives.ImmutableDoubleArray$Builder;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count> = 0;

        $r1 = newarray (double)[$i0];

        r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: double[] array> = $r1;

        return;
    }

    private void ensureRoomFor(int)
    {
        com.google.common.primitives.ImmutableDoubleArray$Builder r0;
        int $i0, $i1;
        double[] $r1, $r2;

        r0 := @this: com.google.common.primitives.ImmutableDoubleArray$Builder;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count>;

        $i0 = $i1 + $i0;

        $r1 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: double[] array>;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label1;

        $i1 = lengthof $r1;

        $i0 = staticinvoke <com.google.common.primitives.ImmutableDoubleArray$Builder: int expandedCapacity(int,int)>($i1, $i0);

        $r1 = newarray (double)[$i0];

        $r2 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: double[] array>;

        $i0 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: double[] array> = $r1;

     label1:
        return;
    }

    public static int expandedCapacity(int, int)
    {
        int $i0, $i1, $i2;
        java.lang.AssertionError $r0;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        if $i2 < 0 goto label2;

        $i0 = $i1 >> 1;

        $i1 = $i1 + $i0;

        $i1 = $i1 + 1;

        if $i1 >= $i2 goto label1;

        $i1 = -1;

        $i1 = $i2 + $i1;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1);

        $i1 = $i1 << 1;

     label1:
        if $i1 >= 0 goto label3;

        return 2147483647;

     label2:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("cannot store more than MAX_VALUE elements");

        throw $r0;

     label3:
        return $i1;
    }

    public com.google.common.primitives.ImmutableDoubleArray$Builder add(double)
    {
        com.google.common.primitives.ImmutableDoubleArray$Builder r0;
        double[] $r1;
        int $i0;
        double $d0;

        r0 := @this: com.google.common.primitives.ImmutableDoubleArray$Builder;

        $d0 := @parameter0: double;

        specialinvoke r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: void ensureRoomFor(int)>(1);

        $r1 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: double[] array>;

        $i0 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count>;

        $r1[$i0] = $d0;

        $i0 = $i0 + 1;

        r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count> = $i0;

        return r0;
    }

    public com.google.common.primitives.ImmutableDoubleArray$Builder addAll(com.google.common.primitives.ImmutableDoubleArray)
    {
        com.google.common.primitives.ImmutableDoubleArray$Builder r0;
        com.google.common.primitives.ImmutableDoubleArray $r2;
        double[] $r1, $r3;
        int $i0, $i1, $i2;

        r0 := @this: com.google.common.primitives.ImmutableDoubleArray$Builder;

        $r2 := @parameter0: com.google.common.primitives.ImmutableDoubleArray;

        $i0 = virtualinvoke $r2.<com.google.common.primitives.ImmutableDoubleArray: int length()>();

        specialinvoke r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: void ensureRoomFor(int)>($i0);

        $r3 = staticinvoke <com.google.common.primitives.ImmutableDoubleArray: double[] access$000(com.google.common.primitives.ImmutableDoubleArray)>($r2);

        $i1 = staticinvoke <com.google.common.primitives.ImmutableDoubleArray: int access$100(com.google.common.primitives.ImmutableDoubleArray)>($r2);

        $r1 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: double[] array>;

        $i0 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count>;

        $i2 = virtualinvoke $r2.<com.google.common.primitives.ImmutableDoubleArray: int length()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i1, $r1, $i0, $i2);

        $i0 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count>;

        $i1 = virtualinvoke $r2.<com.google.common.primitives.ImmutableDoubleArray: int length()>();

        $i0 = $i0 + $i1;

        r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count> = $i0;

        return r0;
    }

    public com.google.common.primitives.ImmutableDoubleArray$Builder addAll(java.lang.Iterable)
    {
        com.google.common.primitives.ImmutableDoubleArray$Builder r0;
        java.util.Iterator $r3;
        java.lang.Double $r5;
        java.util.Collection $r2;
        java.lang.Iterable $r1;
        java.lang.Object $r4;
        boolean $z0;
        double $d0;

        r0 := @this: com.google.common.primitives.ImmutableDoubleArray$Builder;

        $r1 := @parameter0: java.lang.Iterable;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Collection) $r1;

        r0 = virtualinvoke r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: com.google.common.primitives.ImmutableDoubleArray$Builder addAll(java.util.Collection)>($r2);

        return r0;

     label1:
        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Double) $r4;

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        virtualinvoke r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: com.google.common.primitives.ImmutableDoubleArray$Builder add(double)>($d0);

        goto label2;

     label3:
        return r0;
    }

    public com.google.common.primitives.ImmutableDoubleArray$Builder addAll(java.util.Collection)
    {
        com.google.common.primitives.ImmutableDoubleArray$Builder r0;
        java.util.Iterator $r3;
        java.lang.Double $r5;
        java.util.Collection $r2;
        double[] $r1;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;
        double $d0;

        r0 := @this: com.google.common.primitives.ImmutableDoubleArray$Builder;

        $r2 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        specialinvoke r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: void ensureRoomFor(int)>($i0);

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Double) $r4;

        $r1 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: double[] array>;

        $i0 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count>;

        $i1 = $i0 + 1;

        r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count> = $i1;

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $r1[$i0] = $d0;

        goto label1;

     label2:
        return r0;
    }

    public com.google.common.primitives.ImmutableDoubleArray$Builder addAll(java.util.stream.DoubleStream)
    {
        com.google.common.primitives.ImmutableDoubleArray$Builder r0;
        byte $b0;
        java.util.Spliterator$OfDouble $r2;
        int $i2;
        long $l1;
        c.i.b.g.a $r3;
        java.util.stream.DoubleStream $r1;

        r0 := @this: com.google.common.primitives.ImmutableDoubleArray$Builder;

        $r1 := @parameter0: java.util.stream.DoubleStream;

        $r2 = interfaceinvoke $r1.<java.util.stream.DoubleStream: java.util.Spliterator$OfDouble spliterator()>();

        $l1 = interfaceinvoke $r2.<java.util.Spliterator$OfDouble: long getExactSizeIfKnown()>();

        $b0 = $l1 cmp 0L;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label1;

        $i2 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l1);

        specialinvoke r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: void ensureRoomFor(int)>($i2);

     label1:
        $r3 = new c.i.b.g.a;

        specialinvoke $r3.<c.i.b.g.a: void <init>(com.google.common.primitives.ImmutableDoubleArray$Builder)>(r0);

        interfaceinvoke $r2.<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>($r3);

        return r0;
    }

    public com.google.common.primitives.ImmutableDoubleArray$Builder addAll(double[])
    {
        com.google.common.primitives.ImmutableDoubleArray$Builder r0;
        int $i0, $i1;
        double[] $r1, $r2;

        r0 := @this: com.google.common.primitives.ImmutableDoubleArray$Builder;

        $r1 := @parameter0: double[];

        $i0 = lengthof $r1;

        specialinvoke r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: void ensureRoomFor(int)>($i0);

        $r2 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: double[] array>;

        $i0 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count>;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i0, $i1);

        $i0 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count>;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count> = $i0;

        return r0;
    }

    public com.google.common.primitives.ImmutableDoubleArray build()
    {
        com.google.common.primitives.ImmutableDoubleArray$Builder r0;
        com.google.common.primitives.ImmutableDoubleArray $r1;
        double[] $r2;
        int $i0;

        r0 := @this: com.google.common.primitives.ImmutableDoubleArray$Builder;

        $i0 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: int count>;

        if $i0 != 0 goto label1;

        $r1 = staticinvoke <com.google.common.primitives.ImmutableDoubleArray: com.google.common.primitives.ImmutableDoubleArray access$200()>();

        return $r1;

     label1:
        $r1 = new com.google.common.primitives.ImmutableDoubleArray;

        $r2 = r0.<com.google.common.primitives.ImmutableDoubleArray$Builder: double[] array>;

        specialinvoke $r1.<com.google.common.primitives.ImmutableDoubleArray: void <init>(double[],int,int,com.google.common.primitives.ImmutableDoubleArray$1)>($r2, 0, $i0, null);

        return $r1;
    }
}
