public abstract class org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer extends org.codehaus.jackson.map.ser.ContainerSerializerBase implements org.codehaus.jackson.map.ResolvableSerializer
{
    public org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers;
    public org.codehaus.jackson.map.JsonSerializer _elementSerializer;
    public final org.codehaus.jackson.type.JavaType _elementType;
    public final org.codehaus.jackson.map.BeanProperty _property;
    public final boolean _staticTyping;
    public final org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer;

    public void <init>(java.lang.Class, org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer r0;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r1;
        org.codehaus.jackson.map.BeanProperty $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $z0 := @parameter2: boolean;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r4 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r1, $r2, $z0, $r3, $r4, null);

        return;
    }

    public void <init>(java.lang.Class, org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer r0;
        org.codehaus.jackson.map.JsonSerializer $r4;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.TypeSerializer $r2;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class $r5;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap $r6;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer;

        $r5 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r3 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        $r4 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        $z1 = 0;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializerBase: void <init>(java.lang.Class,boolean)>($r5, 0);

        r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.type.JavaType _elementType> = $r1;

        if $z0 != 0 goto label1;

        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: boolean isFinal()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

     label2:
        r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: boolean _staticTyping> = $z1;

        r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer> = $r2;

        r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.BeanProperty _property> = $r3;

        r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer> = $r4;

        $r6 = staticinvoke <org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap emptyMap()>();

        r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r6;

        return;
    }

    public final org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap, java.lang.Class, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r5;
        org.codehaus.jackson.map.JsonSerializer r7;
        org.codehaus.jackson.map.BeanProperty $r1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult $r2;
        java.lang.Class $r4;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap $r3, $r6;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer;

        $r3 := @parameter0: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        $r4 := @parameter1: java.lang.Class;

        $r5 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r2 = virtualinvoke $r3.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSerializer(java.lang.Class,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.BeanProperty)>($r4, $r5, $r1);

        $r6 = $r2.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        if $r3 == $r6 goto label1;

        r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r6;

     label1:
        r7 = $r2.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.JsonSerializer serializer>;

        return r7;
    }

    public final org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r5;
        org.codehaus.jackson.map.JsonSerializer r7;
        org.codehaus.jackson.map.BeanProperty $r1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult $r2;
        org.codehaus.jackson.type.JavaType $r4;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap $r3, $r6;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer;

        $r3 := @parameter0: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        $r4 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r5 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r2 = virtualinvoke $r3.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.BeanProperty)>($r4, $r5, $r1);

        $r6 = $r2.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        if $r3 == $r6 goto label1;

        r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r6;

     label1:
        r7 = $r2.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.JsonSerializer serializer>;

        return r7;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.map.JsonSerializer $r11;
        org.codehaus.jackson.JsonNode $r4;
        org.codehaus.jackson.map.BeanProperty $r10;
        org.codehaus.jackson.schema.SchemaAware $r12;
        java.lang.reflect.ParameterizedType $r6;
        java.lang.reflect.Type $r2;
        java.lang.reflect.Type[] $r7;
        int $i0;
        org.codehaus.jackson.type.JavaType $r5, $r8;
        java.lang.Class $r9;
        org.codehaus.jackson.node.ObjectNode $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("array", 1);

        $r4 = null;

        if $r2 == null goto label2;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r2);

        $r5 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        if $r5 != null goto label1;

        $z0 = $r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r6 = (java.lang.reflect.ParameterizedType) $r2;

        $r7 = interfaceinvoke $r6.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r7;

        if $i0 != 1 goto label1;

        $r2 = $r7[0];

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r2);

        goto label3;

     label1:
        goto label3;

     label2:
        $r5 = null;

     label3:
        if $r5 != null goto label4;

        $r8 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.type.JavaType _elementType>;

        if $r8 == null goto label4;

        $r5 = $r8;

     label4:
        if $r5 == null goto label7;

        $r9 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r9 == class "Ljava/lang/Object;" goto label5;

        $r10 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r11 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r5, $r10);

        $z0 = $r11 instanceof org.codehaus.jackson.schema.SchemaAware;

        if $z0 == 0 goto label5;

        $r12 = (org.codehaus.jackson.schema.SchemaAware) $r11;

        $r4 = interfaceinvoke $r12.<org.codehaus.jackson.schema.SchemaAware: org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider,java.lang.reflect.Type)>($r1, null);

     label5:
        if $r4 != null goto label6;

        $r4 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

     label6:
        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r4);

     label7:
        return $r3;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.JsonSerializer $r1;
        org.codehaus.jackson.map.BeanProperty $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $z0 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: boolean _staticTyping>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.type.JavaType _elementType>;

        if $r3 == null goto label1;

        $r1 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        if $r1 != null goto label1;

        $r4 = r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r3, $r4);

        r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer> = $r1;

     label1:
        return;
    }

    public final void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.Object $r1;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: void serializeContents(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeEndArray()>();

        return;
    }

    public abstract void serializeContents(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider);

    public final void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.TypeSerializer $r4;
        org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.Object $r1;

        r0 := @this: org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        virtualinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializers$AsArraySerializer: void serializeContents(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        return;
    }
}
