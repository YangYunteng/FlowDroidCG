public final class com.google.common.math.LinearTransformation$LinearTransformationBuilder extends java.lang.Object
{
    public final double x1;
    public final double y1;

    public void <init>(double, double)
    {
        com.google.common.math.LinearTransformation$LinearTransformationBuilder r0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.LinearTransformation$LinearTransformationBuilder;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: double x1> = $d0;

        r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: double y1> = $d1;

        return;
    }

    public void <init>(double, double, com.google.common.math.LinearTransformation$1)
    {
        com.google.common.math.LinearTransformation$1 $r1;
        com.google.common.math.LinearTransformation$LinearTransformationBuilder r0;
        double $d0, $d1;

        r0 := @this: com.google.common.math.LinearTransformation$LinearTransformationBuilder;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 := @parameter2: com.google.common.math.LinearTransformation$1;

        specialinvoke r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: void <init>(double,double)>($d0, $d1);

        return;
    }

    public com.google.common.math.LinearTransformation and(double, double)
    {
        com.google.common.math.LinearTransformation$VerticalLinearTransformation $r1;
        com.google.common.math.LinearTransformation $r2;
        com.google.common.math.LinearTransformation$LinearTransformationBuilder r0;
        byte $b0;
        double $d0, $d1, $d2, $d3;
        boolean $z0, $z1;

        r0 := @this: com.google.common.math.LinearTransformation$LinearTransformationBuilder;

        $d0 := @parameter0: double;

        $d2 := @parameter1: double;

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d0);

        $z1 = 1;

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d2);

        if $z0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $d1 = r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: double x1>;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label5;

        $d0 = r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: double y1>;

        $b0 = $d2 cmpl $d0;

        if $b0 == 0 goto label3;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        $r1 = new com.google.common.math.LinearTransformation$VerticalLinearTransformation;

        $d0 = r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: double x1>;

        specialinvoke $r1.<com.google.common.math.LinearTransformation$VerticalLinearTransformation: void <init>(double)>($d0);

        return $r1;

     label5:
        $d3 = r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: double y1>;

        $d2 = $d2 - $d3;

        $d0 = $d0 - $d1;

        $d0 = $d2 / $d0;

        $r2 = virtualinvoke r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: com.google.common.math.LinearTransformation withSlope(double)>($d0);

        return $r2;
    }

    public com.google.common.math.LinearTransformation withSlope(double)
    {
        com.google.common.math.LinearTransformation$LinearTransformationBuilder r0;
        com.google.common.math.LinearTransformation$VerticalLinearTransformation $r2;
        com.google.common.math.LinearTransformation$RegularLinearTransformation $r1;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: com.google.common.math.LinearTransformation$LinearTransformationBuilder;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label1;

        $d1 = r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: double y1>;

        $d2 = r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: double x1>;

        $d2 = $d2 * $d0;

        $d1 = $d1 - $d2;

        $r1 = new com.google.common.math.LinearTransformation$RegularLinearTransformation;

        specialinvoke $r1.<com.google.common.math.LinearTransformation$RegularLinearTransformation: void <init>(double,double)>($d0, $d1);

        return $r1;

     label1:
        $r2 = new com.google.common.math.LinearTransformation$VerticalLinearTransformation;

        $d0 = r0.<com.google.common.math.LinearTransformation$LinearTransformationBuilder: double x1>;

        specialinvoke $r2.<com.google.common.math.LinearTransformation$VerticalLinearTransformation: void <init>(double)>($d0);

        return $r2;
    }
}
