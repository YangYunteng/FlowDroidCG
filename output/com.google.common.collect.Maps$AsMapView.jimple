public class com.google.common.collect.Maps$AsMapView extends com.google.common.collect.Maps$ViewCachingAbstractMap
{
    public final com.google.common.base.Function function;
    public final java.util.Set set;

    public void <init>(java.util.Set, com.google.common.base.Function)
    {
        java.util.Set $r1;
        com.google.common.base.Function $r2;
        com.google.common.collect.Maps$AsMapView r0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r1 := @parameter0: java.util.Set;

        $r2 := @parameter1: com.google.common.base.Function;

        specialinvoke r0.<com.google.common.collect.Maps$ViewCachingAbstractMap: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.collect.Maps$AsMapView: java.util.Set set> = $r1;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        r0.<com.google.common.collect.Maps$AsMapView: com.google.common.base.Function function> = $r2;

        return;
    }

    public void a(java.util.function.BiConsumer, java.lang.Object)
    {
        com.google.common.base.Function $r4;
        java.util.function.BiConsumer $r1;
        java.lang.Object $r2, $r3;
        com.google.common.collect.Maps$AsMapView r0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r1 := @parameter0: java.util.function.BiConsumer;

        $r2 := @parameter1: java.lang.Object;

        $r4 = r0.<com.google.common.collect.Maps$AsMapView: com.google.common.base.Function function>;

        $r3 = interfaceinvoke $r4.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>($r2);

        interfaceinvoke $r1.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    public java.util.Set backingSet()
    {
        java.util.Set r1;
        com.google.common.collect.Maps$AsMapView r0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        r1 = r0.<com.google.common.collect.Maps$AsMapView: java.util.Set set>;

        return r1;
    }

    public void clear()
    {
        java.util.Set $r1;
        com.google.common.collect.Maps$AsMapView r0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$AsMapView: java.util.Set backingSet()>();

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.Set $r2;
        java.lang.Object $r1;
        com.google.common.collect.Maps$AsMapView r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$AsMapView: java.util.Set backingSet()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public java.util.Set createEntrySet()
    {
        com.google.common.collect.Maps$AsMapView$1EntrySetImpl $r1;
        com.google.common.collect.Maps$AsMapView r0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r1 = new com.google.common.collect.Maps$AsMapView$1EntrySetImpl;

        specialinvoke $r1.<com.google.common.collect.Maps$AsMapView$1EntrySetImpl: void <init>(com.google.common.collect.Maps$AsMapView)>(r0);

        return $r1;
    }

    public java.util.Set createKeySet()
    {
        java.util.Set $r1;
        com.google.common.collect.Maps$AsMapView r0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$AsMapView: java.util.Set backingSet()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.Set access$200(java.util.Set)>($r1);

        return $r1;
    }

    public java.util.Collection createValues()
    {
        com.google.common.base.Function $r1;
        java.util.Collection $r2;
        java.util.Set $r3;
        com.google.common.collect.Maps$AsMapView r0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r3 = r0.<com.google.common.collect.Maps$AsMapView: java.util.Set set>;

        $r1 = r0.<com.google.common.collect.Maps$AsMapView: com.google.common.base.Function function>;

        $r2 = staticinvoke <com.google.common.collect.Collections2: java.util.Collection transform(java.util.Collection,com.google.common.base.Function)>($r3, $r1);

        return $r2;
    }

    public void forEach(java.util.function.BiConsumer)
    {
        java.util.function.BiConsumer $r1;
        java.util.Set $r3;
        c.i.b.c.Ua $r2;
        com.google.common.collect.Maps$AsMapView r0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r1 := @parameter0: java.util.function.BiConsumer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = virtualinvoke r0.<com.google.common.collect.Maps$AsMapView: java.util.Set backingSet()>();

        $r2 = new c.i.b.c.Ua;

        specialinvoke $r2.<c.i.b.c.Ua: void <init>(com.google.common.collect.Maps$AsMapView,java.util.function.BiConsumer)>(r0, $r1);

        interfaceinvoke $r3.<java.util.Set: void forEach(java.util.function.Consumer)>($r2);

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.Maps$AsMapView r0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r1 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$AsMapView: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r1, null);

        return $r1;
    }

    public java.lang.Object getOrDefault(java.lang.Object, java.lang.Object)
    {
        com.google.common.base.Function $r4;
        java.util.Set $r3;
        java.lang.Object $r1, $r2;
        com.google.common.collect.Maps$AsMapView r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<com.google.common.collect.Maps$AsMapView: java.util.Set backingSet()>();

        $z0 = staticinvoke <com.google.common.collect.Collections2: boolean safeContains(java.util.Collection,java.lang.Object)>($r3, $r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.google.common.collect.Maps$AsMapView: com.google.common.base.Function function>;

        $r1 = interfaceinvoke $r4.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>($r1);

        return $r1;

     label1:
        return $r2;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        com.google.common.base.Function $r3;
        java.util.Set $r2;
        java.lang.Object $r1;
        com.google.common.collect.Maps$AsMapView r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$AsMapView: java.util.Set backingSet()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.google.common.collect.Maps$AsMapView: com.google.common.base.Function function>;

        $r1 = interfaceinvoke $r3.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>($r1);

        return $r1;

     label1:
        return null;
    }

    public int size()
    {
        int $i0;
        java.util.Set $r1;
        com.google.common.collect.Maps$AsMapView r0;

        r0 := @this: com.google.common.collect.Maps$AsMapView;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$AsMapView: java.util.Set backingSet()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }
}
