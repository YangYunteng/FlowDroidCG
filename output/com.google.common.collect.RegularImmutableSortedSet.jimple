public final class com.google.common.collect.RegularImmutableSortedSet extends com.google.common.collect.ImmutableSortedSet
{
    public static final com.google.common.collect.RegularImmutableSortedSet NATURAL_EMPTY_SET;
    public final transient com.google.common.collect.ImmutableList elements;

    static void <clinit>()
    {
        com.google.common.collect.RegularImmutableSortedSet $r0;
        com.google.common.collect.ImmutableList $r1;
        com.google.common.collect.Ordering $r2;

        $r0 = new com.google.common.collect.RegularImmutableSortedSet;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        $r2 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        specialinvoke $r0.<com.google.common.collect.RegularImmutableSortedSet: void <init>(com.google.common.collect.ImmutableList,java.util.Comparator)>($r1, $r2);

        <com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet NATURAL_EMPTY_SET> = $r0;

        return;
    }

    public void <init>(com.google.common.collect.ImmutableList, java.util.Comparator)
    {
        com.google.common.collect.RegularImmutableSortedSet r0;
        com.google.common.collect.ImmutableList $r1;
        java.util.Comparator $r2;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 := @parameter0: com.google.common.collect.ImmutableList;

        $r2 := @parameter1: java.util.Comparator;

        specialinvoke r0.<com.google.common.collect.ImmutableSortedSet: void <init>(java.util.Comparator)>($r2);

        r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements> = $r1;

        return;
    }

    private int unsafeBinarySearch(java.lang.Object)
    {
        com.google.common.collect.ImmutableList $r1;
        int $i0;
        java.lang.Object $r2;
        com.google.common.collect.RegularImmutableSortedSet r0;
        java.util.Comparator $r3;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $r3 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: java.util.Comparator unsafeComparator()>();

        $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>($r1, $r2, $r3);

        return $i0;
    }

    public java.lang.Object ceiling(java.lang.Object)
    {
        com.google.common.collect.ImmutableList $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        com.google.common.collect.RegularImmutableSortedSet r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int tailIndex(java.lang.Object,boolean)>($r1, 1);

        $i1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int size()>();

        if $i0 != $i1 goto label1;

        return null;

     label1:
        $r2 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r2;
        com.google.common.collect.RegularImmutableSortedSet r0;
        java.lang.ClassCastException $r1;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r2 := @parameter0: java.lang.Object;

        if $r2 == null goto label4;

     label1:
        $i0 = specialinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int unsafeBinarySearch(java.lang.Object)>($r2);

     label2:
        if $i0 < 0 goto label4;

        return 1;

     label3:
        $r1 := @caughtexception;

     label4:
        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Iterator $r7;
        com.google.common.collect.Multiset $r4;
        java.util.Collection $r3;
        java.lang.ClassCastException $r2;
        java.lang.NullPointerException $r1;
        int $i0;
        java.lang.Object $r8, $r9;
        com.google.common.collect.UnmodifiableIterator $r6;
        com.google.common.collect.RegularImmutableSortedSet r0;
        java.util.Comparator $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r3 := @parameter0: java.util.Collection;

        $z0 = $r3 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label01;

        $r4 = (com.google.common.collect.Multiset) $r3;

        $r3 = interfaceinvoke $r4.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

     label01:
        $r5 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator()>();

        $z0 = staticinvoke <com.google.common.collect.SortedIterables: boolean hasSameComparator(java.util.Comparator,java.lang.Iterable)>($r5, $r3);

        if $z0 == 0 goto label16;

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        if $i0 > 1 goto label02;

        goto label16;

     label02:
        $r6 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        $r7 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label03;

        return 0;

     label03:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label04:
        $i0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: int unsafeCompare(java.lang.Object,java.lang.Object)>($r9, $r8);

     label05:
        if $i0 >= 0 goto label10;

     label06:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label07:
        if $z0 != 0 goto label08;

        return 0;

     label08:
        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label09:
        goto label04;

     label10:
        if $i0 != 0 goto label15;

     label11:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label12:
        if $z0 != 0 goto label13;

        return 1;

     label13:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label14:
        goto label04;

     label15:
        if $i0 <= 0 goto label04;

        return 0;

     label16:
        $z0 = specialinvoke r0.<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>($r3);

        return $z0;

     label17:
        $r1 := @caughtexception;

        return 0;

     label18:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.NullPointerException from label04 to label05 with label17;
        catch java.lang.NullPointerException from label06 to label07 with label17;
        catch java.lang.NullPointerException from label08 to label09 with label17;
        catch java.lang.NullPointerException from label11 to label12 with label17;
        catch java.lang.NullPointerException from label13 to label14 with label17;
        catch java.lang.ClassCastException from label04 to label05 with label18;
        catch java.lang.ClassCastException from label06 to label07 with label18;
        catch java.lang.ClassCastException from label08 to label09 with label18;
        catch java.lang.ClassCastException from label11 to label12 with label18;
        catch java.lang.ClassCastException from label13 to label14 with label18;
    }

    public int copyIntoArray(java.lang.Object[], int)
    {
        java.lang.Object[] $r2;
        com.google.common.collect.ImmutableList $r1;
        int $i0;
        com.google.common.collect.RegularImmutableSortedSet r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r2 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: int copyIntoArray(java.lang.Object[],int)>($r2, $i0);

        return $i0;
    }

    public com.google.common.collect.ImmutableList createAsList()
    {
        com.google.common.collect.ImmutableList $r2;
        int $i0;
        com.google.common.collect.ImmutableSortedAsList $r1;
        com.google.common.collect.RegularImmutableSortedSet r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $i0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int size()>();

        if $i0 > 1 goto label1;

        $r2 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        return $r2;

     label1:
        $r1 = new com.google.common.collect.ImmutableSortedAsList;

        $r2 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedAsList: void <init>(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList)>(r0, $r2);

        return $r1;
    }

    public com.google.common.collect.ImmutableSortedSet createDescendingSet()
    {
        com.google.common.collect.ImmutableList $r3;
        com.google.common.collect.RegularImmutableSortedSet r0, $r2;
        java.util.Comparator $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        $r1 = staticinvoke <java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)>($r1);

        $z0 = virtualinvoke r0.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r0 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator)>($r1);

        return r0;

     label1:
        $r2 = new com.google.common.collect.RegularImmutableSortedSet;

        $r3 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $r3 = virtualinvoke $r3.<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList reverse()>();

        specialinvoke $r2.<com.google.common.collect.RegularImmutableSortedSet: void <init>(com.google.common.collect.ImmutableList,java.util.Comparator)>($r3, $r1);

        return $r2;
    }

    public com.google.common.collect.UnmodifiableIterator descendingIterator()
    {
        com.google.common.collect.UnmodifiableIterator $r2;
        com.google.common.collect.RegularImmutableSortedSet r0;
        com.google.common.collect.ImmutableList $r1;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $r1 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList reverse()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r2;
    }

    public volatile java.util.Iterator descendingIterator()
    {
        com.google.common.collect.UnmodifiableIterator $r1;
        com.google.common.collect.RegularImmutableSortedSet r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.UnmodifiableIterator descendingIterator()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Iterator $r6;
        java.util.Set $r4;
        java.lang.ClassCastException $r1;
        int $i0, $i1;
        java.lang.Object $r3, $r8;
        com.google.common.collect.UnmodifiableIterator $r7;
        com.google.common.collect.RegularImmutableSortedSet r0;
        java.util.NoSuchElementException $r2;
        java.util.Comparator $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r3 := @parameter0: java.lang.Object;

        if $r3 != r0 goto label01;

        return 1;

     label01:
        $z0 = $r3 instanceof java.util.Set;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        $r4 = (java.util.Set) $r3;

        $i0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int size()>();

        $i1 = interfaceinvoke $r4.<java.util.Set: int size()>();

        if $i0 == $i1 goto label03;

        return 0;

     label03:
        $z0 = virtualinvoke r0.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 == 0 goto label04;

        return 1;

     label04:
        $r5 = r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        $z0 = staticinvoke <com.google.common.collect.SortedIterables: boolean hasSameComparator(java.util.Comparator,java.lang.Iterable)>($r5, $r4);

        if $z0 == 0 goto label13;

        $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $r7 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.UnmodifiableIterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label07:
        if $z0 == 0 goto label12;

     label08:
        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label09:
        if $r8 == null goto label16;

     label10:
        $i0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: int unsafeCompare(java.lang.Object,java.lang.Object)>($r3, $r8);

     label11:
        if $i0 == 0 goto label06;

        return 0;

     label12:
        return 1;

     label13:
        $z0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: boolean containsAll(java.util.Collection)>($r4);

        return $z0;

     label14:
        $r1 := @caughtexception;

        return 0;

     label15:
        $r2 := @caughtexception;

     label16:
        return 0;

        catch java.lang.ClassCastException from label05 to label07 with label14;
        catch java.lang.ClassCastException from label08 to label09 with label14;
        catch java.lang.ClassCastException from label10 to label11 with label14;
        catch java.util.NoSuchElementException from label05 to label07 with label15;
        catch java.util.NoSuchElementException from label08 to label09 with label15;
        catch java.util.NoSuchElementException from label10 to label11 with label15;
    }

    public java.lang.Object first()
    {
        com.google.common.collect.ImmutableList $r1;
        java.lang.Object $r2;
        com.google.common.collect.RegularImmutableSortedSet r0;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $z0 = virtualinvoke r0.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        return $r2;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;
    }

    public java.lang.Object floor(java.lang.Object)
    {
        com.google.common.collect.ImmutableList $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        com.google.common.collect.RegularImmutableSortedSet r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int headIndex(java.lang.Object,boolean)>($r1, 1);

        $i0 = $i0 - 1;

        $i1 = -1;

        if $i0 != $i1 goto label1;

        return null;

     label1:
        $r2 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        return $r1;
    }

    public void forEach(java.util.function.Consumer)
    {
        java.util.function.Consumer $r1;
        com.google.common.collect.RegularImmutableSortedSet r0;
        com.google.common.collect.ImmutableList $r2;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 := @parameter0: java.util.function.Consumer;

        $r2 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        virtualinvoke $r2.<com.google.common.collect.ImmutableList: void forEach(java.util.function.Consumer)>($r1);

        return;
    }

    public com.google.common.collect.RegularImmutableSortedSet getSubSet(int, int)
    {
        com.google.common.collect.ImmutableList $r1;
        int $i0, $i1, $i2;
        com.google.common.collect.RegularImmutableSortedSet r0, $r2;
        java.util.Comparator $r3;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 != 0 goto label1;

        $i2 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int size()>();

        if $i1 != $i2 goto label1;

        return r0;

     label1:
        if $i0 >= $i1 goto label2;

        $r2 = new com.google.common.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $r1 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList subList(int,int)>($i0, $i1);

        $r3 = r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        specialinvoke $r2.<com.google.common.collect.RegularImmutableSortedSet: void <init>(com.google.common.collect.ImmutableList,java.util.Comparator)>($r1, $r3);

        return $r2;

     label2:
        $r3 = r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        r0 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator)>($r3);

        return r0;
    }

    public int headIndex(java.lang.Object, boolean)
    {
        com.google.common.collect.ImmutableList $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        com.google.common.collect.RegularImmutableSortedSet r0;
        java.util.Comparator $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r2 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r3 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator()>();

        $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>($r1, $r2, $r3);

        if $i0 < 0 goto label1;

        if $z0 == 0 goto label2;

        $i0 = $i0 + 1;

        return $i0;

     label1:
        $i1 = -1;

        $i0 = $i0 ^ $i1;

     label2:
        return $i0;
    }

    public com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object, boolean)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.RegularImmutableSortedSet r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int headIndex(java.lang.Object,boolean)>($r1, $z0);

        r0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet getSubSet(int,int)>(0, $i0);

        return r0;
    }

    public java.lang.Object higher(java.lang.Object)
    {
        com.google.common.collect.ImmutableList $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        com.google.common.collect.RegularImmutableSortedSet r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int tailIndex(java.lang.Object,boolean)>($r1, 0);

        $i1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int size()>();

        if $i0 != $i1 goto label1;

        return null;

     label1:
        $r2 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        return $r1;
    }

    public int indexOf(java.lang.Object)
    {
        com.google.common.collect.ImmutableList $r1;
        int $i0;
        java.lang.Object $r3;
        com.google.common.collect.RegularImmutableSortedSet r0;
        java.util.Comparator $r4;
        java.lang.ClassCastException $r2;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r3 := @parameter0: java.lang.Object;

        if $r3 != null goto label1;

        $i0 = -1;

        return $i0;

     label1:
        $r1 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

     label2:
        $r4 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: java.util.Comparator unsafeComparator()>();

        $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>($r1, $r3, $r4);

     label3:
        if $i0 < 0 goto label4;

        return $i0;

     label4:
        $i0 = -1;

        return $i0;

     label5:
        $r2 := @caughtexception;

        $i0 = -1;

        return $i0;

        catch java.lang.ClassCastException from label2 to label3 with label5;
    }

    public boolean isPartialView()
    {
        com.google.common.collect.RegularImmutableSortedSet r0;
        com.google.common.collect.ImmutableList $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $z0 = virtualinvoke $r1.<com.google.common.collect.ImmutableCollection: boolean isPartialView()>();

        return $z0;
    }

    public com.google.common.collect.UnmodifiableIterator iterator()
    {
        com.google.common.collect.UnmodifiableIterator $r1;
        com.google.common.collect.RegularImmutableSortedSet r0;
        com.google.common.collect.ImmutableList $r2;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r2 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public volatile java.util.Iterator iterator()
    {
        com.google.common.collect.UnmodifiableIterator $r1;
        com.google.common.collect.RegularImmutableSortedSet r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public java.lang.Object last()
    {
        com.google.common.collect.ImmutableList $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        com.google.common.collect.RegularImmutableSortedSet r0;
        java.util.NoSuchElementException $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $z0 = virtualinvoke r0.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $i0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        return $r2;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;
    }

    public java.lang.Object lower(java.lang.Object)
    {
        com.google.common.collect.ImmutableList $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        com.google.common.collect.RegularImmutableSortedSet r0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int headIndex(java.lang.Object,boolean)>($r1, 0);

        $i1 = -1;

        $i0 = $i0 + $i1;

        $i1 = -1;

        if $i0 != $i1 goto label1;

        return null;

     label1:
        $r2 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        return $r1;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.RegularImmutableSortedSet r0;
        com.google.common.collect.ImmutableList $r1;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        $i0 = virtualinvoke $r1.<java.util.AbstractCollection: int size()>();

        return $i0;
    }

    public java.util.Spliterator spliterator()
    {
        com.google.common.collect.RegularImmutableSortedSet r0;
        com.google.common.collect.ImmutableList $r1;
        java.util.Spliterator $r2;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: java.util.Spliterator spliterator()>();

        return $r2;
    }

    public com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        com.google.common.collect.ImmutableSortedSet $r3;
        java.lang.Object $r1, $r2;
        com.google.common.collect.RegularImmutableSortedSet r0;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r2 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.lang.Object;

        $z1 := @parameter3: boolean;

        $r3 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean)>($r2, $z0);

        $r3 = virtualinvoke $r3.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean)>($r1, $z1);

        return $r3;
    }

    public int tailIndex(java.lang.Object, boolean)
    {
        com.google.common.collect.ImmutableList $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        com.google.common.collect.RegularImmutableSortedSet r0;
        java.util.Comparator $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r2 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r1 = r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableList elements>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r3 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator()>();

        $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>($r1, $r2, $r3);

        if $i0 < 0 goto label2;

        if $z0 == 0 goto label1;

        return $i0;

     label1:
        $i0 = $i0 + 1;

        return $i0;

     label2:
        $i1 = -1;

        $i0 = $i0 ^ $i1;

        return $i0;
    }

    public com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object, boolean)
    {
        int $i0, $i1;
        java.lang.Object $r1;
        com.google.common.collect.RegularImmutableSortedSet r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int tailIndex(java.lang.Object,boolean)>($r1, $z0);

        $i1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: int size()>();

        r0 = virtualinvoke r0.<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet getSubSet(int,int)>($i0, $i1);

        return r0;
    }

    public java.util.Comparator unsafeComparator()
    {
        com.google.common.collect.RegularImmutableSortedSet r0;
        java.util.Comparator r1;

        r0 := @this: com.google.common.collect.RegularImmutableSortedSet;

        r1 = r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        return r1;
    }
}
