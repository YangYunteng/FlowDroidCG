public abstract class com.google.common.reflect.TypeToken$TypeCollector extends java.lang.Object
{
    public static final com.google.common.reflect.TypeToken$TypeCollector FOR_GENERIC_TYPE;
    public static final com.google.common.reflect.TypeToken$TypeCollector FOR_RAW_TYPE;

    static void <clinit>()
    {
        com.google.common.reflect.TypeToken$TypeCollector$2 $r1;
        com.google.common.reflect.TypeToken$TypeCollector$1 $r0;

        $r0 = new com.google.common.reflect.TypeToken$TypeCollector$1;

        specialinvoke $r0.<com.google.common.reflect.TypeToken$TypeCollector$1: void <init>()>();

        <com.google.common.reflect.TypeToken$TypeCollector: com.google.common.reflect.TypeToken$TypeCollector FOR_GENERIC_TYPE> = $r0;

        $r1 = new com.google.common.reflect.TypeToken$TypeCollector$2;

        specialinvoke $r1.<com.google.common.reflect.TypeToken$TypeCollector$2: void <init>()>();

        <com.google.common.reflect.TypeToken$TypeCollector: com.google.common.reflect.TypeToken$TypeCollector FOR_RAW_TYPE> = $r1;

        return;
    }

    public void <init>()
    {
        com.google.common.reflect.TypeToken$TypeCollector r0;

        r0 := @this: com.google.common.reflect.TypeToken$TypeCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(com.google.common.reflect.TypeToken$1)
    {
        com.google.common.reflect.TypeToken$1 $r1;
        com.google.common.reflect.TypeToken$TypeCollector r0;

        r0 := @this: com.google.common.reflect.TypeToken$TypeCollector;

        $r1 := @parameter0: com.google.common.reflect.TypeToken$1;

        specialinvoke r0.<com.google.common.reflect.TypeToken$TypeCollector: void <init>()>();

        return;
    }

    private int collectTypes(java.lang.Object, java.util.Map)
    {
        java.util.Iterator $r7;
        java.lang.Integer $r4;
        java.lang.Iterable $r6;
        com.google.common.reflect.TypeToken$TypeCollector r0;
        java.util.Map $r1;
        int $i0, $i1;
        java.lang.Object $r2, $r3;
        java.lang.Class $r5;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken$TypeCollector;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.Map;

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.Integer) $r3;

        if $r4 == null goto label1;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        $r5 = virtualinvoke r0.<com.google.common.reflect.TypeToken$TypeCollector: java.lang.Class getRawType(java.lang.Object)>($r2);

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isInterface()>();

        $i0 = (int) $z0;

        $r6 = virtualinvoke r0.<com.google.common.reflect.TypeToken$TypeCollector: java.lang.Iterable getInterfaces(java.lang.Object)>($r2);

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $i1 = specialinvoke r0.<com.google.common.reflect.TypeToken$TypeCollector: int collectTypes(java.lang.Object,java.util.Map)>($r3, $r1);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        goto label2;

     label3:
        $r3 = virtualinvoke r0.<com.google.common.reflect.TypeToken$TypeCollector: java.lang.Object getSuperclass(java.lang.Object)>($r2);

        if $r3 == null goto label4;

        $i1 = specialinvoke r0.<com.google.common.reflect.TypeToken$TypeCollector: int collectTypes(java.lang.Object,java.util.Map)>($r3, $r1);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

     label4:
        $i0 = $i0 + 1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        return $i0;
    }

    public static com.google.common.collect.ImmutableList sortKeysByValue(java.util.Map, java.util.Comparator)
    {
        com.google.common.collect.ImmutableList $r4;
        java.util.Map $r2;
        java.util.Set $r3;
        com.google.common.reflect.TypeToken$TypeCollector$4 $r1;
        java.util.Comparator $r0;

        $r2 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.util.Comparator;

        $r1 = new com.google.common.reflect.TypeToken$TypeCollector$4;

        specialinvoke $r1.<com.google.common.reflect.TypeToken$TypeCollector$4: void <init>(java.util.Comparator,java.util.Map)>($r0, $r2);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = virtualinvoke $r1.<com.google.common.collect.Ordering: com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable)>($r3);

        return $r4;
    }

    public final com.google.common.reflect.TypeToken$TypeCollector classesOnly()
    {
        com.google.common.reflect.TypeToken$TypeCollector$3 $r1;
        com.google.common.reflect.TypeToken$TypeCollector r0;

        r0 := @this: com.google.common.reflect.TypeToken$TypeCollector;

        $r1 = new com.google.common.reflect.TypeToken$TypeCollector$3;

        specialinvoke $r1.<com.google.common.reflect.TypeToken$TypeCollector$3: void <init>(com.google.common.reflect.TypeToken$TypeCollector,com.google.common.reflect.TypeToken$TypeCollector)>(r0, r0);

        return $r1;
    }

    public com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable)
    {
        java.util.Iterator $r3;
        java.util.HashMap $r2;
        java.lang.Iterable $r1;
        com.google.common.collect.Ordering $r5;
        com.google.common.collect.ImmutableList $r6;
        com.google.common.reflect.TypeToken$TypeCollector r0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeToken$TypeCollector;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        specialinvoke r0.<com.google.common.reflect.TypeToken$TypeCollector: int collectTypes(java.lang.Object,java.util.Map)>($r4, $r2);

        goto label1;

     label2:
        $r5 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r5 = virtualinvoke $r5.<com.google.common.collect.Ordering: com.google.common.collect.Ordering reverse()>();

        $r6 = staticinvoke <com.google.common.reflect.TypeToken$TypeCollector: com.google.common.collect.ImmutableList sortKeysByValue(java.util.Map,java.util.Comparator)>($r2, $r5);

        return $r6;
    }

    public final com.google.common.collect.ImmutableList collectTypes(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableList $r2;
        com.google.common.reflect.TypeToken$TypeCollector r0;

        r0 := @this: com.google.common.reflect.TypeToken$TypeCollector;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<com.google.common.reflect.TypeToken$TypeCollector: com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable)>($r2);

        return $r2;
    }

    public abstract java.lang.Iterable getInterfaces(java.lang.Object);

    public abstract java.lang.Class getRawType(java.lang.Object);

    public abstract java.lang.Object getSuperclass(java.lang.Object);
}
