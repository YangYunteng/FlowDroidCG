public class org.codehaus.jackson.node.TreeTraversingParser extends org.codehaus.jackson.impl.JsonParserMinimalBase
{
    public boolean _closed;
    public org.codehaus.jackson.JsonToken _nextToken;
    public org.codehaus.jackson.node.NodeCursor _nodeCursor;
    public org.codehaus.jackson.ObjectCodec _objectCodec;
    public boolean _startContainer;

    public void <init>(org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 := @parameter0: org.codehaus.jackson.JsonNode;

        specialinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: void <init>(org.codehaus.jackson.JsonNode,org.codehaus.jackson.ObjectCodec)>($r1, null);

        return;
    }

    public void <init>(org.codehaus.jackson.JsonNode, org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.node.NodeCursor$Array $r4;
        org.codehaus.jackson.JsonToken $r3;
        org.codehaus.jackson.ObjectCodec $r2;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode $r1;
        org.codehaus.jackson.node.NodeCursor$Object $r5;
        org.codehaus.jackson.node.NodeCursor$RootValue $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 := @parameter0: org.codehaus.jackson.JsonNode;

        $r2 := @parameter1: org.codehaus.jackson.ObjectCodec;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void <init>(int)>(0);

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.ObjectCodec _objectCodec> = $r2;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _nextToken> = $r3;

        $r4 = new org.codehaus.jackson.node.NodeCursor$Array;

        specialinvoke $r4.<org.codehaus.jackson.node.NodeCursor$Array: void <init>(org.codehaus.jackson.JsonNode,org.codehaus.jackson.node.NodeCursor)>($r1, null);

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = $r4;

        return;

     label1:
        $z0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: boolean isObject()>();

        if $z0 == 0 goto label2;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _nextToken> = $r3;

        $r5 = new org.codehaus.jackson.node.NodeCursor$Object;

        specialinvoke $r5.<org.codehaus.jackson.node.NodeCursor$Object: void <init>(org.codehaus.jackson.JsonNode,org.codehaus.jackson.node.NodeCursor)>($r1, null);

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = $r5;

        return;

     label2:
        $r6 = new org.codehaus.jackson.node.NodeCursor$RootValue;

        specialinvoke $r6.<org.codehaus.jackson.node.NodeCursor$RootValue: void <init>(org.codehaus.jackson.JsonNode,org.codehaus.jackson.node.NodeCursor)>($r1, null);

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = $r6;

        return;
    }

    public void _handleEOF()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _throwInternal()>();

        return;
    }

    public void close()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed>;

        if $z0 != 0 goto label1;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed> = 1;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = null;

        r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken> = null;

     label1:
        return;
    }

    public org.codehaus.jackson.JsonNode currentNode()
    {
        org.codehaus.jackson.node.NodeCursor $r2;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed>;

        if $z0 != 0 goto label2;

        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        if $r2 != null goto label1;

        goto label2;

     label1:
        $r1 = virtualinvoke $r2.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.JsonNode currentNode()>();

        return $r1;

     label2:
        return null;
    }

    public org.codehaus.jackson.JsonNode currentNumericNode()
    {
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.JsonParseException $r5;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.codehaus.jackson.JsonNode $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: boolean isNumber()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        return $r1;

     label2:
        if $r1 != null goto label3;

        $r2 = null;

        goto label4;

     label3:
        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonToken asToken()>();

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not numeric, can not use numeric value accessors");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r4);

        throw $r5;
    }

    public java.math.BigInteger getBigIntegerValue()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        java.math.BigInteger $r2;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: java.math.BigInteger getBigIntegerValue()>();

        return $r2;
    }

    public byte[] getBinaryValue(org.codehaus.jackson.Base64Variant)
    {
        byte[] $r3;
        org.codehaus.jackson.node.POJONode $r4;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.Base64Variant $r1;
        java.lang.Object $r5;
        org.codehaus.jackson.JsonNode $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 := @parameter0: org.codehaus.jackson.Base64Variant;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonNode: byte[] getBinaryValue()>();

        if $r3 == null goto label1;

        return $r3;

     label1:
        $z0 = virtualinvoke $r2.<org.codehaus.jackson.JsonNode: boolean isPojo()>();

        if $z0 == 0 goto label2;

        $r4 = (org.codehaus.jackson.node.POJONode) $r2;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.node.POJONode: java.lang.Object getPojo()>();

        $z0 = $r5 instanceof byte[];

        if $z0 == 0 goto label2;

        $r3 = (byte[]) $r5;

        return $r3;

     label2:
        return null;
    }

    public org.codehaus.jackson.ObjectCodec getCodec()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.ObjectCodec r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        r1 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.ObjectCodec _objectCodec>;

        return r1;
    }

    public org.codehaus.jackson.JsonLocation getCurrentLocation()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonLocation r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        r1 = <org.codehaus.jackson.JsonLocation: org.codehaus.jackson.JsonLocation NA>;

        return r1;
    }

    public java.lang.String getCurrentName()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        java.lang.String $r1;
        org.codehaus.jackson.node.NodeCursor $r2;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke $r2.<org.codehaus.jackson.node.NodeCursor: java.lang.String getCurrentName()>();

        return $r1;
    }

    public java.math.BigDecimal getDecimalValue()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        java.math.BigDecimal $r2;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: java.math.BigDecimal getDecimalValue()>();

        return $r2;
    }

    public double getDoubleValue()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: double getDoubleValue()>();

        return $d0;
    }

    public java.lang.Object getEmbeddedObject()
    {
        org.codehaus.jackson.node.POJONode $r2;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        java.lang.Object $r3;
        org.codehaus.jackson.JsonNode $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed>;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: boolean isPojo()>();

        if $z0 == 0 goto label1;

        $r2 = (org.codehaus.jackson.node.POJONode) $r1;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.node.POJONode: java.lang.Object getPojo()>();

        return $r3;

     label1:
        return null;
    }

    public float getFloatValue()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        float $f0;
        org.codehaus.jackson.JsonNode $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: double getDoubleValue()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public int getIntValue()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        int $i0;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: int getIntValue()>();

        return $i0;
    }

    public long getLongValue()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        long $l0;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $l0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: long getLongValue()>();

        return $l0;
    }

    public org.codehaus.jackson.JsonParser$NumberType getNumberType()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode $r1;
        org.codehaus.jackson.JsonParser$NumberType $r2;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        return $r2;
    }

    public java.lang.Number getNumberValue()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        java.lang.Number $r2;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: java.lang.Number getNumberValue()>();

        return $r2;
    }

    public org.codehaus.jackson.JsonStreamContext getParsingContext()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.node.NodeCursor r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        r1 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        return r1;
    }

    public java.lang.String getText()
    {
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode $r3;
        org.codehaus.jackson.node.NodeCursor $r6;
        int[] $r1;
        int $i0;
        java.lang.String $r4;
        java.lang.Number $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = <org.codehaus.jackson.node.TreeTraversingParser$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        $i0 = virtualinvoke $r2.<java.lang.Enum: int ordinal()>();

        $i0 = $r1[$i0];

        if $i0 == 1 goto label7;

        if $i0 == 2 goto label6;

        if $i0 == 3 goto label5;

        if $i0 == 4 goto label5;

        if $i0 == 5 goto label2;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        if $r3 == null goto label3;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: boolean isBinary()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: java.lang.String getValueAsText()>();

        return $r4;

     label3:
        $r2 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        if $r2 != null goto label4;

        return null;

     label4:
        $r4 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: java.lang.String asString()>();

        return $r4;

     label5:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: java.lang.Number getNumberValue()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        return $r4;

     label6:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: java.lang.String getTextValue()>();

        return $r4;

     label7:
        $r6 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r4 = virtualinvoke $r6.<org.codehaus.jackson.node.NodeCursor: java.lang.String getCurrentName()>();

        return $r4;
    }

    public char[] getTextCharacters()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: java.lang.String getText()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        return $r2;
    }

    public int getTextLength()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i0;
    }

    public int getTextOffset()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        return 0;
    }

    public org.codehaus.jackson.JsonLocation getTokenLocation()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonLocation r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        r1 = <org.codehaus.jackson.JsonLocation: org.codehaus.jackson.JsonLocation NA>;

        return r1;
    }

    public boolean hasTextCharacters()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        return 0;
    }

    public boolean isClosed()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed>;

        return z0;
    }

    public org.codehaus.jackson.JsonToken nextToken()
    {
        org.codehaus.jackson.JsonToken $r1, $r3;
        org.codehaus.jackson.node.NodeCursor $r2;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _nextToken>;

        if $r1 == null goto label01;

        r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken> = $r1;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _nextToken> = null;

        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r1;

     label01:
        $z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer>;

        if $z0 == 0 goto label07;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer> = 0;

        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.node.NodeCursor: boolean currentHasChildren()>();

        if $z0 != 0 goto label04;

        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r1 != $r3 goto label02;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        goto label03;

     label02:
        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

     label03:
        r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken> = $r1;

        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r1;

     label04:
        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.node.NodeCursor iterateChildren()>();

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = $r2;

        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.JsonToken nextToken()>();

        r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken> = $r1;

        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r1 == $r3 goto label05;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r1 != $r3 goto label06;

     label05:
        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer> = 1;

     label06:
        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r1;

     label07:
        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        if $r2 != null goto label08;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed> = 1;

        return null;

     label08:
        $r1 = virtualinvoke $r2.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.JsonToken nextToken()>();

        r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken> = $r1;

        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label11;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r1 == $r3 goto label09;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r1 != $r3 goto label10;

     label09:
        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer> = 1;

     label10:
        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r1;

     label11:
        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.JsonToken endToken()>();

        r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken> = $r1;

        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.node.NodeCursor getParent()>();

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = $r2;

        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r1;
    }

    public void setCodec(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.ObjectCodec $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.ObjectCodec _objectCodec> = $r1;

        return;
    }

    public org.codehaus.jackson.JsonParser skipChildren()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonToken $r1, $r2;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r1 != $r2 goto label1;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer> = 0;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken> = $r1;

        return r0;

     label1:
        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r1 != $r2 goto label2;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer> = 0;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken> = $r1;

     label2:
        return r0;
    }
}
