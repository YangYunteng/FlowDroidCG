public final class com.google.protobuf.Protobuf extends java.lang.Object
{
    public static final com.google.protobuf.Protobuf INSTANCE;
    public final java.util.concurrent.ConcurrentMap schemaCache;
    public final com.google.protobuf.SchemaFactory schemaFactory;

    static void <clinit>()
    {
        com.google.protobuf.Protobuf $r0;

        $r0 = new com.google.protobuf.Protobuf;

        specialinvoke $r0.<com.google.protobuf.Protobuf: void <init>()>();

        <com.google.protobuf.Protobuf: com.google.protobuf.Protobuf INSTANCE> = $r0;

        return;
    }

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        com.google.protobuf.Protobuf r0;
        com.google.protobuf.ManifestSchemaFactory $r2;

        r0 := @this: com.google.protobuf.Protobuf;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.google.protobuf.Protobuf: java.util.concurrent.ConcurrentMap schemaCache> = $r1;

        $r2 = new com.google.protobuf.ManifestSchemaFactory;

        specialinvoke $r2.<com.google.protobuf.ManifestSchemaFactory: void <init>()>();

        r0.<com.google.protobuf.Protobuf: com.google.protobuf.SchemaFactory schemaFactory> = $r2;

        return;
    }

    public static com.google.protobuf.Protobuf getInstance()
    {
        com.google.protobuf.Protobuf r0;

        r0 = <com.google.protobuf.Protobuf: com.google.protobuf.Protobuf INSTANCE>;

        return r0;
    }

    public int getTotalSchemaSize()
    {
        java.util.Iterator $r3;
        com.google.protobuf.Protobuf r0;
        java.util.Collection $r2;
        java.util.concurrent.ConcurrentMap $r1;
        com.google.protobuf.Schema $r5;
        int $i0, $i1;
        java.lang.Object $r4;
        com.google.protobuf.MessageSchema $r6;
        boolean $z0;

        r0 := @this: com.google.protobuf.Protobuf;

        $r1 = r0.<com.google.protobuf.Protobuf: java.util.concurrent.ConcurrentMap schemaCache>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.protobuf.Schema) $r4;

        $z0 = $r5 instanceof com.google.protobuf.MessageSchema;

        if $z0 == 0 goto label1;

        $r6 = (com.google.protobuf.MessageSchema) $r5;

        $i1 = virtualinvoke $r6.<com.google.protobuf.MessageSchema: int getSchemaSize()>();

        $i0 = $i0 + $i1;

        goto label1;

     label2:
        return $i0;
    }

    public boolean isInitialized(java.lang.Object)
    {
        com.google.protobuf.Protobuf r0;
        com.google.protobuf.Schema $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.protobuf.Protobuf;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.protobuf.Protobuf: com.google.protobuf.Schema schemaFor(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r2.<com.google.protobuf.Schema: boolean isInitialized(java.lang.Object)>($r1);

        return $z0;
    }

    public void makeImmutable(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.protobuf.Protobuf r0;
        com.google.protobuf.Schema $r2;

        r0 := @this: com.google.protobuf.Protobuf;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.protobuf.Protobuf: com.google.protobuf.Schema schemaFor(java.lang.Object)>($r1);

        interfaceinvoke $r2.<com.google.protobuf.Schema: void makeImmutable(java.lang.Object)>($r1);

        return;
    }

    public void mergeFrom(java.lang.Object, com.google.protobuf.Reader)
    {
        com.google.protobuf.Reader $r2;
        com.google.protobuf.Protobuf r0;
        com.google.protobuf.ExtensionRegistryLite $r3;
        java.lang.Object $r1;

        r0 := @this: com.google.protobuf.Protobuf;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.google.protobuf.Reader;

        $r3 = staticinvoke <com.google.protobuf.ExtensionRegistryLite: com.google.protobuf.ExtensionRegistryLite getEmptyRegistry()>();

        virtualinvoke r0.<com.google.protobuf.Protobuf: void mergeFrom(java.lang.Object,com.google.protobuf.Reader,com.google.protobuf.ExtensionRegistryLite)>($r1, $r2, $r3);

        return;
    }

    public void mergeFrom(java.lang.Object, com.google.protobuf.Reader, com.google.protobuf.ExtensionRegistryLite)
    {
        com.google.protobuf.Reader $r2;
        com.google.protobuf.Protobuf r0;
        com.google.protobuf.Schema $r4;
        com.google.protobuf.ExtensionRegistryLite $r3;
        java.lang.Object $r1;

        r0 := @this: com.google.protobuf.Protobuf;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.google.protobuf.Reader;

        $r3 := @parameter2: com.google.protobuf.ExtensionRegistryLite;

        $r4 = virtualinvoke r0.<com.google.protobuf.Protobuf: com.google.protobuf.Schema schemaFor(java.lang.Object)>($r1);

        interfaceinvoke $r4.<com.google.protobuf.Schema: void mergeFrom(java.lang.Object,com.google.protobuf.Reader,com.google.protobuf.ExtensionRegistryLite)>($r1, $r2, $r3);

        return;
    }

    public com.google.protobuf.Schema registerSchema(java.lang.Class, com.google.protobuf.Schema)
    {
        com.google.protobuf.Protobuf r0;
        com.google.protobuf.Schema $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.util.concurrent.ConcurrentMap $r4;

        r0 := @this: com.google.protobuf.Protobuf;

        $r3 := @parameter0: java.lang.Class;

        $r1 := @parameter1: com.google.protobuf.Schema;

        staticinvoke <com.google.protobuf.Internal: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>($r3, "messageType");

        staticinvoke <com.google.protobuf.Internal: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>($r1, "schema");

        $r4 = r0.<com.google.protobuf.Protobuf: java.util.concurrent.ConcurrentMap schemaCache>;

        $r2 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r3, $r1);

        $r1 = (com.google.protobuf.Schema) $r2;

        return $r1;
    }

    public com.google.protobuf.Schema registerSchemaOverride(java.lang.Class, com.google.protobuf.Schema)
    {
        com.google.protobuf.Protobuf r0;
        com.google.protobuf.Schema $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.util.concurrent.ConcurrentMap $r4;

        r0 := @this: com.google.protobuf.Protobuf;

        $r3 := @parameter0: java.lang.Class;

        $r1 := @parameter1: com.google.protobuf.Schema;

        staticinvoke <com.google.protobuf.Internal: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>($r3, "messageType");

        staticinvoke <com.google.protobuf.Internal: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>($r1, "schema");

        $r4 = r0.<com.google.protobuf.Protobuf: java.util.concurrent.ConcurrentMap schemaCache>;

        $r2 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        $r1 = (com.google.protobuf.Schema) $r2;

        return $r1;
    }

    public com.google.protobuf.Schema schemaFor(java.lang.Class)
    {
        com.google.protobuf.Protobuf r0;
        com.google.protobuf.Schema $r4, $r6;
        java.lang.Class $r1;
        java.lang.Object $r3;
        com.google.protobuf.SchemaFactory $r5;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.google.protobuf.Protobuf;

        $r1 := @parameter0: java.lang.Class;

        staticinvoke <com.google.protobuf.Internal: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>($r1, "messageType");

        $r2 = r0.<com.google.protobuf.Protobuf: java.util.concurrent.ConcurrentMap schemaCache>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (com.google.protobuf.Schema) $r3;

        if $r4 != null goto label1;

        $r5 = r0.<com.google.protobuf.Protobuf: com.google.protobuf.SchemaFactory schemaFactory>;

        $r4 = interfaceinvoke $r5.<com.google.protobuf.SchemaFactory: com.google.protobuf.Schema createSchema(java.lang.Class)>($r1);

        $r6 = virtualinvoke r0.<com.google.protobuf.Protobuf: com.google.protobuf.Schema registerSchema(java.lang.Class,com.google.protobuf.Schema)>($r1, $r4);

        if $r6 == null goto label1;

        return $r6;

     label1:
        return $r4;
    }

    public com.google.protobuf.Schema schemaFor(java.lang.Object)
    {
        com.google.protobuf.Protobuf r0;
        com.google.protobuf.Schema $r3;
        java.lang.Object $r1;
        java.lang.Class $r2;

        r0 := @this: com.google.protobuf.Protobuf;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<com.google.protobuf.Protobuf: com.google.protobuf.Schema schemaFor(java.lang.Class)>($r2);

        return $r3;
    }

    public void writeTo(java.lang.Object, com.google.protobuf.Writer)
    {
        com.google.protobuf.Protobuf r0;
        com.google.protobuf.Schema $r3;
        java.lang.Object $r1;
        com.google.protobuf.Writer $r2;

        r0 := @this: com.google.protobuf.Protobuf;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.google.protobuf.Writer;

        $r3 = virtualinvoke r0.<com.google.protobuf.Protobuf: com.google.protobuf.Schema schemaFor(java.lang.Object)>($r1);

        interfaceinvoke $r3.<com.google.protobuf.Schema: void writeTo(java.lang.Object,com.google.protobuf.Writer)>($r1, $r2);

        return;
    }
}
