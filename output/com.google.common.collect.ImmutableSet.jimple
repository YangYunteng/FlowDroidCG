public abstract class com.google.common.collect.ImmutableSet extends com.google.common.collect.ImmutableCollection implements java.util.Set
{
    public static final int CUTOFF;
    public static final double DESIRED_LOAD_FACTOR;
    public static final int MAX_TABLE_SIZE;
    public static final int SPLITERATOR_CHARACTERISTICS;
    public transient com.google.common.collect.ImmutableList asList;

    public void <init>()
    {
        com.google.common.collect.ImmutableSet r0;

        r0 := @this: com.google.common.collect.ImmutableSet;

        specialinvoke r0.<com.google.common.collect.ImmutableCollection: void <init>()>();

        return;
    }

    public static com.google.common.collect.ImmutableSet access$000(int, java.lang.Object[])
    {
        int $i0;
        java.lang.Object[] $r0;
        com.google.common.collect.ImmutableSet $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>($i0, $r0);

        return $r1;
    }

    public static com.google.common.collect.ImmutableSet$Builder builder()
    {
        com.google.common.collect.ImmutableSet$Builder $r0;

        $r0 = new com.google.common.collect.ImmutableSet$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableSet$Builder: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.ImmutableSet$Builder builderWithExpectedSize(int)
    {
        int $i0;
        com.google.common.collect.ImmutableSet$Builder $r0;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "expectedSize");

        $r0 = new com.google.common.collect.ImmutableSet$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableSet$Builder: void <init>(int)>($i0);

        return $r0;
    }

    public static int chooseTableSize(int)
    {
        byte $b0;
        int $i1, $i2, $i3;
        boolean $z0;
        double $d0, $d1;

        $i1 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 2);

        $z0 = 1;

        if $i1 >= 751619276 goto label3;

        $i2 = -1;

        $i2 = $i1 + $i2;

        $i2 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i2);

        $i2 = $i2 << 1;

     label1:
        $d0 = (double) $i2;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 * 0.7;

        $d1 = (double) $i1;

        $b0 = $d0 cmpg $d1;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label2;

        $i2 = $i2 << 1;

        goto label1;

     label2:
        return $i2;

     label3:
        if $i1 >= 1073741824 goto label4;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "collection too large");

        return 1073741824;
    }

    public static transient com.google.common.collect.ImmutableSet construct(int, java.lang.Object[])
    {
        java.lang.Object[] $r0, $r3;
        com.google.common.collect.SingletonImmutableSet $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        com.google.common.collect.ImmutableSet $r4;
        com.google.common.collect.RegularImmutableSet $r6;
        java.lang.Object $r1, $r2;

        $i1 := @parameter0: int;

        $r3 := @parameter1: java.lang.Object[];

        if $i1 == 0 goto label11;

        if $i1 == 1 goto label10;

        $i2 = staticinvoke <com.google.common.collect.ImmutableSet: int chooseTableSize(int)>($i1);

        $r0 = newarray (java.lang.Object)[$i2];

        $i0 = -1;

        $i0 = $i2 + $i0;

        $i3 = 0;

        $i4 = 0;

        $i5 = 0;

     label01:
        if $i3 >= $i1 goto label06;

        $r1 = $r3[$i3];

        staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object checkElementNotNull(java.lang.Object,int)>($r1, $i3);

        $i6 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i8 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i6);

     label02:
        $i7 = $i8 & $i0;

        $r2 = $r0[$i7];

        if $r2 != null goto label03;

        $r3[$i4] = $r1;

        $r0[$i7] = $r1;

        $i5 = $i5 + $i6;

        $i4 = $i4 + 1;

        goto label04;

     label03:
        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label05;

     label04:
        $i3 = $i3 + 1;

        goto label01;

     label05:
        $i8 = $i8 + 1;

        goto label02;

     label06:
        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r3, $i4, $i1, null);

        if $i4 != 1 goto label07;

        $r1 = $r3[0];

        $r5 = new com.google.common.collect.SingletonImmutableSet;

        specialinvoke $r5.<com.google.common.collect.SingletonImmutableSet: void <init>(java.lang.Object,int)>($r1, $i5);

        return $r5;

     label07:
        $i1 = staticinvoke <com.google.common.collect.ImmutableSet: int chooseTableSize(int)>($i4);

        if $i2 == $i1 goto label08;

        $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>($i4, $r3);

        return $r4;

     label08:
        $i1 = lengthof $r3;

        if $i4 >= $i1 goto label09;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i4);

     label09:
        $r6 = new com.google.common.collect.RegularImmutableSet;

        specialinvoke $r6.<com.google.common.collect.RegularImmutableSet: void <init>(java.lang.Object[],int,java.lang.Object[],int)>($r3, $i5, $r0, $i0);

        return $r6;

     label10:
        $r1 = $r3[0];

        $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>($r1);

        return $r4;

     label11:
        $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r4;
    }

    public static com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableSet $r2;
        java.util.Iterator $r3;
        java.util.Collection $r1;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r1 = (java.util.Collection) $r0;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r1);

        return $r2;

     label1:
        $r3 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Iterator)>($r3);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSet copyOf(java.util.Collection)
    {
        com.google.common.collect.ImmutableSet $r1;
        java.lang.Object[] $r3;
        java.util.Collection $r0;
        int $i0;
        java.util.EnumSet $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Collection;

        $z0 = $r0 instanceof com.google.common.collect.ImmutableSet;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof java.util.SortedSet;

        if $z0 != 0 goto label1;

        $r1 = (com.google.common.collect.ImmutableSet) $r0;

        $z0 = virtualinvoke $r1.<com.google.common.collect.ImmutableCollection: boolean isPartialView()>();

        if $z0 != 0 goto label2;

        return $r1;

     label1:
        $z0 = $r0 instanceof java.util.EnumSet;

        if $z0 == 0 goto label2;

        $r2 = (java.util.EnumSet) $r0;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOfEnumSet(java.util.EnumSet)>($r2);

        return $r1;

     label2:
        $r3 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>();

        $i0 = lengthof $r3;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>($i0, $r3);

        return $r1;
    }

    public static com.google.common.collect.ImmutableSet copyOf(java.util.Iterator)
    {
        com.google.common.collect.ImmutableSet $r1;
        java.util.Iterator $r0;
        com.google.common.collect.ImmutableSet$Builder $r3;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r1;

     label1:
        $r2 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>($r2);

        return $r1;

     label2:
        $r3 = new com.google.common.collect.ImmutableSet$Builder;

        specialinvoke $r3.<com.google.common.collect.ImmutableSet$Builder: void <init>()>();

        $r3 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator)>($r0);

        $r1 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        return $r1;
    }

    public static com.google.common.collect.ImmutableSet copyOf(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        com.google.common.collect.ImmutableSet $r2;
        int $i0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r0;

        if $i0 == 0 goto label2;

        if $i0 == 1 goto label1;

        $i0 = lengthof $r0;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r0 = (java.lang.Object[]) $r1;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>($i0, $r0);

        return $r2;

     label1:
        $r1 = $r0[0];

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>($r1);

        return $r2;

     label2:
        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r2;
    }

    public static com.google.common.collect.ImmutableSet copyOfEnumSet(java.util.EnumSet)
    {
        com.google.common.collect.ImmutableSet $r1;
        java.util.EnumSet $r0;

        $r0 := @parameter0: java.util.EnumSet;

        $r0 = staticinvoke <java.util.EnumSet: java.util.EnumSet copyOf(java.util.EnumSet)>($r0);

        $r1 = staticinvoke <com.google.common.collect.ImmutableEnumSet: com.google.common.collect.ImmutableSet asImmutable(java.util.EnumSet)>($r0);

        return $r1;
    }

    public static com.google.common.collect.ImmutableSet of()
    {
        com.google.common.collect.RegularImmutableSet r0;

        r0 = <com.google.common.collect.RegularImmutableSet: com.google.common.collect.RegularImmutableSet EMPTY>;

        return r0;
    }

    public static com.google.common.collect.ImmutableSet of(java.lang.Object)
    {
        java.lang.Object $r0;
        com.google.common.collect.SingletonImmutableSet $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 = new com.google.common.collect.SingletonImmutableSet;

        specialinvoke $r1.<com.google.common.collect.SingletonImmutableSet: void <init>(java.lang.Object)>($r0);

        return $r1;
    }

    public static com.google.common.collect.ImmutableSet of(java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r1;
        com.google.common.collect.ImmutableSet $r2;
        java.lang.Object $r0, $r3;

        $r3 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = $r3;

        $r1[1] = $r0;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>(2, $r1);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSet of(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r2;
        com.google.common.collect.ImmutableSet $r3;
        java.lang.Object $r0, $r1, $r4;

        $r4 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = $r4;

        $r2[1] = $r0;

        $r2[2] = $r1;

        $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>(3, $r2);

        return $r3;
    }

    public static com.google.common.collect.ImmutableSet of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r3;
        com.google.common.collect.ImmutableSet $r4;
        java.lang.Object $r0, $r1, $r2, $r5;

        $r5 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $r2 := @parameter3: java.lang.Object;

        $r3 = newarray (java.lang.Object)[4];

        $r3[0] = $r5;

        $r3[1] = $r0;

        $r3[2] = $r1;

        $r3[3] = $r2;

        $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>(4, $r3);

        return $r4;
    }

    public static com.google.common.collect.ImmutableSet of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r4;
        com.google.common.collect.ImmutableSet $r5;
        java.lang.Object $r0, $r1, $r2, $r3, $r6;

        $r6 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $r2 := @parameter3: java.lang.Object;

        $r3 := @parameter4: java.lang.Object;

        $r4 = newarray (java.lang.Object)[5];

        $r4[0] = $r6;

        $r4[1] = $r0;

        $r4[2] = $r1;

        $r4[3] = $r2;

        $r4[4] = $r3;

        $r5 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>(5, $r4);

        return $r5;
    }

    public static transient com.google.common.collect.ImmutableSet of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] $r5, $r8;
        com.google.common.collect.ImmutableSet $r6;
        int $i0;
        java.lang.Object $r0, $r1, $r2, $r3, $r4, $r7;

        $r7 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $r2 := @parameter3: java.lang.Object;

        $r3 := @parameter4: java.lang.Object;

        $r4 := @parameter5: java.lang.Object;

        $r5 := @parameter6: java.lang.Object[];

        $i0 = lengthof $r5;

        $i0 = $i0 + 6;

        $r8 = newarray (java.lang.Object)[$i0];

        $r8[0] = $r7;

        $r8[1] = $r0;

        $r8[2] = $r1;

        $r8[3] = $r2;

        $r8[4] = $r3;

        $r8[5] = $r4;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r8, 6, $i0);

        $i0 = lengthof $r8;

        $r6 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])>($i0, $r8);

        return $r6;
    }

    public static java.util.stream.Collector toImmutableSet()
    {
        java.util.stream.Collector $r0;

        $r0 = staticinvoke <com.google.common.collect.CollectCollectors: java.util.stream.Collector toImmutableSet()>();

        return $r0;
    }

    public com.google.common.collect.ImmutableList asList()
    {
        com.google.common.collect.ImmutableSet r0;
        com.google.common.collect.ImmutableList $r1;

        r0 := @this: com.google.common.collect.ImmutableSet;

        $r1 = r0.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList createAsList()>();

        r0.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList> = $r1;

     label1:
        return $r1;
    }

    public com.google.common.collect.ImmutableList createAsList()
    {
        com.google.common.collect.RegularImmutableAsList $r1;
        com.google.common.collect.ImmutableSet r0;
        java.lang.Object[] $r2;

        r0 := @this: com.google.common.collect.ImmutableSet;

        $r1 = new com.google.common.collect.RegularImmutableAsList;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>();

        specialinvoke $r1.<com.google.common.collect.RegularImmutableAsList: void <init>(com.google.common.collect.ImmutableCollection,java.lang.Object[])>(r0, $r2);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.collect.ImmutableSet r0, $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSet;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof com.google.common.collect.ImmutableSet;

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<com.google.common.collect.ImmutableSet: boolean isHashCodeFast()>();

        if $z0 == 0 goto label2;

        $r2 = (com.google.common.collect.ImmutableSet) $r1;

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: boolean isHashCodeFast()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r0.<com.google.common.collect.ImmutableSet: int hashCode()>();

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $z0 = staticinvoke <com.google.common.collect.Sets: boolean equalsImpl(java.util.Set,java.lang.Object)>(r0, $r1);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        com.google.common.collect.ImmutableSet r0;

        r0 := @this: com.google.common.collect.ImmutableSet;

        $i0 = staticinvoke <com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)>(r0);

        return $i0;
    }

    public boolean isHashCodeFast()
    {
        com.google.common.collect.ImmutableSet r0;

        r0 := @this: com.google.common.collect.ImmutableSet;

        return 0;
    }

    public abstract com.google.common.collect.UnmodifiableIterator iterator();

    public volatile java.util.Iterator iterator()
    {
        com.google.common.collect.ImmutableSet r0;
        com.google.common.collect.UnmodifiableIterator $r1;

        r0 := @this: com.google.common.collect.ImmutableSet;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableSet r0;
        java.lang.Object[] $r2;
        com.google.common.collect.ImmutableSet$SerializedForm $r1;

        r0 := @this: com.google.common.collect.ImmutableSet;

        $r1 = new com.google.common.collect.ImmutableSet$SerializedForm;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableSet$SerializedForm: void <init>(java.lang.Object[])>($r2);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.google.common.collect.ImmutableSet: int SPLITERATOR_CHARACTERISTICS> = 1297;

        <com.google.common.collect.ImmutableSet: int MAX_TABLE_SIZE> = 1073741824;

        <com.google.common.collect.ImmutableSet: double DESIRED_LOAD_FACTOR> = 0.7;

        <com.google.common.collect.ImmutableSet: int CUTOFF> = 751619276;

        return;
    }
}
