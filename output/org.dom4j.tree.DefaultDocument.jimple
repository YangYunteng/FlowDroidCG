public class org.dom4j.tree.DefaultDocument extends org.dom4j.tree.AbstractDocument
{
    public static final java.util.Iterator EMPTY_ITERATOR;
    public static final java.util.List EMPTY_LIST;
    public java.util.List content;
    public org.dom4j.DocumentType docType;
    public org.dom4j.DocumentFactory documentFactory;
    public transient org.xml.sax.EntityResolver entityResolver;
    public java.lang.String name;
    public org.dom4j.Element rootElement;

    static void <clinit>()
    {
        java.util.List $r1;
        java.util.Iterator $r0;

        $r1 = <java.util.Collections: java.util.List EMPTY_LIST>;

        <org.dom4j.tree.DefaultDocument: java.util.List EMPTY_LIST> = $r1;

        $r1 = <org.dom4j.tree.DefaultDocument: java.util.List EMPTY_LIST>;

        $r0 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        <org.dom4j.tree.DefaultDocument: java.util.Iterator EMPTY_ITERATOR> = $r0;

        return;
    }

    public void <init>()
    {
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        specialinvoke r0.<org.dom4j.tree.AbstractDocument: void <init>()>();

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentFactory documentFactory> = $r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.dom4j.tree.AbstractDocument: void <init>()>();

        $r2 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentFactory documentFactory> = $r2;

        r0.<org.dom4j.tree.DefaultDocument: java.lang.String name> = $r1;

        return;
    }

    public void <init>(java.lang.String, org.dom4j.Element, org.dom4j.DocumentType)
    {
        org.dom4j.DocumentType $r3;
        org.dom4j.Element $r2;
        java.lang.String $r1;
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.DocumentFactory $r4;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.dom4j.Element;

        $r3 := @parameter2: org.dom4j.DocumentType;

        specialinvoke r0.<org.dom4j.tree.AbstractDocument: void <init>()>();

        $r4 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentFactory documentFactory> = $r4;

        r0.<org.dom4j.tree.DefaultDocument: java.lang.String name> = $r1;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement> = $r2;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentType docType> = $r3;

        return;
    }

    public void <init>(org.dom4j.DocumentType)
    {
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.DocumentType $r1;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: org.dom4j.DocumentType;

        specialinvoke r0.<org.dom4j.tree.AbstractDocument: void <init>()>();

        $r2 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentFactory documentFactory> = $r2;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentType docType> = $r1;

        return;
    }

    public void <init>(org.dom4j.Element)
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: org.dom4j.Element;

        specialinvoke r0.<org.dom4j.tree.AbstractDocument: void <init>()>();

        $r2 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentFactory documentFactory> = $r2;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement> = $r1;

        return;
    }

    public void <init>(org.dom4j.Element, org.dom4j.DocumentType)
    {
        org.dom4j.DocumentType $r2;
        org.dom4j.Element $r1;
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.dom4j.DocumentType;

        specialinvoke r0.<org.dom4j.tree.AbstractDocument: void <init>()>();

        $r3 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentFactory documentFactory> = $r3;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement> = $r1;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentType docType> = $r2;

        return;
    }

    public org.dom4j.Document addDocType(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dom4j.DocumentType $r5;
        java.lang.String $r1, $r2, $r3;
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.DocumentFactory $r4;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r5 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.DocumentType createDocType(java.lang.String,java.lang.String,java.lang.String)>($r3, $r1, $r2);

        virtualinvoke r0.<org.dom4j.tree.DefaultDocument: void setDocType(org.dom4j.DocumentType)>($r5);

        return r0;
    }

    public void addNode(int, org.dom4j.Node)
    {
        org.dom4j.Document $r2;
        org.dom4j.Node $r1;
        java.util.List $r6;
        org.dom4j.IllegalAddException $r5;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.dom4j.tree.DefaultDocument r0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.dom4j.Node;

        if $r1 == null goto label3;

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Document getDocument()>();

        if $r2 == null goto label2;

        if $r2 != r0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("The Node already has an existing document: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new org.dom4j.IllegalAddException;

        specialinvoke $r5.<org.dom4j.IllegalAddException: void <init>(org.dom4j.Branch,org.dom4j.Node,java.lang.String)>(r0, $r1, $r4);

        throw $r5;

     label2:
        $r6 = virtualinvoke r0.<org.dom4j.tree.DefaultDocument: java.util.List contentList()>();

        interfaceinvoke $r6.<java.util.List: void add(int,java.lang.Object)>($i0, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractDocument: void childAdded(org.dom4j.Node)>($r1);

     label3:
        return;
    }

    public void addNode(org.dom4j.Node)
    {
        org.dom4j.Document $r2;
        java.util.List $r6;
        org.dom4j.Node $r1;
        org.dom4j.IllegalAddException $r5;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.dom4j.tree.DefaultDocument r0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: org.dom4j.Node;

        if $r1 == null goto label3;

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Document getDocument()>();

        if $r2 == null goto label2;

        if $r2 != r0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("The Node already has an existing document: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new org.dom4j.IllegalAddException;

        specialinvoke $r5.<org.dom4j.IllegalAddException: void <init>(org.dom4j.Branch,org.dom4j.Node,java.lang.String)>(r0, $r1, $r4);

        throw $r5;

     label2:
        $r6 = virtualinvoke r0.<org.dom4j.tree.DefaultDocument: java.util.List contentList()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractDocument: void childAdded(org.dom4j.Node)>($r1);

     label3:
        return;
    }

    public void clearContent()
    {
        org.dom4j.tree.DefaultDocument r0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void contentRemoved()>();

        r0.<org.dom4j.tree.DefaultDocument: java.util.List content> = null;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement> = null;

        return;
    }

    public java.lang.Object clone()
    {
        java.lang.Object $r1;
        org.dom4j.tree.DefaultDocument r0, $r2;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 = specialinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.Object clone()>();

        $r2 = (org.dom4j.tree.DefaultDocument) $r1;

        $r2.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement> = null;

        $r2.<org.dom4j.tree.DefaultDocument: java.util.List content> = null;

        virtualinvoke $r2.<org.dom4j.tree.AbstractBranch: void appendContent(org.dom4j.Branch)>(r0);

        return $r2;
    }

    public java.util.List contentList()
    {
        java.util.List $r1;
        org.dom4j.Element $r2;
        org.dom4j.tree.DefaultDocument r0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 = r0.<org.dom4j.tree.DefaultDocument: java.util.List content>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createContentList()>();

        r0.<org.dom4j.tree.DefaultDocument: java.util.List content> = $r1;

        $r2 = r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement>;

        if $r2 == null goto label1;

        $r1 = r0.<org.dom4j.tree.DefaultDocument: java.util.List content>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label1:
        $r1 = r0.<org.dom4j.tree.DefaultDocument: java.util.List content>;

        return $r1;
    }

    public org.dom4j.DocumentType getDocType()
    {
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.DocumentType r1;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        r1 = r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentType docType>;

        return r1;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        r1 = r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentFactory documentFactory>;

        return r1;
    }

    public org.xml.sax.EntityResolver getEntityResolver()
    {
        org.dom4j.tree.DefaultDocument r0;
        org.xml.sax.EntityResolver r1;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        r1 = r0.<org.dom4j.tree.DefaultDocument: org.xml.sax.EntityResolver entityResolver>;

        return r1;
    }

    public java.lang.String getName()
    {
        java.lang.String r1;
        org.dom4j.tree.DefaultDocument r0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        r1 = r0.<org.dom4j.tree.DefaultDocument: java.lang.String name>;

        return r1;
    }

    public org.dom4j.Element getRootElement()
    {
        org.dom4j.Element r1;
        org.dom4j.tree.DefaultDocument r0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        r1 = r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement>;

        return r1;
    }

    public java.lang.String getXMLEncoding()
    {
        java.lang.String r1;
        org.dom4j.tree.DefaultDocument r0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        r1 = r0.<org.dom4j.tree.AbstractDocument: java.lang.String encoding>;

        return r1;
    }

    public org.dom4j.ProcessingInstruction processingInstruction(java.lang.String)
    {
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String $r1, $r5;
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.ProcessingInstruction $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.DefaultDocument: java.util.List contentList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return null;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r3 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label3;

        $r4 = (org.dom4j.ProcessingInstruction) $r3;

        $r5 = interfaceinvoke $r4.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public java.util.List processingInstructions()
    {
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        org.dom4j.tree.BackedList $r2;
        org.dom4j.tree.DefaultDocument r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 = virtualinvoke r0.<org.dom4j.tree.DefaultDocument: java.util.List contentList()>();

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r2;

     label2:
        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r3 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public java.util.List processingInstructions(java.lang.String)
    {
        org.dom4j.tree.BackedList $r3;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.String $r1, $r6;
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.ProcessingInstruction $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.DefaultDocument: java.util.List contentList()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r4 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label3;

        $r5 = (org.dom4j.ProcessingInstruction) $r4;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public boolean removeNode(org.dom4j.Node)
    {
        java.util.List $r3;
        org.dom4j.Node $r1;
        org.dom4j.Element $r2;
        org.dom4j.tree.DefaultDocument r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: org.dom4j.Node;

        $r2 = r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement>;

        if $r1 != $r2 goto label1;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement> = null;

     label1:
        $r3 = virtualinvoke r0.<org.dom4j.tree.DefaultDocument: java.util.List contentList()>();

        $z0 = interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.dom4j.tree.AbstractDocument: void childRemoved(org.dom4j.Node)>($r1);

        return 1;

     label2:
        return 0;
    }

    public boolean removeProcessingInstruction(java.lang.String)
    {
        java.util.Iterator $r3;
        java.util.List $r2;
        java.lang.Object $r4;
        java.lang.String $r1, $r6;
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.ProcessingInstruction $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.DefaultDocument: java.util.List contentList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r4 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label1;

        $r5 = (org.dom4j.ProcessingInstruction) $r4;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        return 1;
    }

    public void rootElementAdded(org.dom4j.Element)
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.DefaultDocument r0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: org.dom4j.Element;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement> = $r1;

        interfaceinvoke $r1.<org.dom4j.Node: void setDocument(org.dom4j.Document)>(r0);

        return;
    }

    public void setContent(java.util.List)
    {
        org.dom4j.Document $r6;
        org.dom4j.Node $r5;
        org.dom4j.tree.ContentListFacade $r2;
        java.util.List $r1, $r3;
        org.dom4j.IllegalAddException $r8;
        int $i0, $i1;
        java.lang.Object $r4;
        org.dom4j.Element $r7;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        org.dom4j.tree.DefaultDocument r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: java.util.List;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement> = null;

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void contentRemoved()>();

        $z0 = $r1 instanceof org.dom4j.tree.ContentListFacade;

        if $z0 == 0 goto label1;

        $r2 = (org.dom4j.tree.ContentListFacade) $r1;

        $r1 = virtualinvoke $r2.<org.dom4j.tree.ContentListFacade: java.util.List getBackingList()>();

     label1:
        if $r1 != null goto label2;

        r0.<org.dom4j.tree.DefaultDocument: java.util.List content> = null;

        return;

     label2:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List createContentList(int)>($i0);

        $i1 = 0;

     label3:
        if $i1 < $i0 goto label4;

        r0.<org.dom4j.tree.DefaultDocument: java.util.List content> = $r3;

        return;

     label4:
        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r4 instanceof org.dom4j.Node;

        if $z0 == 0 goto label8;

        $r5 = (org.dom4j.Node) $r4;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: org.dom4j.Document getDocument()>();

        if $r6 == null goto label5;

        if $r6 == r0 goto label5;

        $r4 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.Object clone()>();

        $r5 = (org.dom4j.Node) $r4;

     label5:
        $z0 = $r5 instanceof org.dom4j.Element;

        if $z0 == 0 goto label7;

        $r7 = r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement>;

        if $r7 != null goto label6;

        $r7 = (org.dom4j.Element) $r5;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.Element rootElement> = $r7;

        goto label7;

     label6:
        $r8 = new org.dom4j.IllegalAddException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("A document may only contain one root element: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.dom4j.IllegalAddException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label7:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        virtualinvoke r0.<org.dom4j.tree.AbstractDocument: void childAdded(org.dom4j.Node)>($r5);

     label8:
        $i1 = $i1 + 1;

        goto label3;
    }

    public void setDocType(org.dom4j.DocumentType)
    {
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.DocumentType $r1;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: org.dom4j.DocumentType;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentType docType> = $r1;

        return;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.tree.DefaultDocument r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        r0.<org.dom4j.tree.DefaultDocument: org.dom4j.DocumentFactory documentFactory> = $r1;

        return;
    }

    public void setEntityResolver(org.xml.sax.EntityResolver)
    {
        org.dom4j.tree.DefaultDocument r0;
        org.xml.sax.EntityResolver $r1;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: org.xml.sax.EntityResolver;

        r0.<org.dom4j.tree.DefaultDocument: org.xml.sax.EntityResolver entityResolver> = $r1;

        return;
    }

    public void setName(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.tree.DefaultDocument r0;

        r0 := @this: org.dom4j.tree.DefaultDocument;

        $r1 := @parameter0: java.lang.String;

        r0.<org.dom4j.tree.DefaultDocument: java.lang.String name> = $r1;

        return;
    }
}
