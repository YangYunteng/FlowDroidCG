public class com.google.android.datatransport.runtime.time.TestClock extends java.lang.Object implements com.google.android.datatransport.runtime.time.Clock
{
    public final java.util.concurrent.atomic.AtomicLong timestamp;

    public void <init>(long)
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;
        com.google.android.datatransport.runtime.time.TestClock r0;

        r0 := @this: com.google.android.datatransport.runtime.time.TestClock;

        $l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        r0.<com.google.android.datatransport.runtime.time.TestClock: java.util.concurrent.atomic.AtomicLong timestamp> = $r1;

        return;
    }

    public void advance(long)
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        com.google.android.datatransport.runtime.time.TestClock r0;
        byte $b0;
        int $i2;
        long $l1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.google.android.datatransport.runtime.time.TestClock;

        $l1 := @parameter0: long;

        $b0 = $l1 cmp 0L;

        $i2 = (int) $b0;

        if $i2 < 0 goto label1;

        $r1 = r0.<com.google.android.datatransport.runtime.time.TestClock: java.util.concurrent.atomic.AtomicLong timestamp>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot advance time backwards.");

        throw $r2;
    }

    public long getTime()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;
        com.google.android.datatransport.runtime.time.TestClock r0;

        r0 := @this: com.google.android.datatransport.runtime.time.TestClock;

        $r1 = r0.<com.google.android.datatransport.runtime.time.TestClock: java.util.concurrent.atomic.AtomicLong timestamp>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public void tick()
    {
        com.google.android.datatransport.runtime.time.TestClock r0;

        r0 := @this: com.google.android.datatransport.runtime.time.TestClock;

        virtualinvoke r0.<com.google.android.datatransport.runtime.time.TestClock: void advance(long)>(1L);

        return;
    }
}
