public class project.android.imageprocessing.filter.effect.SphereRefractionFilter extends project.android.imageprocessing.filter.effect.BulgeDistortionFilter
{

    public void <init>(android.graphics.PointF, float, float, float)
    {
        android.graphics.PointF $r1;
        float $f0, $f1, $f2;
        project.android.imageprocessing.filter.effect.SphereRefractionFilter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.SphereRefractionFilter;

        $r1 := @parameter0: android.graphics.PointF;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $f2 := @parameter3: float;

        specialinvoke r0.<project.android.imageprocessing.filter.effect.BulgeDistortionFilter: void <init>(android.graphics.PointF,float,float,float)>($r1, $f0, $f1, $f2);

        return;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.filter.effect.SphereRefractionFilter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.SphereRefractionFilter;

        return "precision highp float;\nuniform sampler2D u_Texture0;\nvarying vec2 v_TexCoord;\nuniform vec2 u_Center;\nuniform float u_Radius;\nuniform float u_DistortionAmount;\nuniform float u_AspectRatio;\nvoid main(){\n\tvec2 textureCoordinateToUse = vec2(v_TexCoord.x, (v_TexCoord.y * u_AspectRatio + 0.5 - 0.5 * u_AspectRatio));\n\tfloat distanceFromCenter = distance(u_Center, textureCoordinateToUse);\n \tfloat checkForPresenceWithinSphere = step(distanceFromCenter, u_Radius);\n \tdistanceFromCenter = distanceFromCenter / u_Radius;\n \tfloat normalizedDepth = u_Radius * sqrt(1.0 - distanceFromCenter * distanceFromCenter);\n \tvec3 sphereNormal = normalize(vec3(textureCoordinateToUse - u_Center, normalizedDepth));\n \tvec3 refractedVector = refract(vec3(0.0, 0.0, -1.0), sphereNormal, u_DistortionAmount);\n \tgl_FragColor = texture2D(u_Texture0, (refractedVector.xy + 1.0) * 0.5) * checkForPresenceWithinSphere;\n}\n";
    }
}
