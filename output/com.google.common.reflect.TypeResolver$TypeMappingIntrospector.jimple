public final class com.google.common.reflect.TypeResolver$TypeMappingIntrospector extends com.google.common.reflect.TypeVisitor
{
    public static final com.google.common.reflect.TypeResolver$WildcardCapturer wildcardCapturer;
    public final java.util.Map mappings;

    static void <clinit>()
    {
        com.google.common.reflect.TypeResolver$WildcardCapturer $r0;

        $r0 = new com.google.common.reflect.TypeResolver$WildcardCapturer;

        specialinvoke $r0.<com.google.common.reflect.TypeResolver$WildcardCapturer: void <init>()>();

        <com.google.common.reflect.TypeResolver$TypeMappingIntrospector: com.google.common.reflect.TypeResolver$WildcardCapturer wildcardCapturer> = $r0;

        return;
    }

    public void <init>()
    {
        java.util.HashMap $r1;
        com.google.common.reflect.TypeResolver$TypeMappingIntrospector r0;

        r0 := @this: com.google.common.reflect.TypeResolver$TypeMappingIntrospector;

        specialinvoke r0.<com.google.common.reflect.TypeVisitor: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.google.common.reflect.TypeResolver$TypeMappingIntrospector: java.util.Map mappings> = $r1;

        return;
    }

    public static com.google.common.collect.ImmutableMap getTypeMappings(java.lang.reflect.Type)
    {
        com.google.common.reflect.TypeResolver$TypeMappingIntrospector $r0;
        java.lang.reflect.Type $r1;
        com.google.common.collect.ImmutableMap $r5;
        java.util.Map $r4;
        java.lang.reflect.Type[] $r2;
        com.google.common.reflect.TypeResolver$WildcardCapturer $r3;

        $r1 := @parameter0: java.lang.reflect.Type;

        $r0 = new com.google.common.reflect.TypeResolver$TypeMappingIntrospector;

        specialinvoke $r0.<com.google.common.reflect.TypeResolver$TypeMappingIntrospector: void <init>()>();

        $r2 = newarray (java.lang.reflect.Type)[1];

        $r3 = <com.google.common.reflect.TypeResolver$TypeMappingIntrospector: com.google.common.reflect.TypeResolver$WildcardCapturer wildcardCapturer>;

        $r1 = virtualinvoke $r3.<com.google.common.reflect.TypeResolver$WildcardCapturer: java.lang.reflect.Type capture(java.lang.reflect.Type)>($r1);

        $r2[0] = $r1;

        virtualinvoke $r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r2);

        $r4 = $r0.<com.google.common.reflect.TypeResolver$TypeMappingIntrospector: java.util.Map mappings>;

        $r5 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>($r4);

        return $r5;
    }

    private void map(com.google.common.reflect.TypeResolver$TypeVariableKey, java.lang.reflect.Type)
    {
        com.google.common.reflect.TypeResolver$TypeVariableKey $r1, $r6;
        com.google.common.reflect.TypeResolver$TypeMappingIntrospector r0;
        java.lang.reflect.Type $r2, $r4;
        java.util.Map $r3;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeResolver$TypeMappingIntrospector;

        $r1 := @parameter0: com.google.common.reflect.TypeResolver$TypeVariableKey;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = r0.<com.google.common.reflect.TypeResolver$TypeMappingIntrospector: java.util.Map mappings>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = $r2;

     label2:
        if $r4 == null goto label6;

        $z0 = virtualinvoke $r1.<com.google.common.reflect.TypeResolver$TypeVariableKey: boolean equalsType(java.lang.reflect.Type)>($r4);

        if $z0 == 0 goto label5;

     label3:
        if $r2 == null goto label4;

        $r3 = r0.<com.google.common.reflect.TypeResolver$TypeMappingIntrospector: java.util.Map mappings>;

        $r1 = staticinvoke <com.google.common.reflect.TypeResolver$TypeVariableKey: com.google.common.reflect.TypeResolver$TypeVariableKey forLookup(java.lang.reflect.Type)>($r2);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r2 = (java.lang.reflect.Type) $r5;

        goto label3;

     label4:
        return;

     label5:
        $r3 = r0.<com.google.common.reflect.TypeResolver$TypeMappingIntrospector: java.util.Map mappings>;

        $r6 = staticinvoke <com.google.common.reflect.TypeResolver$TypeVariableKey: com.google.common.reflect.TypeResolver$TypeVariableKey forLookup(java.lang.reflect.Type)>($r4);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r4 = (java.lang.reflect.Type) $r5;

        goto label2;

     label6:
        $r3 = r0.<com.google.common.reflect.TypeResolver$TypeMappingIntrospector: java.util.Map mappings>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void visitClass(java.lang.Class)
    {
        com.google.common.reflect.TypeResolver$TypeMappingIntrospector r0;
        java.lang.reflect.Type $r3;
        java.lang.reflect.Type[] $r2;
        java.lang.Class $r1;

        r0 := @this: com.google.common.reflect.TypeResolver$TypeMappingIntrospector;

        $r1 := @parameter0: java.lang.Class;

        $r2 = newarray (java.lang.reflect.Type)[1];

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $r2[0] = $r3;

        virtualinvoke r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r2);

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        virtualinvoke r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r2);

        return;
    }

    public void visitParameterizedType(java.lang.reflect.ParameterizedType)
    {
        java.lang.reflect.TypeVariable $r7;
        com.google.common.reflect.TypeResolver$TypeVariableKey $r6;
        com.google.common.reflect.TypeResolver$TypeMappingIntrospector r0;
        java.lang.reflect.ParameterizedType $r1;
        java.lang.reflect.Type $r2;
        java.lang.reflect.TypeVariable[] $r4;
        java.lang.reflect.Type[] $r5;
        int $i0, $i1;
        java.lang.Class $r3;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeResolver$TypeMappingIntrospector;

        $r1 := @parameter0: java.lang.reflect.ParameterizedType;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r3 = (java.lang.Class) $r2;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $r5 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r4;

        $i1 = lengthof $r5;

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $i0 = 0;

     label3:
        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label4;

        $r6 = new com.google.common.reflect.TypeResolver$TypeVariableKey;

        $r7 = $r4[$i0];

        specialinvoke $r6.<com.google.common.reflect.TypeResolver$TypeVariableKey: void <init>(java.lang.reflect.TypeVariable)>($r7);

        $r2 = $r5[$i0];

        specialinvoke r0.<com.google.common.reflect.TypeResolver$TypeMappingIntrospector: void map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type)>($r6, $r2);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r5 = newarray (java.lang.reflect.Type)[1];

        $r5[0] = $r3;

        virtualinvoke r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r5);

        $r5 = newarray (java.lang.reflect.Type)[1];

        $r2 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r5[0] = $r2;

        virtualinvoke r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r5);

        return;
    }

    public void visitTypeVariable(java.lang.reflect.TypeVariable)
    {
        java.lang.reflect.Type[] $r1;
        com.google.common.reflect.TypeResolver$TypeMappingIntrospector r0;
        java.lang.reflect.TypeVariable $r2;

        r0 := @this: com.google.common.reflect.TypeResolver$TypeMappingIntrospector;

        $r2 := @parameter0: java.lang.reflect.TypeVariable;

        $r1 = interfaceinvoke $r2.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        virtualinvoke r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r1);

        return;
    }

    public void visitWildcardType(java.lang.reflect.WildcardType)
    {
        java.lang.reflect.Type[] $r1;
        com.google.common.reflect.TypeResolver$TypeMappingIntrospector r0;
        java.lang.reflect.WildcardType $r2;

        r0 := @this: com.google.common.reflect.TypeResolver$TypeMappingIntrospector;

        $r2 := @parameter0: java.lang.reflect.WildcardType;

        $r1 = interfaceinvoke $r2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        virtualinvoke r0.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r1);

        return;
    }
}
