public abstract class com.google.android.material.transformation.FabTransformationBehavior extends com.google.android.material.transformation.ExpandableTransformationBehavior
{
    public float dependencyOriginalTranslationX;
    public float dependencyOriginalTranslationY;
    public final int[] tmpArray;
    public final android.graphics.Rect tmpRect;
    public final android.graphics.RectF tmpRectF1;
    public final android.graphics.RectF tmpRectF2;

    public void <init>()
    {
        android.graphics.RectF $r2;
        android.graphics.Rect $r1;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        int[] $r3;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        specialinvoke r0.<com.google.android.material.transformation.ExpandableTransformationBehavior: void <init>()>();

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.Rect tmpRect> = $r1;

        $r2 = new android.graphics.RectF;

        specialinvoke $r2.<android.graphics.RectF: void <init>()>();

        r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1> = $r2;

        $r2 = new android.graphics.RectF;

        specialinvoke $r2.<android.graphics.RectF: void <init>()>();

        r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2> = $r2;

        $r3 = newarray (int)[2];

        r0.<com.google.android.material.transformation.FabTransformationBehavior: int[] tmpArray> = $r3;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.graphics.RectF $r4;
        android.content.Context $r2;
        android.graphics.Rect $r3;
        android.util.AttributeSet $r1;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        int[] $r5;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r2 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<com.google.android.material.transformation.ExpandableTransformationBehavior: void <init>(android.content.Context,android.util.AttributeSet)>($r2, $r1);

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.Rect tmpRect> = $r3;

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>()>();

        r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1> = $r4;

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>()>();

        r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2> = $r4;

        $r5 = newarray (int)[2];

        r0.<com.google.android.material.transformation.FabTransformationBehavior: int[] tmpArray> = $r5;

        return;
    }

    private android.view.ViewGroup calculateChildContentContainer(android.view.View)
    {
        com.google.android.material.transformation.FabTransformationBehavior r0;
        int $i0;
        android.view.View $r1, $r2;
        android.view.ViewGroup $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r1 := @parameter0: android.view.View;

        $i0 = <com.google.android.material.R$id: int mtrl_child_content_container>;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.View findViewById(int)>($i0);

        if $r2 == null goto label1;

        $r3 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: android.view.ViewGroup toViewGroupOrNull(android.view.View)>($r2);

        return $r3;

     label1:
        $z0 = $r1 instanceof com.google.android.material.transformation.TransformationChildLayout;

        if $z0 != 0 goto label3;

        $z0 = $r1 instanceof com.google.android.material.transformation.TransformationChildCard;

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r3 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: android.view.ViewGroup toViewGroupOrNull(android.view.View)>($r1);

        return $r3;

     label3:
        $r3 = (android.view.ViewGroup) $r1;

        $r1 = virtualinvoke $r3.<android.view.ViewGroup: android.view.View getChildAt(int)>(0);

        $r3 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: android.view.ViewGroup toViewGroupOrNull(android.view.View)>($r1);

        return $r3;
    }

    private void calculateChildVisibleBoundsAtEndOfExpansion(android.view.View, com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec, com.google.android.material.animation.MotionTiming, com.google.android.material.animation.MotionTiming, float, float, float, float, android.graphics.RectF)
    {
        android.graphics.RectF $r2, $r7, $r8;
        android.graphics.Rect $r6;
        com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec $r3;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        android.view.View $r1;
        float $f0, $f1, $f2, $f3;
        com.google.android.material.animation.MotionTiming $r4, $r5;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r1 := @parameter0: android.view.View;

        $r3 := @parameter1: com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec;

        $r4 := @parameter2: com.google.android.material.animation.MotionTiming;

        $r5 := @parameter3: com.google.android.material.animation.MotionTiming;

        $f3 := @parameter4: float;

        $f0 := @parameter5: float;

        $f1 := @parameter6: float;

        $f2 := @parameter7: float;

        $r2 := @parameter8: android.graphics.RectF;

        $f3 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: float calculateValueOfAnimationAtEndOfExpansion(com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,com.google.android.material.animation.MotionTiming,float,float)>($r3, $r4, $f3, $f1);

        $f0 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: float calculateValueOfAnimationAtEndOfExpansion(com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,com.google.android.material.animation.MotionTiming,float,float)>($r3, $r5, $f0, $f2);

        $r6 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.Rect tmpRect>;

        virtualinvoke $r1.<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>($r6);

        $r7 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        virtualinvoke $r7.<android.graphics.RectF: void set(android.graphics.Rect)>($r6);

        $r8 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2>;

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>($r1, $r8);

        virtualinvoke $r8.<android.graphics.RectF: void offset(float,float)>($f3, $f0);

        virtualinvoke $r8.<android.graphics.RectF: boolean intersect(android.graphics.RectF)>($r7);

        virtualinvoke $r2.<android.graphics.RectF: void set(android.graphics.RectF)>($r8);

        return;
    }

    private void calculateDependencyWindowBounds(android.view.View, android.graphics.RectF)
    {
        android.graphics.RectF $r1;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        float $f0, $f1;
        android.view.View $r2;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r2 := @parameter0: android.view.View;

        $r1 := @parameter1: android.graphics.RectF;

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>($r2, $r1);

        $f1 = r0.<com.google.android.material.transformation.FabTransformationBehavior: float dependencyOriginalTranslationX>;

        $f0 = r0.<com.google.android.material.transformation.FabTransformationBehavior: float dependencyOriginalTranslationY>;

        virtualinvoke $r1.<android.graphics.RectF: void offset(float,float)>($f1, $f0);

        return;
    }

    private android.util.Pair calculateMotionTiming(float, float, boolean, com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec)
    {
        com.google.android.material.animation.MotionSpec $r2;
        android.util.Pair $r5;
        com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec $r1;
        byte $b0;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        int $i1;
        float $f0, $f1;
        com.google.android.material.animation.MotionTiming $r3, $r4;
        boolean $z0;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $z0 := @parameter2: boolean;

        $r1 := @parameter3: com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec;

        $b0 = $f0 cmpl 0.0F;

        if $b0 == 0 goto label5;

        $b0 = $f1 cmpl 0.0F;

        if $b0 != 0 goto label1;

        goto label5;

     label1:
        if $z0 == 0 goto label2;

        $b0 = $f1 cmpg 0.0F;

        $i1 = (int) $b0;

        if $i1 < 0 goto label3;

     label2:
        if $z0 != 0 goto label4;

        $b0 = $f1 cmpl 0.0F;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label4;

     label3:
        $r2 = $r1.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r3 = virtualinvoke $r2.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("translationXCurveUpwards");

        $r2 = $r1.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r4 = virtualinvoke $r2.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("translationYCurveUpwards");

        goto label6;

     label4:
        $r2 = $r1.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r3 = virtualinvoke $r2.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("translationXCurveDownwards");

        $r2 = $r1.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r4 = virtualinvoke $r2.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("translationYCurveDownwards");

        goto label6;

     label5:
        $r2 = $r1.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r3 = virtualinvoke $r2.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("translationXLinear");

        $r2 = $r1.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r4 = virtualinvoke $r2.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("translationYLinear");

     label6:
        $r5 = new android.util.Pair;

        specialinvoke $r5.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r3, $r4);

        return $r5;
    }

    private float calculateRevealCenterX(android.view.View, android.view.View, com.google.android.material.animation.Positioning)
    {
        android.graphics.RectF $r2, $r3;
        com.google.android.material.animation.Positioning $r1;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        android.view.View $r4, $r5;
        float $f0, $f1;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r4 := @parameter0: android.view.View;

        $r5 := @parameter1: android.view.View;

        $r1 := @parameter2: com.google.android.material.animation.Positioning;

        $r2 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        $r3 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2>;

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void calculateDependencyWindowBounds(android.view.View,android.graphics.RectF)>($r4, $r2);

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>($r5, $r3);

        $f0 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: float calculateTranslationX(android.view.View,android.view.View,com.google.android.material.animation.Positioning)>($r4, $r5, $r1);

        $f0 = neg $f0;

        virtualinvoke $r3.<android.graphics.RectF: void offset(float,float)>($f0, 0.0F);

        $f0 = virtualinvoke $r2.<android.graphics.RectF: float centerX()>();

        $f1 = $r3.<android.graphics.RectF: float left>;

        $f0 = $f0 - $f1;

        return $f0;
    }

    private float calculateRevealCenterY(android.view.View, android.view.View, com.google.android.material.animation.Positioning)
    {
        android.graphics.RectF $r2, $r3;
        com.google.android.material.animation.Positioning $r1;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        android.view.View $r4, $r5;
        float $f0, $f1;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r4 := @parameter0: android.view.View;

        $r5 := @parameter1: android.view.View;

        $r1 := @parameter2: com.google.android.material.animation.Positioning;

        $r2 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        $r3 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2>;

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void calculateDependencyWindowBounds(android.view.View,android.graphics.RectF)>($r4, $r2);

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>($r5, $r3);

        $f0 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: float calculateTranslationY(android.view.View,android.view.View,com.google.android.material.animation.Positioning)>($r4, $r5, $r1);

        $f0 = neg $f0;

        virtualinvoke $r3.<android.graphics.RectF: void offset(float,float)>(0.0F, $f0);

        $f0 = virtualinvoke $r2.<android.graphics.RectF: float centerY()>();

        $f1 = $r3.<android.graphics.RectF: float top>;

        $f0 = $f0 - $f1;

        return $f0;
    }

    private float calculateTranslationX(android.view.View, android.view.View, com.google.android.material.animation.Positioning)
    {
        android.graphics.RectF $r2, $r3;
        com.google.android.material.animation.Positioning $r1;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        int $i0;
        android.view.View $r4, $r5;
        float $f0, $f1;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r4 := @parameter0: android.view.View;

        $r5 := @parameter1: android.view.View;

        $r1 := @parameter2: com.google.android.material.animation.Positioning;

        $r2 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        $r3 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2>;

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void calculateDependencyWindowBounds(android.view.View,android.graphics.RectF)>($r4, $r2);

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>($r5, $r3);

        $i0 = $r1.<com.google.android.material.animation.Positioning: int gravity>;

        $i0 = $i0 & 7;

        if $i0 == 1 goto label3;

        if $i0 == 3 goto label2;

        if $i0 == 5 goto label1;

        $f0 = 0.0F;

        goto label5;

     label1:
        $f0 = $r3.<android.graphics.RectF: float right>;

        $f1 = $r2.<android.graphics.RectF: float right>;

        goto label4;

     label2:
        $f0 = $r3.<android.graphics.RectF: float left>;

        $f1 = $r2.<android.graphics.RectF: float left>;

        goto label4;

     label3:
        $f0 = virtualinvoke $r3.<android.graphics.RectF: float centerX()>();

        $f1 = virtualinvoke $r2.<android.graphics.RectF: float centerX()>();

     label4:
        $f0 = $f0 - $f1;

     label5:
        $f1 = $r1.<com.google.android.material.animation.Positioning: float xAdjustment>;

        $f0 = $f0 + $f1;

        return $f0;
    }

    private float calculateTranslationY(android.view.View, android.view.View, com.google.android.material.animation.Positioning)
    {
        android.graphics.RectF $r2, $r3;
        com.google.android.material.animation.Positioning $r1;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        int $i0;
        android.view.View $r4, $r5;
        float $f0, $f1;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r4 := @parameter0: android.view.View;

        $r5 := @parameter1: android.view.View;

        $r1 := @parameter2: com.google.android.material.animation.Positioning;

        $r2 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        $r3 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2>;

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void calculateDependencyWindowBounds(android.view.View,android.graphics.RectF)>($r4, $r2);

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>($r5, $r3);

        $i0 = $r1.<com.google.android.material.animation.Positioning: int gravity>;

        $i0 = $i0 & 112;

        if $i0 == 16 goto label3;

        if $i0 == 48 goto label2;

        if $i0 == 80 goto label1;

        $f0 = 0.0F;

        goto label5;

     label1:
        $f0 = $r3.<android.graphics.RectF: float bottom>;

        $f1 = $r2.<android.graphics.RectF: float bottom>;

        goto label4;

     label2:
        $f0 = $r3.<android.graphics.RectF: float top>;

        $f1 = $r2.<android.graphics.RectF: float top>;

        goto label4;

     label3:
        $f0 = virtualinvoke $r3.<android.graphics.RectF: float centerY()>();

        $f1 = virtualinvoke $r2.<android.graphics.RectF: float centerY()>();

     label4:
        $f0 = $f0 - $f1;

     label5:
        $f1 = $r1.<com.google.android.material.animation.Positioning: float yAdjustment>;

        $f0 = $f0 + $f1;

        return $f0;
    }

    private float calculateValueOfAnimationAtEndOfExpansion(com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec, com.google.android.material.animation.MotionTiming, float, float)
    {
        android.animation.TimeInterpolator $r5;
        com.google.android.material.animation.MotionSpec $r3;
        long $l0, $l1, $l2, $l3;
        com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec $r1;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        float $f0, $f1, $f2, $f3;
        com.google.android.material.animation.MotionTiming $r2, $r4;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r1 := @parameter0: com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec;

        $r2 := @parameter1: com.google.android.material.animation.MotionTiming;

        $f0 := @parameter2: float;

        $f1 := @parameter3: float;

        $l0 = virtualinvoke $r2.<com.google.android.material.animation.MotionTiming: long getDelay()>();

        $l1 = virtualinvoke $r2.<com.google.android.material.animation.MotionTiming: long getDuration()>();

        $r3 = $r1.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r4 = virtualinvoke $r3.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("expansion");

        $l2 = virtualinvoke $r4.<com.google.android.material.animation.MotionTiming: long getDelay()>();

        $l3 = virtualinvoke $r4.<com.google.android.material.animation.MotionTiming: long getDuration()>();

        $l2 = $l2 + $l3;

        $l2 = $l2 + 17L;

        $l0 = $l2 - $l0;

        $f2 = (float) $l0;

        $f3 = (float) $l1;

        $f2 = $f2 / $f3;

        $r5 = virtualinvoke $r2.<com.google.android.material.animation.MotionTiming: android.animation.TimeInterpolator getInterpolator()>();

        $f2 = interfaceinvoke $r5.<android.animation.TimeInterpolator: float getInterpolation(float)>($f2);

        $f0 = staticinvoke <com.google.android.material.animation.AnimationUtils: float lerp(float,float,float)>($f0, $f1, $f2);

        return $f0;
    }

    private void calculateWindowBounds(android.view.View, android.graphics.RectF)
    {
        android.graphics.RectF $r1;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        int[] $r3;
        int $i0;
        android.view.View $r2;
        float $f0, $f1;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r2 := @parameter0: android.view.View;

        $r1 := @parameter1: android.graphics.RectF;

        $i0 = virtualinvoke $r2.<android.view.View: int getWidth()>();

        $f0 = (float) $i0;

        $i0 = virtualinvoke $r2.<android.view.View: int getHeight()>();

        $f1 = (float) $i0;

        virtualinvoke $r1.<android.graphics.RectF: void set(float,float,float,float)>(0.0F, 0.0F, $f0, $f1);

        $r3 = r0.<com.google.android.material.transformation.FabTransformationBehavior: int[] tmpArray>;

        virtualinvoke $r2.<android.view.View: void getLocationInWindow(int[])>($r3);

        $i0 = $r3[0];

        $f0 = (float) $i0;

        $i0 = $r3[1];

        $f1 = (float) $i0;

        virtualinvoke $r1.<android.graphics.RectF: void offsetTo(float,float)>($f0, $f1);

        $f0 = virtualinvoke $r2.<android.view.View: float getTranslationX()>();

        $f0 = neg $f0;

        $i0 = (int) $f0;

        $f0 = (float) $i0;

        $f1 = virtualinvoke $r2.<android.view.View: float getTranslationY()>();

        $f1 = neg $f1;

        $i0 = (int) $f1;

        $f1 = (float) $i0;

        virtualinvoke $r1.<android.graphics.RectF: void offset(float,float)>($f0, $f1);

        return;
    }

    private void createChildrenFadeAnimation(android.view.View, android.view.View, boolean, boolean, com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec, java.util.List, java.util.List)
    {
        java.lang.Float $r8;
        com.google.android.material.animation.MotionSpec $r11;
        float[] $r9;
        com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec $r1;
        android.util.Property $r7;
        int $i0;
        android.view.View $r3, $r4;
        com.google.android.material.animation.MotionTiming $r12;
        boolean $z0, $z1, $z2;
        android.animation.ObjectAnimator $r10;
        android.view.ViewGroup $r6;
        java.util.List $r2, $r5;
        com.google.android.material.transformation.FabTransformationBehavior r0;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r3 := @parameter0: android.view.View;

        $r4 := @parameter1: android.view.View;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r1 := @parameter4: com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec;

        $r2 := @parameter5: java.util.List;

        $r5 := @parameter6: java.util.List;

        $z2 = $r4 instanceof android.view.ViewGroup;

        if $z2 != 0 goto label1;

        return;

     label1:
        $z2 = $r4 instanceof com.google.android.material.circularreveal.CircularRevealWidget;

        if $z2 == 0 goto label2;

        $i0 = <com.google.android.material.circularreveal.CircularRevealHelper: int STRATEGY>;

        if $i0 != 0 goto label2;

        return;

     label2:
        $r6 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: android.view.ViewGroup calculateChildContentContainer(android.view.View)>($r4);

        if $r6 != null goto label3;

        return;

     label3:
        if $z0 == 0 goto label5;

        if $z1 != 0 goto label4;

        $r7 = <com.google.android.material.animation.ChildrenAlphaProperty: android.util.Property CHILDREN_ALPHA>;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        virtualinvoke $r7.<android.util.Property: void set(java.lang.Object,java.lang.Object)>($r6, $r8);

     label4:
        $r7 = <com.google.android.material.animation.ChildrenAlphaProperty: android.util.Property CHILDREN_ALPHA>;

        $r9 = newarray (float)[1];

        $r9[0] = 1.0F;

        $r10 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r6, $r7, $r9);

        goto label6;

     label5:
        $r7 = <com.google.android.material.animation.ChildrenAlphaProperty: android.util.Property CHILDREN_ALPHA>;

        $r9 = newarray (float)[1];

        $r9[0] = 0.0F;

        $r10 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r6, $r7, $r9);

     label6:
        $r11 = $r1.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r12 = virtualinvoke $r11.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("contentFade");

        virtualinvoke $r12.<com.google.android.material.animation.MotionTiming: void apply(android.animation.Animator)>($r10);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r10);

        return;
    }

    private void createColorAnimation(android.view.View, android.view.View, boolean, boolean, com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec, java.util.List, java.util.List)
    {
        com.google.android.material.animation.ArgbEvaluatorCompat $r10;
        com.google.android.material.animation.MotionSpec $r11;
        com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec $r1;
        android.util.Property $r7;
        int[] $r8;
        int $i0, $i1;
        android.view.View $r3, $r4;
        com.google.android.material.animation.MotionTiming $r12;
        boolean $z0, $z1, $z2;
        android.animation.ObjectAnimator $r9;
        java.util.List $r2, $r5;
        com.google.android.material.circularreveal.CircularRevealWidget $r6;
        com.google.android.material.transformation.FabTransformationBehavior r0;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r3 := @parameter0: android.view.View;

        $r4 := @parameter1: android.view.View;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r1 := @parameter4: com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec;

        $r2 := @parameter5: java.util.List;

        $r5 := @parameter6: java.util.List;

        $z2 = $r4 instanceof com.google.android.material.circularreveal.CircularRevealWidget;

        if $z2 != 0 goto label1;

        return;

     label1:
        $r6 = (com.google.android.material.circularreveal.CircularRevealWidget) $r4;

        $i0 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: int getBackgroundTint(android.view.View)>($r3);

        $i1 = 16777215 & $i0;

        if $z0 == 0 goto label3;

        if $z1 != 0 goto label2;

        interfaceinvoke $r6.<com.google.android.material.circularreveal.CircularRevealWidget: void setCircularRevealScrimColor(int)>($i0);

     label2:
        $r7 = <com.google.android.material.circularreveal.CircularRevealWidget$CircularRevealScrimColorProperty: android.util.Property CIRCULAR_REVEAL_SCRIM_COLOR>;

        $r8 = newarray (int)[1];

        $r8[0] = $i1;

        $r9 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])>($r6, $r7, $r8);

        goto label4;

     label3:
        $r7 = <com.google.android.material.circularreveal.CircularRevealWidget$CircularRevealScrimColorProperty: android.util.Property CIRCULAR_REVEAL_SCRIM_COLOR>;

        $r8 = newarray (int)[1];

        $r8[0] = $i0;

        $r9 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])>($r6, $r7, $r8);

     label4:
        $r10 = staticinvoke <com.google.android.material.animation.ArgbEvaluatorCompat: com.google.android.material.animation.ArgbEvaluatorCompat getInstance()>();

        virtualinvoke $r9.<android.animation.ObjectAnimator: void setEvaluator(android.animation.TypeEvaluator)>($r10);

        $r11 = $r1.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r12 = virtualinvoke $r11.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("color");

        virtualinvoke $r12.<com.google.android.material.animation.MotionTiming: void apply(android.animation.Animator)>($r9);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        return;
    }

    private void createDependencyTranslationAnimation(android.view.View, android.view.View, boolean, com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec, java.util.List)
    {
        android.util.Pair $r7;
        float[] $r2;
        com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec $r5;
        android.util.Property $r11;
        android.view.View $r3, $r4;
        com.google.android.material.animation.MotionTiming $r9, $r10;
        boolean $z0;
        android.animation.ObjectAnimator $r12, $r13;
        com.google.android.material.animation.Positioning $r6;
        java.util.List $r1;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        float $f0, $f1, $f2, $f3;
        java.lang.Object $r8;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r3 := @parameter0: android.view.View;

        $r4 := @parameter1: android.view.View;

        $z0 := @parameter2: boolean;

        $r5 := @parameter3: com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec;

        $r1 := @parameter4: java.util.List;

        $r6 = $r5.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.Positioning positioning>;

        $f0 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: float calculateTranslationX(android.view.View,android.view.View,com.google.android.material.animation.Positioning)>($r3, $r4, $r6);

        $f1 = $f0;

        $r6 = $r5.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.Positioning positioning>;

        $f2 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: float calculateTranslationY(android.view.View,android.view.View,com.google.android.material.animation.Positioning)>($r3, $r4, $r6);

        $f3 = $f2;

        $r7 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: android.util.Pair calculateMotionTiming(float,float,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec)>($f0, $f2, $z0, $r5);

        $r8 = $r7.<android.util.Pair: java.lang.Object first>;

        $r9 = (com.google.android.material.animation.MotionTiming) $r8;

        $r8 = $r7.<android.util.Pair: java.lang.Object second>;

        $r10 = (com.google.android.material.animation.MotionTiming) $r8;

        $r11 = <android.view.View: android.util.Property TRANSLATION_X>;

        $r2 = newarray (float)[1];

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $f1 = r0.<com.google.android.material.transformation.FabTransformationBehavior: float dependencyOriginalTranslationX>;

     label2:
        $r2[0] = $f1;

        $r12 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r3, $r11, $r2);

        $r11 = <android.view.View: android.util.Property TRANSLATION_Y>;

        $r2 = newarray (float)[1];

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $f3 = r0.<com.google.android.material.transformation.FabTransformationBehavior: float dependencyOriginalTranslationY>;

     label4:
        $r2[0] = $f3;

        $r13 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r3, $r11, $r2);

        virtualinvoke $r9.<com.google.android.material.animation.MotionTiming: void apply(android.animation.Animator)>($r12);

        virtualinvoke $r10.<com.google.android.material.animation.MotionTiming: void apply(android.animation.Animator)>($r13);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r12);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r13);

        return;
    }

    private void createElevationAnimation(android.view.View, android.view.View, boolean, boolean, com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec, java.util.List, java.util.List)
    {
        com.google.android.material.animation.MotionSpec $r9;
        android.animation.ObjectAnimator $r8;
        float[] $r7;
        com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec $r1;
        android.util.Property $r6;
        java.util.List $r2, $r5;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        android.view.View $r3, $r4;
        float $f0, $f1;
        com.google.android.material.animation.MotionTiming $r10;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r3 := @parameter0: android.view.View;

        $r4 := @parameter1: android.view.View;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r1 := @parameter4: com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec;

        $r2 := @parameter5: java.util.List;

        $r5 := @parameter6: java.util.List;

        $f0 = staticinvoke <b.i.i.y: float l(android.view.View)>($r4);

        $f1 = staticinvoke <b.i.i.y: float l(android.view.View)>($r3);

        $f0 = $f0 - $f1;

        if $z0 == 0 goto label2;

        if $z1 != 0 goto label1;

        $f0 = neg $f0;

        virtualinvoke $r4.<android.view.View: void setTranslationZ(float)>($f0);

     label1:
        $r6 = <android.view.View: android.util.Property TRANSLATION_Z>;

        $r7 = newarray (float)[1];

        $r7[0] = 0.0F;

        $r8 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r4, $r6, $r7);

        goto label3;

     label2:
        $r6 = <android.view.View: android.util.Property TRANSLATION_Z>;

        $r7 = newarray (float)[1];

        $f0 = neg $f0;

        $r7[0] = $f0;

        $r8 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r4, $r6, $r7);

     label3:
        $r9 = $r1.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r10 = virtualinvoke $r9.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("elevation");

        virtualinvoke $r10.<com.google.android.material.animation.MotionTiming: void apply(android.animation.Animator)>($r8);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        return;
    }

    private void createExpansionAnimation(android.view.View, android.view.View, boolean, boolean, com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec, float, float, java.util.List, java.util.List)
    {
        android.graphics.Rect $r9;
        com.google.android.material.animation.MotionSpec $r10;
        com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo $r12;
        long $l1, $l3, $l4;
        com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec $r3;
        android.animation.Animator $r13, $r14;
        com.google.android.material.floatingactionbutton.FloatingActionButton $r8;
        int $i0, $i2;
        android.view.View $r1, $r2;
        com.google.android.material.animation.MotionTiming $r11;
        boolean $z0, $z1, $z2;
        com.google.android.material.transformation.FabTransformationBehavior$4 $r15;
        com.google.android.material.animation.Positioning $r7;
        java.util.List $r4, $r5;
        com.google.android.material.circularreveal.CircularRevealWidget $r6;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        float $f0, $f1, $f2, $f3, $f4;
        android.animation.Animator$AnimatorListener $r16;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.View;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r3 := @parameter4: com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec;

        $f0 := @parameter5: float;

        $f1 := @parameter6: float;

        $r4 := @parameter7: java.util.List;

        $r5 := @parameter8: java.util.List;

        $z2 = $r2 instanceof com.google.android.material.circularreveal.CircularRevealWidget;

        if $z2 != 0 goto label1;

        return;

     label1:
        $r6 = (com.google.android.material.circularreveal.CircularRevealWidget) $r2;

        $r7 = $r3.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.Positioning positioning>;

        $f2 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: float calculateRevealCenterX(android.view.View,android.view.View,com.google.android.material.animation.Positioning)>($r1, $r2, $r7);

        $r7 = $r3.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.Positioning positioning>;

        $f3 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: float calculateRevealCenterY(android.view.View,android.view.View,com.google.android.material.animation.Positioning)>($r1, $r2, $r7);

        $r8 = (com.google.android.material.floatingactionbutton.FloatingActionButton) $r1;

        $r9 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.Rect tmpRect>;

        virtualinvoke $r8.<com.google.android.material.floatingactionbutton.FloatingActionButton: boolean getContentRect(android.graphics.Rect)>($r9);

        $r9 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.Rect tmpRect>;

        $i0 = virtualinvoke $r9.<android.graphics.Rect: int width()>();

        $f4 = (float) $i0;

        $f4 = $f4 / 2.0F;

        $r10 = $r3.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r11 = virtualinvoke $r10.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("expansion");

        if $z0 == 0 goto label4;

        if $z1 != 0 goto label2;

        $r12 = new com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo;

        specialinvoke $r12.<com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo: void <init>(float,float,float)>($f2, $f3, $f4);

        interfaceinvoke $r6.<com.google.android.material.circularreveal.CircularRevealWidget: void setRevealInfo(com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo)>($r12);

     label2:
        if $z1 == 0 goto label3;

        $r12 = interfaceinvoke $r6.<com.google.android.material.circularreveal.CircularRevealWidget: com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo getRevealInfo()>();

        $f4 = $r12.<com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo: float radius>;

     label3:
        $f0 = staticinvoke <com.google.android.material.math.MathUtils: float distanceToFurthestCorner(float,float,float,float,float,float)>($f2, $f3, 0.0F, 0.0F, $f0, $f1);

        $r13 = staticinvoke <com.google.android.material.circularreveal.CircularRevealCompat: android.animation.Animator createCircularReveal(com.google.android.material.circularreveal.CircularRevealWidget,float,float,float)>($r6, $f2, $f3, $f0);

        $r14 = $r13;

        $r15 = new com.google.android.material.transformation.FabTransformationBehavior$4;

        specialinvoke $r15.<com.google.android.material.transformation.FabTransformationBehavior$4: void <init>(com.google.android.material.transformation.FabTransformationBehavior,com.google.android.material.circularreveal.CircularRevealWidget)>(r0, $r6);

        virtualinvoke $r13.<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)>($r15);

        $l1 = virtualinvoke $r11.<com.google.android.material.animation.MotionTiming: long getDelay()>();

        $i0 = (int) $f2;

        $i2 = (int) $f3;

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void createPreFillRadialExpansion(android.view.View,long,int,int,float,java.util.List)>($r2, $l1, $i0, $i2, $f4, $r4);

        goto label5;

     label4:
        $r12 = interfaceinvoke $r6.<com.google.android.material.circularreveal.CircularRevealWidget: com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo getRevealInfo()>();

        $f0 = $r12.<com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo: float radius>;

        $r13 = staticinvoke <com.google.android.material.circularreveal.CircularRevealCompat: android.animation.Animator createCircularReveal(com.google.android.material.circularreveal.CircularRevealWidget,float,float,float)>($r6, $f2, $f3, $f4);

        $l1 = virtualinvoke $r11.<com.google.android.material.animation.MotionTiming: long getDelay()>();

        $i0 = (int) $f2;

        $i2 = (int) $f3;

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void createPreFillRadialExpansion(android.view.View,long,int,int,float,java.util.List)>($r2, $l1, $i0, $i2, $f0, $r4);

        $l1 = virtualinvoke $r11.<com.google.android.material.animation.MotionTiming: long getDelay()>();

        $l3 = virtualinvoke $r11.<com.google.android.material.animation.MotionTiming: long getDuration()>();

        $r10 = $r3.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $l4 = virtualinvoke $r10.<com.google.android.material.animation.MotionSpec: long getTotalDuration()>();

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void createPostFillRadialExpansion(android.view.View,long,long,long,int,int,float,java.util.List)>($r2, $l1, $l3, $l4, $i0, $i2, $f4, $r4);

        $r14 = $r13;

     label5:
        virtualinvoke $r11.<com.google.android.material.animation.MotionTiming: void apply(android.animation.Animator)>($r14);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r16 = staticinvoke <com.google.android.material.circularreveal.CircularRevealCompat: android.animation.Animator$AnimatorListener createCircularRevealListener(com.google.android.material.circularreveal.CircularRevealWidget)>($r6);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r16);

        return;
    }

    private void createIconFadeAnimation(android.view.View, android.view.View, boolean, boolean, com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec, java.util.List, java.util.List)
    {
        com.google.android.material.animation.MotionSpec $r13;
        android.widget.ImageView $r7;
        com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec $r1;
        android.graphics.drawable.Drawable $r8;
        android.util.Property $r9;
        int[] $r10;
        android.view.View $r4, $r5;
        com.google.android.material.transformation.FabTransformationBehavior$2 $r12;
        com.google.android.material.animation.MotionTiming $r14;
        com.google.android.material.transformation.FabTransformationBehavior$3 $r15;
        boolean $z0, $z1, $z2;
        android.animation.ObjectAnimator $r11;
        java.util.List $r2, $r3;
        com.google.android.material.circularreveal.CircularRevealWidget $r6;
        com.google.android.material.transformation.FabTransformationBehavior r0;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r4 := @parameter0: android.view.View;

        $r5 := @parameter1: android.view.View;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r1 := @parameter4: com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec;

        $r2 := @parameter5: java.util.List;

        $r3 := @parameter6: java.util.List;

        $z2 = $r5 instanceof com.google.android.material.circularreveal.CircularRevealWidget;

        if $z2 == 0 goto label6;

        $z2 = $r4 instanceof android.widget.ImageView;

        if $z2 != 0 goto label1;

        return;

     label1:
        $r6 = (com.google.android.material.circularreveal.CircularRevealWidget) $r5;

        $r7 = (android.widget.ImageView) $r4;

        $r8 = virtualinvoke $r7.<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>();

        if $r8 != null goto label2;

        return;

     label2:
        virtualinvoke $r8.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        if $z0 == 0 goto label4;

        if $z1 != 0 goto label3;

        virtualinvoke $r8.<android.graphics.drawable.Drawable: void setAlpha(int)>(255);

     label3:
        $r9 = <com.google.android.material.animation.DrawableAlphaProperty: android.util.Property DRAWABLE_ALPHA_COMPAT>;

        $r10 = newarray (int)[1];

        $r10[0] = 0;

        $r11 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])>($r8, $r9, $r10);

        goto label5;

     label4:
        $r9 = <com.google.android.material.animation.DrawableAlphaProperty: android.util.Property DRAWABLE_ALPHA_COMPAT>;

        $r10 = newarray (int)[1];

        $r10[0] = 255;

        $r11 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])>($r8, $r9, $r10);

     label5:
        $r12 = new com.google.android.material.transformation.FabTransformationBehavior$2;

        specialinvoke $r12.<com.google.android.material.transformation.FabTransformationBehavior$2: void <init>(com.google.android.material.transformation.FabTransformationBehavior,android.view.View)>(r0, $r5);

        virtualinvoke $r11.<android.animation.ObjectAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>($r12);

        $r13 = $r1.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.MotionSpec timings>;

        $r14 = virtualinvoke $r13.<com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionTiming getTiming(java.lang.String)>("iconFade");

        virtualinvoke $r14.<com.google.android.material.animation.MotionTiming: void apply(android.animation.Animator)>($r11);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r15 = new com.google.android.material.transformation.FabTransformationBehavior$3;

        specialinvoke $r15.<com.google.android.material.transformation.FabTransformationBehavior$3: void <init>(com.google.android.material.transformation.FabTransformationBehavior,com.google.android.material.circularreveal.CircularRevealWidget,android.graphics.drawable.Drawable)>(r0, $r6, $r8);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r15);

     label6:
        return;
    }

    private void createPostFillRadialExpansion(android.view.View, long, long, long, int, int, float, java.util.List)
    {
        long $l3, $l4, $l5;
        android.animation.Animator $r2;
        java.util.List $r1;
        byte $b6;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        int $i0, $i1, $i2;
        float $f0;
        android.view.View $r3;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r3 := @parameter0: android.view.View;

        $l3 := @parameter1: long;

        $l4 := @parameter2: long;

        $l5 := @parameter3: long;

        $i0 := @parameter4: int;

        $i1 := @parameter5: int;

        $f0 := @parameter6: float;

        $r1 := @parameter7: java.util.List;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 21 goto label1;

        $l3 = $l3 + $l4;

        $b6 = $l3 cmp $l5;

        $i2 = (int) $b6;

        if $i2 >= 0 goto label1;

        $r2 = staticinvoke <android.view.ViewAnimationUtils: android.animation.Animator createCircularReveal(android.view.View,int,int,float,float)>($r3, $i0, $i1, $f0, $f0);

        virtualinvoke $r2.<android.animation.Animator: void setStartDelay(long)>($l3);

        $l3 = $l5 - $l3;

        virtualinvoke $r2.<android.animation.Animator: android.animation.Animator setDuration(long)>($l3);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    private void createPreFillRadialExpansion(android.view.View, long, int, int, float, java.util.List)
    {
        long $l0;
        android.animation.Animator $r2;
        java.util.List $r1;
        byte $b3;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        int $i1, $i2, $i4;
        float $f0;
        android.view.View $r3;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r3 := @parameter0: android.view.View;

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $f0 := @parameter4: float;

        $r1 := @parameter5: java.util.List;

        $i4 = <android.os.Build$VERSION: int SDK_INT>;

        if $i4 < 21 goto label1;

        $b3 = $l0 cmp 0L;

        $i4 = (int) $b3;

        if $i4 <= 0 goto label1;

        $r2 = staticinvoke <android.view.ViewAnimationUtils: android.animation.Animator createCircularReveal(android.view.View,int,int,float,float)>($r3, $i1, $i2, $f0, $f0);

        virtualinvoke $r2.<android.animation.Animator: void setStartDelay(long)>(0L);

        virtualinvoke $r2.<android.animation.Animator: android.animation.Animator setDuration(long)>($l0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    private void createTranslationAnimation(android.view.View, android.view.View, boolean, boolean, com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec, java.util.List, java.util.List, android.graphics.RectF)
    {
        android.util.Pair $r8;
        float[] $r13;
        com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec $r3;
        android.util.Property $r12;
        android.view.View $r1, $r2;
        com.google.android.material.animation.MotionTiming $r10, $r11;
        boolean $z0, $z1;
        android.graphics.RectF $r6;
        android.animation.ObjectAnimator $r14, $r15;
        com.google.android.material.animation.Positioning $r7;
        java.util.List $r4, $r5;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        float $f0, $f1, $f2;
        java.lang.Object $r9;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.View;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r3 := @parameter4: com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec;

        $r4 := @parameter5: java.util.List;

        $r5 := @parameter6: java.util.List;

        $r6 := @parameter7: android.graphics.RectF;

        $r7 = $r3.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.Positioning positioning>;

        $f0 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: float calculateTranslationX(android.view.View,android.view.View,com.google.android.material.animation.Positioning)>($r1, $r2, $r7);

        $r7 = $r3.<com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec: com.google.android.material.animation.Positioning positioning>;

        $f1 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: float calculateTranslationY(android.view.View,android.view.View,com.google.android.material.animation.Positioning)>($r1, $r2, $r7);

        $r8 = specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: android.util.Pair calculateMotionTiming(float,float,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec)>($f0, $f1, $z0, $r3);

        $r9 = $r8.<android.util.Pair: java.lang.Object first>;

        $r10 = (com.google.android.material.animation.MotionTiming) $r9;

        $r9 = $r8.<android.util.Pair: java.lang.Object second>;

        $r11 = (com.google.android.material.animation.MotionTiming) $r9;

        if $z0 == 0 goto label2;

        if $z1 != 0 goto label1;

        $f2 = neg $f0;

        virtualinvoke $r2.<android.view.View: void setTranslationX(float)>($f2);

        $f2 = neg $f1;

        virtualinvoke $r2.<android.view.View: void setTranslationY(float)>($f2);

     label1:
        $r12 = <android.view.View: android.util.Property TRANSLATION_X>;

        $r13 = newarray (float)[1];

        $r13[0] = 0.0F;

        $r14 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r2, $r12, $r13);

        $r12 = <android.view.View: android.util.Property TRANSLATION_Y>;

        $r13 = newarray (float)[1];

        $r13[0] = 0.0F;

        $r15 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r2, $r12, $r13);

        $f0 = neg $f0;

        $f1 = neg $f1;

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void calculateChildVisibleBoundsAtEndOfExpansion(android.view.View,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,com.google.android.material.animation.MotionTiming,com.google.android.material.animation.MotionTiming,float,float,float,float,android.graphics.RectF)>($r2, $r3, $r10, $r11, $f0, $f1, 0.0F, 0.0F, $r6);

        goto label3;

     label2:
        $r12 = <android.view.View: android.util.Property TRANSLATION_X>;

        $r13 = newarray (float)[1];

        $f0 = neg $f0;

        $r13[0] = $f0;

        $r14 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r2, $r12, $r13);

        $r12 = <android.view.View: android.util.Property TRANSLATION_Y>;

        $r13 = newarray (float)[1];

        $f1 = neg $f1;

        $r13[0] = $f1;

        $r15 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r2, $r12, $r13);

     label3:
        virtualinvoke $r10.<com.google.android.material.animation.MotionTiming: void apply(android.animation.Animator)>($r14);

        virtualinvoke $r11.<com.google.android.material.animation.MotionTiming: void apply(android.animation.Animator)>($r15);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r14);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r15);

        return;
    }

    private int getBackgroundTint(android.view.View)
    {
        android.content.res.ColorStateList $r2;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        int[] $r3;
        int $i0;
        android.view.View $r1;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r1 := @parameter0: android.view.View;

        $r2 = staticinvoke <b.i.i.y: android.content.res.ColorStateList h(android.view.View)>($r1);

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r1.<android.view.View: int[] getDrawableState()>();

        $i0 = virtualinvoke $r2.<android.content.res.ColorStateList: int getDefaultColor()>();

        $i0 = virtualinvoke $r2.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r3, $i0);

        return $i0;

     label1:
        return 0;
    }

    private android.view.ViewGroup toViewGroupOrNull(android.view.View)
    {
        com.google.android.material.transformation.FabTransformationBehavior r0;
        android.view.View $r1;
        android.view.ViewGroup $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r1 := @parameter0: android.view.View;

        $z0 = $r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r2 = (android.view.ViewGroup) $r1;

        return $r2;

     label1:
        return null;
    }

    public boolean layoutDependsOn(androidx.coordinatorlayout.widget.CoordinatorLayout, android.view.View, android.view.View)
    {
        java.lang.IllegalStateException $r5;
        androidx.coordinatorlayout.widget.CoordinatorLayout $r1;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        com.google.android.material.floatingactionbutton.FloatingActionButton $r4;
        int $i0, $i1;
        android.view.View $r2, $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r1 := @parameter0: androidx.coordinatorlayout.widget.CoordinatorLayout;

        $r2 := @parameter1: android.view.View;

        $r3 := @parameter2: android.view.View;

        $i0 = virtualinvoke $r2.<android.view.View: int getVisibility()>();

        if $i0 == 8 goto label2;

        $z0 = $r3 instanceof com.google.android.material.floatingactionbutton.FloatingActionButton;

        if $z0 == 0 goto label3;

        $r4 = (com.google.android.material.floatingactionbutton.FloatingActionButton) $r3;

        $i0 = virtualinvoke $r4.<com.google.android.material.floatingactionbutton.FloatingActionButton: int getExpandedComponentIdHint()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke $r2.<android.view.View: int getId()>();

        if $i0 != $i1 goto label3;

     label1:
        return 1;

     label2:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This behavior cannot be attached to a GONE view. Set the view to INVISIBLE instead.");

        throw $r5;

     label3:
        return 0;
    }

    public void onAttachedToLayoutParams(androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams)
    {
        int $i0;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams $r1;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r1 := @parameter0: androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams;

        $i0 = $r1.<androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams: int dodgeInsetEdges>;

        if $i0 != 0 goto label1;

        $r1.<androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams: int dodgeInsetEdges> = 80;

     label1:
        return;
    }

    public android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View, android.view.View, boolean, boolean)
    {
        android.content.Context $r5;
        com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec $r6;
        java.util.ArrayList $r3, $r4;
        int $i0, $i1;
        com.google.android.material.transformation.FabTransformationBehavior$1 $r9;
        android.view.View $r1, $r2;
        android.animation.AnimatorSet $r8;
        boolean $z0, $z1;
        android.graphics.RectF $r7;
        com.google.android.material.transformation.FabTransformationBehavior r0;
        float $f0, $f1;
        android.animation.Animator$AnimatorListener $r11;
        java.lang.Object $r10;

        r0 := @this: com.google.android.material.transformation.FabTransformationBehavior;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.View;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r5 = virtualinvoke $r2.<android.view.View: android.content.Context getContext()>();

        $r6 = virtualinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec onCreateMotionSpec(android.content.Context,boolean)>($r5, $z0);

        if $z0 == 0 goto label1;

        $f0 = virtualinvoke $r1.<android.view.View: float getTranslationX()>();

        r0.<com.google.android.material.transformation.FabTransformationBehavior: float dependencyOriginalTranslationX> = $f0;

        $f0 = virtualinvoke $r1.<android.view.View: float getTranslationY()>();

        r0.<com.google.android.material.transformation.FabTransformationBehavior: float dependencyOriginalTranslationY> = $f0;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 21 goto label2;

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void createElevationAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List)>($r1, $r2, $z0, $z1, $r6, $r3, $r4);

     label2:
        $r7 = r0.<com.google.android.material.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void createTranslationAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List,android.graphics.RectF)>($r1, $r2, $z0, $z1, $r6, $r3, $r4, $r7);

        $f0 = virtualinvoke $r7.<android.graphics.RectF: float width()>();

        $f1 = virtualinvoke $r7.<android.graphics.RectF: float height()>();

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void createDependencyTranslationAnimation(android.view.View,android.view.View,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List)>($r1, $r2, $z0, $r6, $r3);

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void createIconFadeAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List)>($r1, $r2, $z0, $z1, $r6, $r3, $r4);

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List)>($r1, $r2, $z0, $z1, $r6, $f0, $f1, $r3, $r4);

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void createColorAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List)>($r1, $r2, $z0, $z1, $r6, $r3, $r4);

        specialinvoke r0.<com.google.android.material.transformation.FabTransformationBehavior: void createChildrenFadeAnimation(android.view.View,android.view.View,boolean,boolean,com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List)>($r1, $r2, $z0, $z1, $r6, $r3, $r4);

        $r8 = new android.animation.AnimatorSet;

        specialinvoke $r8.<android.animation.AnimatorSet: void <init>()>();

        staticinvoke <com.google.android.material.animation.AnimatorSetCompat: void playTogether(android.animation.AnimatorSet,java.util.List)>($r8, $r3);

        $r9 = new com.google.android.material.transformation.FabTransformationBehavior$1;

        specialinvoke $r9.<com.google.android.material.transformation.FabTransformationBehavior$1: void <init>(com.google.android.material.transformation.FabTransformationBehavior,boolean,android.view.View,android.view.View)>(r0, $z0, $r2, $r1);

        virtualinvoke $r8.<android.animation.AnimatorSet: void addListener(android.animation.Animator$AnimatorListener)>($r9);

        $i0 = 0;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

     label3:
        if $i0 >= $i1 goto label4;

        $r10 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i0);

        $r11 = (android.animation.Animator$AnimatorListener) $r10;

        virtualinvoke $r8.<android.animation.AnimatorSet: void addListener(android.animation.Animator$AnimatorListener)>($r11);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return $r8;
    }

    public abstract com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec onCreateMotionSpec(android.content.Context, boolean);
}
