public final class com.google.common.math.DoubleMath extends java.lang.Object
{
    public static final double LN_2;
    public static final int MAX_FACTORIAL;
    public static final double MAX_INT_AS_DOUBLE;
    public static final double MAX_LONG_AS_DOUBLE_PLUS_ONE;
    public static final double MIN_INT_AS_DOUBLE;
    public static final double MIN_LONG_AS_DOUBLE;
    public static final double[] everySixteenthFactorial;

    static void <clinit>()
    {
        double[] $r0;
        double $d0;

        <com.google.common.math.DoubleMath: double MIN_LONG_AS_DOUBLE> = -9.223372036854776E18;

        <com.google.common.math.DoubleMath: double MIN_INT_AS_DOUBLE> = -2.147483648E9;

        <com.google.common.math.DoubleMath: double MAX_LONG_AS_DOUBLE_PLUS_ONE> = 9.223372036854776E18;

        <com.google.common.math.DoubleMath: double MAX_INT_AS_DOUBLE> = 2.147483647E9;

        <com.google.common.math.DoubleMath: int MAX_FACTORIAL> = 170;

        <com.google.common.math.DoubleMath: double LN_2> = 0.0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        <com.google.common.math.DoubleMath: double LN_2> = $d0;

        $r0 = newarray (double)[11];

        $r0[0] = 1.0;

        $r0[1] = 2.0922789888E13;

        $r0[2] = 2.631308369336935E35;

        $r0[3] = 1.2413915592536073E61;

        $r0[4] = 1.2688693218588417E89;

        $r0[5] = 7.156945704626381E118;

        $r0[6] = 9.916779348709496E149;

        $r0[7] = 1.974506857221074E182;

        $r0[8] = 3.856204823625804E215;

        $r0[9] = 5.5502938327393044E249;

        $r0[10] = 4.7147236359920616E284;

        <com.google.common.math.DoubleMath: double[] everySixteenthFactorial> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.math.DoubleMath r0;

        r0 := @this: com.google.common.math.DoubleMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double checkFinite(double)
    {
        double $d0;
        boolean $z0;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        return $d0;
    }

    public static double factorial(int)
    {
        int $i0, $i1;
        double[] $r0;
        double $d0, $d1;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", $i0);

        if $i0 <= 170 goto label1;

        return #Infinity;

     label1:
        $d0 = 1.0;

        $i1 = -16;

        $i1 = $i0 & $i1;

     label2:
        $i1 = $i1 + 1;

        if $i1 > $i0 goto label3;

        $d1 = (double) $i1;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 * $d1;

        goto label2;

     label3:
        $r0 = <com.google.common.math.DoubleMath: double[] everySixteenthFactorial>;

        $i0 = $i0 >> 4;

        $d1 = $r0[$i0];

        $d0 = $d0 * $d1;

        return $d0;
    }

    public static int fuzzyCompare(double, double, double)
    {
        byte $b0;
        int $i1;
        double $d0, $d1, $d2;
        boolean $z0, $z1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d2 := @parameter2: double;

        $z0 = staticinvoke <com.google.common.math.DoubleMath: boolean fuzzyEquals(double,double,double)>($d1, $d0, $d2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $b0 = $d1 cmpg $d0;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label2;

        $i1 = -1;

        return $i1;

     label2:
        $b0 = $d1 cmpl $d0;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label3;

        return 1;

     label3:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $i1 = staticinvoke <com.google.common.primitives.Booleans: int compare(boolean,boolean)>($z0, $z1);

        return $i1;
    }

    public static boolean fuzzyEquals(double, double, double)
    {
        byte $b0;
        int $i1;
        double $d0, $d1, $d2, $d3;
        boolean $z0;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $d2 := @parameter2: double;

        staticinvoke <com.google.common.math.MathPreconditions: double checkNonNegative(java.lang.String,double)>("tolerance", $d2);

        $d3 = $d1 - $d0;

        $d3 = staticinvoke <java.lang.Math: double copySign(double,double)>($d3, 1.0);

        $b0 = $d3 cmpg $d2;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label2;

        $b0 = $d1 cmpl $d0;

        if $b0 == 0 goto label2;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static boolean isMathematicalInteger(double)
    {
        byte $b0;
        int $i2, $i3;
        long $l1;
        double $d0;
        boolean $z0;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label2;

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $l1 = staticinvoke <com.google.common.math.DoubleUtils: long getSignificand(double)>($d0);

        $i2 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l1);

        $i2 = 52 - $i2;

        $i3 = staticinvoke <java.lang.Math: int getExponent(double)>($d0);

        if $i2 > $i3 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isPowerOfTwo(double)
    {
        byte $b0;
        int $i3;
        long $l1, $l2;
        double $d0;
        boolean $z0;

        $d0 := @parameter0: double;

        $b0 = $d0 cmpl 0.0;

        $i3 = (int) $b0;

        if $i3 <= 0 goto label1;

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label1;

        $l1 = staticinvoke <com.google.common.math.DoubleUtils: long getSignificand(double)>($d0);

        $l2 = $l1 - 1L;

        $l1 = $l1 & $l2;

        $b0 = $l1 cmp 0L;

        if $b0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static double log2(double)
    {
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d0 = <com.google.common.math.DoubleMath: double LN_2>;

        $d0 = $d1 / $d0;

        return $d0;
    }

    public static int log2(double, java.math.RoundingMode)
    {
        java.lang.AssertionError $r2;
        byte $b0;
        int[] $r1;
        int $i1, $i2;
        double $d0;
        java.math.RoundingMode $r0;
        boolean $z0, $z1;

        $d0 := @parameter0: double;

        $r0 := @parameter1: java.math.RoundingMode;

        $z0 = 0;

        $b0 = $d0 cmpl 0.0;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label01;

        $z1 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d0);

        if $z1 == 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "x must be positive and finite");

        $i1 = staticinvoke <java.lang.Math: int getExponent(double)>($d0);

        $z1 = staticinvoke <com.google.common.math.DoubleUtils: boolean isNormal(double)>($d0);

        if $z1 != 0 goto label03;

        $d0 = $d0 * 4.503599627370496E15;

        $i1 = staticinvoke <com.google.common.math.DoubleMath: int log2(double,java.math.RoundingMode)>($d0, $r0);

        $i2 = -52;

        $i1 = $i1 + $i2;

        return $i1;

     label03:
        $r1 = <com.google.common.math.DoubleMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i2 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i2 = $r1[$i2];

        lookupswitch($i2)
        {
            case 1: goto label12;
            case 2: goto label13;
            case 3: goto label11;
            case 4: goto label08;
            case 5: goto label06;
            case 6: goto label05;
            case 7: goto label05;
            case 8: goto label05;
            default: goto label04;
        };

     label04:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label05:
        $d0 = staticinvoke <com.google.common.math.DoubleUtils: double scaleNormalize(double)>($d0);

        $d0 = $d0 * $d0;

        $b0 = $d0 cmpl 2.0;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label13;

        $z0 = 1;

        goto label13;

     label06:
        if $i1 < 0 goto label07;

        $z0 = 1;

     label07:
        $z1 = staticinvoke <com.google.common.math.DoubleMath: boolean isPowerOfTwo(double)>($d0);

        goto label10;

     label08:
        if $i1 >= 0 goto label09;

        $z0 = 1;

     label09:
        $z1 = staticinvoke <com.google.common.math.DoubleMath: boolean isPowerOfTwo(double)>($d0);

     label10:
        $z1 = $z1 ^ 1;

        $z0 = $z0 & $z1;

        goto label13;

     label11:
        $z0 = staticinvoke <com.google.common.math.DoubleMath: boolean isPowerOfTwo(double)>($d0);

        $z0 = $z0 ^ 1;

        goto label13;

     label12:
        $z1 = staticinvoke <com.google.common.math.DoubleMath: boolean isPowerOfTwo(double)>($d0);

        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z1);

     label13:
        if $z0 == 0 goto label14;

        $i1 = $i1 + 1;

     label14:
        return $i1;
    }

    public static double mean(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.lang.Iterable $r0;
        double $d0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $d0 = staticinvoke <com.google.common.math.DoubleMath: double mean(java.util.Iterator)>($r1);

        return $d0;
    }

    public static double mean(java.util.Iterator)
    {
        java.util.Iterator $r0;
        long $l0;
        java.lang.Object $r1;
        java.lang.Number $r2;
        double $d0, $d1, $d2;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Cannot take mean of 0 values");

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Number) $r1;

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        $d1 = $d0;

        staticinvoke <com.google.common.math.DoubleMath: double checkFinite(double)>($d0);

        $l0 = 1L;

     label1:
        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Number) $r1;

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        staticinvoke <com.google.common.math.DoubleMath: double checkFinite(double)>($d0);

        $l0 = $l0 + 1L;

        $d2 = $d0 - $d1;

        $d0 = (double) $l0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d2 / $d0;

        $d1 = $d1 + $d0;

        goto label1;

     label2:
        return $d1;
    }

    public static transient double mean(double[])
    {
        double[] $r0;
        long $l2;
        int $i0, $i1;
        double $d0, $d1, $d2;
        boolean $z0;

        $r0 := @parameter0: double[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Cannot take mean of 0 values");

        $d1 = $r0[0];

        staticinvoke <com.google.common.math.DoubleMath: double checkFinite(double)>($d1);

        $l2 = 1L;

     label3:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label4;

        $d0 = $r0[$i1];

        staticinvoke <com.google.common.math.DoubleMath: double checkFinite(double)>($d0);

        $l2 = $l2 + 1L;

        $d0 = $r0[$i1];

        $d2 = $d0 - $d1;

        $d0 = (double) $l2;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d2 / $d0;

        $d1 = $d1 + $d0;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return $d1;
    }

    public static transient double mean(int[])
    {
        long $l0, $l3;
        int[] $r0;
        int $i1, $i2;
        boolean $z0;
        double $d0, $d1;

        $r0 := @parameter0: int[];

        $i1 = lengthof $r0;

        $i2 = 0;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Cannot take mean of 0 values");

        $l3 = 0L;

     label3:
        $i1 = lengthof $r0;

        if $i2 >= $i1 goto label4;

        $i1 = $r0[$i2];

        $l0 = (long) $i1;

        $l3 = $l3 + $l0;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $d0 = (double) $l3;

        $i2 = lengthof $r0;

        $d1 = (double) $i2;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 / $d1;

        return $d0;
    }

    public static transient double mean(long[])
    {
        long $l2, $l3;
        long[] $r0;
        int $i0, $i1;
        double $d0, $d1, $d2;
        boolean $z0;

        $r0 := @parameter0: long[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Cannot take mean of 0 values");

        $l2 = $r0[0];

        $d1 = (double) $l2;

        $l2 = 1L;

     label3:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label4;

        $l2 = $l2 + 1L;

        $l3 = $r0[$i1];

        $d0 = (double) $l3;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d2 = $d0 - $d1;

        $d0 = (double) $l2;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d2 / $d0;

        $d1 = $d1 + $d0;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return $d1;
    }

    public static double roundIntermediate(double, java.math.RoundingMode)
    {
        long $l2, $l3;
        java.lang.AssertionError $r2;
        byte $b1;
        int[] $r1;
        int $i0;
        java.lang.ArithmeticException $r3;
        double $d0, $d1, $d2;
        java.math.RoundingMode $r0;
        boolean $z0;

        $d0 := @parameter0: double;

        $r0 := @parameter1: java.math.RoundingMode;

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>($d0);

        if $z0 == 0 goto label17;

        $r1 = <com.google.common.math.DoubleMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i0 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label16;
            case 2: goto label14;
            case 3: goto label12;
            case 4: goto label11;
            case 5: goto label07;
            case 6: goto label06;
            case 7: goto label04;
            case 8: goto label02;
            default: goto label01;
        };

     label01:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label02:
        $d1 = staticinvoke <java.lang.Math: double rint(double)>($d0);

        $d2 = $d0 - $d1;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b1 = $d2 cmpl 0.5;

        if $b1 != 0 goto label03;

        return $d0;

     label03:
        return $d1;

     label04:
        $d1 = staticinvoke <java.lang.Math: double rint(double)>($d0);

        $d2 = $d0 - $d1;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b1 = $d2 cmpl 0.5;

        if $b1 != 0 goto label05;

        $d1 = staticinvoke <java.lang.Math: double copySign(double,double)>(0.5, $d0);

        $d0 = $d0 + $d1;

        return $d0;

     label05:
        return $d1;

     label06:
        $d0 = staticinvoke <java.lang.Math: double rint(double)>($d0);

        return $d0;

     label07:
        $z0 = staticinvoke <com.google.common.math.DoubleMath: boolean isMathematicalInteger(double)>($d0);

        if $z0 == 0 goto label08;

        return $d0;

     label08:
        $l2 = (long) $d0;

        $b1 = $d0 cmpl 0.0;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label09;

        $b1 = 1;

        goto label10;

     label09:
        $b1 = -1;

     label10:
        $l3 = (long) $b1;

        $l2 = $l2 + $l3;

        $d0 = (double) $l2;

     label11:
        return $d0;

     label12:
        $b1 = $d0 cmpg 0.0;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label18;

        $z0 = staticinvoke <com.google.common.math.DoubleMath: boolean isMathematicalInteger(double)>($d0);

        if $z0 == 0 goto label13;

        return $d0;

     label13:
        $l2 = (long) $d0;

        $l2 = $l2 + 1L;

        $d0 = (double) $l2;

        return $d0;

     label14:
        $b1 = $d0 cmpl 0.0;

        $i0 = (int) $b1;

        if $i0 >= 0 goto label18;

        $z0 = staticinvoke <com.google.common.math.DoubleMath: boolean isMathematicalInteger(double)>($d0);

        if $z0 == 0 goto label15;

        return $d0;

     label15:
        $l2 = (long) $d0;

        $l2 = $l2 - 1L;

        $d0 = (double) $l2;

        return $d0;

     label16:
        $z0 = staticinvoke <com.google.common.math.DoubleMath: boolean isMathematicalInteger(double)>($d0);

        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

        return $d0;

     label17:
        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("input is infinite or NaN");

        throw $r3;

     label18:
        return $d0;
    }

    public static java.math.BigInteger roundToBigInteger(double, java.math.RoundingMode)
    {
        long $l1;
        byte $b0;
        int $i2, $i3;
        java.math.BigInteger $r1;
        double $d0, $d1;
        java.math.RoundingMode $r0;
        boolean $z0, $z1;

        $d0 := @parameter0: double;

        $r0 := @parameter1: java.math.RoundingMode;

        $d0 = staticinvoke <com.google.common.math.DoubleMath: double roundIntermediate(double,java.math.RoundingMode)>($d0, $r0);

        $d1 = -9.223372036854776E18 - $d0;

        $z0 = 1;

        $b0 = $d1 cmpg 1.0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $b0 = $d0 cmpg 9.223372036854776E18;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z0 & $z1;

        if $z0 == 0 goto label5;

        $l1 = (long) $d0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        return $r1;

     label5:
        $i2 = staticinvoke <java.lang.Math: int getExponent(double)>($d0);

        $l1 = staticinvoke <com.google.common.math.DoubleUtils: long getSignificand(double)>($d0);

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        $i3 = -52;

        $i2 = $i2 + $i3;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i2);

        $b0 = $d0 cmpg 0.0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label6;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger negate()>();

     label6:
        return $r1;
    }

    public static int roundToInt(double, java.math.RoundingMode)
    {
        byte $b0;
        int $i1;
        double $d0;
        java.math.RoundingMode $r0;
        boolean $z0, $z1;

        $d0 := @parameter0: double;

        $r0 := @parameter1: java.math.RoundingMode;

        $d0 = staticinvoke <com.google.common.math.DoubleMath: double roundIntermediate(double,java.math.RoundingMode)>($d0, $r0);

        $z0 = 1;

        $b0 = $d0 cmpl -2.147483649E9;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $b0 = $d0 cmpg 2.147483648E9;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z0 & $z1;

        staticinvoke <com.google.common.math.MathPreconditions: void checkInRange(boolean)>($z0);

        $i1 = (int) $d0;

        return $i1;
    }

    public static long roundToLong(double, java.math.RoundingMode)
    {
        long $l1;
        byte $b0;
        int $i2;
        double $d0, $d1;
        java.math.RoundingMode $r0;
        boolean $z0, $z1;

        $d0 := @parameter0: double;

        $r0 := @parameter1: java.math.RoundingMode;

        $d0 = staticinvoke <com.google.common.math.DoubleMath: double roundIntermediate(double,java.math.RoundingMode)>($d0, $r0);

        $d1 = -9.223372036854776E18 - $d0;

        $z0 = 1;

        $b0 = $d1 cmpg 1.0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $b0 = $d0 cmpg 9.223372036854776E18;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $z0 = $z0 & $z1;

        staticinvoke <com.google.common.math.MathPreconditions: void checkInRange(boolean)>($z0);

        $l1 = (long) $d0;

        return $l1;
    }
}
