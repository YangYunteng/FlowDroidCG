public final class com.google.common.util.concurrent.MoreExecutors extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.util.concurrent.MoreExecutors r0;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void access$000(java.util.concurrent.ThreadPoolExecutor)
    {
        java.util.concurrent.ThreadPoolExecutor $r0;

        $r0 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        staticinvoke <com.google.common.util.concurrent.MoreExecutors: void useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor)>($r0);

        return;
    }

    public static void addDelayedShutdownHook(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        com.google.common.util.concurrent.MoreExecutors$Application $r2;
        long $l0;
        java.util.concurrent.ExecutorService $r0;

        $r0 := @parameter0: java.util.concurrent.ExecutorService;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $r2 = new com.google.common.util.concurrent.MoreExecutors$Application;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$Application: void <init>()>();

        virtualinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$Application: void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)>($r0, $l0, $r1);

        return;
    }

    public static java.util.concurrent.Executor directExecutor()
    {
        com.google.common.util.concurrent.MoreExecutors$DirectExecutor r0;

        r0 = <com.google.common.util.concurrent.MoreExecutors$DirectExecutor: com.google.common.util.concurrent.MoreExecutors$DirectExecutor INSTANCE>;

        return r0;
    }

    public static java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)
    {
        com.google.common.util.concurrent.MoreExecutors$Application $r0;
        java.util.concurrent.ThreadPoolExecutor $r2;
        java.util.concurrent.ExecutorService $r1;

        $r2 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        $r0 = new com.google.common.util.concurrent.MoreExecutors$Application;

        specialinvoke $r0.<com.google.common.util.concurrent.MoreExecutors$Application: void <init>()>();

        $r1 = virtualinvoke $r0.<com.google.common.util.concurrent.MoreExecutors$Application: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)>($r2);

        return $r1;
    }

    public static java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r0;
        com.google.common.util.concurrent.MoreExecutors$Application $r1;
        java.util.concurrent.ThreadPoolExecutor $r3;
        long $l0;
        java.util.concurrent.ExecutorService $r2;

        $r3 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        $l0 := @parameter1: long;

        $r0 := @parameter2: java.util.concurrent.TimeUnit;

        $r1 = new com.google.common.util.concurrent.MoreExecutors$Application;

        specialinvoke $r1.<com.google.common.util.concurrent.MoreExecutors$Application: void <init>()>();

        $r2 = virtualinvoke $r1.<com.google.common.util.concurrent.MoreExecutors$Application: java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)>($r3, $l0, $r0);

        return $r2;
    }

    public static java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)
    {
        java.util.concurrent.ScheduledExecutorService $r1;
        com.google.common.util.concurrent.MoreExecutors$Application $r0;
        java.util.concurrent.ScheduledThreadPoolExecutor $r2;

        $r2 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor;

        $r0 = new com.google.common.util.concurrent.MoreExecutors$Application;

        specialinvoke $r0.<com.google.common.util.concurrent.MoreExecutors$Application: void <init>()>();

        $r1 = virtualinvoke $r0.<com.google.common.util.concurrent.MoreExecutors$Application: java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)>($r2);

        return $r1;
    }

    public static java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r0;
        com.google.common.util.concurrent.MoreExecutors$Application $r1;
        java.util.concurrent.ScheduledExecutorService $r2;
        long $l0;
        java.util.concurrent.ScheduledThreadPoolExecutor $r3;

        $r3 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor;

        $l0 := @parameter1: long;

        $r0 := @parameter2: java.util.concurrent.TimeUnit;

        $r1 = new com.google.common.util.concurrent.MoreExecutors$Application;

        specialinvoke $r1.<com.google.common.util.concurrent.MoreExecutors$Application: void <init>()>();

        $r2 = virtualinvoke $r1.<com.google.common.util.concurrent.MoreExecutors$Application: java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)>($r3, $l0, $r0);

        return $r2;
    }

    public static java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService, java.util.Collection, boolean, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Throwable $r5;
        com.google.common.util.concurrent.ListenableFuture $r9;
        java.util.concurrent.TimeoutException $r12, $r16;
        long $l0, $l2, $l4, $l5;
        java.util.concurrent.Callable $r8;
        java.util.ArrayList $r3;
        java.util.concurrent.Future $r11;
        int $i1, $i3, $i6;
        boolean $z0, $z1;
        java.util.Iterator $r6;
        java.util.Collection $r1;
        java.lang.RuntimeException $r14;
        java.util.concurrent.LinkedBlockingQueue $r4;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.ExecutionException $r10, $r15;
        java.lang.Object $r7, $r13;
        com.google.common.util.concurrent.ListeningExecutorService $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ListeningExecutorService;

        $r1 := @parameter1: java.util.Collection;

        $z0 := @parameter2: boolean;

        $l0 := @parameter3: long;

        $r2 := @parameter4: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $i1 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        if $i1 <= 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        $r3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i1);

        $r4 = staticinvoke <com.google.common.collect.Queues: java.util.concurrent.LinkedBlockingQueue newLinkedBlockingQueue()>();

        $l2 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        if $z0 == 0 goto label06;

     label03:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        goto label07;

     label05:
        $r5 := @caughtexception;

        goto label40;

     label06:
        $l0 = 0L;

     label07:
        $r6 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.concurrent.Callable) $r7;

        $r9 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>($r0, $r8, $r4);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

     label08:
        $i3 = -1;

        $i3 = $i1 + $i3;

        $r10 = null;

        $i1 = 1;

     label09:
        $r7 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>();

        $r11 = (java.util.concurrent.Future) $r7;

     label10:
        if $r11 != null goto label27;

        if $i3 <= 0 goto label13;

        $i6 = -1;

        $i3 = $i3 + $i6;

     label11:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.concurrent.Callable) $r7;

        $r9 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)>($r0, $r8, $r4);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

     label12:
        $i1 = $i1 + 1;

        goto label27;

     label13:
        if $i1 != 0 goto label18;

        if $r10 != null goto label17;

     label14:
        $r15 = new java.util.concurrent.ExecutionException;

     label15:
        $r10 = $r15;

     label16:
        specialinvoke $r15.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>(null);

     label17:
        throw $r10;

     label18:
        if $z0 == 0 goto label26;

     label19:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r7 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>($l2, $r2);

        $r11 = (java.util.concurrent.Future) $r7;

     label20:
        if $r11 == null goto label23;

     label21:
        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

     label22:
        $l5 = $l4;

        $l0 = $l4 - $l0;

        $l2 = $l2 - $l0;

        goto label28;

     label23:
        $r16 = new java.util.concurrent.TimeoutException;

     label24:
        $r12 = $r16;

     label25:
        specialinvoke $r16.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r12;

     label26:
        $r7 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();

        $r11 = (java.util.concurrent.Future) $r7;

     label27:
        $l5 = $l0;

     label28:
        if $r11 == null goto label39;

        $i6 = -1;

        $i1 = $i1 + $i6;

     label29:
        $r7 = interfaceinvoke $r11.<java.util.concurrent.Future: java.lang.Object get()>();

     label30:
        $r6 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label31:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label32;

        $r13 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.util.concurrent.Future) $r13;

        interfaceinvoke $r11.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        goto label31;

     label32:
        return $r7;

     label33:
        $r14 := @caughtexception;

     label34:
        $r15 = new java.util.concurrent.ExecutionException;

     label35:
        $r10 = $r15;

     label36:
        specialinvoke $r15.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r14);

     label37:
        goto label39;

     label38:
        $r10 := @caughtexception;

     label39:
        $l0 = $l5;

        goto label09;

     label40:
        $r6 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label41:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label42;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.util.concurrent.Future) $r7;

        interfaceinvoke $r11.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        goto label41;

     label42:
        goto label43;

     label43:
        throw $r5;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label11 to label12 with label05;
        catch java.lang.Throwable from label14 to label15 with label05;
        catch java.lang.Throwable from label16 to label18 with label05;
        catch java.lang.Throwable from label19 to label20 with label05;
        catch java.lang.Throwable from label21 to label22 with label05;
        catch java.lang.Throwable from label23 to label24 with label05;
        catch java.lang.Throwable from label25 to label27 with label05;
        catch java.util.concurrent.ExecutionException from label29 to label30 with label38;
        catch java.lang.RuntimeException from label29 to label30 with label33;
        catch java.lang.Throwable from label29 to label30 with label05;
        catch java.lang.Throwable from label34 to label35 with label05;
        catch java.lang.Throwable from label36 to label37 with label05;
    }

    public static boolean isAppEngine()
    {
        java.lang.IllegalAccessException $r2;
        java.lang.Object[] $r8;
        java.lang.NoSuchMethodException $r3;
        java.lang.Class[] $r6;
        java.lang.reflect.InvocationTargetException $r1;
        java.lang.ClassNotFoundException $r0;
        java.lang.Class $r5;
        java.lang.Object $r9;
        java.lang.String $r4;
        java.lang.reflect.Method $r7;

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("com.google.appengine.runtime.environment");

        if $r4 != null goto label01;

        return 0;

     label01:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.google.apphosting.api.ApiProxy");

     label02:
        $r6 = newarray (java.lang.Class)[0];

     label03:
        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getCurrentEnvironment", $r6);

     label04:
        $r8 = newarray (java.lang.Object)[0];

     label05:
        $r9 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

     label06:
        if $r9 == null goto label11;

        return 1;

     label07:
        $r0 := @caughtexception;

        return 0;

     label08:
        $r1 := @caughtexception;

        return 0;

     label09:
        $r2 := @caughtexception;

        return 0;

     label10:
        $r3 := @caughtexception;

     label11:
        return 0;

        catch java.lang.ClassNotFoundException from label01 to label02 with label07;
        catch java.lang.ClassNotFoundException from label03 to label04 with label07;
        catch java.lang.ClassNotFoundException from label05 to label06 with label07;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label08;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label08;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label08;
        catch java.lang.IllegalAccessException from label01 to label02 with label09;
        catch java.lang.IllegalAccessException from label03 to label04 with label09;
        catch java.lang.IllegalAccessException from label05 to label06 with label09;
        catch java.lang.NoSuchMethodException from label01 to label02 with label10;
        catch java.lang.NoSuchMethodException from label03 to label04 with label10;
        catch java.lang.NoSuchMethodException from label05 to label06 with label10;
    }

    public static com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)
    {
        java.util.concurrent.ScheduledExecutorService $r3;
        com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator $r2;
        com.google.common.util.concurrent.MoreExecutors$ListeningDecorator $r4;
        java.util.concurrent.ExecutorService $r0;
        boolean $z0;
        com.google.common.util.concurrent.ListeningExecutorService $r1;

        $r0 := @parameter0: java.util.concurrent.ExecutorService;

        $z0 = $r0 instanceof com.google.common.util.concurrent.ListeningExecutorService;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.util.concurrent.ListeningExecutorService) $r0;

        return $r1;

     label1:
        $z0 = $r0 instanceof java.util.concurrent.ScheduledExecutorService;

        if $z0 == 0 goto label2;

        $r2 = new com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator;

        $r3 = (java.util.concurrent.ScheduledExecutorService) $r0;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator: void <init>(java.util.concurrent.ScheduledExecutorService)>($r3);

        return $r2;

     label2:
        $r4 = new com.google.common.util.concurrent.MoreExecutors$ListeningDecorator;

        specialinvoke $r4.<com.google.common.util.concurrent.MoreExecutors$ListeningDecorator: void <init>(java.util.concurrent.ExecutorService)>($r0);

        return $r4;
    }

    public static com.google.common.util.concurrent.ListeningScheduledExecutorService listeningDecorator(java.util.concurrent.ScheduledExecutorService)
    {
        java.util.concurrent.ScheduledExecutorService $r0;
        com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator $r2;
        com.google.common.util.concurrent.ListeningScheduledExecutorService $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.concurrent.ScheduledExecutorService;

        $z0 = $r0 instanceof com.google.common.util.concurrent.ListeningScheduledExecutorService;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.util.concurrent.ListeningScheduledExecutorService) $r0;

        return $r1;

     label1:
        $r2 = new com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator: void <init>(java.util.concurrent.ScheduledExecutorService)>($r0);

        return $r2;
    }

    public static com.google.common.util.concurrent.ListeningExecutorService newDirectExecutorService()
    {
        com.google.common.util.concurrent.MoreExecutors$DirectExecutorService $r0;

        $r0 = new com.google.common.util.concurrent.MoreExecutors$DirectExecutorService;

        specialinvoke $r0.<com.google.common.util.concurrent.MoreExecutors$DirectExecutorService: void <init>(com.google.common.util.concurrent.MoreExecutors$1)>(null);

        return $r0;
    }

    public static java.util.concurrent.Executor newSequentialExecutor(java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.SequentialExecutor $r1;
        java.util.concurrent.Executor $r0;

        $r0 := @parameter0: java.util.concurrent.Executor;

        $r1 = new com.google.common.util.concurrent.SequentialExecutor;

        specialinvoke $r1.<com.google.common.util.concurrent.SequentialExecutor: void <init>(java.util.concurrent.Executor)>($r0);

        return $r1;
    }

    public static java.lang.Thread newThread(java.lang.String, java.lang.Runnable)
    {
        java.lang.Thread $r4;
        java.lang.SecurityException $r1;
        java.lang.String $r0;
        java.util.concurrent.ThreadFactory $r3;
        java.lang.Runnable $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Runnable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ThreadFactory platformThreadFactory()>();

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>($r2);

     label1:
        virtualinvoke $r4.<java.lang.Thread: void setName(java.lang.String)>($r0);

     label2:
        return $r4;

     label3:
        $r1 := @caughtexception;

        return $r4;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public static java.util.concurrent.ThreadFactory platformThreadFactory()
    {
        java.lang.Throwable $r7;
        java.lang.Object[] $r4;
        java.lang.Class[] $r0;
        java.lang.ReflectiveOperationException $r8;
        java.lang.RuntimeException $r9;
        java.lang.NullPointerException r10;
        java.lang.reflect.InvocationTargetException $r6;
        java.lang.Class $r2;
        java.lang.Object $r5;
        java.util.concurrent.ThreadFactory $r1;
        java.lang.reflect.Method $r3;
        boolean $z0;

        $z0 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: boolean isAppEngine()>();

        if $z0 != 0 goto label01;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        return $r1;

     label01:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.google.appengine.api.ThreadManager");

     label02:
        $r0 = newarray (java.lang.Class)[0];

     label03:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("currentRequestThreadFactory", $r0);

     label04:
        $r4 = newarray (java.lang.Object)[0];

     label05:
        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label06:
        $r1 = (java.util.concurrent.ThreadFactory) $r5;

        return $r1;

     label07:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>($r7);

        r10 = new java.lang.NullPointerException;

        specialinvoke r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r10;

     label08:
        $r8 := @caughtexception;

        goto label11;

     label09:
        $r8 := @caughtexception;

        goto label11;

     label10:
        $r8 := @caughtexception;

     label11:
        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t invoke ThreadManager.currentRequestThreadFactory", $r8);

        throw $r9;

        catch java.lang.IllegalAccessException from label01 to label02 with label10;
        catch java.lang.IllegalAccessException from label03 to label04 with label10;
        catch java.lang.IllegalAccessException from label05 to label06 with label10;
        catch java.lang.ClassNotFoundException from label01 to label02 with label09;
        catch java.lang.ClassNotFoundException from label03 to label04 with label09;
        catch java.lang.ClassNotFoundException from label05 to label06 with label09;
        catch java.lang.NoSuchMethodException from label01 to label02 with label08;
        catch java.lang.NoSuchMethodException from label03 to label04 with label08;
        catch java.lang.NoSuchMethodException from label05 to label06 with label08;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label07;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label07;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label07;
    }

    public static java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor, com.google.common.util.concurrent.AbstractFuture)
    {
        java.util.concurrent.Executor $r0, $r2;
        com.google.common.util.concurrent.MoreExecutors$5 $r3;
        com.google.common.util.concurrent.AbstractFuture $r1;

        $r0 := @parameter0: java.util.concurrent.Executor;

        $r1 := @parameter1: com.google.common.util.concurrent.AbstractFuture;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        if $r0 != $r2 goto label1;

        return $r0;

     label1:
        $r3 = new com.google.common.util.concurrent.MoreExecutors$5;

        specialinvoke $r3.<com.google.common.util.concurrent.MoreExecutors$5: void <init>(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)>($r0, $r1);

        return $r3;
    }

    public static java.util.concurrent.Executor renamingDecorator(java.util.concurrent.Executor, com.google.common.base.Supplier)
    {
        com.google.common.util.concurrent.MoreExecutors$2 $r2;
        java.util.concurrent.Executor $r0;
        com.google.common.base.Supplier $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.concurrent.Executor;

        $r1 := @parameter1: com.google.common.base.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: boolean isAppEngine()>();

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r2 = new com.google.common.util.concurrent.MoreExecutors$2;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$2: void <init>(java.util.concurrent.Executor,com.google.common.base.Supplier)>($r0, $r1);

        return $r2;
    }

    public static java.util.concurrent.ExecutorService renamingDecorator(java.util.concurrent.ExecutorService, com.google.common.base.Supplier)
    {
        com.google.common.util.concurrent.MoreExecutors$3 $r2;
        com.google.common.base.Supplier $r1;
        java.util.concurrent.ExecutorService $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.concurrent.ExecutorService;

        $r1 := @parameter1: com.google.common.base.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: boolean isAppEngine()>();

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r2 = new com.google.common.util.concurrent.MoreExecutors$3;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$3: void <init>(java.util.concurrent.ExecutorService,com.google.common.base.Supplier)>($r0, $r1);

        return $r2;
    }

    public static java.util.concurrent.ScheduledExecutorService renamingDecorator(java.util.concurrent.ScheduledExecutorService, com.google.common.base.Supplier)
    {
        com.google.common.util.concurrent.MoreExecutors$4 $r2;
        java.util.concurrent.ScheduledExecutorService $r0;
        com.google.common.base.Supplier $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.concurrent.ScheduledExecutorService;

        $r1 := @parameter1: com.google.common.base.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: boolean isAppEngine()>();

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r2 = new com.google.common.util.concurrent.MoreExecutors$4;

        specialinvoke $r2.<com.google.common.util.concurrent.MoreExecutors$4: void <init>(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier)>($r0, $r1);

        return $r2;
    }

    public static java.util.concurrent.Executor sequentialExecutor(java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.SequentialExecutor $r1;
        java.util.concurrent.Executor $r0;

        $r0 := @parameter0: java.util.concurrent.Executor;

        $r1 = new com.google.common.util.concurrent.SequentialExecutor;

        specialinvoke $r1.<com.google.common.util.concurrent.SequentialExecutor: void <init>(java.util.concurrent.Executor)>($r0);

        return $r1;
    }

    public static boolean shutdownAndAwaitTermination(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r2;
        java.lang.InterruptedException $r0;
        java.lang.Thread $r3;
        long $l0;
        java.util.concurrent.ExecutorService $r1;
        boolean $z0;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        $l0 := @parameter1: long;

        $r2 := @parameter2: java.util.concurrent.TimeUnit;

        $l0 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        $l0 = $l0 / 2L;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>();

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l0, $r2);

     label2:
        if $z0 != 0 goto label8;

     label3:
        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label4:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

     label5:
        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l0, $r2);

     label6:
        goto label8;

     label7:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label8:
        $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isTerminated()>();

        return $z0;

     label9:
        $r0 := @caughtexception;

        goto label7;

        catch java.lang.InterruptedException from label1 to label2 with label9;
        catch java.lang.InterruptedException from label3 to label4 with label9;
        catch java.lang.InterruptedException from label5 to label6 with label9;
    }

    public static com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService, java.util.concurrent.Callable, java.util.concurrent.BlockingQueue)
    {
        com.google.common.util.concurrent.MoreExecutors$1 $r4;
        com.google.common.util.concurrent.ListenableFuture $r3;
        java.util.concurrent.Executor $r5;
        java.util.concurrent.Callable $r1;
        java.util.concurrent.BlockingQueue $r2;
        com.google.common.util.concurrent.ListeningExecutorService $r0;

        $r0 := @parameter0: com.google.common.util.concurrent.ListeningExecutorService;

        $r1 := @parameter1: java.util.concurrent.Callable;

        $r2 := @parameter2: java.util.concurrent.BlockingQueue;

        $r3 = interfaceinvoke $r0.<com.google.common.util.concurrent.ListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>($r1);

        $r4 = new com.google.common.util.concurrent.MoreExecutors$1;

        specialinvoke $r4.<com.google.common.util.concurrent.MoreExecutors$1: void <init>(java.util.concurrent.BlockingQueue,com.google.common.util.concurrent.ListenableFuture)>($r2, $r3);

        $r5 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r3.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r4, $r5);

        return $r3;
    }

    public static void useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder $r1;
        java.util.concurrent.ThreadFactory $r2;
        java.util.concurrent.ThreadPoolExecutor $r0;

        $r0 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        $r1 = new com.google.common.util.concurrent.ThreadFactoryBuilder;

        specialinvoke $r1.<com.google.common.util.concurrent.ThreadFactoryBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)>(1);

        $r2 = virtualinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()>();

        $r1 = virtualinvoke $r1.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setThreadFactory(java.util.concurrent.ThreadFactory)>($r2);

        $r2 = virtualinvoke $r1.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>();

        virtualinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>($r2);

        return;
    }
}
