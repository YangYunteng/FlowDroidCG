public final class com.google.protobuf.Utf8 extends java.lang.Object
{
    public static final long ASCII_MASK_LONG;
    public static final int COMPLETE;
    public static final int MALFORMED;
    public static final int MAX_BYTES_PER_CHAR;
    public static final int UNSAFE_COUNT_ASCII_THRESHOLD;
    public static final com.google.protobuf.Utf8$Processor processor;

    static void <clinit>()
    {
        com.google.protobuf.Utf8$Processor $r0;
        com.google.protobuf.Utf8$SafeProcessor $r2;
        com.google.protobuf.Utf8$UnsafeProcessor $r1;
        boolean $z0;

        <com.google.protobuf.Utf8: int UNSAFE_COUNT_ASCII_THRESHOLD> = 16;

        <com.google.protobuf.Utf8: int MAX_BYTES_PER_CHAR> = 3;

        <com.google.protobuf.Utf8: int MALFORMED> = -1;

        <com.google.protobuf.Utf8: int COMPLETE> = 0;

        <com.google.protobuf.Utf8: long ASCII_MASK_LONG> = -9187201950435737472L;

        $z0 = staticinvoke <com.google.protobuf.Utf8$UnsafeProcessor: boolean isAvailable()>();

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <com.google.protobuf.Android: boolean isOnAndroidDevice()>();

        if $z0 != 0 goto label1;

        $r1 = new com.google.protobuf.Utf8$UnsafeProcessor;

        $r0 = $r1;

        specialinvoke $r1.<com.google.protobuf.Utf8$UnsafeProcessor: void <init>()>();

        goto label2;

     label1:
        $r2 = new com.google.protobuf.Utf8$SafeProcessor;

        $r0 = $r2;

        specialinvoke $r2.<com.google.protobuf.Utf8$SafeProcessor: void <init>()>();

     label2:
        <com.google.protobuf.Utf8: com.google.protobuf.Utf8$Processor processor> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.protobuf.Utf8 r0;

        r0 := @this: com.google.protobuf.Utf8;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int access$000(int, int)
    {
        int $i0, $i1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = staticinvoke <com.google.protobuf.Utf8: int incompleteStateFor(int,int)>($i1, $i0);

        return $i1;
    }

    public static int access$100(int, int, int)
    {
        int $i0, $i1, $i2;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = staticinvoke <com.google.protobuf.Utf8: int incompleteStateFor(int,int,int)>($i2, $i0, $i1);

        return $i2;
    }

    public static int access$1100(byte[], int, int)
    {
        int $i0, $i1;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i0 = staticinvoke <com.google.protobuf.Utf8: int incompleteStateFor(byte[],int,int)>($r0, $i0, $i1);

        return $i0;
    }

    public static int access$1200(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <com.google.protobuf.Utf8: int incompleteStateFor(int)>($i0);

        return $i0;
    }

    public static int access$200(java.nio.ByteBuffer, int, int)
    {
        int $i0, $i1;
        java.nio.ByteBuffer $r0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i0 = staticinvoke <com.google.protobuf.Utf8: int estimateConsecutiveAscii(java.nio.ByteBuffer,int,int)>($r0, $i0, $i1);

        return $i0;
    }

    public static int access$300(java.nio.ByteBuffer, int, int, int)
    {
        int $i0, $i1, $i2;
        java.nio.ByteBuffer $r0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i0 = staticinvoke <com.google.protobuf.Utf8: int incompleteStateFor(java.nio.ByteBuffer,int,int,int)>($r0, $i0, $i1, $i2);

        return $i0;
    }

    public static java.lang.String decodeUtf8(java.nio.ByteBuffer, int, int)
    {
        com.google.protobuf.Utf8$Processor $r0;
        int $i0, $i1;
        java.lang.String $r1;
        java.nio.ByteBuffer $r2;

        $r2 := @parameter0: java.nio.ByteBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 = <com.google.protobuf.Utf8: com.google.protobuf.Utf8$Processor processor>;

        $r1 = virtualinvoke $r0.<com.google.protobuf.Utf8$Processor: java.lang.String decodeUtf8(java.nio.ByteBuffer,int,int)>($r2, $i0, $i1);

        return $r1;
    }

    public static java.lang.String decodeUtf8(byte[], int, int)
    {
        com.google.protobuf.Utf8$Processor $r0;
        byte[] $r2;
        int $i0, $i1;
        java.lang.String $r1;

        $r2 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 = <com.google.protobuf.Utf8: com.google.protobuf.Utf8$Processor processor>;

        $r1 = virtualinvoke $r0.<com.google.protobuf.Utf8$Processor: java.lang.String decodeUtf8(byte[],int,int)>($r2, $i0, $i1);

        return $r1;
    }

    public static int encode(java.lang.CharSequence, byte[], int, int)
    {
        com.google.protobuf.Utf8$Processor $r1;
        byte[] $r0;
        java.lang.CharSequence $r2;
        int $i0, $i1;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 = <com.google.protobuf.Utf8: com.google.protobuf.Utf8$Processor processor>;

        $i0 = virtualinvoke $r1.<com.google.protobuf.Utf8$Processor: int encodeUtf8(java.lang.CharSequence,byte[],int,int)>($r2, $r0, $i0, $i1);

        return $i0;
    }

    public static void encodeUtf8(java.lang.CharSequence, java.nio.ByteBuffer)
    {
        com.google.protobuf.Utf8$Processor $r2;
        java.lang.CharSequence $r0;
        java.nio.ByteBuffer $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.nio.ByteBuffer;

        $r2 = <com.google.protobuf.Utf8: com.google.protobuf.Utf8$Processor processor>;

        virtualinvoke $r2.<com.google.protobuf.Utf8$Processor: void encodeUtf8(java.lang.CharSequence,java.nio.ByteBuffer)>($r0, $r1);

        return;
    }

    public static int encodedLength(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        char $c2;
        long $l5;
        java.lang.IllegalArgumentException $r4;
        int $i0, $i1, $i3, $i4;
        java.lang.StringBuilder $r1, $r3;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $i3 = (int) $c2;

        if $i3 >= 128 goto label2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i3 = $i0;

     label3:
        if $i1 >= $i0 goto label5;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $i4 = (int) $c2;

        if $i4 >= 2048 goto label4;

        $i4 = (int) $c2;

        $i4 = 127 - $i4;

        $i4 = $i4 >>> 31;

        $i3 = $i3 + $i4;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $i1 = staticinvoke <com.google.protobuf.Utf8: int encodedLengthGeneral(java.lang.CharSequence,int)>($r0, $i1);

        $i3 = $i3 + $i1;

     label5:
        if $i3 < $i0 goto label6;

        return $i3;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        $r1 = $r3;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UTF-8 length does not fit in int: ");

        $l5 = (long) $i3;

        $l5 = $l5 + 4294967296L;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        goto label7;

     label7:
        throw $r4;
    }

    public static int encodedLengthGeneral(java.lang.CharSequence, int)
    {
        java.lang.CharSequence $r0;
        char $c3;
        com.google.protobuf.Utf8$UnpairedSurrogateException $r1;
        int $i0, $i1, $i2, $i4, $i5;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i2 = 0;

     label1:
        if $i0 >= $i1 goto label5;

        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $i4 = (int) $c3;

        if $i4 >= 2048 goto label2;

        $i4 = (int) $c3;

        $i4 = 127 - $i4;

        $i4 = $i4 >>> 31;

        $i2 = $i2 + $i4;

        goto label4;

     label2:
        $i2 = $i2 + 2;

        $i4 = 55296;

        $i5 = (int) $c3;

        if $i4 > $i5 goto label4;

        $i4 = (int) $c3;

        $i5 = 57343;

        if $i4 > $i5 goto label4;

        $i4 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>($r0, $i0);

        if $i4 < 65536 goto label3;

        $i0 = $i0 + 1;

        goto label4;

     label3:
        $r1 = new com.google.protobuf.Utf8$UnpairedSurrogateException;

        specialinvoke $r1.<com.google.protobuf.Utf8$UnpairedSurrogateException: void <init>(int,int)>($i0, $i1);

        throw $r1;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        return $i2;
    }

    public static int estimateConsecutiveAscii(java.nio.ByteBuffer, int, int)
    {
        byte $b1;
        int $i0, $i3, $i4;
        long $l2;
        java.nio.ByteBuffer $r0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $i0 := @parameter1: int;

        $i3 := @parameter2: int;

        $i4 = -7;

        $i3 = $i3 + $i4;

        $i4 = $i0;

     label1:
        if $i4 >= $i3 goto label2;

        $l2 = virtualinvoke $r0.<java.nio.ByteBuffer: long getLong(int)>($i4);

        $l2 = $l2 & -9187201950435737472L;

        $b1 = $l2 cmp 0L;

        if $b1 != 0 goto label2;

        $i4 = $i4 + 8;

        goto label1;

     label2:
        $i0 = $i4 - $i0;

        return $i0;
    }

    public static int incompleteStateFor(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 = -12;

        if $i0 <= $i1 goto label1;

        $i0 = -1;

     label1:
        return $i0;
    }

    public static int incompleteStateFor(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = -12;

        if $i0 > $i2 goto label2;

        $i2 = -65;

        if $i1 <= $i2 goto label1;

        goto label2;

     label1:
        $i1 = $i1 << 8;

        $i0 = $i0 ^ $i1;

        return $i0;

     label2:
        $i0 = -1;

        return $i0;
    }

    public static int incompleteStateFor(int, int, int)
    {
        int $i0, $i1, $i2, $i3;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $i3 = -12;

        if $i1 > $i3 goto label2;

        $i3 = -65;

        if $i2 > $i3 goto label2;

        $i3 = -65;

        if $i0 <= $i3 goto label1;

        goto label2;

     label1:
        $i2 = $i2 << 8;

        $i1 = $i1 ^ $i2;

        $i2 = $i0 << 16;

        $i1 = $i1 ^ $i2;

        return $i1;

     label2:
        $i1 = -1;

        return $i1;
    }

    public static int incompleteStateFor(java.nio.ByteBuffer, int, int, int)
    {
        byte $b3, $b4;
        int $i0, $i1, $i2;
        java.lang.AssertionError $r1;
        java.nio.ByteBuffer $r0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $i2 == 0 goto label3;

        if $i2 == 1 goto label2;

        if $i2 != 2 goto label1;

        $b3 = virtualinvoke $r0.<java.nio.ByteBuffer: byte get(int)>($i1);

        $i1 = $i1 + 1;

        $b4 = virtualinvoke $r0.<java.nio.ByteBuffer: byte get(int)>($i1);

        $i1 = (int) $b3;

        $i2 = (int) $b4;

        $i0 = staticinvoke <com.google.protobuf.Utf8: int incompleteStateFor(int,int,int)>($i0, $i1, $i2);

        return $i0;

     label1:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $b3 = virtualinvoke $r0.<java.nio.ByteBuffer: byte get(int)>($i1);

        $i1 = (int) $b3;

        $i0 = staticinvoke <com.google.protobuf.Utf8: int incompleteStateFor(int,int)>($i0, $i1);

        return $i0;

     label3:
        $i0 = staticinvoke <com.google.protobuf.Utf8: int incompleteStateFor(int)>($i0);

        return $i0;
    }

    public static int incompleteStateFor(byte[], int, int)
    {
        byte[] $r0;
        java.lang.AssertionError $r1;
        byte $b3, $b4, $b5;
        int $i0, $i1, $i2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = -1;

        $i2 = $i0 + $i2;

        $b3 = $r0[$i2];

        $i1 = $i1 - $i0;

        if $i1 == 0 goto label3;

        if $i1 == 1 goto label2;

        if $i1 != 2 goto label1;

        $b4 = $r0[$i0];

        $i0 = $i0 + 1;

        $b5 = $r0[$i0];

        $i0 = (int) $b3;

        $i1 = (int) $b4;

        $i2 = (int) $b5;

        $i0 = staticinvoke <com.google.protobuf.Utf8: int incompleteStateFor(int,int,int)>($i0, $i1, $i2);

        return $i0;

     label1:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $b4 = $r0[$i0];

        $i0 = (int) $b3;

        $i1 = (int) $b4;

        $i0 = staticinvoke <com.google.protobuf.Utf8: int incompleteStateFor(int,int)>($i0, $i1);

        return $i0;

     label3:
        $i0 = (int) $b3;

        $i0 = staticinvoke <com.google.protobuf.Utf8: int incompleteStateFor(int)>($i0);

        return $i0;
    }

    public static boolean isValidUtf8(java.nio.ByteBuffer)
    {
        com.google.protobuf.Utf8$Processor $r0;
        int $i0, $i1;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $r0 = <com.google.protobuf.Utf8: com.google.protobuf.Utf8$Processor processor>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        $z0 = virtualinvoke $r0.<com.google.protobuf.Utf8$Processor: boolean isValidUtf8(java.nio.ByteBuffer,int,int)>($r1, $i0, $i1);

        return $z0;
    }

    public static boolean isValidUtf8(byte[])
    {
        com.google.protobuf.Utf8$Processor $r0;
        byte[] $r1;
        int $i0;
        boolean $z0;

        $r1 := @parameter0: byte[];

        $r0 = <com.google.protobuf.Utf8: com.google.protobuf.Utf8$Processor processor>;

        $i0 = lengthof $r1;

        $z0 = virtualinvoke $r0.<com.google.protobuf.Utf8$Processor: boolean isValidUtf8(byte[],int,int)>($r1, 0, $i0);

        return $z0;
    }

    public static boolean isValidUtf8(byte[], int, int)
    {
        com.google.protobuf.Utf8$Processor $r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 = <com.google.protobuf.Utf8: com.google.protobuf.Utf8$Processor processor>;

        $z0 = virtualinvoke $r0.<com.google.protobuf.Utf8$Processor: boolean isValidUtf8(byte[],int,int)>($r1, $i0, $i1);

        return $z0;
    }

    public static int partialIsValidUtf8(int, java.nio.ByteBuffer, int, int)
    {
        com.google.protobuf.Utf8$Processor $r1;
        int $i0, $i1, $i2;
        java.nio.ByteBuffer $r0;

        $i2 := @parameter0: int;

        $r0 := @parameter1: java.nio.ByteBuffer;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 = <com.google.protobuf.Utf8: com.google.protobuf.Utf8$Processor processor>;

        $i2 = virtualinvoke $r1.<com.google.protobuf.Utf8$Processor: int partialIsValidUtf8(int,java.nio.ByteBuffer,int,int)>($i2, $r0, $i0, $i1);

        return $i2;
    }

    public static int partialIsValidUtf8(int, byte[], int, int)
    {
        com.google.protobuf.Utf8$Processor $r1;
        byte[] $r0;
        int $i0, $i1, $i2;

        $i2 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 = <com.google.protobuf.Utf8: com.google.protobuf.Utf8$Processor processor>;

        $i2 = virtualinvoke $r1.<com.google.protobuf.Utf8$Processor: int partialIsValidUtf8(int,byte[],int,int)>($i2, $r0, $i0, $i1);

        return $i2;
    }
}
