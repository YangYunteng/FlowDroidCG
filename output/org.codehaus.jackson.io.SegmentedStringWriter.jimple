public final class org.codehaus.jackson.io.SegmentedStringWriter extends java.io.Writer
{
    public final org.codehaus.jackson.util.TextBuffer _buffer;

    public void <init>(org.codehaus.jackson.util.BufferRecycler)
    {
        org.codehaus.jackson.util.BufferRecycler $r1;
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        org.codehaus.jackson.util.TextBuffer $r2;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $r1 := @parameter0: org.codehaus.jackson.util.BufferRecycler;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        $r2 = new org.codehaus.jackson.util.TextBuffer;

        specialinvoke $r2.<org.codehaus.jackson.util.TextBuffer: void <init>(org.codehaus.jackson.util.BufferRecycler)>($r1);

        r0.<org.codehaus.jackson.io.SegmentedStringWriter: org.codehaus.jackson.util.TextBuffer _buffer> = $r2;

        return;
    }

    public java.io.Writer append(char)
    {
        int $i1;
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        char $c0;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        virtualinvoke r0.<org.codehaus.jackson.io.SegmentedStringWriter: void write(int)>($i1);

        return r0;
    }

    public java.io.Writer append(java.lang.CharSequence)
    {
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        java.lang.CharSequence $r2;
        int $i0;
        java.lang.String $r3;
        org.codehaus.jackson.util.TextBuffer $r1;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $r2 := @parameter0: java.lang.CharSequence;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r1 = r0.<org.codehaus.jackson.io.SegmentedStringWriter: org.codehaus.jackson.util.TextBuffer _buffer>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: void append(java.lang.String,int,int)>($r3, 0, $i0);

        return r0;
    }

    public java.io.Writer append(java.lang.CharSequence, int, int)
    {
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        java.lang.CharSequence $r1;
        int $i0, $i1;
        java.lang.String $r2;
        org.codehaus.jackson.util.TextBuffer $r3;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = r0.<org.codehaus.jackson.io.SegmentedStringWriter: org.codehaus.jackson.util.TextBuffer _buffer>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        virtualinvoke $r3.<org.codehaus.jackson.util.TextBuffer: void append(java.lang.String,int,int)>($r2, 0, $i0);

        return r0;
    }

    public volatile java.lang.Appendable append(char)
    {
        java.io.Writer $r1;
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        char $c0;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.io.SegmentedStringWriter: java.io.Writer append(char)>($c0);

        return $r1;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence)
    {
        java.io.Writer $r1;
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        java.lang.CharSequence $r2;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $r2 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.io.SegmentedStringWriter: java.io.Writer append(java.lang.CharSequence)>($r2);

        return $r1;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence, int, int)
    {
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        java.lang.CharSequence $r2;
        int $i0, $i1;
        java.io.Writer $r1;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $r2 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.io.SegmentedStringWriter: java.io.Writer append(java.lang.CharSequence,int,int)>($r2, $i0, $i1);

        return $r1;
    }

    public void close()
    {
        org.codehaus.jackson.io.SegmentedStringWriter r0;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        return;
    }

    public void flush()
    {
        org.codehaus.jackson.io.SegmentedStringWriter r0;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        return;
    }

    public java.lang.String getAndClear()
    {
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        java.lang.String $r2;
        org.codehaus.jackson.util.TextBuffer $r1;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $r1 = r0.<org.codehaus.jackson.io.SegmentedStringWriter: org.codehaus.jackson.util.TextBuffer _buffer>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: java.lang.String contentsAsString()>();

        $r1 = r0.<org.codehaus.jackson.io.SegmentedStringWriter: org.codehaus.jackson.util.TextBuffer _buffer>;

        virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: void releaseBuffers()>();

        return $r2;
    }

    public void write(int)
    {
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        int $i0;
        char $c1;
        org.codehaus.jackson.util.TextBuffer $r1;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.io.SegmentedStringWriter: org.codehaus.jackson.util.TextBuffer _buffer>;

        $c1 = (char) $i0;

        virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: void append(char)>($c1);

        return;
    }

    public void write(java.lang.String)
    {
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        int $i0;
        java.lang.String $r1;
        org.codehaus.jackson.util.TextBuffer $r2;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.io.SegmentedStringWriter: org.codehaus.jackson.util.TextBuffer _buffer>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        virtualinvoke $r2.<org.codehaus.jackson.util.TextBuffer: void append(java.lang.String,int,int)>($r1, 0, $i0);

        return;
    }

    public void write(java.lang.String, int, int)
    {
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        int $i0, $i1;
        java.lang.String $r1;
        org.codehaus.jackson.util.TextBuffer $r2;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.codehaus.jackson.io.SegmentedStringWriter: org.codehaus.jackson.util.TextBuffer _buffer>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        virtualinvoke $r2.<org.codehaus.jackson.util.TextBuffer: void append(java.lang.String,int,int)>($r1, 0, $i0);

        return;
    }

    public void write(char[])
    {
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        int $i0;
        char[] $r1;
        org.codehaus.jackson.util.TextBuffer $r2;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $r1 := @parameter0: char[];

        $r2 = r0.<org.codehaus.jackson.io.SegmentedStringWriter: org.codehaus.jackson.util.TextBuffer _buffer>;

        $i0 = lengthof $r1;

        virtualinvoke $r2.<org.codehaus.jackson.util.TextBuffer: void append(char[],int,int)>($r1, 0, $i0);

        return;
    }

    public void write(char[], int, int)
    {
        org.codehaus.jackson.io.SegmentedStringWriter r0;
        int $i0, $i1;
        char[] $r1;
        org.codehaus.jackson.util.TextBuffer $r2;

        r0 := @this: org.codehaus.jackson.io.SegmentedStringWriter;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.codehaus.jackson.io.SegmentedStringWriter: org.codehaus.jackson.util.TextBuffer _buffer>;

        virtualinvoke $r2.<org.codehaus.jackson.util.TextBuffer: void append(char[],int,int)>($r1, $i0, $i1);

        return;
    }
}
