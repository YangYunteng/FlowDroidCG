public final class com.google.common.io.MoreFiles extends java.lang.Object
{
    public static final com.google.common.graph.SuccessorsFunction FILE_TREE;

    static void <clinit>()
    {
        com.google.common.io.MoreFiles$1 $r0;

        $r0 = new com.google.common.io.MoreFiles$1;

        specialinvoke $r0.<com.google.common.io.MoreFiles$1: void <init>()>();

        <com.google.common.io.MoreFiles: com.google.common.graph.SuccessorsFunction FILE_TREE> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.io.MoreFiles r0;

        r0 := @this: com.google.common.io.MoreFiles;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Iterable access$400(java.nio.file.Path)
    {
        java.nio.file.Path $r1;
        java.lang.Iterable $r0;

        $r1 := @parameter0: java.nio.file.Path;

        $r0 = staticinvoke <com.google.common.io.MoreFiles: java.lang.Iterable fileTreeChildren(java.nio.file.Path)>($r1);

        return $r0;
    }

    public static java.util.Collection addException(java.util.Collection, java.io.IOException)
    {
        java.io.IOException $r0;
        java.util.Collection $r1;
        java.util.ArrayList $r2;

        $r1 := @parameter0: java.util.Collection;

        $r0 := @parameter1: java.io.IOException;

        if $r1 != null goto label1;

        $r2 = new java.util.ArrayList;

        $r1 = $r2;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label1:
        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r0);

        return $r1;
    }

    public static transient com.google.common.io.ByteSink asByteSink(java.nio.file.Path, java.nio.file.OpenOption[])
    {
        com.google.common.io.MoreFiles$PathByteSink $r2;
        java.nio.file.Path $r0;
        java.nio.file.OpenOption[] $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.OpenOption[];

        $r2 = new com.google.common.io.MoreFiles$PathByteSink;

        specialinvoke $r2.<com.google.common.io.MoreFiles$PathByteSink: void <init>(java.nio.file.Path,java.nio.file.OpenOption[],com.google.common.io.MoreFiles$1)>($r0, $r1, null);

        return $r2;
    }

    public static transient com.google.common.io.ByteSource asByteSource(java.nio.file.Path, java.nio.file.OpenOption[])
    {
        com.google.common.io.MoreFiles$PathByteSource $r2;
        java.nio.file.Path $r0;
        java.nio.file.OpenOption[] $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.OpenOption[];

        $r2 = new com.google.common.io.MoreFiles$PathByteSource;

        specialinvoke $r2.<com.google.common.io.MoreFiles$PathByteSource: void <init>(java.nio.file.Path,java.nio.file.OpenOption[],com.google.common.io.MoreFiles$1)>($r0, $r1, null);

        return $r2;
    }

    public static transient com.google.common.io.CharSink asCharSink(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption[])
    {
        com.google.common.io.ByteSink $r3;
        java.nio.charset.Charset $r0;
        java.nio.file.OpenOption[] $r1;
        java.nio.file.Path $r2;
        com.google.common.io.CharSink $r4;

        $r2 := @parameter0: java.nio.file.Path;

        $r0 := @parameter1: java.nio.charset.Charset;

        $r1 := @parameter2: java.nio.file.OpenOption[];

        $r3 = staticinvoke <com.google.common.io.MoreFiles: com.google.common.io.ByteSink asByteSink(java.nio.file.Path,java.nio.file.OpenOption[])>($r2, $r1);

        $r4 = virtualinvoke $r3.<com.google.common.io.ByteSink: com.google.common.io.CharSink asCharSink(java.nio.charset.Charset)>($r0);

        return $r4;
    }

    public static transient com.google.common.io.CharSource asCharSource(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption[])
    {
        java.nio.charset.Charset $r0;
        java.nio.file.OpenOption[] $r1;
        com.google.common.io.CharSource $r4;
        com.google.common.io.ByteSource $r3;
        java.nio.file.Path $r2;

        $r2 := @parameter0: java.nio.file.Path;

        $r0 := @parameter1: java.nio.charset.Charset;

        $r1 := @parameter2: java.nio.file.OpenOption[];

        $r3 = staticinvoke <com.google.common.io.MoreFiles: com.google.common.io.ByteSource asByteSource(java.nio.file.Path,java.nio.file.OpenOption[])>($r2, $r1);

        $r4 = virtualinvoke $r3.<com.google.common.io.ByteSource: com.google.common.io.CharSource asCharSource(java.nio.charset.Charset)>($r0);

        return $r4;
    }

    public static void checkAllowsInsecure(java.nio.file.Path, com.google.common.io.RecursiveDeleteOption[])
    {
        java.util.List $r3;
        com.google.common.io.RecursiveDeleteOption[] $r2;
        com.google.common.io.RecursiveDeleteOption $r0;
        java.lang.String $r5;
        java.nio.file.Path $r1;
        com.google.common.io.InsecureRecursiveDeleteException $r4;
        boolean $z0;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: com.google.common.io.RecursiveDeleteOption[];

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r0 = <com.google.common.io.RecursiveDeleteOption: com.google.common.io.RecursiveDeleteOption ALLOW_INSECURE>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = new com.google.common.io.InsecureRecursiveDeleteException;

        $r5 = interfaceinvoke $r1.<java.nio.file.Path: java.lang.String toString()>();

        specialinvoke $r4.<com.google.common.io.InsecureRecursiveDeleteException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public static java.util.Collection concat(java.util.Collection, java.util.Collection)
    {
        java.util.Collection $r0, $r1;

        $r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.util.Collection;

        if $r0 != null goto label1;

        return $r1;

     label1:
        if $r1 == null goto label2;

        interfaceinvoke $r0.<java.util.Collection: boolean addAll(java.util.Collection)>($r1);

     label2:
        return $r0;
    }

    public static transient void createParentDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute[])
    {
        java.nio.file.LinkOption[] $r3;
        java.io.IOException $r4;
        java.nio.file.attribute.FileAttribute[] $r1;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.nio.file.Path $r0, $r2;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.attribute.FileAttribute[];

        $r2 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $r2 = interfaceinvoke $r2.<java.nio.file.Path: java.nio.file.Path normalize()>();

        $r2 = interfaceinvoke $r2.<java.nio.file.Path: java.nio.file.Path getParent()>();

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = newarray (java.nio.file.LinkOption)[0];

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r2, $r3);

        if $z0 != 0 goto label3;

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r2, $r1);

        $r3 = newarray (java.nio.file.LinkOption)[0];

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r2, $r3);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create parent directories of ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label3:
        return;
    }

    public static transient void deleteDirectoryContents(java.nio.file.Path, com.google.common.io.RecursiveDeleteOption[])
    {
        java.lang.Throwable $r6, $r7, $r8;
        java.util.Collection $r4;
        java.io.IOException $r5;
        java.lang.NullPointerException r9;
        java.nio.file.DirectoryStream $r2;
        java.nio.file.SecureDirectoryStream $r3;
        com.google.common.io.RecursiveDeleteOption[] $r1;
        java.nio.file.Path $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: com.google.common.io.RecursiveDeleteOption[];

     label01:
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>($r0);

     label02:
        $z0 = $r2 instanceof java.nio.file.SecureDirectoryStream;

     label03:
        if $z0 == 0 goto label06;

     label04:
        $r3 = (java.nio.file.SecureDirectoryStream) $r2;

        $r4 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream)>($r3);

     label05:
        goto label07;

     label06:
        staticinvoke <com.google.common.io.MoreFiles: void checkAllowsInsecure(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[])>($r0, $r1);

        $r4 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream)>($r2);

     label07:
        if $r2 == null goto label23;

     label08:
        interfaceinvoke $r2.<java.nio.file.DirectoryStream: void close()>();

     label09:
        goto label23;

     label10:
        $r5 := @caughtexception;

        goto label22;

     label11:
        $r6 := @caughtexception;

     label12:
        throw $r6;

     label13:
        $r7 := @caughtexception;

        if $r2 == null goto label20;

        if $r6 == null goto label19;

     label14:
        interfaceinvoke $r2.<java.nio.file.DirectoryStream: void close()>();

     label15:
        goto label20;

     label16:
        $r8 := @caughtexception;

     label17:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label18:
        goto label20;

     label19:
        interfaceinvoke $r2.<java.nio.file.DirectoryStream: void close()>();

     label20:
        throw $r7;

     label21:
        $r5 := @caughtexception;

        $r4 = null;

     label22:
        if $r4 == null goto label25;

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r5);

     label23:
        if $r4 != null goto label24;

        return;

     label24:
        staticinvoke <com.google.common.io.MoreFiles: void throwDeleteFailed(java.nio.file.Path,java.util.Collection)>($r0, $r4);

        r9 = new java.lang.NullPointerException;

        specialinvoke r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r9;

     label25:
        throw $r5;

        catch java.io.IOException from label01 to label02 with label21;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.IOException from label17 to label18 with label21;
        catch java.io.IOException from label19 to label21 with label21;
    }

    public static java.util.Collection deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1, $r5;
        java.io.IOException $r7;
        java.nio.file.DirectoryIteratorException $r6;
        java.nio.file.DirectoryStream $r0;
        java.lang.Object $r3;
        java.nio.file.Path $r4;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.DirectoryStream;

        $r1 = null;

     label1:
        $r2 = interfaceinvoke $r0.<java.nio.file.DirectoryStream: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

     label3:
        if $z0 == 0 goto label8;

     label4:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label5:
        $r4 = (java.nio.file.Path) $r3;

     label6:
        $r5 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection deleteRecursivelyInsecure(java.nio.file.Path)>($r4);

        $r5 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection concat(java.util.Collection,java.util.Collection)>($r1, $r5);

     label7:
        $r1 = $r5;

        goto label2;

     label8:
        return $r1;

     label9:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()>();

        $r1 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection addException(java.util.Collection,java.io.IOException)>($r1, $r7);

        return $r1;

        catch java.nio.file.DirectoryIteratorException from label1 to label3 with label9;
        catch java.nio.file.DirectoryIteratorException from label4 to label5 with label9;
        catch java.nio.file.DirectoryIteratorException from label6 to label7 with label9;
    }

    public static java.util.Collection deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1, $r5;
        java.io.IOException $r7;
        java.nio.file.DirectoryIteratorException $r6;
        java.nio.file.SecureDirectoryStream $r0;
        java.lang.Object $r3;
        java.nio.file.Path $r4;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.SecureDirectoryStream;

        $r1 = null;

     label1:
        $r2 = interfaceinvoke $r0.<java.nio.file.SecureDirectoryStream: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

     label3:
        if $z0 == 0 goto label8;

     label4:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label5:
        $r4 = (java.nio.file.Path) $r3;

     label6:
        $r4 = interfaceinvoke $r4.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        $r5 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path)>($r0, $r4);

        $r5 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection concat(java.util.Collection,java.util.Collection)>($r1, $r5);

     label7:
        $r1 = $r5;

        goto label2;

     label8:
        return $r1;

     label9:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()>();

        $r1 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection addException(java.util.Collection,java.io.IOException)>($r1, $r7);

        return $r1;

        catch java.nio.file.DirectoryIteratorException from label1 to label3 with label9;
        catch java.nio.file.DirectoryIteratorException from label4 to label5 with label9;
        catch java.nio.file.DirectoryIteratorException from label6 to label7 with label9;
    }

    public static transient void deleteRecursively(java.nio.file.Path, com.google.common.io.RecursiveDeleteOption[])
    {
        java.lang.Throwable $r8, $r9, $r10;
        java.lang.NullPointerException r13;
        java.nio.file.DirectoryStream $r3;
        java.nio.file.SecureDirectoryStream $r4;
        com.google.common.io.RecursiveDeleteOption[] $r1;
        java.lang.String $r12;
        java.nio.file.Path $r0, $r2;
        boolean $z0, $z1;
        java.util.Collection $r5, $r6;
        java.nio.file.FileSystemException $r11;
        java.io.IOException $r7;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: com.google.common.io.RecursiveDeleteOption[];

        $r2 = staticinvoke <com.google.common.io.MoreFiles: java.nio.file.Path getParentPath(java.nio.file.Path)>($r0);

        if $r2 == null goto label28;

        $z0 = 0;

     label01:
        $r3 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>($r2);

     label02:
        $z1 = $r3 instanceof java.nio.file.SecureDirectoryStream;

     label03:
        if $z1 == 0 goto label06;

        $z0 = 1;

     label04:
        $r4 = (java.nio.file.SecureDirectoryStream) $r3;

        $r2 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        $r5 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path)>($r4, $r2);

     label05:
        goto label07;

     label06:
        $r5 = null;

     label07:
        if $r3 == null goto label09;

     label08:
        interfaceinvoke $r3.<java.nio.file.DirectoryStream: void close()>();

     label09:
        if $z0 != 0 goto label25;

     label10:
        staticinvoke <com.google.common.io.MoreFiles: void checkAllowsInsecure(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[])>($r0, $r1);

        $r6 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection deleteRecursivelyInsecure(java.nio.file.Path)>($r0);

     label11:
        $r5 = $r6;

        goto label25;

     label12:
        $r7 := @caughtexception;

        goto label24;

     label13:
        $r8 := @caughtexception;

     label14:
        throw $r8;

     label15:
        $r9 := @caughtexception;

        if $r3 == null goto label22;

        if $r8 == null goto label21;

     label16:
        interfaceinvoke $r3.<java.nio.file.DirectoryStream: void close()>();

     label17:
        goto label22;

     label18:
        $r10 := @caughtexception;

     label19:
        virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label20:
        goto label22;

     label21:
        interfaceinvoke $r3.<java.nio.file.DirectoryStream: void close()>();

     label22:
        throw $r9;

     label23:
        $r7 := @caughtexception;

        $r5 = null;

     label24:
        if $r5 == null goto label27;

        interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r7);

     label25:
        if $r5 != null goto label26;

        return;

     label26:
        staticinvoke <com.google.common.io.MoreFiles: void throwDeleteFailed(java.nio.file.Path,java.util.Collection)>($r0, $r5);

        r13 = new java.lang.NullPointerException;

        specialinvoke r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r13;

     label27:
        throw $r7;

     label28:
        $r11 = new java.nio.file.FileSystemException;

        $r12 = interfaceinvoke $r0.<java.nio.file.Path: java.lang.String toString()>();

        specialinvoke $r11.<java.nio.file.FileSystemException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r12, null, "can\'t delete recursively");

        throw $r11;

        catch java.io.IOException from label01 to label02 with label23;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.io.IOException from label08 to label09 with label12;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.io.IOException from label19 to label20 with label23;
        catch java.io.IOException from label21 to label23 with label23;
    }

    public static java.util.Collection deleteRecursivelyInsecure(java.nio.file.Path)
    {
        java.lang.Throwable $r6, $r7, $r8;
        java.nio.file.LinkOption[] $r3;
        java.util.Collection $r2, $r5;
        java.io.IOException $r9;
        java.nio.file.LinkOption $r0;
        java.nio.file.DirectoryStream $r4;
        java.nio.file.Path $r1;
        boolean $z0;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 = null;

        $r3 = newarray (java.nio.file.LinkOption)[1];

        $r0 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;

        $r3[0] = $r0;

     label01:
        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r1, $r3);

     label02:
        if $z0 == 0 goto label18;

     label03:
        $r4 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>($r1);

     label04:
        $r5 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream)>($r4);

     label05:
        $r2 = $r5;

        if $r4 == null goto label18;

     label06:
        interfaceinvoke $r4.<java.nio.file.DirectoryStream: void close()>();

     label07:
        goto label18;

     label08:
        $r6 := @caughtexception;

     label09:
        throw $r6;

     label10:
        $r7 := @caughtexception;

        if $r4 == null goto label17;

        if $r6 == null goto label16;

     label11:
        interfaceinvoke $r4.<java.nio.file.DirectoryStream: void close()>();

     label12:
        goto label17;

     label13:
        $r8 := @caughtexception;

     label14:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label15:
        goto label17;

     label16:
        interfaceinvoke $r4.<java.nio.file.DirectoryStream: void close()>();

     label17:
        throw $r7;

     label18:
        if $r2 != null goto label22;

     label19:
        staticinvoke <java.nio.file.Files: void delete(java.nio.file.Path)>($r1);

     label20:
        return $r2;

     label21:
        $r9 := @caughtexception;

        $r2 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection addException(java.util.Collection,java.io.IOException)>($r2, $r9);

     label22:
        return $r2;

        catch java.io.IOException from label01 to label02 with label21;
        catch java.io.IOException from label03 to label04 with label21;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.io.IOException from label06 to label07 with label21;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.io.IOException from label14 to label15 with label21;
        catch java.io.IOException from label16 to label18 with label21;
        catch java.io.IOException from label19 to label20 with label21;
    }

    public static java.util.Collection deleteRecursivelySecure(java.nio.file.SecureDirectoryStream, java.nio.file.Path)
    {
        java.lang.Throwable $r7, $r8, $r9;
        java.nio.file.LinkOption[] $r4;
        java.util.Collection $r3, $r6;
        java.io.IOException $r10;
        java.nio.file.LinkOption $r0;
        java.nio.file.SecureDirectoryStream $r1, $r5;
        java.nio.file.Path $r2;
        boolean $z0;

        $r1 := @parameter0: java.nio.file.SecureDirectoryStream;

        $r2 := @parameter1: java.nio.file.Path;

        $r3 = null;

        $r4 = newarray (java.nio.file.LinkOption)[1];

        $r0 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;

        $r4[0] = $r0;

     label01:
        $z0 = staticinvoke <com.google.common.io.MoreFiles: boolean isDirectory(java.nio.file.SecureDirectoryStream,java.nio.file.Path,java.nio.file.LinkOption[])>($r1, $r2, $r4);

     label02:
        if $z0 == 0 goto label20;

        $r4 = newarray (java.nio.file.LinkOption)[1];

        $r0 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;

        $r4[0] = $r0;

     label03:
        $r5 = interfaceinvoke $r1.<java.nio.file.SecureDirectoryStream: java.nio.file.SecureDirectoryStream newDirectoryStream(java.lang.Object,java.nio.file.LinkOption[])>($r2, $r4);

     label04:
        $r6 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream)>($r5);

     label05:
        $r3 = $r6;

        if $r5 == null goto label07;

     label06:
        interfaceinvoke $r5.<java.nio.file.SecureDirectoryStream: void close()>();

     label07:
        if $r6 != null goto label23;

     label08:
        interfaceinvoke $r1.<java.nio.file.SecureDirectoryStream: void deleteDirectory(java.lang.Object)>($r2);

     label09:
        return $r6;

     label10:
        $r7 := @caughtexception;

     label11:
        throw $r7;

     label12:
        $r8 := @caughtexception;

        if $r5 == null goto label19;

        if $r7 == null goto label18;

     label13:
        interfaceinvoke $r5.<java.nio.file.SecureDirectoryStream: void close()>();

     label14:
        goto label19;

     label15:
        $r9 := @caughtexception;

     label16:
        virtualinvoke $r7.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label17:
        goto label19;

     label18:
        interfaceinvoke $r5.<java.nio.file.SecureDirectoryStream: void close()>();

     label19:
        throw $r8;

     label20:
        interfaceinvoke $r1.<java.nio.file.SecureDirectoryStream: void deleteFile(java.lang.Object)>($r2);

     label21:
        return null;

     label22:
        $r10 := @caughtexception;

        $r3 = staticinvoke <com.google.common.io.MoreFiles: java.util.Collection addException(java.util.Collection,java.io.IOException)>($r3, $r10);

        return $r3;

     label23:
        return $r6;

        catch java.io.IOException from label01 to label02 with label22;
        catch java.io.IOException from label03 to label04 with label22;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.io.IOException from label06 to label07 with label22;
        catch java.io.IOException from label08 to label09 with label22;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.io.IOException from label16 to label17 with label22;
        catch java.io.IOException from label18 to label21 with label22;
    }

    public static com.google.common.collect.TreeTraverser directoryTreeTraverser()
    {
        com.google.common.io.MoreFiles$DirectoryTreeTraverser $r0;

        $r0 = staticinvoke <com.google.common.io.MoreFiles$DirectoryTreeTraverser: com.google.common.io.MoreFiles$DirectoryTreeTraverser access$300()>();

        return $r0;
    }

    public static boolean equal(java.nio.file.Path, java.nio.file.Path)
    {
        long $l0, $l1;
        byte $b2;
        java.lang.Long $r6;
        com.google.common.base.Optional $r5;
        java.nio.file.OpenOption[] $r2;
        java.lang.Object $r7;
        com.google.common.io.ByteSource $r3, $r4;
        java.nio.file.Path $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 := @parameter1: java.nio.file.Path;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = staticinvoke <java.nio.file.Files: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>($r0, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = newarray (java.nio.file.OpenOption)[0];

        $r3 = staticinvoke <com.google.common.io.MoreFiles: com.google.common.io.ByteSource asByteSource(java.nio.file.Path,java.nio.file.OpenOption[])>($r0, $r2);

        $r2 = newarray (java.nio.file.OpenOption)[0];

        $r4 = staticinvoke <com.google.common.io.MoreFiles: com.google.common.io.ByteSource asByteSource(java.nio.file.Path,java.nio.file.OpenOption[])>($r1, $r2);

        $r5 = virtualinvoke $r3.<com.google.common.io.ByteSource: com.google.common.base.Optional sizeIfKnown()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r7 = virtualinvoke $r5.<com.google.common.base.Optional: java.lang.Object or(java.lang.Object)>($r6);

        $r6 = (java.lang.Long) $r7;

        $l0 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $r5 = virtualinvoke $r4.<com.google.common.io.ByteSource: com.google.common.base.Optional sizeIfKnown()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r7 = virtualinvoke $r5.<com.google.common.base.Optional: java.lang.Object or(java.lang.Object)>($r6);

        $r6 = (java.lang.Long) $r7;

        $l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $b2 = $l0 cmp 0L;

        if $b2 == 0 goto label2;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke $r3.<com.google.common.io.ByteSource: boolean contentEquals(com.google.common.io.ByteSource)>($r4);

        return $z0;
    }

    public static com.google.common.graph.Traverser fileTraverser()
    {
        com.google.common.graph.SuccessorsFunction $r1;
        com.google.common.graph.Traverser $r0;

        $r1 = <com.google.common.io.MoreFiles: com.google.common.graph.SuccessorsFunction FILE_TREE>;

        $r0 = staticinvoke <com.google.common.graph.Traverser: com.google.common.graph.Traverser forTree(com.google.common.graph.SuccessorsFunction)>($r1);

        return $r0;
    }

    public static java.lang.Iterable fileTreeChildren(java.nio.file.Path)
    {
        java.nio.file.LinkOption $r0;
        java.nio.file.LinkOption[] $r2;
        com.google.common.collect.ImmutableList $r3;
        java.io.IOException $r4;
        java.nio.file.Path $r1;
        java.nio.file.DirectoryIteratorException $r5;
        boolean $z0;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 = newarray (java.nio.file.LinkOption)[1];

        $r0 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;

        $r2[0] = $r0;

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r1, $r2);

        if $z0 == 0 goto label4;

     label1:
        $r3 = staticinvoke <com.google.common.io.MoreFiles: com.google.common.collect.ImmutableList listFiles(java.nio.file.Path)>($r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.nio.file.DirectoryIteratorException;

        specialinvoke $r5.<java.nio.file.DirectoryIteratorException: void <init>(java.io.IOException)>($r4);

        throw $r5;

     label4:
        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.lang.String getFileExtension(java.nio.file.Path)
    {
        int $i0, $i1;
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r0 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        if $r0 != null goto label1;

        return "";

     label1:
        $r1 = interfaceinvoke $r0.<java.nio.file.Path: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = -1;

        if $i0 != $i1 goto label2;

        return "";

     label2:
        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r1;
    }

    public static java.lang.String getNameWithoutExtension(java.nio.file.Path)
    {
        int $i0, $i1;
        java.lang.String $r1;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        $r0 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        if $r0 != null goto label1;

        return "";

     label1:
        $r1 = interfaceinvoke $r0.<java.nio.file.Path: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = -1;

        if $i0 != $i1 goto label2;

        return $r1;

     label2:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;
    }

    public static java.nio.file.Path getParentPath(java.nio.file.Path)
    {
        int $i0;
        java.lang.String[] $r3;
        java.nio.file.FileSystem $r2;
        java.nio.file.Path $r0, $r1;

        $r0 := @parameter0: java.nio.file.Path;

        $r1 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.Path getParent()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $i0 = interfaceinvoke $r0.<java.nio.file.Path: int getNameCount()>();

        if $i0 != 0 goto label2;

        return null;

     label2:
        $r2 = interfaceinvoke $r0.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();

        $r3 = newarray (java.lang.String)[0];

        $r0 = virtualinvoke $r2.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(".", $r3);

        return $r0;
    }

    public static transient com.google.common.base.Predicate isDirectory(java.nio.file.LinkOption[])
    {
        java.lang.Object $r1;
        com.google.common.io.MoreFiles$2 $r0;
        java.nio.file.LinkOption[] $r2;

        $r2 := @parameter0: java.nio.file.LinkOption[];

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.nio.file.LinkOption[]) $r1;

        $r0 = new com.google.common.io.MoreFiles$2;

        specialinvoke $r0.<com.google.common.io.MoreFiles$2: void <init>(java.nio.file.LinkOption[])>($r2);

        return $r0;
    }

    public static transient boolean isDirectory(java.nio.file.SecureDirectoryStream, java.nio.file.Path, java.nio.file.LinkOption[])
    {
        java.nio.file.LinkOption[] $r1;
        java.nio.file.SecureDirectoryStream $r2;
        java.nio.file.attribute.FileAttributeView $r3;
        java.nio.file.attribute.BasicFileAttributeView $r4;
        java.nio.file.attribute.BasicFileAttributes $r5;
        java.nio.file.Path $r0;
        boolean $z0;

        $r2 := @parameter0: java.nio.file.SecureDirectoryStream;

        $r0 := @parameter1: java.nio.file.Path;

        $r1 := @parameter2: java.nio.file.LinkOption[];

        $r3 = interfaceinvoke $r2.<java.nio.file.SecureDirectoryStream: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.lang.Object,java.lang.Class,java.nio.file.LinkOption[])>($r0, class "Ljava/nio/file/attribute/BasicFileAttributeView;", $r1);

        $r4 = (java.nio.file.attribute.BasicFileAttributeView) $r3;

        $r5 = interfaceinvoke $r4.<java.nio.file.attribute.BasicFileAttributeView: java.nio.file.attribute.BasicFileAttributes readAttributes()>();

        $z0 = interfaceinvoke $r5.<java.nio.file.attribute.BasicFileAttributes: boolean isDirectory()>();

        return $z0;
    }

    public static transient com.google.common.base.Predicate isRegularFile(java.nio.file.LinkOption[])
    {
        java.lang.Object $r1;
        com.google.common.io.MoreFiles$3 $r0;
        java.nio.file.LinkOption[] $r2;

        $r2 := @parameter0: java.nio.file.LinkOption[];

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.nio.file.LinkOption[]) $r1;

        $r0 = new com.google.common.io.MoreFiles$3;

        specialinvoke $r0.<com.google.common.io.MoreFiles$3: void <init>(java.nio.file.LinkOption[])>($r2);

        return $r0;
    }

    public static com.google.common.collect.ImmutableList listFiles(java.nio.file.Path)
    {
        java.lang.Throwable $r0, $r4, $r5;
        java.io.IOException $r7;
        java.nio.file.DirectoryIteratorException $r6;
        java.nio.file.DirectoryStream $r2;
        com.google.common.collect.ImmutableList $r3;
        java.nio.file.Path $r1;

        $r1 := @parameter0: java.nio.file.Path;

     label01:
        $r2 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>($r1);

     label02:
        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r2);

     label03:
        if $r2 == null goto label18;

     label04:
        interfaceinvoke $r2.<java.nio.file.DirectoryStream: void close()>();

     label05:
        return $r3;

     label06:
        $r0 := @caughtexception;

        goto label09;

     label07:
        $r4 := @caughtexception;

     label08:
        throw $r4;

     label09:
        if $r2 == null goto label16;

        if $r4 == null goto label15;

     label10:
        interfaceinvoke $r2.<java.nio.file.DirectoryStream: void close()>();

     label11:
        goto label16;

     label12:
        $r5 := @caughtexception;

     label13:
        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label14:
        goto label16;

     label15:
        interfaceinvoke $r2.<java.nio.file.DirectoryStream: void close()>();

     label16:
        throw $r0;

     label17:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()>();

        throw $r7;

     label18:
        return $r3;

        catch java.nio.file.DirectoryIteratorException from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.nio.file.DirectoryIteratorException from label04 to label05 with label17;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.nio.file.DirectoryIteratorException from label13 to label14 with label17;
        catch java.nio.file.DirectoryIteratorException from label15 to label17 with label17;
    }

    public static void throwDeleteFailed(java.nio.file.Path, java.util.Collection)
    {
        java.util.Iterator $r4;
        java.util.Collection $r2;
        java.nio.file.FileSystemException $r0;
        java.io.IOException $r6;
        java.lang.Object $r5;
        java.lang.String $r3;
        java.nio.file.Path $r1;
        boolean $z0;

        $r1 := @parameter0: java.nio.file.Path;

        $r2 := @parameter1: java.util.Collection;

        $r0 = new java.nio.file.FileSystemException;

        $r3 = interfaceinvoke $r1.<java.nio.file.Path: java.lang.String toString()>();

        specialinvoke $r0.<java.nio.file.FileSystemException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r3, null, "failed to delete one or more files; see suppressed exceptions for details");

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.io.IOException) $r5;

        virtualinvoke $r0.<java.nio.file.FileSystemException: void addSuppressed(java.lang.Throwable)>($r6);

        goto label1;

     label2:
        goto label3;

     label3:
        throw $r0;
    }

    public static void touch(java.nio.file.Path)
    {
        java.nio.file.NoSuchFileException $r1;
        java.nio.file.attribute.FileAttribute[] $r4;
        java.nio.file.attribute.FileTime $r3;
        long $l0;
        java.nio.file.FileAlreadyExistsException $r2;
        java.nio.file.Path $r0;

        $r0 := @parameter0: java.nio.file.Path;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = staticinvoke <java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime fromMillis(long)>($l0);

        staticinvoke <java.nio.file.Files: java.nio.file.Path setLastModifiedTime(java.nio.file.Path,java.nio.file.attribute.FileTime)>($r0, $r3);

     label2:
        return;

     label3:
        $r4 = newarray (java.nio.file.attribute.FileAttribute)[0];

     label4:
        staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r0, $r4);

     label5:
        return;

     label6:
        $r1 := @caughtexception;

        goto label3;

     label7:
        $r2 := @caughtexception;

        return;

        catch java.nio.file.NoSuchFileException from label1 to label2 with label6;
        catch java.nio.file.FileAlreadyExistsException from label4 to label5 with label7;
    }
}
