public class org.codehaus.jackson.map.ser.PropertyBuilder extends java.lang.Object
{
    public final org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector;
    public final org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc;
    public final org.codehaus.jackson.map.SerializationConfig _config;
    public java.lang.Object _defaultBean;
    public final org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _outputProps;

    public void <init>(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r1;
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion $r3;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        org.codehaus.jackson.map.SerializationConfig $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.SerializationConfig _config> = $r2;

        r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc> = $r1;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion getSerializationInclusion()>();

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion findSerializationInclusion(org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)>($r3);

        r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _outputProps> = $r3;

        $r2 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.SerializationConfig _config>;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector> = $r4;

        return;
    }

    public java.lang.Object _throwWrapped(java.lang.Exception, java.lang.String, java.lang.Object)
    {
        java.lang.Throwable $r2, $r4;
        java.lang.Error $r9;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        java.lang.RuntimeException $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object $r1;
        java.lang.StringBuilder $r7;
        java.lang.Class $r8;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        $r2 := @parameter0: java.lang.Exception;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.Object;

     label1:
        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r4 == null goto label2;

        $r2 = virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        $z0 = $r2 instanceof java.lang.Error;

        if $z0 != 0 goto label4;

        $z0 = $r2 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label3;

        $r5 = (java.lang.RuntimeException) $r2;

        throw $r5;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get property \'");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of default ");

        $r8 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instance");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r6;

     label4:
        $r9 = (java.lang.Error) $r2;

        goto label5;

     label5:
        throw $r9;
    }

    public org.codehaus.jackson.map.ser.BeanPropertyWriter buildWriter(java.lang.String, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.introspect.AnnotatedMember, boolean)
    {
        java.lang.IllegalStateException $r15;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r17;
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion $r19;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r6;
        org.codehaus.jackson.map.util.Annotations $r22;
        int[] $r20;
        org.codehaus.jackson.map.TypeSerializer $r4, $r5;
        int $i0;
        org.codehaus.jackson.type.JavaType $r2, $r10, $r13, $r14;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r7;
        java.lang.String $r1;
        java.lang.reflect.Method $r11;
        boolean $z0, $z1;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r12;
        org.codehaus.jackson.map.JsonSerializer $r3;
        java.lang.reflect.Field $r9;
        org.codehaus.jackson.map.AnnotationIntrospector $r18;
        org.codehaus.jackson.map.introspect.AnnotatedField $r8;
        java.lang.StringBuilder $r16;
        java.lang.Object $r21;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.JsonSerializer;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 := @parameter4: org.codehaus.jackson.map.TypeSerializer;

        $r6 := @parameter5: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $z0 := @parameter6: boolean;

        $z1 = $r6 instanceof org.codehaus.jackson.map.introspect.AnnotatedField;

        if $z1 == 0 goto label01;

        $r8 = (org.codehaus.jackson.map.introspect.AnnotatedField) $r6;

        $r10 = $r2;

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.reflect.Field getAnnotated()>();

        $r11 = null;

        goto label02;

     label01:
        $r12 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r6;

        $r10 = $r2;

        $r11 = virtualinvoke $r12.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        $r9 = null;

     label02:
        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.type.JavaType findSerializationType(org.codehaus.jackson.map.introspect.Annotated,boolean,org.codehaus.jackson.type.JavaType)>($r6, $z0, $r10);

        $r14 = $r13;

        if $r5 == null goto label05;

        if $r13 != null goto label03;

        $r14 = $r10;

     label03:
        $r10 = virtualinvoke $r14.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        if $r10 == null goto label04;

        $r14 = virtualinvoke $r14.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withContentTypeHandler(java.lang.Object)>($r5);

        virtualinvoke $r14.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        goto label06;

     label04:
        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem trying to create BeanPropertyWriter for property \'");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (of type ");

        $r17 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc>;

        $r2 = virtualinvoke $r17.<org.codehaus.jackson.map.BeanDescription: org.codehaus.jackson.type.JavaType getType()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("); serialization type ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no content");

        $r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r15;

     label05:
        $r14 = $r13;

     label06:
        $r18 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r19 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _outputProps>;

        $r19 = virtualinvoke $r18.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion findSerializationInclusion(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)>($r6, $r19);

        if $r19 == null goto label11;

        $r20 = <org.codehaus.jackson.map.ser.PropertyBuilder$1: int[] $SwitchMap$org$codehaus$jackson$map$annotate$JsonSerialize$Inclusion>;

        $i0 = virtualinvoke $r19.<java.lang.Enum: int ordinal()>();

        $i0 = $r20[$i0];

        if $i0 == 1 goto label09;

        if $i0 == 2 goto label07;

        goto label11;

     label07:
        $r21 = null;

     label08:
        $z0 = 1;

        goto label13;

     label09:
        $r21 = virtualinvoke r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object getDefaultValue(java.lang.String,java.lang.reflect.Method,java.lang.reflect.Field)>($r1, $r11, $r9);

        if $r21 != null goto label10;

        goto label08;

     label10:
        goto label12;

     label11:
        $r21 = null;

     label12:
        $z0 = 0;

     label13:
        $r7 = new org.codehaus.jackson.map.ser.BeanPropertyWriter;

        $r17 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc>;

        $r22 = virtualinvoke $r17.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.util.Annotations getClassAnnotations()>();

        specialinvoke $r7.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void <init>(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.util.Annotations,java.lang.String,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.type.JavaType,java.lang.reflect.Method,java.lang.reflect.Field,boolean,java.lang.Object)>($r6, $r22, $r1, $r2, $r3, $r4, $r14, $r11, $r9, $z0, $r21);

        return $r7;
    }

    public org.codehaus.jackson.type.JavaType findSerializationType(org.codehaus.jackson.map.introspect.Annotated, boolean, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.annotate.JsonSerialize$Typing $r11, $r12;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        java.lang.IllegalArgumentException $r6;
        org.codehaus.jackson.map.SerializationConfig $r9;
        org.codehaus.jackson.map.AnnotationIntrospector $r3;
        org.codehaus.jackson.map.introspect.Annotated $r1;
        org.codehaus.jackson.type.JavaType $r2, $r10;
        java.lang.Class $r4, $r5;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r3 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationType(org.codehaus.jackson.map.introspect.Annotated)>($r1);

        if $r4 == null goto label5;

        $r5 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenBy(java.lang.Class)>($r4);

     label1:
        goto label3;

     label2:
        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType forcedNarrowBy(java.lang.Class)>($r4);

        goto label1;

     label3:
        $z0 = 1;

        goto label5;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal concrete-type annotation for method \'");

        $r8 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.Annotated: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': class ");

        $r8 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not a super-type of (declared) class ");

        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label5:
        $r9 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.SerializationConfig _config>;

        $r10 = staticinvoke <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.type.JavaType modifySecondaryTypesByAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>($r9, $r1, $r2);

        if $r10 == $r2 goto label6;

        $r2 = $r10;

        $z0 = 1;

     label6:
        if $z0 != 0 goto label8;

        $r3 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r11 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.annotate.JsonSerialize$Typing findSerializationTyping(org.codehaus.jackson.map.introspect.Annotated)>($r1);

        if $r11 == null goto label8;

        $r12 = <org.codehaus.jackson.map.annotate.JsonSerialize$Typing: org.codehaus.jackson.map.annotate.JsonSerialize$Typing STATIC>;

        if $r11 != $r12 goto label7;

        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        if $z0 == 0 goto label9;

        return $r2;

     label9:
        return null;
    }

    public org.codehaus.jackson.map.util.Annotations getClassAnnotations()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        org.codehaus.jackson.map.util.Annotations $r1;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        $r2 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.util.Annotations getClassAnnotations()>();

        return $r1;
    }

    public java.lang.Object getDefaultBean()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        org.codehaus.jackson.map.SerializationConfig $r3;
        java.lang.IllegalArgumentException $r7;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5;
        java.lang.Object $r1;
        java.lang.Class $r6;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        org.codehaus.jackson.map.SerializationConfig$Feature $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        $r1 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object _defaultBean>;

        if $r1 != null goto label2;

        $r2 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc>;

        $r3 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.SerializationConfig _config>;

        $r4 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r4);

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.Object instantiateBean(boolean)>($z0);

        r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object _defaultBean> = $r1;

        $r1 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object _defaultBean>;

        if $r1 == null goto label1;

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: org.codehaus.jackson.map.introspect.BasicBeanDescription _beanDesc>;

        $r5 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class getAnnotated()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r9 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no default constructor; can not instantiate default bean value to support \'properties=JsonSerialize.Inclusion.NON_DEFAULT\' annotation");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label2:
        $r1 = r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object _defaultBean>;

        return $r1;
    }

    public java.lang.Object getDefaultValue(java.lang.String, java.lang.reflect.Method, java.lang.reflect.Field)
    {
        java.lang.Object[] $r5;
        org.codehaus.jackson.map.ser.PropertyBuilder r0;
        java.lang.reflect.Field $r3;
        java.lang.Exception $r7;
        java.lang.Object $r4, $r6;
        java.lang.String $r1;
        java.lang.reflect.Method $r2;

        r0 := @this: org.codehaus.jackson.map.ser.PropertyBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.reflect.Method;

        $r3 := @parameter2: java.lang.reflect.Field;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object getDefaultBean()>();

        if $r2 == null goto label3;

        $r5 = newarray (java.lang.Object)[0];

     label1:
        $r6 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r5);

     label2:
        return $r6;

     label3:
        $r6 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r4);

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ser.PropertyBuilder: java.lang.Object _throwWrapped(java.lang.Exception,java.lang.String,java.lang.Object)>($r7, $r1, $r4);

        return $r4;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
}
