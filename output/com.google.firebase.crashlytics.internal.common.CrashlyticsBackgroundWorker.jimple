public class com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker extends java.lang.Object
{
    public final java.util.concurrent.ExecutorService executorService;
    public java.lang.ThreadLocal isExecutorThread;
    public com.google.android.gms.tasks.Task tail;
    public final java.lang.Object tailLock;

    public void <init>(java.util.concurrent.ExecutorService)
    {
        java.lang.ThreadLocal $r4;
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$1 $r5;
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker r0;
        java.lang.Object $r3;
        java.util.concurrent.ExecutorService $r1;
        com.google.android.gms.tasks.Task $r2;

        r0 := @this: com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.android.gms.tasks.Tasks: com.google.android.gms.tasks.Task forResult(java.lang.Object)>(null);

        r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: com.google.android.gms.tasks.Task tail> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: java.lang.Object tailLock> = $r3;

        $r4 = new java.lang.ThreadLocal;

        specialinvoke $r4.<java.lang.ThreadLocal: void <init>()>();

        r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: java.lang.ThreadLocal isExecutorThread> = $r4;

        r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: java.util.concurrent.ExecutorService executorService> = $r1;

        $r5 = new com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$1;

        specialinvoke $r5.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$1: void <init>(com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker)>(r0);

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r5);

        return;
    }

    public static java.lang.ThreadLocal access$000(com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker)
    {
        java.lang.ThreadLocal r1;
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker $r0;

        $r0 := @parameter0: com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker;

        r1 = $r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: java.lang.ThreadLocal isExecutorThread>;

        return r1;
    }

    private com.google.android.gms.tasks.Task ignoreResult(com.google.android.gms.tasks.Task)
    {
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$4 $r2;
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker r0;
        java.util.concurrent.ExecutorService $r1;
        com.google.android.gms.tasks.Task $r3;

        r0 := @this: com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker;

        $r3 := @parameter0: com.google.android.gms.tasks.Task;

        $r1 = r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: java.util.concurrent.ExecutorService executorService>;

        $r2 = new com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$4;

        specialinvoke $r2.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$4: void <init>(com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker)>(r0);

        $r3 = virtualinvoke $r3.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task continueWith(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation)>($r1, $r2);

        return $r3;
    }

    private boolean isRunningOnThread()
    {
        java.lang.ThreadLocal $r2;
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker r0;
        java.lang.Boolean $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r2 = r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: java.lang.ThreadLocal isExecutorThread>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    private com.google.android.gms.tasks.Continuation newContinuation(java.util.concurrent.Callable)
    {
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$3 $r2;
        java.util.concurrent.Callable $r1;
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker r0;

        r0 := @this: com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker;

        $r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = new com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$3;

        specialinvoke $r2.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$3: void <init>(com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker,java.util.concurrent.Callable)>(r0, $r1);

        return $r2;
    }

    public void checkRunningOnThread()
    {
        java.lang.IllegalStateException $r1;
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker r0;
        boolean $z0;

        r0 := @this: com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker;

        $z0 = specialinvoke r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: boolean isRunningOnThread()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not running on background worker thread as intended.");

        throw $r1;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        java.util.concurrent.ExecutorService r1;
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker r0;

        r0 := @this: com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker;

        r1 = r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: java.util.concurrent.ExecutorService executorService>;

        return r1;
    }

    public com.google.android.gms.tasks.Task submit(java.lang.Runnable)
    {
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$2 $r1;
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker r0;
        java.lang.Runnable $r3;
        com.google.android.gms.tasks.Task $r2;

        r0 := @this: com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker;

        $r3 := @parameter0: java.lang.Runnable;

        $r1 = new com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$2;

        specialinvoke $r1.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker$2: void <init>(com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker,java.lang.Runnable)>(r0, $r3);

        $r2 = virtualinvoke r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: com.google.android.gms.tasks.Task submit(java.util.concurrent.Callable)>($r1);

        return $r2;
    }

    public com.google.android.gms.tasks.Task submit(java.util.concurrent.Callable)
    {
        java.lang.Throwable $r7;
        java.util.concurrent.Callable $r3;
        com.google.android.gms.tasks.Task $r4, $r6;
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker r0;
        com.google.android.gms.tasks.Continuation $r5;
        java.lang.Object $r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker;

        $r3 := @parameter0: java.util.concurrent.Callable;

        $r1 = r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: java.lang.Object tailLock>;

        entermonitor $r1;

     label1:
        $r4 = r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: com.google.android.gms.tasks.Task tail>;

        $r2 = r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: java.util.concurrent.ExecutorService executorService>;

        $r5 = specialinvoke r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: com.google.android.gms.tasks.Continuation newContinuation(java.util.concurrent.Callable)>($r3);

        $r4 = virtualinvoke $r4.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task continueWith(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation)>($r2, $r5);

        $r6 = specialinvoke r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: com.google.android.gms.tasks.Task ignoreResult(com.google.android.gms.tasks.Task)>($r4);

        r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: com.google.android.gms.tasks.Task tail> = $r6;

        exitmonitor $r1;

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public com.google.android.gms.tasks.Task submitTask(java.util.concurrent.Callable)
    {
        java.lang.Throwable $r7;
        java.util.concurrent.Callable $r3;
        com.google.android.gms.tasks.Task $r4, $r6;
        com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker r0;
        com.google.android.gms.tasks.Continuation $r5;
        java.lang.Object $r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker;

        $r3 := @parameter0: java.util.concurrent.Callable;

        $r1 = r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: java.lang.Object tailLock>;

        entermonitor $r1;

     label1:
        $r4 = r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: com.google.android.gms.tasks.Task tail>;

        $r2 = r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: java.util.concurrent.ExecutorService executorService>;

        $r5 = specialinvoke r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: com.google.android.gms.tasks.Continuation newContinuation(java.util.concurrent.Callable)>($r3);

        $r4 = virtualinvoke $r4.<com.google.android.gms.tasks.Task: com.google.android.gms.tasks.Task continueWithTask(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation)>($r2, $r5);

        $r6 = specialinvoke r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: com.google.android.gms.tasks.Task ignoreResult(com.google.android.gms.tasks.Task)>($r4);

        r0.<com.google.firebase.crashlytics.internal.common.CrashlyticsBackgroundWorker: com.google.android.gms.tasks.Task tail> = $r6;

        exitmonitor $r1;

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
