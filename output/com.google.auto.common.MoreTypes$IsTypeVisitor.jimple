public final class com.google.auto.common.MoreTypes$IsTypeVisitor extends javax.lang.model.util.SimpleTypeVisitor6
{
    public static final com.google.auto.common.MoreTypes$IsTypeVisitor INSTANCE;

    static void <clinit>()
    {
        com.google.auto.common.MoreTypes$IsTypeVisitor $r0;

        $r0 = new com.google.auto.common.MoreTypes$IsTypeVisitor;

        specialinvoke $r0.<com.google.auto.common.MoreTypes$IsTypeVisitor: void <init>()>();

        <com.google.auto.common.MoreTypes$IsTypeVisitor: com.google.auto.common.MoreTypes$IsTypeVisitor INSTANCE> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;

        r0 := @this: com.google.auto.common.MoreTypes$IsTypeVisitor;

        specialinvoke r0.<javax.lang.model.util.SimpleTypeVisitor6: void <init>()>();

        return;
    }

    public static com.google.auto.common.MoreTypes$IsTypeVisitor access$2000()
    {
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;

        r0 = <com.google.auto.common.MoreTypes$IsTypeVisitor: com.google.auto.common.MoreTypes$IsTypeVisitor INSTANCE>;

        return r0;
    }

    public java.lang.Boolean defaultAction(javax.lang.model.type.TypeMirror, java.lang.Void)
    {
        java.lang.Void $r1;
        javax.lang.model.type.TypeMirror $r3;
        java.lang.Boolean $r2;
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;

        r0 := @this: com.google.auto.common.MoreTypes$IsTypeVisitor;

        $r3 := @parameter0: javax.lang.model.type.TypeMirror;

        $r1 := @parameter1: java.lang.Void;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r2;
    }

    public volatile java.lang.Object defaultAction(javax.lang.model.type.TypeMirror, java.lang.Object)
    {
        java.lang.Void $r4;
        javax.lang.model.type.TypeMirror $r2;
        java.lang.Boolean $r1;
        java.lang.Object $r3;
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;

        r0 := @this: com.google.auto.common.MoreTypes$IsTypeVisitor;

        $r2 := @parameter0: javax.lang.model.type.TypeMirror;

        $r3 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Void) $r3;

        $r1 = virtualinvoke r0.<com.google.auto.common.MoreTypes$IsTypeVisitor: java.lang.Boolean defaultAction(javax.lang.model.type.TypeMirror,java.lang.Void)>($r2, $r4);

        return $r1;
    }

    public java.lang.Boolean visitArray(javax.lang.model.type.ArrayType, java.lang.Void)
    {
        javax.lang.model.type.ArrayType $r3;
        java.lang.Void $r1;
        java.lang.Boolean $r2;
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;

        r0 := @this: com.google.auto.common.MoreTypes$IsTypeVisitor;

        $r3 := @parameter0: javax.lang.model.type.ArrayType;

        $r1 := @parameter1: java.lang.Void;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r2;
    }

    public volatile java.lang.Object visitArray(javax.lang.model.type.ArrayType, java.lang.Object)
    {
        javax.lang.model.type.ArrayType $r2;
        java.lang.Void $r4;
        java.lang.Boolean $r1;
        java.lang.Object $r3;
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;

        r0 := @this: com.google.auto.common.MoreTypes$IsTypeVisitor;

        $r2 := @parameter0: javax.lang.model.type.ArrayType;

        $r3 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Void) $r3;

        $r1 = virtualinvoke r0.<com.google.auto.common.MoreTypes$IsTypeVisitor: java.lang.Boolean visitArray(javax.lang.model.type.ArrayType,java.lang.Void)>($r2, $r4);

        return $r1;
    }

    public java.lang.Boolean visitDeclared(javax.lang.model.type.DeclaredType, java.lang.Void)
    {
        java.lang.Void $r1;
        javax.lang.model.type.DeclaredType $r2;
        java.lang.Boolean $r4;
        javax.lang.model.element.Element $r3;
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;
        boolean $z0;

        r0 := @this: com.google.auto.common.MoreTypes$IsTypeVisitor;

        $r2 := @parameter0: javax.lang.model.type.DeclaredType;

        $r1 := @parameter1: java.lang.Void;

        $r3 = interfaceinvoke $r2.<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>();

        $z0 = staticinvoke <com.google.auto.common.MoreElements: boolean isType(javax.lang.model.element.Element)>($r3);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r4;
    }

    public volatile java.lang.Object visitDeclared(javax.lang.model.type.DeclaredType, java.lang.Object)
    {
        java.lang.Void $r4;
        javax.lang.model.type.DeclaredType $r2;
        java.lang.Boolean $r1;
        java.lang.Object $r3;
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;

        r0 := @this: com.google.auto.common.MoreTypes$IsTypeVisitor;

        $r2 := @parameter0: javax.lang.model.type.DeclaredType;

        $r3 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Void) $r3;

        $r1 = virtualinvoke r0.<com.google.auto.common.MoreTypes$IsTypeVisitor: java.lang.Boolean visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>($r2, $r4);

        return $r1;
    }

    public java.lang.Boolean visitNoType(javax.lang.model.type.NoType, java.lang.Void)
    {
        java.lang.Void $r2;
        javax.lang.model.type.NoType $r1;
        java.lang.Boolean $r5;
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;
        javax.lang.model.type.TypeKind $r3, $r4;
        boolean $z0;

        r0 := @this: com.google.auto.common.MoreTypes$IsTypeVisitor;

        $r1 := @parameter0: javax.lang.model.type.NoType;

        $r2 := @parameter1: java.lang.Void;

        $r3 = interfaceinvoke $r1.<javax.lang.model.type.NoType: javax.lang.model.type.TypeKind getKind()>();

        $r4 = <javax.lang.model.type.TypeKind: javax.lang.model.type.TypeKind VOID>;

        $z0 = virtualinvoke $r3.<javax.lang.model.type.TypeKind: boolean equals(java.lang.Object)>($r4);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r5;
    }

    public volatile java.lang.Object visitNoType(javax.lang.model.type.NoType, java.lang.Object)
    {
        java.lang.Void $r4;
        javax.lang.model.type.NoType $r2;
        java.lang.Boolean $r1;
        java.lang.Object $r3;
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;

        r0 := @this: com.google.auto.common.MoreTypes$IsTypeVisitor;

        $r2 := @parameter0: javax.lang.model.type.NoType;

        $r3 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Void) $r3;

        $r1 = virtualinvoke r0.<com.google.auto.common.MoreTypes$IsTypeVisitor: java.lang.Boolean visitNoType(javax.lang.model.type.NoType,java.lang.Void)>($r2, $r4);

        return $r1;
    }

    public java.lang.Boolean visitPrimitive(javax.lang.model.type.PrimitiveType, java.lang.Void)
    {
        java.lang.Void $r1;
        java.lang.Boolean $r2;
        javax.lang.model.type.PrimitiveType $r3;
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;

        r0 := @this: com.google.auto.common.MoreTypes$IsTypeVisitor;

        $r3 := @parameter0: javax.lang.model.type.PrimitiveType;

        $r1 := @parameter1: java.lang.Void;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r2;
    }

    public volatile java.lang.Object visitPrimitive(javax.lang.model.type.PrimitiveType, java.lang.Object)
    {
        java.lang.Void $r4;
        java.lang.Boolean $r1;
        javax.lang.model.type.PrimitiveType $r2;
        java.lang.Object $r3;
        com.google.auto.common.MoreTypes$IsTypeVisitor r0;

        r0 := @this: com.google.auto.common.MoreTypes$IsTypeVisitor;

        $r2 := @parameter0: javax.lang.model.type.PrimitiveType;

        $r3 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Void) $r3;

        $r1 = virtualinvoke r0.<com.google.auto.common.MoreTypes$IsTypeVisitor: java.lang.Boolean visitPrimitive(javax.lang.model.type.PrimitiveType,java.lang.Void)>($r2, $r4);

        return $r1;
    }
}
