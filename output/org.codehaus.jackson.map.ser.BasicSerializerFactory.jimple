public abstract class org.codehaus.jackson.map.ser.BasicSerializerFactory extends org.codehaus.jackson.map.SerializerFactory
{
    public static final java.util.HashMap _arraySerializers;
    public static final java.util.HashMap _concrete;
    public static final java.util.HashMap _concreteLazy;
    public org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers;

    static void <clinit>()
    {
        java.lang.IllegalStateException $r24;
        org.codehaus.jackson.map.ser.StdSerializers$LongSerializer $r7;
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer $r11;
        org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer $r13;
        org.codehaus.jackson.map.ser.ArraySerializers$IntArraySerializer $r30;
        org.codehaus.jackson.map.ser.JdkSerializers $r16;
        org.codehaus.jackson.map.ser.ArraySerializers$BooleanArraySerializer $r26;
        boolean $z0;
        org.codehaus.jackson.map.ser.StdSerializers$StringSerializer $r3;
        java.util.Collection $r17;
        org.codehaus.jackson.map.ser.StdSerializers$SqlTimeSerializer $r15;
        org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer $r12;
        org.codehaus.jackson.map.JsonSerializer $r22;
        org.codehaus.jackson.map.ser.ArraySerializers$FloatArraySerializer $r32;
        org.codehaus.jackson.map.ser.StdSerializers$SqlDateSerializer $r14;
        org.codehaus.jackson.map.ser.StdSerializers$IntegerSerializer $r6;
        java.lang.StringBuilder $r25;
        java.util.HashMap $r0;
        org.codehaus.jackson.map.ser.ToStringSerializer $r4;
        org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer $r28;
        org.codehaus.jackson.map.ser.ArraySerializers$DoubleArraySerializer $r33;
        java.lang.String $r2;
        org.codehaus.jackson.map.ser.ArraySerializers$ByteArraySerializer $r27;
        java.util.Map$Entry $r20;
        org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer $r10;
        org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer $r29;
        java.util.Iterator $r18;
        org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer $r5;
        org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer $r8;
        org.codehaus.jackson.map.ser.ArraySerializers$LongArraySerializer $r31;
        java.lang.Class $r1, $r23;
        java.lang.Object $r19, $r21;
        org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer $r9;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete> = $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy> = $r0;

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/lang/String;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = new org.codehaus.jackson.map.ser.StdSerializers$StringSerializer;

        specialinvoke $r3.<org.codehaus.jackson.map.ser.StdSerializers$StringSerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r4 = <org.codehaus.jackson.map.ser.ToStringSerializer: org.codehaus.jackson.map.ser.ToStringSerializer instance>;

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/lang/StringBuffer;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/lang/StringBuilder;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/lang/Character;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = <java.lang.Character: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = new org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer;

        specialinvoke $r5.<org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer: void <init>(boolean)>(1);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/lang/Boolean;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = new org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer;

        specialinvoke $r5.<org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer: void <init>(boolean)>(0);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r6 = new org.codehaus.jackson.map.ser.StdSerializers$IntegerSerializer;

        specialinvoke $r6.<org.codehaus.jackson.map.ser.StdSerializers$IntegerSerializer: void <init>()>();

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/lang/Integer;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/lang/Long;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r7 = <org.codehaus.jackson.map.ser.StdSerializers$LongSerializer: org.codehaus.jackson.map.ser.StdSerializers$LongSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r7);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = <java.lang.Long: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r7 = <org.codehaus.jackson.map.ser.StdSerializers$LongSerializer: org.codehaus.jackson.map.ser.StdSerializers$LongSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r7);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/lang/Byte;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r8 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r8);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = <java.lang.Byte: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r8 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r8);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/lang/Short;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r8 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r8);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = <java.lang.Short: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r8 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r8);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/lang/Float;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r9 = <org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer: org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r9);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = <java.lang.Float: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r9 = <org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer: org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r9);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/lang/Double;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r10 = <org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer: org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r10);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = <java.lang.Double: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r10 = <org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer: org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r10);

        $r11 = new org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        specialinvoke $r11.<org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: void <init>()>();

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/math/BigInteger;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r11);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/math/BigDecimal;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r11);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/util/Calendar;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r12 = <org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer: org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r12);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/util/Date;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r13 = <org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer: org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r13);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/sql/Date;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r14 = new org.codehaus.jackson.map.ser.StdSerializers$SqlDateSerializer;

        specialinvoke $r14.<org.codehaus.jackson.map.ser.StdSerializers$SqlDateSerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r14);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/sql/Time;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r15 = new org.codehaus.jackson.map.ser.StdSerializers$SqlTimeSerializer;

        specialinvoke $r15.<org.codehaus.jackson.map.ser.StdSerializers$SqlTimeSerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r15);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r1 = class "Ljava/sql/Timestamp;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r13 = <org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer: org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer instance>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r13);

        $r16 = new org.codehaus.jackson.map.ser.JdkSerializers;

        specialinvoke $r16.<org.codehaus.jackson.map.ser.JdkSerializers: void <init>()>();

        $r17 = virtualinvoke $r16.<org.codehaus.jackson.map.ser.JdkSerializers: java.util.Collection provide()>();

        $r18 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (java.util.Map$Entry) $r19;

        $r19 = interfaceinvoke $r20.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = $r19 instanceof org.codehaus.jackson.map.JsonSerializer;

        if $z0 == 0 goto label2;

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r21 = interfaceinvoke $r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = (java.lang.Class) $r21;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r22 = (org.codehaus.jackson.map.JsonSerializer) $r19;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r22);

        goto label1;

     label2:
        $z0 = $r19 instanceof java.lang.Class;

        if $z0 == 0 goto label3;

        $r1 = (java.lang.Class) $r19;

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy>;

        $r19 = interfaceinvoke $r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r23 = (java.lang.Class) $r19;

        $r2 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        goto label1;

     label3:
        $r24 = new java.lang.IllegalStateException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: unrecognized value of type ");

        $r1 = virtualinvoke $r20.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r24;

     label4:
        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy>;

        $r1 = class "Lorg/codehaus/jackson/util/TokenBuffer;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, class "Lorg/codehaus/jackson/map/ser/StdSerializers$TokenBufferSerializer;");

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers> = $r0;

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r1 = class "[Z";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r26 = new org.codehaus.jackson.map.ser.ArraySerializers$BooleanArraySerializer;

        specialinvoke $r26.<org.codehaus.jackson.map.ser.ArraySerializers$BooleanArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r26);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r1 = class "[B";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r27 = new org.codehaus.jackson.map.ser.ArraySerializers$ByteArraySerializer;

        specialinvoke $r27.<org.codehaus.jackson.map.ser.ArraySerializers$ByteArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r27);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r1 = class "[C";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r28 = new org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer;

        specialinvoke $r28.<org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r28);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r1 = class "[S";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r29 = new org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer;

        specialinvoke $r29.<org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r29);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r1 = class "[I";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r30 = new org.codehaus.jackson.map.ser.ArraySerializers$IntArraySerializer;

        specialinvoke $r30.<org.codehaus.jackson.map.ser.ArraySerializers$IntArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r30);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r1 = class "[J";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r31 = new org.codehaus.jackson.map.ser.ArraySerializers$LongArraySerializer;

        specialinvoke $r31.<org.codehaus.jackson.map.ser.ArraySerializers$LongArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r31);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r1 = class "[F";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r32 = new org.codehaus.jackson.map.ser.ArraySerializers$FloatArraySerializer;

        specialinvoke $r32.<org.codehaus.jackson.map.ser.ArraySerializers$FloatArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r32);

        $r0 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r1 = class "[D";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r33 = new org.codehaus.jackson.map.ser.ArraySerializers$DoubleArraySerializer;

        specialinvoke $r33.<org.codehaus.jackson.map.ser.ArraySerializers$DoubleArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r33);

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r1;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        specialinvoke r0.<org.codehaus.jackson.map.SerializerFactory: void <init>()>();

        $r1 = <org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory instance>;

        r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers> = $r1;

        return;
    }

    public static org.codehaus.jackson.map.JsonSerializer findContentSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.JsonSerializer $r7;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r3;
        org.codehaus.jackson.map.introspect.Annotated $r0;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r6;
        java.lang.Class $r4, $r5;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r0 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        $r2 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findContentSerializer(org.codehaus.jackson.map.introspect.Annotated)>($r0);

        $r5 = $r4;

        if $r4 == null goto label1;

        if $r4 != class "Lorg/codehaus/jackson/map/JsonSerializer$None;" goto label2;

     label1:
        if $r2 == null goto label2;

        $r6 = interfaceinvoke $r2.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.map.introspect.AnnotatedMember getMember()>();

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findContentSerializer(org.codehaus.jackson.map.introspect.Annotated)>($r6);

     label2:
        if $r5 == null goto label3;

        if $r5 == class "Lorg/codehaus/jackson/map/JsonSerializer$None;" goto label3;

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.JsonSerializer serializerInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>($r0, $r5);

        return $r7;

     label3:
        return null;
    }

    public static org.codehaus.jackson.map.JsonSerializer findKeySerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.JsonSerializer $r7;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r3;
        org.codehaus.jackson.map.introspect.Annotated $r0;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r6;
        java.lang.Class $r4, $r5;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r0 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        $r2 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findKeySerializer(org.codehaus.jackson.map.introspect.Annotated)>($r0);

        $r5 = $r4;

        if $r4 == null goto label1;

        if $r4 != class "Lorg/codehaus/jackson/map/JsonSerializer$None;" goto label2;

     label1:
        if $r2 == null goto label2;

        $r6 = interfaceinvoke $r2.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.map.introspect.AnnotatedMember getMember()>();

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findKeySerializer(org.codehaus.jackson.map.introspect.Annotated)>($r6);

     label2:
        if $r5 == null goto label3;

        if $r5 == class "Lorg/codehaus/jackson/map/JsonSerializer$None;" goto label3;

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.JsonSerializer serializerInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>($r0, $r5);

        return $r7;

     label3:
        return null;
    }

    public static org.codehaus.jackson.type.JavaType modifySecondaryTypesByAnnotation(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.SerializationConfig $r0;
        java.lang.IllegalArgumentException $r7, $r8;
        org.codehaus.jackson.map.AnnotationIntrospector $r3;
        org.codehaus.jackson.map.introspect.Annotated $r1;
        org.codehaus.jackson.map.type.MapType $r6;
        org.codehaus.jackson.type.JavaType $r2, $r4;
        java.lang.Class $r5;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        boolean $z0;

        $r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        $r2 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r3 = virtualinvoke $r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 == 0 goto label9;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationKeyType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>($r1, $r4);

        if $r5 == null goto label5;

        $z0 = $r2 instanceof org.codehaus.jackson.map.type.MapType;

        if $z0 == 0 goto label4;

        $r6 = (org.codehaus.jackson.map.type.MapType) $r2;

     label1:
        $r4 = virtualinvoke $r6.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType widenKey(java.lang.Class)>($r5);

     label2:
        $r2 = $r4;

        goto label5;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to narrow key type ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with key-type annotation (");

        $r10 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r10 = virtualinvoke $r7.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label4:
        $r7 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal key-type annotation: type ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a Map type");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label5:
        $r4 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationContentType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>($r1, $r4);

        if $r5 == null goto label9;

     label6:
        $r4 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenContentsBy(java.lang.Class)>($r5);

     label7:
        return $r4;

     label8:
        $r8 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to narrow content type ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with content-type annotation (");

        $r10 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r10 = virtualinvoke $r8.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label9:
        return $r2;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label6 to label7 with label8;
    }

    public org.codehaus.jackson.map.JsonSerializer buildArraySerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.ArrayType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r6;
        java.util.HashMap $r9;
        org.codehaus.jackson.map.SerializationConfig $r5;
        org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer $r8;
        org.codehaus.jackson.map.ser.impl.ObjectArraySerializer $r13;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.type.JavaType $r14;
        java.lang.String $r10;
        boolean $z0;
        org.codehaus.jackson.map.JsonSerializer $r4, $r12;
        org.codehaus.jackson.map.BeanProperty $r2;
        java.lang.Class $r7;
        java.lang.Object $r11;
        org.codehaus.jackson.map.type.ArrayType $r1;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r5 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.type.ArrayType;

        $r6 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r3 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        $r4 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if class "[Ljava/lang/String;" != $r7 goto label1;

        $r8 = new org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer;

        specialinvoke $r8.<org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer: void <init>(org.codehaus.jackson.map.BeanProperty)>($r2);

        return $r8;

     label1:
        $r9 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r10 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (org.codehaus.jackson.map.JsonSerializer) $r11;

        if $r12 == null goto label2;

        return $r12;

     label2:
        $r13 = new org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $r14 = virtualinvoke $r1.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType getContentType()>();

        specialinvoke $r13.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r14, $z0, $r3, $r2, $r4);

        return $r13;
    }

    public org.codehaus.jackson.map.JsonSerializer buildCollectionLikeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.CollectionLikeType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.type.CollectionLikeType $r1;
        java.util.Iterator $r8;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        org.codehaus.jackson.map.JsonSerializer $r5, $r11;
        org.codehaus.jackson.map.SerializationConfig $r6;
        org.codehaus.jackson.map.BeanProperty $r3;
        java.lang.Iterable $r7;
        org.codehaus.jackson.map.TypeSerializer $r4;
        java.lang.Object $r9;
        org.codehaus.jackson.map.Serializers $r10;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r6 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.type.CollectionLikeType;

        $r2 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r4 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        $r5 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: java.lang.Iterable customSerializers()>();

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.codehaus.jackson.map.Serializers) $r9;

        $r11 = interfaceinvoke $r10.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findCollectionLikeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.CollectionLikeType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>($r6, $r1, $r2, $r3, $r4, $r5);

        if $r11 == null goto label1;

        return $r11;

     label2:
        return null;
    }

    public org.codehaus.jackson.map.JsonSerializer buildCollectionSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.CollectionType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.SerializationConfig $r1;
        java.lang.Iterable $r7;
        org.codehaus.jackson.map.ser.impl.IndexedStringListSerializer $r15;
        org.codehaus.jackson.map.TypeSerializer $r5;
        org.codehaus.jackson.type.JavaType $r14;
        org.codehaus.jackson.map.Serializers $r10;
        org.codehaus.jackson.map.ser.ContainerSerializerBase $r16;
        boolean $z0, $z1;
        java.util.Iterator $r8;
        org.codehaus.jackson.map.type.CollectionType $r2;
        org.codehaus.jackson.map.JsonSerializer $r6, $r11;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.ser.impl.StringCollectionSerializer $r17;
        java.lang.Object $r9;
        java.lang.Class $r12, $r13;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.type.CollectionType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r5 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        $r6 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: java.lang.Iterable customSerializers()>();

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.codehaus.jackson.map.Serializers) $r9;

        $r11 = interfaceinvoke $r10.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findCollectionSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.CollectionType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>($r1, $r2, $r3, $r4, $r5, $r6);

        if $r11 == null goto label1;

        return $r11;

     label2:
        $r12 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r13 = class "Ljava/util/EnumSet;";

        $z1 = virtualinvoke $r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12);

        if $z1 == 0 goto label3;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildEnumSetSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>($r1, $r2, $r3, $r4, $z0, $r5, $r6);

        return $r6;

     label3:
        $r14 = virtualinvoke $r2.<org.codehaus.jackson.map.type.CollectionLikeType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r13 = virtualinvoke $r14.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean isIndexedList(java.lang.Class)>($r12);

        if $z1 == 0 goto label5;

        if $r13 != class "Ljava/lang/String;" goto label4;

        $r15 = new org.codehaus.jackson.map.ser.impl.IndexedStringListSerializer;

        specialinvoke $r15.<org.codehaus.jackson.map.ser.impl.IndexedStringListSerializer: void <init>(org.codehaus.jackson.map.BeanProperty)>($r4);

        return $r15;

     label4:
        $r14 = virtualinvoke $r2.<org.codehaus.jackson.map.type.CollectionLikeType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r16 = staticinvoke <org.codehaus.jackson.map.ser.ContainerSerializers: org.codehaus.jackson.map.ser.ContainerSerializerBase indexedListSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r14, $z0, $r5, $r4, $r6);

        return $r16;

     label5:
        if $r13 != class "Ljava/lang/String;" goto label6;

        $r17 = new org.codehaus.jackson.map.ser.impl.StringCollectionSerializer;

        specialinvoke $r17.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: void <init>(org.codehaus.jackson.map.BeanProperty)>($r4);

        return $r17;

     label6:
        $r14 = virtualinvoke $r2.<org.codehaus.jackson.map.type.CollectionLikeType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r16 = staticinvoke <org.codehaus.jackson.map.ser.ContainerSerializers: org.codehaus.jackson.map.ser.ContainerSerializerBase collectionSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r14, $z0, $r5, $r4, $r6);

        return $r16;
    }

    public org.codehaus.jackson.map.JsonSerializer buildContainerSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r1;
        org.codehaus.jackson.map.SerializationConfig $r3;
        org.codehaus.jackson.map.TypeSerializer $r6;
        org.codehaus.jackson.map.type.MapLikeType $r9;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r7;
        org.codehaus.jackson.type.JavaType $r4, $r5;
        boolean $z0, $z1;
        org.codehaus.jackson.map.type.CollectionLikeType $r12;
        org.codehaus.jackson.map.type.CollectionType $r13;
        org.codehaus.jackson.map.JsonSerializer $r8, $r10;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.type.MapType $r11;
        org.codehaus.jackson.map.type.ArrayType $r14;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r3 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r4 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r3, $r5, $r2);

        if $r6 == null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r3, $r1, $r6, $r2);

     label2:
        $r7 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r8 = staticinvoke <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findContentSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r3, $r7, $r2);

        $z1 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: boolean isMapLikeType()>();

        if $z1 == 0 goto label4;

        $r9 = (org.codehaus.jackson.map.type.MapLikeType) $r4;

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r10 = staticinvoke <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findKeySerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r3, $r7, $r2);

        $z1 = virtualinvoke $r9.<org.codehaus.jackson.map.type.MapLikeType: boolean isTrueMapType()>();

        if $z1 == 0 goto label3;

        $r11 = (org.codehaus.jackson.map.type.MapType) $r9;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildMapSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.MapType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>($r3, $r11, $r1, $r2, $z0, $r10, $r6, $r8);

        return $r8;

     label3:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildMapLikeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.MapLikeType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>($r3, $r9, $r1, $r2, $z0, $r10, $r6, $r8);

        return $r8;

     label4:
        $z1 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: boolean isCollectionLikeType()>();

        if $z1 == 0 goto label6;

        $r12 = (org.codehaus.jackson.map.type.CollectionLikeType) $r4;

        $z1 = virtualinvoke $r12.<org.codehaus.jackson.map.type.CollectionLikeType: boolean isTrueCollectionType()>();

        if $z1 == 0 goto label5;

        $r13 = (org.codehaus.jackson.map.type.CollectionType) $r12;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildCollectionSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.CollectionType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>($r3, $r13, $r1, $r2, $z0, $r6, $r8);

        return $r8;

     label5:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildCollectionLikeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.CollectionLikeType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>($r3, $r12, $r1, $r2, $z0, $r6, $r8);

        return $r8;

     label6:
        $z1 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z1 == 0 goto label7;

        $r14 = (org.codehaus.jackson.map.type.ArrayType) $r4;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildArraySerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.ArrayType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>($r3, $r14, $r1, $r2, $z0, $r6, $r8);

        return $r8;

     label7:
        return null;
    }

    public org.codehaus.jackson.map.JsonSerializer buildEnumMapSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.EnumMapSerializer $r11;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r6;
        org.codehaus.jackson.map.JsonSerializer $r4;
        org.codehaus.jackson.map.SerializationConfig $r5;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r9;
        org.codehaus.jackson.map.util.EnumValues $r10;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.type.JavaType $r1, $r7;
        java.lang.Class $r8;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r5 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r6 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r3 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        $r4 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        $z1 = virtualinvoke $r7.<org.codehaus.jackson.type.JavaType: boolean isEnumType()>();

        if $z1 == 0 goto label1;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r9 = virtualinvoke $r5.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r10 = staticinvoke <org.codehaus.jackson.map.util.EnumValues: org.codehaus.jackson.map.util.EnumValues construct(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector)>($r8, $r9);

        goto label2;

     label1:
        $r10 = null;

     label2:
        $r11 = new org.codehaus.jackson.map.ser.EnumMapSerializer;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        specialinvoke $r11.<org.codehaus.jackson.map.ser.EnumMapSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.util.EnumValues,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r1, $z0, $r10, $r3, $r2, $r4);

        return $r11;
    }

    public org.codehaus.jackson.map.JsonSerializer buildEnumSetSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r1;
        org.codehaus.jackson.map.JsonSerializer $r4;
        org.codehaus.jackson.map.SerializationConfig $r5;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.type.JavaType $r6, $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r5 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r6 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r3 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        $r4 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r6 = virtualinvoke $r6.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r7 = $r6;

        $z0 = virtualinvoke $r6.<org.codehaus.jackson.type.JavaType: boolean isEnumType()>();

        if $z0 != 0 goto label1;

        $r7 = null;

     label1:
        $r4 = staticinvoke <org.codehaus.jackson.map.ser.ContainerSerializers: org.codehaus.jackson.map.JsonSerializer enumSetSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r7, $r2);

        return $r4;
    }

    public org.codehaus.jackson.map.JsonSerializer buildIterableSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r1;
        org.codehaus.jackson.map.SerializationConfig $r3;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.TypeSerializer $r6;
        org.codehaus.jackson.type.JavaType $r4, $r5;
        org.codehaus.jackson.map.ser.ContainerSerializerBase $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r3 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r4 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r4 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType containedType(int)>(0);

        $r5 = $r4;

        if $r4 != null goto label1;

        $r5 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

     label1:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r3, $r5, $r2);

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r3, $r1, $r6, $r2);

        $r7 = staticinvoke <org.codehaus.jackson.map.ser.ContainerSerializers: org.codehaus.jackson.map.ser.ContainerSerializerBase iterableSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r5, $z0, $r6, $r2);

        return $r7;
    }

    public org.codehaus.jackson.map.JsonSerializer buildIteratorSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r1;
        org.codehaus.jackson.map.SerializationConfig $r3;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.TypeSerializer $r6;
        org.codehaus.jackson.type.JavaType $r4, $r5;
        org.codehaus.jackson.map.ser.ContainerSerializerBase $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r3 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r4 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r4 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType containedType(int)>(0);

        $r5 = $r4;

        if $r4 != null goto label1;

        $r5 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

     label1:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r3, $r5, $r2);

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r3, $r1, $r6, $r2);

        $r7 = staticinvoke <org.codehaus.jackson.map.ser.ContainerSerializers: org.codehaus.jackson.map.ser.ContainerSerializerBase iteratorSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r5, $z0, $r6, $r2);

        return $r7;
    }

    public org.codehaus.jackson.map.JsonSerializer buildMapLikeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.MapLikeType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        java.util.Iterator $r9;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.JsonSerializer $r5, $r7, $r12;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.BeanProperty $r4;
        java.lang.Iterable $r8;
        org.codehaus.jackson.map.type.MapLikeType $r2;
        org.codehaus.jackson.map.TypeSerializer $r6;
        java.lang.Object $r10;
        org.codehaus.jackson.map.Serializers $r11;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.type.MapLikeType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r5 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        $r6 := @parameter6: org.codehaus.jackson.map.TypeSerializer;

        $r7 := @parameter7: org.codehaus.jackson.map.JsonSerializer;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: java.lang.Iterable customSerializers()>();

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (org.codehaus.jackson.map.Serializers) $r10;

        $r12 = interfaceinvoke $r11.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findMapLikeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.MapLikeType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>($r1, $r2, $r3, $r4, $r5, $r6, $r7);

        if $r12 == null goto label1;

        return $r12;

     label2:
        return null;
    }

    public org.codehaus.jackson.map.JsonSerializer buildMapSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.MapType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        java.lang.String[] $r17;
        org.codehaus.jackson.map.SerializationConfig $r1;
        java.lang.Iterable $r8;
        org.codehaus.jackson.map.TypeSerializer $r6;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r16;
        org.codehaus.jackson.map.Serializers $r11;
        boolean $z0, $z1;
        java.util.Iterator $r9;
        org.codehaus.jackson.map.JsonSerializer $r5, $r7, $r12;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r15;
        org.codehaus.jackson.map.type.MapType $r2;
        java.lang.Object $r10;
        java.lang.Class $r13, $r14;
        org.codehaus.jackson.map.ser.MapSerializer $r18;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.type.MapType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r5 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        $r6 := @parameter6: org.codehaus.jackson.map.TypeSerializer;

        $r7 := @parameter7: org.codehaus.jackson.map.JsonSerializer;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: java.lang.Iterable customSerializers()>();

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (org.codehaus.jackson.map.Serializers) $r10;

        $r12 = interfaceinvoke $r11.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findMapSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.MapType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>($r1, $r2, $r3, $r4, $r5, $r6, $r7);

        if $r12 == null goto label1;

        return $r12;

     label2:
        $r13 = class "Ljava/util/EnumMap;";

        $r14 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z1 = virtualinvoke $r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r14);

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildEnumMapSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>($r1, $r2, $r3, $r4, $z0, $r6, $r7);

        return $r5;

     label3:
        $r15 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r16 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r17 = virtualinvoke $r15.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String[] findPropertiesToIgnore(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r16);

        $r18 = staticinvoke <org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.ser.MapSerializer construct(java.lang.String[],org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.JsonSerializer)>($r17, $r2, $z0, $r6, $r4, $r5, $r7);

        return $r18;
    }

    public abstract org.codehaus.jackson.map.JsonSerializer createSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty);

    public org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r12;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        java.util.Collection $r11;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r6;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r8;
        org.codehaus.jackson.map.TypeSerializer $r13;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r7;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r9, $r10;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Class $r4;
        org.codehaus.jackson.map.BeanDescription $r5;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r4);

        $r6 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r5;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r8 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.type.JavaType)>($r1, $r7, $r2);

        $r10 = $r9;

        if $r9 != null goto label1;

        $r10 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.TypeResolverBuilder getDefaultTyper(org.codehaus.jackson.type.JavaType)>($r2);

        $r11 = null;

        goto label2;

     label1:
        $r12 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        $r11 = virtualinvoke $r12.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>($r7, $r1, $r8);

     label2:
        if $r10 != null goto label3;

        return null;

     label3:
        $r13 = interfaceinvoke $r10.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r11, $r3);

        return $r13;
    }

    public abstract java.lang.Iterable customSerializers();

    public final org.codehaus.jackson.map.JsonSerializer findSerializerByAddonType(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        org.codehaus.jackson.map.JsonSerializer $r7;
        org.codehaus.jackson.map.SerializationConfig $r4;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.ser.ToStringSerializer r8;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r4 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r6 = class "Ljava/util/Iterator;";

        $z1 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z1 == 0 goto label1;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildIteratorSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>($r4, $r1, $r2, $r3, $z0);

        return $r7;

     label1:
        $r6 = class "Ljava/lang/Iterable;";

        $z1 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildIterableSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>($r4, $r1, $r2, $r3, $z0);

        return $r7;

     label2:
        $r6 = class "Ljava/lang/CharSequence;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label3;

        r8 = <org.codehaus.jackson.map.ser.ToStringSerializer: org.codehaus.jackson.map.ser.ToStringSerializer instance>;

        return r8;

     label3:
        return null;
    }

    public final org.codehaus.jackson.map.JsonSerializer findSerializerByLookup(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean)
    {
        java.lang.IllegalStateException $r11;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        java.util.HashMap $r7;
        org.codehaus.jackson.map.JsonSerializer $r9;
        org.codehaus.jackson.map.SerializationConfig $r2;
        org.codehaus.jackson.map.BeanProperty $r4;
        java.lang.Exception $r10;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class $r5;
        java.lang.Object $r8;
        java.lang.StringBuilder $r12;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r9 = (org.codehaus.jackson.map.JsonSerializer) $r8;

        if $r9 == null goto label1;

        return $r9;

     label1:
        $r7 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r5 = (java.lang.Class) $r8;

        if $r5 == null goto label5;

     label2:
        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.Object newInstance()>();

        $r9 = (org.codehaus.jackson.map.JsonSerializer) $r8;

     label3:
        return $r9;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to instantiate standard serializer (of type ");

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r6 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r10);

        throw $r11;

     label5:
        return null;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public final org.codehaus.jackson.map.JsonSerializer findSerializerByPrimaryType(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.ser.impl.TimeZoneSerializer r16;
        org.codehaus.jackson.map.SerializationConfig $r2;
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer r17;
        org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer r19;
        org.codehaus.jackson.map.ser.EnumSerializer $r12;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.reflect.Method $r10;
        boolean $z0;
        org.codehaus.jackson.map.ser.JsonValueSerializer $r9;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r7;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer r13;
        org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer r18;
        org.codehaus.jackson.map.JsonSerializer $r8;
        org.codehaus.jackson.map.ser.impl.InetAddressSerializer r15;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer r14;
        java.lang.Class $r5, $r6;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r11;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $z0 := @parameter4: boolean;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r6 = class "Lorg/codehaus/jackson/map/JsonSerializable;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label02;

        $r6 = class "Lorg/codehaus/jackson/map/JsonSerializableWithType;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label01;

        r13 = <org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer: org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer instance>;

        return r13;

     label01:
        r14 = <org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer: org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer instance>;

        return r14;

     label02:
        $r7 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod findJsonValueMethod()>();

        if $r7 == null goto label03;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerFromAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r2, $r7, $r4);

        $r9 = new org.codehaus.jackson.map.ser.JsonValueSerializer;

        $r10 = virtualinvoke $r7.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        specialinvoke $r9.<org.codehaus.jackson.map.ser.JsonValueSerializer: void <init>(java.lang.reflect.Method,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.BeanProperty)>($r10, $r8, $r4);

        return $r9;

     label03:
        $r6 = class "Ljava/net/InetAddress;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label04;

        r15 = <org.codehaus.jackson.map.ser.impl.InetAddressSerializer: org.codehaus.jackson.map.ser.impl.InetAddressSerializer instance>;

        return r15;

     label04:
        $r6 = class "Ljava/util/TimeZone;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label05;

        r16 = <org.codehaus.jackson.map.ser.impl.TimeZoneSerializer: org.codehaus.jackson.map.ser.impl.TimeZoneSerializer instance>;

        return r16;

     label05:
        $r11 = r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers>;

        $r8 = virtualinvoke $r11.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType)>($r2, $r1);

        if $r8 == null goto label06;

        return $r8;

     label06:
        $r6 = class "Ljava/lang/Number;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label07;

        r17 = <org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer instance>;

        return r17;

     label07:
        $r6 = class "Ljava/lang/Enum;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label08;

        $r12 = staticinvoke <org.codehaus.jackson.map.ser.EnumSerializer: org.codehaus.jackson.map.ser.EnumSerializer construct(java.lang.Class,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>($r5, $r2, $r3);

        return $r12;

     label08:
        $r6 = class "Ljava/util/Calendar;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label09;

        r18 = <org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer: org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer instance>;

        return r18;

     label09:
        $r6 = class "Ljava/util/Date;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label10;

        r19 = <org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer: org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer instance>;

        return r19;

     label10:
        return null;
    }

    public org.codehaus.jackson.map.JsonSerializer findSerializerFromAnnotation(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.BeanProperty)
    {
        java.lang.IllegalStateException $r10;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.JsonSerializer $r6;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        org.codehaus.jackson.map.introspect.Annotated $r2;
        org.codehaus.jackson.map.ContextualSerializer $r7;
        java.lang.Object $r5;
        java.lang.Class $r8, $r9;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Object findSerializer(org.codehaus.jackson.map.introspect.Annotated)>($r2);

        if $r5 != null goto label1;

        return null;

     label1:
        $z0 = $r5 instanceof org.codehaus.jackson.map.JsonSerializer;

        if $z0 == 0 goto label3;

        $r6 = (org.codehaus.jackson.map.JsonSerializer) $r5;

        $z0 = $r6 instanceof org.codehaus.jackson.map.ContextualSerializer;

        if $z0 == 0 goto label2;

        $r7 = (org.codehaus.jackson.map.ContextualSerializer) $r6;

        $r6 = interfaceinvoke $r7.<org.codehaus.jackson.map.ContextualSerializer: org.codehaus.jackson.map.JsonSerializer createContextual(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.BeanProperty)>($r1, $r3);

     label2:
        return $r6;

     label3:
        $z0 = $r5 instanceof java.lang.Class;

        if $z0 == 0 goto label6;

        $r8 = (java.lang.Class) $r5;

        $r9 = class "Lorg/codehaus/jackson/map/JsonSerializer;";

        $z0 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z0 == 0 goto label5;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.JsonSerializer serializerInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>($r2, $r8);

        $z0 = $r6 instanceof org.codehaus.jackson.map.ContextualSerializer;

        if $z0 == 0 goto label4;

        $r7 = (org.codehaus.jackson.map.ContextualSerializer) $r6;

        $r6 = interfaceinvoke $r7.<org.codehaus.jackson.map.ContextualSerializer: org.codehaus.jackson.map.JsonSerializer createContextual(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.BeanProperty)>($r1, $r3);

     label4:
        return $r6;

     label5:
        $r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationIntrospector returned Class ");

        $r12 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected Class<JsonSerializer>");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label6:
        $r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationIntrospector returned value of type ");

        $r8 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected type JsonSerializer or Class<JsonSerializer> instead");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r10;
    }

    public final org.codehaus.jackson.map.JsonSerializer getNullSerializer()
    {
        org.codehaus.jackson.map.ser.NullSerializer r1;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r1 = <org.codehaus.jackson.map.ser.NullSerializer: org.codehaus.jackson.map.ser.NullSerializer instance>;

        return r1;
    }

    public boolean isIndexedList(java.lang.Class)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r2 := @parameter0: java.lang.Class;

        $r1 = class "Ljava/util/RandomAccess;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        return $z0;
    }

    public org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        java.lang.IllegalArgumentException $r1, $r9;
        org.codehaus.jackson.map.SerializationConfig $r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;
        org.codehaus.jackson.map.introspect.Annotated $r4;
        org.codehaus.jackson.type.JavaType $r5, $r8;
        java.lang.StringBuilder $r2;
        java.lang.Class $r7;
        java.lang.String $r10;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r3 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r4 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        $r5 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r6 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationType(org.codehaus.jackson.map.introspect.Annotated)>($r4);

        if $r7 == null goto label4;

     label1:
        $r8 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenBy(java.lang.Class)>($r7);

     label2:
        $r5 = $r8;

        goto label4;

     label3:
        $r9 := @caughtexception;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to widen type ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with concrete-type annotation (value ");

        $r10 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), method \'");

        $r10 = virtualinvoke $r4.<org.codehaus.jackson.map.introspect.Annotated: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r10 = virtualinvoke $r9.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label4:
        $r5 = staticinvoke <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.type.JavaType modifySecondaryTypesByAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>($r3, $r4, $r5);

        return $r5;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.annotate.JsonSerialize$Typing $r7, $r8;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.SerializationConfig $r2;
        org.codehaus.jackson.map.BeanProperty $r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r11;
        org.codehaus.jackson.map.TypeSerializer $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r6;
        org.codehaus.jackson.type.JavaType $r10, $r12;
        java.lang.Class $r13;
        org.codehaus.jackson.map.SerializationConfig$Feature $r9;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        $r1 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        if $r4 == null goto label1;

        return 0;

     label1:
        $r5 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r6 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r7 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.annotate.JsonSerialize$Typing findSerializationTyping(org.codehaus.jackson.map.introspect.Annotated)>($r6);

        if $r7 == null goto label2;

        $r8 = <org.codehaus.jackson.map.annotate.JsonSerialize$Typing: org.codehaus.jackson.map.annotate.JsonSerialize$Typing STATIC>;

        if $r7 != $r8 goto label3;

        return 1;

     label2:
        $r9 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_STATIC_TYPING>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r9);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        if $r1 == null goto label5;

        $r10 = interfaceinvoke $r1.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.type.JavaType getType()>();

        $z0 = virtualinvoke $r10.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 == 0 goto label5;

        $r11 = interfaceinvoke $r1.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.map.introspect.AnnotatedMember getMember()>();

        $r12 = interfaceinvoke $r1.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.type.JavaType getType()>();

        $r13 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationContentType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>($r11, $r12);

        if $r13 == null goto label4;

        return 1;

     label4:
        $z0 = $r10 instanceof org.codehaus.jackson.map.type.MapType;

        if $z0 == 0 goto label5;

        $r11 = interfaceinvoke $r1.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.map.introspect.AnnotatedMember getMember()>();

        $r10 = interfaceinvoke $r1.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.type.JavaType getType()>();

        $r13 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationKeyType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>($r11, $r10);

        if $r13 == null goto label5;

        return 1;

     label5:
        return 0;
    }
}
