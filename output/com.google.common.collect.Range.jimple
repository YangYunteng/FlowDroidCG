public final class com.google.common.collect.Range extends com.google.common.collect.RangeGwtSerializationDependencies implements com.google.common.base.Predicate, java.io.Serializable
{
    public static final com.google.common.collect.Range ALL;
    public static final long serialVersionUID;
    public final com.google.common.collect.Cut lowerBound;
    public final com.google.common.collect.Cut upperBound;

    static void <clinit>()
    {
        com.google.common.collect.Range $r0;
        com.google.common.collect.Cut $r1, $r2;

        $r0 = new com.google.common.collect.Range;

        $r1 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowAll()>();

        $r2 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveAll()>();

        specialinvoke $r0.<com.google.common.collect.Range: void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r1, $r2);

        <com.google.common.collect.Range: com.google.common.collect.Range ALL> = $r0;

        return;
    }

    public void <init>(com.google.common.collect.Cut, com.google.common.collect.Cut)
    {
        com.google.common.collect.Cut $r1, $r3, $r4;
        com.google.common.collect.Range r0;
        java.lang.IllegalArgumentException $r5;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;

        r0 := @this: com.google.common.collect.Range;

        $r3 := @parameter0: com.google.common.collect.Cut;

        $r1 := @parameter1: com.google.common.collect.Cut;

        specialinvoke r0.<com.google.common.collect.RangeGwtSerializationDependencies: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r4 = $r3;

        r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound> = $r4;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r4 = $r1;

        r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound> = $r4;

        $i0 = virtualinvoke $r3.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r1);

        if $i0 > 0 goto label1;

        $r4 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveAll()>();

        if $r3 == $r4 goto label1;

        $r4 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowAll()>();

        if $r1 == $r4 goto label1;

        return;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid range: ");

        $r6 = staticinvoke <com.google.common.collect.Range: java.lang.String toString(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r3, $r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static com.google.common.collect.Range all()
    {
        com.google.common.collect.Range r0;

        r0 = <com.google.common.collect.Range: com.google.common.collect.Range ALL>;

        return r0;
    }

    public static com.google.common.collect.Range atLeast(java.lang.Comparable)
    {
        com.google.common.collect.Cut $r1, $r2;
        com.google.common.collect.Range $r3;
        java.lang.Comparable $r0;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowValue(java.lang.Comparable)>($r0);

        $r2 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveAll()>();

        $r3 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r1, $r2);

        return $r3;
    }

    public static com.google.common.collect.Range atMost(java.lang.Comparable)
    {
        com.google.common.collect.Cut $r1, $r2;
        com.google.common.collect.Range $r3;
        java.lang.Comparable $r0;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowAll()>();

        $r2 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveValue(java.lang.Comparable)>($r0);

        $r3 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r1, $r2);

        return $r3;
    }

    public static java.util.SortedSet cast(java.lang.Iterable)
    {
        java.util.SortedSet $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = (java.util.SortedSet) $r0;

        return $r1;
    }

    public static com.google.common.collect.Range closed(java.lang.Comparable, java.lang.Comparable)
    {
        com.google.common.collect.Cut $r2, $r3;
        com.google.common.collect.Range $r4;
        java.lang.Comparable $r0, $r1;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        $r2 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowValue(java.lang.Comparable)>($r0);

        $r3 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveValue(java.lang.Comparable)>($r1);

        $r4 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r2, $r3);

        return $r4;
    }

    public static com.google.common.collect.Range closedOpen(java.lang.Comparable, java.lang.Comparable)
    {
        com.google.common.collect.Cut $r2, $r3;
        com.google.common.collect.Range $r4;
        java.lang.Comparable $r0, $r1;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        $r2 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowValue(java.lang.Comparable)>($r0);

        $r3 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowValue(java.lang.Comparable)>($r1);

        $r4 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r2, $r3);

        return $r4;
    }

    public static int compareOrThrow(java.lang.Comparable, java.lang.Comparable)
    {
        int $i0;
        java.lang.Comparable $r0, $r1;

        $r1 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable;

        $i0 = interfaceinvoke $r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r0);

        return $i0;
    }

    public static com.google.common.collect.Range create(com.google.common.collect.Cut, com.google.common.collect.Cut)
    {
        com.google.common.collect.Cut $r0, $r1;
        com.google.common.collect.Range $r2;

        $r0 := @parameter0: com.google.common.collect.Cut;

        $r1 := @parameter1: com.google.common.collect.Cut;

        $r2 = new com.google.common.collect.Range;

        specialinvoke $r2.<com.google.common.collect.Range: void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.collect.Range downTo(java.lang.Comparable, com.google.common.collect.BoundType)
    {
        int[] $r2;
        com.google.common.collect.BoundType $r1;
        int $i0;
        com.google.common.collect.Range $r3;
        java.lang.Comparable $r0;
        java.lang.AssertionError $r4;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: com.google.common.collect.BoundType;

        $r2 = <com.google.common.collect.Range$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $i0 = virtualinvoke $r1.<java.lang.Enum: int ordinal()>();

        $i0 = $r2[$i0];

        if $i0 == 1 goto label2;

        if $i0 != 2 goto label1;

        $r3 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range atLeast(java.lang.Comparable)>($r0);

        return $r3;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r3 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range greaterThan(java.lang.Comparable)>($r0);

        return $r3;
    }

    public static com.google.common.collect.Range encloseAll(java.lang.Iterable)
    {
        java.util.SortedSet $r1;
        java.util.Iterator $r8;
        com.google.common.collect.Range $r7;
        java.lang.Iterable $r0;
        com.google.common.collect.Ordering $r3;
        java.lang.Object $r4;
        java.lang.Comparable $r5, $r6, $r9;
        java.util.Comparator $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r0 instanceof java.util.SortedSet;

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <com.google.common.collect.Range: java.util.SortedSet cast(java.lang.Iterable)>($r0);

        $r2 = interfaceinvoke $r1.<java.util.SortedSet: java.util.Comparator comparator()>();

        $r3 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        if $r2 != null goto label2;

     label1:
        $r4 = interfaceinvoke $r1.<java.util.SortedSet: java.lang.Object first()>();

        $r5 = (java.lang.Comparable) $r4;

        $r4 = interfaceinvoke $r1.<java.util.SortedSet: java.lang.Object last()>();

        $r6 = (java.lang.Comparable) $r4;

        $r7 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable)>($r5, $r6);

        return $r7;

     label2:
        $r8 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r5 = (java.lang.Comparable) $r4;

        $r6 = $r5;

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r9 = (java.lang.Comparable) $r4;

        $r3 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r4 = virtualinvoke $r3.<com.google.common.collect.Ordering: java.lang.Object min(java.lang.Object,java.lang.Object)>($r5, $r9);

        $r5 = (java.lang.Comparable) $r4;

        $r3 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r4 = virtualinvoke $r3.<com.google.common.collect.Ordering: java.lang.Object max(java.lang.Object,java.lang.Object)>($r6, $r9);

        $r6 = (java.lang.Comparable) $r4;

        goto label3;

     label4:
        $r7 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable)>($r5, $r6);

        return $r7;
    }

    public static com.google.common.collect.Range greaterThan(java.lang.Comparable)
    {
        com.google.common.collect.Cut $r1, $r2;
        com.google.common.collect.Range $r3;
        java.lang.Comparable $r0;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveValue(java.lang.Comparable)>($r0);

        $r2 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveAll()>();

        $r3 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r1, $r2);

        return $r3;
    }

    public static com.google.common.collect.Range lessThan(java.lang.Comparable)
    {
        com.google.common.collect.Cut $r1, $r2;
        com.google.common.collect.Range $r3;
        java.lang.Comparable $r0;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowAll()>();

        $r2 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowValue(java.lang.Comparable)>($r0);

        $r3 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r1, $r2);

        return $r3;
    }

    public static com.google.common.base.Function lowerBoundFn()
    {
        com.google.common.collect.Range$LowerBoundFn r0;

        r0 = <com.google.common.collect.Range$LowerBoundFn: com.google.common.collect.Range$LowerBoundFn INSTANCE>;

        return r0;
    }

    public static com.google.common.collect.Range open(java.lang.Comparable, java.lang.Comparable)
    {
        com.google.common.collect.Cut $r2, $r3;
        com.google.common.collect.Range $r4;
        java.lang.Comparable $r0, $r1;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        $r2 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveValue(java.lang.Comparable)>($r0);

        $r3 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowValue(java.lang.Comparable)>($r1);

        $r4 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r2, $r3);

        return $r4;
    }

    public static com.google.common.collect.Range openClosed(java.lang.Comparable, java.lang.Comparable)
    {
        com.google.common.collect.Cut $r2, $r3;
        com.google.common.collect.Range $r4;
        java.lang.Comparable $r0, $r1;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        $r2 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveValue(java.lang.Comparable)>($r0);

        $r3 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveValue(java.lang.Comparable)>($r1);

        $r4 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r2, $r3);

        return $r4;
    }

    public static com.google.common.collect.Range range(java.lang.Comparable, com.google.common.collect.BoundType, java.lang.Comparable, com.google.common.collect.BoundType)
    {
        com.google.common.collect.Cut $r5, $r6;
        com.google.common.collect.Range $r7;
        com.google.common.collect.BoundType $r1, $r2, $r4;
        java.lang.Comparable $r0, $r3;

        $r3 := @parameter0: java.lang.Comparable;

        $r4 := @parameter1: com.google.common.collect.BoundType;

        $r0 := @parameter2: java.lang.Comparable;

        $r1 := @parameter3: com.google.common.collect.BoundType;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType OPEN>;

        if $r4 != $r2 goto label1;

        $r5 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveValue(java.lang.Comparable)>($r3);

        goto label2;

     label1:
        $r5 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowValue(java.lang.Comparable)>($r3);

     label2:
        $r4 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType OPEN>;

        if $r1 != $r4 goto label3;

        $r6 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowValue(java.lang.Comparable)>($r0);

        goto label4;

     label3:
        $r6 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveValue(java.lang.Comparable)>($r0);

     label4:
        $r7 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r5, $r6);

        return $r7;
    }

    public static com.google.common.collect.Ordering rangeLexOrdering()
    {
        com.google.common.collect.Ordering r0;

        r0 = <com.google.common.collect.Range$RangeLexOrdering: com.google.common.collect.Ordering INSTANCE>;

        return r0;
    }

    public static com.google.common.collect.Range singleton(java.lang.Comparable)
    {
        com.google.common.collect.Range $r0;
        java.lang.Comparable $r1;

        $r1 := @parameter0: java.lang.Comparable;

        $r0 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable)>($r1, $r1);

        return $r0;
    }

    public static java.lang.String toString(com.google.common.collect.Cut, com.google.common.collect.Cut)
    {
        com.google.common.collect.Cut $r0, $r3;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r3 := @parameter0: com.google.common.collect.Cut;

        $r0 := @parameter1: com.google.common.collect.Cut;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(16);

        virtualinvoke $r3.<com.google.common.collect.Cut: void describeAsLowerBound(java.lang.StringBuilder)>($r1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        virtualinvoke $r0.<com.google.common.collect.Cut: void describeAsUpperBound(java.lang.StringBuilder)>($r1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static com.google.common.collect.Range upTo(java.lang.Comparable, com.google.common.collect.BoundType)
    {
        int[] $r2;
        com.google.common.collect.BoundType $r1;
        int $i0;
        com.google.common.collect.Range $r3;
        java.lang.Comparable $r0;
        java.lang.AssertionError $r4;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: com.google.common.collect.BoundType;

        $r2 = <com.google.common.collect.Range$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $i0 = virtualinvoke $r1.<java.lang.Enum: int ordinal()>();

        $i0 = $r2[$i0];

        if $i0 == 1 goto label2;

        if $i0 != 2 goto label1;

        $r3 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range atMost(java.lang.Comparable)>($r0);

        return $r3;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r3 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range lessThan(java.lang.Comparable)>($r0);

        return $r3;
    }

    public static com.google.common.base.Function upperBoundFn()
    {
        com.google.common.collect.Range$UpperBoundFn r0;

        r0 = <com.google.common.collect.Range$UpperBoundFn: com.google.common.collect.Range$UpperBoundFn INSTANCE>;

        return r0;
    }

    public boolean apply(java.lang.Comparable)
    {
        com.google.common.collect.Range r0;
        java.lang.Comparable $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Range;

        $r1 := @parameter0: java.lang.Comparable;

        $z0 = virtualinvoke r0.<com.google.common.collect.Range: boolean contains(java.lang.Comparable)>($r1);

        return $z0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        com.google.common.collect.Range r0;
        java.lang.Object $r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Range;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) $r1;

        $z0 = virtualinvoke r0.<com.google.common.collect.Range: boolean apply(java.lang.Comparable)>($r2);

        return $z0;
    }

    public com.google.common.collect.Range canonical(com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.Cut $r2, $r3, $r4;
        com.google.common.collect.DiscreteDomain $r1;
        com.google.common.collect.Range r0;

        r0 := @this: com.google.common.collect.Range;

        $r1 := @parameter0: com.google.common.collect.DiscreteDomain;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r2 = virtualinvoke $r2.<com.google.common.collect.Cut: com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain)>($r1);

        $r3 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $r3 = virtualinvoke $r3.<com.google.common.collect.Cut: com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain)>($r1);

        $r4 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        if $r2 != $r4 goto label1;

        $r4 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        if $r3 != $r4 goto label1;

        return r0;

     label1:
        r0 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r2, $r3);

        return r0;
    }

    public boolean contains(java.lang.Comparable)
    {
        com.google.common.collect.Cut $r2;
        com.google.common.collect.Range r0;
        java.lang.Comparable $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Range;

        $r1 := @parameter0: java.lang.Comparable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $z0 = virtualinvoke $r2.<com.google.common.collect.Cut: boolean isLessThan(java.lang.Comparable)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $z0 = virtualinvoke $r2.<com.google.common.collect.Cut: boolean isLessThan(java.lang.Comparable)>($r1);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsAll(java.lang.Iterable)
    {
        java.util.SortedSet $r2;
        java.util.Iterator $r7;
        com.google.common.collect.Range r0;
        java.lang.Iterable $r1;
        com.google.common.collect.Ordering $r4;
        java.lang.Object $r5;
        java.lang.Comparable $r6;
        java.util.Comparator $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.Range;

        $r1 := @parameter0: java.lang.Iterable;

        $z0 = staticinvoke <com.google.common.collect.Iterables: boolean isEmpty(java.lang.Iterable)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof java.util.SortedSet;

        if $z0 == 0 goto label4;

        $r2 = staticinvoke <com.google.common.collect.Range: java.util.SortedSet cast(java.lang.Iterable)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.SortedSet: java.util.Comparator comparator()>();

        $r4 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        if $r3 != null goto label4;

     label2:
        $r5 = interfaceinvoke $r2.<java.util.SortedSet: java.lang.Object first()>();

        $r6 = (java.lang.Comparable) $r5;

        $z0 = virtualinvoke r0.<com.google.common.collect.Range: boolean contains(java.lang.Comparable)>($r6);

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r2.<java.util.SortedSet: java.lang.Object last()>();

        $r6 = (java.lang.Comparable) $r5;

        $z0 = virtualinvoke r0.<com.google.common.collect.Range: boolean contains(java.lang.Comparable)>($r6);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        $r7 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Comparable) $r5;

        $z0 = virtualinvoke r0.<com.google.common.collect.Range: boolean contains(java.lang.Comparable)>($r6);

        if $z0 != 0 goto label5;

        return 0;

     label6:
        return 1;
    }

    public boolean encloses(com.google.common.collect.Range)
    {
        com.google.common.collect.Cut $r1, $r3;
        com.google.common.collect.Range r0, $r2;
        int $i0;

        r0 := @this: com.google.common.collect.Range;

        $r2 := @parameter0: com.google.common.collect.Range;

        $r3 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r1 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $i0 = virtualinvoke $r3.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r1);

        if $i0 > 0 goto label1;

        $r1 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $r3 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r3);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.collect.Cut $r1, $r4;
        com.google.common.collect.Range r0, $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Range;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof com.google.common.collect.Range;

        if $z0 == 0 goto label1;

        $r3 = (com.google.common.collect.Range) $r2;

        $r4 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r1 = $r3.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $z0 = virtualinvoke $r4.<com.google.common.collect.Cut: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $r4 = $r3.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $z0 = virtualinvoke $r1.<com.google.common.collect.Cut: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasLowerBound()
    {
        com.google.common.collect.Range r0;
        com.google.common.collect.Cut $r1, $r2;

        r0 := @this: com.google.common.collect.Range;

        $r2 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r1 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowAll()>();

        if $r2 == $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasUpperBound()
    {
        com.google.common.collect.Range r0;
        com.google.common.collect.Cut $r1, $r2;

        r0 := @this: com.google.common.collect.Range;

        $r2 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $r1 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveAll()>();

        if $r2 == $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        com.google.common.collect.Cut $r1;
        com.google.common.collect.Range r0;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.Range;

        $r1 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.Cut: int hashCode()>();

        $i0 = $i0 * 31;

        $r1 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $i1 = virtualinvoke $r1.<com.google.common.collect.Cut: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }

    public com.google.common.collect.Range intersection(com.google.common.collect.Range)
    {
        com.google.common.collect.Cut $r1, $r3;
        com.google.common.collect.Range r0, $r2;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.Range;

        $r2 := @parameter0: com.google.common.collect.Range;

        $r1 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r3 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r3);

        $r3 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $r1 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $i1 = virtualinvoke $r3.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r1);

        if $i0 < 0 goto label1;

        if $i1 > 0 goto label1;

        return r0;

     label1:
        if $i0 > 0 goto label2;

        if $i1 < 0 goto label2;

        return $r2;

     label2:
        if $i0 < 0 goto label3;

        $r1 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        goto label4;

     label3:
        $r1 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

     label4:
        if $i1 > 0 goto label5;

        $r3 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        goto label6;

     label5:
        $r3 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

     label6:
        r0 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r1, $r3);

        return r0;
    }

    public boolean isConnected(com.google.common.collect.Range)
    {
        com.google.common.collect.Cut $r1, $r3;
        com.google.common.collect.Range r0, $r2;
        int $i0;

        r0 := @this: com.google.common.collect.Range;

        $r2 := @parameter0: com.google.common.collect.Range;

        $r3 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r1 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $i0 = virtualinvoke $r3.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r1);

        if $i0 > 0 goto label1;

        $r1 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r3 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r3);

        if $i0 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.Cut $r1, $r2;
        com.google.common.collect.Range r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Range;

        $r2 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r1 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $z0 = virtualinvoke $r2.<com.google.common.collect.Cut: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public com.google.common.collect.BoundType lowerBoundType()
    {
        com.google.common.collect.Range r0;
        com.google.common.collect.Cut $r2;
        com.google.common.collect.BoundType $r1;

        r0 := @this: com.google.common.collect.Range;

        $r2 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.Cut: com.google.common.collect.BoundType typeAsLowerBound()>();

        return $r1;
    }

    public java.lang.Comparable lowerEndpoint()
    {
        com.google.common.collect.Range r0;
        com.google.common.collect.Cut $r2;
        java.lang.Comparable $r1;

        r0 := @this: com.google.common.collect.Range;

        $r2 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.Cut: java.lang.Comparable endpoint()>();

        return $r1;
    }

    public java.lang.Object readResolve()
    {
        com.google.common.collect.Range r0, $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Range;

        $r1 = <com.google.common.collect.Range: com.google.common.collect.Range ALL>;

        $z0 = virtualinvoke r0.<com.google.common.collect.Range: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r0 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range all()>();

     label1:
        return r0;
    }

    public com.google.common.collect.Range span(com.google.common.collect.Range)
    {
        com.google.common.collect.Cut $r1, $r3;
        com.google.common.collect.Range r0, $r2;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.Range;

        $r2 := @parameter0: com.google.common.collect.Range;

        $r1 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r3 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r3);

        $r3 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $r1 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $i1 = virtualinvoke $r3.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r1);

        if $i0 > 0 goto label1;

        if $i1 < 0 goto label1;

        return r0;

     label1:
        if $i0 < 0 goto label2;

        if $i1 > 0 goto label2;

        return $r2;

     label2:
        if $i0 > 0 goto label3;

        $r1 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        goto label4;

     label3:
        $r1 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

     label4:
        if $i1 < 0 goto label5;

        $r3 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        goto label6;

     label5:
        $r3 = $r2.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

     label6:
        r0 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r1, $r3);

        return r0;
    }

    public boolean test(java.lang.Object)
    {
        com.google.common.collect.Range r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Range;

        $r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <c.i.b.a.a: boolean a(com.google.common.base.Predicate,java.lang.Object)>(r0, $r1);

        return $z0;
    }

    public java.lang.String toString()
    {
        com.google.common.collect.Cut $r1, $r3;
        com.google.common.collect.Range r0;
        java.lang.String $r2;

        r0 := @this: com.google.common.collect.Range;

        $r3 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut lowerBound>;

        $r1 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $r2 = staticinvoke <com.google.common.collect.Range: java.lang.String toString(com.google.common.collect.Cut,com.google.common.collect.Cut)>($r3, $r1);

        return $r2;
    }

    public com.google.common.collect.BoundType upperBoundType()
    {
        com.google.common.collect.Range r0;
        com.google.common.collect.Cut $r2;
        com.google.common.collect.BoundType $r1;

        r0 := @this: com.google.common.collect.Range;

        $r2 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.Cut: com.google.common.collect.BoundType typeAsUpperBound()>();

        return $r1;
    }

    public java.lang.Comparable upperEndpoint()
    {
        com.google.common.collect.Range r0;
        com.google.common.collect.Cut $r2;
        java.lang.Comparable $r1;

        r0 := @this: com.google.common.collect.Range;

        $r2 = r0.<com.google.common.collect.Range: com.google.common.collect.Cut upperBound>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.Cut: java.lang.Comparable endpoint()>();

        return $r1;
    }
}
