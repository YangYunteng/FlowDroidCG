public final class org.codehaus.jackson.map.type.MapType extends org.codehaus.jackson.map.type.MapLikeType
{

    public void <init>(java.lang.Class, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.MapType r0;
        org.codehaus.jackson.type.JavaType $r2, $r3;
        java.lang.Class $r1;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        specialinvoke r0.<org.codehaus.jackson.map.type.MapLikeType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r2, $r3);

        return;
    }

    public static org.codehaus.jackson.map.type.MapType construct(java.lang.Class, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.MapType $r3;
        org.codehaus.jackson.type.JavaType $r1, $r2;
        java.lang.Class $r0;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r3 = new org.codehaus.jackson.map.type.MapType;

        specialinvoke $r3.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r0, $r1, $r2);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType _narrow(java.lang.Class)
    {
        org.codehaus.jackson.map.type.MapType r0, $r2;
        org.codehaus.jackson.type.JavaType $r3, $r4;
        java.lang.Class $r1;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r1 := @parameter0: java.lang.Class;

        $r2 = new org.codehaus.jackson.map.type.MapType;

        $r3 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _keyType>;

        $r4 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _valueType>;

        specialinvoke $r2.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r3, $r4);

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType narrowContentsBy(java.lang.Class)
    {
        org.codehaus.jackson.map.type.MapType r0, $r5;
        org.codehaus.jackson.type.JavaType $r2, $r3;
        java.lang.Class $r1, $r4;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r4 := @parameter0: java.lang.Class;

        $r2 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _valueType>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r4 != $r1 goto label1;

        return r0;

     label1:
        $r5 = new org.codehaus.jackson.map.type.MapType;

        $r1 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $r2 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _keyType>;

        $r3 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _valueType>;

        $r3 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>($r4);

        specialinvoke $r5.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r2, $r3);

        $r2 = virtualinvoke $r5.<org.codehaus.jackson.map.type.TypeBase: org.codehaus.jackson.type.JavaType copyHandlers(org.codehaus.jackson.type.JavaType)>(r0);

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType narrowKey(java.lang.Class)
    {
        org.codehaus.jackson.map.type.MapType r0, $r4;
        org.codehaus.jackson.type.JavaType $r3, $r5;
        java.lang.Class $r1, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r2 := @parameter0: java.lang.Class;

        $r3 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _keyType>;

        $r1 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r2 != $r1 goto label1;

        return r0;

     label1:
        $r4 = new org.codehaus.jackson.map.type.MapType;

        $r1 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $r3 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _keyType>;

        $r3 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>($r2);

        $r5 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _valueType>;

        specialinvoke $r4.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r3, $r5);

        $r3 = virtualinvoke $r4.<org.codehaus.jackson.map.type.TypeBase: org.codehaus.jackson.type.JavaType copyHandlers(org.codehaus.jackson.type.JavaType)>(r0);

        return $r3;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.type.MapType r0;
        org.codehaus.jackson.type.JavaType $r4;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[map type; class ");

        $r2 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _keyType>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r4 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _valueType>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType widenContentsBy(java.lang.Class)
    {
        org.codehaus.jackson.map.type.MapType r0, $r5;
        org.codehaus.jackson.type.JavaType $r2, $r3;
        java.lang.Class $r1, $r4;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r4 := @parameter0: java.lang.Class;

        $r2 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _valueType>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r4 != $r1 goto label1;

        return r0;

     label1:
        $r5 = new org.codehaus.jackson.map.type.MapType;

        $r1 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $r2 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _keyType>;

        $r3 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _valueType>;

        $r3 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenBy(java.lang.Class)>($r4);

        specialinvoke $r5.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r2, $r3);

        $r2 = virtualinvoke $r5.<org.codehaus.jackson.map.type.TypeBase: org.codehaus.jackson.type.JavaType copyHandlers(org.codehaus.jackson.type.JavaType)>(r0);

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType widenKey(java.lang.Class)
    {
        org.codehaus.jackson.map.type.MapType r0, $r4;
        org.codehaus.jackson.type.JavaType $r3, $r5;
        java.lang.Class $r1, $r2;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r2 := @parameter0: java.lang.Class;

        $r3 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _keyType>;

        $r1 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r2 != $r1 goto label1;

        return r0;

     label1:
        $r4 = new org.codehaus.jackson.map.type.MapType;

        $r1 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $r3 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _keyType>;

        $r3 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenBy(java.lang.Class)>($r2);

        $r5 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _valueType>;

        specialinvoke $r4.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r1, $r3, $r5);

        $r3 = virtualinvoke $r4.<org.codehaus.jackson.map.type.TypeBase: org.codehaus.jackson.type.JavaType copyHandlers(org.codehaus.jackson.type.JavaType)>(r0);

        return $r3;
    }

    public volatile org.codehaus.jackson.map.type.MapLikeType withContentTypeHandler(java.lang.Object)
    {
        java.lang.Object $r1;
        org.codehaus.jackson.map.type.MapType r0;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withContentTypeHandler(java.lang.Object)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.type.MapType withContentTypeHandler(java.lang.Object)
    {
        org.codehaus.jackson.map.type.MapType r0, $r1;
        org.codehaus.jackson.type.JavaType $r3, $r4;
        java.lang.Class $r2;
        java.lang.Object $r5;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r5 := @parameter0: java.lang.Object;

        $r1 = new org.codehaus.jackson.map.type.MapType;

        $r2 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $r3 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _keyType>;

        $r4 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _valueType>;

        $r4 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)>($r5);

        specialinvoke $r1.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r2, $r3, $r4);

        return $r1;
    }

    public volatile org.codehaus.jackson.type.JavaType withContentTypeHandler(java.lang.Object)
    {
        java.lang.Object $r1;
        org.codehaus.jackson.map.type.MapType r0;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withContentTypeHandler(java.lang.Object)>($r1);

        return r0;
    }

    public volatile org.codehaus.jackson.map.type.MapLikeType withTypeHandler(java.lang.Object)
    {
        java.lang.Object $r1;
        org.codehaus.jackson.map.type.MapType r0;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withTypeHandler(java.lang.Object)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.type.MapType withTypeHandler(java.lang.Object)
    {
        org.codehaus.jackson.map.type.MapType r0, $r2;
        org.codehaus.jackson.type.JavaType $r4, $r5;
        java.lang.Object $r1;
        java.lang.Class $r3;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new org.codehaus.jackson.map.type.MapType;

        $r3 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $r4 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _keyType>;

        $r5 = r0.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType _valueType>;

        specialinvoke $r2.<org.codehaus.jackson.map.type.MapType: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType)>($r3, $r4, $r5);

        $r2.<org.codehaus.jackson.type.JavaType: java.lang.Object _typeHandler> = $r1;

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)
    {
        java.lang.Object $r1;
        org.codehaus.jackson.map.type.MapType r0;

        r0 := @this: org.codehaus.jackson.map.type.MapType;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.map.type.MapType withTypeHandler(java.lang.Object)>($r1);

        return r0;
    }
}
