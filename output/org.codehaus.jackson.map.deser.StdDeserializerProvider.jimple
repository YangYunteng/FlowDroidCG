public class org.codehaus.jackson.map.deser.StdDeserializerProvider extends org.codehaus.jackson.map.DeserializerProvider
{
    public static final java.util.HashMap _keyDeserializers;
    public final java.util.concurrent.ConcurrentHashMap _cachedDeserializers;
    public org.codehaus.jackson.map.DeserializerFactory _factory;
    public final java.util.HashMap _incompleteDeserializers;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = staticinvoke <org.codehaus.jackson.map.deser.StdKeyDeserializers: java.util.HashMap constructAll()>();

        <org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _keyDeserializers> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.deser.BeanDeserializerFactory $r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 = <org.codehaus.jackson.map.deser.BeanDeserializerFactory: org.codehaus.jackson.map.deser.BeanDeserializerFactory instance>;

        specialinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: void <init>(org.codehaus.jackson.map.DeserializerFactory)>($r1);

        return;
    }

    public void <init>(org.codehaus.jackson.map.DeserializerFactory)
    {
        org.codehaus.jackson.map.DeserializerFactory $r1;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.HashMap $r3;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializerFactory;

        specialinvoke r0.<org.codehaus.jackson.map.DeserializerProvider: void <init>()>();

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(64, 0.75F, 2);

        r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.concurrent.ConcurrentHashMap _cachedDeserializers> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(8);

        r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers> = $r3;

        r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory> = $r1;

        return;
    }

    public org.codehaus.jackson.map.JsonDeserializer _createAndCache2(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ResolvableDeserializer $r11;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        java.util.HashMap $r10;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.JsonMappingException $r14;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r8;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Boolean $r9;
        org.codehaus.jackson.map.JsonDeserializer $r4;
        java.lang.String $r15;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r6;
        java.util.concurrent.ConcurrentHashMap $r12;
        java.lang.IllegalArgumentException $r13;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r7;
        java.lang.Class $r5;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

     label1:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _createDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r3);

     label2:
        if $r4 != null goto label3;

        return null;

     label3:
        $z0 = $r4 instanceof org.codehaus.jackson.map.ResolvableDeserializer;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        if $r5 != class "Lorg/codehaus/jackson/map/deser/BeanDeserializer;" goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        if $z1 != 0 goto label6;

        $r6 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_ANNOTATIONS>;

        $z2 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r6);

        if $z2 == 0 goto label6;

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass construct(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r5, $r7, null);

        $r9 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Boolean findCachability(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r8);

        if $r9 == null goto label6;

        $z1 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

     label6:
        if $z0 == 0 goto label7;

        $r10 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r11 = (org.codehaus.jackson.map.ResolvableDeserializer) $r4;

        virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: void _resolveDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.ResolvableDeserializer)>($r1, $r11);

        $r10 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r2);

     label7:
        if $z1 == 0 goto label9;

        $r12 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.concurrent.ConcurrentHashMap _cachedDeserializers>;

        virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        return $r4;

     label8:
        $r13 := @caughtexception;

        $r14 = new org.codehaus.jackson.map.JsonMappingException;

        $r15 = virtualinvoke $r13.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        specialinvoke $r14.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation,java.lang.Throwable)>($r15, null, $r13);

        throw $r14;

     label9:
        return $r4;

        catch java.lang.IllegalArgumentException from label1 to label2 with label8;
    }

    public org.codehaus.jackson.map.JsonDeserializer _createAndCacheValueDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        java.lang.Throwable $r8, $r9;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        java.util.HashMap $r2, $r6;
        org.codehaus.jackson.map.DeserializationConfig $r3;
        org.codehaus.jackson.map.BeanProperty $r1;
        int $i0;
        org.codehaus.jackson.type.JavaType $r4;
        org.codehaus.jackson.map.JsonDeserializer $r5;
        java.lang.Object $r7;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r3 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r4 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        entermonitor $r2;

     label01:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _findCachedDeserializer(org.codehaus.jackson.type.JavaType)>($r4);

        if $r5 == null goto label03;

        exitmonitor $r2;

     label02:
        return $r5;

     label03:
        $r6 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        $i0 = virtualinvoke $r6.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label05;

        $r6 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r5 = (org.codehaus.jackson.map.JsonDeserializer) $r7;

        if $r5 == null goto label05;

        exitmonitor $r2;

     label04:
        return $r5;

     label05:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _createAndCache2(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r3, $r4, $r1);

     label06:
        if $i0 != 0 goto label08;

     label07:
        $r6 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        $i0 = virtualinvoke $r6.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label08;

        $r6 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        virtualinvoke $r6.<java.util.HashMap: void clear()>();

     label08:
        exitmonitor $r2;

     label09:
        return $r5;

     label10:
        $r8 := @caughtexception;

        if $i0 != 0 goto label11;

        $r6 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        $i0 = virtualinvoke $r6.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label11;

        $r6 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        virtualinvoke $r6.<java.util.HashMap: void clear()>();

     label11:
        throw $r8;

     label12:
        $r9 := @caughtexception;

        exitmonitor $r2;

     label13:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label09 with label12;
        catch java.lang.Throwable from label10 to label13 with label12;
    }

    public org.codehaus.jackson.map.JsonDeserializer _createDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.type.CollectionLikeType $r9;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.type.CollectionType $r10;
        org.codehaus.jackson.map.DeserializationConfig $r2;
        org.codehaus.jackson.map.BeanProperty $r1;
        org.codehaus.jackson.map.DeserializerFactory $r4;
        org.codehaus.jackson.map.type.MapLikeType $r7;
        org.codehaus.jackson.map.type.MapType $r8;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.JsonDeserializer $r5;
        java.lang.Class $r11, $r12;
        org.codehaus.jackson.map.type.ArrayType $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r2 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: boolean isEnumType()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createEnumDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r2, r0, $r3, $r1);

        return $r5;

     label1:
        $z0 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 == 0 goto label6;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r6 = (org.codehaus.jackson.map.type.ArrayType) $r3;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createArrayDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.type.ArrayType,org.codehaus.jackson.map.BeanProperty)>($r2, r0, $r6, $r1);

        return $r5;

     label2:
        $z0 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: boolean isMapLikeType()>();

        if $z0 == 0 goto label4;

        $r7 = (org.codehaus.jackson.map.type.MapLikeType) $r3;

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.map.type.MapLikeType: boolean isTrueMapType()>();

        if $z0 == 0 goto label3;

        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r8 = (org.codehaus.jackson.map.type.MapType) $r7;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createMapDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.type.MapType,org.codehaus.jackson.map.BeanProperty)>($r2, r0, $r8, $r1);

        return $r5;

     label3:
        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createMapLikeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.type.MapLikeType,org.codehaus.jackson.map.BeanProperty)>($r2, r0, $r7, $r1);

        return $r5;

     label4:
        $z0 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: boolean isCollectionLikeType()>();

        if $z0 == 0 goto label6;

        $r9 = (org.codehaus.jackson.map.type.CollectionLikeType) $r3;

        $z0 = virtualinvoke $r9.<org.codehaus.jackson.map.type.CollectionLikeType: boolean isTrueCollectionType()>();

        if $z0 == 0 goto label5;

        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r10 = (org.codehaus.jackson.map.type.CollectionType) $r9;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createCollectionDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.type.CollectionType,org.codehaus.jackson.map.BeanProperty)>($r2, r0, $r10, $r1);

        return $r5;

     label5:
        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createCollectionLikeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.type.CollectionLikeType,org.codehaus.jackson.map.BeanProperty)>($r2, r0, $r9, $r1);

        return $r5;

     label6:
        $r11 = class "Lorg/codehaus/jackson/JsonNode;";

        $r12 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12);

        if $z0 == 0 goto label7;

        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createTreeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r2, r0, $r3, $r1);

        return $r5;

     label7:
        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createBeanDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r2, r0, $r3, $r1);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonDeserializer _findCachedDeserializer(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Object $r2;
        org.codehaus.jackson.map.JsonDeserializer $r4;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r3 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.concurrent.ConcurrentHashMap _cachedDeserializers>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r4 = (org.codehaus.jackson.map.JsonDeserializer) $r2;

        return $r4;
    }

    public org.codehaus.jackson.map.KeyDeserializer _handleUnknownKeyDeserializer(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.JsonMappingException $r1;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.type.JavaType $r4;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r4 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 = new org.codehaus.jackson.map.JsonMappingException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not find a (Map) Key deserializer for type ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public org.codehaus.jackson.map.JsonDeserializer _handleUnknownValueDeserializer(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.JsonMappingException $r3;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: boolean isConcrete(java.lang.Class)>($r2);

        if $z0 != 0 goto label1;

        $r3 = new org.codehaus.jackson.map.JsonMappingException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not find a Value deserializer for abstract type ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $r3 = new org.codehaus.jackson.map.JsonMappingException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not find a Value deserializer for type ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public void _resolveDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.ResolvableDeserializer)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.ResolvableDeserializer $r2;
        org.codehaus.jackson.map.DeserializationConfig $r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.ResolvableDeserializer;

        interfaceinvoke $r2.<org.codehaus.jackson.map.ResolvableDeserializer: void resolve(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider)>($r1, r0);

        return;
    }

    public int cachedDeserializersCount()
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        int $i0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.concurrent.ConcurrentHashMap _cachedDeserializers>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        return $i0;
    }

    public org.codehaus.jackson.map.KeyDeserializer findKeyDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        java.util.HashMap $r7;
        org.codehaus.jackson.map.DeserializationConfig $r2;
        org.codehaus.jackson.map.BeanProperty $r1;
        org.codehaus.jackson.map.DeserializerFactory $r4;
        org.codehaus.jackson.map.KeyDeserializer $r5, $r9;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r6;
        java.lang.Object $r8;
        org.codehaus.jackson.map.ContextualKeyDeserializer $r10;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r2 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.KeyDeserializer createKeyDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r2, $r3, $r1);

        if $r5 != null goto label6;

        $r6 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r6 == class "Ljava/lang/String;" goto label5;

        if $r6 != class "Ljava/lang/Object;" goto label1;

        goto label5;

     label1:
        $r7 = <org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _keyDeserializers>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r9 = (org.codehaus.jackson.map.KeyDeserializer) $r8;

        if $r9 == null goto label2;

        return $r9;

     label2:
        $z0 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: boolean isEnumType()>();

        if $z0 == 0 goto label3;

        $r5 = staticinvoke <org.codehaus.jackson.map.deser.StdKeyDeserializers: org.codehaus.jackson.map.KeyDeserializer constructEnumKeyDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>($r2, $r3);

        return $r5;

     label3:
        $r9 = staticinvoke <org.codehaus.jackson.map.deser.StdKeyDeserializers: org.codehaus.jackson.map.KeyDeserializer findStringBasedKeyDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>($r2, $r3);

        if $r9 == null goto label4;

        return $r9;

     label4:
        if $r5 != null goto label6;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.KeyDeserializer _handleUnknownKeyDeserializer(org.codehaus.jackson.type.JavaType)>($r3);

        return $r5;

     label5:
        return null;

     label6:
        $z0 = $r5 instanceof org.codehaus.jackson.map.ContextualKeyDeserializer;

        if $z0 == 0 goto label7;

        $r10 = (org.codehaus.jackson.map.ContextualKeyDeserializer) $r5;

        $r5 = interfaceinvoke $r10.<org.codehaus.jackson.map.ContextualKeyDeserializer: org.codehaus.jackson.map.KeyDeserializer createContextual(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.BeanProperty)>($r2, $r1);

     label7:
        return $r5;
    }

    public org.codehaus.jackson.map.JsonDeserializer findTypedValueDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.DeserializationConfig $r3;
        org.codehaus.jackson.map.BeanProperty $r1;
        org.codehaus.jackson.map.DeserializerFactory $r2;
        org.codehaus.jackson.map.TypeDeserializer $r6;
        org.codehaus.jackson.type.JavaType $r4;
        org.codehaus.jackson.map.JsonDeserializer $r5;
        org.codehaus.jackson.map.deser.StdDeserializerProvider$WrappedDeserializer $r7;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r3 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r4 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r3, $r4, $r1);

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r6 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r3, $r4, $r1);

        if $r6 == null goto label1;

        $r7 = new org.codehaus.jackson.map.deser.StdDeserializerProvider$WrappedDeserializer;

        specialinvoke $r7.<org.codehaus.jackson.map.deser.StdDeserializerProvider$WrappedDeserializer: void <init>(org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>($r6, $r5);

        return $r7;

     label1:
        return $r5;
    }

    public org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.ContextualDeserializer $r5;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.JsonDeserializer $r4, $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _findCachedDeserializer(org.codehaus.jackson.type.JavaType)>($r3);

        if $r4 == null goto label1;

        $z0 = $r4 instanceof org.codehaus.jackson.map.ContextualDeserializer;

        if $z0 == 0 goto label3;

        $r5 = (org.codehaus.jackson.map.ContextualDeserializer) $r4;

        $r4 = interfaceinvoke $r5.<org.codehaus.jackson.map.ContextualDeserializer: org.codehaus.jackson.map.JsonDeserializer createContextual(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.BeanProperty)>($r1, $r2);

        return $r4;

     label1:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _createAndCacheValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r3, $r2);

        $r6 = $r4;

        if $r4 != null goto label2;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _handleUnknownValueDeserializer(org.codehaus.jackson.type.JavaType)>($r3);

     label2:
        $z0 = $r6 instanceof org.codehaus.jackson.map.ContextualDeserializer;

        if $z0 == 0 goto label4;

        $r5 = (org.codehaus.jackson.map.ContextualDeserializer) $r6;

        $r4 = interfaceinvoke $r5.<org.codehaus.jackson.map.ContextualDeserializer: org.codehaus.jackson.map.JsonDeserializer createContextual(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.BeanProperty)>($r1, $r2);

     label3:
        return $r4;

     label4:
        return $r6;
    }

    public void flushCachedDeserializers()
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.concurrent.ConcurrentHashMap _cachedDeserializers>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        return;
    }

    public boolean hasValueDeserializerFor(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.JsonDeserializer $r4, $r5;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        java.lang.Exception $r3;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _findCachedDeserializer(org.codehaus.jackson.type.JavaType)>($r2);

        $r5 = $r4;

        if $r4 != null goto label3;

     label1:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _createAndCacheValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, null);

     label2:
        $r5 = $r4;

        goto label3;

     label3:
        if $r5 == null goto label5;

        return 1;

     label4:
        $r3 := @caughtexception;

     label5:
        return 0;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public org.codehaus.jackson.map.DeserializerProvider withAbstractTypeResolver(org.codehaus.jackson.map.AbstractTypeResolver)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.DeserializerFactory $r1;
        org.codehaus.jackson.map.AbstractTypeResolver $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r2 := @parameter0: org.codehaus.jackson.map.AbstractTypeResolver;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.DeserializerFactory withAbstractTypeResolver(org.codehaus.jackson.map.AbstractTypeResolver)>($r2);

        r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory> = $r1;

        return r0;
    }

    public org.codehaus.jackson.map.DeserializerProvider withAdditionalDeserializers(org.codehaus.jackson.map.Deserializers)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.DeserializerFactory $r1;
        org.codehaus.jackson.map.Deserializers $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r2 := @parameter0: org.codehaus.jackson.map.Deserializers;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.DeserializerFactory withAdditionalDeserializers(org.codehaus.jackson.map.Deserializers)>($r2);

        r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory> = $r1;

        return r0;
    }

    public org.codehaus.jackson.map.DeserializerProvider withAdditionalKeyDeserializers(org.codehaus.jackson.map.KeyDeserializers)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.DeserializerFactory $r1;
        org.codehaus.jackson.map.KeyDeserializers $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r2 := @parameter0: org.codehaus.jackson.map.KeyDeserializers;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.DeserializerFactory withAdditionalKeyDeserializers(org.codehaus.jackson.map.KeyDeserializers)>($r2);

        r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory> = $r1;

        return r0;
    }

    public org.codehaus.jackson.map.DeserializerProvider withDeserializerModifier(org.codehaus.jackson.map.deser.BeanDeserializerModifier)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.DeserializerFactory $r1;
        org.codehaus.jackson.map.deser.BeanDeserializerModifier $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r2 := @parameter0: org.codehaus.jackson.map.deser.BeanDeserializerModifier;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.DeserializerFactory withDeserializerModifier(org.codehaus.jackson.map.deser.BeanDeserializerModifier)>($r2);

        r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory> = $r1;

        return r0;
    }
}
