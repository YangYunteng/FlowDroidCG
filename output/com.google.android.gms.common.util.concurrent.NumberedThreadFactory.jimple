public class com.google.android.gms.common.util.concurrent.NumberedThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    public final int priority;
    public final java.lang.String zzih;
    public final java.util.concurrent.atomic.AtomicInteger zzii;
    public final java.util.concurrent.ThreadFactory zzij;

    public void <init>(java.lang.String)
    {
        com.google.android.gms.common.util.concurrent.NumberedThreadFactory r0;
        java.lang.String $r1;

        r0 := @this: com.google.android.gms.common.util.concurrent.NumberedThreadFactory;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.google.android.gms.common.util.concurrent.NumberedThreadFactory: void <init>(java.lang.String,int)>($r1, 0);

        return;
    }

    public void <init>(java.lang.String, int)
    {
        com.google.android.gms.common.util.concurrent.NumberedThreadFactory r0;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i0;
        java.lang.String $r2;
        java.util.concurrent.ThreadFactory $r1;

        r0 := @this: com.google.android.gms.common.util.concurrent.NumberedThreadFactory;

        $r2 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.google.android.gms.common.util.concurrent.NumberedThreadFactory: java.util.concurrent.atomic.AtomicInteger zzii> = $r3;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        r0.<com.google.android.gms.common.util.concurrent.NumberedThreadFactory: java.util.concurrent.ThreadFactory zzij> = $r1;

        staticinvoke <com.google.android.gms.common.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "Name must not be null");

        r0.<com.google.android.gms.common.util.concurrent.NumberedThreadFactory: java.lang.String zzih> = $r2;

        r0.<com.google.android.gms.common.util.concurrent.NumberedThreadFactory: int priority> = 0;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        com.google.android.gms.common.util.concurrent.NumberedThreadFactory r0;
        java.lang.Runnable $r2;
        java.util.concurrent.atomic.AtomicInteger $r7;
        java.lang.Thread $r5;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r6, $r8;
        java.util.concurrent.ThreadFactory $r3;
        com.google.android.gms.common.util.concurrent.zza $r4;

        r0 := @this: com.google.android.gms.common.util.concurrent.NumberedThreadFactory;

        $r2 := @parameter0: java.lang.Runnable;

        $r3 = r0.<com.google.android.gms.common.util.concurrent.NumberedThreadFactory: java.util.concurrent.ThreadFactory zzij>;

        $r4 = new com.google.android.gms.common.util.concurrent.zza;

        specialinvoke $r4.<com.google.android.gms.common.util.concurrent.zza: void <init>(java.lang.Runnable,int)>($r2, 0);

        $r5 = interfaceinvoke $r3.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>($r4);

        $r6 = r0.<com.google.android.gms.common.util.concurrent.NumberedThreadFactory: java.lang.String zzih>;

        $r7 = r0.<com.google.android.gms.common.util.concurrent.NumberedThreadFactory: java.util.concurrent.atomic.AtomicInteger zzii>;

        $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i1 = $i1 + 13;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.lang.Thread: void setName(java.lang.String)>($r6);

        return $r5;
    }
}
