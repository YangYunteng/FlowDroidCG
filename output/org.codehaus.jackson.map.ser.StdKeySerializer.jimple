public final class org.codehaus.jackson.map.ser.StdKeySerializer extends org.codehaus.jackson.map.ser.SerializerBase
{
    public static final org.codehaus.jackson.map.ser.StdKeySerializer instace;

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.StdKeySerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.StdKeySerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.StdKeySerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.StdKeySerializer: org.codehaus.jackson.map.ser.StdKeySerializer instace> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.ser.StdKeySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.StdKeySerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r1;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.ser.StdKeySerializer r0;
        org.codehaus.jackson.node.ObjectNode $r2;

        r0 := @this: org.codehaus.jackson.map.ser.StdKeySerializer;

        $r3 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r1 := @parameter1: java.lang.reflect.Type;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String)>("string");

        return $r2;
    }

    public void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.Object $r2;
        java.lang.Class $r4;
        java.lang.String $r5;
        org.codehaus.jackson.map.ser.StdKeySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.StdKeySerializer;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r4 != class "Ljava/lang/String;" goto label1;

        $r5 = (java.lang.String) $r2;

        goto label2;

     label1:
        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

     label2:
        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r5);

        return;
    }
}
