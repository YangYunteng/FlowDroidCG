public final class com.google.common.util.concurrent.Callables$2 extends java.lang.Object implements com.google.common.util.concurrent.AsyncCallable
{
    public final java.util.concurrent.Callable val$callable;
    public final com.google.common.util.concurrent.ListeningExecutorService val$listeningExecutorService;

    public void <init>(com.google.common.util.concurrent.ListeningExecutorService, java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable $r2;
        com.google.common.util.concurrent.Callables$2 r0;
        com.google.common.util.concurrent.ListeningExecutorService $r1;

        r0 := @this: com.google.common.util.concurrent.Callables$2;

        $r1 := @parameter0: com.google.common.util.concurrent.ListeningExecutorService;

        $r2 := @parameter1: java.util.concurrent.Callable;

        r0.<com.google.common.util.concurrent.Callables$2: com.google.common.util.concurrent.ListeningExecutorService val$listeningExecutorService> = $r1;

        r0.<com.google.common.util.concurrent.Callables$2: java.util.concurrent.Callable val$callable> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture call()
    {
        com.google.common.util.concurrent.ListenableFuture $r2;
        java.util.concurrent.Callable $r1;
        com.google.common.util.concurrent.Callables$2 r0;
        com.google.common.util.concurrent.ListeningExecutorService $r3;

        r0 := @this: com.google.common.util.concurrent.Callables$2;

        $r3 = r0.<com.google.common.util.concurrent.Callables$2: com.google.common.util.concurrent.ListeningExecutorService val$listeningExecutorService>;

        $r1 = r0.<com.google.common.util.concurrent.Callables$2: java.util.concurrent.Callable val$callable>;

        $r2 = interfaceinvoke $r3.<com.google.common.util.concurrent.ListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>($r1);

        return $r2;
    }
}
