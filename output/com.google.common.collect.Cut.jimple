public abstract class com.google.common.collect.Cut extends java.lang.Object implements java.lang.Comparable, java.io.Serializable
{
    public static final long serialVersionUID;
    public final java.lang.Comparable endpoint;

    public void <init>(java.lang.Comparable)
    {
        com.google.common.collect.Cut r0;
        java.lang.Comparable $r1;

        r0 := @this: com.google.common.collect.Cut;

        $r1 := @parameter0: java.lang.Comparable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint> = $r1;

        return;
    }

    public static com.google.common.collect.Cut aboveAll()
    {
        com.google.common.collect.Cut$AboveAll $r0;

        $r0 = staticinvoke <com.google.common.collect.Cut$AboveAll: com.google.common.collect.Cut$AboveAll access$100()>();

        return $r0;
    }

    public static com.google.common.collect.Cut aboveValue(java.lang.Comparable)
    {
        com.google.common.collect.Cut$AboveValue $r1;
        java.lang.Comparable $r0;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 = new com.google.common.collect.Cut$AboveValue;

        specialinvoke $r1.<com.google.common.collect.Cut$AboveValue: void <init>(java.lang.Comparable)>($r0);

        return $r1;
    }

    public static com.google.common.collect.Cut belowAll()
    {
        com.google.common.collect.Cut$BelowAll $r0;

        $r0 = staticinvoke <com.google.common.collect.Cut$BelowAll: com.google.common.collect.Cut$BelowAll access$000()>();

        return $r0;
    }

    public static com.google.common.collect.Cut belowValue(java.lang.Comparable)
    {
        java.lang.Comparable $r0;
        com.google.common.collect.Cut$BelowValue $r1;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 = new com.google.common.collect.Cut$BelowValue;

        specialinvoke $r1.<com.google.common.collect.Cut$BelowValue: void <init>(java.lang.Comparable)>($r0);

        return $r1;
    }

    public com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain)
    {
        com.google.common.collect.Cut r0;
        com.google.common.collect.DiscreteDomain $r1;

        r0 := @this: com.google.common.collect.Cut;

        $r1 := @parameter0: com.google.common.collect.DiscreteDomain;

        return r0;
    }

    public int compareTo(com.google.common.collect.Cut)
    {
        com.google.common.collect.Cut r0, $r2, $r3;
        int $i0;
        java.lang.Comparable $r1, $r4;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.Cut;

        $r2 := @parameter0: com.google.common.collect.Cut;

        $r3 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut belowAll()>();

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        $r3 = staticinvoke <com.google.common.collect.Cut: com.google.common.collect.Cut aboveAll()>();

        if $r2 != $r3 goto label2;

        $i0 = -1;

        return $i0;

     label2:
        $r4 = r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        $r1 = $r2.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        $i0 = staticinvoke <com.google.common.collect.Range: int compareOrThrow(java.lang.Comparable,java.lang.Comparable)>($r4, $r1);

        if $i0 == 0 goto label3;

        return $i0;

     label3:
        $z0 = r0 instanceof com.google.common.collect.Cut$AboveValue;

        $z1 = $r2 instanceof com.google.common.collect.Cut$AboveValue;

        $i0 = staticinvoke <com.google.common.primitives.Booleans: int compare(boolean,boolean)>($z0, $z1);

        return $i0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        com.google.common.collect.Cut r0, $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.Cut;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.common.collect.Cut) $r1;

        $i0 = virtualinvoke r0.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r2);

        return $i0;
    }

    public abstract void describeAsLowerBound(java.lang.StringBuilder);

    public abstract void describeAsUpperBound(java.lang.StringBuilder);

    public java.lang.Comparable endpoint()
    {
        com.google.common.collect.Cut r0;
        java.lang.Comparable r1;

        r0 := @this: com.google.common.collect.Cut;

        r1 = r0.<com.google.common.collect.Cut: java.lang.Comparable endpoint>;

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.collect.Cut r0, $r3;
        int $i0;
        java.lang.Object $r2;
        java.lang.ClassCastException $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Cut;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof com.google.common.collect.Cut;

        if $z0 == 0 goto label4;

        $r3 = (com.google.common.collect.Cut) $r2;

     label1:
        $i0 = virtualinvoke r0.<com.google.common.collect.Cut: int compareTo(com.google.common.collect.Cut)>($r3);

     label2:
        if $i0 != 0 goto label4;

        return 1;

     label3:
        $r1 := @caughtexception;

     label4:
        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public abstract java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain);

    public abstract int hashCode();

    public abstract boolean isLessThan(java.lang.Comparable);

    public abstract java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain);

    public abstract com.google.common.collect.BoundType typeAsLowerBound();

    public abstract com.google.common.collect.BoundType typeAsUpperBound();

    public abstract com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType, com.google.common.collect.DiscreteDomain);

    public abstract com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType, com.google.common.collect.DiscreteDomain);
}
