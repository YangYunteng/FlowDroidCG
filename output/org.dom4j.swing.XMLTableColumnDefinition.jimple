public class org.dom4j.swing.XMLTableColumnDefinition extends java.lang.Object implements java.io.Serializable
{
    public static final int NODE_TYPE;
    public static final int NUMBER_TYPE;
    public static final int OBJECT_TYPE;
    public static final int STRING_TYPE;
    public org.dom4j.XPath columnNameXPath;
    public java.lang.String name;
    public int type;
    public org.dom4j.XPath xpath;

    public void <init>()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(java.lang.String, java.lang.String, int)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath $r2;
        int $i0;
        java.lang.String $r1, $r3;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.String name> = $r3;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: int type> = $i0;

        $r2 = virtualinvoke r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath createXPath(java.lang.String)>($r1);

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath> = $r2;

        return;
    }

    public void <init>(java.lang.String, org.dom4j.XPath, int)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath $r2;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.dom4j.XPath;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.String name> = $r1;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath> = $r2;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: int type> = $i0;

        return;
    }

    public void <init>(org.dom4j.XPath, org.dom4j.XPath, int)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath $r1, $r2;
        int $i0;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r1 := @parameter0: org.dom4j.XPath;

        $r2 := @parameter1: org.dom4j.XPath;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath> = $r2;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath columnNameXPath> = $r1;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: int type> = $i0;

        return;
    }

    public static int parseType(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("string");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("number");

        if $z0 == 0 goto label2;

        return 2;

     label2:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("node");

        if $z0 == 0 goto label3;

        return 3;

     label3:
        return 0;
    }

    public org.dom4j.XPath createXPath(java.lang.String)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        java.lang.String $r2;
        org.dom4j.XPath $r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r2 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.XPath createXPath(java.lang.String)>($r2);

        return $r1;
    }

    public java.lang.Class getColumnClass()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        int $i0;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $i0 = r0.<org.dom4j.swing.XMLTableColumnDefinition: int type>;

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 == 3 goto label1;

        return class "Ljava/lang/Object;";

     label1:
        return class "Lorg/dom4j/Node;";

     label2:
        return class "Ljava/lang/Number;";

     label3:
        return class "Ljava/lang/String;";
    }

    public org.dom4j.XPath getColumnNameXPath()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r1 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath columnNameXPath>;

        return r1;
    }

    public java.lang.String getName()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r1 = r0.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.String name>;

        return r1;
    }

    public int getType()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        int i0;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        i0 = r0.<org.dom4j.swing.XMLTableColumnDefinition: int type>;

        return i0;
    }

    public java.lang.Object getValue(java.lang.Object)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath $r2;
        org.dom4j.Node $r3;
        int $i0;
        java.lang.Object $r1;
        java.lang.String $r5;
        java.lang.Number $r4;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r1 := @parameter0: java.lang.Object;

        $i0 = r0.<org.dom4j.swing.XMLTableColumnDefinition: int type>;

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 == 3 goto label1;

        $r2 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath>;

        $r1 = interfaceinvoke $r2.<org.dom4j.XPath: java.lang.Object evaluate(java.lang.Object)>($r1);

        return $r1;

     label1:
        $r2 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath>;

        $r3 = interfaceinvoke $r2.<org.dom4j.XPath: org.dom4j.Node selectSingleNode(java.lang.Object)>($r1);

        return $r3;

     label2:
        $r2 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath>;

        $r4 = interfaceinvoke $r2.<org.dom4j.XPath: java.lang.Number numberValueOf(java.lang.Object)>($r1);

        return $r4;

     label3:
        $r2 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath>;

        $r5 = interfaceinvoke $r2.<org.dom4j.XPath: java.lang.String valueOf(java.lang.Object)>($r1);

        return $r5;
    }

    public org.dom4j.XPath getXPath()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r1 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath>;

        return r1;
    }

    public void handleException(java.lang.Exception)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Exception $r4;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r4 := @parameter0: java.lang.Exception;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Caught: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

        return;
    }

    public void setColumnNameXPath(org.dom4j.XPath)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath $r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r1 := @parameter0: org.dom4j.XPath;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath columnNameXPath> = $r1;

        return;
    }

    public void setName(java.lang.String)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r1 := @parameter0: java.lang.String;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.String name> = $r1;

        return;
    }

    public void setType(int)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        int $i0;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $i0 := @parameter0: int;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: int type> = $i0;

        return;
    }

    public void setXPath(org.dom4j.XPath)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath $r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r1 := @parameter0: org.dom4j.XPath;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath> = $r1;

        return;
    }

    public static void <clinit>()
    {
        <org.dom4j.swing.XMLTableColumnDefinition: int STRING_TYPE> = 1;

        <org.dom4j.swing.XMLTableColumnDefinition: int OBJECT_TYPE> = 0;

        <org.dom4j.swing.XMLTableColumnDefinition: int NUMBER_TYPE> = 2;

        <org.dom4j.swing.XMLTableColumnDefinition: int NODE_TYPE> = 3;

        return;
    }
}
