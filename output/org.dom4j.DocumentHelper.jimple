public final class org.dom4j.DocumentHelper extends java.lang.Object
{

    public void <init>()
    {
        org.dom4j.DocumentHelper r0;

        r0 := @this: org.dom4j.DocumentHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.dom4j.Attribute createAttribute(org.dom4j.Element, java.lang.String, java.lang.String)
    {
        org.dom4j.Element $r2;
        java.lang.String $r0, $r1;
        org.dom4j.Attribute $r4;
        org.dom4j.DocumentFactory $r3;

        $r2 := @parameter0: org.dom4j.Element;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,java.lang.String,java.lang.String)>($r2, $r0, $r1);

        return $r4;
    }

    public static org.dom4j.Attribute createAttribute(org.dom4j.Element, org.dom4j.QName, java.lang.String)
    {
        org.dom4j.QName $r0;
        org.dom4j.Element $r2;
        java.lang.String $r1;
        org.dom4j.Attribute $r4;
        org.dom4j.DocumentFactory $r3;

        $r2 := @parameter0: org.dom4j.Element;

        $r0 := @parameter1: org.dom4j.QName;

        $r1 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)>($r2, $r0, $r1);

        return $r4;
    }

    public static org.dom4j.CDATA createCDATA(java.lang.String)
    {
        java.lang.String $r0;
        org.dom4j.CDATA $r2;
        org.dom4j.DocumentFactory $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.CDATA createCDATA(java.lang.String)>($r0);

        return $r2;
    }

    public static org.dom4j.Comment createComment(java.lang.String)
    {
        java.lang.String $r0;
        org.dom4j.DocumentFactory $r1;
        org.dom4j.Comment $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Comment createComment(java.lang.String)>($r0);

        return $r2;
    }

    public static org.dom4j.Document createDocument()
    {
        org.dom4j.Document $r1;
        org.dom4j.DocumentFactory $r0;

        $r0 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r1 = virtualinvoke $r0.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        return $r1;
    }

    public static org.dom4j.Document createDocument(org.dom4j.Element)
    {
        org.dom4j.Element $r0;
        org.dom4j.Document $r2;
        org.dom4j.DocumentFactory $r1;

        $r0 := @parameter0: org.dom4j.Element;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument(org.dom4j.Element)>($r0);

        return $r2;
    }

    public static org.dom4j.Element createElement(java.lang.String)
    {
        org.dom4j.Element $r2;
        java.lang.String $r0;
        org.dom4j.DocumentFactory $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(java.lang.String)>($r0);

        return $r2;
    }

    public static org.dom4j.Element createElement(org.dom4j.QName)
    {
        org.dom4j.QName $r0;
        org.dom4j.Element $r2;
        org.dom4j.DocumentFactory $r1;

        $r0 := @parameter0: org.dom4j.QName;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r0);

        return $r2;
    }

    public static org.dom4j.Entity createEntity(java.lang.String, java.lang.String)
    {
        org.dom4j.Entity $r3;
        java.lang.String $r0, $r1;
        org.dom4j.DocumentFactory $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Entity createEntity(java.lang.String,java.lang.String)>($r1, $r0);

        return $r3;
    }

    public static org.dom4j.Namespace createNamespace(java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r3;
        java.lang.String $r0, $r1;
        org.dom4j.DocumentFactory $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>($r1, $r0);

        return $r3;
    }

    public static org.dom4j.rule.Pattern createPattern(java.lang.String)
    {
        java.lang.String $r0;
        org.dom4j.DocumentFactory $r1;
        org.dom4j.rule.Pattern $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.rule.Pattern createPattern(java.lang.String)>($r0);

        return $r2;
    }

    public static org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        org.dom4j.ProcessingInstruction $r3;
        org.dom4j.DocumentFactory $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>($r1, $r0);

        return $r3;
    }

    public static org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String, java.util.Map)
    {
        java.util.Map $r0;
        java.lang.String $r1;
        org.dom4j.ProcessingInstruction $r3;
        org.dom4j.DocumentFactory $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.util.Map;

        $r2 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String,java.util.Map)>($r1, $r0);

        return $r3;
    }

    public static org.dom4j.QName createQName(java.lang.String)
    {
        org.dom4j.QName $r2;
        java.lang.String $r0;
        org.dom4j.DocumentFactory $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>($r0);

        return $r2;
    }

    public static org.dom4j.QName createQName(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.Namespace $r0;
        org.dom4j.QName $r3;
        java.lang.String $r1;
        org.dom4j.DocumentFactory $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: org.dom4j.Namespace;

        $r2 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r1, $r0);

        return $r3;
    }

    public static org.dom4j.Text createText(java.lang.String)
    {
        org.dom4j.Text $r2;
        java.lang.String $r0;
        org.dom4j.DocumentFactory $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Text createText(java.lang.String)>($r0);

        return $r2;
    }

    public static org.dom4j.XPath createXPath(java.lang.String)
    {
        java.lang.String $r0;
        org.dom4j.XPath $r2;
        org.dom4j.DocumentFactory $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.XPath createXPath(java.lang.String)>($r0);

        return $r2;
    }

    public static org.dom4j.XPath createXPath(java.lang.String, org.jaxen.VariableContext)
    {
        org.jaxen.VariableContext $r0;
        org.dom4j.XPath $r3;
        java.lang.String $r1;
        org.dom4j.DocumentFactory $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: org.jaxen.VariableContext;

        $r2 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.XPath createXPath(java.lang.String,org.jaxen.VariableContext)>($r1, $r0);

        return $r3;
    }

    public static org.dom4j.NodeFilter createXPathFilter(java.lang.String)
    {
        java.lang.String $r0;
        org.dom4j.NodeFilter $r2;
        org.dom4j.DocumentFactory $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.NodeFilter createXPathFilter(java.lang.String)>($r0);

        return $r2;
    }

    public static org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.DocumentFactory $r0;

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        return $r0;
    }

    public static java.lang.String getEncoding(java.lang.String)
    {
        java.util.StringTokenizer $r1;
        int $i0;
        java.lang.String $r0, $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("<?xml");

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("?>");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r1 = new java.util.StringTokenizer;

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r0, " =\"\'");

     label1:
        $z0 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r0 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r2 = "encoding";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r0 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        return $r0;

     label3:
        return null;
    }

    public static org.dom4j.Element makeElement(org.dom4j.Branch, java.lang.String)
    {
        org.dom4j.Document $r3;
        org.dom4j.Branch $r1;
        java.util.StringTokenizer $r0;
        int $i0;
        org.dom4j.Element $r4, $r5;
        org.dom4j.QName $r6;
        java.lang.String $r2;
        boolean $z0;

        $r1 := @parameter0: org.dom4j.Branch;

        $r2 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r2, "/");

        $z0 = $r1 instanceof org.dom4j.Document;

        if $z0 == 0 goto label1;

        $r3 = (org.dom4j.Document) $r1;

        $r4 = interfaceinvoke $r3.<org.dom4j.Document: org.dom4j.Element getRootElement()>();

        $r5 = $r4;

        $r2 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        if $r4 != null goto label2;

        $r5 = interfaceinvoke $r3.<org.dom4j.Branch: org.dom4j.Element addElement(java.lang.String)>($r2);

        goto label2;

     label1:
        $r5 = (org.dom4j.Element) $r1;

     label2:
        $r4 = null;

     label3:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label4;

        return $r4;

     label4:
        $r2 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(58);

        if $i0 <= 0 goto label5;

        $r6 = interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.QName getQName(java.lang.String)>($r2);

        $r4 = interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r6);

        goto label6;

     label5:
        $r4 = interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>($r2);

     label6:
        if $r4 != null goto label7;

        $r5 = interfaceinvoke $r5.<org.dom4j.Branch: org.dom4j.Element addElement(java.lang.String)>($r2);

        goto label8;

     label7:
        $r5 = $r4;

     label8:
        $r4 = $r5;

        goto label3;
    }

    public static org.dom4j.Document parseText(java.lang.String)
    {
        org.xml.sax.InputSource $r0;
        org.dom4j.Document $r5;
        java.io.StringReader $r1;
        java.lang.String $r2, $r4;
        org.dom4j.io.SAXReader $r3;

        $r2 := @parameter0: java.lang.String;

        $r3 = new org.dom4j.io.SAXReader;

        specialinvoke $r3.<org.dom4j.io.SAXReader: void <init>()>();

        $r4 = staticinvoke <org.dom4j.DocumentHelper: java.lang.String getEncoding(java.lang.String)>($r2);

        $r0 = new org.xml.sax.InputSource;

        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>($r2);

        specialinvoke $r0.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r1);

        virtualinvoke $r0.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r4);

        $r5 = virtualinvoke $r3.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r0);

        $r2 = interfaceinvoke $r5.<org.dom4j.Document: java.lang.String getXMLEncoding()>();

        if $r2 != null goto label1;

        interfaceinvoke $r5.<org.dom4j.Document: void setXMLEncoding(java.lang.String)>($r4);

     label1:
        return $r5;
    }

    public static java.util.List selectNodes(java.lang.String, java.util.List)
    {
        java.util.List $r0;
        java.lang.String $r1;
        org.dom4j.XPath $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.util.List;

        $r2 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.XPath createXPath(java.lang.String)>($r1);

        $r0 = interfaceinvoke $r2.<org.dom4j.XPath: java.util.List selectNodes(java.lang.Object)>($r0);

        return $r0;
    }

    public static java.util.List selectNodes(java.lang.String, org.dom4j.Node)
    {
        java.util.List $r3;
        org.dom4j.XPath $r2;
        org.dom4j.Node $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: org.dom4j.Node;

        $r2 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.XPath createXPath(java.lang.String)>($r1);

        $r3 = interfaceinvoke $r2.<org.dom4j.XPath: java.util.List selectNodes(java.lang.Object)>($r0);

        return $r3;
    }

    public static void sort(java.util.List, java.lang.String)
    {
        java.util.List $r0;
        java.lang.String $r2;
        org.dom4j.XPath $r1;

        $r0 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.XPath createXPath(java.lang.String)>($r2);

        interfaceinvoke $r1.<org.dom4j.XPath: void sort(java.util.List)>($r0);

        return;
    }

    public static void sort(java.util.List, java.lang.String, boolean)
    {
        java.util.List $r0;
        org.dom4j.XPath $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.XPath createXPath(java.lang.String)>($r2);

        interfaceinvoke $r1.<org.dom4j.XPath: void sort(java.util.List,boolean)>($r0, $z0);

        return;
    }
}
