public final class com.google.common.io.ReaderInputStream extends java.io.InputStream
{
    public java.nio.ByteBuffer byteBuffer;
    public java.nio.CharBuffer charBuffer;
    public boolean doneFlushing;
    public boolean draining;
    public final java.nio.charset.CharsetEncoder encoder;
    public boolean endOfInput;
    public final java.io.Reader reader;
    public final byte[] singleByte;

    public void <init>(java.io.Reader, java.nio.charset.Charset, int)
    {
        com.google.common.io.ReaderInputStream r0;
        java.nio.charset.Charset $r2;
        java.nio.charset.CharsetEncoder $r3;
        java.nio.charset.CodingErrorAction $r4;
        int $i0;
        java.io.Reader $r1;

        r0 := @this: com.google.common.io.ReaderInputStream;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r3 = virtualinvoke $r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r4);

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r3 = virtualinvoke $r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r4);

        specialinvoke r0.<com.google.common.io.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)>($r1, $r3, $i0);

        return;
    }

    public void <init>(java.io.Reader, java.nio.charset.CharsetEncoder, int)
    {
        byte[] $r2;
        com.google.common.io.ReaderInputStream r0;
        java.nio.CharBuffer $r5;
        java.io.Reader $r3;
        java.nio.ByteBuffer $r6;
        java.nio.charset.CharsetEncoder $r1, $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.google.common.io.ReaderInputStream;

        $r3 := @parameter0: java.io.Reader;

        $r1 := @parameter1: java.nio.charset.CharsetEncoder;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $z0 = 1;

        $r2 = newarray (byte)[1];

        r0.<com.google.common.io.ReaderInputStream: byte[] singleByte> = $r2;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        r0.<com.google.common.io.ReaderInputStream: java.io.Reader reader> = $r3;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r4 = $r1;

        r0.<com.google.common.io.ReaderInputStream: java.nio.charset.CharsetEncoder encoder> = $r4;

        if $i0 <= 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "bufferSize must be positive: %s", $i0);

        virtualinvoke $r1.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();

        $r5 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>($i0);

        r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer> = $r5;

        $r5 = r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer>;

        virtualinvoke $r5.<java.nio.CharBuffer: java.nio.Buffer flip()>();

        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        r0.<com.google.common.io.ReaderInputStream: java.nio.ByteBuffer byteBuffer> = $r6;

        return;
    }

    public static int availableCapacity(java.nio.Buffer)
    {
        int $i0, $i1;
        java.nio.Buffer $r0;

        $r0 := @parameter0: java.nio.Buffer;

        $i0 = virtualinvoke $r0.<java.nio.Buffer: int capacity()>();

        $i1 = virtualinvoke $r0.<java.nio.Buffer: int limit()>();

        $i0 = $i0 - $i1;

        return $i0;
    }

    private int drain(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.io.ReaderInputStream r0;
        int $i0, $i1, $i2;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.google.common.io.ReaderInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<com.google.common.io.ReaderInputStream: java.nio.ByteBuffer byteBuffer>;

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r2 = r0.<com.google.common.io.ReaderInputStream: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r1, $i0, $i1);

        return $i1;
    }

    public static java.nio.CharBuffer grow(java.nio.CharBuffer)
    {
        java.nio.CharBuffer $r0, $r2;
        int $i0;
        char[] $r1;

        $r0 := @parameter0: java.nio.CharBuffer;

        $r1 = virtualinvoke $r0.<java.nio.CharBuffer: char[] array()>();

        $i0 = virtualinvoke $r0.<java.nio.CharBuffer: int capacity()>();

        $i0 = $i0 * 2;

        $r1 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>($r1, $i0);

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>($r1);

        $i0 = virtualinvoke $r0.<java.nio.CharBuffer: int position()>();

        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i0);

        $i0 = virtualinvoke $r0.<java.nio.CharBuffer: int limit()>();

        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.Buffer limit(int)>($i0);

        return $r2;
    }

    private void readMoreChars()
    {
        com.google.common.io.ReaderInputStream r0;
        java.nio.CharBuffer $r1;
        int $i0, $i1, $i2;
        char[] $r3;
        java.io.Reader $r2;

        r0 := @this: com.google.common.io.ReaderInputStream;

        $r1 = r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer>;

        $i0 = staticinvoke <com.google.common.io.ReaderInputStream: int availableCapacity(java.nio.Buffer)>($r1);

        if $i0 != 0 goto label2;

        $r1 = r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer>;

        $i0 = virtualinvoke $r1.<java.nio.CharBuffer: int position()>();

        if $i0 <= 0 goto label1;

        $r1 = r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer>;

        $r1 = virtualinvoke $r1.<java.nio.CharBuffer: java.nio.CharBuffer compact()>();

        virtualinvoke $r1.<java.nio.CharBuffer: java.nio.Buffer flip()>();

        goto label2;

     label1:
        $r1 = r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer>;

        $r1 = staticinvoke <com.google.common.io.ReaderInputStream: java.nio.CharBuffer grow(java.nio.CharBuffer)>($r1);

        r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer> = $r1;

     label2:
        $r1 = r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer>;

        $i0 = virtualinvoke $r1.<java.nio.CharBuffer: int limit()>();

        $r2 = r0.<com.google.common.io.ReaderInputStream: java.io.Reader reader>;

        $r1 = r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer>;

        $r3 = virtualinvoke $r1.<java.nio.CharBuffer: char[] array()>();

        $r1 = r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer>;

        $i1 = staticinvoke <com.google.common.io.ReaderInputStream: int availableCapacity(java.nio.Buffer)>($r1);

        $i1 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r3, $i0, $i1);

        $i2 = -1;

        if $i1 != $i2 goto label3;

        r0.<com.google.common.io.ReaderInputStream: boolean endOfInput> = 1;

        return;

     label3:
        $r1 = r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer>;

        $i0 = $i0 + $i1;

        virtualinvoke $r1.<java.nio.CharBuffer: java.nio.Buffer limit(int)>($i0);

        return;
    }

    private void startDraining(boolean)
    {
        com.google.common.io.ReaderInputStream r0;
        int $i0;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: com.google.common.io.ReaderInputStream;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.google.common.io.ReaderInputStream: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.common.io.ReaderInputStream: java.nio.ByteBuffer byteBuffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 != 0 goto label1;

        $r1 = r0.<com.google.common.io.ReaderInputStream: java.nio.ByteBuffer byteBuffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int capacity()>();

        $i0 = $i0 * 2;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        r0.<com.google.common.io.ReaderInputStream: java.nio.ByteBuffer byteBuffer> = $r1;

        return;

     label1:
        r0.<com.google.common.io.ReaderInputStream: boolean draining> = 1;

        return;
    }

    public void close()
    {
        com.google.common.io.ReaderInputStream r0;
        java.io.Reader $r1;

        r0 := @this: com.google.common.io.ReaderInputStream;

        $r1 = r0.<com.google.common.io.ReaderInputStream: java.io.Reader reader>;

        virtualinvoke $r1.<java.io.Reader: void close()>();

        return;
    }

    public int read()
    {
        byte[] $r1;
        com.google.common.io.ReaderInputStream r0;
        byte $b1;
        int $i0;

        r0 := @this: com.google.common.io.ReaderInputStream;

        $r1 = r0.<com.google.common.io.ReaderInputStream: byte[] singleByte>;

        $i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>($r1);

        if $i0 != 1 goto label1;

        $r1 = r0.<com.google.common.io.ReaderInputStream: byte[] singleByte>;

        $b1 = $r1[0];

        $i0 = staticinvoke <com.google.common.primitives.UnsignedBytes: int toInt(byte)>($b1);

        return $i0;

     label1:
        $i0 = -1;

        return $i0;
    }

    public int read(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.io.ReaderInputStream r0;
        java.nio.CharBuffer $r5;
        java.nio.ByteBuffer $r2;
        java.nio.charset.CoderResult $r3;
        java.nio.charset.CharsetEncoder $r4;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        r0 := @this: com.google.common.io.ReaderInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i2, $i3);

        if $i1 != 0 goto label01;

        return 0;

     label01:
        $z1 = r0.<com.google.common.io.ReaderInputStream: boolean endOfInput>;

        $i2 = 0;

     label02:
        $z0 = r0.<com.google.common.io.ReaderInputStream: boolean draining>;

        if $z0 == 0 goto label06;

        $i3 = $i0 + $i2;

        $i4 = $i1 - $i2;

        $i3 = specialinvoke r0.<com.google.common.io.ReaderInputStream: int drain(byte[],int,int)>($r1, $i3, $i4);

        $i2 = $i2 + $i3;

        if $i2 == $i1 goto label04;

        $z0 = r0.<com.google.common.io.ReaderInputStream: boolean doneFlushing>;

        if $z0 == 0 goto label03;

        goto label04;

     label03:
        r0.<com.google.common.io.ReaderInputStream: boolean draining> = 0;

        $r2 = r0.<com.google.common.io.ReaderInputStream: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        goto label06;

     label04:
        if $i2 <= 0 goto label05;

        return $i2;

     label05:
        $i0 = -1;

        return $i0;

     label06:
        $z0 = r0.<com.google.common.io.ReaderInputStream: boolean doneFlushing>;

        if $z0 == 0 goto label07;

        $r3 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        goto label09;

     label07:
        if $z1 == 0 goto label08;

        $r4 = r0.<com.google.common.io.ReaderInputStream: java.nio.charset.CharsetEncoder encoder>;

        $r2 = r0.<com.google.common.io.ReaderInputStream: java.nio.ByteBuffer byteBuffer>;

        $r3 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>($r2);

        goto label09;

     label08:
        $r4 = r0.<com.google.common.io.ReaderInputStream: java.nio.charset.CharsetEncoder encoder>;

        $r5 = r0.<com.google.common.io.ReaderInputStream: java.nio.CharBuffer charBuffer>;

        $r2 = r0.<com.google.common.io.ReaderInputStream: java.nio.ByteBuffer byteBuffer>;

        $z0 = r0.<com.google.common.io.ReaderInputStream: boolean endOfInput>;

        $r3 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r5, $r2, $z0);

     label09:
        $z0 = virtualinvoke $r3.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z0 == 0 goto label10;

        specialinvoke r0.<com.google.common.io.ReaderInputStream: void startDraining(boolean)>(1);

        goto label02;

     label10:
        $z0 = virtualinvoke $r3.<java.nio.charset.CoderResult: boolean isUnderflow()>();

        if $z0 == 0 goto label13;

        if $z1 == 0 goto label11;

        r0.<com.google.common.io.ReaderInputStream: boolean doneFlushing> = 1;

        specialinvoke r0.<com.google.common.io.ReaderInputStream: void startDraining(boolean)>(0);

        goto label02;

     label11:
        $z0 = r0.<com.google.common.io.ReaderInputStream: boolean endOfInput>;

        if $z0 == 0 goto label12;

        $z1 = 1;

        goto label06;

     label12:
        specialinvoke r0.<com.google.common.io.ReaderInputStream: void readMoreChars()>();

        goto label06;

     label13:
        $z0 = virtualinvoke $r3.<java.nio.charset.CoderResult: boolean isError()>();

        if $z0 == 0 goto label06;

        virtualinvoke $r3.<java.nio.charset.CoderResult: void throwException()>();

        return 0;
    }
}
