public final class com.google.common.collect.Sets$SubSet extends java.util.AbstractSet
{
    public final com.google.common.collect.ImmutableMap inputSet;
    public final int mask;

    public void <init>(com.google.common.collect.ImmutableMap, int)
    {
        com.google.common.collect.Sets$SubSet r0;
        int $i0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.Sets$SubSet;

        $r1 := @parameter0: com.google.common.collect.ImmutableMap;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<com.google.common.collect.Sets$SubSet: com.google.common.collect.ImmutableMap inputSet> = $r1;

        r0.<com.google.common.collect.Sets$SubSet: int mask> = $i0;

        return;
    }

    public static com.google.common.collect.ImmutableMap access$100(com.google.common.collect.Sets$SubSet)
    {
        com.google.common.collect.Sets$SubSet $r0;
        com.google.common.collect.ImmutableMap r1;

        $r0 := @parameter0: com.google.common.collect.Sets$SubSet;

        r1 = $r0.<com.google.common.collect.Sets$SubSet: com.google.common.collect.ImmutableMap inputSet>;

        return r1;
    }

    public static int access$200(com.google.common.collect.Sets$SubSet)
    {
        com.google.common.collect.Sets$SubSet $r0;
        int i0;

        $r0 := @parameter0: com.google.common.collect.Sets$SubSet;

        i0 = $r0.<com.google.common.collect.Sets$SubSet: int mask>;

        return i0;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r2;
        com.google.common.collect.Sets$SubSet r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.Integer $r3;

        r0 := @this: com.google.common.collect.Sets$SubSet;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Sets$SubSet: com.google.common.collect.ImmutableMap inputSet>;

        $r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.lang.Integer) $r1;

        if $r3 == null goto label1;

        $i0 = r0.<com.google.common.collect.Sets$SubSet: int mask>;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = 1 << $i1;

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.Sets$SubSet r0;
        com.google.common.collect.Sets$SubSet$1 $r1;

        r0 := @this: com.google.common.collect.Sets$SubSet;

        $r1 = new com.google.common.collect.Sets$SubSet$1;

        specialinvoke $r1.<com.google.common.collect.Sets$SubSet$1: void <init>(com.google.common.collect.Sets$SubSet)>(r0);

        return $r1;
    }

    public int size()
    {
        com.google.common.collect.Sets$SubSet r0;
        int $i0;

        r0 := @this: com.google.common.collect.Sets$SubSet;

        $i0 = r0.<com.google.common.collect.Sets$SubSet: int mask>;

        $i0 = staticinvoke <java.lang.Integer: int bitCount(int)>($i0);

        return $i0;
    }
}
