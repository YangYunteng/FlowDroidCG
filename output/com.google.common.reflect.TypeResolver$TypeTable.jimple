public class com.google.common.reflect.TypeResolver$TypeTable extends java.lang.Object
{
    public final com.google.common.collect.ImmutableMap map;

    public void <init>()
    {
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.reflect.TypeResolver$TypeTable r0;

        r0 := @this: com.google.common.reflect.TypeResolver$TypeTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        r0.<com.google.common.reflect.TypeResolver$TypeTable: com.google.common.collect.ImmutableMap map> = $r1;

        return;
    }

    public void <init>(com.google.common.collect.ImmutableMap)
    {
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.reflect.TypeResolver$TypeTable r0;

        r0 := @this: com.google.common.reflect.TypeResolver$TypeTable;

        $r1 := @parameter0: com.google.common.collect.ImmutableMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.common.reflect.TypeResolver$TypeTable: com.google.common.collect.ImmutableMap map> = $r1;

        return;
    }

    public final java.lang.reflect.Type resolve(java.lang.reflect.TypeVariable)
    {
        com.google.common.reflect.TypeResolver$TypeTable$1 $r1;
        java.lang.reflect.Type $r2;
        com.google.common.reflect.TypeResolver$TypeTable r0;
        java.lang.reflect.TypeVariable $r3;

        r0 := @this: com.google.common.reflect.TypeResolver$TypeTable;

        $r3 := @parameter0: java.lang.reflect.TypeVariable;

        $r1 = new com.google.common.reflect.TypeResolver$TypeTable$1;

        specialinvoke $r1.<com.google.common.reflect.TypeResolver$TypeTable$1: void <init>(com.google.common.reflect.TypeResolver$TypeTable,java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)>(r0, $r3, r0);

        $r2 = virtualinvoke r0.<com.google.common.reflect.TypeResolver$TypeTable: java.lang.reflect.Type resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)>($r3, $r1);

        return $r2;
    }

    public java.lang.reflect.Type resolveInternal(java.lang.reflect.TypeVariable, com.google.common.reflect.TypeResolver$TypeTable)
    {
        java.lang.reflect.GenericDeclaration $r10;
        com.google.common.collect.ImmutableMap $r3;
        java.lang.reflect.TypeVariable $r1;
        com.google.common.reflect.TypeResolver$TypeVariableKey $r4;
        java.lang.reflect.Type $r6;
        com.google.common.reflect.TypeResolver$TypeTable r0, $r2;
        java.lang.reflect.Type[] $r7, $r9;
        int $i0;
        java.lang.Object $r5;
        com.google.common.reflect.TypeResolver $r8;
        java.lang.String $r11;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeResolver$TypeTable;

        $r1 := @parameter0: java.lang.reflect.TypeVariable;

        $r2 := @parameter1: com.google.common.reflect.TypeResolver$TypeTable;

        $r3 = r0.<com.google.common.reflect.TypeResolver$TypeTable: com.google.common.collect.ImmutableMap map>;

        $r4 = new com.google.common.reflect.TypeResolver$TypeVariableKey;

        specialinvoke $r4.<com.google.common.reflect.TypeResolver$TypeVariableKey: void <init>(java.lang.reflect.TypeVariable)>($r1);

        $r5 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.lang.reflect.Type) $r5;

        if $r6 != null goto label3;

        $r7 = interfaceinvoke $r1.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        $i0 = lengthof $r7;

        if $i0 != 0 goto label1;

        return $r1;

     label1:
        $r8 = new com.google.common.reflect.TypeResolver;

        specialinvoke $r8.<com.google.common.reflect.TypeResolver: void <init>(com.google.common.reflect.TypeResolver$TypeTable,com.google.common.reflect.TypeResolver$1)>($r2, null);

        $r9 = staticinvoke <com.google.common.reflect.TypeResolver: java.lang.reflect.Type[] access$300(com.google.common.reflect.TypeResolver,java.lang.reflect.Type[])>($r8, $r7);

        $z0 = <com.google.common.reflect.Types$NativeTypeVariableEquals: boolean NATIVE_TYPE_VARIABLE_ONLY>;

        if $z0 == 0 goto label2;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r7, $r9);

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        $r10 = interfaceinvoke $r1.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $r11 = interfaceinvoke $r1.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r1 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.TypeVariable newArtificialTypeVariable(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])>($r10, $r11, $r9);

        return $r1;

     label3:
        $r8 = new com.google.common.reflect.TypeResolver;

        specialinvoke $r8.<com.google.common.reflect.TypeResolver: void <init>(com.google.common.reflect.TypeResolver$TypeTable,com.google.common.reflect.TypeResolver$1)>($r2, null);

        $r6 = virtualinvoke $r8.<com.google.common.reflect.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>($r6);

        return $r6;
    }

    public final com.google.common.reflect.TypeResolver$TypeTable where(java.util.Map)
    {
        java.util.Map$Entry $r7;
        java.util.Iterator $r5;
        com.google.common.collect.ImmutableMap $r3;
        java.util.Set $r4;
        com.google.common.collect.ImmutableMap$Builder $r2;
        com.google.common.reflect.TypeResolver$TypeVariableKey $r8;
        java.lang.reflect.Type $r9;
        com.google.common.reflect.TypeResolver$TypeTable r0;
        java.util.Map $r1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: com.google.common.reflect.TypeResolver$TypeTable;

        $r1 := @parameter0: java.util.Map;

        $r2 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

        $r3 = r0.<com.google.common.reflect.TypeResolver$TypeTable: com.google.common.collect.ImmutableMap map>;

        virtualinvoke $r2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map)>($r3);

        $r4 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (com.google.common.reflect.TypeResolver$TypeVariableKey) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.reflect.Type) $r6;

        $z0 = virtualinvoke $r8.<com.google.common.reflect.TypeResolver$TypeVariableKey: boolean equalsType(java.lang.reflect.Type)>($r9);

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Type variable %s bound to itself", $r8);

        virtualinvoke $r2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label1;

     label2:
        r0 = new com.google.common.reflect.TypeResolver$TypeTable;

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

        specialinvoke r0.<com.google.common.reflect.TypeResolver$TypeTable: void <init>(com.google.common.collect.ImmutableMap)>($r3);

        return r0;
    }
}
