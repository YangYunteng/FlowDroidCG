public final class i.i.a extends java.lang.Object implements i.i.b
{
    public final java.util.concurrent.atomic.AtomicReference a;

    public void <init>(i.i.b)
    {
        i.i.a r0;
        java.util.concurrent.atomic.AtomicReference $r2;
        i.i.b $r1;

        r0 := @this: i.i.a;

        $r1 := @parameter0: i.i.b;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "sequence");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r1);

        r0.<i.i.a: java.util.concurrent.atomic.AtomicReference a> = $r2;

        return;
    }

    public java.util.Iterator iterator()
    {
        java.lang.IllegalStateException $r5;
        java.util.Iterator $r4;
        i.i.b $r3;
        i.i.a r0;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: i.i.a;

        $r1 = r0.<i.i.a: java.util.concurrent.atomic.AtomicReference a>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        $r3 = (i.i.b) $r2;

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r3.<i.i.b: java.util.Iterator iterator()>();

        return $r4;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This sequence can be consumed only once.");

        throw $r5;
    }
}
