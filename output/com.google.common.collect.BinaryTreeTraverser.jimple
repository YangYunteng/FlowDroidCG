public abstract class com.google.common.collect.BinaryTreeTraverser extends com.google.common.collect.TreeTraverser
{

    public void <init>()
    {
        com.google.common.collect.BinaryTreeTraverser r0;

        r0 := @this: com.google.common.collect.BinaryTreeTraverser;

        specialinvoke r0.<com.google.common.collect.TreeTraverser: void <init>()>();

        return;
    }

    public static void acceptIfPresent(java.util.function.Consumer, com.google.common.base.Optional)
    {
        java.util.function.Consumer $r0;
        com.google.common.base.Optional $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.function.Consumer;

        $r1 := @parameter1: com.google.common.base.Optional;

        $z0 = virtualinvoke $r1.<com.google.common.base.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.google.common.base.Optional: java.lang.Object get()>();

        interfaceinvoke $r0.<java.util.function.Consumer: void accept(java.lang.Object)>($r2);

     label1:
        return;
    }

    public static void access$000(java.util.function.Consumer, com.google.common.base.Optional)
    {
        java.util.function.Consumer $r0;
        com.google.common.base.Optional $r1;

        $r0 := @parameter0: java.util.function.Consumer;

        $r1 := @parameter1: com.google.common.base.Optional;

        staticinvoke <com.google.common.collect.BinaryTreeTraverser: void acceptIfPresent(java.util.function.Consumer,com.google.common.base.Optional)>($r0, $r1);

        return;
    }

    public static void access$100(java.util.Deque, com.google.common.base.Optional)
    {
        java.util.Deque $r0;
        com.google.common.base.Optional $r1;

        $r0 := @parameter0: java.util.Deque;

        $r1 := @parameter1: com.google.common.base.Optional;

        staticinvoke <com.google.common.collect.BinaryTreeTraverser: void pushIfPresent(java.util.Deque,com.google.common.base.Optional)>($r0, $r1);

        return;
    }

    public static void pushIfPresent(java.util.Deque, com.google.common.base.Optional)
    {
        com.google.common.base.Optional $r1;
        java.lang.Object $r2;
        java.util.Deque $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.Deque;

        $r1 := @parameter1: com.google.common.base.Optional;

        $z0 = virtualinvoke $r1.<com.google.common.base.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.google.common.base.Optional: java.lang.Object get()>();

        interfaceinvoke $r0.<java.util.Deque: void addLast(java.lang.Object)>($r2);

     label1:
        return;
    }

    public final java.lang.Iterable children(java.lang.Object)
    {
        com.google.common.collect.BinaryTreeTraverser r0;
        java.lang.Object $r1;
        com.google.common.collect.BinaryTreeTraverser$1 $r2;

        r0 := @this: com.google.common.collect.BinaryTreeTraverser;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.BinaryTreeTraverser$1;

        specialinvoke $r2.<com.google.common.collect.BinaryTreeTraverser$1: void <init>(com.google.common.collect.BinaryTreeTraverser,java.lang.Object)>(r0, $r1);

        return $r2;
    }

    public final com.google.common.collect.FluentIterable inOrderTraversal(java.lang.Object)
    {
        com.google.common.collect.BinaryTreeTraverser r0;
        com.google.common.collect.BinaryTreeTraverser$2 $r2;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.BinaryTreeTraverser;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.BinaryTreeTraverser$2;

        specialinvoke $r2.<com.google.common.collect.BinaryTreeTraverser$2: void <init>(com.google.common.collect.BinaryTreeTraverser,java.lang.Object)>(r0, $r1);

        return $r2;
    }

    public abstract com.google.common.base.Optional leftChild(java.lang.Object);

    public com.google.common.collect.UnmodifiableIterator postOrderIterator(java.lang.Object)
    {
        com.google.common.collect.BinaryTreeTraverser r0;
        java.lang.Object $r1;
        com.google.common.collect.BinaryTreeTraverser$PostOrderIterator $r2;

        r0 := @this: com.google.common.collect.BinaryTreeTraverser;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new com.google.common.collect.BinaryTreeTraverser$PostOrderIterator;

        specialinvoke $r2.<com.google.common.collect.BinaryTreeTraverser$PostOrderIterator: void <init>(com.google.common.collect.BinaryTreeTraverser,java.lang.Object)>(r0, $r1);

        return $r2;
    }

    public com.google.common.collect.UnmodifiableIterator preOrderIterator(java.lang.Object)
    {
        com.google.common.collect.BinaryTreeTraverser r0;
        java.lang.Object $r1;
        com.google.common.collect.BinaryTreeTraverser$PreOrderIterator $r2;

        r0 := @this: com.google.common.collect.BinaryTreeTraverser;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new com.google.common.collect.BinaryTreeTraverser$PreOrderIterator;

        specialinvoke $r2.<com.google.common.collect.BinaryTreeTraverser$PreOrderIterator: void <init>(com.google.common.collect.BinaryTreeTraverser,java.lang.Object)>(r0, $r1);

        return $r2;
    }

    public abstract com.google.common.base.Optional rightChild(java.lang.Object);
}
