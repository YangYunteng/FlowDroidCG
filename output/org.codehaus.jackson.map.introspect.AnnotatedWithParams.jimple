public abstract class org.codehaus.jackson.map.introspect.AnnotatedWithParams extends org.codehaus.jackson.map.introspect.AnnotatedMember
{
    public final org.codehaus.jackson.map.introspect.AnnotationMap _annotations;
    public final org.codehaus.jackson.map.introspect.AnnotationMap[] _paramAnnotations;

    public void <init>(org.codehaus.jackson.map.introspect.AnnotationMap, org.codehaus.jackson.map.introspect.AnnotationMap[])
    {
        org.codehaus.jackson.map.introspect.AnnotationMap[] $r2;
        org.codehaus.jackson.map.introspect.AnnotatedWithParams r0;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedWithParams;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotationMap;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.AnnotationMap[];

        specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMember: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotationMap _annotations> = $r1;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotationMap[] _paramAnnotations> = $r2;

        return;
    }

    public final void addIfNotPresent(java.lang.'annotation'.Annotation)
    {
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.AnnotatedWithParams r0;
        org.codehaus.jackson.map.introspect.AnnotationMap $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedWithParams;

        $r1 := @parameter0: java.lang.'annotation'.Annotation;

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotationMap _annotations>;

        virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotationMap: void addIfNotPresent(java.lang.'annotation'.Annotation)>($r1);

        return;
    }

    public final void addOrOverride(java.lang.'annotation'.Annotation)
    {
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.AnnotatedWithParams r0;
        org.codehaus.jackson.map.introspect.AnnotationMap $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedWithParams;

        $r1 := @parameter0: java.lang.'annotation'.Annotation;

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotationMap _annotations>;

        virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotationMap: void add(java.lang.'annotation'.Annotation)>($r1);

        return;
    }

    public final void addOrOverrideParam(int, java.lang.'annotation'.Annotation)
    {
        int $i0;
        java.lang.'annotation'.Annotation $r1;
        org.codehaus.jackson.map.introspect.AnnotationMap[] $r2;
        org.codehaus.jackson.map.introspect.AnnotatedWithParams r0;
        org.codehaus.jackson.map.introspect.AnnotationMap $r3;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedWithParams;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.'annotation'.Annotation;

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotationMap[] _paramAnnotations>;

        $r3 = $r2[$i0];

        if $r3 != null goto label1;

        $r3 = new org.codehaus.jackson.map.introspect.AnnotationMap;

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotationMap: void <init>()>();

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotationMap[] _paramAnnotations>;

        $r2[$i0] = $r3;

     label1:
        virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotationMap: void add(java.lang.'annotation'.Annotation)>($r1);

        return;
    }

    public final java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.'annotation'.Annotation $r2;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.AnnotatedWithParams r0;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedWithParams;

        $r3 := @parameter0: java.lang.Class;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotationMap _annotations>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: java.lang.'annotation'.Annotation get(java.lang.Class)>($r3);

        return $r2;
    }

    public final int getAnnotationCount()
    {
        int $i0;
        org.codehaus.jackson.map.introspect.AnnotatedWithParams r0;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedWithParams;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotationMap _annotations>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: int size()>();

        return $i0;
    }

    public abstract org.codehaus.jackson.map.introspect.AnnotatedParameter getParameter(int);

    public final org.codehaus.jackson.map.introspect.AnnotationMap getParameterAnnotations(int)
    {
        org.codehaus.jackson.map.introspect.AnnotationMap[] $r1;
        int $i0, $i1;
        org.codehaus.jackson.map.introspect.AnnotatedWithParams r0;
        org.codehaus.jackson.map.introspect.AnnotationMap $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedWithParams;

        $i1 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotationMap[] _paramAnnotations>;

        if $r1 == null goto label1;

        if $i1 < 0 goto label1;

        $i0 = lengthof $r1;

        if $i1 > $i0 goto label1;

        $r2 = $r1[$i1];

        return $r2;

     label1:
        return null;
    }

    public abstract java.lang.Class getParameterClass(int);

    public abstract int getParameterCount();

    public abstract java.lang.reflect.Type getParameterType(int);

    public org.codehaus.jackson.type.JavaType getType(org.codehaus.jackson.map.type.TypeBindings, java.lang.reflect.TypeVariable[])
    {
        java.lang.reflect.TypeVariable $r4;
        org.codehaus.jackson.map.type.TypeBindings $r1, $r3;
        org.codehaus.jackson.map.introspect.AnnotatedWithParams r0;
        java.lang.reflect.Type $r7;
        java.lang.reflect.TypeVariable[] $r2;
        int $i0, $i1;
        java.lang.reflect.Type[] $r6;
        org.codehaus.jackson.type.JavaType $r8;
        java.lang.String $r5;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedWithParams;

        $r1 := @parameter0: org.codehaus.jackson.map.type.TypeBindings;

        $r2 := @parameter1: java.lang.reflect.TypeVariable[];

        if $r2 == null goto label4;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label4;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.map.type.TypeBindings childInstance()>();

        $r1 = $r3;

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r4 = $r2[$i1];

        $r5 = interfaceinvoke $r4.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        virtualinvoke $r3.<org.codehaus.jackson.map.type.TypeBindings: void _addPlaceholder(java.lang.String)>($r5);

        $r6 = interfaceinvoke $r4.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        $r7 = $r6[0];

        if $r7 != null goto label2;

        $r8 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

        goto label3;

     label2:
        $r8 = virtualinvoke $r3.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType resolveType(java.lang.reflect.Type)>($r7);

     label3:
        $r5 = interfaceinvoke $r4.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        virtualinvoke $r3.<org.codehaus.jackson.map.type.TypeBindings: void addBinding(java.lang.String,org.codehaus.jackson.type.JavaType)>($r5, $r8);

        $i1 = $i1 + 1;

        goto label1;

     label4:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: java.lang.reflect.Type getGenericType()>();

        $r8 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType resolveType(java.lang.reflect.Type)>($r7);

        return $r8;
    }

    public final org.codehaus.jackson.type.JavaType resolveParameterType(int, org.codehaus.jackson.map.type.TypeBindings)
    {
        java.lang.reflect.Type $r2;
        int $i0;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.type.TypeBindings $r1;
        org.codehaus.jackson.map.introspect.AnnotatedWithParams r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedWithParams;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: java.lang.reflect.Type getParameterType(int)>($i0);

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType resolveType(java.lang.reflect.Type)>($r2);

        return $r3;
    }
}
