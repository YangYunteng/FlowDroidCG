public final class com.google.common.collect.CartesianList extends java.util.AbstractList implements java.util.RandomAccess
{
    public final transient com.google.common.collect.ImmutableList axes;
    public final transient int[] axesSizeProduct;

    public void <init>(com.google.common.collect.ImmutableList)
    {
        java.lang.IllegalArgumentException $r6;
        com.google.common.collect.CartesianList r0;
        java.util.List $r5;
        com.google.common.collect.ImmutableList $r2;
        int[] $r3;
        int $i0, $i1, $i2;
        java.lang.ArithmeticException $r1;
        java.lang.Object $r4;

        r0 := @this: com.google.common.collect.CartesianList;

        $r2 := @parameter0: com.google.common.collect.ImmutableList;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<com.google.common.collect.CartesianList: com.google.common.collect.ImmutableList axes> = $r2;

        $i0 = virtualinvoke $r2.<java.util.AbstractCollection: int size()>();

        $i0 = $i0 + 1;

        $r3 = newarray (int)[$i0];

        $i0 = virtualinvoke $r2.<java.util.AbstractCollection: int size()>();

        $r3[$i0] = 1;

     label01:
        $i0 = virtualinvoke $r2.<java.util.AbstractCollection: int size()>();

     label02:
        $i0 = $i0 - 1;

     label03:
        if $i0 < 0 goto label08;

        $i1 = $i0 + 1;

        $i1 = $r3[$i1];

     label04:
        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

     label05:
        $r5 = (java.util.List) $r4;

     label06:
        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i1 = staticinvoke <com.google.common.math.IntMath: int checkedMultiply(int,int)>($i1, $i2);

     label07:
        $r3[$i0] = $i1;

        $i1 = -1;

        $i0 = $i0 + $i1;

        goto label03;

     label08:
        r0.<com.google.common.collect.CartesianList: int[] axesSizeProduct> = $r3;

        return;

     label09:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cartesian product too large; must have size at most Integer.MAX_VALUE");

        goto label10;

     label10:
        throw $r6;

     label11:
        $r1 := @caughtexception;

        goto label09;

        catch java.lang.ArithmeticException from label01 to label02 with label11;
        catch java.lang.ArithmeticException from label04 to label05 with label11;
        catch java.lang.ArithmeticException from label06 to label07 with label11;
    }

    public static com.google.common.collect.ImmutableList access$000(com.google.common.collect.CartesianList)
    {
        com.google.common.collect.CartesianList $r0;
        com.google.common.collect.ImmutableList r1;

        $r0 := @parameter0: com.google.common.collect.CartesianList;

        r1 = $r0.<com.google.common.collect.CartesianList: com.google.common.collect.ImmutableList axes>;

        return r1;
    }

    public static int access$100(com.google.common.collect.CartesianList, int, int)
    {
        int $i0, $i1;
        com.google.common.collect.CartesianList $r0;

        $r0 := @parameter0: com.google.common.collect.CartesianList;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i0 = specialinvoke $r0.<com.google.common.collect.CartesianList: int getAxisIndexForProductIndex(int,int)>($i0, $i1);

        return $i0;
    }

    public static java.util.List create(java.util.List)
    {
        java.util.Iterator $r2;
        java.util.List $r0;
        com.google.common.collect.CartesianList $r5;
        com.google.common.collect.ImmutableList $r4;
        int $i0;
        java.lang.Object $r3;
        com.google.common.collect.ImmutableList$Builder $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 = new com.google.common.collect.ImmutableList$Builder;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableList$Builder: void <init>(int)>($i0);

        $r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r0 = (java.util.List) $r3;

        $r4 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r0);

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        return $r4;

     label2:
        virtualinvoke $r1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r4);

        goto label1;

     label3:
        $r5 = new com.google.common.collect.CartesianList;

        $r4 = virtualinvoke $r1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        specialinvoke $r5.<com.google.common.collect.CartesianList: void <init>(com.google.common.collect.ImmutableList)>($r4);

        return $r5;
    }

    private int getAxisIndexForProductIndex(int, int)
    {
        com.google.common.collect.CartesianList r0;
        java.util.List $r4;
        com.google.common.collect.ImmutableList $r2;
        int[] $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r3;

        r0 := @this: com.google.common.collect.CartesianList;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $r1 = r0.<com.google.common.collect.CartesianList: int[] axesSizeProduct>;

        $i0 = $i2 + 1;

        $i0 = $r1[$i0];

        $i1 = $i1 / $i0;

        $r2 = r0.<com.google.common.collect.CartesianList: com.google.common.collect.ImmutableList axes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        $r4 = (java.util.List) $r3;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = $i1 % $i2;

        return $i1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.ListIterator $r4;
        com.google.common.collect.CartesianList r0;
        java.util.List $r2;
        com.google.common.collect.ImmutableList $r3;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.CartesianList;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.util.List;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (java.util.List) $r1;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = r0.<com.google.common.collect.CartesianList: com.google.common.collect.ImmutableList axes>;

        $i1 = virtualinvoke $r3.<java.util.AbstractCollection: int size()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $r4 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i0 = interfaceinvoke $r4.<java.util.ListIterator: int nextIndex()>();

        $r3 = r0.<com.google.common.collect.CartesianList: com.google.common.collect.ImmutableList axes>;

        $r1 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        $r2 = (java.util.List) $r1;

        $r1 = interfaceinvoke $r4.<java.util.ListIterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        return 0;

     label4:
        return 1;
    }

    public com.google.common.collect.ImmutableList get(int)
    {
        com.google.common.collect.CartesianList r0;
        com.google.common.collect.CartesianList$1 $r1;
        int $i0, $i1;

        r0 := @this: com.google.common.collect.CartesianList;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.google.common.collect.CartesianList: int size()>();

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i0, $i1);

        $r1 = new com.google.common.collect.CartesianList$1;

        specialinvoke $r1.<com.google.common.collect.CartesianList$1: void <init>(com.google.common.collect.CartesianList,int)>(r0, $i0);

        return $r1;
    }

    public volatile java.lang.Object get(int)
    {
        int $i0;
        com.google.common.collect.CartesianList r0;
        com.google.common.collect.ImmutableList $r1;

        r0 := @this: com.google.common.collect.CartesianList;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.google.common.collect.CartesianList: com.google.common.collect.ImmutableList get(int)>($i0);

        return $r1;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.CartesianList r0;
        int[] $r1;

        r0 := @this: com.google.common.collect.CartesianList;

        $r1 = r0.<com.google.common.collect.CartesianList: int[] axesSizeProduct>;

        $i0 = $r1[0];

        return $i0;
    }
}
