public class org.codehaus.jackson.util.TokenBuffer extends org.codehaus.jackson.JsonGenerator
{
    public static final int DEFAULT_PARSER_FEATURES;
    public int _appendOffset;
    public boolean _closed;
    public org.codehaus.jackson.util.TokenBuffer$Segment _first;
    public int _generatorFeatures;
    public org.codehaus.jackson.util.TokenBuffer$Segment _last;
    public org.codehaus.jackson.ObjectCodec _objectCodec;
    public org.codehaus.jackson.impl.JsonWriteContext _writeContext;

    static void <clinit>()
    {
        int $i0;

        $i0 = staticinvoke <org.codehaus.jackson.JsonParser$Feature: int collectDefaults()>();

        <org.codehaus.jackson.util.TokenBuffer: int DEFAULT_PARSER_FEATURES> = $i0;

        return;
    }

    public void <init>(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.util.TokenBuffer$Segment $r3;
        org.codehaus.jackson.ObjectCodec $r2;
        int $i0;
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 := @parameter0: org.codehaus.jackson.ObjectCodec;

        specialinvoke r0.<org.codehaus.jackson.JsonGenerator: void <init>()>();

        r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.ObjectCodec _objectCodec> = $r2;

        $i0 = <org.codehaus.jackson.util.TokenBuffer: int DEFAULT_PARSER_FEATURES>;

        r0.<org.codehaus.jackson.util.TokenBuffer: int _generatorFeatures> = $i0;

        $r1 = staticinvoke <org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext createRootContext()>();

        r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r1;

        $r3 = new org.codehaus.jackson.util.TokenBuffer$Segment;

        specialinvoke $r3.<org.codehaus.jackson.util.TokenBuffer$Segment: void <init>()>();

        r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.util.TokenBuffer$Segment _last> = $r3;

        r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.util.TokenBuffer$Segment _first> = $r3;

        r0.<org.codehaus.jackson.util.TokenBuffer: int _appendOffset> = 0;

        return;
    }

    public final void _append(org.codehaus.jackson.JsonToken)
    {
        org.codehaus.jackson.util.TokenBuffer$Segment $r1;
        org.codehaus.jackson.JsonToken $r2;
        int $i0;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 := @parameter0: org.codehaus.jackson.JsonToken;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.util.TokenBuffer$Segment _last>;

        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer: int _appendOffset>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment append(int,org.codehaus.jackson.JsonToken)>($i0, $r2);

        if $r1 != null goto label1;

        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer: int _appendOffset>;

        $i0 = $i0 + 1;

        r0.<org.codehaus.jackson.util.TokenBuffer: int _appendOffset> = $i0;

        return;

     label1:
        r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.util.TokenBuffer$Segment _last> = $r1;

        r0.<org.codehaus.jackson.util.TokenBuffer: int _appendOffset> = 1;

        return;
    }

    public final void _append(org.codehaus.jackson.JsonToken, java.lang.Object)
    {
        org.codehaus.jackson.util.TokenBuffer$Segment $r1;
        org.codehaus.jackson.JsonToken $r2;
        int $i0;
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 := @parameter0: org.codehaus.jackson.JsonToken;

        $r3 := @parameter1: java.lang.Object;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.util.TokenBuffer$Segment _last>;

        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer: int _appendOffset>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment append(int,org.codehaus.jackson.JsonToken,java.lang.Object)>($i0, $r2, $r3);

        if $r1 != null goto label1;

        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer: int _appendOffset>;

        $i0 = $i0 + 1;

        r0.<org.codehaus.jackson.util.TokenBuffer: int _appendOffset> = $i0;

        return;

     label1:
        r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.util.TokenBuffer$Segment _last> = $r1;

        r0.<org.codehaus.jackson.util.TokenBuffer: int _appendOffset> = 1;

        return;
    }

    public void _reportUnsupportedOperation()
    {
        java.lang.UnsupportedOperationException $r1;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Called operation not supported for TokenBuffer");

        throw $r1;
    }

    public org.codehaus.jackson.JsonParser asParser()
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.ObjectCodec $r2;
        org.codehaus.jackson.JsonParser $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.ObjectCodec _objectCodec>;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.JsonParser asParser(org.codehaus.jackson.ObjectCodec)>($r2);

        return $r1;
    }

    public org.codehaus.jackson.JsonParser asParser(org.codehaus.jackson.JsonParser)
    {
        org.codehaus.jackson.util.TokenBuffer$Segment $r2;
        org.codehaus.jackson.util.TokenBuffer$Parser $r1;
        org.codehaus.jackson.ObjectCodec $r4;
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.JsonLocation $r5;
        org.codehaus.jackson.JsonParser $r3;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r3 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 = new org.codehaus.jackson.util.TokenBuffer$Parser;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.util.TokenBuffer$Segment _first>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.ObjectCodec getCodec()>();

        specialinvoke $r1.<org.codehaus.jackson.util.TokenBuffer$Parser: void <init>(org.codehaus.jackson.util.TokenBuffer$Segment,org.codehaus.jackson.ObjectCodec)>($r2, $r4);

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonLocation getTokenLocation()>();

        virtualinvoke $r1.<org.codehaus.jackson.util.TokenBuffer$Parser: void setLocation(org.codehaus.jackson.JsonLocation)>($r5);

        return $r1;
    }

    public org.codehaus.jackson.JsonParser asParser(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.util.TokenBuffer$Segment $r3;
        org.codehaus.jackson.util.TokenBuffer$Parser $r2;
        org.codehaus.jackson.ObjectCodec $r1;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        $r2 = new org.codehaus.jackson.util.TokenBuffer$Parser;

        $r3 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.util.TokenBuffer$Segment _first>;

        specialinvoke $r2.<org.codehaus.jackson.util.TokenBuffer$Parser: void <init>(org.codehaus.jackson.util.TokenBuffer$Segment,org.codehaus.jackson.ObjectCodec)>($r3, $r1);

        return $r2;
    }

    public void close()
    {
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        r0.<org.codehaus.jackson.util.TokenBuffer: boolean _closed> = 1;

        return;
    }

    public void copyCurrentEvent(org.codehaus.jackson.JsonParser)
    {
        org.codehaus.jackson.JsonToken $r3;
        org.codehaus.jackson.util.TokenBuffer r0;
        long $l1;
        java.math.BigDecimal $r7;
        int[] $r2;
        int $i0, $i2;
        java.math.BigInteger $r8;
        java.lang.String $r10;
        org.codehaus.jackson.JsonParser $r1;
        double $d0;
        boolean $z0;
        java.lang.RuntimeException $r4;
        org.codehaus.jackson.JsonParser$NumberType $r6;
        float $f0;
        char[] $r9;
        java.lang.Object $r5;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r3.<java.lang.Enum: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label18;
            case 2: goto label17;
            case 3: goto label16;
            case 4: goto label15;
            case 5: goto label14;
            case 6: goto label12;
            case 7: goto label09;
            case 8: goto label06;
            case 9: goto label05;
            case 10: goto label04;
            case 11: goto label03;
            case 12: goto label02;
            default: goto label01;
        };

     label01:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error: should never end up through this code path");

        throw $r4;

     label02:
        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeObject(java.lang.Object)>($r5);

        return;

     label03:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeNull()>();

        return;

     label04:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeBoolean(boolean)>(0);

        return;

     label05:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeBoolean(boolean)>(1);

        return;

     label06:
        $r2 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i0 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>();

        $i0 = $r2[$i0];

        if $i0 == 3 goto label08;

        if $i0 == 4 goto label07;

        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeNumber(double)>($d0);

        return;

     label07:
        $f0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: float getFloatValue()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeNumber(float)>($f0);

        return;

     label08:
        $r7 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeNumber(java.math.BigDecimal)>($r7);

        return;

     label09:
        $r2 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i0 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>();

        $i0 = $r2[$i0];

        if $i0 == 1 goto label11;

        if $i0 == 2 goto label10;

        $l1 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeNumber(long)>($l1);

        return;

     label10:
        $r8 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeNumber(java.math.BigInteger)>($r8);

        return;

     label11:
        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeNumber(int)>($i0);

        return;

     label12:
        $z0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: boolean hasTextCharacters()>();

        if $z0 == 0 goto label13;

        $r9 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: char[] getTextCharacters()>();

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getTextOffset()>();

        $i2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getTextLength()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeString(char[],int,int)>($r9, $i0, $i2);

        return;

     label13:
        $r10 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeString(java.lang.String)>($r10);

        return;

     label14:
        $r10 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getCurrentName()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeFieldName(java.lang.String)>($r10);

        return;

     label15:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeEndArray()>();

        return;

     label16:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeStartArray()>();

        return;

     label17:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeEndObject()>();

        return;

     label18:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeStartObject()>();

        return;
    }

    public void copyCurrentStructure(org.codehaus.jackson.JsonParser)
    {
        org.codehaus.jackson.JsonToken $r2, $r3, $r4;
        org.codehaus.jackson.util.TokenBuffer r0;
        int[] $r6;
        int $i0;
        java.lang.String $r5;
        org.codehaus.jackson.JsonParser $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r3 = $r2;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r2 != $r4 goto label1;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getCurrentName()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeFieldName(java.lang.String)>($r5);

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

     label1:
        $r6 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $i0 = virtualinvoke $r3.<java.lang.Enum: int ordinal()>();

        $i0 = $r6[$i0];

        if $i0 == 1 goto label5;

        if $i0 == 3 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void copyCurrentEvent(org.codehaus.jackson.JsonParser)>($r1);

        return;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeStartArray()>();

     label3:
        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r2 == $r3 goto label4;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void copyCurrentStructure(org.codehaus.jackson.JsonParser)>($r1);

        goto label3;

     label4:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeEndArray()>();

        return;

     label5:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeStartObject()>();

     label6:
        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        if $r2 == $r3 goto label7;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void copyCurrentStructure(org.codehaus.jackson.JsonParser)>($r1);

        goto label6;

     label7:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeEndObject()>();

        return;
    }

    public org.codehaus.jackson.JsonGenerator disable(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        int $i0, $i1, $i2;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer: int _generatorFeatures>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i2 = -1;

        $i1 = $i1 ^ $i2;

        $i0 = $i1 & $i0;

        r0.<org.codehaus.jackson.util.TokenBuffer: int _generatorFeatures> = $i0;

        return r0;
    }

    public org.codehaus.jackson.JsonGenerator enable(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        int $i0, $i1;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer: int _generatorFeatures>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i0 = $i1 | $i0;

        r0.<org.codehaus.jackson.util.TokenBuffer: int _generatorFeatures> = $i0;

        return r0;
    }

    public void flush()
    {
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        return;
    }

    public org.codehaus.jackson.ObjectCodec getCodec()
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.ObjectCodec r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        r1 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.ObjectCodec _objectCodec>;

        return r1;
    }

    public volatile org.codehaus.jackson.JsonStreamContext getOutputContext()
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext getOutputContext()>();

        return $r1;
    }

    public final org.codehaus.jackson.impl.JsonWriteContext getOutputContext()
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.impl.JsonWriteContext r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        r1 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        return r1;
    }

    public boolean isClosed()
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        z0 = r0.<org.codehaus.jackson.util.TokenBuffer: boolean _closed>;

        return z0;
    }

    public boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        int $i0, $i1;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer: int _generatorFeatures>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void serialize(org.codehaus.jackson.JsonGenerator)
    {
        java.lang.Float $r8;
        org.codehaus.jackson.JsonToken $r5;
        java.lang.Double $r9;
        org.codehaus.jackson.util.TokenBuffer r0;
        long $l2;
        org.codehaus.jackson.SerializableString $r15;
        java.math.BigDecimal $r7;
        int[] $r1;
        org.codehaus.jackson.JsonGenerator $r2;
        int $i0, $i1;
        java.math.BigInteger $r14;
        java.lang.String $r10;
        java.lang.Number $r13;
        boolean $z0;
        double $d0;
        org.codehaus.jackson.JsonGenerationException $r18;
        java.lang.RuntimeException $r16;
        org.codehaus.jackson.util.TokenBuffer$Segment $r3, $r4;
        float $f0;
        java.lang.Object $r6;
        java.lang.StringBuilder $r11, $r17;
        java.lang.Class $r12;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 := @parameter0: org.codehaus.jackson.JsonGenerator;

        $r3 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.util.TokenBuffer$Segment _first>;

        $i0 = -1;

     label01:
        $i0 = $i0 + 1;

        if $i0 < 16 goto label03;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment next()>();

        $r3 = $r4;

        if $r4 != null goto label02;

        return;

     label02:
        $i0 = 0;

     label03:
        $r5 = virtualinvoke $r3.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.JsonToken type(int)>($i0);

        if $r5 != null goto label04;

        return;

     label04:
        $r1 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $i1 = virtualinvoke $r5.<java.lang.Enum: int ordinal()>();

        $i1 = $r1[$i1];

        lookupswitch($i1)
        {
            case 1: goto label26;
            case 2: goto label25;
            case 3: goto label24;
            case 4: goto label23;
            case 5: goto label21;
            case 6: goto label19;
            case 7: goto label16;
            case 8: goto label10;
            case 9: goto label09;
            case 10: goto label08;
            case 11: goto label07;
            case 12: goto label06;
            default: goto label05;
        };

     label05:
        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error: should never end up through this code path");

        throw $r16;

     label06:
        $r6 = virtualinvoke $r3.<org.codehaus.jackson.util.TokenBuffer$Segment: java.lang.Object get(int)>($i0);

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeObject(java.lang.Object)>($r6);

        goto label01;

     label07:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeNull()>();

        goto label01;

     label08:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeBoolean(boolean)>(0);

        goto label01;

     label09:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeBoolean(boolean)>(1);

        goto label01;

     label10:
        $r6 = virtualinvoke $r3.<org.codehaus.jackson.util.TokenBuffer$Segment: java.lang.Object get(int)>($i0);

        $z0 = $r6 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label11;

        $r7 = (java.math.BigDecimal) $r6;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(java.math.BigDecimal)>($r7);

        goto label01;

     label11:
        $z0 = $r6 instanceof java.lang.Float;

        if $z0 == 0 goto label12;

        $r8 = (java.lang.Float) $r6;

        $f0 = virtualinvoke $r8.<java.lang.Float: float floatValue()>();

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(float)>($f0);

        goto label01;

     label12:
        $z0 = $r6 instanceof java.lang.Double;

        if $z0 == 0 goto label13;

        $r9 = (java.lang.Double) $r6;

        $d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(double)>($d0);

        goto label01;

     label13:
        if $r6 != null goto label14;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeNull()>();

        goto label01;

     label14:
        $z0 = $r6 instanceof java.lang.String;

        if $z0 == 0 goto label15;

        $r10 = (java.lang.String) $r6;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(java.lang.String)>($r10);

        goto label01;

     label15:
        $r18 = new org.codehaus.jackson.JsonGenerationException;

        $r17 = new java.lang.StringBuilder;

        $r11 = $r17;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized value type for VALUE_NUMBER_FLOAT: ");

        $r12 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", can not serialize");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.codehaus.jackson.JsonGenerationException: void <init>(java.lang.String)>($r10);

        throw $r18;

     label16:
        $r6 = virtualinvoke $r3.<org.codehaus.jackson.util.TokenBuffer$Segment: java.lang.Object get(int)>($i0);

        $r13 = (java.lang.Number) $r6;

        $z0 = $r13 instanceof java.math.BigInteger;

        if $z0 == 0 goto label17;

        $r14 = (java.math.BigInteger) $r13;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(java.math.BigInteger)>($r14);

        goto label01;

     label17:
        $z0 = $r13 instanceof java.lang.Long;

        if $z0 == 0 goto label18;

        $l2 = virtualinvoke $r13.<java.lang.Number: long longValue()>();

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(long)>($l2);

        goto label01;

     label18:
        $i1 = virtualinvoke $r13.<java.lang.Number: int intValue()>();

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i1);

        goto label01;

     label19:
        $r6 = virtualinvoke $r3.<org.codehaus.jackson.util.TokenBuffer$Segment: java.lang.Object get(int)>($i0);

        $z0 = $r6 instanceof org.codehaus.jackson.SerializableString;

        if $z0 == 0 goto label20;

        $r15 = (org.codehaus.jackson.SerializableString) $r6;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeString(org.codehaus.jackson.SerializableString)>($r15);

        goto label01;

     label20:
        $r10 = (java.lang.String) $r6;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeString(java.lang.String)>($r10);

        goto label01;

     label21:
        $r6 = virtualinvoke $r3.<org.codehaus.jackson.util.TokenBuffer$Segment: java.lang.Object get(int)>($i0);

        $z0 = $r6 instanceof org.codehaus.jackson.SerializableString;

        if $z0 == 0 goto label22;

        $r15 = (org.codehaus.jackson.SerializableString) $r6;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeFieldName(org.codehaus.jackson.SerializableString)>($r15);

        goto label01;

     label22:
        $r10 = (java.lang.String) $r6;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeFieldName(java.lang.String)>($r10);

        goto label01;

     label23:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeEndArray()>();

        goto label01;

     label24:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        goto label01;

     label25:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeEndObject()>();

        goto label01;

     label26:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeStartObject()>();

        goto label01;
    }

    public org.codehaus.jackson.JsonGenerator setCodec(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.ObjectCodec $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.ObjectCodec _objectCodec> = $r1;

        return r0;
    }

    public java.lang.String toString()
    {
        java.lang.IllegalStateException $r6;
        org.codehaus.jackson.JsonToken $r3;
        org.codehaus.jackson.util.TokenBuffer r0;
        java.io.IOException $r5;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        org.codehaus.jackson.JsonParser $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TokenBuffer: ");

        $r2 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.JsonParser asParser()>();

        $i0 = 0;

     label1:
        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

     label2:
        if $r3 != null goto label4;

        if $i0 < 100 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ... (truncated ");

        $i0 = $i0 - 100;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries)");

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label4:
        if $i0 >= 100 goto label6;

        if $i0 <= 0 goto label5;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label5:
        $r4 = virtualinvoke $r3.<java.lang.Enum: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label6:
        $i0 = $i0 + 1;

        goto label1;

     label7:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r5);

        goto label8;

     label8:
        throw $r6;

        catch java.io.IOException from label1 to label2 with label7;
    }

    public org.codehaus.jackson.JsonGenerator useDefaultPrettyPrinter()
    {
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        return r0;
    }

    public void writeBinary(org.codehaus.jackson.Base64Variant, byte[], int, int)
    {
        byte[] $r1, $r3;
        int $i0, $i1;
        org.codehaus.jackson.Base64Variant $r2;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 := @parameter0: org.codehaus.jackson.Base64Variant;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r3, 0, $i1);

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeObject(java.lang.Object)>($r3);

        return;
    }

    public void writeBoolean(boolean)
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.JsonToken $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE>;

        goto label2;

     label1:
        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE>;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken)>($r1);

        return;
    }

    public final void writeEndArray()
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.impl.JsonWriteContext $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken)>($r2);

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext getParent()>();

        if $r1 == null goto label1;

        r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r1;

     label1:
        return;
    }

    public final void writeEndObject()
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.impl.JsonWriteContext $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken)>($r2);

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext getParent()>();

        if $r1 == null goto label1;

        r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r1;

     label1:
        return;
    }

    public final void writeFieldName(java.lang.String)
    {
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.String $r1;
        org.codehaus.jackson.impl.JsonWriteContext $r3;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r2, $r1);

        $r3 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        virtualinvoke $r3.<org.codehaus.jackson.impl.JsonWriteContext: int writeFieldName(java.lang.String)>($r1);

        return;
    }

    public void writeFieldName(org.codehaus.jackson.SerializableString)
    {
        org.codehaus.jackson.JsonToken $r3;
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.String $r1;
        org.codehaus.jackson.impl.JsonWriteContext $r4;
        org.codehaus.jackson.SerializableString $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 := @parameter0: org.codehaus.jackson.SerializableString;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r3, $r2);

        $r4 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r1 = interfaceinvoke $r2.<org.codehaus.jackson.SerializableString: java.lang.String getValue()>();

        virtualinvoke $r4.<org.codehaus.jackson.impl.JsonWriteContext: int writeFieldName(java.lang.String)>($r1);

        return;
    }

    public void writeFieldName(org.codehaus.jackson.io.SerializedString)
    {
        org.codehaus.jackson.JsonToken $r3;
        org.codehaus.jackson.io.SerializedString $r2;
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.String $r1;
        org.codehaus.jackson.impl.JsonWriteContext $r4;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 := @parameter0: org.codehaus.jackson.io.SerializedString;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r3, $r2);

        $r4 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.io.SerializedString: java.lang.String getValue()>();

        virtualinvoke $r4.<org.codehaus.jackson.impl.JsonWriteContext: int writeFieldName(java.lang.String)>($r1);

        return;
    }

    public void writeNull()
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.JsonToken $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken)>($r1);

        return;
    }

    public void writeNumber(double)
    {
        org.codehaus.jackson.JsonToken $r1;
        java.lang.Double $r2;
        org.codehaus.jackson.util.TokenBuffer r0;
        double $d0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $d0 := @parameter0: double;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r1, $r2);

        return;
    }

    public void writeNumber(float)
    {
        java.lang.Float $r2;
        org.codehaus.jackson.JsonToken $r1;
        float $f0;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $f0 := @parameter0: float;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r1, $r2);

        return;
    }

    public void writeNumber(int)
    {
        org.codehaus.jackson.JsonToken $r1;
        int $i0;
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.Integer $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $i0 := @parameter0: int;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r1, $r2);

        return;
    }

    public void writeNumber(long)
    {
        org.codehaus.jackson.JsonToken $r1;
        java.lang.Long $r2;
        org.codehaus.jackson.util.TokenBuffer r0;
        long $l0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $l0 := @parameter0: long;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r1, $r2);

        return;
    }

    public void writeNumber(java.lang.String)
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.String $r1;
        org.codehaus.jackson.JsonToken $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r2, $r1);

        return;
    }

    public void writeNumber(java.math.BigDecimal)
    {
        java.math.BigDecimal $r1;
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.JsonToken $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: java.math.BigDecimal;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeNull()>();

        return;

     label1:
        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r2, $r1);

        return;
    }

    public void writeNumber(java.math.BigInteger)
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        java.math.BigInteger $r1;
        org.codehaus.jackson.JsonToken $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: java.math.BigInteger;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeNull()>();

        return;

     label1:
        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r2, $r1);

        return;
    }

    public void writeObject(java.lang.Object)
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.Object $r1;
        org.codehaus.jackson.JsonToken $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r2, $r1);

        return;
    }

    public void writeRaw(char)
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        char $c0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $c0 := @parameter0: char;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _reportUnsupportedOperation()>();

        return;
    }

    public void writeRaw(java.lang.String)
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _reportUnsupportedOperation()>();

        return;
    }

    public void writeRaw(java.lang.String, int, int)
    {
        int $i0, $i1;
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _reportUnsupportedOperation()>();

        return;
    }

    public void writeRaw(char[], int, int)
    {
        int $i0, $i1;
        char[] $r1;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _reportUnsupportedOperation()>();

        return;
    }

    public void writeRawUTF8String(byte[], int, int)
    {
        byte[] $r1;
        int $i0, $i1;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _reportUnsupportedOperation()>();

        return;
    }

    public void writeRawValue(java.lang.String)
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _reportUnsupportedOperation()>();

        return;
    }

    public void writeRawValue(java.lang.String, int, int)
    {
        int $i0, $i1;
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _reportUnsupportedOperation()>();

        return;
    }

    public void writeRawValue(char[], int, int)
    {
        int $i0, $i1;
        char[] $r1;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _reportUnsupportedOperation()>();

        return;
    }

    public final void writeStartArray()
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.impl.JsonWriteContext $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken)>($r2);

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext createChildArrayContext()>();

        r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r1;

        return;
    }

    public final void writeStartObject()
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.impl.JsonWriteContext $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken)>($r2);

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext createChildObjectContext()>();

        r0.<org.codehaus.jackson.util.TokenBuffer: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r1;

        return;
    }

    public void writeString(java.lang.String)
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.String $r1;
        org.codehaus.jackson.JsonToken $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeNull()>();

        return;

     label1:
        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r2, $r1);

        return;
    }

    public void writeString(org.codehaus.jackson.SerializableString)
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.SerializableString $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: org.codehaus.jackson.SerializableString;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeNull()>();

        return;

     label1:
        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r2, $r1);

        return;
    }

    public void writeString(char[], int, int)
    {
        int $i0, $i1;
        char[] $r1;
        org.codehaus.jackson.util.TokenBuffer r0;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r1, $i0, $i1);

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void writeString(java.lang.String)>($r2);

        return;
    }

    public void writeTree(org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.util.TokenBuffer r0;
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: org.codehaus.jackson.JsonNode;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _append(org.codehaus.jackson.JsonToken,java.lang.Object)>($r2, $r1);

        return;
    }

    public void writeUTF8String(byte[], int, int)
    {
        byte[] $r1;
        int $i0, $i1;
        org.codehaus.jackson.util.TokenBuffer r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer: void _reportUnsupportedOperation()>();

        return;
    }
}
