public final class com.google.common.collect.Multisets extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.collect.Multisets r0;

        r0 := @this: com.google.common.collect.Multisets;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.collect.Multiset a(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multiset $r0, $r1;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: com.google.common.collect.Multiset;

        interfaceinvoke $r0.<java.util.Collection: boolean addAll(java.util.Collection)>($r1);

        return $r0;
    }

    public static java.util.Spliterator a(com.google.common.collect.Multiset$Entry)
    {
        java.util.List $r2;
        int $i0;
        java.lang.Object $r1;
        com.google.common.collect.Multiset$Entry $r0;
        java.util.Spliterator $r3;

        $r0 := @parameter0: com.google.common.collect.Multiset$Entry;

        $i0 = interfaceinvoke $r0.<com.google.common.collect.Multiset$Entry: int getCount()>();

        $r1 = interfaceinvoke $r0.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List nCopies(int,java.lang.Object)>($i0, $r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Spliterator spliterator()>();

        return $r3;
    }

    public static void a(java.util.function.Function, java.util.function.ToIntFunction, com.google.common.collect.Multiset, java.lang.Object)
    {
        com.google.common.collect.Multiset $r0;
        java.util.function.ToIntFunction $r3;
        int $i0;
        java.lang.Object $r1, $r4;
        java.util.function.Function $r2;

        $r2 := @parameter0: java.util.function.Function;

        $r3 := @parameter1: java.util.function.ToIntFunction;

        $r0 := @parameter2: com.google.common.collect.Multiset;

        $r1 := @parameter3: java.lang.Object;

        $r4 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        $i0 = interfaceinvoke $r3.<java.util.function.ToIntFunction: int applyAsInt(java.lang.Object)>($r1);

        interfaceinvoke $r0.<com.google.common.collect.Multiset: int add(java.lang.Object,int)>($r4, $i0);

        return;
    }

    public static boolean addAllImpl(com.google.common.collect.Multiset, java.util.Collection)
    {
        java.util.Iterator $r4;
        com.google.common.collect.Multiset $r0, $r2;
        java.util.Collection $r1;
        java.util.Set $r3;
        com.google.common.collect.Multiset$Entry $r6;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: java.util.Collection;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z0 = $r1 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label3;

        $r2 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset cast(java.lang.Iterable)>($r1);

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.common.collect.Multiset$Entry) $r5;

        $r5 = interfaceinvoke $r6.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = interfaceinvoke $r6.<com.google.common.collect.Multiset$Entry: int getCount()>();

        interfaceinvoke $r0.<com.google.common.collect.Multiset: int add(java.lang.Object,int)>($r5, $i0);

        goto label2;

     label3:
        $r4 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        staticinvoke <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>($r0, $r4);

     label4:
        return 1;
    }

    public static com.google.common.collect.Multiset cast(java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        com.google.common.collect.Multiset $r1;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = (com.google.common.collect.Multiset) $r0;

        return $r1;
    }

    public static boolean containsOccurrences(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
    {
        java.util.Iterator $r3;
        com.google.common.collect.Multiset $r0, $r1;
        java.util.Set $r2;
        com.google.common.collect.Multiset$Entry $r5;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: com.google.common.collect.Multiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.common.collect.Multiset$Entry) $r4;

        $r4 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = interfaceinvoke $r0.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r4);

        $i1 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: int getCount()>();

        if $i0 >= $i1 goto label1;

        return 0;

     label2:
        return 1;
    }

    public static com.google.common.collect.ImmutableMultiset copyHighestCountFirst(com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multisets$DecreasingCount $r4;
        java.util.List $r5;
        java.lang.Object[] $r3;
        com.google.common.collect.Multiset $r0;
        com.google.common.collect.ImmutableMultiset $r6;
        java.util.Set $r1;
        com.google.common.collect.Multiset$Entry[] $r2;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 = interfaceinvoke $r0.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r2 = newarray (com.google.common.collect.Multiset$Entry)[0];

        $r3 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r2 = (com.google.common.collect.Multiset$Entry[]) $r3;

        $r4 = <com.google.common.collect.Multisets$DecreasingCount: com.google.common.collect.Multisets$DecreasingCount INSTANCE>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r4);

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r6 = staticinvoke <com.google.common.collect.ImmutableMultiset: com.google.common.collect.ImmutableMultiset copyFromEntries(java.util.Collection)>($r5);

        return $r6;
    }

    public static com.google.common.collect.Multiset difference(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multisets$4 $r2;
        com.google.common.collect.Multiset $r0, $r1;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: com.google.common.collect.Multiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.Multisets$4;

        specialinvoke $r2.<com.google.common.collect.Multisets$4: void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset)>($r0, $r1);

        return $r2;
    }

    public static boolean equalsImpl(com.google.common.collect.Multiset, java.lang.Object)
    {
        java.util.Iterator $r4;
        com.google.common.collect.Multiset $r0, $r2;
        java.util.Set $r3;
        com.google.common.collect.Multiset$Entry $r5;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label5;

        $r2 = (com.google.common.collect.Multiset) $r1;

        $i0 = interfaceinvoke $r0.<com.google.common.collect.Multiset: int size()>();

        $i1 = interfaceinvoke $r2.<com.google.common.collect.Multiset: int size()>();

        if $i0 != $i1 goto label5;

        $r3 = interfaceinvoke $r0.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $i1 = interfaceinvoke $r3.<java.util.Set: int size()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $r3 = interfaceinvoke $r2.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.common.collect.Multiset$Entry) $r1;

        $r1 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = interfaceinvoke $r0.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r1);

        $i1 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: int getCount()>();

        if $i0 == $i1 goto label3;

        return 0;

     label4:
        return 1;

     label5:
        return 0;
    }

    public static com.google.common.collect.Multiset filter(com.google.common.collect.Multiset, com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate $r0, $r3;
        com.google.common.collect.Multiset $r1;
        com.google.common.collect.Multisets$FilteredMultiset $r2, $r4;
        boolean $z0;

        $r1 := @parameter0: com.google.common.collect.Multiset;

        $r0 := @parameter1: com.google.common.base.Predicate;

        $z0 = $r1 instanceof com.google.common.collect.Multisets$FilteredMultiset;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Multisets$FilteredMultiset) $r1;

        $r3 = $r2.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.base.Predicate predicate>;

        $r0 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate)>($r3, $r0);

        $r4 = new com.google.common.collect.Multisets$FilteredMultiset;

        $r1 = $r2.<com.google.common.collect.Multisets$FilteredMultiset: com.google.common.collect.Multiset unfiltered>;

        specialinvoke $r4.<com.google.common.collect.Multisets$FilteredMultiset: void <init>(com.google.common.collect.Multiset,com.google.common.base.Predicate)>($r1, $r0);

        return $r4;

     label1:
        $r2 = new com.google.common.collect.Multisets$FilteredMultiset;

        specialinvoke $r2.<com.google.common.collect.Multisets$FilteredMultiset: void <init>(com.google.common.collect.Multiset,com.google.common.base.Predicate)>($r1, $r0);

        return $r2;
    }

    public static com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object, int)
    {
        int $i0;
        java.lang.Object $r0;
        com.google.common.collect.Multisets$ImmutableEntry $r1;

        $r0 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r1 = new com.google.common.collect.Multisets$ImmutableEntry;

        specialinvoke $r1.<com.google.common.collect.Multisets$ImmutableEntry: void <init>(java.lang.Object,int)>($r0, $i0);

        return $r1;
    }

    public static int inferDistinctElements(java.lang.Iterable)
    {
        com.google.common.collect.Multiset $r1;
        int $i0;
        java.util.Set $r2;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $z0 = $r0 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.collect.Multiset) $r0;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        return $i0;

     label1:
        return 11;
    }

    public static com.google.common.collect.Multiset intersection(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multiset $r0, $r1;
        com.google.common.collect.Multisets$2 $r2;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: com.google.common.collect.Multiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.Multisets$2;

        specialinvoke $r2.<com.google.common.collect.Multisets$2: void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset)>($r0, $r1);

        return $r2;
    }

    public static java.util.Iterator iteratorImpl(com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multisets$MultisetIteratorImpl $r1;
        java.util.Iterator $r3;
        com.google.common.collect.Multiset $r0;
        java.util.Set $r2;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 = new com.google.common.collect.Multisets$MultisetIteratorImpl;

        $r2 = interfaceinvoke $r0.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        specialinvoke $r1.<com.google.common.collect.Multisets$MultisetIteratorImpl: void <init>(com.google.common.collect.Multiset,java.util.Iterator)>($r0, $r3);

        return $r1;
    }

    public static boolean removeAllImpl(com.google.common.collect.Multiset, java.util.Collection)
    {
        com.google.common.collect.Multiset $r0, $r2;
        java.util.Collection $r1;
        java.util.Set $r3;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: java.util.Collection;

        $z0 = $r1 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Multiset) $r1;

        $r1 = interfaceinvoke $r2.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

     label1:
        $r3 = interfaceinvoke $r0.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean removeAll(java.util.Collection)>($r1);

        return $z0;
    }

    public static boolean removeOccurrences(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
    {
        java.util.Iterator $r3;
        com.google.common.collect.Multiset $r0, $r1;
        java.util.Set $r2;
        com.google.common.collect.Multiset$Entry $r5;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0, $z1;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: com.google.common.collect.Multiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = interfaceinvoke $r0.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = 0;

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.common.collect.Multiset$Entry) $r4;

        $r4 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = interfaceinvoke $r1.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r4);

        $i1 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: int getCount()>();

        if $i0 < $i1 goto label3;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

     label2:
        $z0 = 1;

        goto label1;

     label3:
        if $i0 <= 0 goto label1;

        $r4 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        interfaceinvoke $r0.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>($r4, $i0);

        goto label2;

     label4:
        return $z0;
    }

    public static boolean removeOccurrences(com.google.common.collect.Multiset, java.lang.Iterable)
    {
        java.util.Iterator $r3;
        com.google.common.collect.Multiset $r0, $r2;
        java.lang.Object $r4;
        java.lang.Iterable $r1;
        boolean $z0, $z1;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: java.lang.Iterable;

        $z0 = $r1 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Multiset) $r1;

        $z0 = staticinvoke <com.google.common.collect.Multisets: boolean removeOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)>($r0, $r2);

        return $z0;

     label1:
        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = 0;

        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r0.<com.google.common.collect.Multiset: boolean remove(java.lang.Object)>($r4);

        $z0 = $z0 | $z1;

        goto label2;

     label3:
        return $z0;
    }

    public static boolean retainAllImpl(com.google.common.collect.Multiset, java.util.Collection)
    {
        com.google.common.collect.Multiset $r0, $r2;
        java.util.Collection $r1;
        java.util.Set $r3;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = $r1 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Multiset) $r1;

        $r1 = interfaceinvoke $r2.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

     label1:
        $r3 = interfaceinvoke $r0.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean retainAll(java.util.Collection)>($r1);

        return $z0;
    }

    public static boolean retainOccurrences(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multiset $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: com.google.common.collect.Multiset;

        $r0 := @parameter1: com.google.common.collect.Multiset;

        $z0 = staticinvoke <com.google.common.collect.Multisets: boolean retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)>($r1, $r0);

        return $z0;
    }

    public static boolean retainOccurrencesImpl(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
    {
        java.util.Iterator $r3;
        com.google.common.collect.Multiset $r0, $r1;
        java.util.Set $r2;
        com.google.common.collect.Multiset$Entry $r5;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0, $z1;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: com.google.common.collect.Multiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = interfaceinvoke $r0.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = 0;

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.common.collect.Multiset$Entry) $r4;

        $r4 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = interfaceinvoke $r1.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r4);

        if $i0 != 0 goto label3;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

     label2:
        $z0 = 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: int getCount()>();

        if $i0 >= $i1 goto label1;

        $r4 = interfaceinvoke $r5.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        interfaceinvoke $r0.<com.google.common.collect.Multiset: int setCount(java.lang.Object,int)>($r4, $i0);

        goto label2;

     label4:
        return $z0;
    }

    public static int setCountImpl(com.google.common.collect.Multiset, java.lang.Object, int)
    {
        com.google.common.collect.Multiset $r0;
        int $i0, $i1;
        java.lang.Object $r1;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: java.lang.Object;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i1, "count");

        $i0 = interfaceinvoke $r0.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r1);

        $i1 = $i1 - $i0;

        if $i1 <= 0 goto label1;

        interfaceinvoke $r0.<com.google.common.collect.Multiset: int add(java.lang.Object,int)>($r1, $i1);

        return $i0;

     label1:
        if $i1 >= 0 goto label2;

        $i1 = neg $i1;

        interfaceinvoke $r0.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>($r1, $i1);

     label2:
        return $i0;
    }

    public static boolean setCountImpl(com.google.common.collect.Multiset, java.lang.Object, int, int)
    {
        com.google.common.collect.Multiset $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r0;

        $r1 := @parameter0: com.google.common.collect.Multiset;

        $r0 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "oldCount");

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i1, "newCount");

        $i2 = interfaceinvoke $r1.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r0);

        if $i2 != $i0 goto label1;

        interfaceinvoke $r1.<com.google.common.collect.Multiset: int setCount(java.lang.Object,int)>($r0, $i1);

        return 1;

     label1:
        return 0;
    }

    public static int sizeImpl(com.google.common.collect.Multiset)
    {
        java.util.Iterator $r2;
        com.google.common.collect.Multiset $r0;
        java.util.Set $r1;
        long $l0, $l2;
        com.google.common.collect.Multiset$Entry $r4;
        int $i1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 = interfaceinvoke $r0.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        $l0 = 0L;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.common.collect.Multiset$Entry) $r3;

        $i1 = interfaceinvoke $r4.<com.google.common.collect.Multiset$Entry: int getCount()>();

        $l2 = (long) $i1;

        $l0 = $l0 + $l2;

        goto label1;

     label2:
        $i1 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l0);

        return $i1;
    }

    public static java.util.Spliterator spliteratorImpl(com.google.common.collect.Multiset)
    {
        c.i.b.c.pb $r0;
        com.google.common.collect.Multiset $r1;
        int $i1, $i2;
        java.util.Set $r2;
        long $l0;
        java.util.Spliterator $r3;

        $r1 := @parameter0: com.google.common.collect.Multiset;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Spliterator spliterator()>();

        $r0 = <c.i.b.c.pb: c.i.b.c.pb a>;

        $i1 = interfaceinvoke $r3.<java.util.Spliterator: int characteristics()>();

        $i1 = $i1 & 1296;

        $i1 = $i1 | 64;

        $i2 = interfaceinvoke $r1.<com.google.common.collect.Multiset: int size()>();

        $l0 = (long) $i2;

        $r3 = staticinvoke <com.google.common.collect.CollectSpliterators: java.util.Spliterator flatMap(java.util.Spliterator,java.util.function.Function,int,long)>($r3, $r0, $i1, $l0);

        return $r3;
    }

    public static com.google.common.collect.Multiset sum(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multisets$3 $r2;
        com.google.common.collect.Multiset $r0, $r1;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: com.google.common.collect.Multiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.Multisets$3;

        specialinvoke $r2.<com.google.common.collect.Multisets$3: void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset)>($r0, $r1);

        return $r2;
    }

    public static java.util.stream.Collector toMultiset(java.util.function.Function, java.util.function.ToIntFunction, java.util.function.Supplier)
    {
        c.i.b.c.qb $r5;
        c.i.b.c.ob $r1;
        java.util.function.ToIntFunction $r4;
        java.util.stream.Collector $r2;
        java.util.function.Supplier $r0;
        java.util.function.Function $r3;
        java.util.stream.Collector$Characteristics[] $r6;

        $r3 := @parameter0: java.util.function.Function;

        $r4 := @parameter1: java.util.function.ToIntFunction;

        $r0 := @parameter2: java.util.function.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new c.i.b.c.ob;

        specialinvoke $r1.<c.i.b.c.ob: void <init>(java.util.function.Function,java.util.function.ToIntFunction)>($r3, $r4);

        $r5 = <c.i.b.c.qb: c.i.b.c.qb a>;

        $r6 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r2 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector$Characteristics[])>($r0, $r1, $r5, $r6);

        return $r2;
    }

    public static com.google.common.collect.Multiset union(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multiset $r0, $r1;
        com.google.common.collect.Multisets$1 $r2;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $r1 := @parameter1: com.google.common.collect.Multiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.Multisets$1;

        specialinvoke $r2.<com.google.common.collect.Multisets$1: void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.collect.Multiset unmodifiableMultiset(com.google.common.collect.ImmutableMultiset)
    {
        com.google.common.collect.ImmutableMultiset $r0;
        com.google.common.collect.Multiset $r1;

        $r0 := @parameter0: com.google.common.collect.ImmutableMultiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = (com.google.common.collect.Multiset) $r0;

        return $r1;
    }

    public static com.google.common.collect.Multiset unmodifiableMultiset(com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multisets$UnmodifiableMultiset $r1;
        com.google.common.collect.Multiset $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.Multiset;

        $z0 = $r0 instanceof com.google.common.collect.Multisets$UnmodifiableMultiset;

        if $z0 != 0 goto label2;

        $z0 = $r0 instanceof com.google.common.collect.ImmutableMultiset;

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r1 = new com.google.common.collect.Multisets$UnmodifiableMultiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        specialinvoke $r1.<com.google.common.collect.Multisets$UnmodifiableMultiset: void <init>(com.google.common.collect.Multiset)>($r0);

        return $r1;

     label2:
        return $r0;
    }

    public static com.google.common.collect.SortedMultiset unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset)
    {
        com.google.common.collect.SortedMultiset $r1;
        com.google.common.collect.UnmodifiableSortedMultiset $r0;

        $r1 := @parameter0: com.google.common.collect.SortedMultiset;

        $r0 = new com.google.common.collect.UnmodifiableSortedMultiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        specialinvoke $r0.<com.google.common.collect.UnmodifiableSortedMultiset: void <init>(com.google.common.collect.SortedMultiset)>($r1);

        return $r0;
    }
}
