public final class org.codehaus.jackson.node.IntNode extends org.codehaus.jackson.node.NumericNode
{
    public static final org.codehaus.jackson.node.IntNode[] CANONICALS;
    public static final int MAX_CANONICAL;
    public static final int MIN_CANONICAL;
    public final int _value;

    static void <clinit>()
    {
        int $i0, $i1;
        org.codehaus.jackson.node.IntNode[] $r0;
        org.codehaus.jackson.node.IntNode $r1;

        <org.codehaus.jackson.node.IntNode: int MIN_CANONICAL> = -1;

        <org.codehaus.jackson.node.IntNode: int MAX_CANONICAL> = 10;

        $r0 = newarray (org.codehaus.jackson.node.IntNode)[12];

        <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode[] CANONICALS> = $r0;

        $i1 = 0;

     label1:
        if $i1 >= 12 goto label2;

        $r0 = <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode[] CANONICALS>;

        $r1 = new org.codehaus.jackson.node.IntNode;

        $i0 = -1;

        $i0 = $i1 + $i0;

        specialinvoke $r1.<org.codehaus.jackson.node.IntNode: void <init>(int)>($i0);

        $r0[$i1] = $r1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(int)
    {
        int $i0;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.codehaus.jackson.node.NumericNode: void <init>()>();

        r0.<org.codehaus.jackson.node.IntNode: int _value> = $i0;

        return;
    }

    public static org.codehaus.jackson.node.IntNode valueOf(int)
    {
        int $i0, $i1;
        org.codehaus.jackson.node.IntNode[] $r0;
        org.codehaus.jackson.node.IntNode $r1, $r2;

        $i0 := @parameter0: int;

        if $i0 > 10 goto label2;

        $i1 = -1;

        if $i0 >= $i1 goto label1;

        goto label2;

     label1:
        $r0 = <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode[] CANONICALS>;

        $i1 = -1;

        $i0 = $i0 - $i1;

        $r1 = $r0[$i0];

        return $r1;

     label2:
        $r2 = new org.codehaus.jackson.node.IntNode;

        specialinvoke $r2.<org.codehaus.jackson.node.IntNode: void <init>(int)>($i0);

        return $r2;
    }

    public org.codehaus.jackson.JsonToken asToken()
    {
        org.codehaus.jackson.JsonToken r1;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Class $r1;
        java.lang.Object $r2;
        org.codehaus.jackson.node.IntNode r0, $r3;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $r2 := @parameter0: java.lang.Object;

        if $r2 != r0 goto label1;

        return 1;

     label1:
        if $r2 != null goto label2;

        return 0;

     label2:
        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == class "Lorg/codehaus/jackson/node/IntNode;" goto label3;

        return 0;

     label3:
        $r3 = (org.codehaus.jackson.node.IntNode) $r2;

        $i0 = $r3.<org.codehaus.jackson.node.IntNode: int _value>;

        $i1 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        if $i0 != $i1 goto label4;

        return 1;

     label4:
        return 0;
    }

    public java.math.BigInteger getBigIntegerValue()
    {
        int $i0;
        java.math.BigInteger $r1;
        long $l1;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        return $r1;
    }

    public java.math.BigDecimal getDecimalValue()
    {
        java.math.BigDecimal $r1;
        int $i0;
        long $l1;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l1);

        return $r1;
    }

    public double getDoubleValue()
    {
        int $i0;
        org.codehaus.jackson.node.IntNode r0;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $d0 = (double) $i0;

        return $d0;
    }

    public int getIntValue()
    {
        int i0;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        return i0;
    }

    public long getLongValue()
    {
        int $i0;
        long $l1;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $l1 = (long) $i0;

        return $l1;
    }

    public org.codehaus.jackson.JsonParser$NumberType getNumberType()
    {
        org.codehaus.jackson.node.IntNode r0;
        org.codehaus.jackson.JsonParser$NumberType r1;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        r1 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType INT>;

        return r1;
    }

    public java.lang.Number getNumberValue()
    {
        int $i0;
        org.codehaus.jackson.node.IntNode r0;
        java.lang.Integer $r1;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public boolean getValueAsBoolean(boolean)
    {
        int $i0;
        org.codehaus.jackson.node.IntNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $z0 := @parameter0: boolean;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String getValueAsText()
    {
        int $i0;
        java.lang.String $r1;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        $r1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: java.lang.String toString(int)>($i0);

        return $r1;
    }

    public int hashCode()
    {
        int i0;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        return i0;
    }

    public boolean isInt()
    {
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        return 1;
    }

    public boolean isIntegralNumber()
    {
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        return 1;
    }

    public final void serialize(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.JsonGenerator $r1;
        int $i0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        org.codehaus.jackson.node.IntNode r0;

        r0 := @this: org.codehaus.jackson.node.IntNode;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        $i0 = r0.<org.codehaus.jackson.node.IntNode: int _value>;

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        return;
    }
}
