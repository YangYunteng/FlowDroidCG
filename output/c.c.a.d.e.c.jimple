public class c.c.a.d.e.c extends java.lang.Object implements c.c.a.d.e.a
{
    public static final java.lang.String a;

    public void <init>()
    {
        c.c.a.d.e.c r0;

        r0 := @this: c.c.a.d.e.c;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void a(java.lang.String)
    {
        android.net.Uri $r10;
        com.caremark.caremark.core.exceptions.ParserException $r23;
        org.codehaus.jackson.JsonNode $r3, $r8, $r15;
        c.c.a.d.e.c r0;
        c.c.a.d.e.b $r19;
        com.caremark.caremark.model.QuickTip $r17;
        c.c.a.d.c $r6;
        com.caremark.caremark.model.VersionControl $r20;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, $r7, $r9, $r11;
        c.c.a.d.f $r14;
        c.c.a.d.i $r4;
        boolean $z0;
        c.c.a.d.j $r18;
        c.c.a.d.q $r21;
        c.c.a.d.c[] $r5;
        c.c.a.d.f[] $r13;
        java.lang.Exception $r22;
        java.lang.StringBuilder $r12;
        java.lang.Object $r16;
        org.codehaus.jackson.map.ObjectMapper $r2;

        r0 := @this: c.c.a.d.e.c;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.codehaus.jackson.map.ObjectMapper;

        specialinvoke $r2.<org.codehaus.jackson.map.ObjectMapper: void <init>()>();

     label01:
        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.ObjectMapper: org.codehaus.jackson.JsonNode readTree(java.lang.String)>($r1);

        $r4 = staticinvoke <c.c.a.d.i: c.c.a.d.i s()>();

        $r5 = staticinvoke <c.c.a.d.c: c.c.a.d.c[] values()>();

        $i0 = lengthof $r5;

     label02:
        $i1 = 0;

        $i2 = 0;

     label03:
        if $i2 >= $i0 goto label17;

     label04:
        $r6 = $r5[$i2];

        $r7 = virtualinvoke $r6.<c.c.a.d.c: java.lang.String a()>();

        $r8 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(java.lang.String)>($r7);

     label05:
        if $r8 == null goto label16;

     label06:
        $r9 = virtualinvoke $r8.<org.codehaus.jackson.JsonNode: java.lang.String getTextValue()>();

     label07:
        $r7 = $r9;

        if $r9 != null goto label09;

     label08:
        $i3 = virtualinvoke $r8.<org.codehaus.jackson.JsonNode: int getIntValue()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);

     label09:
        if $r7 == null goto label15;

     label10:
        $r10 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r7);

     label11:
        $r9 = "crmkapp";

     label12:
        $r11 = virtualinvoke $r10.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r11);

     label13:
        if $z0 == 0 goto label15;

        $r12 = new java.lang.StringBuilder;

     label14:
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("crmkapp://");

        $r7 = virtualinvoke $r10.<android.net.Uri: java.lang.String getHost()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        virtualinvoke $r4.<c.c.a.d.i: void a(c.c.a.d.c,java.lang.String)>($r6, $r7);

     label16:
        $i2 = $i2 + 1;

        goto label03;

     label17:
        $r8 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(java.lang.String)>("noLoggedLabels");

     label18:
        if $r8 == null goto label27;

     label19:
        $r13 = staticinvoke <c.c.a.d.f: c.c.a.d.f[] values()>();

        $i0 = lengthof $r13;

     label20:
        if $i1 >= $i0 goto label27;

     label21:
        $r14 = $r13[$i1];

        $r7 = virtualinvoke $r14.<c.c.a.d.f: java.lang.String a()>();

        $r15 = virtualinvoke $r8.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(java.lang.String)>($r7);

     label22:
        if $r15 == null goto label26;

     label23:
        $r15 = virtualinvoke $r15.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(java.lang.String)>("title");

     label24:
        if $r15 == null goto label26;

     label25:
        $r7 = virtualinvoke $r15.<org.codehaus.jackson.JsonNode: java.lang.String getTextValue()>();

        virtualinvoke $r4.<c.c.a.d.i: void a(c.c.a.d.f,java.lang.String)>($r14, $r7);

     label26:
        $i1 = $i1 + 1;

        goto label20;

     label27:
        $r8 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(java.lang.String)>("quickTip");

     label28:
        if $r8 == null goto label30;

     label29:
        $r16 = virtualinvoke $r2.<org.codehaus.jackson.map.ObjectMapper: java.lang.Object readValue(org.codehaus.jackson.JsonNode,java.lang.Class)>($r8, class "Lcom/caremark/caremark/model/QuickTip;");

        $r17 = (com.caremark.caremark.model.QuickTip) $r16;

        $r18 = staticinvoke <c.c.a.d.j: c.c.a.d.j a()>();

        virtualinvoke $r18.<c.c.a.d.j: void a(com.caremark.caremark.model.QuickTip)>($r17);

     label30:
        $r8 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(java.lang.String)>("maintenance");

        $z0 = virtualinvoke $r8.<org.codehaus.jackson.JsonNode: boolean getBooleanValue()>();

     label31:
        if $z0 == 0 goto label35;

     label32:
        $r3 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(java.lang.String)>("maintenanceMessage");

        $r7 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: java.lang.String getTextValue()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r7);

     label33:
        if $z0 != 0 goto label35;

     label34:
        virtualinvoke $r4.<c.c.a.d.i: void B(java.lang.String)>($r7);

     label35:
        $r19 = new c.c.a.d.e.b;

     label36:
        specialinvoke $r19.<c.c.a.d.e.b: void <init>(c.c.a.d.e.c)>(r0);

        $r16 = virtualinvoke $r2.<org.codehaus.jackson.map.ObjectMapper: java.lang.Object readValue(java.lang.String,org.codehaus.jackson.type.TypeReference)>($r1, $r19);

        $r20 = (com.caremark.caremark.model.VersionControl) $r16;

        $r21 = staticinvoke <c.c.a.d.q: c.c.a.d.q a()>();

        virtualinvoke $r21.<c.c.a.d.q: void a(com.caremark.caremark.model.VersionControl)>($r20);

     label37:
        return;

     label38:
        $r22 := @caughtexception;

        $r1 = <c.c.a.d.e.c: java.lang.String a>;

        $r7 = virtualinvoke $r22.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <com.caremark.caremark.util.L: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r1, $r7, $r22);

        $r23 = new com.caremark.caremark.core.exceptions.ParserException;

        $r1 = virtualinvoke $r22.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r23.<com.caremark.caremark.core.exceptions.ParserException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r22);

        goto label39;

     label39:
        throw $r23;

        catch java.lang.Exception from label01 to label02 with label38;
        catch java.lang.Exception from label04 to label05 with label38;
        catch java.lang.Exception from label06 to label07 with label38;
        catch java.lang.Exception from label08 to label09 with label38;
        catch java.lang.Exception from label10 to label11 with label38;
        catch java.lang.Exception from label12 to label13 with label38;
        catch java.lang.Exception from label14 to label15 with label38;
        catch java.lang.Exception from label15 to label16 with label38;
        catch java.lang.Exception from label17 to label18 with label38;
        catch java.lang.Exception from label19 to label20 with label38;
        catch java.lang.Exception from label21 to label22 with label38;
        catch java.lang.Exception from label23 to label24 with label38;
        catch java.lang.Exception from label25 to label26 with label38;
        catch java.lang.Exception from label27 to label28 with label38;
        catch java.lang.Exception from label29 to label31 with label38;
        catch java.lang.Exception from label32 to label33 with label38;
        catch java.lang.Exception from label34 to label35 with label38;
        catch java.lang.Exception from label36 to label37 with label38;
    }

    public static void <clinit>()
    {
        <c.c.a.d.e.c: java.lang.String a> = "c";

        return;
    }
}
