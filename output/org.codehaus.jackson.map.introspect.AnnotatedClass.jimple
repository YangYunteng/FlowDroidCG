public final class org.codehaus.jackson.map.introspect.AnnotatedClass extends org.codehaus.jackson.map.introspect.Annotated
{
    public static final org.codehaus.jackson.map.introspect.AnnotationMap[] NO_ANNOTATION_MAPS;
    public final org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector;
    public final java.lang.Class _class;
    public org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations;
    public java.util.List _constructors;
    public java.util.List _creatorMethods;
    public org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor;
    public java.util.List _fields;
    public java.util.List _ignoredFields;
    public java.util.List _ignoredMethods;
    public org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods;
    public final org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver;
    public final java.lang.Class _primaryMixIn;
    public final java.util.Collection _superTypes;

    static void <clinit>()
    {
        org.codehaus.jackson.map.introspect.AnnotationMap[] $r0;

        $r0 = newarray (org.codehaus.jackson.map.introspect.AnnotationMap)[0];

        <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] NO_ANNOTATION_MAPS> = $r0;

        return;
    }

    public void <init>(java.lang.Class, java.util.List, org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        java.util.List $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.Class $r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r3 := @parameter0: java.lang.Class;

        $r4 := @parameter1: java.util.List;

        $r1 := @parameter2: org.codehaus.jackson.map.AnnotationIntrospector;

        $r2 := @parameter3: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        specialinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class> = $r3;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.Collection _superTypes> = $r4;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector> = $r1;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver> = $r2;

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        if $r2 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r3 = interfaceinvoke $r2.<org.codehaus.jackson.map.ClassIntrospector$MixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>($r3);

     label2:
        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn> = $r3;

        return;
    }

    private org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()
    {
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = new org.codehaus.jackson.map.introspect.AnnotationMap;

        specialinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: void <init>()>();

        return $r1;
    }

    private org.codehaus.jackson.map.introspect.AnnotationMap[] _emptyAnnotationMaps(int)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        org.codehaus.jackson.map.introspect.AnnotationMap[] $r1;
        int $i0, $i1;
        org.codehaus.jackson.map.introspect.AnnotationMap $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        $r1 = <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] NO_ANNOTATION_MAPS>;

        return $r1;

     label1:
        $r1 = newarray (org.codehaus.jackson.map.introspect.AnnotationMap)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r2 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()>();

        $r1[$i1] = $r2;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r1;
    }

    private boolean _isIncludableField(java.lang.reflect.Field)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0;
        java.lang.reflect.Field $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: java.lang.reflect.Field;

        $z0 = virtualinvoke $r1.<java.lang.reflect.Field: boolean isSynthetic()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label3;

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i0);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        return 1;

     label3:
        return 0;
    }

    public static org.codehaus.jackson.map.introspect.AnnotatedClass construct(java.lang.Class, org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        java.util.List $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r3;
        java.lang.Class $r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver $r2;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        $r2 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r4 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.util.List findSuperTypes(java.lang.Class,java.lang.Class)>($r0, null);

        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedClass;

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedClass: void <init>(java.lang.Class,java.util.List,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r0, $r4, $r1, $r2);

        virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedClass: void resolveClassAnnotations()>();

        return $r3;
    }

    public static org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class, org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        java.util.List $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r3;
        java.lang.Class $r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver $r2;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        $r2 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedClass;

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedClass: void <init>(java.lang.Class,java.util.List,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r0, $r4, $r1, $r2);

        virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedClass: void resolveClassAnnotations()>();

        return $r3;
    }

    public void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap, java.lang.Class)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.Class $r2, $r3;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver $r4;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotationMap;

        $r2 := @parameter1: java.lang.Class;

        $r4 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        if $r4 == null goto label1;

        $r3 = interfaceinvoke $r4.<org.codehaus.jackson.map.ClassIntrospector$MixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>($r2);

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap,java.lang.Class,java.lang.Class)>($r1, $r2, $r3);

     label1:
        return;
    }

    public void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap, java.lang.Class, java.lang.Class)
    {
        java.util.Iterator $r8;
        java.lang.'annotation'.Annotation[] $r4;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;
        java.util.List $r7;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1;
        java.lang.'annotation'.Annotation $r5;
        java.lang.Class $r2, $r3;
        java.lang.Object $r9;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotationMap;

        $r2 := @parameter1: java.lang.Class;

        $r3 := @parameter2: java.lang.Class;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r5 = $r4[$i1];

        $r6 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>($r5);

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: void addIfNotPresent(java.lang.'annotation'.Annotation)>($r5);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r7 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.util.List findSuperTypes(java.lang.Class,java.lang.Class)>($r3, $r2);

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Class) $r9;

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label6:
        if $i1 >= $i0 goto label5;

        $r5 = $r4[$i1];

        $r6 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>($r5);

        if $z0 == 0 goto label7;

        virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: void addIfNotPresent(java.lang.'annotation'.Annotation)>($r5);

     label7:
        $i1 = $i1 + 1;

        goto label6;

     label8:
        return;
    }

    public void _addConstructorMixIns(java.lang.Class)
    {
        java.lang.reflect.Constructor $r1, $r10;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r9;
        java.lang.reflect.Constructor[] $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.Class[] $r6;
        org.codehaus.jackson.map.introspect.MemberKey $r7, $r11;
        java.util.List $r3;
        java.lang.Class $r2;
        java.lang.Object $r8;
        org.codehaus.jackson.map.introspect.MemberKey[] $r5;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r2 := @parameter0: java.lang.Class;

        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        if $r3 != null goto label01;

        $i1 = 0;

        goto label02;

     label01:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

     label02:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $i0 = lengthof $r4;

        $r5 = null;

        $i2 = 0;

     label03:
        if $i2 >= $i0 goto label10;

        $r1 = $r4[$i2];

        $r6 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r6;

        if $i3 == 0 goto label08;

        if $r5 != null goto label05;

        $r5 = newarray (org.codehaus.jackson.map.introspect.MemberKey)[$i1];

        $i3 = 0;

     label04:
        if $i3 >= $i1 goto label05;

        $r7 = new org.codehaus.jackson.map.introspect.MemberKey;

        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        $r8 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i3);

        $r9 = (org.codehaus.jackson.map.introspect.AnnotatedConstructor) $r8;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.reflect.Constructor getAnnotated()>();

        specialinvoke $r7.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.reflect.Constructor)>($r10);

        $r5[$i3] = $r7;

        $i3 = $i3 + 1;

        goto label04;

     label05:
        $r7 = new org.codehaus.jackson.map.introspect.MemberKey;

        specialinvoke $r7.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.reflect.Constructor)>($r1);

        $i3 = 0;

     label06:
        if $i3 >= $i1 goto label09;

        $r11 = $r5[$i3];

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.map.introspect.MemberKey: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label07;

        $i3 = $i3 + 1;

        goto label06;

     label07:
        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        $r8 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i3);

        $r9 = (org.codehaus.jackson.map.introspect.AnnotatedConstructor) $r8;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Constructor,org.codehaus.jackson.map.introspect.AnnotatedConstructor,boolean)>($r1, $r9, 1);

        goto label09;

     label08:
        $r9 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor>;

        if $r9 == null goto label09;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Constructor,org.codehaus.jackson.map.introspect.AnnotatedConstructor,boolean)>($r1, $r9, 0);

     label09:
        $i2 = $i2 + 1;

        goto label03;

     label10:
        return;
    }

    public void _addFactoryMixIns(java.lang.Class)
    {
        java.lang.reflect.Method[] $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1, $i2, $i3;
        java.lang.reflect.Method $r1, $r10;
        boolean $z0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r9;
        java.lang.Class[] $r6;
        org.codehaus.jackson.map.introspect.MemberKey $r7, $r11;
        java.util.List $r3;
        java.lang.Class $r2;
        java.lang.Object $r8;
        org.codehaus.jackson.map.introspect.MemberKey[] $r5;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r2 := @parameter0: java.lang.Class;

        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = lengthof $r4;

        $r5 = null;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label9;

        $r1 = $r4[$i2];

        $i3 = virtualinvoke $r1.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i3);

        if $z0 != 0 goto label2;

        goto label8;

     label2:
        $r6 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r6;

        if $i3 != 0 goto label3;

        goto label8;

     label3:
        if $r5 != null goto label5;

        $r5 = newarray (org.codehaus.jackson.map.introspect.MemberKey)[$i1];

        $i3 = 0;

     label4:
        if $i3 >= $i1 goto label5;

        $r7 = new org.codehaus.jackson.map.introspect.MemberKey;

        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        $r8 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i3);

        $r9 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r8;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        specialinvoke $r7.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.reflect.Method)>($r10);

        $r5[$i3] = $r7;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        $r7 = new org.codehaus.jackson.map.introspect.MemberKey;

        specialinvoke $r7.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.reflect.Method)>($r1);

        $i3 = 0;

     label6:
        if $i3 >= $i1 goto label8;

        $r11 = $r5[$i3];

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.map.introspect.MemberKey: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label7;

        $i3 = $i3 + 1;

        goto label6;

     label7:
        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        $r8 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i3);

        $r9 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r8;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotatedMethod,boolean)>($r1, $r9, 1);

     label8:
        $i2 = $i2 + 1;

        goto label1;

     label9:
        return;
    }

    public void _addFieldMixIns(java.lang.Class, java.util.Map)
    {
        java.lang.'annotation'.Annotation[] $r9;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.util.Map $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r6;
        boolean $z0;
        java.lang.reflect.Field $r5;
        org.codehaus.jackson.map.AnnotationIntrospector $r10;
        java.lang.reflect.Field[] $r4;
        java.lang.'annotation'.Annotation $r2;
        java.lang.Class $r3;
        java.lang.Object $r7;
        org.codehaus.jackson.map.introspect.AnnotatedField $r8;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r3 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.util.Map;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = lengthof $r4;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label6;

        $r5 = $r4[$i2];

        $z0 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean _isIncludableField(java.lang.reflect.Field)>($r5);

        if $z0 != 0 goto label2;

        goto label5;

     label2:
        $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $r7 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (org.codehaus.jackson.map.introspect.AnnotatedField) $r7;

        if $r8 == null goto label5;

        $r9 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $i1 = lengthof $r9;

        $i3 = 0;

     label3:
        if $i3 >= $i1 goto label5;

        $r2 = $r9[$i3];

        $r10 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r10.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>($r2);

        if $z0 == 0 goto label4;

        virtualinvoke $r8.<org.codehaus.jackson.map.introspect.AnnotatedField: void addOrOverride(java.lang.'annotation'.Annotation)>($r2);

     label4:
        $i3 = $i3 + 1;

        goto label3;

     label5:
        $i2 = $i2 + 1;

        goto label1;

     label6:
        return;
    }

    public void _addFields(java.util.Map, java.lang.Class)
    {
        java.lang.reflect.Field $r5;
        java.lang.reflect.Field[] $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.util.Map $r1;
        int $i0, $i1;
        java.lang.Class $r2, $r3;
        org.codehaus.jackson.map.introspect.AnnotatedField $r7;
        java.lang.String $r6;
        boolean $z0;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver $r8;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r3 == null goto label5;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFields(java.util.Map,java.lang.Class)>($r1, $r3);

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r5 = $r4[$i1];

        $z0 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean _isIncludableField(java.lang.reflect.Field)>($r5);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedField _constructField(java.lang.reflect.Field)>($r5);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $r8 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        if $r8 == null goto label5;

        $r2 = interfaceinvoke $r8.<org.codehaus.jackson.map.ClassIntrospector$MixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>($r2);

        if $r2 == null goto label5;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFieldMixIns(java.lang.Class,java.util.Map)>($r2, $r1);

     label5:
        return;
    }

    public void _addMemberMethods(java.lang.Class, org.codehaus.jackson.map.introspect.MethodFilter, org.codehaus.jackson.map.introspect.AnnotatedMethodMap, java.lang.Class, org.codehaus.jackson.map.introspect.AnnotatedMethodMap)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r8, $r9;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap $r2, $r3;
        java.lang.reflect.Method[] $r6;
        org.codehaus.jackson.map.introspect.MethodFilter $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1;
        java.lang.Class $r4, $r5;
        java.lang.reflect.Method $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r4 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.map.introspect.MethodFilter;

        $r2 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r5 := @parameter3: java.lang.Class;

        $r3 := @parameter4: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        if $r5 == null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMethodMixIns(org.codehaus.jackson.map.introspect.MethodFilter,org.codehaus.jackson.map.introspect.AnnotatedMethodMap,java.lang.Class,org.codehaus.jackson.map.introspect.AnnotatedMethodMap)>($r1, $r2, $r5, $r3);

     label1:
        if $r4 != null goto label2;

        return;

     label2:
        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = lengthof $r6;

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label7;

        $r7 = $r6[$i1];

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean _isIncludableMethod(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.MethodFilter)>($r7, $r1);

        if $z0 != 0 goto label4;

        goto label6;

     label4:
        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: org.codehaus.jackson.map.introspect.AnnotatedMethod find(java.lang.reflect.Method)>($r7);

        if $r8 != null goto label5;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethod _constructMethod(java.lang.reflect.Method)>($r7);

        virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void add(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r8);

        $r9 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: org.codehaus.jackson.map.introspect.AnnotatedMethod remove(java.lang.reflect.Method)>($r7);

        if $r9 == null goto label6;

        $r7 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotatedMethod,boolean)>($r7, $r8, 0);

        goto label6;

     label5:
        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixUnders(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r7, $r8);

        $r4 = virtualinvoke $r8.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getDeclaringClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label6;

        $r4 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label6;

        $r8 = virtualinvoke $r8.<org.codehaus.jackson.map.introspect.AnnotatedMethod: org.codehaus.jackson.map.introspect.AnnotatedMethod withMethod(java.lang.reflect.Method)>($r7);

        virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void add(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r8);

     label6:
        $i1 = $i1 + 1;

        goto label3;

     label7:
        return;
    }

    public void _addMethodMixIns(org.codehaus.jackson.map.introspect.MethodFilter, org.codehaus.jackson.map.introspect.AnnotatedMethodMap, java.lang.Class, org.codehaus.jackson.map.introspect.AnnotatedMethodMap)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r7;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap $r2, $r3;
        java.lang.reflect.Method[] $r5;
        org.codehaus.jackson.map.introspect.MethodFilter $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1;
        java.lang.Class $r4;
        java.lang.reflect.Method $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.MethodFilter;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r4 := @parameter2: java.lang.Class;

        $r3 := @parameter3: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = lengthof $r5;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label5;

        $r6 = $r5[$i1];

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean _isIncludableMethod(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.MethodFilter)>($r6, $r1);

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $r7 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: org.codehaus.jackson.map.introspect.AnnotatedMethod find(java.lang.reflect.Method)>($r6);

        if $r7 == null goto label3;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixUnders(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r6, $r7);

        goto label4;

     label3:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethod _constructMethod(java.lang.reflect.Method)>($r6);

        virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void add(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r7);

     label4:
        $i1 = $i1 + 1;

        goto label1;

     label5:
        return;
    }

    public void _addMixOvers(java.lang.reflect.Constructor, org.codehaus.jackson.map.introspect.AnnotatedConstructor, boolean)
    {
        java.lang.'annotation'.Annotation[][] $r6;
        java.lang.'annotation'.Annotation[] $r3;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r1;
        java.lang.reflect.Constructor $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1, $i2, $i3;
        java.lang.'annotation'.Annotation $r4;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r2 := @parameter0: java.lang.reflect.Constructor;

        $r1 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedConstructor;

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r4 = $r3[$i1];

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z1 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>($r4);

        if $z1 == 0 goto label2;

        virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: void addOrOverride(java.lang.'annotation'.Annotation)>($r4);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        if $z0 == 0 goto label7;

        $r6 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $i0 = lengthof $r6;

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label7;

        $r3 = $r6[$i1];

        $i2 = lengthof $r3;

        $i3 = 0;

     label5:
        if $i3 >= $i2 goto label6;

        $r4 = $r3[$i3];

        virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: void addOrOverrideParam(int,java.lang.'annotation'.Annotation)>($i1, $r4);

        $i3 = $i3 + 1;

        goto label5;

     label6:
        $i1 = $i1 + 1;

        goto label4;

     label7:
        return;
    }

    public void _addMixOvers(java.lang.reflect.Method, org.codehaus.jackson.map.introspect.AnnotatedMethod, boolean)
    {
        java.lang.'annotation'.Annotation[][] $r6;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        java.lang.'annotation'.Annotation[] $r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1, $i2, $i3;
        java.lang.'annotation'.Annotation $r4;
        java.lang.reflect.Method $r2;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r1 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r4 = $r3[$i1];

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z1 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>($r4);

        if $z1 == 0 goto label2;

        virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: void addOrOverride(java.lang.'annotation'.Annotation)>($r4);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        if $z0 == 0 goto label7;

        $r6 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $i0 = lengthof $r6;

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label7;

        $r3 = $r6[$i1];

        $i2 = lengthof $r3;

        $i3 = 0;

     label5:
        if $i3 >= $i2 goto label6;

        $r4 = $r3[$i3];

        virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: void addOrOverrideParam(int,java.lang.'annotation'.Annotation)>($i1, $r4);

        $i3 = $i3 + 1;

        goto label5;

     label6:
        $i1 = $i1 + 1;

        goto label4;

     label7:
        return;
    }

    public void _addMixUnders(java.lang.reflect.Method, org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        java.lang.'annotation'.Annotation[] $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1;
        java.lang.'annotation'.Annotation $r2;
        java.lang.reflect.Method $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r3 := @parameter0: java.lang.reflect.Method;

        $r1 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r2 = $r4[$i1];

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>($r2);

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: void addIfNotPresent(java.lang.'annotation'.Annotation)>($r2);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }

    public org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])
    {
        java.lang.'annotation'.Annotation[] $r1;
        org.codehaus.jackson.map.introspect.AnnotationMap $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1;
        java.lang.'annotation'.Annotation $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: java.lang.'annotation'.Annotation[];

        $r2 = new org.codehaus.jackson.map.introspect.AnnotationMap;

        specialinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotationMap: void <init>()>();

        if $r1 == null goto label3;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r3 = $r1[$i1];

        $r4 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>($r3);

        if $z0 == 0 goto label2;

        virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotationMap: void add(java.lang.'annotation'.Annotation)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r2;
    }

    public org.codehaus.jackson.map.introspect.AnnotationMap[] _collectRelevantAnnotations(java.lang.'annotation'.Annotation[][])
    {
        java.lang.'annotation'.Annotation[][] $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1;
        org.codehaus.jackson.map.introspect.AnnotationMap[] $r2;
        java.lang.'annotation'.Annotation[] $r4;
        org.codehaus.jackson.map.introspect.AnnotationMap $r3;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: java.lang.'annotation'.Annotation[][];

        $i0 = lengthof $r1;

        $r2 = newarray (org.codehaus.jackson.map.introspect.AnnotationMap)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r4 = $r1[$i1];

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])>($r4);

        $r2[$i1] = $r3;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedConstructor _constructConstructor(java.lang.reflect.Constructor, boolean)
    {
        java.lang.'annotation'.Annotation[][] $r8;
        java.lang.Class[] $r5;
        java.lang.'annotation'.Annotation[] $r7;
        java.lang.reflect.Constructor $r1;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r3;
        org.codehaus.jackson.map.introspect.AnnotationMap $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0;
        org.codehaus.jackson.map.introspect.AnnotationMap[] $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: java.lang.reflect.Constructor;

        $z0 := @parameter1: boolean;

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r2 != null goto label1;

        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedConstructor;

        $r4 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()>();

        $r5 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r5;

        $r6 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] _emptyAnnotationMaps(int)>($i0);

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: void <init>(java.lang.reflect.Constructor,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>($r1, $r4, $r6);

        return $r3;

     label1:
        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedConstructor;

        $r7 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])>($r7);

        if $z0 == 0 goto label2;

        $r6 = null;

        goto label3;

     label2:
        $r8 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] _collectRelevantAnnotations(java.lang.'annotation'.Annotation[][])>($r8);

     label3:
        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: void <init>(java.lang.reflect.Constructor,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>($r1, $r4, $r6);

        return $r3;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod _constructCreatorMethod(java.lang.reflect.Method)
    {
        java.lang.'annotation'.Annotation[][] $r8;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r3;
        java.lang.Class[] $r5;
        java.lang.'annotation'.Annotation[] $r7;
        org.codehaus.jackson.map.introspect.AnnotationMap $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0;
        org.codehaus.jackson.map.introspect.AnnotationMap[] $r6;
        java.lang.reflect.Method $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r2 != null goto label1;

        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r4 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()>();

        $r5 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r5;

        $r6 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] _emptyAnnotationMaps(int)>($i0);

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void <init>(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>($r1, $r4, $r6);

        return $r3;

     label1:
        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r7 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])>($r7);

        $r8 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] _collectRelevantAnnotations(java.lang.'annotation'.Annotation[][])>($r8);

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void <init>(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>($r1, $r4, $r6);

        return $r3;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedField _constructField(java.lang.reflect.Field)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        org.codehaus.jackson.map.introspect.AnnotatedField $r3;
        java.lang.'annotation'.Annotation[] $r5;
        java.lang.reflect.Field $r1;
        org.codehaus.jackson.map.introspect.AnnotationMap $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: java.lang.reflect.Field;

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r2 != null goto label1;

        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedField;

        $r4 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()>();

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedField: void <init>(java.lang.reflect.Field,org.codehaus.jackson.map.introspect.AnnotationMap)>($r1, $r4);

        return $r3;

     label1:
        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedField;

        $r5 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])>($r5);

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedField: void <init>(java.lang.reflect.Field,org.codehaus.jackson.map.introspect.AnnotationMap)>($r1, $r4);

        return $r3;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod _constructMethod(java.lang.reflect.Method)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r3;
        java.lang.'annotation'.Annotation[] $r5;
        java.lang.reflect.Method $r1;
        org.codehaus.jackson.map.introspect.AnnotationMap $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r2 != null goto label1;

        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r4 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()>();

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void <init>(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>($r1, $r4, null);

        return $r3;

     label1:
        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r5 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])>($r5);

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void <init>(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>($r1, $r4, null);

        return $r3;
    }

    public boolean _isIncludableMethod(java.lang.reflect.Method, org.codehaus.jackson.map.introspect.MethodFilter)
    {
        org.codehaus.jackson.map.introspect.MethodFilter $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.MethodFilter;

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<org.codehaus.jackson.map.introspect.MethodFilter: boolean includeMethod(java.lang.reflect.Method)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.reflect.Method: boolean isSynthetic()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r1.<java.lang.reflect.Method: boolean isBridge()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        return 1;

     label3:
        return 0;
    }

    public java.lang.Iterable fields()
    {
        java.util.List $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        return $r1;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod findMethod(java.lang.String, java.lang.Class[])
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r3;
        java.lang.Class[] $r1;
        java.lang.String $r4;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r4 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Class[];

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: org.codehaus.jackson.map.introspect.AnnotatedMethod find(java.lang.String,java.lang.Class[])>($r4, $r1);

        return $r3;
    }

    public java.lang.Class getAnnotated()
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        return r1;
    }

    public volatile java.lang.reflect.AnnotatedElement getAnnotated()
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class getAnnotated()>();

        return $r1;
    }

    public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r2;
        java.lang.Class $r3;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r3 := @parameter0: java.lang.Class;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: java.lang.'annotation'.Annotation get(java.lang.Class)>($r3);

        return $r2;
    }

    public org.codehaus.jackson.map.util.Annotations getAnnotations()
    {
        org.codehaus.jackson.map.introspect.AnnotationMap r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        return r1;
    }

    public java.util.List getConstructors()
    {
        java.util.List $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        return $r1;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedConstructor getDefaultConstructor()
    {
        org.codehaus.jackson.map.introspect.AnnotatedConstructor r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor>;

        return r1;
    }

    public int getFieldCount()
    {
        int $i0;
        java.util.List $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.reflect.Type getGenericType()
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        return r1;
    }

    public int getMemberMethodCount()
    {
        int $i0;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: int size()>();

        return $i0;
    }

    public int getModifiers()
    {
        int $i0;
        java.lang.Class $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $i0 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        return $i0;
    }

    public java.lang.String getName()
    {
        java.lang.Class $r2;
        java.lang.String $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.Class getRawType()
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        return r1;
    }

    public java.util.List getStaticMethods()
    {
        java.util.List $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        return $r1;
    }

    public boolean hasAnnotations()
    {
        int $i0;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: int size()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Iterable ignoredFields()
    {
        java.util.List $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _ignoredFields>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        return $r1;
    }

    public java.lang.Iterable ignoredMemberMethods()
    {
        java.util.List $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _ignoredMethods>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        return $r1;
    }

    public java.lang.Iterable memberMethods()
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        return r1;
    }

    public void resolveClassAnnotations()
    {
        java.util.Iterator $r8;
        java.util.Collection $r7;
        java.lang.'annotation'.Annotation[] $r4;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1;
        java.lang.'annotation'.Annotation $r5;
        java.lang.Class $r2, $r3;
        java.lang.Object $r9;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = new org.codehaus.jackson.map.introspect.AnnotationMap;

        specialinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations> = $r1;

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        if $r2 == null goto label1;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap,java.lang.Class,java.lang.Class)>($r1, $r3, $r2);

     label1:
        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r5 = $r4[$i1];

        $r6 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>($r5);

        if $z0 == 0 goto label3;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: void addIfNotPresent(java.lang.'annotation'.Annotation)>($r5);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r7 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.Collection _superTypes>;

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Class) $r9;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap,java.lang.Class)>($r1, $r2);

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label6:
        if $i1 >= $i0 goto label5;

        $r5 = $r4[$i1];

        $r6 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>($r5);

        if $z0 == 0 goto label7;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: void addIfNotPresent(java.lang.'annotation'.Annotation)>($r5);

     label7:
        $i1 = $i1 + 1;

        goto label6;

     label8:
        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap,java.lang.Class)>($r1, class "Ljava/lang/Object;");

        return;
    }

    public void resolveCreators(boolean)
    {
        java.lang.reflect.Constructor $r3;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r6;
        java.lang.reflect.Method[] $r9;
        java.util.ArrayList $r12;
        java.lang.reflect.Constructor[] $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, $i1, $i2, $i3;
        java.lang.reflect.Method $r10;
        boolean $z0, $z1;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r11;
        java.lang.Class[] $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r7;
        java.util.List $r5;
        java.lang.Class $r1;
        java.lang.Object $r8;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $z0 := @parameter0: boolean;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors> = null;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $i0 = lengthof $r2;

        $i1 = 0;

        $i2 = 0;

     label01:
        if $i2 >= $i0 goto label05;

        $r3 = $r2[$i2];

        $r4 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r4;

        if $i3 == 0 goto label03;

        if $z0 == 0 goto label04;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        if $r5 != null goto label02;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors> = $r12;

     label02:
        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _constructConstructor(java.lang.reflect.Constructor,boolean)>($r3, 0);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label04;

     label03:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _constructConstructor(java.lang.reflect.Constructor,boolean)>($r3, 1);

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor> = $r6;

     label04:
        $i2 = $i2 + 1;

        goto label01;

     label05:
        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        if $r1 == null goto label07;

        $r6 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor>;

        if $r6 != null goto label06;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        if $r5 == null goto label07;

     label06:
        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addConstructorMixIns(java.lang.Class)>($r1);

     label07:
        $r7 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r7 == null goto label10;

        $r6 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor>;

        if $r6 == null goto label08;

        $z1 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isIgnorableConstructor(org.codehaus.jackson.map.introspect.AnnotatedConstructor)>($r6);

        if $z1 == 0 goto label08;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor> = null;

     label08:
        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        if $r5 == null goto label10;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

     label09:
        $i2 = -1;

        $i0 = $i0 + $i2;

        if $i0 < 0 goto label10;

        $r7 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        $r8 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (org.codehaus.jackson.map.introspect.AnnotatedConstructor) $r8;

        $z1 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isIgnorableConstructor(org.codehaus.jackson.map.introspect.AnnotatedConstructor)>($r6);

        if $z1 == 0 goto label09;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>($i0);

        goto label09;

     label10:
        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods> = null;

        if $z0 == 0 goto label19;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r9 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = lengthof $r9;

     label11:
        if $i1 >= $i0 goto label16;

        $r10 = $r9[$i1];

        $i2 = virtualinvoke $r10.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z0 != 0 goto label12;

        goto label15;

     label12:
        $r4 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r4;

        if $i2 >= 1 goto label13;

        goto label15;

     label13:
        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        if $r5 != null goto label14;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods> = $r12;

     label14:
        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethod _constructCreatorMethod(java.lang.reflect.Method)>($r10);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r11);

     label15:
        $i1 = $i1 + 1;

        goto label11;

     label16:
        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        if $r1 == null goto label17;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        if $r5 == null goto label17;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFactoryMixIns(java.lang.Class)>($r1);

     label17:
        $r7 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r7 == null goto label19;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        if $r5 == null goto label19;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

     label18:
        $i0 = -1;

        $i1 = $i1 + $i0;

        if $i1 < 0 goto label19;

        $r7 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        $r8 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);

        $r11 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r8;

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isIgnorableMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r11);

        if $z0 == 0 goto label18;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>($i1);

        goto label18;

     label19:
        return;
    }

    public void resolveFields(boolean)
    {
        java.util.Map$Entry $r7;
        java.util.Iterator $r5;
        java.util.Collection $r11;
        java.util.Set $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r3;
        java.util.ArrayList $r10;
        java.util.LinkedHashMap $r1;
        java.util.List $r9;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0;
        java.lang.Class $r2;
        java.lang.Object $r6;
        org.codehaus.jackson.map.introspect.AnnotatedField $r8;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $z0 := @parameter0: boolean;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFields(java.util.Map,java.lang.Class)>($r1, $r2);

        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r1.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (org.codehaus.jackson.map.introspect.AnnotatedField) $r6;

        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z1 = virtualinvoke $r3.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isIgnorableField(org.codehaus.jackson.map.introspect.AnnotatedField)>($r8);

        if $z1 == 0 goto label1;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _ignoredFields>;

        $r9 = staticinvoke <org.codehaus.jackson.map.util.ArrayBuilders: java.util.List addToList(java.util.List,java.lang.Object)>($r9, $r8);

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _ignoredFields> = $r9;

        goto label1;

     label2:
        $z0 = virtualinvoke $r1.<java.util.LinkedHashMap: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields> = $r9;

        return;

     label3:
        $r10 = new java.util.ArrayList;

        $i0 = virtualinvoke $r1.<java.util.LinkedHashMap: int size()>();

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields> = $r10;

        $r9 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields>;

        $r11 = virtualinvoke $r1.<java.util.LinkedHashMap: java.util.Collection values()>();

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>($r11);

        return;
    }

    public void resolveMemberMethods(org.codehaus.jackson.map.introspect.MethodFilter, boolean)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.String $r13;
        java.lang.reflect.Method $r15;
        boolean $z0, $z1;
        java.util.Iterator $r8;
        java.util.Collection $r7;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r12, $r16;
        java.lang.Class[] $r14;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap $r3, $r5;
        java.lang.Exception $r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r11;
        java.util.List $r17;
        org.codehaus.jackson.map.introspect.MethodFilter $r2;
        java.lang.Class $r4, $r6;
        java.lang.Object $r9;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver $r10;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r2 := @parameter0: org.codehaus.jackson.map.introspect.MethodFilter;

        $z0 := @parameter1: boolean;

        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods> = $r3;

        $r3 = new org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void <init>()>();

        $r4 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        $r6 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMemberMethods(java.lang.Class,org.codehaus.jackson.map.introspect.MethodFilter,org.codehaus.jackson.map.introspect.AnnotatedMethodMap,java.lang.Class,org.codehaus.jackson.map.introspect.AnnotatedMethodMap)>($r4, $r2, $r5, $r6, $r3);

        $r7 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.Collection _superTypes>;

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Class) $r9;

        $r10 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        if $r10 != null goto label02;

        $r6 = null;

        goto label03;

     label02:
        $r6 = interfaceinvoke $r10.<org.codehaus.jackson.map.ClassIntrospector$MixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>($r4);

     label03:
        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMemberMethods(java.lang.Class,org.codehaus.jackson.map.introspect.MethodFilter,org.codehaus.jackson.map.introspect.AnnotatedMethodMap,java.lang.Class,org.codehaus.jackson.map.introspect.AnnotatedMethodMap)>($r4, $r2, $r5, $r6, $r3);

        goto label01;

     label04:
        $r10 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        if $r10 == null goto label05;

        $r4 = interfaceinvoke $r10.<org.codehaus.jackson.map.ClassIntrospector$MixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>(class "Ljava/lang/Object;");

        if $r4 == null goto label05;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMethodMixIns(org.codehaus.jackson.map.introspect.MethodFilter,org.codehaus.jackson.map.introspect.AnnotatedMethodMap,java.lang.Class,org.codehaus.jackson.map.introspect.AnnotatedMethodMap)>($r2, $r5, $r4, $r3);

     label05:
        $r11 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r11 == null goto label13;

        $z1 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: boolean isEmpty()>();

        if $z1 != 0 goto label11;

        $r8 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r9;

        $r4 = class "Ljava/lang/Object;";

     label07:
        $r13 = virtualinvoke $r12.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class[] getParameterClasses()>();

        $r15 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r13, $r14);

     label08:
        if $r15 == null goto label06;

     label09:
        $r16 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethod _constructMethod(java.lang.reflect.Method)>($r15);

        $r15 = virtualinvoke $r12.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotatedMethod,boolean)>($r15, $r16, 0);

        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void add(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r16);

     label10:
        goto label06;

     label11:
        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        $r8 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r9;

        $r11 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z1 = virtualinvoke $r11.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isIgnorableMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r12);

        if $z1 == 0 goto label12;

        interfaceinvoke $r8.<java.util.Iterator: void remove()>();

        if $z0 == 0 goto label12;

        $r17 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _ignoredMethods>;

        $r17 = staticinvoke <org.codehaus.jackson.map.util.ArrayBuilders: java.util.List addToList(java.util.List,java.lang.Object)>($r17, $r12);

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _ignoredMethods> = $r17;

        goto label12;

     label13:
        return;

     label14:
        $r1 := @caughtexception;

        goto label06;

     label15:
        return;

        catch java.lang.Exception from label07 to label08 with label14;
        catch java.lang.Exception from label09 to label10 with label14;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[AnnotedClass ");

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
