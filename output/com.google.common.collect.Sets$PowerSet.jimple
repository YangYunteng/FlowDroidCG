public final class com.google.common.collect.Sets$PowerSet extends java.util.AbstractSet
{
    public final com.google.common.collect.ImmutableMap inputSet;

    public void <init>(java.util.Set)
    {
        com.google.common.collect.Sets$PowerSet r0;
        com.google.common.collect.ImmutableMap $r2;
        int $i0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Sets$PowerSet;

        $r1 := @parameter0: java.util.Set;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        $r2 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap indexMap(java.util.Collection)>($r1);

        r0.<com.google.common.collect.Sets$PowerSet: com.google.common.collect.ImmutableMap inputSet> = $r2;

        $r2 = r0.<com.google.common.collect.Sets$PowerSet: com.google.common.collect.ImmutableMap inputSet>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 > 30 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = r0.<com.google.common.collect.Sets$PowerSet: com.google.common.collect.ImmutableMap inputSet>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "Too many elements to create power set: %s > 30", $i0);

        return;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.ImmutableSet $r4;
        com.google.common.collect.Sets$PowerSet r0;
        com.google.common.collect.ImmutableMap $r3;
        java.util.Set $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Sets$PowerSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.util.Set;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Set) $r1;

        $r3 = r0.<com.google.common.collect.Sets$PowerSet: com.google.common.collect.ImmutableMap inputSet>;

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        $z0 = virtualinvoke $r4.<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>($r2);

        return $z0;

     label1:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.collect.Sets$PowerSet r0, $r2;
        com.google.common.collect.ImmutableMap $r3, $r4;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Sets$PowerSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.collect.Sets$PowerSet;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Sets$PowerSet) $r1;

        $r3 = r0.<com.google.common.collect.Sets$PowerSet: com.google.common.collect.ImmutableMap inputSet>;

        $r4 = $r2.<com.google.common.collect.Sets$PowerSet: com.google.common.collect.ImmutableMap inputSet>;

        $z0 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: boolean equals(java.lang.Object)>($r4);

        return $z0;

     label1:
        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public int hashCode()
    {
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.Sets$PowerSet r0;
        com.google.common.collect.ImmutableMap $r1;
        int $i0, $i1, $i2;

        r0 := @this: com.google.common.collect.Sets$PowerSet;

        $r1 = r0.<com.google.common.collect.Sets$PowerSet: com.google.common.collect.ImmutableMap inputSet>;

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        $i0 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: int hashCode()>();

        $r1 = r0.<com.google.common.collect.Sets$PowerSet: com.google.common.collect.ImmutableMap inputSet>;

        $i1 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $i2 = -1;

        $i1 = $i1 + $i2;

        $i0 = $i0 << $i1;

        return $i0;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.Sets$PowerSet r0;

        r0 := @this: com.google.common.collect.Sets$PowerSet;

        return 0;
    }

    public java.util.Iterator iterator()
    {
        int $i0;
        com.google.common.collect.Sets$PowerSet r0;
        com.google.common.collect.Sets$PowerSet$1 $r1;

        r0 := @this: com.google.common.collect.Sets$PowerSet;

        $r1 = new com.google.common.collect.Sets$PowerSet$1;

        $i0 = virtualinvoke r0.<com.google.common.collect.Sets$PowerSet: int size()>();

        specialinvoke $r1.<com.google.common.collect.Sets$PowerSet$1: void <init>(com.google.common.collect.Sets$PowerSet,int)>(r0, $i0);

        return $r1;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.Sets$PowerSet r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.Sets$PowerSet;

        $r1 = r0.<com.google.common.collect.Sets$PowerSet: com.google.common.collect.ImmutableMap inputSet>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $i0 = 1 << $i0;

        return $i0;
    }

    public java.lang.String toString()
    {
        com.google.common.collect.Sets$PowerSet r0;
        com.google.common.collect.ImmutableMap $r3;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;

        r0 := @this: com.google.common.collect.Sets$PowerSet;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("powerSet(");

        $r3 = r0.<com.google.common.collect.Sets$PowerSet: com.google.common.collect.ImmutableMap inputSet>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
}
