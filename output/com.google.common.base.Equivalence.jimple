public abstract class com.google.common.base.Equivalence extends java.lang.Object implements java.util.function.BiPredicate
{

    public void <init>()
    {
        com.google.common.base.Equivalence r0;

        r0 := @this: com.google.common.base.Equivalence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.base.Equivalence equals()
    {
        com.google.common.base.Equivalence$Equals r0;

        r0 = <com.google.common.base.Equivalence$Equals: com.google.common.base.Equivalence$Equals INSTANCE>;

        return r0;
    }

    public static com.google.common.base.Equivalence identity()
    {
        com.google.common.base.Equivalence$Identity r0;

        r0 = <com.google.common.base.Equivalence$Identity: com.google.common.base.Equivalence$Identity INSTANCE>;

        return r0;
    }

    public abstract boolean doEquivalent(java.lang.Object, java.lang.Object);

    public abstract int doHash(java.lang.Object);

    public final boolean equivalent(java.lang.Object, java.lang.Object)
    {
        com.google.common.base.Equivalence r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.base.Equivalence;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        if $r2 == null goto label3;

        if $r1 != null goto label2;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<com.google.common.base.Equivalence: boolean doEquivalent(java.lang.Object,java.lang.Object)>($r2, $r1);

        return $z0;

     label3:
        return 0;
    }

    public final com.google.common.base.Predicate equivalentTo(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.base.Equivalence r0;
        com.google.common.base.Equivalence$EquivalentToPredicate $r2;

        r0 := @this: com.google.common.base.Equivalence;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new com.google.common.base.Equivalence$EquivalentToPredicate;

        specialinvoke $r2.<com.google.common.base.Equivalence$EquivalentToPredicate: void <init>(com.google.common.base.Equivalence,java.lang.Object)>(r0, $r1);

        return $r2;
    }

    public final int hash(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1;
        com.google.common.base.Equivalence r0;

        r0 := @this: com.google.common.base.Equivalence;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<com.google.common.base.Equivalence: int doHash(java.lang.Object)>($r1);

        return $i0;
    }

    public final com.google.common.base.Equivalence onResultOf(com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.base.Equivalence r0;
        com.google.common.base.FunctionalEquivalence $r2;

        r0 := @this: com.google.common.base.Equivalence;

        $r1 := @parameter0: com.google.common.base.Function;

        $r2 = new com.google.common.base.FunctionalEquivalence;

        specialinvoke $r2.<com.google.common.base.FunctionalEquivalence: void <init>(com.google.common.base.Function,com.google.common.base.Equivalence)>($r1, r0);

        return $r2;
    }

    public final com.google.common.base.Equivalence pairwise()
    {
        com.google.common.base.Equivalence r0;
        com.google.common.base.PairwiseEquivalence $r1;

        r0 := @this: com.google.common.base.Equivalence;

        $r1 = new com.google.common.base.PairwiseEquivalence;

        specialinvoke $r1.<com.google.common.base.PairwiseEquivalence: void <init>(com.google.common.base.Equivalence)>(r0);

        return $r1;
    }

    public final boolean test(java.lang.Object, java.lang.Object)
    {
        com.google.common.base.Equivalence r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.base.Equivalence;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>($r2, $r1);

        return $z0;
    }

    public final com.google.common.base.Equivalence$Wrapper wrap(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.base.Equivalence r0;
        com.google.common.base.Equivalence$Wrapper $r2;

        r0 := @this: com.google.common.base.Equivalence;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new com.google.common.base.Equivalence$Wrapper;

        specialinvoke $r2.<com.google.common.base.Equivalence$Wrapper: void <init>(com.google.common.base.Equivalence,java.lang.Object,com.google.common.base.Equivalence$1)>(r0, $r1, null);

        return $r2;
    }
}
