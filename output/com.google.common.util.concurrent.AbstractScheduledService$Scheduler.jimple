public abstract class com.google.common.util.concurrent.AbstractScheduledService$Scheduler extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.util.concurrent.AbstractScheduledService$Scheduler r0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$Scheduler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(com.google.common.util.concurrent.AbstractScheduledService$1)
    {
        com.google.common.util.concurrent.AbstractScheduledService$1 $r1;
        com.google.common.util.concurrent.AbstractScheduledService$Scheduler r0;

        r0 := @this: com.google.common.util.concurrent.AbstractScheduledService$Scheduler;

        $r1 := @parameter0: com.google.common.util.concurrent.AbstractScheduledService$1;

        specialinvoke r0.<com.google.common.util.concurrent.AbstractScheduledService$Scheduler: void <init>()>();

        return;
    }

    public static com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedDelaySchedule(long, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r0;
        byte $b2;
        int $i3;
        long $l0, $l1;
        com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1 $r1;
        boolean $z0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $b2 = $l1 cmp 0L;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "delay must be > 0, found %s", $l1);

        $r1 = new com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1;

        specialinvoke $r1.<com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1: void <init>(long,long,java.util.concurrent.TimeUnit)>($l0, $l1, $r0);

        return $r1;
    }

    public static com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedRateSchedule(long, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r0;
        byte $b2;
        int $i3;
        long $l0, $l1;
        com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2 $r1;
        boolean $z0;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $b2 = $l1 cmp 0L;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "period must be > 0, found %s", $l1);

        $r1 = new com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2;

        specialinvoke $r1.<com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2: void <init>(long,long,java.util.concurrent.TimeUnit)>($l0, $l1, $r0);

        return $r1;
    }

    public abstract java.util.concurrent.Future schedule(com.google.common.util.concurrent.AbstractService, java.util.concurrent.ScheduledExecutorService, java.lang.Runnable);
}
