public final class com.google.protobuf.ByteString$2 extends java.lang.Object implements java.util.Comparator
{

    public void <init>()
    {
        com.google.protobuf.ByteString$2 r0;

        r0 := @this: com.google.protobuf.ByteString$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(com.google.protobuf.ByteString, com.google.protobuf.ByteString)
    {
        com.google.protobuf.ByteString$2 r0;
        com.google.protobuf.ByteString $r1, $r2;
        byte $b0;
        com.google.protobuf.ByteString$ByteIterator $r3, $r4;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: com.google.protobuf.ByteString$2;

        $r1 := @parameter0: com.google.protobuf.ByteString;

        $r2 := @parameter1: com.google.protobuf.ByteString;

        $r3 = virtualinvoke $r1.<com.google.protobuf.ByteString: com.google.protobuf.ByteString$ByteIterator iterator()>();

        $r4 = virtualinvoke $r2.<com.google.protobuf.ByteString: com.google.protobuf.ByteString$ByteIterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $b0 = interfaceinvoke $r3.<com.google.protobuf.ByteString$ByteIterator: byte nextByte()>();

        $i1 = staticinvoke <com.google.protobuf.ByteString: int access$200(byte)>($b0);

        $b0 = interfaceinvoke $r4.<com.google.protobuf.ByteString$ByteIterator: byte nextByte()>();

        $i2 = staticinvoke <com.google.protobuf.ByteString: int access$200(byte)>($b0);

        $i1 = staticinvoke <java.lang.Integer: int compare(int,int)>($i1, $i2);

        if $i1 == 0 goto label1;

        return $i1;

     label2:
        $i1 = virtualinvoke $r1.<com.google.protobuf.ByteString: int size()>();

        $i2 = virtualinvoke $r2.<com.google.protobuf.ByteString: int size()>();

        $i1 = staticinvoke <java.lang.Integer: int compare(int,int)>($i1, $i2);

        return $i1;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        com.google.protobuf.ByteString $r3, $r4;
        int $i0;
        java.lang.Object $r1, $r2;
        com.google.protobuf.ByteString$2 r0;

        r0 := @this: com.google.protobuf.ByteString$2;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (com.google.protobuf.ByteString) $r1;

        $r4 = (com.google.protobuf.ByteString) $r2;

        $i0 = virtualinvoke r0.<com.google.protobuf.ByteString$2: int compare(com.google.protobuf.ByteString,com.google.protobuf.ByteString)>($r3, $r4);

        return $i0;
    }
}
