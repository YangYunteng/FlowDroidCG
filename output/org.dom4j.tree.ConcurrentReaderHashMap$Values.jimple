public class org.dom4j.tree.ConcurrentReaderHashMap$Values extends java.util.AbstractCollection
{
    public final org.dom4j.tree.ConcurrentReaderHashMap this$0;

    public void <init>(org.dom4j.tree.ConcurrentReaderHashMap)
    {
        org.dom4j.tree.ConcurrentReaderHashMap$Values r0;
        org.dom4j.tree.ConcurrentReaderHashMap $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$Values;

        $r1 := @parameter0: org.dom4j.tree.ConcurrentReaderHashMap;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap$Values: org.dom4j.tree.ConcurrentReaderHashMap this$0> = $r1;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        return;
    }

    public void <init>(org.dom4j.tree.ConcurrentReaderHashMap, org.dom4j.tree.ConcurrentReaderHashMap$Values)
    {
        org.dom4j.tree.ConcurrentReaderHashMap$Values r0, $r2;
        org.dom4j.tree.ConcurrentReaderHashMap $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$Values;

        $r1 := @parameter0: org.dom4j.tree.ConcurrentReaderHashMap;

        $r2 := @parameter1: org.dom4j.tree.ConcurrentReaderHashMap$Values;

        specialinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap$Values: void <init>(org.dom4j.tree.ConcurrentReaderHashMap)>($r1);

        return;
    }

    public void clear()
    {
        org.dom4j.tree.ConcurrentReaderHashMap$Values r0;
        org.dom4j.tree.ConcurrentReaderHashMap $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$Values;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap$Values: org.dom4j.tree.ConcurrentReaderHashMap this$0>;

        virtualinvoke $r1.<org.dom4j.tree.ConcurrentReaderHashMap: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        org.dom4j.tree.ConcurrentReaderHashMap $r1;
        org.dom4j.tree.ConcurrentReaderHashMap$Values r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$Values;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap$Values: org.dom4j.tree.ConcurrentReaderHashMap this$0>;

        $z0 = virtualinvoke $r1.<org.dom4j.tree.ConcurrentReaderHashMap: boolean containsValue(java.lang.Object)>($r2);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        org.dom4j.tree.ConcurrentReaderHashMap$Values r0;
        org.dom4j.tree.ConcurrentReaderHashMap$ValueIterator $r1;
        org.dom4j.tree.ConcurrentReaderHashMap $r2;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$Values;

        $r1 = new org.dom4j.tree.ConcurrentReaderHashMap$ValueIterator;

        $r2 = r0.<org.dom4j.tree.ConcurrentReaderHashMap$Values: org.dom4j.tree.ConcurrentReaderHashMap this$0>;

        specialinvoke $r1.<org.dom4j.tree.ConcurrentReaderHashMap$ValueIterator: void <init>(org.dom4j.tree.ConcurrentReaderHashMap)>($r2);

        return $r1;
    }

    public int size()
    {
        int $i0;
        org.dom4j.tree.ConcurrentReaderHashMap$Values r0;
        org.dom4j.tree.ConcurrentReaderHashMap $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap$Values;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap$Values: org.dom4j.tree.ConcurrentReaderHashMap this$0>;

        $i0 = virtualinvoke $r1.<org.dom4j.tree.ConcurrentReaderHashMap: int size()>();

        return $i0;
    }
}
