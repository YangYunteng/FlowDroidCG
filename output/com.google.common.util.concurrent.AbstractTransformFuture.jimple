public abstract class com.google.common.util.concurrent.AbstractTransformFuture extends com.google.common.util.concurrent.AbstractFuture$TrustedFuture implements java.lang.Runnable
{
    public java.lang.Object function;
    public com.google.common.util.concurrent.ListenableFuture inputFuture;

    public void <init>(com.google.common.util.concurrent.ListenableFuture, java.lang.Object)
    {
        com.google.common.util.concurrent.AbstractTransformFuture r0;
        java.lang.Object $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: com.google.common.util.concurrent.AbstractTransformFuture;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture$TrustedFuture: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = $r2;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function> = $r1;

        return;
    }

    public static com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function, java.util.concurrent.Executor)
    {
        com.google.common.base.Function $r3;
        com.google.common.util.concurrent.ListenableFuture $r0;
        java.util.concurrent.Executor $r1;
        com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture $r2;

        $r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r3 := @parameter1: com.google.common.base.Function;

        $r1 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r2 = new com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture;

        specialinvoke $r2.<com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>($r0, $r3);

        $r1 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)>($r1, $r2);

        interfaceinvoke $r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r2, $r1);

        return $r2;
    }

    public static com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.AsyncFunction, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture $r2;
        com.google.common.util.concurrent.ListenableFuture $r0;
        java.util.concurrent.Executor $r1;
        com.google.common.util.concurrent.AsyncFunction $r3;

        $r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r3 := @parameter1: com.google.common.util.concurrent.AsyncFunction;

        $r1 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture;

        specialinvoke $r2.<com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)>($r0, $r3);

        $r1 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)>($r1, $r2);

        interfaceinvoke $r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r2, $r1);

        return $r2;
    }

    public final void afterDone()
    {
        com.google.common.util.concurrent.AbstractTransformFuture r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: com.google.common.util.concurrent.AbstractTransformFuture;

        $r1 = r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: void maybePropagateCancellationTo(java.util.concurrent.Future)>($r1);

        r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = null;

        r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function> = null;

        return;
    }

    public abstract java.lang.Object doTransform(java.lang.Object, java.lang.Object);

    public java.lang.String pendingToString()
    {
        com.google.common.util.concurrent.AbstractTransformFuture r0;
        com.google.common.util.concurrent.ListenableFuture $r4;
        java.lang.Object $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: com.google.common.util.concurrent.AbstractTransformFuture;

        $r4 = r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        $r1 = r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function>;

        if $r4 == null goto label1;

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inputFuture=[");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], function=[");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        return null;
    }

    public final void run()
    {
        java.lang.Throwable $r5;
        com.google.common.util.concurrent.ListenableFuture $r3;
        java.util.concurrent.CancellationException $r2;
        java.lang.Error $r7;
        java.lang.RuntimeException $r8;
        java.lang.reflect.UndeclaredThrowableException $r6;
        com.google.common.util.concurrent.AbstractTransformFuture r0;
        java.util.concurrent.ExecutionException $r9;
        java.lang.Object $r1, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.google.common.util.concurrent.AbstractTransformFuture;

        $r3 = r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture>;

        $r1 = r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function>;

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$TrustedFuture: boolean isCancelled()>();

        $z1 = 1;

        if $r3 != null goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        $z0 = $z0 | $z2;

        if $r1 != null goto label03;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        $z1 = $z0 | $z1;

        if $z1 == 0 goto label05;

        return;

     label05:
        r0.<com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture inputFuture> = null;

        r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object function> = null;

     label06:
        $r4 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Object getDone(java.util.concurrent.Future)>($r3);

     label07:
        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: java.lang.Object doTransform(java.lang.Object,java.lang.Object)>($r1, $r4);

     label08:
        virtualinvoke r0.<com.google.common.util.concurrent.AbstractTransformFuture: void setResult(java.lang.Object)>($r1);

        return;

     label09:
        $r5 := @caughtexception;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)>($r5);

        return;

     label10:
        $r6 := @caughtexception;

        $r5 = virtualinvoke $r6.<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getCause()>();

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)>($r5);

        return;

     label11:
        $r7 := @caughtexception;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)>($r7);

        return;

     label12:
        $r8 := @caughtexception;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)>($r8);

        return;

     label13:
        $r9 := @caughtexception;

        $r5 = virtualinvoke $r9.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)>($r5);

        return;

     label14:
        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$TrustedFuture: boolean cancel(boolean)>(0);

        return;

     label15:
        $r2 := @caughtexception;

        goto label14;

        catch java.util.concurrent.CancellationException from label06 to label07 with label15;
        catch java.util.concurrent.ExecutionException from label06 to label07 with label13;
        catch java.lang.RuntimeException from label06 to label07 with label12;
        catch java.lang.Error from label06 to label07 with label11;
        catch java.lang.reflect.UndeclaredThrowableException from label07 to label08 with label10;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    public abstract void setResult(java.lang.Object);
}
