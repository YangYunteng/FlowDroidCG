public final class com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper extends com.google.common.util.concurrent.AggregateFutureState$AtomicHelper
{
    public final java.util.concurrent.atomic.AtomicIntegerFieldUpdater remainingCountUpdater;
    public final java.util.concurrent.atomic.AtomicReferenceFieldUpdater seenExceptionsUpdater;

    public void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicIntegerFieldUpdater)
    {
        com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper r0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;

        r0 := @this: com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper;

        $r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        $r2 := @parameter1: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        specialinvoke r0.<com.google.common.util.concurrent.AggregateFutureState$AtomicHelper: void <init>(com.google.common.util.concurrent.AggregateFutureState$1)>(null);

        r0.<com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater seenExceptionsUpdater> = $r1;

        r0.<com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper: java.util.concurrent.atomic.AtomicIntegerFieldUpdater remainingCountUpdater> = $r2;

        return;
    }

    public void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState, java.util.Set, java.util.Set)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        java.util.Set $r2, $r3;
        com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper r0;
        com.google.common.util.concurrent.AggregateFutureState $r1;

        r0 := @this: com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper;

        $r1 := @parameter0: com.google.common.util.concurrent.AggregateFutureState;

        $r2 := @parameter1: java.util.Set;

        $r3 := @parameter2: java.util.Set;

        $r4 = r0.<com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater seenExceptionsUpdater>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, $r3);

        return;
    }

    public int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        int $i0;
        com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper r0;
        com.google.common.util.concurrent.AggregateFutureState $r2;

        r0 := @this: com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper;

        $r2 := @parameter0: com.google.common.util.concurrent.AggregateFutureState;

        $r1 = r0.<com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper: java.util.concurrent.atomic.AtomicIntegerFieldUpdater remainingCountUpdater>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>($r2);

        return $i0;
    }
}
