public class org.dom4j.io.SAXReader extends java.lang.Object
{
    public static final java.lang.String SAX_DECL_HANDLER;
    public static final java.lang.String SAX_LEXICALHANDLER;
    public static final java.lang.String SAX_LEXICAL_HANDLER;
    public static final java.lang.String SAX_NAMESPACES;
    public static final java.lang.String SAX_NAMESPACE_PREFIXES;
    public static final java.lang.String SAX_STRING_INTERNING;
    public org.dom4j.io.DispatchHandler dispatchHandler;
    public java.lang.String encoding;
    public org.xml.sax.EntityResolver entityResolver;
    public org.xml.sax.ErrorHandler errorHandler;
    public org.dom4j.DocumentFactory factory;
    public boolean ignoreComments;
    public boolean includeExternalDTDDeclarations;
    public boolean includeInternalDTDDeclarations;
    public boolean mergeAdjacentText;
    public boolean stringInternEnabled;
    public boolean stripWhitespaceText;
    public boolean validating;
    public org.xml.sax.XMLFilter xmlFilter;
    public org.xml.sax.XMLReader xmlReader;

    public void <init>()
    {
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.SAXReader: boolean stringInternEnabled> = 1;

        r0.<org.dom4j.io.SAXReader: boolean includeInternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean includeExternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean mergeAdjacentText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean stripWhitespaceText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean ignoreComments> = 0;

        r0.<org.dom4j.io.SAXReader: java.lang.String encoding> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.xml.sax.XMLReader $r1;
        java.lang.String $r2;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.SAXReader: boolean stringInternEnabled> = 1;

        r0.<org.dom4j.io.SAXReader: boolean includeInternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean includeExternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean mergeAdjacentText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean stripWhitespaceText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean ignoreComments> = 0;

        r0.<org.dom4j.io.SAXReader: java.lang.String encoding> = null;

        if $r2 == null goto label1;

        $r1 = staticinvoke <org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader(java.lang.String)>($r2);

        r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader xmlReader> = $r1;

     label1:
        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        org.xml.sax.XMLReader $r1;
        java.lang.String $r2;
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r2 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.SAXReader: boolean stringInternEnabled> = 1;

        r0.<org.dom4j.io.SAXReader: boolean includeInternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean includeExternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean mergeAdjacentText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean stripWhitespaceText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean ignoreComments> = 0;

        r0.<org.dom4j.io.SAXReader: java.lang.String encoding> = null;

        if $r2 == null goto label1;

        $r1 = staticinvoke <org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader(java.lang.String)>($r2);

        r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader xmlReader> = $r1;

     label1:
        r0.<org.dom4j.io.SAXReader: boolean validating> = $z0;

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.SAXReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.SAXReader: boolean stringInternEnabled> = 1;

        r0.<org.dom4j.io.SAXReader: boolean includeInternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean includeExternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean mergeAdjacentText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean stripWhitespaceText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean ignoreComments> = 0;

        r0.<org.dom4j.io.SAXReader: java.lang.String encoding> = null;

        r0.<org.dom4j.io.SAXReader: org.dom4j.DocumentFactory factory> = $r1;

        return;
    }

    public void <init>(org.dom4j.DocumentFactory, boolean)
    {
        org.dom4j.io.SAXReader r0;
        org.dom4j.DocumentFactory $r1;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.SAXReader: boolean stringInternEnabled> = 1;

        r0.<org.dom4j.io.SAXReader: boolean includeInternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean includeExternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean mergeAdjacentText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean stripWhitespaceText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean ignoreComments> = 0;

        r0.<org.dom4j.io.SAXReader: java.lang.String encoding> = null;

        r0.<org.dom4j.io.SAXReader: org.dom4j.DocumentFactory factory> = $r1;

        r0.<org.dom4j.io.SAXReader: boolean validating> = $z0;

        return;
    }

    public void <init>(org.xml.sax.XMLReader)
    {
        org.xml.sax.XMLReader $r1;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.xml.sax.XMLReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.SAXReader: boolean stringInternEnabled> = 1;

        r0.<org.dom4j.io.SAXReader: boolean includeInternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean includeExternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean mergeAdjacentText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean stripWhitespaceText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean ignoreComments> = 0;

        r0.<org.dom4j.io.SAXReader: java.lang.String encoding> = null;

        r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader xmlReader> = $r1;

        return;
    }

    public void <init>(org.xml.sax.XMLReader, boolean)
    {
        org.xml.sax.XMLReader $r1;
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.xml.sax.XMLReader;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.SAXReader: boolean stringInternEnabled> = 1;

        r0.<org.dom4j.io.SAXReader: boolean includeInternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean includeExternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean mergeAdjacentText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean stripWhitespaceText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean ignoreComments> = 0;

        r0.<org.dom4j.io.SAXReader: java.lang.String encoding> = null;

        r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader xmlReader> = $r1;

        r0.<org.dom4j.io.SAXReader: boolean validating> = $z0;

        return;
    }

    public void <init>(boolean)
    {
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.SAXReader: boolean stringInternEnabled> = 1;

        r0.<org.dom4j.io.SAXReader: boolean includeInternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean includeExternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXReader: boolean mergeAdjacentText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean stripWhitespaceText> = 0;

        r0.<org.dom4j.io.SAXReader: boolean ignoreComments> = 0;

        r0.<org.dom4j.io.SAXReader: java.lang.String encoding> = null;

        r0.<org.dom4j.io.SAXReader: boolean validating> = $z0;

        return;
    }

    public void addHandler(java.lang.String, org.dom4j.ElementHandler)
    {
        org.dom4j.ElementHandler $r2;
        java.lang.String $r1;
        org.dom4j.io.SAXReader r0;
        org.dom4j.io.DispatchHandler $r3;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.dom4j.ElementHandler;

        $r3 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r3.<org.dom4j.io.DispatchHandler: void addHandler(java.lang.String,org.dom4j.ElementHandler)>($r1, $r2);

        return;
    }

    public void configureReader(org.xml.sax.XMLReader, org.xml.sax.helpers.DefaultHandler)
    {
        org.dom4j.io.SAXReader r0;
        java.lang.Exception $r4;
        org.xml.sax.helpers.DefaultHandler $r2;
        org.xml.sax.XMLReader $r1;
        org.xml.sax.ErrorHandler $r3;
        org.dom4j.DocumentException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.xml.sax.XMLReader;

        $r2 := @parameter1: org.xml.sax.helpers.DefaultHandler;

        staticinvoke <org.dom4j.io.SAXHelper: boolean setParserProperty(org.xml.sax.XMLReader,java.lang.String,java.lang.Object)>($r1, "http://xml.org/sax/handlers/LexicalHandler", $r2);

        staticinvoke <org.dom4j.io.SAXHelper: boolean setParserProperty(org.xml.sax.XMLReader,java.lang.String,java.lang.Object)>($r1, "http://xml.org/sax/properties/lexical-handler", $r2);

        $z0 = r0.<org.dom4j.io.SAXReader: boolean includeInternalDTDDeclarations>;

        if $z0 != 0 goto label01;

        $z0 = r0.<org.dom4j.io.SAXReader: boolean includeExternalDTDDeclarations>;

        if $z0 == 0 goto label02;

     label01:
        staticinvoke <org.dom4j.io.SAXHelper: boolean setParserProperty(org.xml.sax.XMLReader,java.lang.String,java.lang.Object)>($r1, "http://xml.org/sax/properties/declaration-handler", $r2);

     label02:
        staticinvoke <org.dom4j.io.SAXHelper: boolean setParserFeature(org.xml.sax.XMLReader,java.lang.String,boolean)>($r1, "http://xml.org/sax/features/namespaces", 1);

        staticinvoke <org.dom4j.io.SAXHelper: boolean setParserFeature(org.xml.sax.XMLReader,java.lang.String,boolean)>($r1, "http://xml.org/sax/features/namespace-prefixes", 0);

        $z0 = virtualinvoke r0.<org.dom4j.io.SAXReader: boolean isStringInternEnabled()>();

        staticinvoke <org.dom4j.io.SAXHelper: boolean setParserFeature(org.xml.sax.XMLReader,java.lang.String,boolean)>($r1, "http://xml.org/sax/features/string-interning", $z0);

        staticinvoke <org.dom4j.io.SAXHelper: boolean setParserFeature(org.xml.sax.XMLReader,java.lang.String,boolean)>($r1, "http://xml.org/sax/features/use-locator2", 1);

     label03:
        $z0 = virtualinvoke r0.<org.dom4j.io.SAXReader: boolean isValidating()>();

        interfaceinvoke $r1.<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/validation", $z0);

        $r3 = r0.<org.dom4j.io.SAXReader: org.xml.sax.ErrorHandler errorHandler>;

     label04:
        if $r3 == null goto label07;

     label05:
        $r3 = r0.<org.dom4j.io.SAXReader: org.xml.sax.ErrorHandler errorHandler>;

        interfaceinvoke $r1.<org.xml.sax.XMLReader: void setErrorHandler(org.xml.sax.ErrorHandler)>($r3);

     label06:
        return;

     label07:
        interfaceinvoke $r1.<org.xml.sax.XMLReader: void setErrorHandler(org.xml.sax.ErrorHandler)>($r2);

     label08:
        return;

     label09:
        $r4 := @caughtexception;

        $z0 = virtualinvoke r0.<org.dom4j.io.SAXReader: boolean isValidating()>();

        if $z0 != 0 goto label10;

        return;

     label10:
        $r5 = new org.dom4j.DocumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Validation not supported for XMLReader: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.dom4j.DocumentException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r4);

        throw $r5;

        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
    }

    public org.dom4j.io.SAXContentHandler createContentHandler(org.xml.sax.XMLReader)
    {
        org.xml.sax.XMLReader $r3;
        org.dom4j.io.SAXContentHandler $r4;
        org.dom4j.io.SAXReader r0;
        org.dom4j.io.DispatchHandler $r1;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.io.SAXReader;

        $r3 := @parameter0: org.xml.sax.XMLReader;

        $r4 = new org.dom4j.io.SAXContentHandler;

        $r2 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r1 = r0.<org.dom4j.io.SAXReader: org.dom4j.io.DispatchHandler dispatchHandler>;

        specialinvoke $r4.<org.dom4j.io.SAXContentHandler: void <init>(org.dom4j.DocumentFactory,org.dom4j.ElementHandler)>($r2, $r1);

        return $r4;
    }

    public org.xml.sax.EntityResolver createDefaultEntityResolver(java.lang.String)
    {
        int $i0;
        org.dom4j.io.SAXReader$SAXEntityResolver $r2;
        java.lang.String $r1;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(47);

        if $i0 <= 0 goto label1;

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        goto label2;

     label1:
        $r1 = null;

     label2:
        $r2 = new org.dom4j.io.SAXReader$SAXEntityResolver;

        specialinvoke $r2.<org.dom4j.io.SAXReader$SAXEntityResolver: void <init>(java.lang.String)>($r1);

        return $r2;
    }

    public org.xml.sax.XMLReader createXMLReader()
    {
        org.xml.sax.XMLReader $r1;
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $z0 = virtualinvoke r0.<org.dom4j.io.SAXReader: boolean isValidating()>();

        $r1 = staticinvoke <org.dom4j.io.SAXHelper: org.xml.sax.XMLReader createXMLReader(boolean)>($z0);

        return $r1;
    }

    public org.dom4j.io.DispatchHandler getDispatchHandler()
    {
        org.dom4j.io.SAXReader r0;
        org.dom4j.io.DispatchHandler $r1;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 = r0.<org.dom4j.io.SAXReader: org.dom4j.io.DispatchHandler dispatchHandler>;

        if $r1 != null goto label1;

        $r1 = new org.dom4j.io.DispatchHandler;

        specialinvoke $r1.<org.dom4j.io.DispatchHandler: void <init>()>();

        r0.<org.dom4j.io.SAXReader: org.dom4j.io.DispatchHandler dispatchHandler> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.SAXReader: org.dom4j.io.DispatchHandler dispatchHandler>;

        return $r1;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.io.SAXReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 = r0.<org.dom4j.io.SAXReader: org.dom4j.DocumentFactory factory>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.io.SAXReader: org.dom4j.DocumentFactory factory> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.SAXReader: org.dom4j.DocumentFactory factory>;

        return $r1;
    }

    public java.lang.String getEncoding()
    {
        java.lang.String r1;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        r1 = r0.<org.dom4j.io.SAXReader: java.lang.String encoding>;

        return r1;
    }

    public org.xml.sax.EntityResolver getEntityResolver()
    {
        org.dom4j.io.SAXReader r0;
        org.xml.sax.EntityResolver r1;

        r0 := @this: org.dom4j.io.SAXReader;

        r1 = r0.<org.dom4j.io.SAXReader: org.xml.sax.EntityResolver entityResolver>;

        return r1;
    }

    public org.xml.sax.ErrorHandler getErrorHandler()
    {
        org.xml.sax.ErrorHandler r1;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        r1 = r0.<org.dom4j.io.SAXReader: org.xml.sax.ErrorHandler errorHandler>;

        return r1;
    }

    public org.xml.sax.XMLFilter getXMLFilter()
    {
        org.xml.sax.XMLFilter r1;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        r1 = r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLFilter xmlFilter>;

        return r1;
    }

    public org.xml.sax.XMLReader getXMLReader()
    {
        org.xml.sax.XMLReader $r1;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 = r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader xmlReader>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader createXMLReader()>();

        r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader xmlReader> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader xmlReader>;

        return $r1;
    }

    public org.xml.sax.XMLReader installXMLFilter(org.xml.sax.XMLReader)
    {
        org.xml.sax.XMLReader $r1, $r4;
        org.xml.sax.XMLFilter $r2, $r3;
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.xml.sax.XMLReader;

        $r2 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLFilter getXMLFilter()>();

        if $r2 == null goto label3;

        $r3 = $r2;

     label1:
        $r4 = interfaceinvoke $r3.<org.xml.sax.XMLFilter: org.xml.sax.XMLReader getParent()>();

        $z0 = $r4 instanceof org.xml.sax.XMLFilter;

        if $z0 == 0 goto label2;

        $r3 = (org.xml.sax.XMLFilter) $r4;

        goto label1;

     label2:
        interfaceinvoke $r3.<org.xml.sax.XMLFilter: void setParent(org.xml.sax.XMLReader)>($r1);

        return $r2;

     label3:
        return $r1;
    }

    public boolean isIgnoreComments()
    {
        org.dom4j.io.SAXReader r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXReader;

        z0 = r0.<org.dom4j.io.SAXReader: boolean ignoreComments>;

        return z0;
    }

    public boolean isIncludeExternalDTDDeclarations()
    {
        org.dom4j.io.SAXReader r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXReader;

        z0 = r0.<org.dom4j.io.SAXReader: boolean includeExternalDTDDeclarations>;

        return z0;
    }

    public boolean isIncludeInternalDTDDeclarations()
    {
        org.dom4j.io.SAXReader r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXReader;

        z0 = r0.<org.dom4j.io.SAXReader: boolean includeInternalDTDDeclarations>;

        return z0;
    }

    public boolean isMergeAdjacentText()
    {
        org.dom4j.io.SAXReader r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXReader;

        z0 = r0.<org.dom4j.io.SAXReader: boolean mergeAdjacentText>;

        return z0;
    }

    public boolean isStringInternEnabled()
    {
        org.dom4j.io.SAXReader r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXReader;

        z0 = r0.<org.dom4j.io.SAXReader: boolean stringInternEnabled>;

        return z0;
    }

    public boolean isStripWhitespaceText()
    {
        org.dom4j.io.SAXReader r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXReader;

        z0 = r0.<org.dom4j.io.SAXReader: boolean stripWhitespaceText>;

        return z0;
    }

    public boolean isValidating()
    {
        org.dom4j.io.SAXReader r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXReader;

        z0 = r0.<org.dom4j.io.SAXReader: boolean validating>;

        return z0;
    }

    public org.dom4j.Document read(java.io.File)
    {
        org.xml.sax.InputSource $r2;
        org.dom4j.Document $r7;
        java.io.FileInputStream $r3;
        org.dom4j.io.SAXReader r0;
        java.io.File $r1;
        java.io.FileNotFoundException $r8;
        org.dom4j.DocumentException $r9;
        java.lang.StringBuffer $r5;
        java.lang.String $r4, $r6;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: java.io.File;

        $r2 = new org.xml.sax.InputSource;

        $r3 = new java.io.FileInputStream;

     label01:
        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        specialinvoke $r2.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r3);

     label02:
        $r4 = r0.<org.dom4j.io.SAXReader: java.lang.String encoding>;

        if $r4 == null goto label04;

        $r4 = r0.<org.dom4j.io.SAXReader: java.lang.String encoding>;

     label03:
        virtualinvoke $r2.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r4);

     label04:
        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

     label05:
        if $r4 == null goto label12;

        $r5 = new java.lang.StringBuffer;

     label06:
        specialinvoke $r5.<java.lang.StringBuffer: void <init>(java.lang.String)>("file://");

     label07:
        $r6 = <java.io.File: java.lang.String separator>;

     label08:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>($r6);

     label09:
        if $z0 != 0 goto label11;

     label10:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

     label11:
        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>($r4);

     label12:
        $r7 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r2);

     label13:
        return $r7;

     label14:
        $r8 := @caughtexception;

        $r9 = new org.dom4j.DocumentException;

        $r4 = virtualinvoke $r8.<java.io.FileNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r9.<org.dom4j.DocumentException: void <init>(java.lang.String,java.lang.Throwable)>($r4, $r8);

        throw $r9;

        catch java.io.FileNotFoundException from label01 to label02 with label14;
        catch java.io.FileNotFoundException from label03 to label05 with label14;
        catch java.io.FileNotFoundException from label06 to label07 with label14;
        catch java.io.FileNotFoundException from label08 to label09 with label14;
        catch java.io.FileNotFoundException from label10 to label13 with label14;
    }

    public org.dom4j.Document read(java.io.InputStream)
    {
        org.xml.sax.InputSource $r1;
        org.dom4j.Document $r2;
        java.lang.String $r4;
        org.dom4j.io.SAXReader r0;
        java.io.InputStream $r3;

        r0 := @this: org.dom4j.io.SAXReader;

        $r3 := @parameter0: java.io.InputStream;

        $r1 = new org.xml.sax.InputSource;

        specialinvoke $r1.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r3);

        $r4 = r0.<org.dom4j.io.SAXReader: java.lang.String encoding>;

        if $r4 == null goto label1;

        virtualinvoke $r1.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r4);

     label1:
        $r2 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r1);

        return $r2;
    }

    public org.dom4j.Document read(java.io.InputStream, java.lang.String)
    {
        org.xml.sax.InputSource $r2;
        org.dom4j.Document $r3;
        java.lang.String $r1;
        org.dom4j.io.SAXReader r0;
        java.io.InputStream $r4;

        r0 := @this: org.dom4j.io.SAXReader;

        $r4 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $r2 = new org.xml.sax.InputSource;

        specialinvoke $r2.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r4);

        virtualinvoke $r2.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>($r1);

        $r1 = r0.<org.dom4j.io.SAXReader: java.lang.String encoding>;

        if $r1 == null goto label1;

        virtualinvoke $r2.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r1);

     label1:
        $r3 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r2);

        return $r3;
    }

    public org.dom4j.Document read(java.io.Reader)
    {
        org.xml.sax.InputSource $r1;
        org.dom4j.Document $r2;
        java.io.Reader $r3;
        java.lang.String $r4;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r3 := @parameter0: java.io.Reader;

        $r1 = new org.xml.sax.InputSource;

        specialinvoke $r1.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r3);

        $r4 = r0.<org.dom4j.io.SAXReader: java.lang.String encoding>;

        if $r4 == null goto label1;

        virtualinvoke $r1.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r4);

     label1:
        $r2 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r1);

        return $r2;
    }

    public org.dom4j.Document read(java.io.Reader, java.lang.String)
    {
        org.xml.sax.InputSource $r2;
        org.dom4j.Document $r3;
        java.lang.String $r1;
        java.io.Reader $r4;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r4 := @parameter0: java.io.Reader;

        $r1 := @parameter1: java.lang.String;

        $r2 = new org.xml.sax.InputSource;

        specialinvoke $r2.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r4);

        virtualinvoke $r2.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>($r1);

        $r1 = r0.<org.dom4j.io.SAXReader: java.lang.String encoding>;

        if $r1 == null goto label1;

        virtualinvoke $r2.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r1);

     label1:
        $r3 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r2);

        return $r3;
    }

    public org.dom4j.Document read(java.lang.String)
    {
        org.xml.sax.InputSource $r1;
        org.dom4j.Document $r2;
        java.lang.String $r3;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r3 := @parameter0: java.lang.String;

        $r1 = new org.xml.sax.InputSource;

        specialinvoke $r1.<org.xml.sax.InputSource: void <init>(java.lang.String)>($r3);

        $r3 = r0.<org.dom4j.io.SAXReader: java.lang.String encoding>;

        if $r3 == null goto label1;

        virtualinvoke $r1.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r3);

     label1:
        $r2 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r1);

        return $r2;
    }

    public org.dom4j.Document read(java.net.URL)
    {
        org.xml.sax.InputSource $r1;
        org.dom4j.Document $r4;
        java.net.URL $r2;
        java.lang.String $r3;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r2 := @parameter0: java.net.URL;

        $r3 = virtualinvoke $r2.<java.net.URL: java.lang.String toExternalForm()>();

        $r1 = new org.xml.sax.InputSource;

        specialinvoke $r1.<org.xml.sax.InputSource: void <init>(java.lang.String)>($r3);

        $r3 = r0.<org.dom4j.io.SAXReader: java.lang.String encoding>;

        if $r3 == null goto label1;

        virtualinvoke $r1.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r3);

     label1:
        $r4 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r1);

        return $r4;
    }

    public org.dom4j.Document read(org.xml.sax.InputSource)
    {
        org.dom4j.Document $r7;
        org.dom4j.io.SAXReader r0;
        org.xml.sax.XMLReader $r2;
        org.dom4j.DocumentException $r12;
        int $i0;
        java.lang.String $r4, $r10;
        org.xml.sax.EntityResolver $r3, $r5;
        boolean $z0, $z1;
        org.xml.sax.InputSource $r1;
        java.lang.Exception $r8;
        org.xml.sax.SAXParseException $r9;
        org.dom4j.io.SAXContentHandler $r6;
        java.lang.StringBuilder $r11;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.xml.sax.InputSource;

     label01:
        $r2 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader getXMLReader()>();

        $r2 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader installXMLFilter(org.xml.sax.XMLReader)>($r2);

        $r3 = r0.<org.dom4j.io.SAXReader: org.xml.sax.EntityResolver entityResolver>;

     label02:
        if $r3 != null goto label06;

     label03:
        $r4 = virtualinvoke $r1.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        $r5 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.xml.sax.EntityResolver createDefaultEntityResolver(java.lang.String)>($r4);

     label04:
        $r3 = $r5;

     label05:
        r0.<org.dom4j.io.SAXReader: org.xml.sax.EntityResolver entityResolver> = $r5;

     label06:
        interfaceinvoke $r2.<org.xml.sax.XMLReader: void setEntityResolver(org.xml.sax.EntityResolver)>($r3);

        $r6 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.io.SAXContentHandler createContentHandler(org.xml.sax.XMLReader)>($r2);

        virtualinvoke $r6.<org.dom4j.io.SAXContentHandler: void setEntityResolver(org.xml.sax.EntityResolver)>($r3);

        virtualinvoke $r6.<org.dom4j.io.SAXContentHandler: void setInputSource(org.xml.sax.InputSource)>($r1);

        $z0 = virtualinvoke r0.<org.dom4j.io.SAXReader: boolean isIncludeInternalDTDDeclarations()>();

        $z1 = virtualinvoke r0.<org.dom4j.io.SAXReader: boolean isIncludeExternalDTDDeclarations()>();

        virtualinvoke $r6.<org.dom4j.io.SAXContentHandler: void setIncludeInternalDTDDeclarations(boolean)>($z0);

        virtualinvoke $r6.<org.dom4j.io.SAXContentHandler: void setIncludeExternalDTDDeclarations(boolean)>($z1);

        $z0 = virtualinvoke r0.<org.dom4j.io.SAXReader: boolean isMergeAdjacentText()>();

        virtualinvoke $r6.<org.dom4j.io.SAXContentHandler: void setMergeAdjacentText(boolean)>($z0);

        $z0 = virtualinvoke r0.<org.dom4j.io.SAXReader: boolean isStripWhitespaceText()>();

        virtualinvoke $r6.<org.dom4j.io.SAXContentHandler: void setStripWhitespaceText(boolean)>($z0);

        $z0 = virtualinvoke r0.<org.dom4j.io.SAXReader: boolean isIgnoreComments()>();

        virtualinvoke $r6.<org.dom4j.io.SAXContentHandler: void setIgnoreComments(boolean)>($z0);

        interfaceinvoke $r2.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>($r6);

        virtualinvoke r0.<org.dom4j.io.SAXReader: void configureReader(org.xml.sax.XMLReader,org.xml.sax.helpers.DefaultHandler)>($r2, $r6);

        interfaceinvoke $r2.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>($r1);

        $r7 = virtualinvoke $r6.<org.dom4j.io.SAXContentHandler: org.dom4j.Document getDocument()>();

     label07:
        return $r7;

     label08:
        $r8 := @caughtexception;

        $z0 = $r8 instanceof org.xml.sax.SAXParseException;

        if $z0 == 0 goto label10;

        $r9 = (org.xml.sax.SAXParseException) $r8;

        $r4 = virtualinvoke $r9.<org.xml.sax.SAXParseException: java.lang.String getSystemId()>();

        $r10 = $r4;

        if $r4 != null goto label09;

        $r10 = "";

     label09:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error on line ");

        $i0 = virtualinvoke $r9.<org.xml.sax.SAXParseException: int getLineNumber()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of document ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r4 = virtualinvoke $r9.<org.xml.sax.SAXParseException: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new org.dom4j.DocumentException;

        specialinvoke $r12.<org.dom4j.DocumentException: void <init>(java.lang.String,java.lang.Throwable)>($r4, $r8);

        throw $r12;

     label10:
        $r12 = new org.dom4j.DocumentException;

        $r4 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r12.<org.dom4j.DocumentException: void <init>(java.lang.String,java.lang.Throwable)>($r4, $r8);

        throw $r12;

        catch java.lang.Exception from label01 to label02 with label08;
        catch java.lang.Exception from label03 to label04 with label08;
        catch java.lang.Exception from label05 to label07 with label08;
    }

    public void removeHandler(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.io.SAXReader r0;
        org.dom4j.io.DispatchHandler $r2;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r2.<org.dom4j.io.DispatchHandler: org.dom4j.ElementHandler removeHandler(java.lang.String)>($r1);

        return;
    }

    public void resetHandlers()
    {
        org.dom4j.io.SAXReader r0;
        org.dom4j.io.DispatchHandler $r1;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r1.<org.dom4j.io.DispatchHandler: void resetHandlers()>();

        return;
    }

    public void setDefaultHandler(org.dom4j.ElementHandler)
    {
        org.dom4j.io.SAXReader r0;
        org.dom4j.io.DispatchHandler $r2;
        org.dom4j.ElementHandler $r1;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.dom4j.ElementHandler;

        $r2 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r2.<org.dom4j.io.DispatchHandler: void setDefaultHandler(org.dom4j.ElementHandler)>($r1);

        return;
    }

    public void setDispatchHandler(org.dom4j.io.DispatchHandler)
    {
        org.dom4j.io.SAXReader r0;
        org.dom4j.io.DispatchHandler $r1;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.dom4j.io.DispatchHandler;

        r0.<org.dom4j.io.SAXReader: org.dom4j.io.DispatchHandler dispatchHandler> = $r1;

        return;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.SAXReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        r0.<org.dom4j.io.SAXReader: org.dom4j.DocumentFactory factory> = $r1;

        return;
    }

    public void setEncoding(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: java.lang.String;

        r0.<org.dom4j.io.SAXReader: java.lang.String encoding> = $r1;

        return;
    }

    public void setEntityResolver(org.xml.sax.EntityResolver)
    {
        org.dom4j.io.SAXReader r0;
        org.xml.sax.EntityResolver $r1;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.xml.sax.EntityResolver;

        r0.<org.dom4j.io.SAXReader: org.xml.sax.EntityResolver entityResolver> = $r1;

        return;
    }

    public void setErrorHandler(org.xml.sax.ErrorHandler)
    {
        org.xml.sax.ErrorHandler $r1;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.xml.sax.ErrorHandler;

        r0.<org.dom4j.io.SAXReader: org.xml.sax.ErrorHandler errorHandler> = $r1;

        return;
    }

    public void setFeature(java.lang.String, boolean)
    {
        org.xml.sax.XMLReader $r2;
        java.lang.String $r1;
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader getXMLReader()>();

        interfaceinvoke $r2.<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>($r1, $z0);

        return;
    }

    public void setIgnoreComments(boolean)
    {
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXReader: boolean ignoreComments> = $z0;

        return;
    }

    public void setIncludeExternalDTDDeclarations(boolean)
    {
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXReader: boolean includeExternalDTDDeclarations> = $z0;

        return;
    }

    public void setIncludeInternalDTDDeclarations(boolean)
    {
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXReader: boolean includeInternalDTDDeclarations> = $z0;

        return;
    }

    public void setMergeAdjacentText(boolean)
    {
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXReader: boolean mergeAdjacentText> = $z0;

        return;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        org.xml.sax.XMLReader $r3;
        java.lang.Object $r2;
        java.lang.String $r1;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader getXMLReader()>();

        interfaceinvoke $r3.<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)>($r1, $r2);

        return;
    }

    public void setStringInternEnabled(boolean)
    {
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXReader: boolean stringInternEnabled> = $z0;

        return;
    }

    public void setStripWhitespaceText(boolean)
    {
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXReader: boolean stripWhitespaceText> = $z0;

        return;
    }

    public void setValidation(boolean)
    {
        org.dom4j.io.SAXReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXReader;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXReader: boolean validating> = $z0;

        return;
    }

    public void setXMLFilter(org.xml.sax.XMLFilter)
    {
        org.xml.sax.XMLFilter $r1;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.xml.sax.XMLFilter;

        r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLFilter xmlFilter> = $r1;

        return;
    }

    public void setXMLReader(org.xml.sax.XMLReader)
    {
        org.xml.sax.XMLReader $r1;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r1 := @parameter0: org.xml.sax.XMLReader;

        r0.<org.dom4j.io.SAXReader: org.xml.sax.XMLReader xmlReader> = $r1;

        return;
    }

    public void setXMLReaderClassName(java.lang.String)
    {
        org.xml.sax.XMLReader $r1;
        java.lang.String $r2;
        org.dom4j.io.SAXReader r0;

        r0 := @this: org.dom4j.io.SAXReader;

        $r2 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader(java.lang.String)>($r2);

        virtualinvoke r0.<org.dom4j.io.SAXReader: void setXMLReader(org.xml.sax.XMLReader)>($r1);

        return;
    }

    public static void <clinit>()
    {
        <org.dom4j.io.SAXReader: java.lang.String SAX_STRING_INTERNING> = "http://xml.org/sax/features/string-interning";

        <org.dom4j.io.SAXReader: java.lang.String SAX_NAMESPACE_PREFIXES> = "http://xml.org/sax/features/namespace-prefixes";

        <org.dom4j.io.SAXReader: java.lang.String SAX_NAMESPACES> = "http://xml.org/sax/features/namespaces";

        <org.dom4j.io.SAXReader: java.lang.String SAX_LEXICAL_HANDLER> = "http://xml.org/sax/properties/lexical-handler";

        <org.dom4j.io.SAXReader: java.lang.String SAX_LEXICALHANDLER> = "http://xml.org/sax/handlers/LexicalHandler";

        <org.dom4j.io.SAXReader: java.lang.String SAX_DECL_HANDLER> = "http://xml.org/sax/properties/declaration-handler";

        return;
    }
}
