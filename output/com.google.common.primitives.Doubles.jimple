public final class com.google.common.primitives.Doubles extends java.lang.Object
{
    public static final int BYTES;
    public static final java.util.regex.Pattern FLOATING_POINT_PATTERN;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <com.google.common.primitives.Doubles: int BYTES> = 8;

        $r0 = staticinvoke <com.google.common.primitives.Doubles: java.util.regex.Pattern fpPattern()>();

        <com.google.common.primitives.Doubles: java.util.regex.Pattern FLOATING_POINT_PATTERN> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.primitives.Doubles r0;

        r0 := @this: com.google.common.primitives.Doubles;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int access$000(double[], double, int, int)
    {
        int $i0, $i1;
        double[] $r0;
        double $d0;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i0 = staticinvoke <com.google.common.primitives.Doubles: int indexOf(double[],double,int,int)>($r0, $d0, $i0, $i1);

        return $i0;
    }

    public static int access$100(double[], double, int, int)
    {
        int $i0, $i1;
        double[] $r0;
        double $d0;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i0 = staticinvoke <com.google.common.primitives.Doubles: int lastIndexOf(double[],double,int,int)>($r0, $d0, $i0, $i1);

        return $i0;
    }

    public static transient java.util.List asList(double[])
    {
        com.google.common.primitives.Doubles$DoubleArrayAsList $r2;
        java.util.List $r0;
        double[] $r1;
        int $i0;

        $r1 := @parameter0: double[];

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r0;

     label1:
        $r2 = new com.google.common.primitives.Doubles$DoubleArrayAsList;

        specialinvoke $r2.<com.google.common.primitives.Doubles$DoubleArrayAsList: void <init>(double[])>($r1);

        return $r2;
    }

    public static int compare(double, double)
    {
        int $i0;
        double $d0, $d1;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        return $i0;
    }

    public static transient double[] concat(double[][])
    {
        int $i0, $i1, $i2, $i3;
        double[] $r1, $r2;
        double[][] $r0;

        $r0 := @parameter0: double[][];

        $i1 = lengthof $r0;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r1 = $r0[$i2];

        $i0 = lengthof $r1;

        $i3 = $i3 + $i0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r1 = newarray (double)[$i3];

        $i1 = lengthof $r0;

        $i2 = 0;

        $i3 = 0;

     label3:
        if $i2 >= $i1 goto label4;

        $r2 = $r0[$i2];

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i3, $i0);

        $i0 = lengthof $r2;

        $i3 = $i3 + $i0;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        return $r1;
    }

    public static double constrainToRange(double, double, double)
    {
        java.lang.Double $r0, $r1;
        byte $b0;
        int $i1;
        double $d0, $d1, $d2;
        boolean $z0;

        $d2 := @parameter0: double;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $b0 = $d0 cmpg $d1;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "min (%s) must be less than or equal to max (%s)", $r0, $r1);

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d2, $d0);

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d2, $d1);

        return $d2;
    }

    public static boolean contains(double[], double)
    {
        byte $b1;
        int $i0, $i2;
        double[] $r0;
        double $d0, $d1;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i0 = lengthof $r0;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label3;

        $d1 = $r0[$i2];

        $b1 = $d1 cmpl $d0;

        if $b1 != 0 goto label2;

        return 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static double[] ensureCapacity(double[], int, int)
    {
        int $i0, $i1, $i2;
        double[] $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: double[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $z0 = 1;

        if $i1 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z1, "Invalid minLength: %s", $i1);

        if $i0 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "Invalid padding: %s", $i0);

        $i2 = lengthof $r0;

        if $i2 >= $i1 goto label5;

        $i1 = $i1 + $i0;

        $r0 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r0, $i1);

     label5:
        return $r0;
    }

    public static java.util.regex.Pattern fpPattern()
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r2;
        java.util.regex.Pattern $r3;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:\\d++(?:\\.\\d*+)?|\\.\\d++)");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:[eE][+-]?\\d++)?[fFdD]?");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0[xX]");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:\\p{XDigit}++(?:\\.\\p{XDigit}*+)?|\\.\\p{XDigit}++)");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[pP][+-]?\\d++[fFdD]?");

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[+-]?(?:NaN|Infinity|");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r1);

        return $r3;
    }

    public static int hashCode(double)
    {
        int $i0;
        java.lang.Double $r0;
        double $d0;

        $d0 := @parameter0: double;

        $r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $i0 = virtualinvoke $r0.<java.lang.Double: int hashCode()>();

        return $i0;
    }

    public static int indexOf(double[], double)
    {
        int $i0;
        double[] $r0;
        double $d0;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i0 = lengthof $r0;

        $i0 = staticinvoke <com.google.common.primitives.Doubles: int indexOf(double[],double,int,int)>($r0, $d0, 0, $i0);

        return $i0;
    }

    public static int indexOf(double[], double, int, int)
    {
        byte $b1;
        int $i0, $i2;
        double[] $r0;
        double $d0, $d1;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i2 := @parameter2: int;

        $i0 := @parameter3: int;

     label1:
        if $i2 >= $i0 goto label3;

        $d1 = $r0[$i2];

        $b1 = $d1 cmpl $d0;

        if $b1 != 0 goto label2;

        return $i2;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $i2 = -1;

        return $i2;
    }

    public static int indexOf(double[], double[])
    {
        double[] $r0, $r1;
        byte $b0;
        int $i1, $i2, $i3;
        double $d0, $d1;

        $r1 := @parameter0: double[];

        $r0 := @parameter1: double[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "array");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "target");

        $i1 = lengthof $r0;

        if $i1 != 0 goto label1;

        return 0;

     label1:
        $i1 = 0;

     label2:
        $i2 = lengthof $r1;

        $i3 = lengthof $r0;

        $i2 = $i2 - $i3;

        $i2 = $i2 + 1;

        if $i1 >= $i2 goto label6;

        $i2 = 0;

     label3:
        $i3 = lengthof $r0;

        if $i2 >= $i3 goto label5;

        $i3 = $i1 + $i2;

        $d1 = $r1[$i3];

        $d0 = $r0[$i2];

        $b0 = $d1 cmpl $d0;

        if $b0 == 0 goto label4;

        $i1 = $i1 + 1;

        goto label2;

     label4:
        $i2 = $i2 + 1;

        goto label3;

     label5:
        return $i1;

     label6:
        $i1 = -1;

        return $i1;
    }

    public static boolean isFinite(double)
    {
        int $i1;
        byte $b0;
        double $d0;

        $d0 := @parameter0: double;

        $b0 = #-Infinity cmpg $d0;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $b0 = $d0 cmpg #Infinity;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static transient java.lang.String join(java.lang.String, double[])
    {
        double[] $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        double $d0;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: double[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        $i0 = lengthof $r0;

        $i0 = $i0 * 12;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        $d0 = $r0[0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $i0 = 1;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $d0 = $r0[$i0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static int lastIndexOf(double[], double)
    {
        int $i0;
        double[] $r0;
        double $d0;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i0 = lengthof $r0;

        $i0 = staticinvoke <com.google.common.primitives.Doubles: int lastIndexOf(double[],double,int,int)>($r0, $d0, 0, $i0);

        return $i0;
    }

    public static int lastIndexOf(double[], double, int, int)
    {
        byte $b1;
        int $i0, $i2, $i3;
        double[] $r0;
        double $d0, $d1;

        $r0 := @parameter0: double[];

        $d0 := @parameter1: double;

        $i0 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 = -1;

        $i2 = $i2 + $i3;

     label1:
        if $i2 < $i0 goto label3;

        $d1 = $r0[$i2];

        $b1 = $d1 cmpl $d0;

        if $b1 != 0 goto label2;

        return $i2;

     label2:
        $i3 = -1;

        $i2 = $i2 + $i3;

        goto label1;

     label3:
        $i0 = -1;

        return $i0;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.google.common.primitives.Doubles$LexicographicalComparator r0;

        r0 = <com.google.common.primitives.Doubles$LexicographicalComparator: com.google.common.primitives.Doubles$LexicographicalComparator INSTANCE>;

        return r0;
    }

    public static transient double max(double[])
    {
        double[] $r0;
        int $i0, $i1;
        double $d0, $d1;
        boolean $z0;

        $r0 := @parameter0: double[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $d0 = $r0[0];

     label3:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label4;

        $d1 = $r0[$i1];

        $d0 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return $d0;
    }

    public static transient double min(double[])
    {
        double[] $r0;
        int $i0, $i1;
        double $d0, $d1;
        boolean $z0;

        $r0 := @parameter0: double[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $d0 = $r0[0];

     label3:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label4;

        $d1 = $r0[$i1];

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return $d0;
    }

    public static void reverse(double[])
    {
        double[] $r0;
        int $i0;

        $r0 := @parameter0: double[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.Doubles: void reverse(double[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void reverse(double[], int, int)
    {
        double[] $r0;
        int $i0, $i1, $i2;
        double $d0, $d1;

        $r0 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, $i2);

        $i2 = -1;

        $i1 = $i1 + $i2;

     label1:
        if $i0 >= $i1 goto label2;

        $d1 = $r0[$i0];

        $d0 = $r0[$i1];

        $r0[$i0] = $d0;

        $r0[$i1] = $d1;

        $i0 = $i0 + 1;

        $i2 = -1;

        $i1 = $i1 + $i2;

        goto label1;

     label2:
        return;
    }

    public static void sortDescending(double[])
    {
        double[] $r0;
        int $i0;

        $r0 := @parameter0: double[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.Doubles: void sortDescending(double[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void sortDescending(double[], int, int)
    {
        double[] $r0;
        int $i0, $i1, $i2;

        $r0 := @parameter0: double[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, $i2);

        staticinvoke <java.util.Arrays: void sort(double[],int,int)>($r0, $i0, $i1);

        staticinvoke <com.google.common.primitives.Doubles: void reverse(double[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static com.google.common.base.Converter stringConverter()
    {
        com.google.common.primitives.Doubles$DoubleConverter r0;

        r0 = <com.google.common.primitives.Doubles$DoubleConverter: com.google.common.primitives.Doubles$DoubleConverter INSTANCE>;

        return r0;
    }

    public static double[] toArray(java.util.Collection)
    {
        com.google.common.primitives.Doubles$DoubleArrayAsList $r2;
        java.lang.Object[] $r3;
        java.util.Collection $r1;
        double[] $r0;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.Number $r5;
        boolean $z0;
        double $d0;

        $r1 := @parameter0: java.util.Collection;

        $z0 = $r1 instanceof com.google.common.primitives.Doubles$DoubleArrayAsList;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.primitives.Doubles$DoubleArrayAsList) $r1;

        $r0 = virtualinvoke $r2.<com.google.common.primitives.Doubles$DoubleArrayAsList: double[] toDoubleArray()>();

        return $r0;

     label1:
        $r3 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $i0 = lengthof $r3;

        $r0 = newarray (double)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r4 = $r3[$i1];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r5 = (java.lang.Number) $r4;

        $d0 = virtualinvoke $r5.<java.lang.Number: double doubleValue()>();

        $r0[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r0;
    }

    public static java.lang.Double tryParse(java.lang.String)
    {
        java.util.regex.Matcher $r3;
        java.lang.Double $r4;
        java.lang.NumberFormatException $r0;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;
        boolean $z0;
        double $d0;

        $r1 := @parameter0: java.lang.String;

        $r2 = <com.google.common.primitives.Doubles: java.util.regex.Pattern FLOATING_POINT_PATTERN>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label3;

     label1:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

     label2:
        return $r4;

     label3:
        return null;

     label4:
        $r0 := @caughtexception;

        goto label3;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }
}
