public abstract class com.google.common.collect.ImmutableSet$Indexed extends com.google.common.collect.ImmutableSet
{

    public void <init>()
    {
        com.google.common.collect.ImmutableSet$Indexed r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Indexed;

        specialinvoke r0.<com.google.common.collect.ImmutableSet: void <init>()>();

        return;
    }

    public com.google.common.collect.ImmutableList createAsList()
    {
        com.google.common.collect.ImmutableSet$Indexed$1 $r1;
        com.google.common.collect.ImmutableSet$Indexed r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Indexed;

        $r1 = new com.google.common.collect.ImmutableSet$Indexed$1;

        specialinvoke $r1.<com.google.common.collect.ImmutableSet$Indexed$1: void <init>(com.google.common.collect.ImmutableSet$Indexed)>(r0);

        return $r1;
    }

    public void forEach(java.util.function.Consumer)
    {
        java.util.function.Consumer $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        com.google.common.collect.ImmutableSet$Indexed r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Indexed;

        $r1 := @parameter0: java.util.function.Consumer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSet$Indexed: java.lang.Object get(int)>($i1);

        interfaceinvoke $r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public abstract java.lang.Object get(int);

    public com.google.common.collect.UnmodifiableIterator iterator()
    {
        com.google.common.collect.UnmodifiableIterator $r2;
        com.google.common.collect.ImmutableList $r1;
        com.google.common.collect.ImmutableSet$Indexed r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Indexed;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r2;
    }

    public volatile java.util.Iterator iterator()
    {
        com.google.common.collect.UnmodifiableIterator $r1;
        com.google.common.collect.ImmutableSet$Indexed r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Indexed;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSet$Indexed: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public java.util.Spliterator spliterator()
    {
        c.i.b.c.g $r1;
        int $i0;
        java.util.Spliterator $r2;
        com.google.common.collect.ImmutableSet$Indexed r0;

        r0 := @this: com.google.common.collect.ImmutableSet$Indexed;

        $i0 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();

        $r1 = new c.i.b.c.g;

        specialinvoke $r1.<c.i.b.c.g: void <init>(com.google.common.collect.ImmutableSet$Indexed)>(r0);

        $r2 = staticinvoke <com.google.common.collect.CollectSpliterators: java.util.Spliterator indexed(int,int,java.util.function.IntFunction)>($i0, 1297, $r1);

        return $r2;
    }
}
