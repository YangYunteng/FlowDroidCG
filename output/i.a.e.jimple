public class i.a.e extends i.a.d
{

    public static final char a(char[])
    {
        int $i0;
        char[] $r0;
        char $c1;
        java.lang.IllegalArgumentException $r1;
        java.util.NoSuchElementException $r2;

        $r0 := @parameter0: char[];

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$single");

        $i0 = lengthof $r0;

        if $i0 == 0 goto label2;

        if $i0 != 1 goto label1;

        $c1 = $r0[0];

        return $c1;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array has more than one element.");

        throw $r1;

     label2:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Array is empty.");

        throw $r2;
    }

    public static final java.util.List a(java.lang.Object[], int)
    {
        java.lang.Object[] $r1;
        java.lang.IllegalArgumentException $r6;
        java.util.ArrayList $r3;
        java.util.List $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object[];

        $i1 := @parameter1: int;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "$this$take");

        $i2 = 0;

        if $i1 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label09;

        if $i1 != 0 goto label03;

        $r2 = staticinvoke <i.a.h: java.util.List a()>();

        return $r2;

     label03:
        $i0 = lengthof $r1;

        if $i1 < $i0 goto label04;

        $r2 = staticinvoke <i.a.e: java.util.List c(java.lang.Object[])>($r1);

        return $r2;

     label04:
        if $i1 != 1 goto label05;

        $r0 = $r1[0];

        $r2 = staticinvoke <i.a.g: java.util.List a(java.lang.Object)>($r0);

        return $r2;

     label05:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i1);

        $i0 = lengthof $r1;

        $i3 = 0;

     label06:
        if $i2 >= $i0 goto label08;

        $r0 = $r1[$i2];

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

        $i3 = $i3 + 1;

        if $i3 != $i1 goto label07;

        return $r3;

     label07:
        $i2 = $i2 + 1;

        goto label06;

     label08:
        return $r3;

     label09:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested element count ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        goto label10;

     label10:
        throw $r6;
    }

    public static final boolean a(java.lang.Object[], java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0;
        java.lang.Object[] $r1;

        $r1 := @parameter0: java.lang.Object[];

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "$this$contains");

        $i0 = staticinvoke <i.a.e: int b(java.lang.Object[],java.lang.Object)>($r1, $r0);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final int b(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] $r0;
        int $i0, $i1;
        java.lang.Object $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$indexOf");

        $i0 = 0;

        if $r1 != null goto label3;

        $i1 = lengthof $r0;

     label1:
        if $i0 >= $i1 goto label6;

        $r1 = $r0[$i0];

        if $r1 != null goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i1 = lengthof $r0;

     label4:
        if $i0 >= $i1 goto label6;

        $r2 = $r0[$i0];

        $z0 = staticinvoke <i.f.b.i: boolean a(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $z0 == 0 goto label5;

        return $i0;

     label5:
        $i0 = $i0 + 1;

        goto label4;

     label6:
        $i0 = -1;

        return $i0;
    }

    public static final java.lang.Object b(java.lang.Object[])
    {
        int $i0;
        java.lang.Object $r1;
        java.lang.Object[] $r0;

        $r0 := @parameter0: java.lang.Object[];

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$singleOrNull");

        $i0 = lengthof $r0;

        if $i0 != 1 goto label1;

        $r1 = $r0[0];

        return $r1;

     label1:
        return null;
    }

    public static final java.lang.Object[] b(java.lang.Object[], java.util.Comparator)
    {
        java.lang.Object[] $r1;
        int $i0;
        java.util.Comparator $r0;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "$this$sortedArrayWith");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "comparator");

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return $r1;

     label3:
        $i0 = lengthof $r1;

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        staticinvoke <i.f.b.i: void a(java.lang.Object,java.lang.String)>($r1, "java.util.Arrays.copyOf(this, size)");

        staticinvoke <i.a.d: void a(java.lang.Object[],java.util.Comparator)>($r1, $r0);

        return $r1;
    }

    public static final java.util.List c(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] $r0;
        int $i0;
        java.lang.Object $r2;

        $r0 := @parameter0: java.lang.Object[];

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "$this$toList");

        $i0 = lengthof $r0;

        if $i0 == 0 goto label2;

        if $i0 == 1 goto label1;

        $r1 = staticinvoke <i.a.e: java.util.List d(java.lang.Object[])>($r0);

        return $r1;

     label1:
        $r2 = $r0[0];

        $r1 = staticinvoke <i.a.g: java.util.List a(java.lang.Object)>($r2);

        return $r1;

     label2:
        $r1 = staticinvoke <i.a.h: java.util.List a()>();

        return $r1;
    }

    public static final java.util.List c(java.lang.Object[], java.util.Comparator)
    {
        java.util.List $r2;
        java.lang.Object[] $r1;
        java.util.Comparator $r0;

        $r1 := @parameter0: java.lang.Object[];

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "$this$sortedWith");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r0, "comparator");

        $r1 = staticinvoke <i.a.e: java.lang.Object[] b(java.lang.Object[],java.util.Comparator)>($r1, $r0);

        $r2 = staticinvoke <i.a.d: java.util.List a(java.lang.Object[])>($r1);

        return $r2;
    }

    public static final java.util.List d(java.lang.Object[])
    {
        java.lang.Object[] $r1;
        java.util.Collection $r0;
        java.util.ArrayList $r2;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "$this$toMutableList");

        $r2 = new java.util.ArrayList;

        $r0 = staticinvoke <i.a.h: java.util.Collection a(java.lang.Object[])>($r1);

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r0);

        return $r2;
    }
}
