public class androidx.lifecycle.ViewModelProviders extends java.lang.Object
{

    public void <init>()
    {
        androidx.lifecycle.ViewModelProviders r0;

        r0 := @this: androidx.lifecycle.ViewModelProviders;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.app.Activity checkActivity(androidx.fragment.app.Fragment)
    {
        androidx.fragment.app.Fragment $r1;
        java.lang.IllegalStateException $r2;
        androidx.fragment.app.FragmentActivity $r0;

        $r1 := @parameter0: androidx.fragment.app.Fragment;

        $r0 = virtualinvoke $r1.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentActivity getActivity()>();

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t create ViewModelProvider for detached fragment");

        throw $r2;
    }

    public static android.app.Application checkApplication(android.app.Activity)
    {
        java.lang.IllegalStateException $r2;
        android.app.Application $r0;
        android.app.Activity $r1;

        $r1 := @parameter0: android.app.Activity;

        $r0 = virtualinvoke $r1.<android.app.Activity: android.app.Application getApplication()>();

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Your activity/fragment is not yet attached to Application. You can\'t request ViewModel before onCreate call.");

        throw $r2;
    }

    public static androidx.lifecycle.ViewModelProvider of(androidx.fragment.app.Fragment)
    {
        androidx.fragment.app.Fragment $r1;
        androidx.lifecycle.ViewModelProvider $r0;

        $r1 := @parameter0: androidx.fragment.app.Fragment;

        $r0 = staticinvoke <androidx.lifecycle.ViewModelProviders: androidx.lifecycle.ViewModelProvider of(androidx.fragment.app.Fragment,androidx.lifecycle.ViewModelProvider$Factory)>($r1, null);

        return $r0;
    }

    public static androidx.lifecycle.ViewModelProvider of(androidx.fragment.app.Fragment, androidx.lifecycle.ViewModelProvider$Factory)
    {
        androidx.lifecycle.ViewModelStore $r5;
        android.app.Application $r3;
        androidx.lifecycle.ViewModelProvider $r4;
        androidx.fragment.app.Fragment $r0;
        androidx.lifecycle.ViewModelProvider$Factory $r1;
        android.app.Activity $r2;

        $r0 := @parameter0: androidx.fragment.app.Fragment;

        $r1 := @parameter1: androidx.lifecycle.ViewModelProvider$Factory;

        $r2 = staticinvoke <androidx.lifecycle.ViewModelProviders: android.app.Activity checkActivity(androidx.fragment.app.Fragment)>($r0);

        $r3 = staticinvoke <androidx.lifecycle.ViewModelProviders: android.app.Application checkApplication(android.app.Activity)>($r2);

        if $r1 != null goto label1;

        $r1 = staticinvoke <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory: androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory getInstance(android.app.Application)>($r3);

     label1:
        $r4 = new androidx.lifecycle.ViewModelProvider;

        $r5 = virtualinvoke $r0.<androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelStore getViewModelStore()>();

        specialinvoke $r4.<androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)>($r5, $r1);

        return $r4;
    }

    public static androidx.lifecycle.ViewModelProvider of(androidx.fragment.app.FragmentActivity)
    {
        androidx.lifecycle.ViewModelProvider $r0;
        androidx.fragment.app.FragmentActivity $r1;

        $r1 := @parameter0: androidx.fragment.app.FragmentActivity;

        $r0 = staticinvoke <androidx.lifecycle.ViewModelProviders: androidx.lifecycle.ViewModelProvider of(androidx.fragment.app.FragmentActivity,androidx.lifecycle.ViewModelProvider$Factory)>($r1, null);

        return $r0;
    }

    public static androidx.lifecycle.ViewModelProvider of(androidx.fragment.app.FragmentActivity, androidx.lifecycle.ViewModelProvider$Factory)
    {
        androidx.lifecycle.ViewModelStore $r4;
        android.app.Application $r2;
        androidx.lifecycle.ViewModelProvider $r3;
        androidx.lifecycle.ViewModelProvider$Factory $r1;
        androidx.fragment.app.FragmentActivity $r0;

        $r0 := @parameter0: androidx.fragment.app.FragmentActivity;

        $r1 := @parameter1: androidx.lifecycle.ViewModelProvider$Factory;

        $r2 = staticinvoke <androidx.lifecycle.ViewModelProviders: android.app.Application checkApplication(android.app.Activity)>($r0);

        if $r1 != null goto label1;

        $r1 = staticinvoke <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory: androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory getInstance(android.app.Application)>($r2);

     label1:
        $r3 = new androidx.lifecycle.ViewModelProvider;

        $r4 = virtualinvoke $r0.<androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()>();

        specialinvoke $r3.<androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)>($r4, $r1);

        return $r3;
    }
}
