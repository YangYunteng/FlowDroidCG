public final class org.codehaus.jackson.io.NumberOutput extends java.lang.Object
{
    public static int BILLION;
    public static final char[] FULL_TRIPLETS;
    public static final byte[] FULL_TRIPLETS_B;
    public static final char[] LEADING_TRIPLETS;
    public static long MAX_INT_AS_LONG;
    public static int MILLION;
    public static long MIN_INT_AS_LONG;
    public static final char NULL_CHAR;
    public static final java.lang.String SMALLEST_LONG;
    public static long TEN_BILLION_L;
    public static long THOUSAND_L;
    public static final java.lang.String[] sSmallIntStrs;
    public static final java.lang.String[] sSmallIntStrs2;

    static void <clinit>()
    {
        byte[] $r2;
        java.lang.String[] $r3;
        byte $b12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8;
        java.lang.String $r0;
        char $c6, $c7, $c9, $c10, $c11;
        char[] $r1;

        <org.codehaus.jackson.io.NumberOutput: long THOUSAND_L> = 1000L;

        <org.codehaus.jackson.io.NumberOutput: long TEN_BILLION_L> = 10000000000L;

        <org.codehaus.jackson.io.NumberOutput: char NULL_CHAR> = 0;

        <org.codehaus.jackson.io.NumberOutput: long MIN_INT_AS_LONG> = -2147483648L;

        <org.codehaus.jackson.io.NumberOutput: int MILLION> = 1000000;

        <org.codehaus.jackson.io.NumberOutput: long MAX_INT_AS_LONG> = 2147483647L;

        <org.codehaus.jackson.io.NumberOutput: int BILLION> = 1000000000;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(-9223372036854775808L);

        <org.codehaus.jackson.io.NumberOutput: java.lang.String SMALLEST_LONG> = $r0;

        $r1 = newarray (char)[4000];

        <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS> = $r1;

        $r1 = newarray (char)[4000];

        <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS> = $r1;

        $i2 = 0;

        $i3 = 0;

        $i4 = 0;

     label01:
        if $i3 >= 10 goto label10;

        $i5 = $i3 + 48;

        $c6 = (char) $i5;

        if $i3 != 0 goto label02;

        $c7 = 0;

        goto label03;

     label02:
        $c7 = $c6;

     label03:
        $i5 = $i4;

        $i4 = 0;

     label04:
        if $i4 >= 10 goto label09;

        $i8 = $i4 + 48;

        $c9 = (char) $i8;

        if $i3 != 0 goto label05;

        if $i4 != 0 goto label05;

        $c10 = 0;

        goto label06;

     label05:
        $c10 = $c9;

     label06:
        $i8 = 0;

     label07:
        if $i8 >= 10 goto label08;

        $i0 = $i8 + 48;

        $c11 = (char) $i0;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        $r1[$i5] = $c7;

        $i0 = $i5 + 1;

        $r1[$i0] = $c10;

        $i1 = $i5 + 2;

        $r1[$i1] = $c11;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS>;

        $r1[$i5] = $c6;

        $r1[$i0] = $c9;

        $r1[$i1] = $c11;

        $i5 = $i5 + 4;

        $i8 = $i8 + 1;

        goto label07;

     label08:
        $i4 = $i4 + 1;

        goto label04;

     label09:
        $i3 = $i3 + 1;

        $i4 = $i5;

        goto label01;

     label10:
        $r2 = newarray (byte)[4000];

        <org.codehaus.jackson.io.NumberOutput: byte[] FULL_TRIPLETS_B> = $r2;

     label11:
        if $i2 >= 4000 goto label12;

        $r2 = <org.codehaus.jackson.io.NumberOutput: byte[] FULL_TRIPLETS_B>;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS>;

        $c6 = $r1[$i2];

        $b12 = (byte) $c6;

        $r2[$i2] = $b12;

        $i2 = $i2 + 1;

        goto label11;

     label12:
        $r3 = newarray (java.lang.String)[11];

        $r3[0] = "0";

        $r3[1] = "1";

        $r3[2] = "2";

        $r3[3] = "3";

        $r3[4] = "4";

        $r3[5] = "5";

        $r3[6] = "6";

        $r3[7] = "7";

        $r3[8] = "8";

        $r3[9] = "9";

        $r3[10] = "10";

        <org.codehaus.jackson.io.NumberOutput: java.lang.String[] sSmallIntStrs> = $r3;

        $r3 = newarray (java.lang.String)[10];

        $r3[0] = "-1";

        $r3[1] = "-2";

        $r3[2] = "-3";

        $r3[3] = "-4";

        $r3[4] = "-5";

        $r3[5] = "-6";

        $r3[6] = "-7";

        $r3[7] = "-8";

        $r3[8] = "-9";

        $r3[9] = "-10";

        <org.codehaus.jackson.io.NumberOutput: java.lang.String[] sSmallIntStrs2> = $r3;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.io.NumberOutput r0;

        r0 := @this: org.codehaus.jackson.io.NumberOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int calcLongStrLength(long)
    {
        byte $b3;
        int $i2, $i5;
        long $l0, $l1, $l4;

        $l0 := @parameter0: long;

        $l1 = <org.codehaus.jackson.io.NumberOutput: long TEN_BILLION_L>;

        $i2 = 10;

     label1:
        $b3 = $l0 cmp $l1;

        $i5 = (int) $b3;

        if $i5 < 0 goto label3;

        if $i2 != 19 goto label2;

        return $i2;

     label2:
        $i2 = $i2 + 1;

        $l4 = $l1 << 3;

        $l1 = $l1 << 1;

        $l1 = $l1 + $l4;

        goto label1;

     label3:
        return $i2;
    }

    public static int outputFullTriplet(int, byte[], int)
    {
        byte[] $r0, $r1;
        byte $b4;
        int $i0, $i1, $i2, $i3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 = $i0 << 2;

        $i0 = $i1 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: byte[] FULL_TRIPLETS_B>;

        $i3 = $i2 + 1;

        $b4 = $r1[$i2];

        $r0[$i1] = $b4;

        $i1 = $i0 + 1;

        $i2 = $i3 + 1;

        $b4 = $r1[$i3];

        $r0[$i0] = $b4;

        $i0 = $i1 + 1;

        $b4 = $r1[$i2];

        $r0[$i1] = $b4;

        return $i0;
    }

    public static int outputFullTriplet(int, char[], int)
    {
        int $i0, $i1, $i2, $i3;
        char[] $r0, $r1;
        char $c4;

        $i0 := @parameter0: int;

        $r0 := @parameter1: char[];

        $i1 := @parameter2: int;

        $i2 = $i0 << 2;

        $i0 = $i1 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS>;

        $i3 = $i2 + 1;

        $c4 = $r1[$i2];

        $r0[$i1] = $c4;

        $i1 = $i0 + 1;

        $i2 = $i3 + 1;

        $c4 = $r1[$i3];

        $r0[$i0] = $c4;

        $i0 = $i1 + 1;

        $c4 = $r1[$i2];

        $r0[$i1] = $c4;

        return $i0;
    }

    public static int outputInt(int, byte[], int)
    {
        byte[] $r0;
        long $l3;
        byte $b5;
        int $i0, $i1, $i2, $i4, $i6;
        boolean $z0;

        $i1 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i2 := @parameter2: int;

        if $i1 >= 0 goto label02;

        if $i1 != -2147483648 goto label01;

        $l3 = (long) $i1;

        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLong(long,byte[],int)>($l3, $r0, $i2);

        return $i1;

     label01:
        $r0[$i2] = 45;

        $i1 = neg $i1;

        $i2 = $i2 + 1;

     label02:
        $i4 = <org.codehaus.jackson.io.NumberOutput: int MILLION>;

        if $i1 >= $i4 goto label05;

        if $i1 >= 1000 goto label04;

        if $i1 >= 10 goto label03;

        $i4 = $i2 + 1;

        $i1 = $i1 + 48;

        $b5 = (byte) $i1;

        $r0[$i2] = $b5;

        return $i4;

     label03:
        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,byte[],int)>($i1, $r0, $i2);

        return $i1;

     label04:
        $i4 = $i1 / 1000;

        $i6 = $i4 * 1000;

        $i1 = $i1 - $i6;

        $i2 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,byte[],int)>($i4, $r0, $i2);

        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>($i1, $r0, $i2);

        return $i1;

     label05:
        $i4 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        if $i1 < $i4 goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        if $z0 == 0 goto label09;

        $i4 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        $i1 = $i1 - $i4;

        if $i1 < $i4 goto label08;

        $i1 = $i1 - $i4;

        $i4 = $i2 + 1;

        $r0[$i2] = 50;

        goto label10;

     label08:
        $i4 = $i2 + 1;

        $r0[$i2] = 49;

        goto label10;

     label09:
        $i4 = $i2;

     label10:
        $i2 = $i1 / 1000;

        $i6 = $i2 * 1000;

        $i1 = $i1 - $i6;

        $i6 = $i2 / 1000;

        $i0 = $i6 * 1000;

        $i2 = $i2 - $i0;

        if $z0 == 0 goto label11;

        $i4 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>($i6, $r0, $i4);

        goto label12;

     label11:
        $i4 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,byte[],int)>($i6, $r0, $i4);

     label12:
        $i2 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>($i2, $r0, $i4);

        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>($i1, $r0, $i2);

        return $i1;
    }

    public static int outputInt(int, char[], int)
    {
        long $l3;
        char $c5;
        int $i0, $i1, $i2, $i4, $i6;
        char[] $r0;
        boolean $z0;

        $i1 := @parameter0: int;

        $r0 := @parameter1: char[];

        $i2 := @parameter2: int;

        if $i1 >= 0 goto label02;

        if $i1 != -2147483648 goto label01;

        $l3 = (long) $i1;

        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLong(long,char[],int)>($l3, $r0, $i2);

        return $i1;

     label01:
        $r0[$i2] = 45;

        $i1 = neg $i1;

        $i2 = $i2 + 1;

     label02:
        $i4 = <org.codehaus.jackson.io.NumberOutput: int MILLION>;

        if $i1 >= $i4 goto label05;

        if $i1 >= 1000 goto label04;

        if $i1 >= 10 goto label03;

        $i4 = $i2 + 1;

        $i1 = $i1 + 48;

        $c5 = (char) $i1;

        $r0[$i2] = $c5;

        return $i4;

     label03:
        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,char[],int)>($i1, $r0, $i2);

        return $i1;

     label04:
        $i4 = $i1 / 1000;

        $i6 = $i4 * 1000;

        $i1 = $i1 - $i6;

        $i2 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,char[],int)>($i4, $r0, $i2);

        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>($i1, $r0, $i2);

        return $i1;

     label05:
        $i4 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        if $i1 < $i4 goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        if $z0 == 0 goto label09;

        $i4 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        $i1 = $i1 - $i4;

        if $i1 < $i4 goto label08;

        $i1 = $i1 - $i4;

        $i4 = $i2 + 1;

        $r0[$i2] = 50;

        goto label10;

     label08:
        $i4 = $i2 + 1;

        $r0[$i2] = 49;

        goto label10;

     label09:
        $i4 = $i2;

     label10:
        $i2 = $i1 / 1000;

        $i6 = $i2 * 1000;

        $i1 = $i1 - $i6;

        $i6 = $i2 / 1000;

        $i0 = $i6 * 1000;

        $i2 = $i2 - $i0;

        if $z0 == 0 goto label11;

        $i4 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>($i6, $r0, $i4);

        goto label12;

     label11:
        $i4 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,char[],int)>($i6, $r0, $i4);

     label12:
        $i2 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>($i2, $r0, $i4);

        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>($i1, $r0, $i2);

        return $i1;
    }

    public static int outputLeadingTriplet(int, byte[], int)
    {
        byte[] $r0;
        byte $b4;
        int $i0, $i1, $i2;
        char[] $r1;
        char $c3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 = $i0 << 2;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        $i0 = $i2 + 1;

        $c3 = $r1[$i2];

        if $c3 == 0 goto label1;

        $b4 = (byte) $c3;

        $r0[$i1] = $b4;

        $i1 = $i1 + 1;

     label1:
        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        $i2 = $i0 + 1;

        $c3 = $r1[$i0];

        if $c3 == 0 goto label2;

        $b4 = (byte) $c3;

        $r0[$i1] = $b4;

        $i1 = $i1 + 1;

     label2:
        $i0 = $i1 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        $c3 = $r1[$i2];

        $b4 = (byte) $c3;

        $r0[$i1] = $b4;

        return $i0;
    }

    public static int outputLeadingTriplet(int, char[], int)
    {
        int $i0, $i1, $i2;
        char[] $r0, $r1;
        char $c3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: char[];

        $i1 := @parameter2: int;

        $i2 = $i0 << 2;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        $i0 = $i2 + 1;

        $c3 = $r1[$i2];

        if $c3 == 0 goto label1;

        $r0[$i1] = $c3;

        $i1 = $i1 + 1;

     label1:
        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        $i2 = $i0 + 1;

        $c3 = $r1[$i0];

        if $c3 == 0 goto label2;

        $r0[$i1] = $c3;

        $i1 = $i1 + 1;

     label2:
        $i0 = $i1 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        $c3 = $r1[$i2];

        $r0[$i1] = $c3;

        return $i0;
    }

    public static int outputLong(long, byte[], int)
    {
        byte[] $r0;
        long $l0, $l3, $l8;
        char $c7;
        byte $b2;
        int $i1, $i4, $i5, $i6, $i9, $i10;
        java.lang.String $r1;

        $l0 := @parameter0: long;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $b2 = $l0 cmp 0L;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label05;

        $l3 = <org.codehaus.jackson.io.NumberOutput: long MIN_INT_AS_LONG>;

        $b2 = $l0 cmp $l3;

        $i4 = (int) $b2;

        if $i4 <= 0 goto label01;

        $i4 = (int) $l0;

        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputInt(int,byte[],int)>($i4, $r0, $i1);

        return $i1;

     label01:
        $b2 = $l0 cmp -9223372036854775808L;

        if $b2 != 0 goto label04;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        $i4 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i5 = 0;

     label02:
        if $i5 >= $i4 goto label03;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        $c7 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i5);

        $b2 = (byte) $c7;

        $r0[$i1] = $b2;

        $i5 = $i5 + 1;

        $i1 = $i1 + 1;

        goto label02;

     label03:
        return $i1;

     label04:
        $r0[$i1] = 45;

        $l0 = neg $l0;

        $i1 = $i1 + 1;

        goto label06;

     label05:
        $l3 = <org.codehaus.jackson.io.NumberOutput: long MAX_INT_AS_LONG>;

        $b2 = $l0 cmp $l3;

        $i4 = (int) $b2;

        if $i4 > 0 goto label06;

        $i4 = (int) $l0;

        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputInt(int,byte[],int)>($i4, $r0, $i1);

        return $i1;

     label06:
        $i4 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int calcLongStrLength(long)>($l0);

        $i4 = $i4 + $i1;

        $i5 = $i4;

     label07:
        $l3 = <org.codehaus.jackson.io.NumberOutput: long MAX_INT_AS_LONG>;

        $b2 = $l0 cmp $l3;

        $i6 = (int) $b2;

        if $i6 <= 0 goto label08;

        $i6 = -3;

        $i5 = $i5 + $i6;

        $l8 = <org.codehaus.jackson.io.NumberOutput: long THOUSAND_L>;

        $l3 = $l0 / $l8;

        $l8 = $l8 * $l3;

        $l0 = $l0 - $l8;

        $i6 = (int) $l0;

        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>($i6, $r0, $i5);

        $l0 = $l3;

        goto label07;

     label08:
        $i6 = (int) $l0;

     label09:
        if $i6 < 1000 goto label10;

        $i9 = -3;

        $i5 = $i5 + $i9;

        $i9 = $i6 / 1000;

        $i10 = $i9 * 1000;

        $i6 = $i6 - $i10;

        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>($i6, $r0, $i5);

        $i6 = $i9;

        goto label09;

     label10:
        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,byte[],int)>($i6, $r0, $i1);

        return $i4;
    }

    public static int outputLong(long, char[], int)
    {
        long $l0, $l3, $l6;
        byte $b2;
        int $i1, $i4, $i5, $i7, $i8, $i9;
        char[] $r0;
        java.lang.String $r1;

        $l0 := @parameter0: long;

        $r0 := @parameter1: char[];

        $i1 := @parameter2: int;

        $b2 = $l0 cmp 0L;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label3;

        $l3 = <org.codehaus.jackson.io.NumberOutput: long MIN_INT_AS_LONG>;

        $b2 = $l0 cmp $l3;

        $i4 = (int) $b2;

        if $i4 <= 0 goto label1;

        $i4 = (int) $l0;

        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputInt(int,char[],int)>($i4, $r0, $i1);

        return $i1;

     label1:
        $b2 = $l0 cmp -9223372036854775808L;

        if $b2 != 0 goto label2;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        $i4 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>(0, $i4, $r0, $i1);

        $i1 = $i1 + $i4;

        return $i1;

     label2:
        $r0[$i1] = 45;

        $l0 = neg $l0;

        $i1 = $i1 + 1;

        goto label4;

     label3:
        $l3 = <org.codehaus.jackson.io.NumberOutput: long MAX_INT_AS_LONG>;

        $b2 = $l0 cmp $l3;

        $i4 = (int) $b2;

        if $i4 > 0 goto label4;

        $i4 = (int) $l0;

        $i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputInt(int,char[],int)>($i4, $r0, $i1);

        return $i1;

     label4:
        $i4 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int calcLongStrLength(long)>($l0);

        $i4 = $i4 + $i1;

        $i5 = $i4;

     label5:
        $l3 = <org.codehaus.jackson.io.NumberOutput: long MAX_INT_AS_LONG>;

        $b2 = $l0 cmp $l3;

        $i7 = (int) $b2;

        if $i7 <= 0 goto label6;

        $i7 = -3;

        $i5 = $i5 + $i7;

        $l6 = <org.codehaus.jackson.io.NumberOutput: long THOUSAND_L>;

        $l3 = $l0 / $l6;

        $l6 = $l6 * $l3;

        $l0 = $l0 - $l6;

        $i7 = (int) $l0;

        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>($i7, $r0, $i5);

        $l0 = $l3;

        goto label5;

     label6:
        $i7 = (int) $l0;

     label7:
        if $i7 < 1000 goto label8;

        $i8 = -3;

        $i5 = $i5 + $i8;

        $i8 = $i7 / 1000;

        $i9 = $i8 * 1000;

        $i7 = $i7 - $i9;

        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>($i7, $r0, $i5);

        $i7 = $i8;

        goto label7;

     label8:
        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,char[],int)>($i7, $r0, $i1);

        return $i4;
    }

    public static java.lang.String toString(double)
    {
        java.lang.String $r0;
        double $d0;

        $d0 := @parameter0: double;

        $r0 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        return $r0;
    }

    public static java.lang.String toString(int)
    {
        int $i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r0;

        $i1 := @parameter0: int;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String[] sSmallIntStrs>;

        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label2;

        if $i1 < 0 goto label1;

        $r0 = $r1[$i1];

        return $r0;

     label1:
        $i0 = neg $i1;

        $i2 = -1;

        $i2 = $i0 + $i2;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String[] sSmallIntStrs2>;

        $i0 = lengthof $r1;

        if $i2 >= $i0 goto label2;

        $r0 = $r1[$i2];

        return $r0;

     label2:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        return $r0;
    }

    public static java.lang.String toString(long)
    {
        byte $b2;
        int $i0;
        long $l1;
        java.lang.String $r0;

        $l1 := @parameter0: long;

        $b2 = $l1 cmp 2147483647L;

        $i0 = (int) $b2;

        if $i0 > 0 goto label1;

        $b2 = $l1 cmp -2147483648L;

        $i0 = (int) $b2;

        if $i0 < 0 goto label1;

        $i0 = (int) $l1;

        $r0 = staticinvoke <org.codehaus.jackson.io.NumberOutput: java.lang.String toString(int)>($i0);

        return $r0;

     label1:
        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        return $r0;
    }
}
