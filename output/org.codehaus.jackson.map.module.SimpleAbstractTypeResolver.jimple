public class org.codehaus.jackson.map.module.SimpleAbstractTypeResolver extends org.codehaus.jackson.map.AbstractTypeResolver
{
    public final java.util.HashMap _mappings;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.codehaus.jackson.map.module.SimpleAbstractTypeResolver r0;

        r0 := @this: org.codehaus.jackson.map.module.SimpleAbstractTypeResolver;

        specialinvoke r0.<org.codehaus.jackson.map.AbstractTypeResolver: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jackson.map.module.SimpleAbstractTypeResolver: java.util.HashMap _mappings> = $r1;

        return;
    }

    public org.codehaus.jackson.map.module.SimpleAbstractTypeResolver addMapping(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.module.SimpleAbstractTypeResolver r0;
        java.util.HashMap $r4;
        java.lang.IllegalArgumentException $r6;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2, $r3;
        java.lang.String $r7;
        org.codehaus.jackson.map.type.ClassKey $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.module.SimpleAbstractTypeResolver;

        $r2 := @parameter0: java.lang.Class;

        $r3 := @parameter1: java.lang.Class;

        if $r2 == $r3 goto label3;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r2.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.codehaus.jackson.map.module.SimpleAbstractTypeResolver: java.util.HashMap _mappings>;

        $r5 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r5.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>($r2);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r3);

        return r0;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not add mapping from class ");

        $r7 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" since it is not abstract");

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not add mapping from class ");

        $r7 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", as latter is not a subtype of former");

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not add mapping from class to itself");

        throw $r6;
    }

    public org.codehaus.jackson.type.JavaType findTypeMapping(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.module.SimpleAbstractTypeResolver r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.util.HashMap $r2;
        java.lang.Class $r5;
        java.lang.Object $r6;
        org.codehaus.jackson.map.type.ClassKey $r3;
        org.codehaus.jackson.map.DeserializationConfig $r4;

        r0 := @this: org.codehaus.jackson.map.module.SimpleAbstractTypeResolver;

        $r4 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r2 = r0.<org.codehaus.jackson.map.module.SimpleAbstractTypeResolver: java.util.HashMap _mappings>;

        $r3 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r3.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>($r5);

        $r6 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.lang.Class) $r6;

        if $r5 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>($r5);

        return $r1;
    }

    public org.codehaus.jackson.type.JavaType resolveAbstractType(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.DeserializationConfig $r2;
        org.codehaus.jackson.map.module.SimpleAbstractTypeResolver r0;

        r0 := @this: org.codehaus.jackson.map.module.SimpleAbstractTypeResolver;

        $r2 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        return null;
    }
}
