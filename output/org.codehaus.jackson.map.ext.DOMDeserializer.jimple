public abstract class org.codehaus.jackson.map.ext.DOMDeserializer extends org.codehaus.jackson.map.deser.FromStringDeserializer
{
    public static final javax.xml.parsers.DocumentBuilderFactory _parserFactory;

    static void <clinit>()
    {
        javax.xml.parsers.DocumentBuilderFactory $r0;

        $r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        <org.codehaus.jackson.map.ext.DOMDeserializer: javax.xml.parsers.DocumentBuilderFactory _parserFactory> = $r0;

        $r0 = <org.codehaus.jackson.map.ext.DOMDeserializer: javax.xml.parsers.DocumentBuilderFactory _parserFactory>;

        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        return;
    }

    public void <init>(java.lang.Class)
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.ext.DOMDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.ext.DOMDeserializer;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.deser.FromStringDeserializer: void <init>(java.lang.Class)>($r1);

        return;
    }

    public abstract java.lang.Object _deserialize(java.lang.String, org.codehaus.jackson.map.DeserializationContext);

    public final org.w3c.dom.Document parse(java.lang.String)
    {
        org.xml.sax.InputSource $r4;
        java.lang.IllegalArgumentException $r8;
        java.lang.Exception $r7;
        java.io.StringReader $r5;
        org.w3c.dom.Document $r6;
        javax.xml.parsers.DocumentBuilder $r3;
        java.lang.StringBuilder $r9;
        java.lang.String $r1;
        javax.xml.parsers.DocumentBuilderFactory $r2;
        org.codehaus.jackson.map.ext.DOMDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.ext.DOMDeserializer;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.codehaus.jackson.map.ext.DOMDeserializer: javax.xml.parsers.DocumentBuilderFactory _parserFactory>;

     label1:
        $r3 = virtualinvoke $r2.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

     label2:
        $r4 = new org.xml.sax.InputSource;

        $r5 = new java.io.StringReader;

     label3:
        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>($r1);

        specialinvoke $r4.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r5);

        $r6 = virtualinvoke $r3.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r4);

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse JSON String as XML: ");

        $r1 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r7);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
}
