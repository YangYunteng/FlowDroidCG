public class com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode extends java.lang.Object
{
    public final java.util.Map allowedPriorLocks;
    public final java.util.Map disallowedPriorLocks;
    public final java.lang.String lockName;

    public void <init>(java.lang.String)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode r0;
        java.lang.String $r1;
        com.google.common.collect.MapMaker $r2;
        java.util.concurrent.ConcurrentMap $r3;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.google.common.collect.MapMaker;

        specialinvoke $r2.<com.google.common.collect.MapMaker: void <init>()>();

        $r2 = virtualinvoke $r2.<com.google.common.collect.MapMaker: com.google.common.collect.MapMaker weakKeys()>();

        $r3 = virtualinvoke $r2.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeMap()>();

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.util.Map allowedPriorLocks> = $r3;

        $r2 = new com.google.common.collect.MapMaker;

        specialinvoke $r2.<com.google.common.collect.MapMaker: void <init>()>();

        $r2 = virtualinvoke $r2.<com.google.common.collect.MapMaker: com.google.common.collect.MapMaker weakKeys()>();

        $r3 = virtualinvoke $r2.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeMap()>();

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.util.Map disallowedPriorLocks> = $r3;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.lang.String lockName> = $r1;

        return;
    }

    private com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, java.util.Set)
    {
        java.util.Map$Entry $r8;
        java.util.Iterator $r7;
        java.util.Set $r2, $r6;
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode r0, $r1, $r9;
        com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace $r5, $r10, $r11;
        java.lang.StackTraceElement[] $r12;
        java.util.Map $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $r1 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $r2 := @parameter1: java.util.Set;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.util.Map allowedPriorLocks>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace) $r4;

        if $r5 == null goto label2;

        return $r5;

     label2:
        $r3 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.util.Map allowedPriorLocks>;

        $r6 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) $r4;

        $r5 = specialinvoke $r9.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set)>($r1, $r2);

        if $r5 == null goto label3;

        $r10 = new com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace;

        specialinvoke $r10.<com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)>($r9, r0);

        $r4 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace) $r4;

        $r12 = virtualinvoke $r11.<java.lang.IllegalStateException: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke $r10.<java.lang.IllegalStateException: void setStackTrace(java.lang.StackTraceElement[])>($r12);

        virtualinvoke $r10.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>($r5);

        return $r10;

     label4:
        return null;
    }

    public void checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)
    {
        java.util.Set $r9;
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode r0, $r1;
        com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException $r6, $r7;
        com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace $r8;
        com.google.common.util.concurrent.CycleDetectingLockFactory$Policy $r2;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $r2 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory$Policy;

        $r1 := @parameter1: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        if r0 == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = virtualinvoke $r1.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.lang.String getLockName()>();

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object)>($z0, "Attempted to acquire multiple locks with the same rank %s", $r3);

        $r4 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.util.Map allowedPriorLocks>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        return;

     label3:
        $r4 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.util.Map disallowedPriorLocks>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) $r5;

        if $r6 == null goto label4;

        $r7 = new com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException;

        $r8 = virtualinvoke $r6.<com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException: com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace getConflictingStackTrace()>();

        specialinvoke $r7.<com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace,com.google.common.util.concurrent.CycleDetectingLockFactory$1)>($r1, r0, $r8, null);

        interfaceinvoke $r2.<com.google.common.util.concurrent.CycleDetectingLockFactory$Policy: void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)>($r7);

        return;

     label4:
        $r9 = staticinvoke <com.google.common.collect.Sets: java.util.Set newIdentityHashSet()>();

        $r8 = specialinvoke $r1.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set)>(r0, $r9);

        if $r8 != null goto label5;

        $r4 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.util.Map allowedPriorLocks>;

        $r8 = new com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace;

        specialinvoke $r8.<com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)>($r1, r0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

        return;

     label5:
        $r6 = new com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException;

        specialinvoke $r6.<com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException: void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace,com.google.common.util.concurrent.CycleDetectingLockFactory$1)>($r1, r0, $r8, null);

        $r4 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.util.Map disallowedPriorLocks>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

        interfaceinvoke $r2.<com.google.common.util.concurrent.CycleDetectingLockFactory$Policy: void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)>($r6);

        return;
    }

    public void checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy, java.util.List)
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode r0, $r4;
        java.util.List $r2;
        com.google.common.util.concurrent.CycleDetectingLockFactory$Policy $r1;
        int $i0, $i1;
        java.lang.Object $r3;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        $r1 := @parameter0: com.google.common.util.concurrent.CycleDetectingLockFactory$Policy;

        $r2 := @parameter1: java.util.List;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) $r3;

        virtualinvoke r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: void checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)>($r1, $r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String getLockName()
    {
        com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode r0;
        java.lang.String r1;

        r0 := @this: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode;

        r1 = r0.<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode: java.lang.String lockName>;

        return r1;
    }
}
