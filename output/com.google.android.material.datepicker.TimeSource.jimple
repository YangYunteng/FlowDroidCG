public class com.google.android.material.datepicker.TimeSource extends java.lang.Object
{
    public static final com.google.android.material.datepicker.TimeSource SYSTEM_TIME_SOURCE;
    public final java.lang.Long fixedTimeMs;
    public final java.util.TimeZone fixedTimeZone;

    static void <clinit>()
    {
        com.google.android.material.datepicker.TimeSource $r0;

        $r0 = new com.google.android.material.datepicker.TimeSource;

        specialinvoke $r0.<com.google.android.material.datepicker.TimeSource: void <init>(java.lang.Long,java.util.TimeZone)>(null, null);

        <com.google.android.material.datepicker.TimeSource: com.google.android.material.datepicker.TimeSource SYSTEM_TIME_SOURCE> = $r0;

        return;
    }

    public void <init>(java.lang.Long, java.util.TimeZone)
    {
        com.google.android.material.datepicker.TimeSource r0;
        java.lang.Long $r1;
        java.util.TimeZone $r2;

        r0 := @this: com.google.android.material.datepicker.TimeSource;

        $r1 := @parameter0: java.lang.Long;

        $r2 := @parameter1: java.util.TimeZone;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.android.material.datepicker.TimeSource: java.lang.Long fixedTimeMs> = $r1;

        r0.<com.google.android.material.datepicker.TimeSource: java.util.TimeZone fixedTimeZone> = $r2;

        return;
    }

    public static com.google.android.material.datepicker.TimeSource fixed(long)
    {
        com.google.android.material.datepicker.TimeSource $r0;
        long $l0;
        java.lang.Long $r1;

        $l0 := @parameter0: long;

        $r0 = new com.google.android.material.datepicker.TimeSource;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r0.<com.google.android.material.datepicker.TimeSource: void <init>(java.lang.Long,java.util.TimeZone)>($r1, null);

        return $r0;
    }

    public static com.google.android.material.datepicker.TimeSource fixed(long, java.util.TimeZone)
    {
        com.google.android.material.datepicker.TimeSource $r1;
        java.lang.Long $r2;
        java.util.TimeZone $r0;
        long $l0;

        $l0 := @parameter0: long;

        $r0 := @parameter1: java.util.TimeZone;

        $r1 = new com.google.android.material.datepicker.TimeSource;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r1.<com.google.android.material.datepicker.TimeSource: void <init>(java.lang.Long,java.util.TimeZone)>($r2, $r0);

        return $r1;
    }

    public static com.google.android.material.datepicker.TimeSource system()
    {
        com.google.android.material.datepicker.TimeSource r0;

        r0 = <com.google.android.material.datepicker.TimeSource: com.google.android.material.datepicker.TimeSource SYSTEM_TIME_SOURCE>;

        return r0;
    }

    public java.util.Calendar now()
    {
        com.google.android.material.datepicker.TimeSource r0;
        java.util.Calendar $r1;
        java.util.TimeZone $r2;

        r0 := @this: com.google.android.material.datepicker.TimeSource;

        $r2 = r0.<com.google.android.material.datepicker.TimeSource: java.util.TimeZone fixedTimeZone>;

        $r1 = virtualinvoke r0.<com.google.android.material.datepicker.TimeSource: java.util.Calendar now(java.util.TimeZone)>($r2);

        return $r1;
    }

    public java.util.Calendar now(java.util.TimeZone)
    {
        com.google.android.material.datepicker.TimeSource r0;
        java.util.Calendar $r2;
        java.lang.Long $r3;
        java.util.TimeZone $r1;
        long $l0;

        r0 := @this: com.google.android.material.datepicker.TimeSource;

        $r1 := @parameter0: java.util.TimeZone;

        if $r1 != null goto label1;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        goto label2;

     label1:
        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r1);

     label2:
        $r3 = r0.<com.google.android.material.datepicker.TimeSource: java.lang.Long fixedTimeMs>;

        if $r3 == null goto label3;

        $l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        virtualinvoke $r2.<java.util.Calendar: void setTimeInMillis(long)>($l0);

     label3:
        return $r2;
    }
}
