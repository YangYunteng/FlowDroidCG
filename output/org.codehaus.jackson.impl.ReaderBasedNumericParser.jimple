public abstract class org.codehaus.jackson.impl.ReaderBasedNumericParser extends org.codehaus.jackson.impl.ReaderBasedParserBase
{

    public void <init>(org.codehaus.jackson.io.IOContext, int, java.io.Reader)
    {
        org.codehaus.jackson.io.IOContext $r1;
        int $i0;
        java.io.Reader $r2;
        org.codehaus.jackson.impl.ReaderBasedNumericParser r0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedNumericParser;

        $r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.io.Reader;

        specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: void <init>(org.codehaus.jackson.io.IOContext,int,java.io.Reader)>($r1, $i0, $r2);

        return;
    }

    private final char _verifyNoLeadingZeroes()
    {
        int $i0, $i1;
        char[] $r1;
        char $c2;
        org.codehaus.jackson.JsonParser$Feature $r2;
        org.codehaus.jackson.impl.ReaderBasedNumericParser r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedNumericParser;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i0 < $i1 goto label01;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean loadMore()>();

        if $z0 != 0 goto label01;

        return 48;

     label01:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $c2 = $r1[$i0];

        $i0 = (int) $c2;

        if $i0 < 48 goto label09;

        $i0 = (int) $c2;

        if $i0 <= 57 goto label02;

        return 48;

     label02:
        $r2 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_NUMERIC_LEADING_ZEROS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r2);

        if $z0 != 0 goto label03;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void reportInvalidNumber(java.lang.String)>("Leading zeroes not allowed");

     label03:
        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i0 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i0;

        $i0 = (int) $c2;

        if $i0 != 48 goto label08;

     label04:
        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i1 < $i0 goto label05;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean loadMore()>();

        if $z0 == 0 goto label10;

     label05:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $c2 = $r1[$i0];

        $i1 = (int) $c2;

        if $i1 < 48 goto label07;

        $i1 = (int) $c2;

        if $i1 <= 57 goto label06;

        return 48;

     label06:
        $i0 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i0;

        $i0 = (int) $c2;

        if $i0 == 48 goto label04;

        return $c2;

     label07:
        return 48;

     label08:
        return $c2;

     label09:
        return 48;

     label10:
        return $c2;
    }

    private final org.codehaus.jackson.JsonToken parseNumberText2(boolean)
    {
        org.codehaus.jackson.JsonToken $r6;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        java.lang.String $r5;
        org.codehaus.jackson.util.TextBuffer $r1;
        boolean $z0, $z1, $z2;
        char $c4;
        org.codehaus.jackson.impl.ReaderBasedNumericParser r0;
        char[] $r2, $r3;
        java.lang.StringBuilder $r4, $r7;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedNumericParser;

        $z0 := @parameter0: boolean;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        $i1 = 0;

        if $z0 == 0 goto label01;

        $r2[0] = 45;

        $i0 = 1;

        goto label02;

     label01:
        $i0 = 0;

     label02:
        $i2 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i3 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i2 >= $i3 goto label03;

        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i3;

        $c4 = $r3[$i2];

        goto label04;

     label03:
        $c4 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char getNextChar(java.lang.String)>("No digit following minus sign");

     label04:
        if $c4 != 48 goto label05;

        $c4 = specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: char _verifyNoLeadingZeroes()>();

     label05:
        $i2 = 0;

     label06:
        if $c4 < 48 goto label09;

        if $c4 > 57 goto label09;

        $i2 = $i2 + 1;

        $i3 = lengthof $r2;

        if $i0 < $i3 goto label07;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        $i0 = 0;

     label07:
        $i3 = $i0 + 1;

        $r2[$i0] = $c4;

        $i5 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i5 < $i0 goto label08;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean loadMore()>();

        if $z1 != 0 goto label08;

        $i0 = $i3;

        $c4 = 0;

        $z1 = 1;

        goto label10;

     label08:
        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i5 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i0 = $i5 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i0;

        $c4 = $r3[$i5];

        $i0 = $i3;

        goto label06;

     label09:
        $z1 = 0;

     label10:
        if $i2 != 0 goto label11;

        $r7 = new java.lang.StringBuilder;

        $r4 = $r7;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing integer part (next char ");

        $r5 = staticinvoke <org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.String _getCharDesc(int)>($c4);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void reportInvalidNumber(java.lang.String)>($r5);

     label11:
        if $c4 != 46 goto label18;

        $i5 = $i0 + 1;

        $r2[$i0] = $c4;

        $i3 = 0;

     label12:
        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i6 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i0 < $i6 goto label13;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean loadMore()>();

        if $z2 != 0 goto label13;

        $z1 = 1;

        goto label16;

     label13:
        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i6 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i6;

        $c4 = $r3[$i0];

        if $c4 < 48 goto label16;

        if $c4 <= 57 goto label14;

        goto label16;

     label14:
        $i3 = $i3 + 1;

        $i0 = lengthof $r2;

        if $i5 < $i0 goto label15;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        $i5 = 0;

     label15:
        $r2[$i5] = $c4;

        $i5 = $i5 + 1;

        goto label12;

     label16:
        if $i3 != 0 goto label17;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void reportUnexpectedNumberChar(int,java.lang.String)>($c4, "Decimal point not followed by a digit");

     label17:
        $i0 = $i5;

        goto label19;

     label18:
        $i3 = 0;

     label19:
        if $c4 == 101 goto label20;

        if $c4 != 69 goto label34;

     label20:
        $i1 = lengthof $r2;

        if $i0 < $i1 goto label21;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        $i0 = 0;

     label21:
        $i5 = $i0 + 1;

        $r2[$i0] = $c4;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i1 >= $i0 goto label22;

        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i0 = $i1 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i0;

        $c4 = $r3[$i1];

        goto label23;

     label22:
        $c4 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char getNextChar(java.lang.String)>("expected a digit for number exponent");

     label23:
        $i1 = (int) $c4;

        if $i1 == 45 goto label25;

        $i1 = (int) $c4;

        if $i1 != 43 goto label24;

        goto label25;

     label24:
        $i1 = 0;

        goto label29;

     label25:
        $i1 = lengthof $r2;

        if $i5 < $i1 goto label26;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        $i5 = 0;

     label26:
        $i1 = $i5 + 1;

        $r2[$i5] = $c4;

        $i5 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i5 >= $i0 goto label27;

        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i0 = $i5 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i0;

        $c4 = $r3[$i5];

        goto label28;

     label27:
        $c4 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char getNextChar(java.lang.String)>("expected a digit for number exponent");

     label28:
        $i5 = $i1;

        goto label24;

     label29:
        $i0 = (int) $c4;

        if $i0 > 57 goto label32;

        $i0 = (int) $c4;

        if $i0 < 48 goto label32;

        $i1 = $i1 + 1;

        $i0 = lengthof $r2;

        if $i5 < $i0 goto label30;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        $i5 = 0;

     label30:
        $i0 = $i5 + 1;

        $r2[$i5] = $c4;

        $i5 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i6 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i5 < $i6 goto label31;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean loadMore()>();

        if $z2 != 0 goto label31;

        $z1 = 1;

        goto label33;

     label31:
        $r3 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i5 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i6 = $i5 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i6;

        $c4 = $r3[$i5];

        $i5 = $i0;

        goto label29;

     label32:
        $i0 = $i5;

     label33:
        if $i1 != 0 goto label34;

        $i5 = (int) $c4;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void reportUnexpectedNumberChar(int,java.lang.String)>($i5, "Exponent indicator not followed by a digit");

     label34:
        if $z1 != 0 goto label35;

        $i5 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i5 = $i5 - 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i5;

     label35:
        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: void setCurrentLength(int)>($i0);

        $r6 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.JsonToken reset(boolean,int,int,int)>($z0, $i2, $i3, $i1);

        return $r6;
    }

    public org.codehaus.jackson.JsonToken _handleInvalidNumberStart(int, boolean)
    {
        org.codehaus.jackson.JsonToken $r4;
        org.codehaus.jackson.impl.ReaderBasedNumericParser r0;
        int $i0, $i1;
        char[] $r1;
        java.lang.StringBuilder $r5;
        java.lang.String $r2;
        org.codehaus.jackson.JsonParser$Feature $r3;
        boolean $z0, $z1;
        double $d0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedNumericParser;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        if $i0 != 73 goto label13;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i0 < $i1 goto label01;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean loadMore()>();

        if $z1 != 0 goto label01;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportInvalidEOFInValue()>();

     label01:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i1;

        $i0 = $r1[$i0];

        $d0 = #-Infinity;

        if $i0 != 78 goto label07;

        if $z0 == 0 goto label02;

        $r2 = "-INF";

        goto label03;

     label02:
        $r2 = "+INF";

     label03:
        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean _matchToken(java.lang.String,int)>($r2, 3);

        if $z1 == 0 goto label13;

        $r3 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_NON_NUMERIC_NUMBERS>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r3);

        if $z1 == 0 goto label06;

        if $z0 == 0 goto label04;

        goto label05;

     label04:
        $d0 = #Infinity;

     label05:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.JsonToken resetAsNaN(java.lang.String,double)>($r2, $d0);

        return $r4;

     label06:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-standard token \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportError(java.lang.String)>($r2);

        goto label13;

     label07:
        if $i0 != 110 goto label13;

        if $z0 == 0 goto label08;

        $r2 = "-Infinity";

        goto label09;

     label08:
        $r2 = "+Infinity";

     label09:
        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: boolean _matchToken(java.lang.String,int)>($r2, 3);

        if $z1 == 0 goto label13;

        $r3 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_NON_NUMERIC_NUMBERS>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r3);

        if $z1 == 0 goto label12;

        if $z0 == 0 goto label10;

        goto label11;

     label10:
        $d0 = #Infinity;

     label11:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.JsonToken resetAsNaN(java.lang.String,double)>($r2, $d0);

        return $r4;

     label12:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-standard token \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportError(java.lang.String)>($r2);

     label13:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void reportUnexpectedNumberChar(int,java.lang.String)>($i0, "expected digit (0-9) to follow minus sign, for valid numeric value");

        return null;
    }

    public final org.codehaus.jackson.JsonToken parseNumberText(int)
    {
        org.codehaus.jackson.JsonToken $r2;
        char $c7;
        org.codehaus.jackson.impl.ReaderBasedNumericParser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        char[] $r1;
        org.codehaus.jackson.util.TextBuffer $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.ReaderBasedNumericParser;

        $i1 := @parameter0: int;

        $i2 = 0;

        $i3 = 1;

        if $i1 != 45 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $i4 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i5 = -1;

        $i5 = $i4 + $i5;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $z0 == 0 goto label06;

        if $i4 < $i0 goto label03;

        goto label25;

     label03:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i6 = $i4 + 1;

        $i1 = $r1[$i4];

        if $i1 > 57 goto label05;

        if $i1 >= 48 goto label04;

        goto label05;

     label04:
        $i4 = $i6;

        goto label06;

     label05:
        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i6;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.JsonToken _handleInvalidNumberStart(int,boolean)>($i1, 1);

        return $r2;

     label06:
        if $i1 != 48 goto label07;

        goto label25;

     label07:
        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd>;

        if $i4 < $i1 goto label08;

        goto label25;

     label08:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i1 = $i4 + 1;

        $c7 = $r1[$i4];

        $i4 = (int) $c7;

        if $i4 < 48 goto label10;

        $i4 = (int) $c7;

        if $i4 <= 57 goto label09;

        goto label10;

     label09:
        $i3 = $i3 + 1;

        $i4 = $i1;

        goto label07;

     label10:
        $i4 = (int) $c7;

        if $i4 != 46 goto label16;

        $i4 = 0;

     label11:
        if $i1 < $i0 goto label12;

        goto label25;

     label12:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i6 = $i1 + 1;

        $c7 = $r1[$i1];

        $i1 = (int) $c7;

        if $i1 < 48 goto label14;

        $i1 = (int) $c7;

        if $i1 <= 57 goto label13;

        goto label14;

     label13:
        $i4 = $i4 + 1;

        $i1 = $i6;

        goto label11;

     label14:
        if $i4 != 0 goto label15;

        $i1 = (int) $c7;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void reportUnexpectedNumberChar(int,java.lang.String)>($i1, "Decimal point not followed by a digit");

     label15:
        $i1 = $i6;

        goto label17;

     label16:
        $i4 = 0;

     label17:
        $i6 = (int) $c7;

        if $i6 == 101 goto label18;

        $i6 = (int) $c7;

        if $i6 != 69 goto label29;

     label18:
        if $i1 < $i0 goto label19;

        goto label25;

     label19:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i6 = $i1 + 1;

        $c7 = $r1[$i1];

        $i1 = (int) $c7;

        if $i1 == 45 goto label21;

        $i1 = (int) $c7;

        if $i1 != 43 goto label20;

        goto label21;

     label20:
        $i1 = $i6;

        goto label24;

     label21:
        if $i6 < $i0 goto label22;

        goto label25;

     label22:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i8 = $i6 + 1;

        $c7 = $r1[$i6];

     label23:
        $i1 = $i8;

     label24:
        $i6 = (int) $c7;

        if $i6 > 57 goto label28;

        $i6 = (int) $c7;

        if $i6 < 48 goto label28;

        $i2 = $i2 + 1;

        if $i1 < $i0 goto label27;

     label25:
        if $z0 == 0 goto label26;

        $i5 = $i5 + 1;

     label26:
        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i5;

        $r2 = specialinvoke r0.<org.codehaus.jackson.impl.ReaderBasedNumericParser: org.codehaus.jackson.JsonToken parseNumberText2(boolean)>($z0);

        return $r2;

     label27:
        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        $i8 = $i1 + 1;

        $c7 = $r1[$i1];

        goto label23;

     label28:
        if $i2 != 0 goto label29;

        $i0 = (int) $c7;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void reportUnexpectedNumberChar(int,java.lang.String)>($i0, "Exponent indicator not followed by a digit");

     label29:
        $i0 = -1;

        $i1 = $i1 + $i0;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = $i1;

        $i1 = $i1 - $i5;

        $r3 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r1 = r0.<org.codehaus.jackson.impl.ReaderBasedParserBase: char[] _inputBuffer>;

        virtualinvoke $r3.<org.codehaus.jackson.util.TextBuffer: void resetWithShared(char[],int,int)>($r1, $i5, $i1);

        $r2 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.JsonToken reset(boolean,int,int,int)>($z0, $i3, $i4, $i2);

        return $r2;
    }
}
