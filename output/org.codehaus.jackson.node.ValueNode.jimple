public abstract class org.codehaus.jackson.node.ValueNode extends org.codehaus.jackson.node.BaseJsonNode
{

    public void <init>()
    {
        org.codehaus.jackson.node.ValueNode r0;

        r0 := @this: org.codehaus.jackson.node.ValueNode;

        specialinvoke r0.<org.codehaus.jackson.node.BaseJsonNode: void <init>()>();

        return;
    }

    public abstract org.codehaus.jackson.JsonToken asToken();

    public boolean isValueNode()
    {
        org.codehaus.jackson.node.ValueNode r0;

        r0 := @this: org.codehaus.jackson.node.ValueNode;

        return 1;
    }

    public org.codehaus.jackson.JsonNode path(int)
    {
        int $i0;
        org.codehaus.jackson.node.MissingNode $r1;
        org.codehaus.jackson.node.ValueNode r0;

        r0 := @this: org.codehaus.jackson.node.ValueNode;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.codehaus.jackson.node.MissingNode: org.codehaus.jackson.node.MissingNode getInstance()>();

        return $r1;
    }

    public org.codehaus.jackson.JsonNode path(java.lang.String)
    {
        java.lang.String $r2;
        org.codehaus.jackson.node.MissingNode $r1;
        org.codehaus.jackson.node.ValueNode r0;

        r0 := @this: org.codehaus.jackson.node.ValueNode;

        $r2 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.codehaus.jackson.node.MissingNode: org.codehaus.jackson.node.MissingNode getInstance()>();

        return $r1;
    }

    public void serializeWithType(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.node.ValueNode r0;
        org.codehaus.jackson.map.SerializerProvider $r2;

        r0 := @this: org.codehaus.jackson.node.ValueNode;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke $r3.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r0, $r1);

        virtualinvoke r0.<org.codehaus.jackson.node.BaseJsonNode: void serialize(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2);

        virtualinvoke $r3.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r0, $r1);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.codehaus.jackson.node.ValueNode r0;

        r0 := @this: org.codehaus.jackson.node.ValueNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: java.lang.String getValueAsText()>();

        return $r1;
    }
}
