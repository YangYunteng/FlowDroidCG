public final class com.google.common.collect.ImmutableRangeMap$Builder extends java.lang.Object
{
    public final java.util.List entries;

    public void <init>()
    {
        com.google.common.collect.ImmutableRangeMap$Builder r0;
        java.util.ArrayList $r1;

        r0 := @this: com.google.common.collect.ImmutableRangeMap$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.common.collect.ImmutableRangeMap$Builder: java.util.List entries> = $r1;

        return;
    }

    public com.google.common.collect.ImmutableRangeMap build()
    {
        com.google.common.collect.ImmutableRangeMap $r17;
        com.google.common.collect.ImmutableList $r12, $r13;
        int $i0, $i1;
        java.lang.String $r11;
        boolean $z0;
        java.util.Map$Entry $r6;
        com.google.common.collect.Range $r7, $r8, $r9;
        java.lang.IllegalArgumentException $r16;
        com.google.common.collect.ImmutableRangeMap$Builder r0;
        java.util.List $r1;
        com.google.common.collect.Ordering $r2;
        java.lang.Object $r5;
        java.lang.StringBuilder $r10, $r15;
        com.google.common.collect.ImmutableList$Builder $r3, $r4, $r14;

        r0 := @this: com.google.common.collect.ImmutableRangeMap$Builder;

        $r1 = r0.<com.google.common.collect.ImmutableRangeMap$Builder: java.util.List entries>;

        $r2 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Ordering rangeLexOrdering()>();

        $r2 = virtualinvoke $r2.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onKeys()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r2);

        $r4 = new com.google.common.collect.ImmutableList$Builder;

        $r3 = $r4;

        $r1 = r0.<com.google.common.collect.ImmutableRangeMap$Builder: java.util.List entries>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        specialinvoke $r4.<com.google.common.collect.ImmutableList$Builder: void <init>(int)>($i0);

        $r14 = new com.google.common.collect.ImmutableList$Builder;

        $r4 = $r14;

        $r1 = r0.<com.google.common.collect.ImmutableRangeMap$Builder: java.util.List entries>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        specialinvoke $r14.<com.google.common.collect.ImmutableList$Builder: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $r1 = r0.<com.google.common.collect.ImmutableRangeMap$Builder: java.util.List entries>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label4;

        $r1 = r0.<com.google.common.collect.ImmutableRangeMap$Builder: java.util.List entries>;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (com.google.common.collect.Range) $r5;

        if $i0 <= 0 goto label3;

        $r1 = r0.<com.google.common.collect.ImmutableRangeMap$Builder: java.util.List entries>;

        $i1 = -1;

        $i1 = $i0 + $i1;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (com.google.common.collect.Range) $r5;

        $z0 = virtualinvoke $r7.<com.google.common.collect.Range: boolean isConnected(com.google.common.collect.Range)>($r8);

        if $z0 == 0 goto label3;

        $r9 = virtualinvoke $r7.<com.google.common.collect.Range: com.google.common.collect.Range intersection(com.google.common.collect.Range)>($r8);

        $z0 = virtualinvoke $r9.<com.google.common.collect.Range: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        $r10 = $r15;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overlapping ranges: range ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" overlaps with entry ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r16;

     label3:
        virtualinvoke $r3.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r7);

        $r1 = r0.<com.google.common.collect.ImmutableRangeMap$Builder: java.util.List entries>;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r4.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r5);

        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r17 = new com.google.common.collect.ImmutableRangeMap;

        $r12 = virtualinvoke $r3.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        $r13 = virtualinvoke $r4.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        specialinvoke $r17.<com.google.common.collect.ImmutableRangeMap: void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableList)>($r12, $r13);

        return $r17;
    }

    public com.google.common.collect.ImmutableRangeMap$Builder combine(com.google.common.collect.ImmutableRangeMap$Builder)
    {
        com.google.common.collect.ImmutableRangeMap$Builder r0, $r2;
        java.util.List $r1, $r3;

        r0 := @this: com.google.common.collect.ImmutableRangeMap$Builder;

        $r2 := @parameter0: com.google.common.collect.ImmutableRangeMap$Builder;

        $r1 = r0.<com.google.common.collect.ImmutableRangeMap$Builder: java.util.List entries>;

        $r3 = $r2.<com.google.common.collect.ImmutableRangeMap$Builder: java.util.List entries>;

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return r0;
    }

    public com.google.common.collect.ImmutableRangeMap$Builder put(com.google.common.collect.Range, java.lang.Object)
    {
        com.google.common.collect.ImmutableRangeMap$Builder r0;
        java.util.List $r3;
        java.util.Map$Entry $r4;
        com.google.common.collect.Range $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableRangeMap$Builder;

        $r2 := @parameter0: com.google.common.collect.Range;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $z0 = virtualinvoke $r2.<com.google.common.collect.Range: boolean isEmpty()>();

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Range must not be empty, but was %s", $r2);

        $r3 = r0.<com.google.common.collect.ImmutableRangeMap$Builder: java.util.List entries>;

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>($r2, $r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return r0;
    }

    public com.google.common.collect.ImmutableRangeMap$Builder putAll(com.google.common.collect.RangeMap)
    {
        java.util.Map$Entry $r6;
        java.util.Iterator $r4;
        com.google.common.collect.Range $r7;
        java.util.Set $r3;
        com.google.common.collect.ImmutableRangeMap$Builder r0;
        java.util.Map $r2;
        com.google.common.collect.RangeMap $r1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableRangeMap$Builder;

        $r1 := @parameter0: com.google.common.collect.RangeMap;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.RangeMap: java.util.Map asMapOfRanges()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (com.google.common.collect.Range) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<com.google.common.collect.ImmutableRangeMap$Builder: com.google.common.collect.ImmutableRangeMap$Builder put(com.google.common.collect.Range,java.lang.Object)>($r7, $r5);

        goto label1;

     label2:
        return r0;
    }
}
