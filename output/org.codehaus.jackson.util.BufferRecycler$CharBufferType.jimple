public final enum class org.codehaus.jackson.util.BufferRecycler$CharBufferType extends java.lang.Enum
{
    public static final org.codehaus.jackson.util.BufferRecycler$CharBufferType[] $VALUES;
    public static final enum org.codehaus.jackson.util.BufferRecycler$CharBufferType CONCAT_BUFFER;
    public static final enum org.codehaus.jackson.util.BufferRecycler$CharBufferType NAME_COPY_BUFFER;
    public static final enum org.codehaus.jackson.util.BufferRecycler$CharBufferType TEXT_BUFFER;
    public static final enum org.codehaus.jackson.util.BufferRecycler$CharBufferType TOKEN_BUFFER;
    public final int size;

    static void <clinit>()
    {
        org.codehaus.jackson.util.BufferRecycler$CharBufferType[] $r1;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType $r0;

        $r0 = new org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        specialinvoke $r0.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: void <init>(java.lang.String,int,int)>("TOKEN_BUFFER", 0, 2000);

        <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TOKEN_BUFFER> = $r0;

        $r0 = new org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        specialinvoke $r0.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: void <init>(java.lang.String,int,int)>("CONCAT_BUFFER", 1, 2000);

        <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType CONCAT_BUFFER> = $r0;

        $r0 = new org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        specialinvoke $r0.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: void <init>(java.lang.String,int,int)>("TEXT_BUFFER", 2, 200);

        <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TEXT_BUFFER> = $r0;

        $r0 = new org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        specialinvoke $r0.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: void <init>(java.lang.String,int,int)>("NAME_COPY_BUFFER", 3, 200);

        <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType NAME_COPY_BUFFER> = $r0;

        $r1 = newarray (org.codehaus.jackson.util.BufferRecycler$CharBufferType)[4];

        $r0 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TOKEN_BUFFER>;

        $r1[0] = $r0;

        $r0 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType CONCAT_BUFFER>;

        $r1[1] = $r0;

        $r0 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TEXT_BUFFER>;

        $r1[2] = $r0;

        $r0 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType NAME_COPY_BUFFER>;

        $r1[3] = $r0;

        <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType[] $VALUES> = $r1;

        return;
    }

    public void <init>(java.lang.String, int, int)
    {
        int $i0, $i1;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        r0.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: int size> = $i1;

        return;
    }

    public static int access$100(org.codehaus.jackson.util.BufferRecycler$CharBufferType)
    {
        int i0;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType $r0;

        $r0 := @parameter0: org.codehaus.jackson.util.BufferRecycler$CharBufferType;

        i0 = $r0.<org.codehaus.jackson.util.BufferRecycler$CharBufferType: int size>;

        return i0;
    }

    public static org.codehaus.jackson.util.BufferRecycler$CharBufferType valueOf(java.lang.String)
    {
        java.lang.String $r1;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType $r2;
        java.lang.Enum $r0;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/codehaus/jackson/util/BufferRecycler$CharBufferType;", $r1);

        $r2 = (org.codehaus.jackson.util.BufferRecycler$CharBufferType) $r0;

        return $r2;
    }

    public static org.codehaus.jackson.util.BufferRecycler$CharBufferType[] values()
    {
        org.codehaus.jackson.util.BufferRecycler$CharBufferType[] $r1;
        java.lang.Object $r0;

        $r1 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.codehaus.jackson.util.BufferRecycler$CharBufferType[]) $r0;

        return $r1;
    }
}
