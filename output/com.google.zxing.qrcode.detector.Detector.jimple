public class com.google.zxing.qrcode.detector.Detector extends java.lang.Object
{
    public final com.google.zxing.common.BitMatrix image;
    public com.google.zxing.ResultPointCallback resultPointCallback;

    public void <init>(com.google.zxing.common.BitMatrix)
    {
        com.google.zxing.qrcode.detector.Detector r0;
        com.google.zxing.common.BitMatrix $r1;

        r0 := @this: com.google.zxing.qrcode.detector.Detector;

        $r1 := @parameter0: com.google.zxing.common.BitMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image> = $r1;

        return;
    }

    private float calculateModuleSizeOneWay(com.google.zxing.ResultPoint, com.google.zxing.ResultPoint)
    {
        com.google.zxing.qrcode.detector.Detector r0;
        com.google.zxing.ResultPoint $r1, $r2;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.google.zxing.qrcode.detector.Detector;

        $r1 := @parameter0: com.google.zxing.ResultPoint;

        $r2 := @parameter1: com.google.zxing.ResultPoint;

        $f0 = virtualinvoke $r1.<com.google.zxing.ResultPoint: float getX()>();

        $i0 = (int) $f0;

        $f0 = virtualinvoke $r1.<com.google.zxing.ResultPoint: float getY()>();

        $i1 = (int) $f0;

        $f0 = virtualinvoke $r2.<com.google.zxing.ResultPoint: float getX()>();

        $i2 = (int) $f0;

        $f0 = virtualinvoke $r2.<com.google.zxing.ResultPoint: float getY()>();

        $i3 = (int) $f0;

        $f0 = specialinvoke r0.<com.google.zxing.qrcode.detector.Detector: float sizeOfBlackWhiteBlackRunBothWays(int,int,int,int)>($i0, $i1, $i2, $i3);

        $f1 = virtualinvoke $r2.<com.google.zxing.ResultPoint: float getX()>();

        $i0 = (int) $f1;

        $f1 = virtualinvoke $r2.<com.google.zxing.ResultPoint: float getY()>();

        $i1 = (int) $f1;

        $f1 = virtualinvoke $r1.<com.google.zxing.ResultPoint: float getX()>();

        $i2 = (int) $f1;

        $f1 = virtualinvoke $r1.<com.google.zxing.ResultPoint: float getY()>();

        $i3 = (int) $f1;

        $f1 = specialinvoke r0.<com.google.zxing.qrcode.detector.Detector: float sizeOfBlackWhiteBlackRunBothWays(int,int,int,int)>($i0, $i1, $i2, $i3);

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z0 == 0 goto label1;

        $f0 = $f1 / 7.0F;

        return $f0;

     label1:
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if $z0 == 0 goto label2;

        $f0 = $f0 / 7.0F;

        return $f0;

     label2:
        $f0 = $f0 + $f1;

        $f0 = $f0 / 14.0F;

        return $f0;
    }

    public static int computeDimension(com.google.zxing.ResultPoint, com.google.zxing.ResultPoint, com.google.zxing.ResultPoint, float)
    {
        com.google.zxing.ResultPoint $r0, $r1, $r2;
        com.google.zxing.NotFoundException $r3;
        int $i0, $i1;
        float $f0, $f1;

        $r0 := @parameter0: com.google.zxing.ResultPoint;

        $r1 := @parameter1: com.google.zxing.ResultPoint;

        $r2 := @parameter2: com.google.zxing.ResultPoint;

        $f0 := @parameter3: float;

        $f1 = staticinvoke <com.google.zxing.ResultPoint: float distance(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint)>($r0, $r1);

        $f1 = $f1 / $f0;

        $i0 = staticinvoke <com.google.zxing.common.detector.MathUtils: int round(float)>($f1);

        $f1 = staticinvoke <com.google.zxing.ResultPoint: float distance(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint)>($r0, $r2);

        $f0 = $f1 / $f0;

        $i1 = staticinvoke <com.google.zxing.common.detector.MathUtils: int round(float)>($f0);

        $i0 = $i0 + $i1;

        $i0 = $i0 >> 1;

        $i0 = $i0 + 7;

        $i1 = $i0 & 3;

        if $i1 == 0 goto label3;

        if $i1 == 2 goto label2;

        if $i1 == 3 goto label1;

        return $i0;

     label1:
        $r3 = staticinvoke <com.google.zxing.NotFoundException: com.google.zxing.NotFoundException getNotFoundInstance()>();

        throw $r3;

     label2:
        $i1 = -1;

        $i0 = $i0 + $i1;

        return $i0;

     label3:
        $i0 = $i0 + 1;

        return $i0;
    }

    public static com.google.zxing.common.PerspectiveTransform createTransform(com.google.zxing.ResultPoint, com.google.zxing.ResultPoint, com.google.zxing.ResultPoint, com.google.zxing.ResultPoint, int)
    {
        com.google.zxing.ResultPoint $r0, $r1, $r2, $r3;
        com.google.zxing.common.PerspectiveTransform $r4;
        int $i0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;

        $r0 := @parameter0: com.google.zxing.ResultPoint;

        $r1 := @parameter1: com.google.zxing.ResultPoint;

        $r2 := @parameter2: com.google.zxing.ResultPoint;

        $r3 := @parameter3: com.google.zxing.ResultPoint;

        $i0 := @parameter4: int;

        $f0 = (float) $i0;

        $f0 = $f0 - 3.5F;

        if $r3 == null goto label1;

        $f1 = virtualinvoke $r3.<com.google.zxing.ResultPoint: float getX()>();

        $f2 = virtualinvoke $r3.<com.google.zxing.ResultPoint: float getY()>();

        $f3 = $f0 - 3.0F;

        goto label2;

     label1:
        $f1 = virtualinvoke $r1.<com.google.zxing.ResultPoint: float getX()>();

        $f2 = virtualinvoke $r0.<com.google.zxing.ResultPoint: float getX()>();

        $f1 = $f1 - $f2;

        $f2 = virtualinvoke $r2.<com.google.zxing.ResultPoint: float getX()>();

        $f1 = $f1 + $f2;

        $f2 = virtualinvoke $r1.<com.google.zxing.ResultPoint: float getY()>();

        $f3 = virtualinvoke $r0.<com.google.zxing.ResultPoint: float getY()>();

        $f2 = $f2 - $f3;

        $f3 = virtualinvoke $r2.<com.google.zxing.ResultPoint: float getY()>();

        $f2 = $f2 + $f3;

        $f3 = $f0;

     label2:
        $f4 = virtualinvoke $r0.<com.google.zxing.ResultPoint: float getX()>();

        $f5 = virtualinvoke $r0.<com.google.zxing.ResultPoint: float getY()>();

        $f6 = virtualinvoke $r1.<com.google.zxing.ResultPoint: float getX()>();

        $f7 = virtualinvoke $r1.<com.google.zxing.ResultPoint: float getY()>();

        $f8 = virtualinvoke $r2.<com.google.zxing.ResultPoint: float getX()>();

        $f9 = virtualinvoke $r2.<com.google.zxing.ResultPoint: float getY()>();

        $r4 = staticinvoke <com.google.zxing.common.PerspectiveTransform: com.google.zxing.common.PerspectiveTransform quadrilateralToQuadrilateral(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)>(3.5F, 3.5F, $f0, 3.5F, $f3, $f3, 3.5F, $f0, $f4, $f5, $f6, $f7, $f1, $f2, $f8, $f9);

        return $r4;
    }

    public static com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix, com.google.zxing.common.PerspectiveTransform, int)
    {
        com.google.zxing.common.GridSampler $r2;
        com.google.zxing.common.PerspectiveTransform $r0;
        int $i0;
        com.google.zxing.common.BitMatrix $r1;

        $r1 := @parameter0: com.google.zxing.common.BitMatrix;

        $r0 := @parameter1: com.google.zxing.common.PerspectiveTransform;

        $i0 := @parameter2: int;

        $r2 = staticinvoke <com.google.zxing.common.GridSampler: com.google.zxing.common.GridSampler getInstance()>();

        $r1 = virtualinvoke $r2.<com.google.zxing.common.GridSampler: com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,com.google.zxing.common.PerspectiveTransform)>($r1, $i0, $i0, $r0);

        return $r1;
    }

    private float sizeOfBlackWhiteBlackRun(int, int, int, int)
    {
        com.google.zxing.qrcode.detector.Detector r0, $r1;
        byte $b8, $b9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13;
        boolean $z0, $z1, $z2;
        float $f0;
        com.google.zxing.common.BitMatrix $r2;

        r0 := @this: com.google.zxing.qrcode.detector.Detector;

        $i0 := @parameter0: int;

        $i3 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i4 = $i2 - $i3;

        $i4 = staticinvoke <java.lang.Math: int abs(int)>($i4);

        $i5 = $i1 - $i0;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        if $i4 <= $i5 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        $i4 = $i3;

        $i3 = $i1;

        $i5 = $i2;

        goto label04;

     label03:
        $i4 = $i0;

        $i0 = $i3;

        $i5 = $i1;

        $i3 = $i2;

     label04:
        $i1 = $i5 - $i4;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        $i2 = $i3 - $i0;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        $i6 = neg $i1;

        $i7 = $i6 >> 1;

        $b8 = -1;

        if $i4 >= $i5 goto label05;

        $b9 = 1;

        goto label06;

     label05:
        $b9 = -1;

     label06:
        if $i0 >= $i3 goto label07;

        $b8 = 1;

     label07:
        $i6 = $i5 + $b9;

        $i5 = $i0;

        $i10 = 0;

        $i11 = $i4;

     label08:
        if $i11 == $i6 goto label19;

        if $z0 == 0 goto label09;

        $i12 = $i5;

        goto label10;

     label09:
        $i12 = $i11;

     label10:
        if $z0 == 0 goto label11;

        $i13 = $i11;

        goto label12;

     label11:
        $i13 = $i5;

     label12:
        if $i10 != 1 goto label13;

        $r1 = r0;

        $z1 = 1;

        goto label14;

     label13:
        $r1 = r0;

        $z1 = 0;

     label14:
        $r2 = $r1.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $z2 = virtualinvoke $r2.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i12, $i13);

        if $z1 != $z2 goto label16;

        if $i10 != 2 goto label15;

        $f0 = staticinvoke <com.google.zxing.common.detector.MathUtils: float distance(int,int,int,int)>($i11, $i5, $i4, $i0);

        return $f0;

     label15:
        $i10 = $i10 + 1;

     label16:
        $i7 = $i7 + $i2;

        if $i7 <= 0 goto label18;

        if $i5 != $i3 goto label17;

        goto label19;

     label17:
        $i5 = $i5 + $b8;

        $i7 = $i7 - $i1;

     label18:
        $i11 = $i11 + $b9;

        goto label08;

     label19:
        if $i10 != 2 goto label20;

        $f0 = staticinvoke <com.google.zxing.common.detector.MathUtils: float distance(int,int,int,int)>($i6, $i3, $i4, $i0);

        return $f0;

     label20:
        return #NaNF;
    }

    private float sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)
    {
        com.google.zxing.qrcode.detector.Detector r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float $f0, $f1, $f2, $f3;
        com.google.zxing.common.BitMatrix $r1;

        r0 := @this: com.google.zxing.qrcode.detector.Detector;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $f1 = specialinvoke r0.<com.google.zxing.qrcode.detector.Detector: float sizeOfBlackWhiteBlackRun(int,int,int,int)>($i1, $i0, $i2, $i3);

        $i2 = $i2 - $i1;

        $i4 = $i1 - $i2;

        $i2 = 0;

        if $i4 >= 0 goto label1;

        $f0 = (float) $i1;

        $i4 = $i1 - $i4;

        $f2 = (float) $i4;

        $f2 = $f0 / $f2;

        $i4 = 0;

        goto label3;

     label1:
        $r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $i5 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: int getWidth()>();

        if $i4 < $i5 goto label2;

        $r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $i5 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: int getWidth()>();

        $i6 = -1;

        $i5 = $i5 + $i6;

        $i5 = $i5 - $i1;

        $f0 = (float) $i5;

        $i4 = $i4 - $i1;

        $f2 = (float) $i4;

        $f2 = $f0 / $f2;

        $r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $i4 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: int getWidth()>();

        $i5 = -1;

        $i4 = $i4 + $i5;

        goto label3;

     label2:
        $f2 = 1.0F;

     label3:
        $f0 = (float) $i0;

        $i3 = $i3 - $i0;

        $f3 = (float) $i3;

        $f2 = $f3 * $f2;

        $f2 = $f0 - $f2;

        $i3 = (int) $f2;

        if $i3 >= 0 goto label4;

        $i3 = $i0 - $i3;

        $f2 = (float) $i3;

        $f2 = $f0 / $f2;

        goto label6;

     label4:
        $r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $i2 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: int getHeight()>();

        if $i3 < $i2 goto label5;

        $r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $i2 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: int getHeight()>();

        $i5 = -1;

        $i2 = $i2 + $i5;

        $i2 = $i2 - $i0;

        $f0 = (float) $i2;

        $i2 = $i3 - $i0;

        $f2 = (float) $i2;

        $f2 = $f0 / $f2;

        $r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $i2 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: int getHeight()>();

        $i3 = -1;

        $i2 = $i2 + $i3;

        goto label6;

     label5:
        $i2 = $i3;

        $f2 = 1.0F;

     label6:
        $f0 = (float) $i1;

        $i3 = $i4 - $i1;

        $f3 = (float) $i3;

        $f2 = $f3 * $f2;

        $f0 = $f0 + $f2;

        $i3 = (int) $f0;

        $f0 = specialinvoke r0.<com.google.zxing.qrcode.detector.Detector: float sizeOfBlackWhiteBlackRun(int,int,int,int)>($i1, $i0, $i3, $i2);

        $f1 = $f1 + $f0;

        $f1 = $f1 - 1.0F;

        return $f1;
    }

    public final float calculateModuleSize(com.google.zxing.ResultPoint, com.google.zxing.ResultPoint, com.google.zxing.ResultPoint)
    {
        com.google.zxing.qrcode.detector.Detector r0;
        com.google.zxing.ResultPoint $r1, $r2, $r3;
        float $f0, $f1;

        r0 := @this: com.google.zxing.qrcode.detector.Detector;

        $r2 := @parameter0: com.google.zxing.ResultPoint;

        $r3 := @parameter1: com.google.zxing.ResultPoint;

        $r1 := @parameter2: com.google.zxing.ResultPoint;

        $f0 = specialinvoke r0.<com.google.zxing.qrcode.detector.Detector: float calculateModuleSizeOneWay(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint)>($r2, $r3);

        $f1 = specialinvoke r0.<com.google.zxing.qrcode.detector.Detector: float calculateModuleSizeOneWay(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint)>($r2, $r1);

        $f0 = $f0 + $f1;

        $f0 = $f0 / 2.0F;

        return $f0;
    }

    public com.google.zxing.common.DetectorResult detect()
    {
        com.google.zxing.qrcode.detector.Detector r0;
        com.google.zxing.common.DetectorResult $r1;

        r0 := @this: com.google.zxing.qrcode.detector.Detector;

        $r1 = virtualinvoke r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.DetectorResult detect(java.util.Map)>(null);

        return $r1;
    }

    public final com.google.zxing.common.DetectorResult detect(java.util.Map)
    {
        com.google.zxing.qrcode.detector.FinderPatternInfo $r7;
        com.google.zxing.qrcode.detector.Detector r0;
        com.google.zxing.common.DetectorResult $r8;
        com.google.zxing.qrcode.detector.FinderPatternFinder $r6;
        com.google.zxing.DecodeHintType $r4;
        com.google.zxing.ResultPointCallback $r2;
        java.util.Map $r3;
        com.google.zxing.common.BitMatrix $r1;
        java.lang.Object $r5;

        r0 := @this: com.google.zxing.qrcode.detector.Detector;

        $r3 := @parameter0: java.util.Map;

        if $r3 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r4 = <com.google.zxing.DecodeHintType: com.google.zxing.DecodeHintType NEED_RESULT_POINT_CALLBACK>;

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r2 = (com.google.zxing.ResultPointCallback) $r5;

     label2:
        r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.ResultPointCallback resultPointCallback> = $r2;

        $r6 = new com.google.zxing.qrcode.detector.FinderPatternFinder;

        $r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $r2 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.ResultPointCallback resultPointCallback>;

        specialinvoke $r6.<com.google.zxing.qrcode.detector.FinderPatternFinder: void <init>(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPointCallback)>($r1, $r2);

        $r7 = virtualinvoke $r6.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.qrcode.detector.FinderPatternInfo find(java.util.Map)>($r3);

        $r8 = virtualinvoke r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.DetectorResult processFinderPatternInfo(com.google.zxing.qrcode.detector.FinderPatternInfo)>($r7);

        return $r8;
    }

    public final com.google.zxing.qrcode.detector.AlignmentPattern findAlignmentInRegion(float, int, int, float)
    {
        com.google.zxing.qrcode.detector.Detector r0;
        com.google.zxing.qrcode.detector.AlignmentPatternFinder $r5;
        byte $b5;
        com.google.zxing.ResultPointCallback $r2;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7;
        com.google.zxing.qrcode.detector.AlignmentPattern $r3;
        com.google.zxing.NotFoundException $r4;
        float $f0, $f1, $f2;
        com.google.zxing.common.BitMatrix $r1;

        r0 := @this: com.google.zxing.qrcode.detector.Detector;

        $f0 := @parameter0: float;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $f1 := @parameter3: float;

        $f1 = $f1 * $f0;

        $i2 = (int) $f1;

        $i3 = $i0 - $i2;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i3);

        $r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $i4 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: int getWidth()>();

        $i6 = -1;

        $i4 = $i4 + $i6;

        $i0 = $i0 + $i2;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i0);

        $i0 = $i0 - $i3;

        $f2 = (float) $i0;

        $f1 = 3.0F * $f0;

        $b5 = $f2 cmpg $f1;

        $i4 = (int) $b5;

        if $i4 < 0 goto label2;

        $i4 = $i1 - $i2;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i4);

        $r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $i6 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: int getHeight()>();

        $i7 = -1;

        $i6 = $i6 + $i7;

        $i1 = $i1 + $i2;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i1);

        $i1 = $i1 - $i4;

        $f2 = (float) $i1;

        $b5 = $f2 cmpg $f1;

        $i2 = (int) $b5;

        if $i2 < 0 goto label1;

        $r5 = new com.google.zxing.qrcode.detector.AlignmentPatternFinder;

        $r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $r2 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.ResultPointCallback resultPointCallback>;

        specialinvoke $r5.<com.google.zxing.qrcode.detector.AlignmentPatternFinder: void <init>(com.google.zxing.common.BitMatrix,int,int,int,int,float,com.google.zxing.ResultPointCallback)>($r1, $i3, $i4, $i0, $i1, $f0, $r2);

        $r3 = virtualinvoke $r5.<com.google.zxing.qrcode.detector.AlignmentPatternFinder: com.google.zxing.qrcode.detector.AlignmentPattern find()>();

        return $r3;

     label1:
        $r4 = staticinvoke <com.google.zxing.NotFoundException: com.google.zxing.NotFoundException getNotFoundInstance()>();

        throw $r4;

     label2:
        $r4 = staticinvoke <com.google.zxing.NotFoundException: com.google.zxing.NotFoundException getNotFoundInstance()>();

        throw $r4;
    }

    public final com.google.zxing.common.BitMatrix getImage()
    {
        com.google.zxing.qrcode.detector.Detector r0;
        com.google.zxing.common.BitMatrix r1;

        r0 := @this: com.google.zxing.qrcode.detector.Detector;

        r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        return r1;
    }

    public final com.google.zxing.ResultPointCallback getResultPointCallback()
    {
        com.google.zxing.qrcode.detector.Detector r0;
        com.google.zxing.ResultPointCallback r1;

        r0 := @this: com.google.zxing.qrcode.detector.Detector;

        r1 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.ResultPointCallback resultPointCallback>;

        return r1;
    }

    public final com.google.zxing.common.DetectorResult processFinderPatternInfo(com.google.zxing.qrcode.detector.FinderPatternInfo)
    {
        com.google.zxing.qrcode.detector.FinderPatternInfo $r2;
        com.google.zxing.qrcode.detector.Detector r0;
        byte $b0;
        int[] $r8;
        com.google.zxing.common.PerspectiveTransform $r10;
        int $i1, $i2, $i3, $i4;
        com.google.zxing.qrcode.detector.AlignmentPattern $r7, $r9;
        com.google.zxing.common.DetectorResult $r13;
        com.google.zxing.qrcode.decoder.Version $r6;
        com.google.zxing.ResultPoint[] $r12;
        com.google.zxing.NotFoundException $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        com.google.zxing.common.BitMatrix $r11;
        com.google.zxing.qrcode.detector.FinderPattern $r3, $r4, $r5;

        r0 := @this: com.google.zxing.qrcode.detector.Detector;

        $r2 := @parameter0: com.google.zxing.qrcode.detector.FinderPatternInfo;

        $r3 = virtualinvoke $r2.<com.google.zxing.qrcode.detector.FinderPatternInfo: com.google.zxing.qrcode.detector.FinderPattern getTopLeft()>();

        $r4 = virtualinvoke $r2.<com.google.zxing.qrcode.detector.FinderPatternInfo: com.google.zxing.qrcode.detector.FinderPattern getTopRight()>();

        $r5 = virtualinvoke $r2.<com.google.zxing.qrcode.detector.FinderPatternInfo: com.google.zxing.qrcode.detector.FinderPattern getBottomLeft()>();

        $f0 = virtualinvoke r0.<com.google.zxing.qrcode.detector.Detector: float calculateModuleSize(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint)>($r3, $r4, $r5);

        $b0 = $f0 cmpg 1.0F;

        $i1 = (int) $b0;

        if $i1 < 0 goto label08;

        $i1 = staticinvoke <com.google.zxing.qrcode.detector.Detector: int computeDimension(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,float)>($r3, $r4, $r5, $f0);

        $r6 = staticinvoke <com.google.zxing.qrcode.decoder.Version: com.google.zxing.qrcode.decoder.Version getProvisionalVersionForDimension(int)>($i1);

        $i2 = virtualinvoke $r6.<com.google.zxing.qrcode.decoder.Version: int getDimensionForVersion()>();

        $i3 = -7;

        $i2 = $i2 + $i3;

        $r7 = null;

        $r8 = virtualinvoke $r6.<com.google.zxing.qrcode.decoder.Version: int[] getAlignmentPatternCenters()>();

        $i3 = lengthof $r8;

        if $i3 <= 0 goto label05;

        $f1 = virtualinvoke $r4.<com.google.zxing.ResultPoint: float getX()>();

        $f2 = virtualinvoke $r3.<com.google.zxing.ResultPoint: float getX()>();

        $f1 = $f1 - $f2;

        $f2 = virtualinvoke $r5.<com.google.zxing.ResultPoint: float getX()>();

        $f2 = $f1 + $f2;

        $f1 = virtualinvoke $r4.<com.google.zxing.ResultPoint: float getY()>();

        $f3 = virtualinvoke $r3.<com.google.zxing.ResultPoint: float getY()>();

        $f1 = $f1 - $f3;

        $f3 = virtualinvoke $r5.<com.google.zxing.ResultPoint: float getY()>();

        $f1 = $f1 + $f3;

        $f3 = (float) $i2;

        $f3 = 3.0F / $f3;

        $f3 = 1.0F - $f3;

        $f4 = virtualinvoke $r3.<com.google.zxing.ResultPoint: float getX()>();

        $f5 = virtualinvoke $r3.<com.google.zxing.ResultPoint: float getX()>();

        $f2 = $f2 - $f5;

        $f2 = $f2 * $f3;

        $f2 = $f4 + $f2;

        $i2 = (int) $f2;

        $f2 = virtualinvoke $r3.<com.google.zxing.ResultPoint: float getY()>();

        $f4 = virtualinvoke $r3.<com.google.zxing.ResultPoint: float getY()>();

        $f1 = $f1 - $f4;

        $f1 = $f3 * $f1;

        $f1 = $f2 + $f1;

        $i3 = (int) $f1;

        $i4 = 4;

     label01:
        if $i4 > 16 goto label05;

        $f1 = (float) $i4;

     label02:
        $r9 = virtualinvoke r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.qrcode.detector.AlignmentPattern findAlignmentInRegion(float,int,int,float)>($f0, $i2, $i3, $f1);

     label03:
        $r7 = $r9;

        goto label05;

     label04:
        $i4 = $i4 << 1;

        goto label01;

     label05:
        $r10 = staticinvoke <com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.PerspectiveTransform createTransform(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int)>($r3, $r4, $r5, $r7, $i1);

        $r11 = r0.<com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix image>;

        $r11 = staticinvoke <com.google.zxing.qrcode.detector.Detector: com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,com.google.zxing.common.PerspectiveTransform,int)>($r11, $r10, $i1);

        if $r7 != null goto label06;

        $r12 = newarray (com.google.zxing.ResultPoint)[3];

        $r12[0] = $r5;

        $r12[1] = $r3;

        $r12[2] = $r4;

        goto label07;

     label06:
        $r12 = newarray (com.google.zxing.ResultPoint)[4];

        $r12[0] = $r5;

        $r12[1] = $r3;

        $r12[2] = $r4;

        $r12[3] = $r7;

     label07:
        $r13 = new com.google.zxing.common.DetectorResult;

        specialinvoke $r13.<com.google.zxing.common.DetectorResult: void <init>(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint[])>($r11, $r12);

        return $r13;

     label08:
        $r1 = staticinvoke <com.google.zxing.NotFoundException: com.google.zxing.NotFoundException getNotFoundInstance()>();

        goto label09;

     label09:
        throw $r1;

     label10:
        $r1 := @caughtexception;

        goto label04;

        catch com.google.zxing.NotFoundException from label02 to label03 with label10;
    }
}
