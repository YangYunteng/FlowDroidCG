public final class com.google.common.io.CharSequenceReader extends java.io.Reader
{
    public int mark;
    public int pos;
    public java.lang.CharSequence seq;

    public void <init>(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        com.google.common.io.CharSequenceReader r0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        $r1 := @parameter0: java.lang.CharSequence;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.io.CharSequenceReader: java.lang.CharSequence seq> = $r1;

        return;
    }

    private void checkOpen()
    {
        java.io.IOException $r2;
        java.lang.CharSequence $r1;
        com.google.common.io.CharSequenceReader r0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        $r1 = r0.<com.google.common.io.CharSequenceReader: java.lang.CharSequence seq>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("reader closed");

        throw $r2;
    }

    private boolean hasRemaining()
    {
        int $i0;
        com.google.common.io.CharSequenceReader r0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        $i0 = specialinvoke r0.<com.google.common.io.CharSequenceReader: int remaining()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private int remaining()
    {
        java.lang.CharSequence $r1;
        int $i0, $i1;
        com.google.common.io.CharSequenceReader r0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        $r1 = r0.<com.google.common.io.CharSequenceReader: java.lang.CharSequence seq>;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = r0.<com.google.common.io.CharSequenceReader: int pos>;

        $i0 = $i1 - $i0;

        return $i0;
    }

    public void close()
    {
        java.lang.Throwable $r1;
        com.google.common.io.CharSequenceReader r0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        entermonitor r0;

     label1:
        r0.<com.google.common.io.CharSequenceReader: java.lang.CharSequence seq> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void mark(int)
    {
        java.lang.Throwable $r1;
        int $i0;
        com.google.common.io.CharSequenceReader r0;
        boolean $z0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        $i0 := @parameter0: int;

        entermonitor r0;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "readAheadLimit (%s) may not be negative", $i0);

        specialinvoke r0.<com.google.common.io.CharSequenceReader: void checkOpen()>();

        $i0 = r0.<com.google.common.io.CharSequenceReader: int pos>;

        r0.<com.google.common.io.CharSequenceReader: int mark> = $i0;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public boolean markSupported()
    {
        com.google.common.io.CharSequenceReader r0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        return 1;
    }

    public int read()
    {
        java.lang.Throwable $r2;
        short $s2;
        java.lang.CharSequence $r1;
        int $i0, $i1;
        com.google.common.io.CharSequenceReader r0;
        boolean $z0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.google.common.io.CharSequenceReader: void checkOpen()>();

        $z0 = specialinvoke r0.<com.google.common.io.CharSequenceReader: boolean hasRemaining()>();

        if $z0 == 0 goto label3;

        $r1 = r0.<com.google.common.io.CharSequenceReader: java.lang.CharSequence seq>;

        $i0 = r0.<com.google.common.io.CharSequenceReader: int pos>;

        $i1 = $i0 + 1;

        r0.<com.google.common.io.CharSequenceReader: int pos> = $i1;

        $s2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

     label2:
        goto label4;

     label3:
        $s2 = -1;

     label4:
        exitmonitor r0;

        return $s2;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public int read(java.nio.CharBuffer)
    {
        java.lang.Throwable $r3;
        java.lang.CharSequence $r2;
        java.nio.CharBuffer $r1;
        char $c4;
        com.google.common.io.CharSequenceReader r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        $r1 := @parameter0: java.nio.CharBuffer;

        entermonitor r0;

     label1:
        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        specialinvoke r0.<com.google.common.io.CharSequenceReader: void checkOpen()>();

        $z0 = specialinvoke r0.<com.google.common.io.CharSequenceReader: boolean hasRemaining()>();

     label2:
        if $z0 != 0 goto label3;

        exitmonitor r0;

        $i0 = -1;

        return $i0;

     label3:
        $i0 = virtualinvoke $r1.<java.nio.CharBuffer: int remaining()>();

        $i1 = specialinvoke r0.<com.google.common.io.CharSequenceReader: int remaining()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i3 = 0;

     label4:
        if $i3 >= $i2 goto label6;

        $r2 = r0.<com.google.common.io.CharSequenceReader: java.lang.CharSequence seq>;

        $i0 = r0.<com.google.common.io.CharSequenceReader: int pos>;

        $i1 = $i0 + 1;

        r0.<com.google.common.io.CharSequenceReader: int pos> = $i1;

        $c4 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i0);

        virtualinvoke $r1.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c4);

     label5:
        $i3 = $i3 + 1;

        goto label4;

     label6:
        exitmonitor r0;

        return $i2;

     label7:
        $r3 := @caughtexception;

        exitmonitor r0;

        goto label8;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label5 with label7;
    }

    public int read(char[], int, int)
    {
        java.lang.Throwable $r3;
        java.lang.CharSequence $r2;
        char $c6;
        com.google.common.io.CharSequenceReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        char[] $r1;
        boolean $z0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        entermonitor r0;

        $i2 = $i0 + $i1;

     label1:
        $i3 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i2, $i3);

        specialinvoke r0.<com.google.common.io.CharSequenceReader: void checkOpen()>();

        $z0 = specialinvoke r0.<com.google.common.io.CharSequenceReader: boolean hasRemaining()>();

     label2:
        if $z0 != 0 goto label3;

        exitmonitor r0;

        $i0 = -1;

        return $i0;

     label3:
        $i2 = specialinvoke r0.<com.google.common.io.CharSequenceReader: int remaining()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $i4 = 0;

     label4:
        if $i4 >= $i3 goto label6;

        $i5 = $i0 + $i4;

        $r2 = r0.<com.google.common.io.CharSequenceReader: java.lang.CharSequence seq>;

        $i1 = r0.<com.google.common.io.CharSequenceReader: int pos>;

        $i2 = $i1 + 1;

        r0.<com.google.common.io.CharSequenceReader: int pos> = $i2;

        $c6 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i1);

        $r1[$i5] = $c6;

     label5:
        $i4 = $i4 + 1;

        goto label4;

     label6:
        exitmonitor r0;

        return $i3;

     label7:
        $r3 := @caughtexception;

        exitmonitor r0;

        goto label8;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label5 with label7;
    }

    public boolean ready()
    {
        java.lang.Throwable $r1;
        com.google.common.io.CharSequenceReader r0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.google.common.io.CharSequenceReader: void checkOpen()>();

     label2:
        exitmonitor r0;

        return 1;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void reset()
    {
        int $i0;
        java.lang.Throwable $r1;
        com.google.common.io.CharSequenceReader r0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.google.common.io.CharSequenceReader: void checkOpen()>();

        $i0 = r0.<com.google.common.io.CharSequenceReader: int mark>;

        r0.<com.google.common.io.CharSequenceReader: int pos> = $i0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long skip(long)
    {
        java.lang.Throwable $r1;
        long $l2, $l3;
        com.google.common.io.CharSequenceReader r0;
        byte $b1;
        int $i0, $i4;
        boolean $z0;

        r0 := @this: com.google.common.io.CharSequenceReader;

        $l2 := @parameter0: long;

        entermonitor r0;

        $b1 = $l2 cmp 0L;

        $i0 = (int) $b1;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "n (%s) may not be negative", $l2);

        specialinvoke r0.<com.google.common.io.CharSequenceReader: void checkOpen()>();

        $i0 = specialinvoke r0.<com.google.common.io.CharSequenceReader: int remaining()>();

        $l3 = (long) $i0;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l3, $l2);

        $i0 = (int) $l2;

        $i4 = r0.<com.google.common.io.CharSequenceReader: int pos>;

        $i4 = $i4 + $i0;

        r0.<com.google.common.io.CharSequenceReader: int pos> = $i4;

     label3:
        $l2 = (long) $i0;

        exitmonitor r0;

        return $l2;

     label4:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label2 to label3 with label4;
    }
}
