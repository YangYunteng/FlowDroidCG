public abstract class org.codehaus.jackson.node.ContainerNode extends org.codehaus.jackson.node.BaseJsonNode
{
    public org.codehaus.jackson.node.JsonNodeFactory _nodeFactory;

    public void <init>(org.codehaus.jackson.node.JsonNodeFactory)
    {
        org.codehaus.jackson.node.ContainerNode r0;
        org.codehaus.jackson.node.JsonNodeFactory $r1;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $r1 := @parameter0: org.codehaus.jackson.node.JsonNodeFactory;

        specialinvoke r0.<org.codehaus.jackson.node.BaseJsonNode: void <init>()>();

        r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory> = $r1;

        return;
    }

    public final org.codehaus.jackson.node.POJONode POJONode(java.lang.Object)
    {
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        org.codehaus.jackson.node.POJONode $r2;
        org.codehaus.jackson.node.ContainerNode r0;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.POJONode POJONode(java.lang.Object)>($r3);

        return $r2;
    }

    public final org.codehaus.jackson.node.ArrayNode arrayNode()
    {
        org.codehaus.jackson.node.ArrayNode $r1;
        org.codehaus.jackson.node.ContainerNode r0;
        org.codehaus.jackson.node.JsonNodeFactory $r2;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $r2 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.ArrayNode arrayNode()>();

        return $r1;
    }

    public abstract org.codehaus.jackson.JsonToken asToken();

    public final org.codehaus.jackson.node.BinaryNode binaryNode(byte[])
    {
        byte[] $r3;
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        org.codehaus.jackson.node.BinaryNode $r2;
        org.codehaus.jackson.node.ContainerNode r0;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $r3 := @parameter0: byte[];

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.BinaryNode binaryNode(byte[])>($r3);

        return $r2;
    }

    public final org.codehaus.jackson.node.BinaryNode binaryNode(byte[], int, int)
    {
        byte[] $r3;
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        int $i0, $i1;
        org.codehaus.jackson.node.BinaryNode $r2;
        org.codehaus.jackson.node.ContainerNode r0;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $r3 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.BinaryNode binaryNode(byte[],int,int)>($r3, $i0, $i1);

        return $r2;
    }

    public final org.codehaus.jackson.node.BooleanNode booleanNode(boolean)
    {
        org.codehaus.jackson.node.BooleanNode $r2;
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        org.codehaus.jackson.node.ContainerNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $z0 := @parameter0: boolean;

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>($z0);

        return $r2;
    }

    public volatile org.codehaus.jackson.JsonNode findParent(java.lang.String)
    {
        org.codehaus.jackson.node.ContainerNode r0;
        java.lang.String $r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.ObjectNode findParent(java.lang.String)>($r2);

        return $r1;
    }

    public abstract org.codehaus.jackson.node.ObjectNode findParent(java.lang.String);

    public abstract java.util.List findParents(java.lang.String, java.util.List);

    public abstract org.codehaus.jackson.JsonNode findValue(java.lang.String);

    public abstract java.util.List findValues(java.lang.String, java.util.List);

    public abstract java.util.List findValuesAsText(java.lang.String, java.util.List);

    public abstract org.codehaus.jackson.JsonNode get(int);

    public abstract org.codehaus.jackson.JsonNode get(java.lang.String);

    public java.lang.String getValueAsText()
    {
        org.codehaus.jackson.node.ContainerNode r0;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        return null;
    }

    public boolean isContainerNode()
    {
        org.codehaus.jackson.node.ContainerNode r0;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        return 1;
    }

    public final org.codehaus.jackson.node.NullNode nullNode()
    {
        org.codehaus.jackson.node.NullNode $r1;
        org.codehaus.jackson.node.ContainerNode r0;
        org.codehaus.jackson.node.JsonNodeFactory $r2;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $r2 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NullNode nullNode()>();

        return $r1;
    }

    public final org.codehaus.jackson.node.NumericNode numberNode(byte)
    {
        byte $b0;
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        org.codehaus.jackson.node.ContainerNode r0;
        org.codehaus.jackson.node.NumericNode $r2;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(byte)>($b0);

        return $r2;
    }

    public final org.codehaus.jackson.node.NumericNode numberNode(double)
    {
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        org.codehaus.jackson.node.ContainerNode r0;
        org.codehaus.jackson.node.NumericNode $r2;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $d0 := @parameter0: double;

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(double)>($d0);

        return $r2;
    }

    public final org.codehaus.jackson.node.NumericNode numberNode(float)
    {
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        float $f0;
        org.codehaus.jackson.node.ContainerNode r0;
        org.codehaus.jackson.node.NumericNode $r2;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $f0 := @parameter0: float;

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(float)>($f0);

        return $r2;
    }

    public final org.codehaus.jackson.node.NumericNode numberNode(int)
    {
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        int $i0;
        org.codehaus.jackson.node.ContainerNode r0;
        org.codehaus.jackson.node.NumericNode $r2;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(int)>($i0);

        return $r2;
    }

    public final org.codehaus.jackson.node.NumericNode numberNode(long)
    {
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        org.codehaus.jackson.node.ContainerNode r0;
        org.codehaus.jackson.node.NumericNode $r2;
        long $l0;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $l0 := @parameter0: long;

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(long)>($l0);

        return $r2;
    }

    public final org.codehaus.jackson.node.NumericNode numberNode(java.math.BigDecimal)
    {
        java.math.BigDecimal $r3;
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        org.codehaus.jackson.node.ContainerNode r0;
        org.codehaus.jackson.node.NumericNode $r2;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $r3 := @parameter0: java.math.BigDecimal;

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(java.math.BigDecimal)>($r3);

        return $r2;
    }

    public final org.codehaus.jackson.node.NumericNode numberNode(short)
    {
        short $s0;
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        org.codehaus.jackson.node.ContainerNode r0;
        org.codehaus.jackson.node.NumericNode $r2;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $s0 := @parameter0: short;

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(short)>($s0);

        return $r2;
    }

    public final org.codehaus.jackson.node.ObjectNode objectNode()
    {
        org.codehaus.jackson.node.ContainerNode r0;
        org.codehaus.jackson.node.JsonNodeFactory $r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $r2 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.ObjectNode objectNode()>();

        return $r1;
    }

    public abstract org.codehaus.jackson.node.ContainerNode removeAll();

    public abstract int size();

    public final org.codehaus.jackson.node.TextNode textNode(java.lang.String)
    {
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        org.codehaus.jackson.node.TextNode $r2;
        org.codehaus.jackson.node.ContainerNode r0;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.node.ContainerNode;

        $r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.TextNode textNode(java.lang.String)>($r3);

        return $r2;
    }
}
