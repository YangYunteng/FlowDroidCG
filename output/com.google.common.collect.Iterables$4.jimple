public final class com.google.common.collect.Iterables$4 extends com.google.common.collect.FluentIterable
{
    public final com.google.common.base.Predicate val$retainIfTrue;
    public final java.lang.Iterable val$unfiltered;

    public void <init>(java.lang.Iterable, com.google.common.base.Predicate)
    {
        com.google.common.collect.Iterables$4 r0;
        com.google.common.base.Predicate $r2;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.Iterables$4;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 := @parameter1: com.google.common.base.Predicate;

        r0.<com.google.common.collect.Iterables$4: java.lang.Iterable val$unfiltered> = $r1;

        r0.<com.google.common.collect.Iterables$4: com.google.common.base.Predicate val$retainIfTrue> = $r2;

        specialinvoke r0.<com.google.common.collect.FluentIterable: void <init>()>();

        return;
    }

    public static void a(com.google.common.base.Predicate, java.util.function.Consumer, java.lang.Object)
    {
        java.util.function.Consumer $r0;
        com.google.common.base.Predicate $r2;
        java.lang.Object $r1;
        boolean $z0;

        $r2 := @parameter0: com.google.common.base.Predicate;

        $r0 := @parameter1: java.util.function.Consumer;

        $r1 := @parameter2: java.lang.Object;

        $z0 = interfaceinvoke $r2.<com.google.common.base.Predicate: boolean test(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        interfaceinvoke $r0.<java.util.function.Consumer: void accept(java.lang.Object)>($r1);

     label1:
        return;
    }

    public void forEach(java.util.function.Consumer)
    {
        java.util.function.Consumer $r1;
        c.i.b.c.La $r4;
        com.google.common.collect.Iterables$4 r0;
        com.google.common.base.Predicate $r3;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.Iterables$4;

        $r1 := @parameter0: java.util.function.Consumer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.collect.Iterables$4: java.lang.Iterable val$unfiltered>;

        $r3 = r0.<com.google.common.collect.Iterables$4: com.google.common.base.Predicate val$retainIfTrue>;

        $r4 = new c.i.b.c.La;

        specialinvoke $r4.<c.i.b.c.La: void <init>(com.google.common.base.Predicate,java.util.function.Consumer)>($r3, $r1);

        interfaceinvoke $r2.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r4);

        return;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.Iterables$4 r0;
        java.util.Iterator $r3;
        com.google.common.base.Predicate $r1;
        com.google.common.collect.UnmodifiableIterator $r4;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.Iterables$4;

        $r2 = r0.<com.google.common.collect.Iterables$4: java.lang.Iterable val$unfiltered>;

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r1 = r0.<com.google.common.collect.Iterables$4: com.google.common.base.Predicate val$retainIfTrue>;

        $r4 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate)>($r3, $r1);

        return $r4;
    }

    public java.util.Spliterator spliterator()
    {
        com.google.common.collect.Iterables$4 r0;
        com.google.common.base.Predicate $r1;
        java.util.Spliterator $r3;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.Iterables$4;

        $r2 = r0.<com.google.common.collect.Iterables$4: java.lang.Iterable val$unfiltered>;

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Spliterator spliterator()>();

        $r1 = r0.<com.google.common.collect.Iterables$4: com.google.common.base.Predicate val$retainIfTrue>;

        $r3 = staticinvoke <com.google.common.collect.CollectSpliterators: java.util.Spliterator filter(java.util.Spliterator,java.util.function.Predicate)>($r3, $r1);

        return $r3;
    }
}
