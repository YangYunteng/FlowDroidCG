public class org.dom4j.tree.ConcurrentReaderHashMap extends java.util.AbstractMap implements java.util.Map, java.lang.Cloneable, java.io.Serializable
{
    public static int DEFAULT_INITIAL_CAPACITY;
    public static final float DEFAULT_LOAD_FACTOR;
    public static final int MAXIMUM_CAPACITY;
    public static final int MINIMUM_CAPACITY;
    public final org.dom4j.tree.ConcurrentReaderHashMap$BarrierLock barrierLock;
    public transient int count;
    public transient java.util.Set entrySet;
    public transient java.util.Set keySet;
    public transient java.lang.Object lastWrite;
    public float loadFactor;
    public transient org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table;
    public int threshold;
    public transient java.util.Collection values;

    static void <clinit>()
    {
        <org.dom4j.tree.ConcurrentReaderHashMap: int MINIMUM_CAPACITY> = 4;

        <org.dom4j.tree.ConcurrentReaderHashMap: int MAXIMUM_CAPACITY> = 1073741824;

        <org.dom4j.tree.ConcurrentReaderHashMap: float DEFAULT_LOAD_FACTOR> = 0.75F;

        <org.dom4j.tree.ConcurrentReaderHashMap: int DEFAULT_INITIAL_CAPACITY> = 32;

        return;
    }

    public void <init>()
    {
        int $i0;
        org.dom4j.tree.ConcurrentReaderHashMap r0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $i0 = <org.dom4j.tree.ConcurrentReaderHashMap: int DEFAULT_INITIAL_CAPACITY>;

        specialinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void <init>(int,float)>($i0, 0.75F);

        return;
    }

    public void <init>(int)
    {
        int $i0;
        org.dom4j.tree.ConcurrentReaderHashMap r0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $i0 := @parameter0: int;

        specialinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void <init>(int,float)>($i0, 0.75F);

        return;
    }

    public void <init>(int, float)
    {
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        java.lang.IllegalArgumentException $r6;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r1;
        byte $b1;
        int $i0, $i2;
        float $f0, $f1;
        java.lang.StringBuilder $r2, $r5;
        java.lang.String $r3;
        org.dom4j.tree.ConcurrentReaderHashMap$BarrierLock $r4;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r4 = new org.dom4j.tree.ConcurrentReaderHashMap$BarrierLock;

        specialinvoke $r4.<org.dom4j.tree.ConcurrentReaderHashMap$BarrierLock: void <init>()>();

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$BarrierLock barrierLock> = $r4;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Set keySet> = null;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Set entrySet> = null;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Collection values> = null;

        $b1 = $f0 cmpg 0.0F;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: float loadFactor> = $f0;

        $i0 = specialinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: int p2capacity(int)>($i0);

        $r1 = newarray (org.dom4j.tree.ConcurrentReaderHashMap$Entry)[$i0];

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table> = $r1;

        $f1 = (float) $i0;

        $f0 = $f1 * $f0;

        $i0 = (int) $f0;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: int threshold> = $i0;

        return;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        $r2 = $r5;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal Load factor: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r6;
    }

    public void <init>(java.util.Map)
    {
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        java.util.Map $r1;
        int $i0;
        float $f0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $f0 = (float) $i0;

        $f0 = $f0 / 0.75F;

        $i0 = (int) $f0;

        $i0 = $i0 + 1;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 16);

        specialinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void <init>(int,float)>($i0, 0.75F);

        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void putAll(java.util.Map)>($r1);

        return;
    }

    public static int hash(java.lang.Object)
    {
        int $i0, $i1, $i2;
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        $i1 = virtualinvoke $r0.<java.lang.Object: int hashCode()>();

        $i0 = $i1 << 7;

        $i2 = $i0 - $i1;

        $i0 = $i1 >>> 9;

        $i0 = $i2 + $i0;

        $i1 = $i1 >>> 17;

        $i1 = $i0 + $i1;

        return $i1;
    }

    private int p2capacity(int)
    {
        int $i0, $i1;
        org.dom4j.tree.ConcurrentReaderHashMap r0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $i0 := @parameter0: int;

        if $i0 > 1073741824 goto label4;

        if $i0 >= 0 goto label1;

        return 1073741824;

     label1:
        $i1 = 4;

     label2:
        if $i1 < $i0 goto label3;

        return $i1;

     label3:
        $i1 = $i1 << 1;

        goto label2;

     label4:
        return 1073741824;
    }

    private void readObject(java.io.ObjectInputStream)
    {
        java.lang.Throwable $r5;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        java.io.ObjectInputStream $r1;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r2;
        int $i0, $i1;
        java.lang.Object $r3, $r4;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 := @parameter0: java.io.ObjectInputStream;

        entermonitor r0;

     label1:
        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

        $r2 = newarray (org.dom4j.tree.ConcurrentReaderHashMap$Entry)[$i0];

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table> = $r2;

        $i0 = virtualinvoke $r1.<java.io.ObjectInputStream: int readInt()>();

     label2:
        $i1 = 0;

     label3:
        if $i1 < $i0 goto label4;

        exitmonitor r0;

        return;

     label4:
        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        $r5 := @caughtexception;

        exitmonitor r0;

        goto label7;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private void writeObject(java.io.ObjectOutputStream)
    {
        java.lang.Throwable $r5;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry $r3;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r2;
        int $i0, $i1;
        java.io.ObjectOutputStream $r1;
        java.lang.Object $r4;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        entermonitor r0;

     label1:
        virtualinvoke $r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i0 = lengthof $r2;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $i0 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count>;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r2 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i0 = lengthof $r2;

     label2:
        $i1 = -1;

        $i0 = $i0 + $i1;

     label3:
        if $i0 >= 0 goto label4;

        exitmonitor r0;

        return;

     label4:
        $r2 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $r3 = $r2[$i0];

     label5:
        if $r3 != null goto label6;

        $i1 = -1;

        $i0 = $i0 + $i1;

        goto label3;

     label6:
        $r4 = $r3.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        $r4 = $r3.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        $r3 = $r3.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

     label7:
        goto label5;

     label8:
        $r5 := @caughtexception;

        exitmonitor r0;

        goto label9;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label7 with label8;
    }

    public int capacity()
    {
        java.lang.Throwable $r2;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r1;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        int $i0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        entermonitor r0;

     label1:
        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i0 = lengthof $r1;

     label2:
        exitmonitor r0;

        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void clear()
    {
        java.lang.Throwable $r3;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r1;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry $r2;
        int $i0, $i1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        entermonitor r0;

     label1:
        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 < $i1 goto label4;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count> = 0;

        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>($r1);

     label3:
        exitmonitor r0;

        return;

     label4:
        $r2 = $r1[$i0];

     label5:
        if $r2 != null goto label6;

        $r1[$i0] = null;

        $i0 = $i0 + 1;

        goto label2;

     label6:
        $r2.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value> = null;

        $r2 = $r2.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

     label7:
        goto label5;

     label8:
        $r3 := @caughtexception;

        exitmonitor r0;

        goto label9;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label7 with label8;
    }

    public java.lang.Object clone()
    {
        java.lang.Throwable $r11;
        org.dom4j.tree.ConcurrentReaderHashMap r0, $r7;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry $r2, $r9, $r10;
        java.lang.CloneNotSupportedException $r5, $r6;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r1, $r8;
        int $i0, $i1;
        java.lang.InternalError $r12;
        java.lang.Object $r3, $r4;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        entermonitor r0;

     label01:
        $r3 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();

     label02:
        $r7 = (org.dom4j.tree.ConcurrentReaderHashMap) $r3;

        $r7.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Set keySet> = null;

        $r7.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Set entrySet> = null;

        $r7.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Collection values> = null;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = lengthof $r1;

        $r8 = newarray (org.dom4j.tree.ConcurrentReaderHashMap$Entry)[$i1];

        $r7.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table> = $r8;

        $r8 = $r7.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = 0;

     label03:
        $i0 = lengthof $r1;

     label04:
        if $i1 < $i0 goto label05;

        exitmonitor r0;

        return $r7;

     label05:
        $r9 = $r1[$i1];

        $r10 = null;

     label06:
        if $r9 != null goto label07;

        $r8[$i1] = $r10;

        $i1 = $i1 + 1;

        goto label03;

     label07:
        $r2 = new org.dom4j.tree.ConcurrentReaderHashMap$Entry;

        $i0 = $r9.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: int hash>;

        $r3 = $r9.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $r4 = $r9.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

     label08:
        specialinvoke $r2.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.dom4j.tree.ConcurrentReaderHashMap$Entry)>($i0, $r3, $r4, $r10);

     label09:
        $r9 = $r9.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

     label10:
        $r10 = $r2;

        goto label06;

     label11:
        $r11 := @caughtexception;

        goto label13;

     label12:
        $r12 = new java.lang.InternalError;

        specialinvoke $r12.<java.lang.InternalError: void <init>()>();

        throw $r12;

     label13:
        exitmonitor r0;

        goto label14;

     label14:
        throw $r11;

     label15:
        $r5 := @caughtexception;

        goto label12;

     label16:
        $r6 := @caughtexception;

        goto label12;

        catch java.lang.CloneNotSupportedException from label01 to label02 with label15;
        catch java.lang.Throwable from label01 to label04 with label11;
        catch java.lang.CloneNotSupportedException from label08 to label09 with label16;
        catch java.lang.Throwable from label05 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public boolean contains(java.lang.Object)
    {
        java.lang.Object $r1;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: boolean containsValue(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.lang.Object $r1;
        org.dom4j.tree.ConcurrentReaderHashMap r0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.lang.Object get(java.lang.Object)>($r1);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry $r3;
        java.lang.NullPointerException $r5;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r2;
        int $i0, $i1;
        java.lang.Object $r1, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label6;

        $r2 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] getTableForReading()>();

        $i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i0 < $i1 goto label2;

        return 0;

     label2:
        $r3 = $r2[$i0];

     label3:
        if $r3 != null goto label4;

        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r4 = $r3.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        $r3 = $r3.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

        goto label3;

     label6:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        goto label7;

     label7:
        throw $r5;
    }

    public java.util.Enumeration elements()
    {
        org.dom4j.tree.ConcurrentReaderHashMap$ValueIterator $r1;
        org.dom4j.tree.ConcurrentReaderHashMap r0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 = new org.dom4j.tree.ConcurrentReaderHashMap$ValueIterator;

        specialinvoke $r1.<org.dom4j.tree.ConcurrentReaderHashMap$ValueIterator: void <init>(org.dom4j.tree.ConcurrentReaderHashMap)>(r0);

        return $r1;
    }

    public java.util.Set entrySet()
    {
        org.dom4j.tree.ConcurrentReaderHashMap$EntrySet $r2;
        java.util.Set $r1;
        org.dom4j.tree.ConcurrentReaderHashMap r0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Set entrySet>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = new org.dom4j.tree.ConcurrentReaderHashMap$EntrySet;

        specialinvoke $r2.<org.dom4j.tree.ConcurrentReaderHashMap$EntrySet: void <init>(org.dom4j.tree.ConcurrentReaderHashMap,org.dom4j.tree.ConcurrentReaderHashMap$EntrySet)>(r0, null);

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Set entrySet> = $r2;

        return $r2;
    }

    public boolean eq(java.lang.Object, java.lang.Object)
    {
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r2 == $r1 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public boolean findAndRemoveEntry(java.util.Map$Entry)
    {
        java.lang.Throwable $r5;
        java.util.Map$Entry $r1;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        java.lang.Object $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 := @parameter0: java.util.Map$Entry;

        entermonitor r0;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.lang.Object get(java.lang.Object)>($r2);

        if $r3 == null goto label3;

        $r4 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.lang.Object remove(java.lang.Object)>($r2);

     label2:
        exitmonitor r0;

        return 1;

     label3:
        exitmonitor r0;

        return 0;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Throwable $r7;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry $r3, $r4;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r2, $r5;
        int $i0, $i1, $i2;
        java.lang.Object $r1, $r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <org.dom4j.tree.ConcurrentReaderHashMap: int hash(java.lang.Object)>($r1);

        $r2 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = lengthof $r2;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $i1 = $i1 & $i0;

        $r3 = $r2[$i1];

        $r4 = $r3;

     label01:
        if $r3 != null goto label04;

        $r5 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] getTableForReading()>();

        if $r2 != $r5 goto label02;

        $r3 = $r2[$i1];

        if $r4 != $r3 goto label02;

        return null;

     label02:
        $i1 = lengthof $r5;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $i1 = $i0 & $i1;

        $r4 = $r5[$i1];

        $r2 = $r5;

     label03:
        $r3 = $r4;

        goto label01;

     label04:
        $i2 = $r3.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: int hash>;

        if $i2 != $i0 goto label11;

        $r6 = $r3.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: boolean eq(java.lang.Object,java.lang.Object)>($r1, $r6);

        if $z0 == 0 goto label11;

        $r6 = $r3.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        if $r6 == null goto label05;

        return $r6;

     label05:
        entermonitor r0;

     label06:
        $r2 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        exitmonitor r0;

     label07:
        $i1 = lengthof $r2;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $i1 = $i0 & $i1;

        $r4 = $r2[$i1];

        goto label03;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r7;

     label11:
        $r3 = $r3.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

        goto label01;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public final org.dom4j.tree.ConcurrentReaderHashMap$Entry[] getTableForReading()
    {
        java.lang.Throwable $r2;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] r3;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        org.dom4j.tree.ConcurrentReaderHashMap$BarrierLock $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$BarrierLock barrierLock>;

        entermonitor $r1;

     label1:
        r3 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        exitmonitor $r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isEmpty()
    {
        java.lang.Throwable $r1;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        entermonitor r0;

     label1:
        $i0 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count>;

     label2:
        if $i0 != 0 goto label4;

        $z0 = 1;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r1 := @caughtexception;

        exitmonitor r0;

        goto label6;

     label6:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r1;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        org.dom4j.tree.ConcurrentReaderHashMap$KeySet $r2;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Set keySet>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = new org.dom4j.tree.ConcurrentReaderHashMap$KeySet;

        specialinvoke $r2.<org.dom4j.tree.ConcurrentReaderHashMap$KeySet: void <init>(org.dom4j.tree.ConcurrentReaderHashMap,org.dom4j.tree.ConcurrentReaderHashMap$KeySet)>(r0, null);

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Set keySet> = $r2;

        return $r2;
    }

    public java.util.Enumeration keys()
    {
        org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator $r1;
        org.dom4j.tree.ConcurrentReaderHashMap r0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 = new org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator;

        specialinvoke $r1.<org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator: void <init>(org.dom4j.tree.ConcurrentReaderHashMap)>(r0);

        return $r1;
    }

    public float loadFactor()
    {
        float f0;
        org.dom4j.tree.ConcurrentReaderHashMap r0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        f0 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: float loadFactor>;

        return f0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r9;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry $r1, $r5, $r8;
        java.lang.NullPointerException $r10;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r4, $r7;
        int $i0, $i1, $i2;
        java.lang.Object $r2, $r3, $r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r2 := @parameter0: java.lang.Object;

        $r3 := @parameter1: java.lang.Object;

        if $r3 == null goto label15;

        $i0 = staticinvoke <org.dom4j.tree.ConcurrentReaderHashMap: int hash(java.lang.Object)>($r2);

        $r4 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = lengthof $r4;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $i1 = $i1 & $i0;

        $r1 = $r4[$i1];

        $r5 = $r1;

     label01:
        if $r5 != null goto label02;

        goto label03;

     label02:
        $i2 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: int hash>;

        if $i2 != $i0 goto label14;

        $r6 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: boolean eq(java.lang.Object,java.lang.Object)>($r2, $r6);

        if $z0 == 0 goto label14;

     label03:
        entermonitor r0;

     label04:
        $r7 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        if $r4 != $r7 goto label10;

        if $r5 != null goto label08;

        $r5 = $r4[$i1];

        if $r1 != $r5 goto label10;

        $r8 = new org.dom4j.tree.ConcurrentReaderHashMap$Entry;

        $r5 = $r8;

        specialinvoke $r8.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.dom4j.tree.ConcurrentReaderHashMap$Entry)>($i0, $r2, $r3, $r1);

        $r4[$i1] = $r5;

        $i0 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count>;

        $i0 = $i0 + 1;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count> = $i0;

        $i1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: int threshold>;

        if $i0 < $i1 goto label05;

        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void rehash()>();

        goto label06;

     label05:
        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>($r5);

     label06:
        exitmonitor r0;

     label07:
        return null;

     label08:
        $r6 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        $r8 = $r4[$i1];

        if $r1 != $r8 goto label10;

        if $r6 == null goto label10;

        $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value> = $r3;

        exitmonitor r0;

     label09:
        return $r6;

     label10:
        $r2 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.lang.Object sput(java.lang.Object,java.lang.Object,int)>($r2, $r3, $i0);

        exitmonitor r0;

     label11:
        return $r2;

     label12:
        $r9 := @caughtexception;

        exitmonitor r0;

     label13:
        throw $r9;

     label14:
        $r5 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

        goto label01;

     label15:
        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>()>();

        goto label16;

     label16:
        throw $r10;

        catch java.lang.Throwable from label04 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void putAll(java.util.Map)
    {
        java.lang.Throwable $r7;
        java.util.Map$Entry $r5;
        java.util.Iterator $r3;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        java.util.Set $r2;
        java.util.Map $r1;
        int $i0, $i1;
        java.lang.Object $r4, $r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 := @parameter0: java.util.Map;

        entermonitor r0;

     label01:
        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

     label02:
        if $i0 != 0 goto label03;

        exitmonitor r0;

        return;

     label03:
        $i1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: int threshold>;

        if $i0 >= $i1 goto label07;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

     label05:
        if $z0 != 0 goto label06;

        exitmonitor r0;

        return;

     label06:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        goto label04;

     label07:
        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void rehash()>();

     label08:
        goto label03;

     label09:
        $r7 := @caughtexception;

        exitmonitor r0;

        goto label10;

     label10:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
    }

    public final void recordModification(java.lang.Object)
    {
        java.lang.Throwable $r3;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        java.lang.Object $r2;
        org.dom4j.tree.ConcurrentReaderHashMap$BarrierLock $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$BarrierLock barrierLock>;

        entermonitor $r1;

     label1:
        r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.lang.Object lastWrite> = $r2;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void rehash()
    {
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry $r3, $r6, $r7, $r8;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1;
        java.lang.Object $r1, $r2;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r4 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i0 = lengthof $r4;

        if $i0 < 1073741824 goto label01;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: int threshold> = 2147483647;

        return;

     label01:
        $i2 = $i0 << 1;

        $i1 = -1;

        $i1 = $i2 + $i1;

        $f0 = (float) $i2;

        $f1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: float loadFactor>;

        $f0 = $f0 * $f1;

        $i3 = (int) $f0;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: int threshold> = $i3;

        $r5 = newarray (org.dom4j.tree.ConcurrentReaderHashMap$Entry)[$i2];

        $i2 = 0;

     label02:
        if $i2 < $i0 goto label03;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table> = $r5;

        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>($r5);

        return;

     label03:
        $r6 = $r4[$i2];

        if $r6 == null goto label10;

        $i3 = $r6.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: int hash>;

        $i3 = $i3 & $i1;

        $r3 = $r6.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

        if $r3 != null goto label04;

        $r5[$i3] = $r6;

        goto label10;

     label04:
        $r7 = $r6;

     label05:
        if $r3 != null goto label08;

        $r5[$i3] = $r7;

     label06:
        if $r6 != $r7 goto label07;

        goto label10;

     label07:
        $i3 = $r6.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: int hash>;

        $i4 = $i3 & $i1;

        $r8 = new org.dom4j.tree.ConcurrentReaderHashMap$Entry;

        $r1 = $r6.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $r2 = $r6.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        $r3 = $r5[$i4];

        specialinvoke $r8.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.dom4j.tree.ConcurrentReaderHashMap$Entry)>($i3, $r1, $r2, $r3);

        $r5[$i4] = $r8;

        $r6 = $r6.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

        goto label06;

     label08:
        $i4 = $r3.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: int hash>;

        $i4 = $i4 & $i1;

        if $i4 == $i3 goto label09;

        $r7 = $r3;

        $i3 = $i4;

     label09:
        $r3 = $r3.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

        goto label05;

     label10:
        $i2 = $i2 + 1;

        goto label02;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.Throwable $r9;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry $r4, $r5, $r7, $r10;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r3, $r6;
        int $i0, $i1, $i2;
        java.lang.Object $r1, $r2, $r8;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r2 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <org.dom4j.tree.ConcurrentReaderHashMap: int hash(java.lang.Object)>($r2);

        $r3 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = lengthof $r3;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $i1 = $i1 & $i0;

        $r4 = $r3[$i1];

        $r5 = $r4;

     label01:
        if $r5 != null goto label02;

        goto label03;

     label02:
        $i2 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: int hash>;

        if $i2 != $i0 goto label14;

        $r1 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: boolean eq(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label14;

     label03:
        entermonitor r0;

     label04:
        $r6 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        if $r3 != $r6 goto label10;

        if $r5 != null goto label06;

        $r5 = $r3[$i1];

        if $r4 != $r5 goto label10;

        exitmonitor r0;

     label05:
        return null;

     label06:
        $r1 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        $r7 = $r3[$i1];

        if $r4 != $r7 goto label10;

        if $r1 == null goto label10;

        $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value> = null;

        $i0 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count>;

        $i2 = -1;

        $i0 = $i0 + $i2;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count> = $i0;

        $r7 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

     label07:
        if $r4 != $r5 goto label09;

        $r3[$i1] = $r7;

        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>($r7);

        exitmonitor r0;

     label08:
        return $r1;

     label09:
        $r10 = new org.dom4j.tree.ConcurrentReaderHashMap$Entry;

        $i0 = $r4.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: int hash>;

        $r8 = $r4.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $r2 = $r4.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        specialinvoke $r10.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.dom4j.tree.ConcurrentReaderHashMap$Entry)>($i0, $r8, $r2, $r7);

        $r4 = $r4.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

        $r7 = $r10;

        goto label07;

     label10:
        $r2 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.lang.Object sremove(java.lang.Object,int)>($r2, $i0);

        exitmonitor r0;

     label11:
        return $r2;

     label12:
        $r9 := @caughtexception;

        exitmonitor r0;

     label13:
        throw $r9;

     label14:
        $r5 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

        goto label01;

        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label08 with label12;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public int size()
    {
        java.lang.Throwable $r1;
        int i0;
        org.dom4j.tree.ConcurrentReaderHashMap r0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        entermonitor r0;

     label1:
        i0 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object sput(java.lang.Object, java.lang.Object, int)
    {
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry $r2, $r5, $r7;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r3, $r4, $r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r3 := @parameter0: java.lang.Object;

        $r4 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = lengthof $r1;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $i1 = $i1 & $i0;

        $r2 = $r1[$i1];

        $r5 = $r2;

     label1:
        if $r5 != null goto label4;

        $r7 = new org.dom4j.tree.ConcurrentReaderHashMap$Entry;

        $r5 = $r7;

        specialinvoke $r7.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.dom4j.tree.ConcurrentReaderHashMap$Entry)>($i0, $r3, $r4, $r2);

        $r1[$i1] = $r5;

        $i0 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count>;

        $i0 = $i0 + 1;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count> = $i0;

        $i1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: int threshold>;

        if $i0 < $i1 goto label2;

        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void rehash()>();

        goto label3;

     label2:
        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>($r5);

     label3:
        return null;

     label4:
        $i2 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: int hash>;

        if $i2 != $i0 goto label5;

        $r6 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: boolean eq(java.lang.Object,java.lang.Object)>($r3, $r6);

        if $z0 == 0 goto label5;

        $r3 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value> = $r4;

        return $r3;

     label5:
        $r5 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

        goto label1;
    }

    public java.lang.Object sremove(java.lang.Object, int)
    {
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry $r4, $r5, $r6, $r8;
        org.dom4j.tree.ConcurrentReaderHashMap$Entry[] $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2, $r3, r7;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r2 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: org.dom4j.tree.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = lengthof $r1;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $i1 = $i1 & $i0;

        $r4 = $r1[$i1];

        $r5 = $r4;

     label1:
        if $r5 != null goto label2;

        return null;

     label2:
        $i2 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: int hash>;

        if $i2 != $i0 goto label5;

        $r3 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: boolean eq(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 == 0 goto label5;

        r7 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value> = null;

        $i0 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count>;

        $i2 = -1;

        $i0 = $i0 + $i2;

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: int count> = $i0;

        $r6 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

     label3:
        if $r4 != $r5 goto label4;

        $r1[$i1] = $r6;

        virtualinvoke r0.<org.dom4j.tree.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>($r6);

        return r7;

     label4:
        $r8 = new org.dom4j.tree.ConcurrentReaderHashMap$Entry;

        $i0 = $r4.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: int hash>;

        $r2 = $r4.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $r3 = $r4.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        specialinvoke $r8.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.dom4j.tree.ConcurrentReaderHashMap$Entry)>($i0, $r2, $r3, $r6);

        $r4 = $r4.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

        $r6 = $r8;

        goto label3;

     label5:
        $r5 = $r5.<org.dom4j.tree.ConcurrentReaderHashMap$Entry: org.dom4j.tree.ConcurrentReaderHashMap$Entry next>;

        goto label1;
    }

    public java.util.Collection values()
    {
        org.dom4j.tree.ConcurrentReaderHashMap$Values $r2;
        org.dom4j.tree.ConcurrentReaderHashMap r0;
        java.util.Collection $r1;

        r0 := @this: org.dom4j.tree.ConcurrentReaderHashMap;

        $r1 = r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Collection values>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = new org.dom4j.tree.ConcurrentReaderHashMap$Values;

        specialinvoke $r2.<org.dom4j.tree.ConcurrentReaderHashMap$Values: void <init>(org.dom4j.tree.ConcurrentReaderHashMap,org.dom4j.tree.ConcurrentReaderHashMap$Values)>(r0, null);

        r0.<org.dom4j.tree.ConcurrentReaderHashMap: java.util.Collection values> = $r2;

        return $r2;
    }
}
