public final class com.google.android.material.transition.SlideDistanceProvider extends java.lang.Object implements com.google.android.material.transition.VisibilityAnimatorProvider
{
    public static final int DEFAULT_DISTANCE;
    public int slideDistance;
    public int slideEdge;

    public void <init>(int)
    {
        int $i0, $i1;
        com.google.android.material.transition.SlideDistanceProvider r0;

        r0 := @this: com.google.android.material.transition.SlideDistanceProvider;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = -1;

        r0.<com.google.android.material.transition.SlideDistanceProvider: int slideDistance> = $i1;

        r0.<com.google.android.material.transition.SlideDistanceProvider: int slideEdge> = $i0;

        return;
    }

    public static android.animation.Animator createTranslationAppearAnimator(android.view.View, android.view.View, int, int)
    {
        android.animation.Animator $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1;
        android.view.View $r0, $r1;
        float $f0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        if $i0 == 3 goto label10;

        if $i0 == 5 goto label09;

        if $i0 == 48 goto label08;

        if $i0 == 80 goto label07;

        if $i0 == 8388611 goto label04;

        if $i0 != 8388613 goto label03;

        $z0 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: boolean isRtl(android.view.View)>($r0);

        if $z0 == 0 goto label01;

        $i0 = neg $i1;

        $f0 = (float) $i0;

        goto label02;

     label01:
        $f0 = (float) $i1;

     label02:
        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationXAnimator(android.view.View,float,float)>($r1, $f0, 0.0F);

        return $r2;

     label03:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid slide direction: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label04:
        $z0 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: boolean isRtl(android.view.View)>($r0);

        if $z0 == 0 goto label05;

        $f0 = (float) $i1;

        goto label06;

     label05:
        $i0 = neg $i1;

        $f0 = (float) $i0;

     label06:
        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationXAnimator(android.view.View,float,float)>($r1, $f0, 0.0F);

        return $r2;

     label07:
        $f0 = (float) $i1;

        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationYAnimator(android.view.View,float,float)>($r1, $f0, 0.0F);

        return $r2;

     label08:
        $i0 = neg $i1;

        $f0 = (float) $i0;

        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationYAnimator(android.view.View,float,float)>($r1, $f0, 0.0F);

        return $r2;

     label09:
        $i0 = neg $i1;

        $f0 = (float) $i0;

        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationXAnimator(android.view.View,float,float)>($r1, $f0, 0.0F);

        return $r2;

     label10:
        $f0 = (float) $i1;

        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationXAnimator(android.view.View,float,float)>($r1, $f0, 0.0F);

        return $r2;
    }

    public static android.animation.Animator createTranslationDisappearAnimator(android.view.View, android.view.View, int, int)
    {
        android.animation.Animator $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1;
        android.view.View $r0, $r1;
        float $f0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        if $i0 == 3 goto label10;

        if $i0 == 5 goto label09;

        if $i0 == 48 goto label08;

        if $i0 == 80 goto label07;

        if $i0 == 8388611 goto label04;

        if $i0 != 8388613 goto label03;

        $z0 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: boolean isRtl(android.view.View)>($r0);

        if $z0 == 0 goto label01;

        $f0 = (float) $i1;

        goto label02;

     label01:
        $i0 = neg $i1;

        $f0 = (float) $i0;

     label02:
        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationXAnimator(android.view.View,float,float)>($r1, 0.0F, $f0);

        return $r2;

     label03:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid slide direction: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label04:
        $z0 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: boolean isRtl(android.view.View)>($r0);

        if $z0 == 0 goto label05;

        $i0 = neg $i1;

        $f0 = (float) $i0;

        goto label06;

     label05:
        $f0 = (float) $i1;

     label06:
        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationXAnimator(android.view.View,float,float)>($r1, 0.0F, $f0);

        return $r2;

     label07:
        $i0 = neg $i1;

        $f0 = (float) $i0;

        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationYAnimator(android.view.View,float,float)>($r1, 0.0F, $f0);

        return $r2;

     label08:
        $f0 = (float) $i1;

        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationYAnimator(android.view.View,float,float)>($r1, 0.0F, $f0);

        return $r2;

     label09:
        $f0 = (float) $i1;

        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationXAnimator(android.view.View,float,float)>($r1, 0.0F, $f0);

        return $r2;

     label10:
        $i0 = neg $i1;

        $f0 = (float) $i0;

        $r2 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationXAnimator(android.view.View,float,float)>($r1, 0.0F, $f0);

        return $r2;
    }

    public static android.animation.Animator createTranslationXAnimator(android.view.View, float, float)
    {
        android.animation.PropertyValuesHolder[] $r0;
        android.animation.ObjectAnimator $r5;
        float[] $r3;
        android.util.Property $r1;
        android.animation.PropertyValuesHolder $r4;
        float $f0, $f1;
        android.view.View $r2;

        $r2 := @parameter0: android.view.View;

        $f1 := @parameter1: float;

        $f0 := @parameter2: float;

        $r0 = newarray (android.animation.PropertyValuesHolder)[1];

        $r1 = <android.view.View: android.util.Property TRANSLATION_X>;

        $r3 = newarray (float)[2];

        $r3[0] = $f1;

        $r3[1] = $f0;

        $r4 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])>($r1, $r3);

        $r0[0] = $r4;

        $r5 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,android.animation.PropertyValuesHolder[])>($r2, $r0);

        return $r5;
    }

    public static android.animation.Animator createTranslationYAnimator(android.view.View, float, float)
    {
        android.animation.PropertyValuesHolder[] $r0;
        android.animation.ObjectAnimator $r5;
        float[] $r3;
        android.util.Property $r1;
        android.animation.PropertyValuesHolder $r4;
        float $f0, $f1;
        android.view.View $r2;

        $r2 := @parameter0: android.view.View;

        $f1 := @parameter1: float;

        $f0 := @parameter2: float;

        $r0 = newarray (android.animation.PropertyValuesHolder)[1];

        $r1 = <android.view.View: android.util.Property TRANSLATION_Y>;

        $r3 = newarray (float)[2];

        $r3[0] = $f1;

        $r3[1] = $f0;

        $r4 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])>($r1, $r3);

        $r0[0] = $r4;

        $r5 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,android.animation.PropertyValuesHolder[])>($r2, $r0);

        return $r5;
    }

    private int getSlideDistanceOrDefault(android.content.Context)
    {
        android.content.Context $r1;
        com.google.android.material.transition.SlideDistanceProvider r0;
        int $i0, $i1;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.transition.SlideDistanceProvider;

        $r1 := @parameter0: android.content.Context;

        $i0 = r0.<com.google.android.material.transition.SlideDistanceProvider: int slideDistance>;

        $i1 = -1;

        if $i0 == $i1 goto label1;

        return $i0;

     label1:
        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = <com.google.android.material.R$dimen: int mtrl_transition_shared_axis_slide_distance>;

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getDimensionPixelSize(int)>($i0);

        return $i0;
    }

    public static boolean isRtl(android.view.View)
    {
        int $i0;
        android.view.View $r0;

        $r0 := @parameter0: android.view.View;

        $i0 = staticinvoke <b.i.i.y: int p(android.view.View)>($r0);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public android.animation.Animator createAppear(android.view.ViewGroup, android.view.View)
    {
        android.content.Context $r3;
        com.google.android.material.transition.SlideDistanceProvider r0;
        int $i0, $i1;
        android.view.View $r1;
        android.animation.Animator $r4;
        android.view.ViewGroup $r2;

        r0 := @this: com.google.android.material.transition.SlideDistanceProvider;

        $r2 := @parameter0: android.view.ViewGroup;

        $r1 := @parameter1: android.view.View;

        $i0 = r0.<com.google.android.material.transition.SlideDistanceProvider: int slideEdge>;

        $r3 = virtualinvoke $r1.<android.view.View: android.content.Context getContext()>();

        $i1 = specialinvoke r0.<com.google.android.material.transition.SlideDistanceProvider: int getSlideDistanceOrDefault(android.content.Context)>($r3);

        $r4 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationAppearAnimator(android.view.View,android.view.View,int,int)>($r2, $r1, $i0, $i1);

        return $r4;
    }

    public android.animation.Animator createDisappear(android.view.ViewGroup, android.view.View)
    {
        android.content.Context $r3;
        com.google.android.material.transition.SlideDistanceProvider r0;
        int $i0, $i1;
        android.view.View $r1;
        android.animation.Animator $r4;
        android.view.ViewGroup $r2;

        r0 := @this: com.google.android.material.transition.SlideDistanceProvider;

        $r2 := @parameter0: android.view.ViewGroup;

        $r1 := @parameter1: android.view.View;

        $i0 = r0.<com.google.android.material.transition.SlideDistanceProvider: int slideEdge>;

        $r3 = virtualinvoke $r1.<android.view.View: android.content.Context getContext()>();

        $i1 = specialinvoke r0.<com.google.android.material.transition.SlideDistanceProvider: int getSlideDistanceOrDefault(android.content.Context)>($r3);

        $r4 = staticinvoke <com.google.android.material.transition.SlideDistanceProvider: android.animation.Animator createTranslationDisappearAnimator(android.view.View,android.view.View,int,int)>($r2, $r1, $i0, $i1);

        return $r4;
    }

    public int getSlideDistance()
    {
        int i0;
        com.google.android.material.transition.SlideDistanceProvider r0;

        r0 := @this: com.google.android.material.transition.SlideDistanceProvider;

        i0 = r0.<com.google.android.material.transition.SlideDistanceProvider: int slideDistance>;

        return i0;
    }

    public int getSlideEdge()
    {
        int i0;
        com.google.android.material.transition.SlideDistanceProvider r0;

        r0 := @this: com.google.android.material.transition.SlideDistanceProvider;

        i0 = r0.<com.google.android.material.transition.SlideDistanceProvider: int slideEdge>;

        return i0;
    }

    public void setSlideDistance(int)
    {
        int $i0;
        java.lang.IllegalArgumentException $r1;
        com.google.android.material.transition.SlideDistanceProvider r0;

        r0 := @this: com.google.android.material.transition.SlideDistanceProvider;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        r0.<com.google.android.material.transition.SlideDistanceProvider: int slideDistance> = $i0;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Slide distance must be positive. If attempting to reverse the direction of the slide, use setSlideEdge(int) instead.");

        throw $r1;
    }

    public void setSlideEdge(int)
    {
        int $i0;
        com.google.android.material.transition.SlideDistanceProvider r0;

        r0 := @this: com.google.android.material.transition.SlideDistanceProvider;

        $i0 := @parameter0: int;

        r0.<com.google.android.material.transition.SlideDistanceProvider: int slideEdge> = $i0;

        return;
    }

    public static void <clinit>()
    {
        <com.google.android.material.transition.SlideDistanceProvider: int DEFAULT_DISTANCE> = -1;

        return;
    }
}
