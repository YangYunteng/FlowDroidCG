public final class l.p extends l.c
{
    public final java.net.Socket k;

    public void <init>(java.net.Socket)
    {
        java.net.Socket $r1;
        l.p r0;

        r0 := @this: l.p;

        $r1 := @parameter0: java.net.Socket;

        r0.<l.p: java.net.Socket k> = $r1;

        specialinvoke r0.<l.c: void <init>()>();

        return;
    }

    public java.io.IOException b(java.io.IOException)
    {
        java.io.IOException $r1;
        l.p r0;
        java.net.SocketTimeoutException $r2;

        r0 := @this: l.p;

        $r1 := @parameter0: java.io.IOException;

        $r2 = new java.net.SocketTimeoutException;

        specialinvoke $r2.<java.net.SocketTimeoutException: void <init>(java.lang.String)>("timeout");

        if $r1 == null goto label1;

        virtualinvoke $r2.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>($r1);

     label1:
        return $r2;
    }

    public void j()
    {
        java.net.Socket $r1;
        java.lang.AssertionError $r2;
        java.util.logging.Logger $r3;
        java.lang.Exception $r7;
        l.p r0;
        java.util.logging.Level $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: l.p;

     label1:
        $r1 = r0.<l.p: java.net.Socket k>;

     label2:
        virtualinvoke $r1.<java.net.Socket: void close()>();

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        $z0 = staticinvoke <l.q: boolean a(java.lang.AssertionError)>($r2);

        if $z0 == 0 goto label5;

        $r3 = <l.q: java.util.logging.Logger a>;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close timed out socket ");

        $r1 = r0.<l.p: java.net.Socket k>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r4, $r6, $r2);

        return;

     label5:
        throw $r2;

     label6:
        $r7 := @caughtexception;

        $r3 = <l.q: java.util.logging.Logger a>;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close timed out socket ");

        $r1 = r0.<l.p: java.net.Socket k>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r4, $r6, $r7);

        return;

        catch java.lang.Exception from label1 to label3 with label6;
        catch java.lang.AssertionError from label2 to label3 with label4;
    }
}
