public class project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter extends project.android.imageprocessing.filter.TwoPassMultiPixelFilter
{
    public static final java.lang.String UNIFORM_BLUR_SIZE;
    public float blurSize;
    public int blurSizeHandle;

    public void <init>(float)
    {
        float $f0;
        project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter r0;

        r0 := @this: project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter;

        $f0 := @parameter0: float;

        specialinvoke r0.<project.android.imageprocessing.filter.TwoPassMultiPixelFilter: void <init>()>();

        r0.<project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter: float blurSize> = $f0;

        return;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter r0;

        r0 := @this: project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter;

        return "precision mediump float;\nuniform sampler2D u_Texture0;\nvarying vec2 v_TexCoord;\nuniform float u_BlurSize;\nuniform float u_TexelWidth;\nuniform float u_TexelHeight;\nvoid main(){\n   vec2 singleStepOffset = vec2(u_TexelWidth, u_TexelHeight);\n   int multiplier = 0;\n   vec2 blurStep = vec2(0,0);\n   vec2 blurCoordinates[9];   for(int i = 0; i < 9; i++) {\n     multiplier = (i - 4);\n     blurStep = float(multiplier) * singleStepOffset;\n     blurCoordinates[i] = v_TexCoord.xy + blurStep;\n   }\n   float sum = 0.0;\n   vec4 color = texture2D(u_Texture0, blurCoordinates[4]);\n   sum += texture2D(u_Texture0, blurCoordinates[0]).r * 0.05;\n   sum += texture2D(u_Texture0, blurCoordinates[1]).r * 0.09;\n   sum += texture2D(u_Texture0, blurCoordinates[2]).r * 0.12;\n   sum += texture2D(u_Texture0, blurCoordinates[3]).r * 0.15;\n   sum += color.r * 0.18;\n   sum += texture2D(u_Texture0, blurCoordinates[5]).r * 0.15;\n   sum += texture2D(u_Texture0, blurCoordinates[6]).r * 0.12;\n   sum += texture2D(u_Texture0, blurCoordinates[7]).r * 0.09;\n   sum += texture2D(u_Texture0, blurCoordinates[8]).r * 0.05;\n   gl_FragColor = vec4(vec3(sum), color.a);\n}\n";
    }

    public void initShaderHandles()
    {
        int $i0;
        project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter r0;

        r0 := @this: project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter;

        specialinvoke r0.<project.android.imageprocessing.filter.TwoPassMultiPixelFilter: void initShaderHandles()>();

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_BlurSize");

        r0.<project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter: int blurSizeHandle> = $i0;

        return;
    }

    public void passShaderValues()
    {
        int $i0;
        float $f0;
        project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter r0;

        r0 := @this: project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter;

        specialinvoke r0.<project.android.imageprocessing.filter.TwoPassMultiPixelFilter: void passShaderValues()>();

        $i0 = r0.<project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter: int blurSizeHandle>;

        $f0 = r0.<project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter: float blurSize>;

        staticinvoke <android.opengl.GLES20: void glUniform1f(int,float)>($i0, $f0);

        return;
    }

    public static void <clinit>()
    {
        <project.android.imageprocessing.filter.processing.SingleComponentGaussianBlurFilter: java.lang.String UNIFORM_BLUR_SIZE> = "u_BlurSize";

        return;
    }
}
