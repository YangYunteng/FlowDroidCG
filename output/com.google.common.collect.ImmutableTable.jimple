public abstract class com.google.common.collect.ImmutableTable extends com.google.common.collect.AbstractTable implements java.io.Serializable
{

    public void <init>()
    {
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        specialinvoke r0.<com.google.common.collect.AbstractTable: void <init>()>();

        return;
    }

    public static com.google.common.collect.ImmutableTable$Builder a()
    {
        com.google.common.collect.ImmutableTable$Builder $r0;

        $r0 = new com.google.common.collect.ImmutableTable$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableTable$Builder: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.ImmutableTable$Builder a(com.google.common.collect.ImmutableTable$Builder, com.google.common.collect.ImmutableTable$Builder)
    {
        com.google.common.collect.ImmutableTable$Builder $r0, $r1;

        $r1 := @parameter0: com.google.common.collect.ImmutableTable$Builder;

        $r0 := @parameter1: com.google.common.collect.ImmutableTable$Builder;

        $r1 = virtualinvoke $r1.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable$Builder combine(com.google.common.collect.ImmutableTable$Builder)>($r0);

        return $r1;
    }

    public static com.google.common.collect.ImmutableTable$CollectorState a(java.util.function.BinaryOperator, com.google.common.collect.ImmutableTable$CollectorState, com.google.common.collect.ImmutableTable$CollectorState)
    {
        com.google.common.collect.ImmutableTable$CollectorState $r0, $r1;
        java.util.function.BinaryOperator $r2;

        $r2 := @parameter0: java.util.function.BinaryOperator;

        $r0 := @parameter1: com.google.common.collect.ImmutableTable$CollectorState;

        $r1 := @parameter2: com.google.common.collect.ImmutableTable$CollectorState;

        $r0 = virtualinvoke $r0.<com.google.common.collect.ImmutableTable$CollectorState: com.google.common.collect.ImmutableTable$CollectorState combine(com.google.common.collect.ImmutableTable$CollectorState,java.util.function.BinaryOperator)>($r1, $r2);

        return $r0;
    }

    public static com.google.common.collect.ImmutableTable a(com.google.common.collect.ImmutableTable$Builder)
    {
        com.google.common.collect.ImmutableTable$Builder $r1;
        com.google.common.collect.ImmutableTable $r0;

        $r1 := @parameter0: com.google.common.collect.ImmutableTable$Builder;

        $r0 = virtualinvoke $r1.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable build()>();

        return $r0;
    }

    public static com.google.common.collect.ImmutableTable a(com.google.common.collect.ImmutableTable$CollectorState)
    {
        com.google.common.collect.ImmutableTable$CollectorState $r1;
        com.google.common.collect.ImmutableTable $r0;

        $r1 := @parameter0: com.google.common.collect.ImmutableTable$CollectorState;

        $r0 = virtualinvoke $r1.<com.google.common.collect.ImmutableTable$CollectorState: com.google.common.collect.ImmutableTable toTable()>();

        return $r0;
    }

    public static void a(java.util.function.Function, java.util.function.Function, java.util.function.Function, com.google.common.collect.ImmutableTable$Builder, java.lang.Object)
    {
        com.google.common.collect.ImmutableTable$Builder $r0;
        java.lang.Object $r1, $r5, $r6;
        java.util.function.Function $r2, $r3, $r4;

        $r2 := @parameter0: java.util.function.Function;

        $r3 := @parameter1: java.util.function.Function;

        $r4 := @parameter2: java.util.function.Function;

        $r0 := @parameter3: com.google.common.collect.ImmutableTable$Builder;

        $r1 := @parameter4: java.lang.Object;

        $r5 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        $r6 = interfaceinvoke $r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        $r1 = interfaceinvoke $r4.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        virtualinvoke $r0.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable$Builder put(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r6, $r1);

        return;
    }

    public static void a(java.util.function.Function, java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator, com.google.common.collect.ImmutableTable$CollectorState, java.lang.Object)
    {
        com.google.common.collect.ImmutableTable$CollectorState $r1;
        java.util.function.Function $r3, $r4, $r5;
        java.util.function.BinaryOperator $r0;
        java.lang.Object $r2, $r6, $r7;

        $r3 := @parameter0: java.util.function.Function;

        $r4 := @parameter1: java.util.function.Function;

        $r5 := @parameter2: java.util.function.Function;

        $r0 := @parameter3: java.util.function.BinaryOperator;

        $r1 := @parameter4: com.google.common.collect.ImmutableTable$CollectorState;

        $r2 := @parameter5: java.lang.Object;

        $r6 = interfaceinvoke $r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r2);

        $r7 = interfaceinvoke $r4.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r2);

        $r2 = interfaceinvoke $r5.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r2);

        virtualinvoke $r1.<com.google.common.collect.ImmutableTable$CollectorState: void put(java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)>($r6, $r7, $r2, $r0);

        return;
    }

    public static com.google.common.collect.ImmutableTable access$000(java.lang.Iterable)
    {
        java.lang.Iterable $r1;
        com.google.common.collect.ImmutableTable $r0;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable copyOf(java.lang.Iterable)>($r1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableTable$CollectorState b()
    {
        com.google.common.collect.ImmutableTable$CollectorState $r0;

        $r0 = new com.google.common.collect.ImmutableTable$CollectorState;

        specialinvoke $r0.<com.google.common.collect.ImmutableTable$CollectorState: void <init>(com.google.common.collect.ImmutableTable$1)>(null);

        return $r0;
    }

    public static com.google.common.collect.ImmutableTable$Builder builder()
    {
        com.google.common.collect.ImmutableTable$Builder $r0;

        $r0 = new com.google.common.collect.ImmutableTable$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableTable$Builder: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.Table$Cell cellOf(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.Table$Cell $r2;
        java.lang.Object $r0, $r1, $r3;

        $r3 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = staticinvoke <com.google.common.collect.Tables: com.google.common.collect.Table$Cell immutableCell(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r0, $r1);

        return $r2;
    }

    public static com.google.common.collect.ImmutableTable copyOf(com.google.common.collect.Table)
    {
        com.google.common.collect.ImmutableTable $r1;
        java.util.Set $r2;
        com.google.common.collect.Table $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.Table;

        $z0 = $r0 instanceof com.google.common.collect.ImmutableTable;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.collect.ImmutableTable) $r0;

        return $r1;

     label1:
        $r2 = interfaceinvoke $r0.<com.google.common.collect.Table: java.util.Set cellSet()>();

        $r1 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable copyOf(java.lang.Iterable)>($r2);

        return $r1;
    }

    public static com.google.common.collect.ImmutableTable copyOf(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableTable$Builder $r1;
        java.util.Iterator $r2;
        com.google.common.collect.ImmutableTable $r5;
        com.google.common.collect.Table$Cell $r4;
        java.lang.Object $r3;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable$Builder builder()>();

        $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.common.collect.Table$Cell) $r3;

        virtualinvoke $r1.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable$Builder put(com.google.common.collect.Table$Cell)>($r4);

        goto label1;

     label2:
        $r5 = virtualinvoke $r1.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable build()>();

        return $r5;
    }

    public static com.google.common.collect.ImmutableTable of()
    {
        com.google.common.collect.ImmutableTable r0;

        r0 = <com.google.common.collect.SparseImmutableTable: com.google.common.collect.ImmutableTable EMPTY>;

        return r0;
    }

    public static com.google.common.collect.ImmutableTable of(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1, $r2;
        com.google.common.collect.SingletonImmutableTable $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = new com.google.common.collect.SingletonImmutableTable;

        specialinvoke $r3.<com.google.common.collect.SingletonImmutableTable: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        return $r3;
    }

    public static java.util.stream.Collector toImmutableTable(java.util.function.Function, java.util.function.Function, java.util.function.Function)
    {
        java.util.function.Function $r3, $r4, $r5;
        java.util.stream.Collector $r2;
        c.i.b.c.Ga $r1;
        c.i.b.c.Ha $r6;
        c.i.b.c.Ea $r0;
        c.i.b.c.Fa $r7;
        java.util.stream.Collector$Characteristics[] $r8;

        $r3 := @parameter0: java.util.function.Function;

        $r4 := @parameter1: java.util.function.Function;

        $r5 := @parameter2: java.util.function.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        $r0 = <c.i.b.c.Ea: c.i.b.c.Ea a>;

        $r1 = new c.i.b.c.Ga;

        specialinvoke $r1.<c.i.b.c.Ga: void <init>(java.util.function.Function,java.util.function.Function,java.util.function.Function)>($r3, $r4, $r5);

        $r6 = <c.i.b.c.Ha: c.i.b.c.Ha a>;

        $r7 = <c.i.b.c.Fa: c.i.b.c.Fa a>;

        $r8 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r2 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r0, $r1, $r6, $r7, $r8);

        return $r2;
    }

    public static java.util.stream.Collector toImmutableTable(java.util.function.Function, java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator)
    {
        c.i.b.c.Ia $r2;
        c.i.b.c.Ja $r8;
        java.util.function.Function $r4, $r5, $r6;
        java.util.function.BinaryOperator $r0;
        c.i.b.c.Ca $r7;
        c.i.b.c.Da $r1;
        java.util.stream.Collector $r3;
        java.util.stream.Collector$Characteristics[] $r9;

        $r4 := @parameter0: java.util.function.Function;

        $r5 := @parameter1: java.util.function.Function;

        $r6 := @parameter2: java.util.function.Function;

        $r0 := @parameter3: java.util.function.BinaryOperator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r6);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = <c.i.b.c.Da: c.i.b.c.Da a>;

        $r2 = new c.i.b.c.Ia;

        specialinvoke $r2.<c.i.b.c.Ia: void <init>(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)>($r4, $r5, $r6, $r0);

        $r7 = new c.i.b.c.Ca;

        specialinvoke $r7.<c.i.b.c.Ca: void <init>(java.util.function.BinaryOperator)>($r0);

        $r8 = <c.i.b.c.Ja: c.i.b.c.Ja a>;

        $r9 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r3 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r1, $r2, $r7, $r8, $r9);

        return $r3;
    }

    public final com.google.common.collect.UnmodifiableIterator cellIterator()
    {
        java.lang.AssertionError $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("should never be called");

        throw $r1;
    }

    public volatile java.util.Iterator cellIterator()
    {
        com.google.common.collect.UnmodifiableIterator $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.UnmodifiableIterator cellIterator()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableSet cellSet()
    {
        java.util.Set $r1;
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.util.Set cellSet()>();

        $r2 = (com.google.common.collect.ImmutableSet) $r1;

        return $r2;
    }

    public volatile java.util.Set cellSet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableSet cellSet()>();

        return $r1;
    }

    public final java.util.Spliterator cellSpliterator()
    {
        java.lang.AssertionError $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("should never be called");

        throw $r1;
    }

    public final void clear()
    {
        java.lang.UnsupportedOperationException $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public com.google.common.collect.ImmutableMap column(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r2, $r3;
        com.google.common.collect.ImmutableTable r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap columnMap()>();

        $r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        $r2 = (com.google.common.collect.ImmutableMap) $r1;

        $r3 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        $r1 = staticinvoke <com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (com.google.common.collect.ImmutableMap) $r1;

        return $r2;
    }

    public volatile java.util.Map column(java.lang.Object)
    {
        java.lang.Object $r2;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap column(java.lang.Object)>($r2);

        return $r1;
    }

    public com.google.common.collect.ImmutableSet columnKeySet()
    {
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap columnMap()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r2;
    }

    public volatile java.util.Set columnKeySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableSet columnKeySet()>();

        return $r1;
    }

    public abstract com.google.common.collect.ImmutableMap columnMap();

    public volatile java.util.Map columnMap()
    {
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap columnMap()>();

        return $r1;
    }

    public boolean contains(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean containsColumn(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableTable r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractTable: boolean containsColumn(java.lang.Object)>($r1);

        return $z0;
    }

    public volatile boolean containsRow(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableTable r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractTable: boolean containsRow(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.google.common.collect.ImmutableTable r0;
        com.google.common.collect.ImmutableCollection $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableCollection values()>();

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public abstract com.google.common.collect.ImmutableSet createCellSet();

    public volatile java.util.Set createCellSet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableSet createCellSet()>();

        return $r1;
    }

    public abstract com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm();

    public abstract com.google.common.collect.ImmutableCollection createValues();

    public volatile java.util.Collection createValues()
    {
        com.google.common.collect.ImmutableCollection $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableCollection createValues()>();

        return $r1;
    }

    public volatile boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.ImmutableTable r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractTable: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public volatile java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.lang.Object get(java.lang.Object,java.lang.Object)>($r2, $r1);

        return $r2;
    }

    public volatile int hashCode()
    {
        int $i0;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $i0 = specialinvoke r0.<com.google.common.collect.AbstractTable: int hashCode()>();

        return $i0;
    }

    public volatile boolean isEmpty()
    {
        com.google.common.collect.ImmutableTable r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $z0 = specialinvoke r0.<com.google.common.collect.AbstractTable: boolean isEmpty()>();

        return $z0;
    }

    public final java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r4;
        com.google.common.collect.ImmutableTable r0;
        java.lang.Object $r1, $r2, $r3;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public final void putAll(com.google.common.collect.Table)
    {
        java.lang.UnsupportedOperationException $r2;
        com.google.common.collect.Table $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: com.google.common.collect.Table;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        com.google.common.collect.ImmutableTable r0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public com.google.common.collect.ImmutableMap row(java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r2, $r3;
        com.google.common.collect.ImmutableTable r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap rowMap()>();

        $r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r1);

        $r2 = (com.google.common.collect.ImmutableMap) $r1;

        $r3 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        $r1 = staticinvoke <com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r2 = (com.google.common.collect.ImmutableMap) $r1;

        return $r2;
    }

    public volatile java.util.Map row(java.lang.Object)
    {
        java.lang.Object $r2;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap row(java.lang.Object)>($r2);

        return $r1;
    }

    public com.google.common.collect.ImmutableSet rowKeySet()
    {
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap rowMap()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r2;
    }

    public volatile java.util.Set rowKeySet()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableSet rowKeySet()>();

        return $r1;
    }

    public abstract com.google.common.collect.ImmutableMap rowMap();

    public volatile java.util.Map rowMap()
    {
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableMap rowMap()>();

        return $r1;
    }

    public volatile java.lang.String toString()
    {
        java.lang.String $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.lang.String toString()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableCollection values()
    {
        com.google.common.collect.ImmutableCollection $r2;
        com.google.common.collect.ImmutableTable r0;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractTable: java.util.Collection values()>();

        $r2 = (com.google.common.collect.ImmutableCollection) $r1;

        return $r2;
    }

    public volatile java.util.Collection values()
    {
        com.google.common.collect.ImmutableCollection $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableCollection values()>();

        return $r1;
    }

    public final java.util.Iterator valuesIterator()
    {
        java.lang.AssertionError $r1;
        com.google.common.collect.ImmutableTable r0;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("should never be called");

        throw $r1;
    }

    public final java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableTable r0;
        com.google.common.collect.ImmutableTable$SerializedForm $r1;

        r0 := @this: com.google.common.collect.ImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm()>();

        return $r1;
    }
}
