public class com.google.android.material.chip.ChipDrawable extends com.google.android.material.shape.MaterialShapeDrawable implements b.i.c.a.b, android.graphics.drawable.Drawable$Callback, com.google.android.material.internal.TextDrawableHelper$TextDrawableDelegate
{
    public static final boolean DEBUG;
    public static final int[] DEFAULT_STATE;
    public static final java.lang.String NAMESPACE_APP;
    public static final android.graphics.drawable.ShapeDrawable closeIconRippleMask;
    public int alpha;
    public boolean checkable;
    public android.graphics.drawable.Drawable checkedIcon;
    public android.content.res.ColorStateList checkedIconTint;
    public boolean checkedIconVisible;
    public android.content.res.ColorStateList chipBackgroundColor;
    public float chipCornerRadius;
    public float chipEndPadding;
    public android.graphics.drawable.Drawable chipIcon;
    public float chipIconSize;
    public android.content.res.ColorStateList chipIconTint;
    public boolean chipIconVisible;
    public float chipMinHeight;
    public final android.graphics.Paint chipPaint;
    public float chipStartPadding;
    public android.content.res.ColorStateList chipStrokeColor;
    public float chipStrokeWidth;
    public android.content.res.ColorStateList chipSurfaceColor;
    public android.graphics.drawable.Drawable closeIcon;
    public java.lang.CharSequence closeIconContentDescription;
    public float closeIconEndPadding;
    public android.graphics.drawable.Drawable closeIconRipple;
    public float closeIconSize;
    public float closeIconStartPadding;
    public int[] closeIconStateSet;
    public android.content.res.ColorStateList closeIconTint;
    public boolean closeIconVisible;
    public android.graphics.ColorFilter colorFilter;
    public android.content.res.ColorStateList compatRippleColor;
    public final android.content.Context context;
    public boolean currentChecked;
    public int currentChipBackgroundColor;
    public int currentChipStrokeColor;
    public int currentChipSurfaceColor;
    public int currentCompatRippleColor;
    public int currentCompositeSurfaceBackgroundColor;
    public int currentTextColor;
    public int currentTint;
    public final android.graphics.Paint debugPaint;
    public java.lang.ref.WeakReference delegate;
    public final android.graphics.Paint$FontMetrics fontMetrics;
    public boolean hasChipIconTint;
    public com.google.android.material.animation.MotionSpec hideMotionSpec;
    public float iconEndPadding;
    public float iconStartPadding;
    public boolean isShapeThemingEnabled;
    public int maxWidth;
    public final android.graphics.PointF pointF;
    public final android.graphics.RectF rectF;
    public android.content.res.ColorStateList rippleColor;
    public final android.graphics.Path shapePath;
    public boolean shouldDrawText;
    public com.google.android.material.animation.MotionSpec showMotionSpec;
    public java.lang.CharSequence text;
    public final com.google.android.material.internal.TextDrawableHelper textDrawableHelper;
    public float textEndPadding;
    public float textStartPadding;
    public android.content.res.ColorStateList tint;
    public android.graphics.PorterDuffColorFilter tintFilter;
    public android.graphics.PorterDuff$Mode tintMode;
    public android.text.TextUtils$TruncateAt truncateAt;
    public boolean useCompatRipple;

    static void <clinit>()
    {
        android.graphics.drawable.ShapeDrawable $r2;
        android.graphics.drawable.shapes.OvalShape $r0;
        int[] $r1;

        <com.google.android.material.chip.ChipDrawable: java.lang.String NAMESPACE_APP> = "http://schemas.android.com/apk/res-auto";

        <com.google.android.material.chip.ChipDrawable: boolean DEBUG> = 0;

        $r1 = newarray (int)[1];

        $r1[0] = 16842910;

        <com.google.android.material.chip.ChipDrawable: int[] DEFAULT_STATE> = $r1;

        $r2 = new android.graphics.drawable.ShapeDrawable;

        $r0 = new android.graphics.drawable.shapes.OvalShape;

        specialinvoke $r0.<android.graphics.drawable.shapes.OvalShape: void <init>()>();

        specialinvoke $r2.<android.graphics.drawable.ShapeDrawable: void <init>(android.graphics.drawable.shapes.Shape)>($r0);

        <com.google.android.material.chip.ChipDrawable: android.graphics.drawable.ShapeDrawable closeIconRippleMask> = $r2;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.content.Context $r1;
        android.graphics.Path $r16;
        android.graphics.PointF $r15;
        com.google.android.material.internal.TextDrawableHelper $r5, $r18;
        android.graphics.Paint$Style $r9;
        android.util.AttributeSet $r2;
        int[] $r10;
        android.graphics.Paint$FontMetrics $r13;
        int $i0, $i1;
        java.lang.ref.WeakReference $r17;
        boolean $z0;
        android.graphics.RectF $r14;
        android.graphics.drawable.ShapeDrawable $r11;
        android.graphics.PorterDuff$Mode $r4;
        android.util.DisplayMetrics $r8;
        com.google.android.material.chip.ChipDrawable r0;
        android.text.TextPaint $r6;
        float $f0;
        android.graphics.Paint $r3, $r12;
        android.content.res.Resources $r7;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        specialinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void <init>(android.content.Context,android.util.AttributeSet,int,int)>($r1, $r2, $i0, $i1);

        r0.<com.google.android.material.chip.ChipDrawable: float chipCornerRadius> = -1.0F;

        $r12 = new android.graphics.Paint;

        specialinvoke $r12.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint> = $r12;

        $r13 = new android.graphics.Paint$FontMetrics;

        specialinvoke $r13.<android.graphics.Paint$FontMetrics: void <init>()>();

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint$FontMetrics fontMetrics> = $r13;

        $r14 = new android.graphics.RectF;

        specialinvoke $r14.<android.graphics.RectF: void <init>()>();

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF> = $r14;

        $r15 = new android.graphics.PointF;

        specialinvoke $r15.<android.graphics.PointF: void <init>()>();

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.PointF pointF> = $r15;

        $r16 = new android.graphics.Path;

        specialinvoke $r16.<android.graphics.Path: void <init>()>();

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Path shapePath> = $r16;

        r0.<com.google.android.material.chip.ChipDrawable: int alpha> = 255;

        $r4 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.PorterDuff$Mode tintMode> = $r4;

        $r17 = new java.lang.ref.WeakReference;

        specialinvoke $r17.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(null);

        r0.<com.google.android.material.chip.ChipDrawable: java.lang.ref.WeakReference delegate> = $r17;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void initializeElevationOverlay(android.content.Context)>($r1);

        r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context> = $r1;

        $r18 = new com.google.android.material.internal.TextDrawableHelper;

        specialinvoke $r18.<com.google.android.material.internal.TextDrawableHelper: void <init>(com.google.android.material.internal.TextDrawableHelper$TextDrawableDelegate)>(r0);

        r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper> = $r18;

        r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence text> = "";

        $r5 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r6 = virtualinvoke $r5.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        $r7 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r8.<android.util.DisplayMetrics: float density>;

        $r6.<android.text.TextPaint: float density> = $f0;

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint debugPaint> = null;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        if $r3 == null goto label1;

        $r9 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r9);

     label1:
        $r10 = <com.google.android.material.chip.ChipDrawable: int[] DEFAULT_STATE>;

        virtualinvoke r0.<android.graphics.drawable.Drawable: boolean setState(int[])>($r10);

        $r10 = <com.google.android.material.chip.ChipDrawable: int[] DEFAULT_STATE>;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean setCloseIconState(int[])>($r10);

        r0.<com.google.android.material.chip.ChipDrawable: boolean shouldDrawText> = 1;

        $z0 = <com.google.android.material.ripple.RippleUtils: boolean USE_FRAMEWORK_RIPPLE>;

        if $z0 == 0 goto label2;

        $r11 = <com.google.android.material.chip.ChipDrawable: android.graphics.drawable.ShapeDrawable closeIconRippleMask>;

        $i0 = -1;

        virtualinvoke $r11.<android.graphics.drawable.ShapeDrawable: void setTint(int)>($i0);

     label2:
        return;
    }

    private void applyChildDrawable(android.graphics.drawable.Drawable)
    {
        android.content.res.ColorStateList $r4;
        int[] $r3;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        android.graphics.drawable.Drawable $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        if $r1 != null goto label1;

        return;

     label1:
        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        $i0 = staticinvoke <b.i.c.a.a: int e(android.graphics.drawable.Drawable)>(r0);

        staticinvoke <b.i.c.a.a: boolean a(android.graphics.drawable.Drawable,int)>($r1, $i0);

        $i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getLevel()>();

        virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setLevel(int)>($i0);

        $z0 = virtualinvoke r0.<android.graphics.drawable.Drawable: boolean isVisible()>();

        virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z0, 0);

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        if $r1 != $r2 goto label3;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: int[] getCloseIconState()>();

        virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3);

     label2:
        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList closeIconTint>;

        staticinvoke <b.i.c.a.a: void a(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($r1, $r4);

        return;

     label3:
        $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label4;

        $r3 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3);

     label4:
        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        if $r1 != $r2 goto label5;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean hasChipIconTint>;

        if $z0 == 0 goto label5;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipIconTint>;

        staticinvoke <b.i.c.a.a: void a(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($r2, $r4);

     label5:
        return;
    }

    private void calculateChipIconBounds(android.graphics.Rect, android.graphics.RectF)
    {
        android.graphics.RectF $r1;
        android.graphics.Rect $r2;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0, $f1, $f2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 := @parameter0: android.graphics.Rect;

        $r1 := @parameter1: android.graphics.RectF;

        virtualinvoke $r1.<android.graphics.RectF: void setEmpty()>();

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z0 == 0 goto label4;

     label1:
        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipStartPadding>;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float iconStartPadding>;

        $f0 = $f0 + $f1;

        $i0 = staticinvoke <b.i.c.a.a: int e(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label2;

        $i0 = $r2.<android.graphics.Rect: int left>;

        $f1 = (float) $i0;

        $f0 = $f1 + $f0;

        $r1.<android.graphics.RectF: float left> = $f0;

        $f0 = $r1.<android.graphics.RectF: float left>;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipIconSize>;

        $f0 = $f0 + $f1;

        $r1.<android.graphics.RectF: float right> = $f0;

        goto label3;

     label2:
        $i0 = $r2.<android.graphics.Rect: int right>;

        $f1 = (float) $i0;

        $f0 = $f1 - $f0;

        $r1.<android.graphics.RectF: float right> = $f0;

        $f0 = $r1.<android.graphics.RectF: float right>;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipIconSize>;

        $f0 = $f0 - $f1;

        $r1.<android.graphics.RectF: float left> = $f0;

     label3:
        $f1 = virtualinvoke $r2.<android.graphics.Rect: float exactCenterY()>();

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipIconSize>;

        $f2 = $f0 / 2.0F;

        $f1 = $f1 - $f2;

        $r1.<android.graphics.RectF: float top> = $f1;

        $f1 = $r1.<android.graphics.RectF: float top>;

        $f0 = $f1 + $f0;

        $r1.<android.graphics.RectF: float bottom> = $f0;

     label4:
        return;
    }

    private void calculateChipTouchBounds(android.graphics.Rect, android.graphics.RectF)
    {
        android.graphics.RectF $r1;
        android.graphics.Rect $r2;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 := @parameter0: android.graphics.Rect;

        $r1 := @parameter1: android.graphics.RectF;

        virtualinvoke $r1.<android.graphics.RectF: void set(android.graphics.Rect)>($r2);

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label2;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipEndPadding>;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconEndPadding>;

        $f0 = $f0 + $f1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconSize>;

        $f0 = $f0 + $f1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconStartPadding>;

        $f0 = $f0 + $f1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float textEndPadding>;

        $f0 = $f0 + $f1;

        $i0 = staticinvoke <b.i.c.a.a: int e(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label1;

        $i0 = $r2.<android.graphics.Rect: int right>;

        $f1 = (float) $i0;

        $f0 = $f1 - $f0;

        $r1.<android.graphics.RectF: float right> = $f0;

        return;

     label1:
        $i0 = $r2.<android.graphics.Rect: int left>;

        $f1 = (float) $i0;

        $f0 = $f1 + $f0;

        $r1.<android.graphics.RectF: float left> = $f0;

     label2:
        return;
    }

    private void calculateCloseIconBounds(android.graphics.Rect, android.graphics.RectF)
    {
        android.graphics.RectF $r1;
        android.graphics.Rect $r2;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0, $f1, $f2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 := @parameter0: android.graphics.Rect;

        $r1 := @parameter1: android.graphics.RectF;

        virtualinvoke $r1.<android.graphics.RectF: void setEmpty()>();

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label3;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipEndPadding>;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconEndPadding>;

        $f0 = $f0 + $f1;

        $i0 = staticinvoke <b.i.c.a.a: int e(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label1;

        $i0 = $r2.<android.graphics.Rect: int right>;

        $f1 = (float) $i0;

        $f0 = $f1 - $f0;

        $r1.<android.graphics.RectF: float right> = $f0;

        $f0 = $r1.<android.graphics.RectF: float right>;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconSize>;

        $f0 = $f0 - $f1;

        $r1.<android.graphics.RectF: float left> = $f0;

        goto label2;

     label1:
        $i0 = $r2.<android.graphics.Rect: int left>;

        $f1 = (float) $i0;

        $f0 = $f1 + $f0;

        $r1.<android.graphics.RectF: float left> = $f0;

        $f0 = $r1.<android.graphics.RectF: float left>;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconSize>;

        $f0 = $f0 + $f1;

        $r1.<android.graphics.RectF: float right> = $f0;

     label2:
        $f1 = virtualinvoke $r2.<android.graphics.Rect: float exactCenterY()>();

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconSize>;

        $f2 = $f0 / 2.0F;

        $f1 = $f1 - $f2;

        $r1.<android.graphics.RectF: float top> = $f1;

        $f1 = $r1.<android.graphics.RectF: float top>;

        $f0 = $f1 + $f0;

        $r1.<android.graphics.RectF: float bottom> = $f0;

     label3:
        return;
    }

    private void calculateCloseIconTouchBounds(android.graphics.Rect, android.graphics.RectF)
    {
        android.graphics.RectF $r1;
        android.graphics.Rect $r2;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 := @parameter0: android.graphics.Rect;

        $r1 := @parameter1: android.graphics.RectF;

        virtualinvoke $r1.<android.graphics.RectF: void setEmpty()>();

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label3;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipEndPadding>;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconEndPadding>;

        $f1 = $f1 + $f0;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconSize>;

        $f1 = $f1 + $f0;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconStartPadding>;

        $f1 = $f1 + $f0;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float textEndPadding>;

        $f1 = $f1 + $f0;

        $i0 = staticinvoke <b.i.c.a.a: int e(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label1;

        $i0 = $r2.<android.graphics.Rect: int right>;

        $f0 = (float) $i0;

        $r1.<android.graphics.RectF: float right> = $f0;

        $f0 = $r1.<android.graphics.RectF: float right>;

        $f1 = $f0 - $f1;

        $r1.<android.graphics.RectF: float left> = $f1;

        goto label2;

     label1:
        $i0 = $r2.<android.graphics.Rect: int left>;

        $f0 = (float) $i0;

        $r1.<android.graphics.RectF: float left> = $f0;

        $f0 = (float) $i0;

        $f1 = $f0 + $f1;

        $r1.<android.graphics.RectF: float right> = $f1;

     label2:
        $i0 = $r2.<android.graphics.Rect: int top>;

        $f1 = (float) $i0;

        $r1.<android.graphics.RectF: float top> = $f1;

        $i0 = $r2.<android.graphics.Rect: int bottom>;

        $f1 = (float) $i0;

        $r1.<android.graphics.RectF: float bottom> = $f1;

     label3:
        return;
    }

    private void calculateTextBounds(android.graphics.Rect, android.graphics.RectF)
    {
        android.graphics.RectF $r1;
        android.graphics.Rect $r2;
        java.lang.CharSequence $r3;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0, $f1, $f2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 := @parameter0: android.graphics.Rect;

        $r1 := @parameter1: android.graphics.RectF;

        virtualinvoke $r1.<android.graphics.RectF: void setEmpty()>();

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence text>;

        if $r3 == null goto label3;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipStartPadding>;

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        $f0 = $f0 + $f1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float textStartPadding>;

        $f0 = $f0 + $f1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipEndPadding>;

        $f2 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateCloseIconWidth()>();

        $f1 = $f1 + $f2;

        $f2 = r0.<com.google.android.material.chip.ChipDrawable: float textEndPadding>;

        $f1 = $f1 + $f2;

        $i0 = staticinvoke <b.i.c.a.a: int e(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label1;

        $i0 = $r2.<android.graphics.Rect: int left>;

        $f2 = (float) $i0;

        $f0 = $f2 + $f0;

        $r1.<android.graphics.RectF: float left> = $f0;

        $i0 = $r2.<android.graphics.Rect: int right>;

        $f0 = (float) $i0;

        $f0 = $f0 - $f1;

        $r1.<android.graphics.RectF: float right> = $f0;

        goto label2;

     label1:
        $i0 = $r2.<android.graphics.Rect: int left>;

        $f2 = (float) $i0;

        $f1 = $f2 + $f1;

        $r1.<android.graphics.RectF: float left> = $f1;

        $i0 = $r2.<android.graphics.Rect: int right>;

        $f1 = (float) $i0;

        $f0 = $f1 - $f0;

        $r1.<android.graphics.RectF: float right> = $f0;

     label2:
        $i0 = $r2.<android.graphics.Rect: int top>;

        $f0 = (float) $i0;

        $r1.<android.graphics.RectF: float top> = $f0;

        $i0 = $r2.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i0;

        $r1.<android.graphics.RectF: float bottom> = $f0;

     label3:
        return;
    }

    private float calculateTextCenterFromBaseline()
    {
        android.graphics.Paint$FontMetrics $r3;
        com.google.android.material.chip.ChipDrawable r0;
        android.text.TextPaint $r1;
        com.google.android.material.internal.TextDrawableHelper $r2;
        float $f0, $f1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r1 = virtualinvoke $r2.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint$FontMetrics fontMetrics>;

        virtualinvoke $r1.<android.text.TextPaint: float getFontMetrics(android.graphics.Paint$FontMetrics)>($r3);

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint$FontMetrics fontMetrics>;

        $f0 = $r3.<android.graphics.Paint$FontMetrics: float descent>;

        $f1 = $r3.<android.graphics.Paint$FontMetrics: float ascent>;

        $f0 = $f0 + $f1;

        $f0 = $f0 / 2.0F;

        return $f0;
    }

    private boolean canShowCheckedIcon()
    {
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean checkedIconVisible>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        if $r1 == null goto label1;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean checkable>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static com.google.android.material.chip.ChipDrawable createFromAttributes(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.content.Context $r0;
        android.util.AttributeSet $r1;
        com.google.android.material.chip.ChipDrawable $r2;
        int $i0, $i1;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 = new com.google.android.material.chip.ChipDrawable;

        specialinvoke $r2.<com.google.android.material.chip.ChipDrawable: void <init>(android.content.Context,android.util.AttributeSet,int,int)>($r0, $r1, $i0, $i1);

        specialinvoke $r2.<com.google.android.material.chip.ChipDrawable: void loadFromAttributes(android.util.AttributeSet,int,int)>($r1, $i0, $i1);

        return $r2;
    }

    public static com.google.android.material.chip.ChipDrawable createFromResource(android.content.Context, int)
    {
        android.content.Context $r0;
        android.util.AttributeSet $r1;
        com.google.android.material.chip.ChipDrawable $r2;
        int $i0, $i1;

        $r0 := @parameter0: android.content.Context;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <com.google.android.material.drawable.DrawableUtils: android.util.AttributeSet parseDrawableXml(android.content.Context,int,java.lang.CharSequence)>($r0, $i1, "chip");

        $i0 = interfaceinvoke $r1.<android.util.AttributeSet: int getStyleAttribute()>();

        $i1 = $i0;

        if $i0 != 0 goto label1;

        $i1 = <com.google.android.material.R$style: int Widget_MaterialComponents_Chip_Entry>;

     label1:
        $i0 = <com.google.android.material.R$attr: int chipStandaloneStyle>;

        $r2 = staticinvoke <com.google.android.material.chip.ChipDrawable: com.google.android.material.chip.ChipDrawable createFromAttributes(android.content.Context,android.util.AttributeSet,int,int)>($r0, $r1, $i0, $i1);

        return $r2;
    }

    private void drawCheckedIcon(android.graphics.Canvas, android.graphics.Rect)
    {
        android.graphics.RectF $r3;
        android.graphics.Rect $r2;
        android.graphics.drawable.Drawable $r4;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0, $i1;
        float $f0, $f1, $f2;
        android.graphics.Canvas $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: android.graphics.Rect;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void calculateChipIconBounds(android.graphics.Rect,android.graphics.RectF)>($r2, $r3);

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f0 = $r3.<android.graphics.RectF: float left>;

        $f1 = $r3.<android.graphics.RectF: float top>;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f2 = virtualinvoke $r3.<android.graphics.RectF: float width()>();

        $i0 = (int) $f2;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f2 = virtualinvoke $r3.<android.graphics.RectF: float height()>();

        $i1 = (int) $f2;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i0, $i1);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r1);

        $f0 = neg $f0;

        $f1 = neg $f1;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

     label1:
        return;
    }

    private void drawChipBackground(android.graphics.Canvas, android.graphics.Rect)
    {
        android.graphics.ColorFilter $r5;
        android.graphics.RectF $r6;
        android.graphics.Rect $r3;
        android.graphics.Paint$Style $r4;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0, $f1;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r3 := @parameter1: android.graphics.Rect;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $i0 = r0.<com.google.android.material.chip.ChipDrawable: int currentChipBackgroundColor>;

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>($i0);

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r5 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: android.graphics.ColorFilter getTintColorFilter()>();

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>($r5);

        $r6 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        virtualinvoke $r6.<android.graphics.RectF: void set(android.graphics.Rect)>($r3);

        $r6 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float getChipCornerRadius()>();

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float getChipCornerRadius()>();

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>($r6, $f0, $f1, $r2);

     label1:
        return;
    }

    private void drawChipIcon(android.graphics.Canvas, android.graphics.Rect)
    {
        android.graphics.RectF $r3;
        android.graphics.Rect $r2;
        android.graphics.drawable.Drawable $r4;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0, $i1;
        float $f0, $f1, $f2;
        android.graphics.Canvas $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: android.graphics.Rect;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void calculateChipIconBounds(android.graphics.Rect,android.graphics.RectF)>($r2, $r3);

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f0 = $r3.<android.graphics.RectF: float left>;

        $f1 = $r3.<android.graphics.RectF: float top>;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f2 = virtualinvoke $r3.<android.graphics.RectF: float width()>();

        $i0 = (int) $f2;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f2 = virtualinvoke $r3.<android.graphics.RectF: float height()>();

        $i1 = (int) $f2;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i0, $i1);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r1);

        $f0 = neg $f0;

        $f1 = neg $f1;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

     label1:
        return;
    }

    private void drawChipStroke(android.graphics.Canvas, android.graphics.Rect)
    {
        android.graphics.ColorFilter $r2;
        android.graphics.RectF $r6;
        android.graphics.Rect $r3;
        android.graphics.Paint$Style $r5;
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        int $i1;
        float $f0, $f1, $f2, $f3, $f4;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r4;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r3 := @parameter1: android.graphics.Rect;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipStrokeWidth>;

        $b0 = $f1 cmpl 0.0F;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label2;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        if $z0 != 0 goto label2;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $i1 = r0.<com.google.android.material.chip.ChipDrawable: int currentChipStrokeColor>;

        virtualinvoke $r4.<android.graphics.Paint: void setColor(int)>($i1);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r5 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r4.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r5);

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r2 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: android.graphics.ColorFilter getTintColorFilter()>();

        virtualinvoke $r4.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>($r2);

     label1:
        $r6 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $i1 = $r3.<android.graphics.Rect: int left>;

        $f2 = (float) $i1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipStrokeWidth>;

        $f3 = $f1 / 2.0F;

        $f2 = $f2 + $f3;

        $i1 = $r3.<android.graphics.Rect: int top>;

        $f3 = (float) $i1;

        $f0 = $f1 / 2.0F;

        $f3 = $f3 + $f0;

        $i1 = $r3.<android.graphics.Rect: int right>;

        $f4 = (float) $i1;

        $f0 = $f1 / 2.0F;

        $f0 = $f4 - $f0;

        $i1 = $r3.<android.graphics.Rect: int bottom>;

        $f4 = (float) $i1;

        $f1 = $f1 / 2.0F;

        $f1 = $f4 - $f1;

        virtualinvoke $r6.<android.graphics.RectF: void set(float,float,float,float)>($f2, $f3, $f0, $f1);

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipCornerRadius>;

        $f2 = r0.<com.google.android.material.chip.ChipDrawable: float chipStrokeWidth>;

        $f2 = $f2 / 2.0F;

        $f1 = $f1 - $f2;

        $r6 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>($r6, $f1, $f1, $r4);

     label2:
        return;
    }

    private void drawChipSurface(android.graphics.Canvas, android.graphics.Rect)
    {
        android.graphics.RectF $r5;
        android.graphics.Rect $r3;
        android.graphics.Paint$Style $r4;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0, $f1;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r3 := @parameter1: android.graphics.Rect;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $i0 = r0.<com.google.android.material.chip.ChipDrawable: int currentChipSurfaceColor>;

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>($i0);

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $r5 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        virtualinvoke $r5.<android.graphics.RectF: void set(android.graphics.Rect)>($r3);

        $r5 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float getChipCornerRadius()>();

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float getChipCornerRadius()>();

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>($r5, $f0, $f1, $r2);

     label1:
        return;
    }

    private void drawCloseIcon(android.graphics.Canvas, android.graphics.Rect)
    {
        android.graphics.RectF $r3;
        android.graphics.Rect $r2;
        android.graphics.drawable.Drawable $r4, $r5;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0, $i1;
        float $f0, $f1, $f2;
        android.graphics.Canvas $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: android.graphics.Rect;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label3;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void calculateCloseIconBounds(android.graphics.Rect,android.graphics.RectF)>($r2, $r3);

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f0 = $r3.<android.graphics.RectF: float left>;

        $f1 = $r3.<android.graphics.RectF: float top>;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f2 = virtualinvoke $r3.<android.graphics.RectF: float width()>();

        $i0 = (int) $f2;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f2 = virtualinvoke $r3.<android.graphics.RectF: float height()>();

        $i1 = (int) $f2;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i0, $i1);

        $z0 = <com.google.android.material.ripple.RippleUtils: boolean USE_FRAMEWORK_RIPPLE>;

        if $z0 == 0 goto label1;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIconRipple>;

        $r5 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $r2 = virtualinvoke $r5.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>($r2);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIconRipple>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIconRipple>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r1);

        goto label2;

     label1:
        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r1);

     label2:
        $f0 = neg $f0;

        $f1 = neg $f1;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

     label3:
        return;
    }

    private void drawCompatRipple(android.graphics.Canvas, android.graphics.Rect)
    {
        android.graphics.RectF $r5;
        android.graphics.Rect $r3;
        android.graphics.Path $r6;
        android.graphics.Paint$Style $r4;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0, $f1;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r3 := @parameter1: android.graphics.Rect;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $i0 = r0.<com.google.android.material.chip.ChipDrawable: int currentCompatRippleColor>;

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>($i0);

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $r5 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        virtualinvoke $r5.<android.graphics.RectF: void set(android.graphics.Rect)>($r3);

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        if $z0 != 0 goto label1;

        $r5 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float getChipCornerRadius()>();

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float getChipCornerRadius()>();

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>($r5, $f0, $f1, $r2);

        return;

     label1:
        $r5 = new android.graphics.RectF;

        specialinvoke $r5.<android.graphics.RectF: void <init>(android.graphics.Rect)>($r3);

        $r6 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Path shapePath>;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void calculatePathForSize(android.graphics.RectF,android.graphics.Path)>($r5, $r6);

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r6 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Path shapePath>;

        $r5 = virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: android.graphics.RectF getBoundsAsRectF()>();

        specialinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void drawShape(android.graphics.Canvas,android.graphics.Paint,android.graphics.Path,android.graphics.RectF)>($r1, $r2, $r6, $r5);

        return;
    }

    private void drawDebug(android.graphics.Canvas, android.graphics.Rect)
    {
        android.graphics.RectF $r4;
        android.graphics.Rect $r3;
        java.lang.CharSequence $r5;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0, $f1, $f2, $f3;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r3 := @parameter1: android.graphics.Rect;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        if $r2 == null goto label5;

        $i0 = staticinvoke <b.i.c.e: int c(int,int)>(-16777216, 127);

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>($i0);

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>($r3, $r2);

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z0 == 0 goto label2;

     label1:
        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void calculateChipIconBounds(android.graphics.Rect,android.graphics.RectF)>($r3, $r4);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>($r4, $r2);

     label2:
        $r5 = r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence text>;

        if $r5 == null goto label3;

        $i0 = $r3.<android.graphics.Rect: int left>;

        $f0 = (float) $i0;

        $f2 = virtualinvoke $r3.<android.graphics.Rect: float exactCenterY()>();

        $i0 = $r3.<android.graphics.Rect: int right>;

        $f1 = (float) $i0;

        $f3 = virtualinvoke $r3.<android.graphics.Rect: float exactCenterY()>();

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, $f2, $f1, $f3, $r2);

     label3:
        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label4;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void calculateCloseIconBounds(android.graphics.Rect,android.graphics.RectF)>($r3, $r4);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>($r4, $r2);

     label4:
        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        $i0 = staticinvoke <b.i.c.e: int c(int,int)>(-65536, 127);

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>($i0);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void calculateChipTouchBounds(android.graphics.Rect,android.graphics.RectF)>($r3, $r4);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>($r4, $r2);

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        $i0 = staticinvoke <b.i.c.e: int c(int,int)>(-16711936, 127);

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>($i0);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void calculateCloseIconTouchBounds(android.graphics.Rect,android.graphics.RectF)>($r3, $r4);

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>($r4, $r2);

     label5:
        return;
    }

    private void drawText(android.graphics.Canvas, android.graphics.Rect)
    {
        android.graphics.Rect $r2;
        android.content.Context $r11;
        android.graphics.PointF $r4;
        com.google.android.material.internal.TextDrawableHelper $r7;
        android.graphics.Paint$Align $r5;
        int[] $r10;
        int $i0, $i1, $i2;
        android.graphics.Canvas $r1;
        com.google.android.material.resources.TextAppearance $r8;
        java.lang.String $r12;
        boolean $z0;
        android.graphics.RectF $r6;
        java.lang.CharSequence $r3;
        android.text.TextUtils$TruncateAt $r13;
        com.google.android.material.chip.ChipDrawable r0;
        android.text.TextPaint $r9;
        float $f0, $f1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: android.graphics.Rect;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence text>;

        if $r3 == null goto label6;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.PointF pointF>;

        $r5 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint$Align calculateTextOriginAndAlignment(android.graphics.Rect,android.graphics.PointF)>($r2, $r4);

        $r6 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void calculateTextBounds(android.graphics.Rect,android.graphics.RectF)>($r2, $r6);

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r8 = virtualinvoke $r7.<com.google.android.material.internal.TextDrawableHelper: com.google.android.material.resources.TextAppearance getTextAppearance()>();

        if $r8 == null goto label1;

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r9 = virtualinvoke $r7.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        $r10 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        $r9.<android.text.TextPaint: int[] drawableState> = $r10;

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r11 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        virtualinvoke $r7.<com.google.android.material.internal.TextDrawableHelper: void updateTextPaintDrawState(android.content.Context)>($r11);

     label1:
        $r7 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r9 = virtualinvoke $r7.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        virtualinvoke $r9.<android.text.TextPaint: void setTextAlign(android.graphics.Paint$Align)>($r5);

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r3 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence getText()>();

        $r12 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>();

        $f0 = virtualinvoke $r7.<com.google.android.material.internal.TextDrawableHelper: float getTextWidth(java.lang.String)>($r12);

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $r6 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f0 = virtualinvoke $r6.<android.graphics.RectF: float width()>();

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i2 = 0;

        if $i0 <= $i1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        $i2 = virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        $r6 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        virtualinvoke $r1.<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>($r6);

     label4:
        $r3 = r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence text>;

        if $z0 == 0 goto label5;

        $r13 = r0.<com.google.android.material.chip.ChipDrawable: android.text.TextUtils$TruncateAt truncateAt>;

        if $r13 == null goto label5;

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r9 = virtualinvoke $r7.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        $r6 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f0 = virtualinvoke $r6.<android.graphics.RectF: float width()>();

        $r13 = r0.<com.google.android.material.chip.ChipDrawable: android.text.TextUtils$TruncateAt truncateAt>;

        $r3 = staticinvoke <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)>($r3, $r9, $f0, $r13);

     label5:
        $i0 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.PointF pointF>;

        $f0 = $r4.<android.graphics.PointF: float x>;

        $f1 = $r4.<android.graphics.PointF: float y>;

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r9 = virtualinvoke $r7.<com.google.android.material.internal.TextDrawableHelper: android.text.TextPaint getTextPaint()>();

        virtualinvoke $r1.<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>($r3, 0, $i0, $f0, $f1, $r9);

        if $z0 == 0 goto label6;

        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i2);

     label6:
        return;
    }

    private android.graphics.ColorFilter getTintColorFilter()
    {
        android.graphics.ColorFilter $r1;
        android.graphics.PorterDuffColorFilter r2;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.ColorFilter colorFilter>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.PorterDuffColorFilter tintFilter>;

        return r2;
    }

    public static boolean hasState(int[], int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        return 0;

     label1:
        $i1 = lengthof $r0;

        $i3 = 0;

     label2:
        if $i3 >= $i1 goto label4;

        $i2 = $r0[$i3];

        if $i2 != $i0 goto label3;

        return 1;

     label3:
        $i3 = $i3 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static boolean isStateful(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r0;
        boolean $z0;

        $r0 := @parameter0: android.content.res.ColorStateList;

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isStateful(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable $r0;
        boolean $z0;

        $r0 := @parameter0: android.graphics.drawable.Drawable;

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isStateful(com.google.android.material.resources.TextAppearance)
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.resources.TextAppearance $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.android.material.resources.TextAppearance;

        if $r0 == null goto label1;

        $r1 = $r0.<com.google.android.material.resources.TextAppearance: android.content.res.ColorStateList textColor>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void loadFromAttributes(android.util.AttributeSet, int, int)
    {
        android.content.Context $r3;
        com.google.android.material.animation.MotionSpec $r12;
        android.graphics.drawable.Drawable $r11;
        android.content.res.TypedArray $r5;
        android.content.res.ColorStateList $r6;
        android.util.AttributeSet $r2;
        int[] $r1, $r4;
        int $i0, $i1;
        com.google.android.material.resources.TextAppearance $r8;
        java.lang.String $r10;
        boolean $z0;
        java.lang.CharSequence $r7;
        android.text.TextUtils$TruncateAt $r9;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 := @parameter0: android.util.AttributeSet;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r4 = <com.google.android.material.R$styleable: int[] Chip>;

        $r1 = newarray (int)[0];

        $r5 = staticinvoke <com.google.android.material.internal.ThemeEnforcement: android.content.res.TypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int,int[])>($r3, $r2, $r4, $i0, $i1, $r1);

        $i0 = <com.google.android.material.R$styleable: int Chip_shapeAppearance>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled> = $z0;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_chipSurfaceColor>;

        $r6 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipSurfaceColor(android.content.res.ColorStateList)>($r6);

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_chipBackgroundColor>;

        $r6 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipBackgroundColor(android.content.res.ColorStateList)>($r6);

        $i0 = <com.google.android.material.R$styleable: int Chip_chipMinHeight>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipMinHeight(float)>($f0);

        $i0 = <com.google.android.material.R$styleable: int Chip_chipCornerRadius>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label01;

        $i0 = <com.google.android.material.R$styleable: int Chip_chipCornerRadius>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipCornerRadius(float)>($f0);

     label01:
        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_chipStrokeColor>;

        $r6 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipStrokeColor(android.content.res.ColorStateList)>($r6);

        $i0 = <com.google.android.material.R$styleable: int Chip_chipStrokeWidth>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipStrokeWidth(float)>($f0);

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_rippleColor>;

        $r6 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setRippleColor(android.content.res.ColorStateList)>($r6);

        $i0 = <com.google.android.material.R$styleable: int Chip_android_text>;

        $r7 = virtualinvoke $r5.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setText(java.lang.CharSequence)>($r7);

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_android_textAppearance>;

        $r8 = staticinvoke <com.google.android.material.resources.MaterialResources: com.google.android.material.resources.TextAppearance getTextAppearance(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setTextAppearance(com.google.android.material.resources.TextAppearance)>($r8);

        $i0 = <com.google.android.material.R$styleable: int Chip_android_ellipsize>;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getInt(int,int)>($i0, 0);

        if $i0 == 1 goto label04;

        if $i0 == 2 goto label03;

        if $i0 == 3 goto label02;

        goto label05;

     label02:
        $r9 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END>;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setEllipsize(android.text.TextUtils$TruncateAt)>($r9);

        goto label05;

     label03:
        $r9 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt MIDDLE>;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setEllipsize(android.text.TextUtils$TruncateAt)>($r9);

        goto label05;

     label04:
        $r9 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt START>;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setEllipsize(android.text.TextUtils$TruncateAt)>($r9);

     label05:
        $i0 = <com.google.android.material.R$styleable: int Chip_chipIconVisible>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, 0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipIconVisible(boolean)>($z0);

        if $r2 == null goto label06;

        $r10 = interfaceinvoke $r2.<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://schemas.android.com/apk/res-auto", "chipIconEnabled");

        if $r10 == null goto label06;

        $r10 = interfaceinvoke $r2.<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://schemas.android.com/apk/res-auto", "chipIconVisible");

        if $r10 != null goto label06;

        $i0 = <com.google.android.material.R$styleable: int Chip_chipIconEnabled>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, 0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipIconVisible(boolean)>($z0);

     label06:
        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_chipIcon>;

        $r11 = staticinvoke <com.google.android.material.resources.MaterialResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipIcon(android.graphics.drawable.Drawable)>($r11);

        $i0 = <com.google.android.material.R$styleable: int Chip_chipIconTint>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label07;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_chipIconTint>;

        $r6 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipIconTint(android.content.res.ColorStateList)>($r6);

     label07:
        $i0 = <com.google.android.material.R$styleable: int Chip_chipIconSize>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipIconSize(float)>($f0);

        $i0 = <com.google.android.material.R$styleable: int Chip_closeIconVisible>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, 0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconVisible(boolean)>($z0);

        if $r2 == null goto label08;

        $r10 = interfaceinvoke $r2.<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://schemas.android.com/apk/res-auto", "closeIconEnabled");

        if $r10 == null goto label08;

        $r10 = interfaceinvoke $r2.<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://schemas.android.com/apk/res-auto", "closeIconVisible");

        if $r10 != null goto label08;

        $i0 = <com.google.android.material.R$styleable: int Chip_closeIconEnabled>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, 0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconVisible(boolean)>($z0);

     label08:
        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_closeIcon>;

        $r11 = staticinvoke <com.google.android.material.resources.MaterialResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIcon(android.graphics.drawable.Drawable)>($r11);

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_closeIconTint>;

        $r6 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconTint(android.content.res.ColorStateList)>($r6);

        $i0 = <com.google.android.material.R$styleable: int Chip_closeIconSize>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconSize(float)>($f0);

        $i0 = <com.google.android.material.R$styleable: int Chip_android_checkable>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, 0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCheckable(boolean)>($z0);

        $i0 = <com.google.android.material.R$styleable: int Chip_checkedIconVisible>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, 0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCheckedIconVisible(boolean)>($z0);

        if $r2 == null goto label09;

        $r10 = interfaceinvoke $r2.<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://schemas.android.com/apk/res-auto", "checkedIconEnabled");

        if $r10 == null goto label09;

        $r10 = interfaceinvoke $r2.<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://schemas.android.com/apk/res-auto", "checkedIconVisible");

        if $r10 != null goto label09;

        $i0 = <com.google.android.material.R$styleable: int Chip_checkedIconEnabled>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, 0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCheckedIconVisible(boolean)>($z0);

     label09:
        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_checkedIcon>;

        $r11 = staticinvoke <com.google.android.material.resources.MaterialResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCheckedIcon(android.graphics.drawable.Drawable)>($r11);

        $i0 = <com.google.android.material.R$styleable: int Chip_checkedIconTint>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 == 0 goto label10;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_checkedIconTint>;

        $r6 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCheckedIconTint(android.content.res.ColorStateList)>($r6);

     label10:
        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_showMotionSpec>;

        $r12 = staticinvoke <com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionSpec createFromAttribute(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setShowMotionSpec(com.google.android.material.animation.MotionSpec)>($r12);

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $i0 = <com.google.android.material.R$styleable: int Chip_hideMotionSpec>;

        $r12 = staticinvoke <com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionSpec createFromAttribute(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setHideMotionSpec(com.google.android.material.animation.MotionSpec)>($r12);

        $i0 = <com.google.android.material.R$styleable: int Chip_chipStartPadding>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipStartPadding(float)>($f0);

        $i0 = <com.google.android.material.R$styleable: int Chip_iconStartPadding>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setIconStartPadding(float)>($f0);

        $i0 = <com.google.android.material.R$styleable: int Chip_iconEndPadding>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setIconEndPadding(float)>($f0);

        $i0 = <com.google.android.material.R$styleable: int Chip_textStartPadding>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setTextStartPadding(float)>($f0);

        $i0 = <com.google.android.material.R$styleable: int Chip_textEndPadding>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setTextEndPadding(float)>($f0);

        $i0 = <com.google.android.material.R$styleable: int Chip_closeIconStartPadding>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconStartPadding(float)>($f0);

        $i0 = <com.google.android.material.R$styleable: int Chip_closeIconEndPadding>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconEndPadding(float)>($f0);

        $i0 = <com.google.android.material.R$styleable: int Chip_chipEndPadding>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i0, 0.0F);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipEndPadding(float)>($f0);

        $i0 = <com.google.android.material.R$styleable: int Chip_android_maxWidth>;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i0, 2147483647);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setMaxWidth(int)>($i0);

        virtualinvoke $r5.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    private boolean onStateChange(int[], int[])
    {
        com.google.android.material.internal.TextDrawableHelper $r4;
        android.graphics.drawable.Drawable $r7;
        android.content.res.ColorStateList $r3;
        byte $b3;
        int[] $r1, $r2, $r6;
        int $i0, $i1, $i2;
        com.google.android.material.resources.TextAppearance $r5;
        boolean $z0, $z1, $z2;
        android.graphics.PorterDuff$Mode $r8;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        android.graphics.PorterDuffColorFilter $r9;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $z0 = specialinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: boolean onStateChange(int[])>($r2);

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipSurfaceColor>;

        if $r3 == null goto label01;

        $i0 = r0.<com.google.android.material.chip.ChipDrawable: int currentChipSurfaceColor>;

        $i0 = virtualinvoke $r3.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r2, $i0);

        goto label02;

     label01:
        $i0 = 0;

     label02:
        $i1 = r0.<com.google.android.material.chip.ChipDrawable: int currentChipSurfaceColor>;

        if $i1 == $i0 goto label03;

        r0.<com.google.android.material.chip.ChipDrawable: int currentChipSurfaceColor> = $i0;

        $z0 = 1;

     label03:
        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor>;

        if $r3 == null goto label04;

        $i1 = r0.<com.google.android.material.chip.ChipDrawable: int currentChipBackgroundColor>;

        $i1 = virtualinvoke $r3.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r2, $i1);

        goto label05;

     label04:
        $i1 = 0;

     label05:
        $i2 = r0.<com.google.android.material.chip.ChipDrawable: int currentChipBackgroundColor>;

        if $i2 == $i1 goto label06;

        r0.<com.google.android.material.chip.ChipDrawable: int currentChipBackgroundColor> = $i1;

        $z0 = 1;

     label06:
        $i0 = staticinvoke <com.google.android.material.color.MaterialColors: int layer(int,int)>($i0, $i1);

        $i1 = r0.<com.google.android.material.chip.ChipDrawable: int currentCompositeSurfaceBackgroundColor>;

        if $i1 == $i0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        $r3 = virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: android.content.res.ColorStateList getFillColor()>();

        if $r3 != null goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        $z1 = $z1 | $z2;

        if $z1 == 0 goto label11;

        r0.<com.google.android.material.chip.ChipDrawable: int currentCompositeSurfaceBackgroundColor> = $i0;

        $i0 = r0.<com.google.android.material.chip.ChipDrawable: int currentCompositeSurfaceBackgroundColor>;

        $r3 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>($i0);

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void setFillColor(android.content.res.ColorStateList)>($r3);

        $z0 = 1;

     label11:
        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor>;

        if $r3 == null goto label12;

        $i0 = r0.<com.google.android.material.chip.ChipDrawable: int currentChipStrokeColor>;

        $i0 = virtualinvoke $r3.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r2, $i0);

        goto label13;

     label12:
        $i0 = 0;

     label13:
        $i1 = r0.<com.google.android.material.chip.ChipDrawable: int currentChipStrokeColor>;

        if $i1 == $i0 goto label14;

        r0.<com.google.android.material.chip.ChipDrawable: int currentChipStrokeColor> = $i0;

        $z0 = 1;

     label14:
        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList compatRippleColor>;

        if $r3 == null goto label15;

        $z1 = staticinvoke <com.google.android.material.ripple.RippleUtils: boolean shouldDrawRippleCompat(int[])>($r2);

        if $z1 == 0 goto label15;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList compatRippleColor>;

        $i0 = r0.<com.google.android.material.chip.ChipDrawable: int currentCompatRippleColor>;

        $i0 = virtualinvoke $r3.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r2, $i0);

        goto label16;

     label15:
        $i0 = 0;

     label16:
        $i1 = r0.<com.google.android.material.chip.ChipDrawable: int currentCompatRippleColor>;

        if $i1 == $i0 goto label17;

        r0.<com.google.android.material.chip.ChipDrawable: int currentCompatRippleColor> = $i0;

        $z1 = r0.<com.google.android.material.chip.ChipDrawable: boolean useCompatRipple>;

        if $z1 == 0 goto label17;

        $z0 = 1;

     label17:
        $r4 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r5 = virtualinvoke $r4.<com.google.android.material.internal.TextDrawableHelper: com.google.android.material.resources.TextAppearance getTextAppearance()>();

        if $r5 == null goto label18;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r5 = virtualinvoke $r4.<com.google.android.material.internal.TextDrawableHelper: com.google.android.material.resources.TextAppearance getTextAppearance()>();

        $r3 = $r5.<com.google.android.material.resources.TextAppearance: android.content.res.ColorStateList textColor>;

        if $r3 == null goto label18;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r5 = virtualinvoke $r4.<com.google.android.material.internal.TextDrawableHelper: com.google.android.material.resources.TextAppearance getTextAppearance()>();

        $r3 = $r5.<com.google.android.material.resources.TextAppearance: android.content.res.ColorStateList textColor>;

        $i0 = r0.<com.google.android.material.chip.ChipDrawable: int currentTextColor>;

        $i0 = virtualinvoke $r3.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r2, $i0);

        goto label19;

     label18:
        $i0 = 0;

     label19:
        $i1 = r0.<com.google.android.material.chip.ChipDrawable: int currentTextColor>;

        if $i1 == $i0 goto label20;

        r0.<com.google.android.material.chip.ChipDrawable: int currentTextColor> = $i0;

        $z0 = 1;

     label20:
        $r6 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        $z1 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean hasState(int[],int)>($r6, 16842912);

        if $z1 == 0 goto label21;

        $z1 = r0.<com.google.android.material.chip.ChipDrawable: boolean checkable>;

        if $z1 == 0 goto label21;

        $z1 = 1;

        goto label22;

     label21:
        $z1 = 0;

     label22:
        $z2 = r0.<com.google.android.material.chip.ChipDrawable: boolean currentChecked>;

        if $z2 == $z1 goto label24;

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        if $r7 == null goto label24;

        $f0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        r0.<com.google.android.material.chip.ChipDrawable: boolean currentChecked> = $z1;

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        $b3 = $f0 cmpl $f1;

        if $b3 == 0 goto label23;

        $z0 = 1;

        $z1 = 1;

        goto label25;

     label23:
        $z0 = 1;

     label24:
        $z1 = 0;

     label25:
        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList tint>;

        if $r3 == null goto label26;

        $i0 = r0.<com.google.android.material.chip.ChipDrawable: int currentTint>;

        $i0 = virtualinvoke $r3.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r2, $i0);

        goto label27;

     label26:
        $i0 = 0;

     label27:
        $i1 = r0.<com.google.android.material.chip.ChipDrawable: int currentTint>;

        if $i1 == $i0 goto label28;

        r0.<com.google.android.material.chip.ChipDrawable: int currentTint> = $i0;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList tint>;

        $r8 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.PorterDuff$Mode tintMode>;

        $r9 = staticinvoke <com.google.android.material.drawable.DrawableUtils: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.drawable.Drawable,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>(r0, $r3, $r8);

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.PorterDuffColorFilter tintFilter> = $r9;

        $z0 = 1;

     label28:
        $r7 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z2 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r7);

        if $z2 == 0 goto label29;

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z2 = virtualinvoke $r7.<android.graphics.drawable.Drawable: boolean setState(int[])>($r2);

        $z0 = $z0 | $z2;

     label29:
        $r7 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z2 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r7);

        if $z2 == 0 goto label30;

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z2 = virtualinvoke $r7.<android.graphics.drawable.Drawable: boolean setState(int[])>($r2);

        $z0 = $z0 | $z2;

     label30:
        $r7 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z2 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r7);

        if $z2 == 0 goto label31;

        $i0 = lengthof $r2;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        $r6 = newarray (int)[$i0];

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r6, 0, $i0);

        $i0 = lengthof $r2;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r6, $i0, $i1);

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z2 = virtualinvoke $r7.<android.graphics.drawable.Drawable: boolean setState(int[])>($r6);

        $z0 = $z0 | $z2;

     label31:
        $z2 = <com.google.android.material.ripple.RippleUtils: boolean USE_FRAMEWORK_RIPPLE>;

        if $z2 == 0 goto label32;

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIconRipple>;

        $z2 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r7);

        if $z2 == 0 goto label32;

        $r7 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIconRipple>;

        $z2 = virtualinvoke $r7.<android.graphics.drawable.Drawable: boolean setState(int[])>($r1);

        $z0 = $z0 | $z2;

     label32:
        if $z0 == 0 goto label33;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

     label33:
        if $z1 == 0 goto label34;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label34:
        return $z0;
    }

    private void setChipSurfaceColor(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r3;
        int[] $r2;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r3 := @parameter0: android.content.res.ColorStateList;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipSurfaceColor>;

        if $r1 == $r3 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipSurfaceColor> = $r3;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean onStateChange(int[])>($r2);

     label1:
        return;
    }

    private boolean showsCheckedIcon()
    {
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean checkedIconVisible>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        if $r1 == null goto label1;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean currentChecked>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean showsChipIcon()
    {
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean chipIconVisible>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean showsCloseIcon()
    {
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean closeIconVisible>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private void unapplyChildDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        if $r1 == null goto label1;

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

     label1:
        return;
    }

    private void updateCompatRippleColor()
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean useCompatRipple>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList rippleColor>;

        $r1 = staticinvoke <com.google.android.material.ripple.RippleUtils: android.content.res.ColorStateList sanitizeRippleDrawableColor(android.content.res.ColorStateList)>($r1);

        goto label2;

     label1:
        $r1 = null;

     label2:
        r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList compatRippleColor> = $r1;

        return;
    }

    private void updateFrameworkCloseIconRipple()
    {
        android.content.res.ColorStateList $r4;
        android.graphics.drawable.ShapeDrawable $r3;
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.drawable.RippleDrawable $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 = new android.graphics.drawable.RippleDrawable;

        $r4 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList getRippleColor()>();

        $r4 = staticinvoke <com.google.android.material.ripple.RippleUtils: android.content.res.ColorStateList sanitizeRippleDrawableColor(android.content.res.ColorStateList)>($r4);

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $r3 = <com.google.android.material.chip.ChipDrawable: android.graphics.drawable.ShapeDrawable closeIconRippleMask>;

        specialinvoke $r1.<android.graphics.drawable.RippleDrawable: void <init>(android.content.res.ColorStateList,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>($r4, $r2, $r3);

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIconRipple> = $r1;

        return;
    }

    public float calculateChipIconWidth()
    {
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 != 0 goto label2;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0.0F;

     label2:
        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float iconStartPadding>;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipIconSize>;

        $f0 = $f0 + $f1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float iconEndPadding>;

        $f0 = $f0 + $f1;

        return $f0;
    }

    public float calculateCloseIconWidth()
    {
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconStartPadding>;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconSize>;

        $f0 = $f0 + $f1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconEndPadding>;

        $f0 = $f0 + $f1;

        return $f0;

     label1:
        return 0.0F;
    }

    public android.graphics.Paint$Align calculateTextOriginAndAlignment(android.graphics.Rect, android.graphics.PointF)
    {
        android.graphics.Rect $r2;
        android.graphics.PointF $r1;
        java.lang.CharSequence $r3;
        android.graphics.Paint$Align $r4;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 := @parameter0: android.graphics.Rect;

        $r1 := @parameter1: android.graphics.PointF;

        virtualinvoke $r1.<android.graphics.PointF: void set(float,float)>(0.0F, 0.0F);

        $r4 = <android.graphics.Paint$Align: android.graphics.Paint$Align LEFT>;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence text>;

        if $r3 == null goto label3;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipStartPadding>;

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        $f0 = $f0 + $f1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float textStartPadding>;

        $f0 = $f0 + $f1;

        $i0 = staticinvoke <b.i.c.a.a: int e(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label1;

        $i0 = $r2.<android.graphics.Rect: int left>;

        $f1 = (float) $i0;

        $f0 = $f1 + $f0;

        $r1.<android.graphics.PointF: float x> = $f0;

        $r4 = <android.graphics.Paint$Align: android.graphics.Paint$Align LEFT>;

        goto label2;

     label1:
        $i0 = $r2.<android.graphics.Rect: int right>;

        $f1 = (float) $i0;

        $f0 = $f1 - $f0;

        $r1.<android.graphics.PointF: float x> = $f0;

        $r4 = <android.graphics.Paint$Align: android.graphics.Paint$Align RIGHT>;

     label2:
        $i0 = virtualinvoke $r2.<android.graphics.Rect: int centerY()>();

        $f0 = (float) $i0;

        $f1 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateTextCenterFromBaseline()>();

        $f0 = $f0 - $f1;

        $r1.<android.graphics.PointF: float y> = $f0;

     label3:
        return $r4;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.Rect $r2;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3;
        android.graphics.Canvas $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $z0 = virtualinvoke $r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $i0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: int getAlpha()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $i1 = 0;

        $i0 = r0.<com.google.android.material.chip.ChipDrawable: int alpha>;

        if $i0 >= 255 goto label2;

        $i1 = $r2.<android.graphics.Rect: int left>;

        $f0 = (float) $i1;

        $i1 = $r2.<android.graphics.Rect: int top>;

        $f1 = (float) $i1;

        $i1 = $r2.<android.graphics.Rect: int right>;

        $f2 = (float) $i1;

        $i1 = $r2.<android.graphics.Rect: int bottom>;

        $f3 = (float) $i1;

        $i1 = staticinvoke <com.google.android.material.canvas.CanvasCompat: int saveLayerAlpha(android.graphics.Canvas,float,float,float,float,int)>($r1, $f0, $f1, $f2, $f3, $i0);

     label2:
        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void drawChipSurface(android.graphics.Canvas,android.graphics.Rect)>($r1, $r2);

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void drawChipBackground(android.graphics.Canvas,android.graphics.Rect)>($r1, $r2);

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void draw(android.graphics.Canvas)>($r1);

     label3:
        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void drawChipStroke(android.graphics.Canvas,android.graphics.Rect)>($r1, $r2);

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void drawCompatRipple(android.graphics.Canvas,android.graphics.Rect)>($r1, $r2);

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void drawChipIcon(android.graphics.Canvas,android.graphics.Rect)>($r1, $r2);

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void drawCheckedIcon(android.graphics.Canvas,android.graphics.Rect)>($r1, $r2);

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean shouldDrawText>;

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void drawText(android.graphics.Canvas,android.graphics.Rect)>($r1, $r2);

     label4:
        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void drawCloseIcon(android.graphics.Canvas,android.graphics.Rect)>($r1, $r2);

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void drawDebug(android.graphics.Canvas,android.graphics.Rect)>($r1, $r2);

        $i0 = r0.<com.google.android.material.chip.ChipDrawable: int alpha>;

        if $i0 >= 255 goto label5;

        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i1);

     label5:
        return;
    }

    public int getAlpha()
    {
        int i0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        i0 = r0.<com.google.android.material.chip.ChipDrawable: int alpha>;

        return i0;
    }

    public android.graphics.drawable.Drawable getCheckedIcon()
    {
        android.graphics.drawable.Drawable r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        return r1;
    }

    public android.content.res.ColorStateList getCheckedIconTint()
    {
        android.content.res.ColorStateList r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList checkedIconTint>;

        return r1;
    }

    public android.content.res.ColorStateList getChipBackgroundColor()
    {
        android.content.res.ColorStateList r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor>;

        return r1;
    }

    public float getChipCornerRadius()
    {
        float $f0;
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        if $z0 == 0 goto label1;

        $f0 = virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: float getTopLeftCornerResolvedSize()>();

        return $f0;

     label1:
        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipCornerRadius>;

        return $f0;
    }

    public float getChipEndPadding()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipEndPadding>;

        return f0;
    }

    public android.graphics.drawable.Drawable getChipIcon()
    {
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        if $r1 == null goto label1;

        $r1 = staticinvoke <b.i.c.a.a: android.graphics.drawable.Drawable h(android.graphics.drawable.Drawable)>($r1);

        return $r1;

     label1:
        return null;
    }

    public float getChipIconSize()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipIconSize>;

        return f0;
    }

    public android.content.res.ColorStateList getChipIconTint()
    {
        android.content.res.ColorStateList r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipIconTint>;

        return r1;
    }

    public float getChipMinHeight()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipMinHeight>;

        return f0;
    }

    public float getChipStartPadding()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipStartPadding>;

        return f0;
    }

    public android.content.res.ColorStateList getChipStrokeColor()
    {
        android.content.res.ColorStateList r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor>;

        return r1;
    }

    public float getChipStrokeWidth()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipStrokeWidth>;

        return f0;
    }

    public void getChipTouchBounds(android.graphics.RectF)
    {
        android.graphics.RectF $r1;
        android.graphics.Rect $r2;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.RectF;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void calculateChipTouchBounds(android.graphics.Rect,android.graphics.RectF)>($r2, $r1);

        return;
    }

    public android.graphics.drawable.Drawable getCloseIcon()
    {
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        if $r1 == null goto label1;

        $r1 = staticinvoke <b.i.c.a.a: android.graphics.drawable.Drawable h(android.graphics.drawable.Drawable)>($r1);

        return $r1;

     label1:
        return null;
    }

    public java.lang.CharSequence getCloseIconContentDescription()
    {
        java.lang.CharSequence r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence closeIconContentDescription>;

        return r1;
    }

    public float getCloseIconEndPadding()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconEndPadding>;

        return f0;
    }

    public float getCloseIconSize()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconSize>;

        return f0;
    }

    public float getCloseIconStartPadding()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconStartPadding>;

        return f0;
    }

    public int[] getCloseIconState()
    {
        int[] r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: int[] closeIconStateSet>;

        return r1;
    }

    public android.content.res.ColorStateList getCloseIconTint()
    {
        android.content.res.ColorStateList r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList closeIconTint>;

        return r1;
    }

    public void getCloseIconTouchBounds(android.graphics.RectF)
    {
        android.graphics.RectF $r1;
        android.graphics.Rect $r2;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.RectF;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void calculateCloseIconTouchBounds(android.graphics.Rect,android.graphics.RectF)>($r2, $r1);

        return;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        android.graphics.ColorFilter r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.ColorFilter colorFilter>;

        return r1;
    }

    public android.text.TextUtils$TruncateAt getEllipsize()
    {
        com.google.android.material.chip.ChipDrawable r0;
        android.text.TextUtils$TruncateAt r1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: android.text.TextUtils$TruncateAt truncateAt>;

        return r1;
    }

    public com.google.android.material.animation.MotionSpec getHideMotionSpec()
    {
        com.google.android.material.animation.MotionSpec r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.animation.MotionSpec hideMotionSpec>;

        return r1;
    }

    public float getIconEndPadding()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float iconEndPadding>;

        return f0;
    }

    public float getIconStartPadding()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float iconStartPadding>;

        return f0;
    }

    public int getIntrinsicHeight()
    {
        int $i0;
        float $f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipMinHeight>;

        $i0 = (int) $f0;

        return $i0;
    }

    public int getIntrinsicWidth()
    {
        java.lang.CharSequence $r2;
        com.google.android.material.internal.TextDrawableHelper $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0, $i1;
        float $f0, $f1;
        java.lang.String $r3;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipStartPadding>;

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        $f0 = $f0 + $f1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float textStartPadding>;

        $f0 = $f0 + $f1;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r2 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence getText()>();

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        $f1 = virtualinvoke $r1.<com.google.android.material.internal.TextDrawableHelper: float getTextWidth(java.lang.String)>($r3);

        $f0 = $f0 + $f1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float textEndPadding>;

        $f0 = $f0 + $f1;

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateCloseIconWidth()>();

        $f0 = $f0 + $f1;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipEndPadding>;

        $f0 = $f0 + $f1;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i1 = r0.<com.google.android.material.chip.ChipDrawable: int maxWidth>;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        return $i0;
    }

    public int getMaxWidth()
    {
        int i0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        i0 = r0.<com.google.android.material.chip.ChipDrawable: int maxWidth>;

        return i0;
    }

    public int getOpacity()
    {
        int $i0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 = -3;

        return $i0;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.graphics.Outline $r1;
        android.graphics.Rect $r2;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0, $i1;
        float $f0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.Outline;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void getOutline(android.graphics.Outline)>($r1);

        return;

     label1:
        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $z0 = virtualinvoke $r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipCornerRadius>;

        virtualinvoke $r1.<android.graphics.Outline: void setRoundRect(android.graphics.Rect,float)>($r2, $f0);

        goto label3;

     label2:
        $i0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: int getIntrinsicWidth()>();

        $i1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: int getIntrinsicHeight()>();

        $f0 = r0.<com.google.android.material.chip.ChipDrawable: float chipCornerRadius>;

        virtualinvoke $r1.<android.graphics.Outline: void setRoundRect(int,int,int,int,float)>(0, 0, $i0, $i1, $f0);

     label3:
        $i0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: int getAlpha()>();

        $f0 = (float) $i0;

        $f0 = $f0 / 255.0F;

        virtualinvoke $r1.<android.graphics.Outline: void setAlpha(float)>($f0);

        return;
    }

    public android.content.res.ColorStateList getRippleColor()
    {
        android.content.res.ColorStateList r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList rippleColor>;

        return r1;
    }

    public com.google.android.material.animation.MotionSpec getShowMotionSpec()
    {
        com.google.android.material.animation.MotionSpec r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.animation.MotionSpec showMotionSpec>;

        return r1;
    }

    public java.lang.CharSequence getText()
    {
        java.lang.CharSequence r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        r1 = r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence text>;

        return r1;
    }

    public com.google.android.material.resources.TextAppearance getTextAppearance()
    {
        com.google.android.material.internal.TextDrawableHelper $r2;
        com.google.android.material.resources.TextAppearance $r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r1 = virtualinvoke $r2.<com.google.android.material.internal.TextDrawableHelper: com.google.android.material.resources.TextAppearance getTextAppearance()>();

        return $r1;
    }

    public float getTextEndPadding()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float textEndPadding>;

        return f0;
    }

    public float getTextStartPadding()
    {
        float f0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        f0 = r0.<com.google.android.material.chip.ChipDrawable: float textStartPadding>;

        return f0;
    }

    public boolean getUseCompatRipple()
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean useCompatRipple>;

        return z0;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable $r2;
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable$Callback $r1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 := @parameter0: android.graphics.drawable.Drawable;

        $r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if $r1 == null goto label1;

        interfaceinvoke $r1.<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>(r0);

     label1:
        return;
    }

    public boolean isCheckable()
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean checkable>;

        return z0;
    }

    public boolean isCheckedIconEnabled()
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean isCheckedIconVisible()>();

        return $z0;
    }

    public boolean isCheckedIconVisible()
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean checkedIconVisible>;

        return z0;
    }

    public boolean isChipIconEnabled()
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean isChipIconVisible()>();

        return $z0;
    }

    public boolean isChipIconVisible()
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean chipIconVisible>;

        return z0;
    }

    public boolean isCloseIconEnabled()
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean isCloseIconVisible()>();

        return $z0;
    }

    public boolean isCloseIconStateful()
    {
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z0 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r1);

        return $z0;
    }

    public boolean isCloseIconVisible()
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean closeIconVisible>;

        return z0;
    }

    public boolean isShapeThemingEnabled()
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        return z0;
    }

    public boolean isStateful()
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.ChipDrawable r0;
        com.google.android.material.internal.TextDrawableHelper $r2;
        com.google.android.material.resources.TextAppearance $r3;
        android.graphics.drawable.Drawable $r4;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipSurfaceColor>;

        $z0 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.content.res.ColorStateList)>($r1);

        if $z0 != 0 goto label3;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor>;

        $z0 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.content.res.ColorStateList)>($r1);

        if $z0 != 0 goto label3;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor>;

        $z0 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.content.res.ColorStateList)>($r1);

        if $z0 != 0 goto label3;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean useCompatRipple>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList compatRippleColor>;

        $z0 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.content.res.ColorStateList)>($r1);

        if $z0 != 0 goto label3;

     label1:
        $r2 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r3 = virtualinvoke $r2.<com.google.android.material.internal.TextDrawableHelper: com.google.android.material.resources.TextAppearance getTextAppearance()>();

        $z0 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(com.google.android.material.resources.TextAppearance)>($r3);

        if $z0 != 0 goto label3;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean canShowCheckedIcon()>();

        if $z0 != 0 goto label3;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z0 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r4);

        if $z0 != 0 goto label3;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z0 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r4);

        if $z0 != 0 goto label3;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList tint>;

        $z0 = staticinvoke <com.google.android.material.chip.ChipDrawable: boolean isStateful(android.content.res.ColorStateList)>($r1);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public boolean onLayoutDirectionChanged(int)
    {
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean onLayoutDirectionChanged(int)>($i0);

        $z1 = $z0;

        $z2 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z2 == 0 goto label1;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z1 = staticinvoke <b.i.c.a.a: boolean a(android.graphics.drawable.Drawable,int)>($r1, $i0);

        $z1 = $z0 | $z1;

     label1:
        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z0 = staticinvoke <b.i.c.a.a: boolean a(android.graphics.drawable.Drawable,int)>($r1, $i0);

        $z1 = $z1 | $z0;

     label2:
        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label3;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z0 = staticinvoke <b.i.c.a.a: boolean a(android.graphics.drawable.Drawable,int)>($r1, $i0);

        $z1 = $z1 | $z0;

     label3:
        if $z1 == 0 goto label4;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

     label4:
        return 1;
    }

    public boolean onLevelChange(int)
    {
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean onLevelChange(int)>($i0);

        $z1 = $z0;

        $z2 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z2 == 0 goto label1;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z1 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setLevel(int)>($i0);

        $z1 = $z0 | $z1;

     label1:
        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setLevel(int)>($i0);

        $z1 = $z1 | $z0;

     label2:
        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label3;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setLevel(int)>($i0);

        $z1 = $z1 | $z0;

     label3:
        if $z1 == 0 goto label4;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

     label4:
        return $z1;
    }

    public void onSizeChange()
    {
        com.google.android.material.chip.ChipDrawable r0;
        java.lang.Object $r1;
        com.google.android.material.chip.ChipDrawable$Delegate $r3;
        java.lang.ref.WeakReference $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: java.lang.ref.WeakReference delegate>;

        $r1 = virtualinvoke $r2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r3 = (com.google.android.material.chip.ChipDrawable$Delegate) $r1;

        if $r3 == null goto label1;

        interfaceinvoke $r3.<com.google.android.material.chip.ChipDrawable$Delegate: void onChipDrawableSizeChange()>();

     label1:
        return;
    }

    public boolean onStateChange(int[])
    {
        int[] $r1, $r2;
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: int[];

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: boolean onStateChange(int[])>($r1);

     label1:
        $r2 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: int[] getCloseIconState()>();

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean onStateChange(int[],int[])>($r1, $r2);

        return $z0;
    }

    public void onTextSizeChange()
    {
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        return;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable$Callback $r2;
        long $l0;
        java.lang.Runnable $r1;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r3 := @parameter0: android.graphics.drawable.Drawable;

        $r1 := @parameter1: java.lang.Runnable;

        $l0 := @parameter2: long;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if $r2 == null goto label1;

        interfaceinvoke $r2.<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>(r0, $r1, $l0);

     label1:
        return;
    }

    public void setAlpha(int)
    {
        int $i0, $i1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.android.material.chip.ChipDrawable: int alpha>;

        if $i1 == $i0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: int alpha> = $i0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setCheckable(boolean)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 := @parameter0: boolean;

        $z1 = r0.<com.google.android.material.chip.ChipDrawable: boolean checkable>;

        if $z1 == $z0 goto label2;

        r0.<com.google.android.material.chip.ChipDrawable: boolean checkable> = $z0;

        $f0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        if $z0 != 0 goto label1;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean currentChecked>;

        if $z0 == 0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: boolean currentChecked> = 0;

     label1:
        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        $b0 = $f0 cmpl $f1;

        if $b0 == 0 goto label2;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label2:
        return;
    }

    public void setCheckableResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCheckable(boolean)>($z0);

        return;
    }

    public void setCheckedIcon(android.graphics.drawable.Drawable)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        if $r2 == $r1 goto label1;

        $f0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon> = $r1;

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>($r1);

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r1);

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        $b0 = $f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setCheckedIconEnabled(boolean)
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 := @parameter0: boolean;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCheckedIconVisible(boolean)>($z0);

        return;
    }

    public void setCheckedIconEnabledResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCheckedIconVisible(boolean)>($z0);

        return;
    }

    public void setCheckedIconResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <b.b.b.a.a: android.graphics.drawable.Drawable c(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCheckedIcon(android.graphics.drawable.Drawable)>($r2);

        return;
    }

    public void setCheckedIconTint(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r2;
        int[] $r4;
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList checkedIconTint>;

        if $r2 == $r1 goto label2;

        r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList checkedIconTint> = $r1;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean canShowCheckedIcon()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        staticinvoke <b.i.c.a.a: void a(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($r3, $r1);

     label1:
        $r4 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean onStateChange(int[])>($r4);

     label2:
        return;
    }

    public void setCheckedIconTintResource(int)
    {
        android.content.res.ColorStateList $r2;
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <b.b.b.a.a: android.content.res.ColorStateList b(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCheckedIconTint(android.content.res.ColorStateList)>($r2);

        return;
    }

    public void setCheckedIconVisible(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCheckedIconVisible(boolean)>($z0);

        return;
    }

    public void setCheckedIconVisible(boolean)
    {
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 := @parameter0: boolean;

        $z1 = r0.<com.google.android.material.chip.ChipDrawable: boolean checkedIconVisible>;

        if $z1 == $z0 goto label5;

        $z1 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCheckedIcon()>();

        r0.<com.google.android.material.chip.ChipDrawable: boolean checkedIconVisible> = $z0;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z1 == $z0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label5;

        if $z0 == 0 goto label3;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r1);

        goto label4;

     label3:
        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>($r1);

     label4:
        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label5:
        return;
    }

    public void setChipBackgroundColor(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r3;
        int[] $r2;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r3 := @parameter0: android.content.res.ColorStateList;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor>;

        if $r1 == $r3 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor> = $r3;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean onStateChange(int[])>($r2);

     label1:
        return;
    }

    public void setChipBackgroundColorResource(int)
    {
        android.content.res.ColorStateList $r2;
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <b.b.b.a.a: android.content.res.ColorStateList b(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipBackgroundColor(android.content.res.ColorStateList)>($r2);

        return;
    }

    public void setChipCornerRadius(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        com.google.android.material.shape.ShapeAppearanceModel $r1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipCornerRadius>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: float chipCornerRadius> = $f0;

        $r1 = virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()>();

        $r1 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel withCornerSize(float)>($f0);

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)>($r1);

     label1:
        return;
    }

    public void setChipCornerRadiusResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipCornerRadius(float)>($f0);

        return;
    }

    public void setChipEndPadding(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipEndPadding>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: float chipEndPadding> = $f0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setChipEndPaddingResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipEndPadding(float)>($f0);

        return;
    }

    public void setChipIcon(android.graphics.drawable.Drawable)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        android.graphics.drawable.Drawable $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable getChipIcon()>();

        if $r2 == $r1 goto label4;

        $f0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        if $r1 == null goto label1;

        $r1 = staticinvoke <b.i.c.a.a: android.graphics.drawable.Drawable i(android.graphics.drawable.Drawable)>($r1);

        $r1 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon> = $r1;

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>($r2);

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 == 0 goto label3;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r1);

     label3:
        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        $b0 = $f0 cmpl $f1;

        if $b0 == 0 goto label4;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label4:
        return;
    }

    public void setChipIconEnabled(boolean)
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 := @parameter0: boolean;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipIconVisible(boolean)>($z0);

        return;
    }

    public void setChipIconEnabledResource(int)
    {
        int $i0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipIconVisible(int)>($i0);

        return;
    }

    public void setChipIconResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <b.b.b.a.a: android.graphics.drawable.Drawable c(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipIcon(android.graphics.drawable.Drawable)>($r2);

        return;
    }

    public void setChipIconSize(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipIconSize>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        r0.<com.google.android.material.chip.ChipDrawable: float chipIconSize> = $f0;

        $f0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setChipIconSizeResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipIconSize(float)>($f0);

        return;
    }

    public void setChipIconTint(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r2;
        int[] $r4;
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.content.res.ColorStateList;

        r0.<com.google.android.material.chip.ChipDrawable: boolean hasChipIconTint> = 1;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipIconTint>;

        if $r2 == $r1 goto label2;

        r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipIconTint> = $r1;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        staticinvoke <b.i.c.a.a: void a(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($r3, $r1);

     label1:
        $r4 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean onStateChange(int[])>($r4);

     label2:
        return;
    }

    public void setChipIconTintResource(int)
    {
        android.content.res.ColorStateList $r2;
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <b.b.b.a.a: android.content.res.ColorStateList b(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipIconTint(android.content.res.ColorStateList)>($r2);

        return;
    }

    public void setChipIconVisible(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipIconVisible(boolean)>($z0);

        return;
    }

    public void setChipIconVisible(boolean)
    {
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 := @parameter0: boolean;

        $z1 = r0.<com.google.android.material.chip.ChipDrawable: boolean chipIconVisible>;

        if $z1 == $z0 goto label5;

        $z1 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsChipIcon()>();

        r0.<com.google.android.material.chip.ChipDrawable: boolean chipIconVisible> = $z0;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z1 == $z0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label5;

        if $z0 == 0 goto label3;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r1);

        goto label4;

     label3:
        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>($r1);

     label4:
        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label5:
        return;
    }

    public void setChipMinHeight(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipMinHeight>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: float chipMinHeight> = $f0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setChipMinHeightResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipMinHeight(float)>($f0);

        return;
    }

    public void setChipStartPadding(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipStartPadding>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: float chipStartPadding> = $f0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setChipStartPaddingResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipStartPadding(float)>($f0);

        return;
    }

    public void setChipStrokeColor(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r2, $r3;
        int[] $r1;
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 := @parameter0: android.content.res.ColorStateList;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor>;

        if $r3 == $r2 goto label2;

        r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor> = $r2;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void setStrokeColor(android.content.res.ColorStateList)>($r2);

     label1:
        $r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean onStateChange(int[])>($r1);

     label2:
        return;
    }

    public void setChipStrokeColorResource(int)
    {
        android.content.res.ColorStateList $r2;
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <b.b.b.a.a: android.content.res.ColorStateList b(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipStrokeColor(android.content.res.ColorStateList)>($r2);

        return;
    }

    public void setChipStrokeWidth(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        android.graphics.Paint $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float chipStrokeWidth>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label2;

        r0.<com.google.android.material.chip.ChipDrawable: float chipStrokeWidth> = $f0;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean isShapeThemingEnabled>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void setStrokeWidth(float)>($f0);

     label1:
        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

     label2:
        return;
    }

    public void setChipStrokeWidthResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setChipStrokeWidth(float)>($f0);

        return;
    }

    public void setCloseIcon(android.graphics.drawable.Drawable)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        android.graphics.drawable.Drawable $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable getCloseIcon()>();

        if $r2 == $r1 goto label5;

        $f0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateCloseIconWidth()>();

        if $r1 == null goto label1;

        $r1 = staticinvoke <b.i.c.a.a: android.graphics.drawable.Drawable i(android.graphics.drawable.Drawable)>($r1);

        $r1 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon> = $r1;

        $z0 = <com.google.android.material.ripple.RippleUtils: boolean USE_FRAMEWORK_RIPPLE>;

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void updateFrameworkCloseIconRipple()>();

     label3:
        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateCloseIconWidth()>();

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>($r2);

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label4;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r1);

     label4:
        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        $b0 = $f0 cmpl $f1;

        if $b0 == 0 goto label5;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label5:
        return;
    }

    public void setCloseIconContentDescription(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1, $r2;
        com.google.android.material.chip.ChipDrawable r0;
        b.i.g.a $r3;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence closeIconContentDescription>;

        if $r2 == $r1 goto label1;

        $r3 = staticinvoke <b.i.g.a: b.i.g.a a()>();

        $r1 = virtualinvoke $r3.<b.i.g.a: java.lang.CharSequence c(java.lang.CharSequence)>($r1);

        r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence closeIconContentDescription> = $r1;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setCloseIconEnabled(boolean)
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 := @parameter0: boolean;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconVisible(boolean)>($z0);

        return;
    }

    public void setCloseIconEnabledResource(int)
    {
        int $i0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconVisible(int)>($i0);

        return;
    }

    public void setCloseIconEndPadding(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconEndPadding>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: float closeIconEndPadding> = $f0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setCloseIconEndPaddingResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconEndPadding(float)>($f0);

        return;
    }

    public void setCloseIconResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <b.b.b.a.a: android.graphics.drawable.Drawable c(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIcon(android.graphics.drawable.Drawable)>($r2);

        return;
    }

    public void setCloseIconSize(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconSize>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: float closeIconSize> = $f0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setCloseIconSizeResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconSize(float)>($f0);

        return;
    }

    public void setCloseIconStartPadding(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float closeIconStartPadding>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: float closeIconStartPadding> = $f0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setCloseIconStartPaddingResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconStartPadding(float)>($f0);

        return;
    }

    public boolean setCloseIconState(int[])
    {
        int[] $r1, $r2;
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: int[];

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: int[] closeIconStateSet>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r2, $r1);

        if $z0 != 0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: int[] closeIconStateSet> = $r1;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean onStateChange(int[],int[])>($r2, $r1);

        return $z0;

     label1:
        return 0;
    }

    public void setCloseIconTint(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r2;
        int[] $r4;
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList closeIconTint>;

        if $r2 == $r1 goto label2;

        r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList closeIconTint> = $r1;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        staticinvoke <b.i.c.a.a: void a(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($r3, $r1);

     label1:
        $r4 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean onStateChange(int[])>($r4);

     label2:
        return;
    }

    public void setCloseIconTintResource(int)
    {
        android.content.res.ColorStateList $r2;
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <b.b.b.a.a: android.content.res.ColorStateList b(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconTint(android.content.res.ColorStateList)>($r2);

        return;
    }

    public void setCloseIconVisible(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setCloseIconVisible(boolean)>($z0);

        return;
    }

    public void setCloseIconVisible(boolean)
    {
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 := @parameter0: boolean;

        $z1 = r0.<com.google.android.material.chip.ChipDrawable: boolean closeIconVisible>;

        if $z1 == $z0 goto label5;

        $z1 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        r0.<com.google.android.material.chip.ChipDrawable: boolean closeIconVisible> = $z0;

        $z0 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z1 == $z0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label5;

        if $z0 == 0 goto label3;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r1);

        goto label4;

     label3:
        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>($r1);

     label4:
        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label5:
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.ColorFilter $r1, $r2;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.ColorFilter colorFilter>;

        if $r2 == $r1 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.ColorFilter colorFilter> = $r1;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setDelegate(com.google.android.material.chip.ChipDrawable$Delegate)
    {
        com.google.android.material.chip.ChipDrawable$Delegate $r1;
        java.lang.ref.WeakReference $r2;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: com.google.android.material.chip.ChipDrawable$Delegate;

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r1);

        r0.<com.google.android.material.chip.ChipDrawable: java.lang.ref.WeakReference delegate> = $r2;

        return;
    }

    public void setEllipsize(android.text.TextUtils$TruncateAt)
    {
        com.google.android.material.chip.ChipDrawable r0;
        android.text.TextUtils$TruncateAt $r1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: android.text.TextUtils$TruncateAt;

        r0.<com.google.android.material.chip.ChipDrawable: android.text.TextUtils$TruncateAt truncateAt> = $r1;

        return;
    }

    public void setHideMotionSpec(com.google.android.material.animation.MotionSpec)
    {
        com.google.android.material.animation.MotionSpec $r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: com.google.android.material.animation.MotionSpec;

        r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.animation.MotionSpec hideMotionSpec> = $r1;

        return;
    }

    public void setHideMotionSpecResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.animation.MotionSpec $r2;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionSpec createFromResource(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setHideMotionSpec(com.google.android.material.animation.MotionSpec)>($r2);

        return;
    }

    public void setIconEndPadding(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float iconEndPadding>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        r0.<com.google.android.material.chip.ChipDrawable: float iconEndPadding> = $f0;

        $f0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setIconEndPaddingResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setIconEndPadding(float)>($f0);

        return;
    }

    public void setIconStartPadding(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float iconStartPadding>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        $f1 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        r0.<com.google.android.material.chip.ChipDrawable: float iconStartPadding> = $f0;

        $f0 = virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setIconStartPaddingResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setIconStartPadding(float)>($f0);

        return;
    }

    public void setMaxWidth(int)
    {
        int $i0;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        r0.<com.google.android.material.chip.ChipDrawable: int maxWidth> = $i0;

        return;
    }

    public void setRippleColor(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r3;
        int[] $r2;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r3 := @parameter0: android.content.res.ColorStateList;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList rippleColor>;

        if $r1 == $r3 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList rippleColor> = $r3;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void updateCompatRippleColor()>();

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean onStateChange(int[])>($r2);

     label1:
        return;
    }

    public void setRippleColorResource(int)
    {
        android.content.res.ColorStateList $r2;
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <b.b.b.a.a: android.content.res.ColorStateList b(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setRippleColor(android.content.res.ColorStateList)>($r2);

        return;
    }

    public void setShouldDrawText(boolean)
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z0 := @parameter0: boolean;

        r0.<com.google.android.material.chip.ChipDrawable: boolean shouldDrawText> = $z0;

        return;
    }

    public void setShowMotionSpec(com.google.android.material.animation.MotionSpec)
    {
        com.google.android.material.animation.MotionSpec $r1;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: com.google.android.material.animation.MotionSpec;

        r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.animation.MotionSpec showMotionSpec> = $r1;

        return;
    }

    public void setShowMotionSpecResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.animation.MotionSpec $r2;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <com.google.android.material.animation.MotionSpec: com.google.android.material.animation.MotionSpec createFromResource(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setShowMotionSpec(com.google.android.material.animation.MotionSpec)>($r2);

        return;
    }

    public void setText(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1, $r2;
        com.google.android.material.chip.ChipDrawable r0;
        com.google.android.material.internal.TextDrawableHelper $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: java.lang.CharSequence;

        if $r1 != null goto label1;

        $r1 = "";

     label1:
        $r2 = r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence text>;

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r2, $r1);

        if $z0 != 0 goto label2;

        r0.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence text> = $r1;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        virtualinvoke $r3.<com.google.android.material.internal.TextDrawableHelper: void setTextWidthDirty(boolean)>(1);

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label2:
        return;
    }

    public void setTextAppearance(com.google.android.material.resources.TextAppearance)
    {
        android.content.Context $r3;
        com.google.android.material.chip.ChipDrawable r0;
        com.google.android.material.internal.TextDrawableHelper $r2;
        com.google.android.material.resources.TextAppearance $r1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r1 := @parameter0: com.google.android.material.resources.TextAppearance;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: com.google.android.material.internal.TextDrawableHelper textDrawableHelper>;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        virtualinvoke $r2.<com.google.android.material.internal.TextDrawableHelper: void setTextAppearance(com.google.android.material.resources.TextAppearance,android.content.Context)>($r1, $r3);

        return;
    }

    public void setTextAppearanceResource(int)
    {
        android.content.Context $r2;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        com.google.android.material.resources.TextAppearance $r1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = new com.google.android.material.resources.TextAppearance;

        $r2 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        specialinvoke $r1.<com.google.android.material.resources.TextAppearance: void <init>(android.content.Context,int)>($r2, $i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setTextAppearance(com.google.android.material.resources.TextAppearance)>($r1);

        return;
    }

    public void setTextEndPadding(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float textEndPadding>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: float textEndPadding> = $f0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setTextEndPaddingResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setTextEndPadding(float)>($f0);

        return;
    }

    public void setTextResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        java.lang.String $r3;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setText(java.lang.CharSequence)>($r3);

        return;
    }

    public void setTextStartPadding(float)
    {
        byte $b0;
        com.google.android.material.chip.ChipDrawable r0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.chip.ChipDrawable: float textStartPadding>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: float textStartPadding> = $f0;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public void setTextStartPaddingResource(int)
    {
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable r0;
        int $i0;
        float $f0;
        android.content.res.Resources $r2;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: void setTextStartPadding(float)>($f0);

        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r3;
        int[] $r2;
        com.google.android.material.chip.ChipDrawable r0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r3 := @parameter0: android.content.res.ColorStateList;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList tint>;

        if $r1 == $r3 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList tint> = $r3;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean onStateChange(int[])>($r2);

     label1:
        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        android.content.res.ColorStateList $r4;
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.PorterDuffColorFilter $r1;
        android.graphics.PorterDuff$Mode $r2, $r3;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r2 := @parameter0: android.graphics.PorterDuff$Mode;

        $r3 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.PorterDuff$Mode tintMode>;

        if $r3 == $r2 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.PorterDuff$Mode tintMode> = $r2;

        $r4 = r0.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList tint>;

        $r1 = staticinvoke <com.google.android.material.drawable.DrawableUtils: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.drawable.Drawable,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>(r0, $r4, $r2);

        r0.<com.google.android.material.chip.ChipDrawable: android.graphics.PorterDuffColorFilter tintFilter> = $r1;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setUseCompatRipple(boolean)
    {
        int[] $r1;
        com.google.android.material.chip.ChipDrawable r0;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z1 := @parameter0: boolean;

        $z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean useCompatRipple>;

        if $z0 == $z1 goto label1;

        r0.<com.google.android.material.chip.ChipDrawable: boolean useCompatRipple> = $z1;

        specialinvoke r0.<com.google.android.material.chip.ChipDrawable: void updateCompatRippleColor()>();

        $r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        virtualinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean onStateChange(int[])>($r1);

     label1:
        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $z1 := @parameter0: boolean;

        $z0 := @parameter1: boolean;

        $z2 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, $z0);

        $z3 = $z2;

        $z4 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z4 == 0 goto label1;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z3 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, $z0);

        $z3 = $z2 | $z3;

     label1:
        $z2 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z2 == 0 goto label2;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, $z0);

        $z3 = $z3 | $z2;

     label2:
        $z2 = specialinvoke r0.<com.google.android.material.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z2 == 0 goto label3;

        $r1 = r0.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z1 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, $z0);

        $z3 = $z3 | $z1;

     label3:
        if $z3 == 0 goto label4;

        virtualinvoke r0.<com.google.android.material.shape.MaterialShapeDrawable: void invalidateSelf()>();

     label4:
        return $z3;
    }

    public boolean shouldDrawText()
    {
        com.google.android.material.chip.ChipDrawable r0;
        boolean z0;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        z0 = r0.<com.google.android.material.chip.ChipDrawable: boolean shouldDrawText>;

        return z0;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        com.google.android.material.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable$Callback $r2;
        java.lang.Runnable $r1;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: com.google.android.material.chip.ChipDrawable;

        $r3 := @parameter0: android.graphics.drawable.Drawable;

        $r1 := @parameter1: java.lang.Runnable;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if $r2 == null goto label1;

        interfaceinvoke $r2.<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>(r0, $r1);

     label1:
        return;
    }
}
