public abstract class com.google.common.collect.AbstractMapBasedMultiset extends com.google.common.collect.AbstractMultiset implements java.io.Serializable
{
    public static final long serialVersionUID;
    public transient java.util.Map backingMap;
    public transient long size;

    public void <init>(java.util.Map)
    {
        java.util.Map $r1;
        com.google.common.collect.AbstractMapBasedMultiset r0;
        int $i1;
        long $l0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 := @parameter0: java.util.Map;

        specialinvoke r0.<com.google.common.collect.AbstractMultiset: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap> = $r1;

        $i1 = specialinvoke r0.<com.google.common.collect.AbstractMultiset: int size()>();

        $l0 = (long) $i1;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l0;

        return;
    }

    public static void a(java.util.function.ObjIntConsumer, java.lang.Object, com.google.common.collect.Count)
    {
        int $i0;
        com.google.common.collect.Count $r2;
        java.lang.Object $r1;
        java.util.function.ObjIntConsumer $r0;

        $r0 := @parameter0: java.util.function.ObjIntConsumer;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: com.google.common.collect.Count;

        $i0 = virtualinvoke $r2.<com.google.common.collect.Count: int get()>();

        interfaceinvoke $r0.<java.util.function.ObjIntConsumer: void accept(java.lang.Object,int)>($r1, $i0);

        return;
    }

    public static java.util.Map access$000(com.google.common.collect.AbstractMapBasedMultiset)
    {
        com.google.common.collect.AbstractMapBasedMultiset $r0;
        java.util.Map r1;

        $r0 := @parameter0: com.google.common.collect.AbstractMapBasedMultiset;

        r1 = $r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        return r1;
    }

    public static long access$100(com.google.common.collect.AbstractMapBasedMultiset)
    {
        com.google.common.collect.AbstractMapBasedMultiset $r0;
        long l0;

        $r0 := @parameter0: com.google.common.collect.AbstractMapBasedMultiset;

        l0 = $r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        return l0;
    }

    public static long access$102(com.google.common.collect.AbstractMapBasedMultiset, long)
    {
        com.google.common.collect.AbstractMapBasedMultiset $r0;
        long $l0;

        $r0 := @parameter0: com.google.common.collect.AbstractMapBasedMultiset;

        $l0 := @parameter1: long;

        $r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l0;

        return $l0;
    }

    public static long access$110(com.google.common.collect.AbstractMapBasedMultiset)
    {
        com.google.common.collect.AbstractMapBasedMultiset $r0;
        long $l0, $l1;

        $r0 := @parameter0: com.google.common.collect.AbstractMapBasedMultiset;

        $l0 = $r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $l1 = $l0 - 1L;

        $r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l1;

        return $l0;
    }

    public static int getAndSet(com.google.common.collect.Count, int)
    {
        int $i0;
        com.google.common.collect.Count $r0;

        $r0 := @parameter0: com.google.common.collect.Count;

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r0.<com.google.common.collect.Count: int getAndSet(int)>($i0);

        return $i0;
    }

    private void readObjectNoData()
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        java.io.InvalidObjectException $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 = new java.io.InvalidObjectException;

        specialinvoke $r1.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Stream data required");

        throw $r1;
    }

    public int add(java.lang.Object, int)
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        long $l4, $l5;
        byte $b1;
        java.util.Map $r2;
        int $i0, $i2, $i3;
        com.google.common.collect.Count $r4, $r5;
        java.lang.Object $r1, $r3;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: int count(java.lang.Object)>($r1);

        return $i0;

     label1:
        $z0 = 1;

        if $i0 <= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z1, "occurrences cannot be negative: %s", $i0);

        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (com.google.common.collect.Count) $r3;

        if $r4 != null goto label4;

        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r5 = new com.google.common.collect.Count;

        specialinvoke $r5.<com.google.common.collect.Count: void <init>(int)>($i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

        $i2 = 0;

        goto label7;

     label4:
        $i3 = virtualinvoke $r4.<com.google.common.collect.Count: int get()>();

        $i2 = $i3;

        $l4 = (long) $i3;

        $l5 = (long) $i0;

        $l4 = $l4 + $l5;

        $b1 = $l4 cmp 2147483647L;

        $i3 = (int) $b1;

        if $i3 > 0 goto label5;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "too many occurrences: %s", $l4);

        virtualinvoke $r4.<com.google.common.collect.Count: void add(int)>($i0);

     label7:
        $l4 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $l5 = (long) $i0;

        $l4 = $l4 + $l5;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l4;

        return $i2;
    }

    public void clear()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Collection $r2;
        com.google.common.collect.AbstractMapBasedMultiset r0;
        com.google.common.collect.Count $r5;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.common.collect.Count) $r4;

        virtualinvoke $r5.<com.google.common.collect.Count: void set(int)>(0);

        goto label1;

     label2:
        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = 0L;

        return;
    }

    public int count(java.lang.Object)
    {
        java.util.Map $r1;
        com.google.common.collect.AbstractMapBasedMultiset r0;
        int $i0;
        com.google.common.collect.Count $r3;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r2 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r1, $r2);

        $r3 = (com.google.common.collect.Count) $r2;

        if $r3 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r3.<com.google.common.collect.Count: int get()>();

        return $i0;
    }

    public int distinctElements()
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        int $i0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.util.Iterator entryIterator()
    {
        java.util.Iterator $r4;
        java.util.Map $r2;
        com.google.common.collect.AbstractMapBasedMultiset r0;
        java.util.Set $r3;
        com.google.common.collect.AbstractMapBasedMultiset$1 $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r1 = new com.google.common.collect.AbstractMapBasedMultiset$1;

        specialinvoke $r1.<com.google.common.collect.AbstractMapBasedMultiset$1: void <init>(com.google.common.collect.AbstractMapBasedMultiset,java.util.Iterator)>(r0, $r4);

        return $r1;
    }

    public java.util.Set entrySet()
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        java.util.Set $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractMultiset: java.util.Set entrySet()>();

        return $r1;
    }

    public void forEachEntry(java.util.function.ObjIntConsumer)
    {
        java.util.Map $r2;
        com.google.common.collect.AbstractMapBasedMultiset r0;
        c.i.b.c.t $r3;
        java.util.function.ObjIntConsumer $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 := @parameter0: java.util.function.ObjIntConsumer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r3 = new c.i.b.c.t;

        specialinvoke $r3.<c.i.b.c.t: void <init>(java.util.function.ObjIntConsumer)>($r1);

        interfaceinvoke $r2.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r3);

        return;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 = new com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator;

        specialinvoke $r1.<com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: void <init>(com.google.common.collect.AbstractMapBasedMultiset)>(r0);

        return $r1;
    }

    public int remove(java.lang.Object, int)
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        long $l3, $l4;
        java.util.Map $r2;
        int $i0, $i1, $i2;
        com.google.common.collect.Count $r4;
        java.lang.Object $r1, $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset: int count(java.lang.Object)>($r1);

        return $i0;

     label1:
        if $i0 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "occurrences cannot be negative: %s", $i0);

        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (com.google.common.collect.Count) $r3;

        if $r4 != null goto label4;

        return 0;

     label4:
        $i1 = virtualinvoke $r4.<com.google.common.collect.Count: int get()>();

        if $i1 <= $i0 goto label5;

        goto label6;

     label5:
        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $i0 = $i1;

     label6:
        $i2 = neg $i0;

        virtualinvoke $r4.<com.google.common.collect.Count: void add(int)>($i2);

        $l3 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $l4 = (long) $i0;

        $l3 = $l3 - $l4;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l3;

        return $i1;
    }

    public void setBackingMap(java.util.Map)
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 := @parameter0: java.util.Map;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap> = $r1;

        return;
    }

    public int setCount(java.lang.Object, int)
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        long $l2, $l3;
        java.util.Map $r2;
        int $i0, $i1;
        com.google.common.collect.Count $r3;
        java.lang.Object $r1, $r4;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "count");

        if $i0 != 0 goto label1;

        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r3 = (com.google.common.collect.Count) $r1;

        $i1 = staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: int getAndSet(com.google.common.collect.Count,int)>($r3, $i0);

        goto label2;

     label1:
        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (com.google.common.collect.Count) $r4;

        $i1 = staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: int getAndSet(com.google.common.collect.Count,int)>($r3, $i0);

        if $r3 != null goto label2;

        $r2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r3 = new com.google.common.collect.Count;

        specialinvoke $r3.<com.google.common.collect.Count: void <init>(int)>($i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

     label2:
        $l2 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $i0 = $i0 - $i1;

        $l3 = (long) $i0;

        $l2 = $l2 + $l3;

        r0.<com.google.common.collect.AbstractMapBasedMultiset: long size> = $l2;

        return $i1;
    }

    public int size()
    {
        com.google.common.collect.AbstractMapBasedMultiset r0;
        int $i0;
        long $l1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset;

        $l1 = r0.<com.google.common.collect.AbstractMapBasedMultiset: long size>;

        $i0 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l1);

        return $i0;
    }

    public static void <clinit>()
    {
        <com.google.common.collect.AbstractMapBasedMultiset: long serialVersionUID> = -2250766705698539974L;

        return;
    }
}
