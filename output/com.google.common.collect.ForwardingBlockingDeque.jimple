public abstract class com.google.common.collect.ForwardingBlockingDeque extends com.google.common.collect.ForwardingDeque implements java.util.concurrent.BlockingDeque
{

    public void <init>()
    {
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        specialinvoke r0.<com.google.common.collect.ForwardingDeque: void <init>()>();

        return;
    }

    public volatile java.lang.Object delegate()
    {
        java.util.concurrent.BlockingDeque $r1;
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        return $r1;
    }

    public volatile java.util.Collection delegate()
    {
        java.util.concurrent.BlockingDeque $r1;
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        return $r1;
    }

    public volatile java.util.Deque delegate()
    {
        java.util.concurrent.BlockingDeque $r1;
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        return $r1;
    }

    public volatile java.util.Queue delegate()
    {
        java.util.concurrent.BlockingDeque $r1;
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        return $r1;
    }

    public abstract java.util.concurrent.BlockingDeque delegate();

    public int drainTo(java.util.Collection)
    {
        java.util.concurrent.BlockingDeque $r2;
        com.google.common.collect.ForwardingBlockingDeque r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $i0 = interfaceinvoke $r2.<java.util.concurrent.BlockingDeque: int drainTo(java.util.Collection)>($r1);

        return $i0;
    }

    public int drainTo(java.util.Collection, int)
    {
        java.util.concurrent.BlockingDeque $r2;
        com.google.common.collect.ForwardingBlockingDeque r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 := @parameter0: java.util.Collection;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $i0 = interfaceinvoke $r2.<java.util.concurrent.BlockingDeque: int drainTo(java.util.Collection,int)>($r1, $i0);

        return $i0;
    }

    public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.BlockingDeque $r3;
        com.google.common.collect.ForwardingBlockingDeque r0;
        long $l0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r2 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $z0 = interfaceinvoke $r3.<java.util.concurrent.BlockingDeque: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>($r2, $l0, $r1);

        return $z0;
    }

    public boolean offerFirst(java.lang.Object, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.BlockingDeque $r3;
        com.google.common.collect.ForwardingBlockingDeque r0;
        long $l0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r2 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $z0 = interfaceinvoke $r3.<java.util.concurrent.BlockingDeque: boolean offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)>($r2, $l0, $r1);

        return $z0;
    }

    public boolean offerLast(java.lang.Object, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.BlockingDeque $r3;
        com.google.common.collect.ForwardingBlockingDeque r0;
        long $l0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r2 := @parameter0: java.lang.Object;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $z0 = interfaceinvoke $r3.<java.util.concurrent.BlockingDeque: boolean offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)>($r2, $l0, $r1);

        return $z0;
    }

    public java.lang.Object poll(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.BlockingDeque $r2;
        com.google.common.collect.ForwardingBlockingDeque r0;
        long $l0;
        java.lang.Object $r3;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $r3 = interfaceinvoke $r2.<java.util.concurrent.BlockingDeque: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>($l0, $r1);

        return $r3;
    }

    public java.lang.Object pollFirst(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.BlockingDeque $r2;
        com.google.common.collect.ForwardingBlockingDeque r0;
        long $l0;
        java.lang.Object $r3;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $r3 = interfaceinvoke $r2.<java.util.concurrent.BlockingDeque: java.lang.Object pollFirst(long,java.util.concurrent.TimeUnit)>($l0, $r1);

        return $r3;
    }

    public java.lang.Object pollLast(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.BlockingDeque $r2;
        com.google.common.collect.ForwardingBlockingDeque r0;
        long $l0;
        java.lang.Object $r3;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $r3 = interfaceinvoke $r2.<java.util.concurrent.BlockingDeque: java.lang.Object pollLast(long,java.util.concurrent.TimeUnit)>($l0, $r1);

        return $r3;
    }

    public void put(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.concurrent.BlockingDeque $r2;
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        interfaceinvoke $r2.<java.util.concurrent.BlockingDeque: void put(java.lang.Object)>($r1);

        return;
    }

    public void putFirst(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.concurrent.BlockingDeque $r2;
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        interfaceinvoke $r2.<java.util.concurrent.BlockingDeque: void putFirst(java.lang.Object)>($r1);

        return;
    }

    public void putLast(java.lang.Object)
    {
        java.lang.Object $r1;
        java.util.concurrent.BlockingDeque $r2;
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        interfaceinvoke $r2.<java.util.concurrent.BlockingDeque: void putLast(java.lang.Object)>($r1);

        return;
    }

    public int remainingCapacity()
    {
        int $i0;
        java.util.concurrent.BlockingDeque $r1;
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $i0 = interfaceinvoke $r1.<java.util.concurrent.BlockingDeque: int remainingCapacity()>();

        return $i0;
    }

    public java.lang.Object take()
    {
        java.lang.Object $r2;
        java.util.concurrent.BlockingDeque $r1;
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $r2 = interfaceinvoke $r1.<java.util.concurrent.BlockingDeque: java.lang.Object take()>();

        return $r2;
    }

    public java.lang.Object takeFirst()
    {
        java.lang.Object $r2;
        java.util.concurrent.BlockingDeque $r1;
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $r2 = interfaceinvoke $r1.<java.util.concurrent.BlockingDeque: java.lang.Object takeFirst()>();

        return $r2;
    }

    public java.lang.Object takeLast()
    {
        java.lang.Object $r2;
        java.util.concurrent.BlockingDeque $r1;
        com.google.common.collect.ForwardingBlockingDeque r0;

        r0 := @this: com.google.common.collect.ForwardingBlockingDeque;

        $r1 = virtualinvoke r0.<com.google.common.collect.ForwardingBlockingDeque: java.util.concurrent.BlockingDeque delegate()>();

        $r2 = interfaceinvoke $r1.<java.util.concurrent.BlockingDeque: java.lang.Object takeLast()>();

        return $r2;
    }
}
