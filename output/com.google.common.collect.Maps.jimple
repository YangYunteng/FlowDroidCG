public final class com.google.common.collect.Maps extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.collect.Maps r0;

        r0 := @this: com.google.common.collect.Maps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.collect.Maps$Accumulator a()
    {
        c.i.b.c.db $r1;
        com.google.common.collect.Maps$Accumulator $r0;

        $r0 = new com.google.common.collect.Maps$Accumulator;

        $r1 = <c.i.b.c.db: c.i.b.c.db a>;

        specialinvoke $r0.<com.google.common.collect.Maps$Accumulator: void <init>(java.util.function.BinaryOperator)>($r1);

        return $r0;
    }

    public static com.google.common.collect.Maps$Accumulator a(java.util.function.BinaryOperator)
    {
        com.google.common.collect.Maps$Accumulator $r1;
        java.util.function.BinaryOperator $r0;

        $r0 := @parameter0: java.util.function.BinaryOperator;

        $r1 = new com.google.common.collect.Maps$Accumulator;

        specialinvoke $r1.<com.google.common.collect.Maps$Accumulator: void <init>(java.util.function.BinaryOperator)>($r0);

        return $r1;
    }

    public static java.lang.Object a(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r4;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r1;

        $r4 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple values for key: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static void a(java.util.function.Function, java.util.function.Function, com.google.common.collect.Maps$Accumulator, java.lang.Object)
    {
        java.lang.Enum $r5;
        java.lang.Object $r1, $r4;
        com.google.common.collect.Maps$Accumulator $r0;
        java.util.function.Function $r2, $r3;

        $r2 := @parameter0: java.util.function.Function;

        $r3 := @parameter1: java.util.function.Function;

        $r0 := @parameter2: com.google.common.collect.Maps$Accumulator;

        $r1 := @parameter3: java.lang.Object;

        $r4 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r4, "Null key for input %s", $r1);

        $r5 = (java.lang.Enum) $r4;

        $r4 = interfaceinvoke $r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r4, "Null value for input %s", $r1);

        virtualinvoke $r0.<com.google.common.collect.Maps$Accumulator: void put(java.lang.Enum,java.lang.Object)>($r5, $r4);

        return;
    }

    public static java.util.Map access$100(java.util.Map)
    {
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        return $r0;
    }

    public static java.util.Set access$200(java.util.Set)
    {
        java.util.Set $r0;

        $r0 := @parameter0: java.util.Set;

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.Set removeOnlySet(java.util.Set)>($r0);

        return $r0;
    }

    public static java.util.SortedSet access$300(java.util.SortedSet)
    {
        java.util.SortedSet $r0;

        $r0 := @parameter0: java.util.SortedSet;

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.SortedSet removeOnlySortedSet(java.util.SortedSet)>($r0);

        return $r0;
    }

    public static java.util.NavigableSet access$400(java.util.NavigableSet)
    {
        java.util.NavigableSet $r0;

        $r0 := @parameter0: java.util.NavigableSet;

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.NavigableSet removeOnlyNavigableSet(java.util.NavigableSet)>($r0);

        return $r0;
    }

    public static java.util.Map$Entry access$800(java.util.Map$Entry)
    {
        java.util.Map$Entry $r0;

        $r0 := @parameter0: java.util.Map$Entry;

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry unmodifiableOrNull(java.util.Map$Entry)>($r0);

        return $r0;
    }

    public static com.google.common.base.Converter asConverter(com.google.common.collect.BiMap)
    {
        com.google.common.collect.BiMap $r0;
        com.google.common.collect.Maps$BiMapConverter $r1;

        $r0 := @parameter0: com.google.common.collect.BiMap;

        $r1 = new com.google.common.collect.Maps$BiMapConverter;

        specialinvoke $r1.<com.google.common.collect.Maps$BiMapConverter: void <init>(com.google.common.collect.BiMap)>($r0);

        return $r1;
    }

    public static com.google.common.base.Function asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer)
    {
        com.google.common.collect.Maps$EntryTransformer $r0;
        com.google.common.collect.Maps$11 $r1;

        $r0 := @parameter0: com.google.common.collect.Maps$EntryTransformer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.collect.Maps$11;

        specialinvoke $r1.<com.google.common.collect.Maps$11: void <init>(com.google.common.collect.Maps$EntryTransformer)>($r0);

        return $r1;
    }

    public static com.google.common.base.Function asEntryToValueFunction(com.google.common.collect.Maps$EntryTransformer)
    {
        com.google.common.collect.Maps$9 $r1;
        com.google.common.collect.Maps$EntryTransformer $r0;

        $r0 := @parameter0: com.google.common.collect.Maps$EntryTransformer;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.collect.Maps$9;

        specialinvoke $r1.<com.google.common.collect.Maps$9: void <init>(com.google.common.collect.Maps$EntryTransformer)>($r0);

        return $r1;
    }

    public static com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function)
    {
        com.google.common.base.Function $r0;
        com.google.common.collect.Maps$7 $r1;

        $r0 := @parameter0: com.google.common.base.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.collect.Maps$7;

        specialinvoke $r1.<com.google.common.collect.Maps$7: void <init>(com.google.common.base.Function)>($r0);

        return $r1;
    }

    public static java.util.Map asMap(java.util.Set, com.google.common.base.Function)
    {
        java.util.Set $r0;
        com.google.common.base.Function $r1;
        com.google.common.collect.Maps$AsMapView $r2;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: com.google.common.base.Function;

        $r2 = new com.google.common.collect.Maps$AsMapView;

        specialinvoke $r2.<com.google.common.collect.Maps$AsMapView: void <init>(java.util.Set,com.google.common.base.Function)>($r0, $r1);

        return $r2;
    }

    public static java.util.NavigableMap asMap(java.util.NavigableSet, com.google.common.base.Function)
    {
        java.util.NavigableSet $r0;
        com.google.common.base.Function $r1;
        com.google.common.collect.Maps$NavigableAsMapView $r2;

        $r0 := @parameter0: java.util.NavigableSet;

        $r1 := @parameter1: com.google.common.base.Function;

        $r2 = new com.google.common.collect.Maps$NavigableAsMapView;

        specialinvoke $r2.<com.google.common.collect.Maps$NavigableAsMapView: void <init>(java.util.NavigableSet,com.google.common.base.Function)>($r0, $r1);

        return $r2;
    }

    public static java.util.SortedMap asMap(java.util.SortedSet, com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        java.util.SortedSet $r0;
        com.google.common.collect.Maps$SortedAsMapView $r2;

        $r0 := @parameter0: java.util.SortedSet;

        $r1 := @parameter1: com.google.common.base.Function;

        $r2 = new com.google.common.collect.Maps$SortedAsMapView;

        specialinvoke $r2.<com.google.common.collect.Maps$SortedAsMapView: void <init>(java.util.SortedSet,com.google.common.base.Function)>($r0, $r1);

        return $r2;
    }

    public static java.util.Iterator asMapEntryIterator(java.util.Set, com.google.common.base.Function)
    {
        com.google.common.base.Function $r0;
        java.util.Iterator $r2;
        com.google.common.collect.Maps$1 $r1;
        java.util.Set $r3;

        $r3 := @parameter0: java.util.Set;

        $r0 := @parameter1: com.google.common.base.Function;

        $r1 = new com.google.common.collect.Maps$1;

        $r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        specialinvoke $r1.<com.google.common.collect.Maps$1: void <init>(java.util.Iterator,com.google.common.base.Function)>($r2, $r0);

        return $r1;
    }

    public static com.google.common.base.Function asValueToValueFunction(com.google.common.collect.Maps$EntryTransformer, java.lang.Object)
    {
        com.google.common.collect.Maps$8 $r2;
        java.lang.Object $r1;
        com.google.common.collect.Maps$EntryTransformer $r0;

        $r0 := @parameter0: com.google.common.collect.Maps$EntryTransformer;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = new com.google.common.collect.Maps$8;

        specialinvoke $r2.<com.google.common.collect.Maps$8: void <init>(com.google.common.collect.Maps$EntryTransformer,java.lang.Object)>($r0, $r1);

        return $r2;
    }

    public static void b(java.util.function.Function, java.util.function.Function, com.google.common.collect.Maps$Accumulator, java.lang.Object)
    {
        java.lang.Enum $r5;
        java.lang.Object $r1, $r4;
        com.google.common.collect.Maps$Accumulator $r0;
        java.util.function.Function $r2, $r3;

        $r2 := @parameter0: java.util.function.Function;

        $r3 := @parameter1: java.util.function.Function;

        $r0 := @parameter2: com.google.common.collect.Maps$Accumulator;

        $r1 := @parameter3: java.lang.Object;

        $r4 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r4, "Null key for input %s", $r1);

        $r5 = (java.lang.Enum) $r4;

        $r4 = interfaceinvoke $r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r4, "Null value for input %s", $r1);

        virtualinvoke $r0.<com.google.common.collect.Maps$Accumulator: void put(java.lang.Enum,java.lang.Object)>($r5, $r4);

        return;
    }

    public static int capacity(int)
    {
        int $i0;
        float $f0;

        $i0 := @parameter0: int;

        if $i0 >= 3 goto label1;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "expectedSize");

        $i0 = $i0 + 1;

        return $i0;

     label1:
        if $i0 >= 1073741824 goto label2;

        $f0 = (float) $i0;

        $f0 = $f0 / 0.75F;

        $f0 = $f0 + 1.0F;

        $i0 = (int) $f0;

        return $i0;

     label2:
        return 2147483647;
    }

    public static boolean containsEntryImpl(java.util.Collection, java.lang.Object)
    {
        java.util.Map$Entry $r2;
        java.util.Collection $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.lang.Object;

        $z0 = $r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (java.util.Map$Entry) $r1;

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry)>($r2);

        $z0 = interfaceinvoke $r0.<java.util.Collection: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    public static boolean containsKeyImpl(java.util.Map, java.lang.Object)
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        java.lang.Object $r0;
        boolean $z0;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.google.common.collect.Maps: java.util.Iterator keyIterator(java.util.Iterator)>($r3);

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>($r3, $r0);

        return $z0;
    }

    public static boolean containsValueImpl(java.util.Map, java.lang.Object)
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        java.lang.Object $r0;
        boolean $z0;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.google.common.collect.Maps: java.util.Iterator valueIterator(java.util.Iterator)>($r3);

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>($r3, $r0);

        return $z0;
    }

    public static com.google.common.collect.MapDifference difference(java.util.Map, java.util.Map)
    {
        com.google.common.collect.MapDifference $r5;
        com.google.common.base.Equivalence $r4;
        java.util.Map $r0, $r1;
        java.util.SortedMap $r2;
        com.google.common.collect.SortedMapDifference $r3;
        boolean $z0;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.util.Map;

        $z0 = $r1 instanceof java.util.SortedMap;

        if $z0 == 0 goto label1;

        $r2 = (java.util.SortedMap) $r1;

        $r3 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.SortedMapDifference difference(java.util.SortedMap,java.util.Map)>($r2, $r0);

        return $r3;

     label1:
        $r4 = staticinvoke <com.google.common.base.Equivalence: com.google.common.base.Equivalence equals()>();

        $r5 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map,com.google.common.base.Equivalence)>($r1, $r0, $r4);

        return $r5;
    }

    public static com.google.common.collect.MapDifference difference(java.util.Map, java.util.Map, com.google.common.base.Equivalence)
    {
        com.google.common.base.Equivalence $r1;
        com.google.common.collect.Maps$MapDifferenceImpl $r7;
        java.util.LinkedHashMap $r2, $r4, $r5, $r6;
        java.util.Map $r0, $r3;

        $r3 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.util.Map;

        $r1 := @parameter2: com.google.common.base.Equivalence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r0);

        $r5 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        $r6 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        staticinvoke <com.google.common.collect.Maps: void doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>($r3, $r0, $r1, $r4, $r2, $r5, $r6);

        $r7 = new com.google.common.collect.Maps$MapDifferenceImpl;

        specialinvoke $r7.<com.google.common.collect.Maps$MapDifferenceImpl: void <init>(java.util.Map,java.util.Map,java.util.Map,java.util.Map)>($r4, $r2, $r5, $r6);

        return $r7;
    }

    public static com.google.common.collect.SortedMapDifference difference(java.util.SortedMap, java.util.Map)
    {
        com.google.common.base.Equivalence $r7;
        java.util.TreeMap $r3, $r4, $r5, $r6;
        java.util.Map $r0;
        com.google.common.collect.Maps$SortedMapDifferenceImpl $r8;
        java.util.Comparator $r2;
        java.util.SortedMap $r1;

        $r1 := @parameter0: java.util.SortedMap;

        $r0 := @parameter1: java.util.Map;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = interfaceinvoke $r1.<java.util.SortedMap: java.util.Comparator comparator()>();

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.Comparator orNaturalOrder(java.util.Comparator)>($r2);

        $r3 = staticinvoke <com.google.common.collect.Maps: java.util.TreeMap newTreeMap(java.util.Comparator)>($r2);

        $r4 = staticinvoke <com.google.common.collect.Maps: java.util.TreeMap newTreeMap(java.util.Comparator)>($r2);

        interfaceinvoke $r4.<java.util.SortedMap: void putAll(java.util.Map)>($r0);

        $r5 = staticinvoke <com.google.common.collect.Maps: java.util.TreeMap newTreeMap(java.util.Comparator)>($r2);

        $r6 = staticinvoke <com.google.common.collect.Maps: java.util.TreeMap newTreeMap(java.util.Comparator)>($r2);

        $r7 = staticinvoke <com.google.common.base.Equivalence: com.google.common.base.Equivalence equals()>();

        staticinvoke <com.google.common.collect.Maps: void doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>($r1, $r0, $r7, $r3, $r4, $r5, $r6);

        $r8 = new com.google.common.collect.Maps$SortedMapDifferenceImpl;

        specialinvoke $r8.<com.google.common.collect.Maps$SortedMapDifferenceImpl: void <init>(java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap)>($r3, $r4, $r5, $r6);

        return $r8;
    }

    public static void doDifference(java.util.Map, java.util.Map, com.google.common.base.Equivalence, java.util.Map, java.util.Map, java.util.Map, java.util.Map)
    {
        java.util.Map$Entry $r10;
        com.google.common.base.Equivalence $r1;
        java.util.Iterator $r8;
        java.util.Set $r7;
        com.google.common.collect.MapDifference$ValueDifference $r13;
        java.util.Map $r0, $r2, $r3, $r4, $r5, $r6;
        java.lang.Object $r9, $r11, $r12;
        boolean $z0;

        $r6 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.util.Map;

        $r1 := @parameter2: com.google.common.base.Equivalence;

        $r2 := @parameter3: java.util.Map;

        $r3 := @parameter4: java.util.Map;

        $r4 := @parameter5: java.util.Map;

        $r5 := @parameter6: java.util.Map;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.util.Map$Entry) $r9;

        $r9 = interfaceinvoke $r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = interfaceinvoke $r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r9);

        $z0 = virtualinvoke $r1.<com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>($r11, $r12);

        if $z0 == 0 goto label2;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11);

        goto label1;

     label2:
        $r13 = staticinvoke <com.google.common.collect.Maps$ValueDifferenceImpl: com.google.common.collect.MapDifference$ValueDifference create(java.lang.Object,java.lang.Object)>($r11, $r12);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r13);

        goto label1;

     label3:
        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11);

        goto label1;

     label4:
        return;
    }

    public static boolean equalsImpl(java.util.Map, java.lang.Object)
    {
        java.util.Map $r0, $r2;
        java.util.Set $r3, $r4;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.lang.Object;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof java.util.Map;

        if $z0 == 0 goto label2;

        $r2 = (java.util.Map) $r1;

        $r3 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean equals(java.lang.Object)>($r4);

        return $z0;

     label2:
        return 0;
    }

    public static com.google.common.collect.BiMap filterEntries(com.google.common.collect.BiMap, com.google.common.base.Predicate)
    {
        com.google.common.collect.BiMap $r1;
        com.google.common.base.Predicate $r0;
        com.google.common.collect.Maps$FilteredEntryBiMap $r2;
        boolean $z0;

        $r1 := @parameter0: com.google.common.collect.BiMap;

        $r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r1 instanceof com.google.common.collect.Maps$FilteredEntryBiMap;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Maps$FilteredEntryBiMap) $r1;

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.BiMap filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate)>($r2, $r0);

        return $r1;

     label1:
        $r2 = new com.google.common.collect.Maps$FilteredEntryBiMap;

        specialinvoke $r2.<com.google.common.collect.Maps$FilteredEntryBiMap: void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate)>($r1, $r0);

        return $r2;
    }

    public static java.util.Map filterEntries(java.util.Map, com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate $r0;
        java.util.Map $r1;
        com.google.common.collect.Maps$FilteredEntryMap $r3;
        com.google.common.collect.Maps$AbstractFilteredMap $r2;
        boolean $z0;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r1 instanceof com.google.common.collect.Maps$AbstractFilteredMap;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Maps$AbstractFilteredMap) $r1;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.Map filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate)>($r2, $r0);

        return $r1;

     label1:
        $r3 = new com.google.common.collect.Maps$FilteredEntryMap;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        specialinvoke $r3.<com.google.common.collect.Maps$FilteredEntryMap: void <init>(java.util.Map,com.google.common.base.Predicate)>($r1, $r0);

        return $r3;
    }

    public static java.util.NavigableMap filterEntries(java.util.NavigableMap, com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate $r0;
        java.util.NavigableMap $r1;
        boolean $z0;
        com.google.common.collect.Maps$FilteredEntryNavigableMap $r2;

        $r1 := @parameter0: java.util.NavigableMap;

        $r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r1 instanceof com.google.common.collect.Maps$FilteredEntryNavigableMap;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Maps$FilteredEntryNavigableMap) $r1;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.NavigableMap filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate)>($r2, $r0);

        return $r1;

     label1:
        $r2 = new com.google.common.collect.Maps$FilteredEntryNavigableMap;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        specialinvoke $r2.<com.google.common.collect.Maps$FilteredEntryNavigableMap: void <init>(java.util.NavigableMap,com.google.common.base.Predicate)>($r1, $r0);

        return $r2;
    }

    public static java.util.SortedMap filterEntries(java.util.SortedMap, com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate $r0;
        com.google.common.collect.Maps$FilteredEntrySortedMap $r2;
        java.util.SortedMap $r1;
        boolean $z0;

        $r1 := @parameter0: java.util.SortedMap;

        $r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r1 instanceof com.google.common.collect.Maps$FilteredEntrySortedMap;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.Maps$FilteredEntrySortedMap) $r1;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.SortedMap filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate)>($r2, $r0);

        return $r1;

     label1:
        $r2 = new com.google.common.collect.Maps$FilteredEntrySortedMap;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        specialinvoke $r2.<com.google.common.collect.Maps$FilteredEntrySortedMap: void <init>(java.util.SortedMap,com.google.common.base.Predicate)>($r1, $r0);

        return $r2;
    }

    public static com.google.common.collect.BiMap filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap, com.google.common.base.Predicate)
    {
        com.google.common.collect.BiMap $r4;
        com.google.common.base.Predicate $r1, $r2;
        com.google.common.collect.Maps$FilteredEntryBiMap $r0, $r3;

        $r0 := @parameter0: com.google.common.collect.Maps$FilteredEntryBiMap;

        $r1 := @parameter1: com.google.common.base.Predicate;

        $r2 = $r0.<com.google.common.collect.Maps$AbstractFilteredMap: com.google.common.base.Predicate predicate>;

        $r1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate)>($r2, $r1);

        $r3 = new com.google.common.collect.Maps$FilteredEntryBiMap;

        $r4 = virtualinvoke $r0.<com.google.common.collect.Maps$FilteredEntryBiMap: com.google.common.collect.BiMap unfiltered()>();

        specialinvoke $r3.<com.google.common.collect.Maps$FilteredEntryBiMap: void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate)>($r4, $r1);

        return $r3;
    }

    public static java.util.Map filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap, com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate $r0, $r4;
        java.util.Map $r2;
        com.google.common.collect.Maps$FilteredEntryMap $r1;
        com.google.common.collect.Maps$AbstractFilteredMap $r3;

        $r3 := @parameter0: com.google.common.collect.Maps$AbstractFilteredMap;

        $r0 := @parameter1: com.google.common.base.Predicate;

        $r1 = new com.google.common.collect.Maps$FilteredEntryMap;

        $r2 = $r3.<com.google.common.collect.Maps$AbstractFilteredMap: java.util.Map unfiltered>;

        $r4 = $r3.<com.google.common.collect.Maps$AbstractFilteredMap: com.google.common.base.Predicate predicate>;

        $r0 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate)>($r4, $r0);

        specialinvoke $r1.<com.google.common.collect.Maps$FilteredEntryMap: void <init>(java.util.Map,com.google.common.base.Predicate)>($r2, $r0);

        return $r1;
    }

    public static java.util.NavigableMap filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap, com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate $r1, $r2;
        java.util.NavigableMap $r4;
        com.google.common.collect.Maps$FilteredEntryNavigableMap $r0, $r3;

        $r0 := @parameter0: com.google.common.collect.Maps$FilteredEntryNavigableMap;

        $r1 := @parameter1: com.google.common.base.Predicate;

        $r2 = staticinvoke <com.google.common.collect.Maps$FilteredEntryNavigableMap: com.google.common.base.Predicate access$600(com.google.common.collect.Maps$FilteredEntryNavigableMap)>($r0);

        $r1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate)>($r2, $r1);

        $r3 = new com.google.common.collect.Maps$FilteredEntryNavigableMap;

        $r4 = staticinvoke <com.google.common.collect.Maps$FilteredEntryNavigableMap: java.util.NavigableMap access$700(com.google.common.collect.Maps$FilteredEntryNavigableMap)>($r0);

        specialinvoke $r3.<com.google.common.collect.Maps$FilteredEntryNavigableMap: void <init>(java.util.NavigableMap,com.google.common.base.Predicate)>($r4, $r1);

        return $r3;
    }

    public static java.util.SortedMap filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap, com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate $r1, $r2;
        com.google.common.collect.Maps$FilteredEntrySortedMap $r0, $r3;
        java.util.SortedMap $r4;

        $r0 := @parameter0: com.google.common.collect.Maps$FilteredEntrySortedMap;

        $r1 := @parameter1: com.google.common.base.Predicate;

        $r2 = $r0.<com.google.common.collect.Maps$AbstractFilteredMap: com.google.common.base.Predicate predicate>;

        $r1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate)>($r2, $r1);

        $r3 = new com.google.common.collect.Maps$FilteredEntrySortedMap;

        $r4 = virtualinvoke $r0.<com.google.common.collect.Maps$FilteredEntrySortedMap: java.util.SortedMap sortedMap()>();

        specialinvoke $r3.<com.google.common.collect.Maps$FilteredEntrySortedMap: void <init>(java.util.SortedMap,com.google.common.base.Predicate)>($r4, $r1);

        return $r3;
    }

    public static com.google.common.collect.BiMap filterKeys(com.google.common.collect.BiMap, com.google.common.base.Predicate)
    {
        com.google.common.collect.BiMap $r0;
        com.google.common.base.Predicate $r1;

        $r0 := @parameter0: com.google.common.collect.BiMap;

        $r1 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Predicate keyPredicateOnEntries(com.google.common.base.Predicate)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.BiMap filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate)>($r0, $r1);

        return $r0;
    }

    public static java.util.Map filterKeys(java.util.Map, com.google.common.base.Predicate)
    {
        com.google.common.collect.Maps$FilteredKeyMap $r4;
        com.google.common.base.Predicate $r0, $r2;
        java.util.Map $r1;
        com.google.common.collect.Maps$AbstractFilteredMap $r3;
        boolean $z0;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Predicate keyPredicateOnEntries(com.google.common.base.Predicate)>($r0);

        $z0 = $r1 instanceof com.google.common.collect.Maps$AbstractFilteredMap;

        if $z0 == 0 goto label1;

        $r3 = (com.google.common.collect.Maps$AbstractFilteredMap) $r1;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.Map filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate)>($r3, $r2);

        return $r1;

     label1:
        $r4 = new com.google.common.collect.Maps$FilteredKeyMap;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        specialinvoke $r4.<com.google.common.collect.Maps$FilteredKeyMap: void <init>(java.util.Map,com.google.common.base.Predicate,com.google.common.base.Predicate)>($r1, $r0, $r2);

        return $r4;
    }

    public static java.util.NavigableMap filterKeys(java.util.NavigableMap, com.google.common.base.Predicate)
    {
        java.util.NavigableMap $r0;
        com.google.common.base.Predicate $r1;

        $r0 := @parameter0: java.util.NavigableMap;

        $r1 := @parameter1: com.google.common.base.Predicate;

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Predicate keyPredicateOnEntries(com.google.common.base.Predicate)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.NavigableMap filterEntries(java.util.NavigableMap,com.google.common.base.Predicate)>($r0, $r1);

        return $r0;
    }

    public static java.util.SortedMap filterKeys(java.util.SortedMap, com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate $r1;
        java.util.SortedMap $r0;

        $r0 := @parameter0: java.util.SortedMap;

        $r1 := @parameter1: com.google.common.base.Predicate;

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Predicate keyPredicateOnEntries(com.google.common.base.Predicate)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.SortedMap filterEntries(java.util.SortedMap,com.google.common.base.Predicate)>($r0, $r1);

        return $r0;
    }

    public static com.google.common.collect.BiMap filterValues(com.google.common.collect.BiMap, com.google.common.base.Predicate)
    {
        com.google.common.collect.BiMap $r0;
        com.google.common.base.Predicate $r1;

        $r0 := @parameter0: com.google.common.collect.BiMap;

        $r1 := @parameter1: com.google.common.base.Predicate;

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Predicate valuePredicateOnEntries(com.google.common.base.Predicate)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.BiMap filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate)>($r0, $r1);

        return $r0;
    }

    public static java.util.Map filterValues(java.util.Map, com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate $r1;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: com.google.common.base.Predicate;

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Predicate valuePredicateOnEntries(com.google.common.base.Predicate)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.Map filterEntries(java.util.Map,com.google.common.base.Predicate)>($r0, $r1);

        return $r0;
    }

    public static java.util.NavigableMap filterValues(java.util.NavigableMap, com.google.common.base.Predicate)
    {
        java.util.NavigableMap $r0;
        com.google.common.base.Predicate $r1;

        $r0 := @parameter0: java.util.NavigableMap;

        $r1 := @parameter1: com.google.common.base.Predicate;

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Predicate valuePredicateOnEntries(com.google.common.base.Predicate)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.NavigableMap filterEntries(java.util.NavigableMap,com.google.common.base.Predicate)>($r0, $r1);

        return $r0;
    }

    public static java.util.SortedMap filterValues(java.util.SortedMap, com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate $r1;
        java.util.SortedMap $r0;

        $r0 := @parameter0: java.util.SortedMap;

        $r1 := @parameter1: com.google.common.base.Predicate;

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Predicate valuePredicateOnEntries(com.google.common.base.Predicate)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.SortedMap filterEntries(java.util.SortedMap,com.google.common.base.Predicate)>($r0, $r1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableMap fromProperties(java.util.Properties)
    {
        java.util.Properties $r0;
        java.util.Enumeration $r2;
        com.google.common.collect.ImmutableMap $r6;
        com.google.common.collect.ImmutableMap$Builder $r1;
        java.lang.Object $r3;
        java.lang.String $r4, $r5;
        boolean $z0;

        $r0 := @parameter0: java.util.Properties;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

        $r2 = virtualinvoke $r0.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = (java.lang.String) $r3;

        $r5 = virtualinvoke $r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r4, $r5);

        goto label1;

     label2:
        $r6 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

        return $r6;
    }

    public static java.util.Map$Entry immutableEntry(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableEntry $r2;
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = new com.google.common.collect.ImmutableEntry;

        specialinvoke $r2.<com.google.common.collect.ImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.collect.ImmutableMap immutableEnumMap(java.util.Map)
    {
        java.util.Map$Entry $r7;
        java.util.Iterator $r4;
        java.util.EnumMap $r0;
        com.google.common.collect.ImmutableMap $r5;
        com.google.common.collect.ImmutableEnumMap $r2;
        java.util.Set $r3;
        java.lang.Enum $r8;
        java.util.Map $r1;
        java.lang.Object $r6;
        java.lang.Class $r9;
        boolean $z0;

        $r1 := @parameter0: java.util.Map;

        $z0 = $r1 instanceof com.google.common.collect.ImmutableEnumMap;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.ImmutableEnumMap) $r1;

        return $r2;

     label1:
        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r5 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        return $r5;

     label2:
        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.Enum) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r8, $r6);

        $r9 = virtualinvoke $r8.<java.lang.Enum: java.lang.Class getDeclaringClass()>();

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>($r9);

        virtualinvoke $r0.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>($r8, $r6);

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.Enum) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r8, $r6);

        virtualinvoke $r0.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>($r8, $r6);

        goto label3;

     label4:
        $r5 = staticinvoke <com.google.common.collect.ImmutableEnumMap: com.google.common.collect.ImmutableMap asImmutable(java.util.EnumMap)>($r0);

        return $r5;
    }

    public static com.google.common.collect.ImmutableMap indexMap(java.util.Collection)
    {
        java.util.Iterator $r2;
        com.google.common.collect.ImmutableMap $r5;
        java.util.Collection $r1;
        com.google.common.collect.ImmutableMap$Builder $r0;
        java.lang.Integer $r4;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        $r1 := @parameter0: java.util.Collection;

        $r0 = new com.google.common.collect.ImmutableMap$Builder;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: void <init>(int)>($i0);

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $i1 = 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke $r0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

        return $r5;
    }

    public static com.google.common.base.Function keyFunction()
    {
        com.google.common.collect.Maps$EntryFunction r0;

        r0 = <com.google.common.collect.Maps$EntryFunction: com.google.common.collect.Maps$EntryFunction KEY>;

        return r0;
    }

    public static java.util.Iterator keyIterator(java.util.Iterator)
    {
        com.google.common.base.Function $r1;
        java.util.Iterator $r0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Function keyFunction()>();

        $r0 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r0, $r1);

        return $r0;
    }

    public static java.lang.Object keyOrNull(java.util.Map$Entry)
    {
        java.lang.Object $r0;
        java.util.Map$Entry $r1;

        $r1 := @parameter0: java.util.Map$Entry;

        if $r1 != null goto label1;

        return null;

     label1:
        $r0 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r0;
    }

    public static com.google.common.base.Predicate keyPredicateOnEntries(com.google.common.base.Predicate)
    {
        com.google.common.base.Function $r1;
        com.google.common.base.Predicate $r0;

        $r0 := @parameter0: com.google.common.base.Predicate;

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Function keyFunction()>();

        $r0 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate compose(com.google.common.base.Predicate,com.google.common.base.Function)>($r0, $r1);

        return $r0;
    }

    public static java.util.concurrent.ConcurrentMap newConcurrentMap()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        return $r0;
    }

    public static java.util.EnumMap newEnumMap(java.lang.Class)
    {
        java.lang.Class $r1;
        java.util.EnumMap $r0;

        $r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.EnumMap;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>($r1);

        return $r0;
    }

    public static java.util.EnumMap newEnumMap(java.util.Map)
    {
        java.util.EnumMap $r1;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $r1 = new java.util.EnumMap;

        specialinvoke $r1.<java.util.EnumMap: void <init>(java.util.Map)>($r0);

        return $r1;
    }

    public static java.util.HashMap newHashMap()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        return $r0;
    }

    public static java.util.HashMap newHashMap(java.util.Map)
    {
        java.util.HashMap $r1;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r0);

        return $r1;
    }

    public static java.util.HashMap newHashMapWithExpectedSize(int)
    {
        int $i0;
        java.util.HashMap $r0;

        $i0 := @parameter0: int;

        $r0 = new java.util.HashMap;

        $i0 = staticinvoke <com.google.common.collect.Maps: int capacity(int)>($i0);

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>($i0);

        return $r0;
    }

    public static java.util.IdentityHashMap newIdentityHashMap()
    {
        java.util.IdentityHashMap $r0;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        return $r0;
    }

    public static java.util.LinkedHashMap newLinkedHashMap()
    {
        java.util.LinkedHashMap $r0;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        return $r0;
    }

    public static java.util.LinkedHashMap newLinkedHashMap(java.util.Map)
    {
        java.util.LinkedHashMap $r1;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r0);

        return $r1;
    }

    public static java.util.LinkedHashMap newLinkedHashMapWithExpectedSize(int)
    {
        java.util.LinkedHashMap $r0;
        int $i0;

        $i0 := @parameter0: int;

        $r0 = new java.util.LinkedHashMap;

        $i0 = staticinvoke <com.google.common.collect.Maps: int capacity(int)>($i0);

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(int)>($i0);

        return $r0;
    }

    public static java.util.TreeMap newTreeMap()
    {
        java.util.TreeMap $r0;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        return $r0;
    }

    public static java.util.TreeMap newTreeMap(java.util.Comparator)
    {
        java.util.Comparator $r0;
        java.util.TreeMap $r1;

        $r0 := @parameter0: java.util.Comparator;

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.Comparator)>($r0);

        return $r1;
    }

    public static java.util.TreeMap newTreeMap(java.util.SortedMap)
    {
        java.util.TreeMap $r1;
        java.util.SortedMap $r0;

        $r0 := @parameter0: java.util.SortedMap;

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.SortedMap)>($r0);

        return $r1;
    }

    public static java.util.Comparator orNaturalOrder(java.util.Comparator)
    {
        com.google.common.collect.Ordering $r0;
        java.util.Comparator $r1;

        $r1 := @parameter0: java.util.Comparator;

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r0 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        return $r0;
    }

    public static void putAllImpl(java.util.Map, java.util.Map)
    {
        java.util.Map$Entry $r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.Map $r0, $r1;
        java.lang.Object $r4, $r6;
        boolean $z0;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Map;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        goto label1;

     label2:
        return;
    }

    public static boolean removeEntryImpl(java.util.Collection, java.lang.Object)
    {
        java.util.Map$Entry $r2;
        java.util.Collection $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.lang.Object;

        $z0 = $r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (java.util.Map$Entry) $r1;

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry)>($r2);

        $z0 = interfaceinvoke $r0.<java.util.Collection: boolean remove(java.lang.Object)>($r2);

        return $z0;
    }

    public static java.util.NavigableSet removeOnlyNavigableSet(java.util.NavigableSet)
    {
        java.util.NavigableSet $r0;
        com.google.common.collect.Maps$4 $r1;

        $r0 := @parameter0: java.util.NavigableSet;

        $r1 = new com.google.common.collect.Maps$4;

        specialinvoke $r1.<com.google.common.collect.Maps$4: void <init>(java.util.NavigableSet)>($r0);

        return $r1;
    }

    public static java.util.Set removeOnlySet(java.util.Set)
    {
        java.util.Set $r0;
        com.google.common.collect.Maps$2 $r1;

        $r0 := @parameter0: java.util.Set;

        $r1 = new com.google.common.collect.Maps$2;

        specialinvoke $r1.<com.google.common.collect.Maps$2: void <init>(java.util.Set)>($r0);

        return $r1;
    }

    public static java.util.SortedSet removeOnlySortedSet(java.util.SortedSet)
    {
        java.util.SortedSet $r0;
        com.google.common.collect.Maps$3 $r1;

        $r0 := @parameter0: java.util.SortedSet;

        $r1 = new com.google.common.collect.Maps$3;

        specialinvoke $r1.<com.google.common.collect.Maps$3: void <init>(java.util.SortedSet)>($r0);

        return $r1;
    }

    public static boolean safeContainsKey(java.util.Map, java.lang.Object)
    {
        java.util.Map $r3;
        java.lang.Object $r0;
        java.lang.ClassCastException $r1;
        java.lang.NullPointerException $r2;
        boolean $z0;

        $r3 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

     label2:
        return $z0;

     label3:
        return 0;

     label4:
        $r1 := @caughtexception;

        goto label3;

     label5:
        $r2 := @caughtexception;

        goto label3;

        catch java.lang.ClassCastException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label5;
    }

    public static java.lang.Object safeGet(java.util.Map, java.lang.Object)
    {
        java.util.Map $r3;
        java.lang.Object $r0;
        java.lang.ClassCastException $r1;
        java.lang.NullPointerException $r2;

        $r3 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

     label1:
        $r0 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

     label2:
        return $r0;

     label3:
        return null;

     label4:
        $r1 := @caughtexception;

        goto label3;

     label5:
        $r2 := @caughtexception;

        goto label3;

        catch java.lang.ClassCastException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label5;
    }

    public static java.lang.Object safeRemove(java.util.Map, java.lang.Object)
    {
        java.util.Map $r3;
        java.lang.Object $r0;
        java.lang.ClassCastException $r1;
        java.lang.NullPointerException $r2;

        $r3 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

     label1:
        $r0 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r0);

     label2:
        return $r0;

     label3:
        return null;

     label4:
        $r1 := @caughtexception;

        goto label3;

     label5:
        $r2 := @caughtexception;

        goto label3;

        catch java.lang.ClassCastException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label5;
    }

    public static java.util.NavigableMap subMap(java.util.NavigableMap, com.google.common.collect.Range)
    {
        com.google.common.collect.Range $r2;
        java.util.NavigableMap $r1;
        com.google.common.collect.Ordering $r4;
        com.google.common.collect.BoundType $r0, $r7;
        int $i0;
        java.lang.Comparable $r5, $r6;
        java.util.Comparator $r3;
        boolean $z0, $z1;

        $r1 := @parameter0: java.util.NavigableMap;

        $r2 := @parameter1: com.google.common.collect.Range;

        $r3 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.Comparator comparator()>();

        $z0 = 1;

        if $r3 == null goto label03;

        $r3 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.Comparator comparator()>();

        $r4 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        if $r3 == $r4 goto label03;

        $z1 = virtualinvoke $r2.<com.google.common.collect.Range: boolean hasLowerBound()>();

        if $z1 == 0 goto label03;

        $z1 = virtualinvoke $r2.<com.google.common.collect.Range: boolean hasUpperBound()>();

        if $z1 == 0 goto label03;

        $r3 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.Comparator comparator()>();

        $r5 = virtualinvoke $r2.<com.google.common.collect.Range: java.lang.Comparable lowerEndpoint()>();

        $r6 = virtualinvoke $r2.<com.google.common.collect.Range: java.lang.Comparable upperEndpoint()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $i0 > 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "map is using a custom comparator which is inconsistent with the natural ordering.");

     label03:
        $z1 = virtualinvoke $r2.<com.google.common.collect.Range: boolean hasLowerBound()>();

        if $z1 == 0 goto label08;

        $z1 = virtualinvoke $r2.<com.google.common.collect.Range: boolean hasUpperBound()>();

        if $z1 == 0 goto label08;

        $r5 = virtualinvoke $r2.<com.google.common.collect.Range: java.lang.Comparable lowerEndpoint()>();

        $r0 = virtualinvoke $r2.<com.google.common.collect.Range: com.google.common.collect.BoundType lowerBoundType()>();

        $r7 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType CLOSED>;

        if $r0 != $r7 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        $r6 = virtualinvoke $r2.<com.google.common.collect.Range: java.lang.Comparable upperEndpoint()>();

        $r7 = virtualinvoke $r2.<com.google.common.collect.Range: com.google.common.collect.BoundType upperBoundType()>();

        $r0 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType CLOSED>;

        if $r7 != $r0 goto label06;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        $r1 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>($r5, $z1, $r6, $z0);

        return $r1;

     label08:
        $z1 = virtualinvoke $r2.<com.google.common.collect.Range: boolean hasLowerBound()>();

        if $z1 == 0 goto label11;

        $r5 = virtualinvoke $r2.<com.google.common.collect.Range: java.lang.Comparable lowerEndpoint()>();

        $r0 = virtualinvoke $r2.<com.google.common.collect.Range: com.google.common.collect.BoundType lowerBoundType()>();

        $r7 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType CLOSED>;

        if $r0 != $r7 goto label09;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        $r1 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>($r5, $z0);

        return $r1;

     label11:
        $z1 = virtualinvoke $r2.<com.google.common.collect.Range: boolean hasUpperBound()>();

        if $z1 == 0 goto label14;

        $r5 = virtualinvoke $r2.<com.google.common.collect.Range: java.lang.Comparable upperEndpoint()>();

        $r0 = virtualinvoke $r2.<com.google.common.collect.Range: com.google.common.collect.BoundType upperBoundType()>();

        $r7 = <com.google.common.collect.BoundType: com.google.common.collect.BoundType CLOSED>;

        if $r0 != $r7 goto label12;

        goto label13;

     label12:
        $z0 = 0;

     label13:
        $r1 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>($r5, $z0);

        return $r1;

     label14:
        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        return $r1;
    }

    public static com.google.common.collect.BiMap synchronizedBiMap(com.google.common.collect.BiMap)
    {
        com.google.common.collect.BiMap $r0;

        $r0 := @parameter0: com.google.common.collect.BiMap;

        $r0 = staticinvoke <com.google.common.collect.Synchronized: com.google.common.collect.BiMap biMap(com.google.common.collect.BiMap,java.lang.Object)>($r0, null);

        return $r0;
    }

    public static java.util.NavigableMap synchronizedNavigableMap(java.util.NavigableMap)
    {
        java.util.NavigableMap $r0;

        $r0 := @parameter0: java.util.NavigableMap;

        $r0 = staticinvoke <com.google.common.collect.Synchronized: java.util.NavigableMap navigableMap(java.util.NavigableMap)>($r0);

        return $r0;
    }

    public static java.util.stream.Collector toImmutableEnumMap(java.util.function.Function, java.util.function.Function)
    {
        c.i.b.c.f $r7;
        c.i.b.c.Xb $r6;
        java.util.function.Function $r4, $r5;
        java.util.stream.Collector$Characteristics $r2;
        c.i.b.c.Za $r1;
        c.i.b.c.cb $r0;
        java.util.stream.Collector $r3;
        java.util.stream.Collector$Characteristics[] $r8;

        $r4 := @parameter0: java.util.function.Function;

        $r5 := @parameter1: java.util.function.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        $r0 = <c.i.b.c.cb: c.i.b.c.cb a>;

        $r1 = new c.i.b.c.Za;

        specialinvoke $r1.<c.i.b.c.Za: void <init>(java.util.function.Function,java.util.function.Function)>($r4, $r5);

        $r6 = <c.i.b.c.Xb: c.i.b.c.Xb a>;

        $r7 = <c.i.b.c.f: c.i.b.c.f a>;

        $r8 = newarray (java.util.stream.Collector$Characteristics)[1];

        $r2 = <java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics UNORDERED>;

        $r8[0] = $r2;

        $r3 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r0, $r1, $r6, $r7, $r8);

        return $r3;
    }

    public static java.util.stream.Collector toImmutableEnumMap(java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator)
    {
        c.i.b.c.Ta $r5;
        c.i.b.c.f $r7;
        c.i.b.c.Xb $r6;
        java.util.function.Function $r2, $r3;
        java.util.function.BinaryOperator $r4;
        c.i.b.c.bb $r0;
        java.util.stream.Collector $r1;
        java.util.stream.Collector$Characteristics[] $r8;

        $r2 := @parameter0: java.util.function.Function;

        $r3 := @parameter1: java.util.function.Function;

        $r4 := @parameter2: java.util.function.BinaryOperator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r0 = new c.i.b.c.bb;

        specialinvoke $r0.<c.i.b.c.bb: void <init>(java.util.function.BinaryOperator)>($r4);

        $r5 = new c.i.b.c.Ta;

        specialinvoke $r5.<c.i.b.c.Ta: void <init>(java.util.function.Function,java.util.function.Function)>($r2, $r3);

        $r6 = <c.i.b.c.Xb: c.i.b.c.Xb a>;

        $r7 = <c.i.b.c.f: c.i.b.c.f a>;

        $r8 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r1 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r0, $r5, $r6, $r7, $r8);

        return $r1;
    }

    public static com.google.common.collect.ImmutableMap toMap(java.lang.Iterable, com.google.common.base.Function)
    {
        com.google.common.base.Function $r0;
        java.util.Iterator $r2;
        com.google.common.collect.ImmutableMap $r3;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: com.google.common.base.Function;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap toMap(java.util.Iterator,com.google.common.base.Function)>($r2, $r0);

        return $r3;
    }

    public static com.google.common.collect.ImmutableMap toMap(java.util.Iterator, com.google.common.base.Function)
    {
        java.util.LinkedHashMap $r2;
        com.google.common.base.Function $r0;
        java.util.Iterator $r1;
        com.google.common.collect.ImmutableMap $r5;
        java.lang.Object $r3, $r4;
        boolean $z0;

        $r1 := @parameter0: java.util.Iterator;

        $r0 := @parameter1: com.google.common.base.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r0.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>($r3);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        goto label1;

     label2:
        $r5 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>($r2);

        return $r5;
    }

    public static java.lang.String toStringImpl(java.util.Map)
    {
        java.util.Map$Entry $r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.Map $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r4;
        java.lang.String $r6;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke $r0.<java.util.Map: int size()>();

        $r1 = staticinvoke <com.google.common.collect.Collections2: java.lang.StringBuilder newStringBuilderForCollection(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = 1;

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        if $z0 != 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $z0 = 0;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        goto label1;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.util.Map transformEntries(java.util.Map, com.google.common.collect.Maps$EntryTransformer)
    {
        com.google.common.collect.Maps$TransformedEntriesMap $r2;
        com.google.common.collect.Maps$EntryTransformer $r1;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: com.google.common.collect.Maps$EntryTransformer;

        $r2 = new com.google.common.collect.Maps$TransformedEntriesMap;

        specialinvoke $r2.<com.google.common.collect.Maps$TransformedEntriesMap: void <init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer)>($r0, $r1);

        return $r2;
    }

    public static java.util.NavigableMap transformEntries(java.util.NavigableMap, com.google.common.collect.Maps$EntryTransformer)
    {
        com.google.common.collect.Maps$TransformedEntriesNavigableMap $r2;
        com.google.common.collect.Maps$EntryTransformer $r1;
        java.util.NavigableMap $r0;

        $r0 := @parameter0: java.util.NavigableMap;

        $r1 := @parameter1: com.google.common.collect.Maps$EntryTransformer;

        $r2 = new com.google.common.collect.Maps$TransformedEntriesNavigableMap;

        specialinvoke $r2.<com.google.common.collect.Maps$TransformedEntriesNavigableMap: void <init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)>($r0, $r1);

        return $r2;
    }

    public static java.util.SortedMap transformEntries(java.util.SortedMap, com.google.common.collect.Maps$EntryTransformer)
    {
        com.google.common.collect.Maps$TransformedEntriesSortedMap $r2;
        com.google.common.collect.Maps$EntryTransformer $r1;
        java.util.SortedMap $r0;

        $r0 := @parameter0: java.util.SortedMap;

        $r1 := @parameter1: com.google.common.collect.Maps$EntryTransformer;

        $r2 = new com.google.common.collect.Maps$TransformedEntriesSortedMap;

        specialinvoke $r2.<com.google.common.collect.Maps$TransformedEntriesSortedMap: void <init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>($r0, $r1);

        return $r2;
    }

    public static java.util.Map$Entry transformEntry(com.google.common.collect.Maps$EntryTransformer, java.util.Map$Entry)
    {
        java.util.Map$Entry $r1;
        com.google.common.collect.Maps$EntryTransformer $r0;
        com.google.common.collect.Maps$10 $r2;

        $r0 := @parameter0: com.google.common.collect.Maps$EntryTransformer;

        $r1 := @parameter1: java.util.Map$Entry;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.Maps$10;

        specialinvoke $r2.<com.google.common.collect.Maps$10: void <init>(java.util.Map$Entry,com.google.common.collect.Maps$EntryTransformer)>($r1, $r0);

        return $r2;
    }

    public static java.util.Map transformValues(java.util.Map, com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.Maps$EntryTransformer $r2;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: com.google.common.base.Function;

        $r2 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.Map transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer)>($r0, $r2);

        return $r0;
    }

    public static java.util.NavigableMap transformValues(java.util.NavigableMap, com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.Maps$EntryTransformer $r2;
        java.util.NavigableMap $r0;

        $r0 := @parameter0: java.util.NavigableMap;

        $r1 := @parameter1: com.google.common.base.Function;

        $r2 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.NavigableMap transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)>($r0, $r2);

        return $r0;
    }

    public static java.util.SortedMap transformValues(java.util.SortedMap, com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.Maps$EntryTransformer $r2;
        java.util.SortedMap $r0;

        $r0 := @parameter0: java.util.SortedMap;

        $r1 := @parameter1: com.google.common.base.Function;

        $r2 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.SortedMap transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)>($r0, $r2);

        return $r0;
    }

    public static com.google.common.collect.ImmutableMap uniqueIndex(java.lang.Iterable, com.google.common.base.Function)
    {
        com.google.common.base.Function $r0;
        java.util.Iterator $r2;
        com.google.common.collect.ImmutableMap $r3;
        java.lang.Iterable $r1;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: com.google.common.base.Function;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap uniqueIndex(java.util.Iterator,com.google.common.base.Function)>($r2, $r0);

        return $r3;
    }

    public static com.google.common.collect.ImmutableMap uniqueIndex(java.util.Iterator, com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        java.util.Iterator $r0;
        com.google.common.collect.ImmutableMap $r5;
        java.lang.IllegalArgumentException $r6, $r7;
        com.google.common.collect.ImmutableMap$Builder $r2;
        java.lang.Object $r3, $r4;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        boolean $z0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 := @parameter1: com.google.common.base.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

     label1:
        $z0 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r1.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>($r3);

        virtualinvoke $r2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r4, $r3);

        goto label1;

     label2:
        $r5 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

     label3:
        return $r5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". To index multiple values under a key, use Multimaps.index.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        goto label5;

     label5:
        throw $r7;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public static com.google.common.collect.BiMap unmodifiableBiMap(com.google.common.collect.BiMap)
    {
        com.google.common.collect.BiMap $r0;
        com.google.common.collect.Maps$UnmodifiableBiMap $r1;

        $r0 := @parameter0: com.google.common.collect.BiMap;

        $r1 = new com.google.common.collect.Maps$UnmodifiableBiMap;

        specialinvoke $r1.<com.google.common.collect.Maps$UnmodifiableBiMap: void <init>(com.google.common.collect.BiMap,com.google.common.collect.BiMap)>($r0, null);

        return $r1;
    }

    public static java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry)
    {
        java.util.Map$Entry $r0;
        com.google.common.collect.Maps$5 $r1;

        $r0 := @parameter0: java.util.Map$Entry;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.collect.Maps$5;

        specialinvoke $r1.<com.google.common.collect.Maps$5: void <init>(java.util.Map$Entry)>($r0);

        return $r1;
    }

    public static com.google.common.collect.UnmodifiableIterator unmodifiableEntryIterator(java.util.Iterator)
    {
        com.google.common.collect.Maps$6 $r1;
        java.util.Iterator $r0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 = new com.google.common.collect.Maps$6;

        specialinvoke $r1.<com.google.common.collect.Maps$6: void <init>(java.util.Iterator)>($r0);

        return $r1;
    }

    public static java.util.Set unmodifiableEntrySet(java.util.Set)
    {
        java.util.Set $r1;
        com.google.common.collect.Maps$UnmodifiableEntrySet $r0;

        $r1 := @parameter0: java.util.Set;

        $r0 = new com.google.common.collect.Maps$UnmodifiableEntrySet;

        $r1 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        specialinvoke $r0.<com.google.common.collect.Maps$UnmodifiableEntrySet: void <init>(java.util.Set)>($r1);

        return $r0;
    }

    public static java.util.Map unmodifiableMap(java.util.Map)
    {
        java.util.SortedMap $r1;
        boolean $z0;
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        $z0 = $r0 instanceof java.util.SortedMap;

        if $z0 == 0 goto label1;

        $r1 = (java.util.SortedMap) $r0;

        $r1 = staticinvoke <java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>($r1);

        return $r1;

     label1:
        $r0 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        return $r0;
    }

    public static java.util.NavigableMap unmodifiableNavigableMap(java.util.NavigableMap)
    {
        java.util.NavigableMap $r0;
        com.google.common.collect.Maps$UnmodifiableNavigableMap $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.NavigableMap;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r0 instanceof com.google.common.collect.Maps$UnmodifiableNavigableMap;

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r1 = new com.google.common.collect.Maps$UnmodifiableNavigableMap;

        specialinvoke $r1.<com.google.common.collect.Maps$UnmodifiableNavigableMap: void <init>(java.util.NavigableMap)>($r0);

        return $r1;
    }

    public static java.util.Map$Entry unmodifiableOrNull(java.util.Map$Entry)
    {
        java.util.Map$Entry $r0;

        $r0 := @parameter0: java.util.Map$Entry;

        if $r0 != null goto label1;

        return null;

     label1:
        $r0 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry)>($r0);

        return $r0;
    }

    public static com.google.common.base.Function valueFunction()
    {
        com.google.common.collect.Maps$EntryFunction r0;

        r0 = <com.google.common.collect.Maps$EntryFunction: com.google.common.collect.Maps$EntryFunction VALUE>;

        return r0;
    }

    public static java.util.Iterator valueIterator(java.util.Iterator)
    {
        com.google.common.base.Function $r1;
        java.util.Iterator $r0;

        $r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Function valueFunction()>();

        $r0 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r0, $r1);

        return $r0;
    }

    public static java.lang.Object valueOrNull(java.util.Map$Entry)
    {
        java.lang.Object $r0;
        java.util.Map$Entry $r1;

        $r1 := @parameter0: java.util.Map$Entry;

        if $r1 != null goto label1;

        return null;

     label1:
        $r0 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r0;
    }

    public static com.google.common.base.Predicate valuePredicateOnEntries(com.google.common.base.Predicate)
    {
        com.google.common.base.Function $r1;
        com.google.common.base.Predicate $r0;

        $r0 := @parameter0: com.google.common.base.Predicate;

        $r1 = staticinvoke <com.google.common.collect.Maps: com.google.common.base.Function valueFunction()>();

        $r0 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate compose(com.google.common.base.Predicate,com.google.common.base.Function)>($r0, $r1);

        return $r0;
    }
}
