public abstract class com.google.common.reflect.AbstractInvocationHandler extends java.lang.Object implements java.lang.reflect.InvocationHandler
{
    public static final java.lang.Object[] NO_ARGS;

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        $r0 = newarray (java.lang.Object)[0];

        <com.google.common.reflect.AbstractInvocationHandler: java.lang.Object[] NO_ARGS> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.reflect.AbstractInvocationHandler r0;

        r0 := @this: com.google.common.reflect.AbstractInvocationHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isProxyOfSameInterfaces(java.lang.Object, java.lang.Class)
    {
        java.lang.Class[] $r3, $r4;
        java.lang.Object $r0;
        java.lang.Class $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r0);

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r2);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.reflect.AbstractInvocationHandler r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.reflect.AbstractInvocationHandler;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public abstract java.lang.Object handleInvocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]);

    public int hashCode()
    {
        int $i0;
        com.google.common.reflect.AbstractInvocationHandler r0;

        r0 := @this: com.google.common.reflect.AbstractInvocationHandler;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public final java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])
    {
        java.lang.Object[] $r3;
        java.lang.Class[] $r6;
        java.lang.Integer $r5;
        int $i0;
        com.google.common.reflect.AbstractInvocationHandler r0;
        java.lang.Boolean $r9;
        java.lang.Object $r1, $r8;
        java.lang.Class $r7;
        java.lang.String $r4;
        java.lang.reflect.InvocationHandler $r10;
        java.lang.reflect.Method $r2;
        boolean $z0, $z1;

        r0 := @this: com.google.common.reflect.AbstractInvocationHandler;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.reflect.Method;

        $r3 := @parameter2: java.lang.Object[];

        if $r3 != null goto label1;

        $r3 = <com.google.common.reflect.AbstractInvocationHandler: java.lang.Object[] NO_ARGS>;

     label1:
        $i0 = lengthof $r3;

        if $i0 != 0 goto label2;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("hashCode");

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r0.<com.google.common.reflect.AbstractInvocationHandler: int hashCode()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r5;

     label2:
        $i0 = lengthof $r3;

        $z0 = 1;

        if $i0 != 1 goto label7;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("equals");

        if $z1 == 0 goto label7;

        $r6 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r7 = $r6[0];

        if $r7 != class "Ljava/lang/Object;" goto label7;

        $r8 = $r3[0];

        if $r8 != null goto label3;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r9;

     label3:
        if $r1 != $r8 goto label4;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r9;

     label4:
        $r7 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <com.google.common.reflect.AbstractInvocationHandler: boolean isProxyOfSameInterfaces(java.lang.Object,java.lang.Class)>($r8, $r7);

        if $z1 == 0 goto label5;

        $r10 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>($r8);

        $z1 = virtualinvoke r0.<com.google.common.reflect.AbstractInvocationHandler: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label5;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r9;

     label7:
        $i0 = lengthof $r3;

        if $i0 != 0 goto label8;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("toString");

        if $z0 == 0 goto label8;

        $r4 = virtualinvoke r0.<com.google.common.reflect.AbstractInvocationHandler: java.lang.String toString()>();

        return $r4;

     label8:
        $r1 = virtualinvoke r0.<com.google.common.reflect.AbstractInvocationHandler: java.lang.Object handleInvocation(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>($r1, $r2, $r3);

        return $r1;
    }

    public java.lang.String toString()
    {
        com.google.common.reflect.AbstractInvocationHandler r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.reflect.AbstractInvocationHandler;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }
}
