public class com.google.common.io.CharSource$CharSequenceCharSource extends com.google.common.io.CharSource
{
    public static final com.google.common.base.Splitter LINE_SPLITTER;
    public final java.lang.CharSequence seq;

    static void <clinit>()
    {
        com.google.common.base.Splitter $r0;

        $r0 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter onPattern(java.lang.String)>("\r\n|\n|\r");

        <com.google.common.io.CharSource$CharSequenceCharSource: com.google.common.base.Splitter LINE_SPLITTER> = $r0;

        return;
    }

    public void <init>(java.lang.CharSequence)
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r1 := @parameter0: java.lang.CharSequence;

        specialinvoke r0.<com.google.common.io.CharSource: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.io.CharSource$CharSequenceCharSource: java.lang.CharSequence seq> = $r1;

        return;
    }

    public static com.google.common.base.Splitter access$100()
    {
        com.google.common.base.Splitter r0;

        r0 = <com.google.common.io.CharSource$CharSequenceCharSource: com.google.common.base.Splitter LINE_SPLITTER>;

        return r0;
    }

    private java.util.Iterator linesIterator()
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        com.google.common.io.CharSource$CharSequenceCharSource$1 $r1;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r1 = new com.google.common.io.CharSource$CharSequenceCharSource$1;

        specialinvoke $r1.<com.google.common.io.CharSource$CharSequenceCharSource$1: void <init>(com.google.common.io.CharSource$CharSequenceCharSource)>(r0);

        return $r1;
    }

    public boolean isEmpty()
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        int $i0;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r1 = r0.<com.google.common.io.CharSource$CharSequenceCharSource: java.lang.CharSequence seq>;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public long length()
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        java.lang.CharSequence $r1;
        int $i0;
        long $l1;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r1 = r0.<com.google.common.io.CharSource$CharSequenceCharSource: java.lang.CharSequence seq>;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $l1 = (long) $i0;

        return $l1;
    }

    public com.google.common.base.Optional lengthIfKnown()
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        java.lang.CharSequence $r1;
        java.lang.Long $r2;
        com.google.common.base.Optional $r3;
        int $i0;
        long $l1;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r1 = r0.<com.google.common.io.CharSource$CharSequenceCharSource: java.lang.CharSequence seq>;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $l1 = (long) $i0;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r3 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r2);

        return $r3;
    }

    public java.util.stream.Stream lines()
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        java.util.stream.Stream $r2;
        java.util.Iterator $r1;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r1 = specialinvoke r0.<com.google.common.io.CharSource$CharSequenceCharSource: java.util.Iterator linesIterator()>();

        $r2 = staticinvoke <com.google.common.collect.Streams: java.util.stream.Stream stream(java.util.Iterator)>($r1);

        return $r2;
    }

    public java.io.Reader openStream()
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        java.lang.CharSequence $r2;
        com.google.common.io.CharSequenceReader $r1;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r1 = new com.google.common.io.CharSequenceReader;

        $r2 = r0.<com.google.common.io.CharSource$CharSequenceCharSource: java.lang.CharSequence seq>;

        specialinvoke $r1.<com.google.common.io.CharSequenceReader: void <init>(java.lang.CharSequence)>($r2);

        return $r1;
    }

    public java.lang.String read()
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        java.lang.String $r1;
        java.lang.CharSequence $r2;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r2 = r0.<com.google.common.io.CharSource$CharSequenceCharSource: java.lang.CharSequence seq>;

        $r1 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String readFirstLine()
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r1 = specialinvoke r0.<com.google.common.io.CharSource$CharSequenceCharSource: java.util.Iterator linesIterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.String) $r2;

        return $r3;

     label1:
        return null;
    }

    public com.google.common.collect.ImmutableList readLines()
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        java.util.Iterator $r1;
        com.google.common.collect.ImmutableList $r2;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r1 = specialinvoke r0.<com.google.common.io.CharSource$CharSequenceCharSource: java.util.Iterator linesIterator()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Iterator)>($r1);

        return $r2;
    }

    public java.lang.Object readLines(com.google.common.io.LineProcessor)
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        com.google.common.io.LineProcessor $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r1 := @parameter0: com.google.common.io.LineProcessor;

        $r2 = specialinvoke r0.<com.google.common.io.CharSource$CharSequenceCharSource: java.util.Iterator linesIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        $z0 = interfaceinvoke $r1.<com.google.common.io.LineProcessor: boolean processLine(java.lang.String)>($r4);

        if $z0 != 0 goto label1;

     label2:
        $r3 = interfaceinvoke $r1.<com.google.common.io.LineProcessor: java.lang.Object getResult()>();

        return $r3;
    }

    public java.lang.String toString()
    {
        com.google.common.io.CharSource$CharSequenceCharSource r0;
        java.lang.CharSequence $r2;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;

        r0 := @this: com.google.common.io.CharSource$CharSequenceCharSource;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CharSource.wrap(");

        $r2 = r0.<com.google.common.io.CharSource$CharSequenceCharSource: java.lang.CharSequence seq>;

        $r3 = staticinvoke <com.google.common.base.Ascii: java.lang.String truncate(java.lang.CharSequence,int,java.lang.String)>($r2, 30, "...");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
