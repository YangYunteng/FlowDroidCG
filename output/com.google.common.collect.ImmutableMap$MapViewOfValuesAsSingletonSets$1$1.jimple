public class com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 extends com.google.common.collect.AbstractMapEntry
{
    public final com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1 this$2;
    public final java.util.Map$Entry val$backingEntry;

    public void <init>(com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1, java.util.Map$Entry)
    {
        com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1 $r1;
        java.util.Map$Entry $r2;
        com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 r0;

        r0 := @this: com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1;

        $r1 := @parameter0: com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1;

        $r2 := @parameter1: java.util.Map$Entry;

        r0.<com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1: com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1 this$2> = $r1;

        r0.<com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1: java.util.Map$Entry val$backingEntry> = $r2;

        specialinvoke r0.<com.google.common.collect.AbstractMapEntry: void <init>()>();

        return;
    }

    public java.lang.Object getKey()
    {
        java.lang.Object $r1;
        java.util.Map$Entry $r2;
        com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 r0;

        r0 := @this: com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1;

        $r2 = r0.<com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1: java.util.Map$Entry val$backingEntry>;

        $r1 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableSet getValue()
    {
        java.util.Map$Entry $r1;
        com.google.common.collect.ImmutableSet $r3;
        com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 r0;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1;

        $r1 = r0.<com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1: java.util.Map$Entry val$backingEntry>;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getValue()
    {
        com.google.common.collect.ImmutableSet $r1;
        com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 r0;

        r0 := @this: com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1: com.google.common.collect.ImmutableSet getValue()>();

        return $r1;
    }
}
