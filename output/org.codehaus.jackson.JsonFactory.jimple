public class org.codehaus.jackson.JsonFactory extends java.lang.Object implements org.codehaus.jackson.Versioned
{
    public static final int DEFAULT_GENERATOR_FEATURE_FLAGS;
    public static final int DEFAULT_PARSER_FEATURE_FLAGS;
    public static final java.lang.String FORMAT_NAME_JSON;
    public static final java.lang.ThreadLocal _recyclerRef;
    public org.codehaus.jackson.io.CharacterEscapes _characterEscapes;
    public int _generatorFeatures;
    public org.codehaus.jackson.io.InputDecorator _inputDecorator;
    public org.codehaus.jackson.ObjectCodec _objectCodec;
    public org.codehaus.jackson.io.OutputDecorator _outputDecorator;
    public int _parserFeatures;
    public org.codehaus.jackson.sym.BytesToNameCanonicalizer _rootByteSymbols;
    public org.codehaus.jackson.sym.CharsToNameCanonicalizer _rootCharSymbols;

    static void <clinit>()
    {
        int $i0;
        java.lang.ThreadLocal $r0;

        <org.codehaus.jackson.JsonFactory: java.lang.String FORMAT_NAME_JSON> = "JSON";

        <org.codehaus.jackson.JsonFactory: int DEFAULT_GENERATOR_FEATURE_FLAGS> = 0;

        $i0 = staticinvoke <org.codehaus.jackson.JsonParser$Feature: int collectDefaults()>();

        <org.codehaus.jackson.JsonFactory: int DEFAULT_PARSER_FEATURE_FLAGS> = $i0;

        $i0 = staticinvoke <org.codehaus.jackson.JsonGenerator$Feature: int collectDefaults()>();

        <org.codehaus.jackson.JsonFactory: int DEFAULT_GENERATOR_FEATURE_FLAGS> = $i0;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <org.codehaus.jackson.JsonFactory: java.lang.ThreadLocal _recyclerRef> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        specialinvoke r0.<org.codehaus.jackson.JsonFactory: void <init>(org.codehaus.jackson.ObjectCodec)>(null);

        return;
    }

    public void <init>(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.ObjectCodec $r1;
        int $i0;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r2;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r3;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer createRoot()>();

        r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.sym.CharsToNameCanonicalizer _rootCharSymbols> = $r2;

        $r3 = staticinvoke <org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer createRoot()>();

        r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.sym.BytesToNameCanonicalizer _rootByteSymbols> = $r3;

        $i0 = <org.codehaus.jackson.JsonFactory: int DEFAULT_PARSER_FEATURE_FLAGS>;

        r0.<org.codehaus.jackson.JsonFactory: int _parserFeatures> = $i0;

        $i0 = <org.codehaus.jackson.JsonFactory: int DEFAULT_GENERATOR_FEATURE_FLAGS>;

        r0.<org.codehaus.jackson.JsonFactory: int _generatorFeatures> = $i0;

        r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.ObjectCodec _objectCodec> = $r1;

        return;
    }

    public org.codehaus.jackson.io.IOContext _createContext(java.lang.Object, boolean)
    {
        org.codehaus.jackson.util.BufferRecycler $r3;
        org.codehaus.jackson.io.IOContext $r2;
        java.lang.Object $r1;
        org.codehaus.jackson.JsonFactory r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 = new org.codehaus.jackson.io.IOContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.util.BufferRecycler _getBufferRecycler()>();

        specialinvoke $r2.<org.codehaus.jackson.io.IOContext: void <init>(org.codehaus.jackson.util.BufferRecycler,java.lang.Object,boolean)>($r3, $r1, $z0);

        return $r2;
    }

    public org.codehaus.jackson.JsonGenerator _createJsonGenerator(java.io.Writer, org.codehaus.jackson.io.IOContext)
    {
        org.codehaus.jackson.impl.WriterBasedGenerator $r2;
        org.codehaus.jackson.io.IOContext $r1;
        org.codehaus.jackson.io.CharacterEscapes $r5;
        org.codehaus.jackson.ObjectCodec $r3;
        int $i0;
        java.io.Writer $r4;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r4 := @parameter0: java.io.Writer;

        $r1 := @parameter1: org.codehaus.jackson.io.IOContext;

        $r2 = new org.codehaus.jackson.impl.WriterBasedGenerator;

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _generatorFeatures>;

        $r3 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.ObjectCodec _objectCodec>;

        specialinvoke $r2.<org.codehaus.jackson.impl.WriterBasedGenerator: void <init>(org.codehaus.jackson.io.IOContext,int,org.codehaus.jackson.ObjectCodec,java.io.Writer)>($r1, $i0, $r3, $r4);

        $r5 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.CharacterEscapes _characterEscapes>;

        if $r5 == null goto label1;

        virtualinvoke $r2.<org.codehaus.jackson.impl.WriterBasedGenerator: org.codehaus.jackson.JsonGenerator setCharacterEscapes(org.codehaus.jackson.io.CharacterEscapes)>($r5);

     label1:
        return $r2;
    }

    public org.codehaus.jackson.JsonParser _createJsonParser(java.io.InputStream, org.codehaus.jackson.io.IOContext)
    {
        org.codehaus.jackson.io.IOContext $r6;
        org.codehaus.jackson.ObjectCodec $r7;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r2;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r3;
        org.codehaus.jackson.JsonFactory r0;
        int $i0;
        org.codehaus.jackson.impl.ByteSourceBootstrapper $r1;
        org.codehaus.jackson.JsonParser $r4;
        java.io.InputStream $r5;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r5 := @parameter0: java.io.InputStream;

        $r6 := @parameter1: org.codehaus.jackson.io.IOContext;

        $r1 = new org.codehaus.jackson.impl.ByteSourceBootstrapper;

        specialinvoke $r1.<org.codehaus.jackson.impl.ByteSourceBootstrapper: void <init>(org.codehaus.jackson.io.IOContext,java.io.InputStream)>($r6, $r5);

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _parserFeatures>;

        $r7 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.ObjectCodec _objectCodec>;

        $r2 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.sym.BytesToNameCanonicalizer _rootByteSymbols>;

        $r3 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.sym.CharsToNameCanonicalizer _rootCharSymbols>;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.impl.ByteSourceBootstrapper: org.codehaus.jackson.JsonParser constructParser(int,org.codehaus.jackson.ObjectCodec,org.codehaus.jackson.sym.BytesToNameCanonicalizer,org.codehaus.jackson.sym.CharsToNameCanonicalizer)>($i0, $r7, $r2, $r3);

        return $r4;
    }

    public org.codehaus.jackson.JsonParser _createJsonParser(java.io.Reader, org.codehaus.jackson.io.IOContext)
    {
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.ObjectCodec $r3;
        java.io.Reader $r1;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r5;
        org.codehaus.jackson.JsonFactory r0;
        org.codehaus.jackson.impl.ReaderBasedParser $r4;
        int $i0;
        org.codehaus.jackson.JsonParser$Feature $r6;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: org.codehaus.jackson.io.IOContext;

        $r4 = new org.codehaus.jackson.impl.ReaderBasedParser;

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _parserFeatures>;

        $r3 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.ObjectCodec _objectCodec>;

        $r5 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.sym.CharsToNameCanonicalizer _rootCharSymbols>;

        $r6 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature CANONICALIZE_FIELD_NAMES>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r6);

        $r6 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature INTERN_FIELD_NAMES>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r6);

        $r5 = virtualinvoke $r5.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer makeChild(boolean,boolean)>($z0, $z1);

        specialinvoke $r4.<org.codehaus.jackson.impl.ReaderBasedParser: void <init>(org.codehaus.jackson.io.IOContext,int,java.io.Reader,org.codehaus.jackson.ObjectCodec,org.codehaus.jackson.sym.CharsToNameCanonicalizer)>($r2, $i0, $r1, $r3, $r5);

        return $r4;
    }

    public org.codehaus.jackson.JsonParser _createJsonParser(byte[], int, int, org.codehaus.jackson.io.IOContext)
    {
        byte[] $r3;
        org.codehaus.jackson.io.IOContext $r4;
        org.codehaus.jackson.ObjectCodec $r5;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r6;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r7;
        org.codehaus.jackson.JsonFactory r0;
        int $i0, $i1;
        org.codehaus.jackson.impl.ByteSourceBootstrapper $r1;
        org.codehaus.jackson.JsonParser $r2;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r3 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r4 := @parameter3: org.codehaus.jackson.io.IOContext;

        $r1 = new org.codehaus.jackson.impl.ByteSourceBootstrapper;

        specialinvoke $r1.<org.codehaus.jackson.impl.ByteSourceBootstrapper: void <init>(org.codehaus.jackson.io.IOContext,byte[],int,int)>($r4, $r3, $i0, $i1);

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _parserFeatures>;

        $r5 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.ObjectCodec _objectCodec>;

        $r6 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.sym.BytesToNameCanonicalizer _rootByteSymbols>;

        $r7 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.sym.CharsToNameCanonicalizer _rootCharSymbols>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.impl.ByteSourceBootstrapper: org.codehaus.jackson.JsonParser constructParser(int,org.codehaus.jackson.ObjectCodec,org.codehaus.jackson.sym.BytesToNameCanonicalizer,org.codehaus.jackson.sym.CharsToNameCanonicalizer)>($i0, $r5, $r6, $r7);

        return $r2;
    }

    public org.codehaus.jackson.JsonGenerator _createUTF8JsonGenerator(java.io.OutputStream, org.codehaus.jackson.io.IOContext)
    {
        java.io.OutputStream $r4;
        org.codehaus.jackson.io.IOContext $r1;
        org.codehaus.jackson.io.CharacterEscapes $r5;
        org.codehaus.jackson.ObjectCodec $r3;
        int $i0;
        org.codehaus.jackson.impl.Utf8Generator $r2;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r4 := @parameter0: java.io.OutputStream;

        $r1 := @parameter1: org.codehaus.jackson.io.IOContext;

        $r2 = new org.codehaus.jackson.impl.Utf8Generator;

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _generatorFeatures>;

        $r3 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.ObjectCodec _objectCodec>;

        specialinvoke $r2.<org.codehaus.jackson.impl.Utf8Generator: void <init>(org.codehaus.jackson.io.IOContext,int,org.codehaus.jackson.ObjectCodec,java.io.OutputStream)>($r1, $i0, $r3, $r4);

        $r5 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.CharacterEscapes _characterEscapes>;

        if $r5 == null goto label1;

        virtualinvoke $r2.<org.codehaus.jackson.impl.Utf8Generator: org.codehaus.jackson.JsonGenerator setCharacterEscapes(org.codehaus.jackson.io.CharacterEscapes)>($r5);

     label1:
        return $r2;
    }

    public java.io.Writer _createWriter(java.io.OutputStream, org.codehaus.jackson.JsonEncoding, org.codehaus.jackson.io.IOContext)
    {
        java.io.OutputStream $r1;
        org.codehaus.jackson.io.IOContext $r5;
        org.codehaus.jackson.JsonFactory r0;
        org.codehaus.jackson.JsonEncoding $r2, $r4;
        org.codehaus.jackson.io.UTF8Writer $r6;
        java.io.OutputStreamWriter $r7;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: java.io.OutputStream;

        $r4 := @parameter1: org.codehaus.jackson.JsonEncoding;

        $r5 := @parameter2: org.codehaus.jackson.io.IOContext;

        $r2 = <org.codehaus.jackson.JsonEncoding: org.codehaus.jackson.JsonEncoding UTF8>;

        if $r4 != $r2 goto label1;

        $r6 = new org.codehaus.jackson.io.UTF8Writer;

        specialinvoke $r6.<org.codehaus.jackson.io.UTF8Writer: void <init>(org.codehaus.jackson.io.IOContext,java.io.OutputStream)>($r5, $r1);

        return $r6;

     label1:
        $r7 = new java.io.OutputStreamWriter;

        $r3 = virtualinvoke $r4.<org.codehaus.jackson.JsonEncoding: java.lang.String getJavaName()>();

        specialinvoke $r7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r1, $r3);

        return $r7;
    }

    public org.codehaus.jackson.util.BufferRecycler _getBufferRecycler()
    {
        org.codehaus.jackson.util.BufferRecycler $r4;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r3;
        java.lang.ref.SoftReference $r2;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 = <org.codehaus.jackson.JsonFactory: java.lang.ThreadLocal _recyclerRef>;

        $r3 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (java.lang.ref.SoftReference) $r3;

        if $r2 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.ref.SoftReference: java.lang.Object get()>();

        $r4 = (org.codehaus.jackson.util.BufferRecycler) $r3;

     label2:
        if $r4 != null goto label3;

        $r4 = new org.codehaus.jackson.util.BufferRecycler;

        specialinvoke $r4.<org.codehaus.jackson.util.BufferRecycler: void <init>()>();

        $r1 = <org.codehaus.jackson.JsonFactory: java.lang.ThreadLocal _recyclerRef>;

        $r2 = new java.lang.ref.SoftReference;

        specialinvoke $r2.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r4);

        virtualinvoke $r1.<java.lang.ThreadLocal: void set(java.lang.Object)>($r2);

     label3:
        return $r4;
    }

    public java.io.InputStream _optimizedStreamFromURL(java.net.URL)
    {
        java.net.URL $r2;
        java.io.FileInputStream $r4;
        org.codehaus.jackson.JsonFactory r0;
        int $i0;
        java.lang.String $r1, $r3;
        boolean $z0;
        java.io.InputStream $r5;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r2 := @parameter0: java.net.URL;

        $r3 = virtualinvoke $r2.<java.net.URL: java.lang.String getProtocol()>();

        $r1 = "file";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r2.<java.net.URL: java.lang.String getHost()>();

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r4 = new java.io.FileInputStream;

        $r1 = virtualinvoke $r2.<java.net.URL: java.lang.String getPath()>();

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.lang.String)>($r1);

        return $r4;

     label2:
        $r5 = staticinvoke <com.google.firebase.perf.network.FirebasePerfUrlConnection: java.io.InputStream openStream(java.net.URL)>($r2);

        return $r5;
    }

    public final org.codehaus.jackson.JsonFactory configure(org.codehaus.jackson.JsonGenerator$Feature, boolean)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonFactory enable(org.codehaus.jackson.JsonGenerator$Feature)>($r1);

        return r0;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonFactory disable(org.codehaus.jackson.JsonGenerator$Feature)>($r1);

        return r0;
    }

    public final org.codehaus.jackson.JsonFactory configure(org.codehaus.jackson.JsonParser$Feature, boolean)
    {
        org.codehaus.jackson.JsonParser$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonFactory enable(org.codehaus.jackson.JsonParser$Feature)>($r1);

        return r0;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonFactory disable(org.codehaus.jackson.JsonParser$Feature)>($r1);

        return r0;
    }

    public org.codehaus.jackson.JsonGenerator createJsonGenerator(java.io.File, org.codehaus.jackson.JsonEncoding)
    {
        java.io.OutputStream $r4;
        org.codehaus.jackson.io.IOContext $r5;
        java.io.FileOutputStream $r10;
        java.io.File $r2;
        org.codehaus.jackson.JsonFactory r0;
        org.codehaus.jackson.JsonEncoding $r1, $r3;
        org.codehaus.jackson.io.OutputDecorator $r6;
        org.codehaus.jackson.JsonGenerator $r7;
        java.io.Writer $r8, $r9;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r2 := @parameter0: java.io.File;

        $r3 := @parameter1: org.codehaus.jackson.JsonEncoding;

        $r10 = new java.io.FileOutputStream;

        $r4 = $r10;

        specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r2);

        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.IOContext _createContext(java.lang.Object,boolean)>($r4, 1);

        virtualinvoke $r5.<org.codehaus.jackson.io.IOContext: void setEncoding(org.codehaus.jackson.JsonEncoding)>($r3);

        $r1 = <org.codehaus.jackson.JsonEncoding: org.codehaus.jackson.JsonEncoding UTF8>;

        if $r3 != $r1 goto label2;

        $r6 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.OutputDecorator _outputDecorator>;

        if $r6 == null goto label1;

        $r4 = virtualinvoke $r6.<org.codehaus.jackson.io.OutputDecorator: java.io.OutputStream decorate(org.codehaus.jackson.io.IOContext,java.io.OutputStream)>($r5, $r4);

     label1:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonGenerator _createUTF8JsonGenerator(java.io.OutputStream,org.codehaus.jackson.io.IOContext)>($r4, $r5);

        return $r7;

     label2:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: java.io.Writer _createWriter(java.io.OutputStream,org.codehaus.jackson.JsonEncoding,org.codehaus.jackson.io.IOContext)>($r4, $r3, $r5);

        $r9 = $r8;

        $r6 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.OutputDecorator _outputDecorator>;

        if $r6 == null goto label3;

        $r9 = virtualinvoke $r6.<org.codehaus.jackson.io.OutputDecorator: java.io.Writer decorate(org.codehaus.jackson.io.IOContext,java.io.Writer)>($r5, $r8);

     label3:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonGenerator _createJsonGenerator(java.io.Writer,org.codehaus.jackson.io.IOContext)>($r9, $r5);

        return $r7;
    }

    public org.codehaus.jackson.JsonGenerator createJsonGenerator(java.io.OutputStream)
    {
        java.io.OutputStream $r3;
        org.codehaus.jackson.JsonEncoding $r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r3 := @parameter0: java.io.OutputStream;

        $r1 = <org.codehaus.jackson.JsonEncoding: org.codehaus.jackson.JsonEncoding UTF8>;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonGenerator createJsonGenerator(java.io.OutputStream,org.codehaus.jackson.JsonEncoding)>($r3, $r1);

        return $r2;
    }

    public org.codehaus.jackson.JsonGenerator createJsonGenerator(java.io.OutputStream, org.codehaus.jackson.JsonEncoding)
    {
        java.io.OutputStream $r2;
        org.codehaus.jackson.io.IOContext $r4;
        org.codehaus.jackson.JsonFactory r0;
        org.codehaus.jackson.JsonEncoding $r1, $r3;
        org.codehaus.jackson.io.OutputDecorator $r5;
        org.codehaus.jackson.JsonGenerator $r6;
        java.io.Writer $r7, $r8;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r2 := @parameter0: java.io.OutputStream;

        $r3 := @parameter1: org.codehaus.jackson.JsonEncoding;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.IOContext _createContext(java.lang.Object,boolean)>($r2, 0);

        virtualinvoke $r4.<org.codehaus.jackson.io.IOContext: void setEncoding(org.codehaus.jackson.JsonEncoding)>($r3);

        $r1 = <org.codehaus.jackson.JsonEncoding: org.codehaus.jackson.JsonEncoding UTF8>;

        if $r3 != $r1 goto label2;

        $r5 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.OutputDecorator _outputDecorator>;

        if $r5 == null goto label1;

        $r2 = virtualinvoke $r5.<org.codehaus.jackson.io.OutputDecorator: java.io.OutputStream decorate(org.codehaus.jackson.io.IOContext,java.io.OutputStream)>($r4, $r2);

     label1:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonGenerator _createUTF8JsonGenerator(java.io.OutputStream,org.codehaus.jackson.io.IOContext)>($r2, $r4);

        return $r6;

     label2:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: java.io.Writer _createWriter(java.io.OutputStream,org.codehaus.jackson.JsonEncoding,org.codehaus.jackson.io.IOContext)>($r2, $r3, $r4);

        $r8 = $r7;

        $r5 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.OutputDecorator _outputDecorator>;

        if $r5 == null goto label3;

        $r8 = virtualinvoke $r5.<org.codehaus.jackson.io.OutputDecorator: java.io.Writer decorate(org.codehaus.jackson.io.IOContext,java.io.Writer)>($r4, $r7);

     label3:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonGenerator _createJsonGenerator(java.io.Writer,org.codehaus.jackson.io.IOContext)>($r8, $r4);

        return $r6;
    }

    public org.codehaus.jackson.JsonGenerator createJsonGenerator(java.io.Writer)
    {
        org.codehaus.jackson.io.IOContext $r3;
        org.codehaus.jackson.io.OutputDecorator $r1;
        org.codehaus.jackson.JsonGenerator $r4;
        java.io.Writer $r2;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r2 := @parameter0: java.io.Writer;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.IOContext _createContext(java.lang.Object,boolean)>($r2, 0);

        $r1 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.OutputDecorator _outputDecorator>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.io.OutputDecorator: java.io.Writer decorate(org.codehaus.jackson.io.IOContext,java.io.Writer)>($r3, $r2);

     label1:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonGenerator _createJsonGenerator(java.io.Writer,org.codehaus.jackson.io.IOContext)>($r2, $r3);

        return $r4;
    }

    public org.codehaus.jackson.JsonParser createJsonParser(java.io.File)
    {
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.io.InputDecorator $r4;
        java.io.FileInputStream $r6;
        java.io.File $r1;
        org.codehaus.jackson.JsonParser $r5;
        org.codehaus.jackson.JsonFactory r0;
        java.io.InputStream $r3;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.IOContext _createContext(java.lang.Object,boolean)>($r1, 1);

        $r6 = new java.io.FileInputStream;

        $r3 = $r6;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        $r4 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.InputDecorator _inputDecorator>;

        if $r4 == null goto label1;

        $r3 = virtualinvoke $r4.<org.codehaus.jackson.io.InputDecorator: java.io.InputStream decorate(org.codehaus.jackson.io.IOContext,java.io.InputStream)>($r2, $r3);

     label1:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser _createJsonParser(java.io.InputStream,org.codehaus.jackson.io.IOContext)>($r3, $r2);

        return $r5;
    }

    public org.codehaus.jackson.JsonParser createJsonParser(java.io.InputStream)
    {
        org.codehaus.jackson.io.IOContext $r3;
        org.codehaus.jackson.io.InputDecorator $r1;
        org.codehaus.jackson.JsonParser $r4;
        org.codehaus.jackson.JsonFactory r0;
        java.io.InputStream $r2;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r2 := @parameter0: java.io.InputStream;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.IOContext _createContext(java.lang.Object,boolean)>($r2, 0);

        $r1 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.InputDecorator _inputDecorator>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.io.InputDecorator: java.io.InputStream decorate(org.codehaus.jackson.io.IOContext,java.io.InputStream)>($r3, $r2);

     label1:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser _createJsonParser(java.io.InputStream,org.codehaus.jackson.io.IOContext)>($r2, $r3);

        return $r4;
    }

    public org.codehaus.jackson.JsonParser createJsonParser(java.io.Reader)
    {
        org.codehaus.jackson.io.IOContext $r3;
        org.codehaus.jackson.io.InputDecorator $r1;
        java.io.Reader $r2;
        org.codehaus.jackson.JsonParser $r4;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r2 := @parameter0: java.io.Reader;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.IOContext _createContext(java.lang.Object,boolean)>($r2, 0);

        $r1 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.InputDecorator _inputDecorator>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.io.InputDecorator: java.io.Reader decorate(org.codehaus.jackson.io.IOContext,java.io.Reader)>($r3, $r2);

     label1:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser _createJsonParser(java.io.Reader,org.codehaus.jackson.io.IOContext)>($r2, $r3);

        return $r4;
    }

    public org.codehaus.jackson.JsonParser createJsonParser(java.lang.String)
    {
        org.codehaus.jackson.io.IOContext $r4;
        org.codehaus.jackson.io.InputDecorator $r1;
        java.io.StringReader $r6;
        java.lang.String $r2;
        java.io.Reader $r3;
        org.codehaus.jackson.JsonParser $r5;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r2 := @parameter0: java.lang.String;

        $r6 = new java.io.StringReader;

        $r3 = $r6;

        specialinvoke $r6.<java.io.StringReader: void <init>(java.lang.String)>($r2);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.IOContext _createContext(java.lang.Object,boolean)>($r3, 1);

        $r1 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.InputDecorator _inputDecorator>;

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.io.InputDecorator: java.io.Reader decorate(org.codehaus.jackson.io.IOContext,java.io.Reader)>($r4, $r3);

     label1:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser _createJsonParser(java.io.Reader,org.codehaus.jackson.io.IOContext)>($r3, $r4);

        return $r5;
    }

    public org.codehaus.jackson.JsonParser createJsonParser(java.net.URL)
    {
        org.codehaus.jackson.io.IOContext $r3;
        org.codehaus.jackson.io.InputDecorator $r1;
        java.net.URL $r2;
        org.codehaus.jackson.JsonParser $r6;
        org.codehaus.jackson.JsonFactory r0;
        java.io.InputStream $r4, $r5;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r2 := @parameter0: java.net.URL;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.IOContext _createContext(java.lang.Object,boolean)>($r2, 1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: java.io.InputStream _optimizedStreamFromURL(java.net.URL)>($r2);

        $r5 = $r4;

        $r1 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.InputDecorator _inputDecorator>;

        if $r1 == null goto label1;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.io.InputDecorator: java.io.InputStream decorate(org.codehaus.jackson.io.IOContext,java.io.InputStream)>($r3, $r4);

     label1:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser _createJsonParser(java.io.InputStream,org.codehaus.jackson.io.IOContext)>($r5, $r3);

        return $r6;
    }

    public org.codehaus.jackson.JsonParser createJsonParser(byte[])
    {
        byte[] $r1;
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.io.InputDecorator $r3;
        int $i0;
        org.codehaus.jackson.JsonParser $r5;
        org.codehaus.jackson.JsonFactory r0;
        java.io.InputStream $r4;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.IOContext _createContext(java.lang.Object,boolean)>($r1, 1);

        $r3 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.InputDecorator _inputDecorator>;

        if $r3 == null goto label1;

        $i0 = lengthof $r1;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.io.InputDecorator: java.io.InputStream decorate(org.codehaus.jackson.io.IOContext,byte[],int,int)>($r2, $r1, 0, $i0);

        if $r4 == null goto label1;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser _createJsonParser(java.io.InputStream,org.codehaus.jackson.io.IOContext)>($r4, $r2);

        return $r5;

     label1:
        $i0 = lengthof $r1;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser _createJsonParser(byte[],int,int,org.codehaus.jackson.io.IOContext)>($r1, 0, $i0, $r2);

        return $r5;
    }

    public org.codehaus.jackson.JsonParser createJsonParser(byte[], int, int)
    {
        byte[] $r1;
        org.codehaus.jackson.io.IOContext $r2;
        org.codehaus.jackson.JsonFactory r0;
        org.codehaus.jackson.io.InputDecorator $r3;
        int $i0, $i1;
        org.codehaus.jackson.JsonParser $r5;
        java.io.InputStream $r4;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.IOContext _createContext(java.lang.Object,boolean)>($r1, 1);

        $r3 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.InputDecorator _inputDecorator>;

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.io.InputDecorator: java.io.InputStream decorate(org.codehaus.jackson.io.IOContext,byte[],int,int)>($r2, $r1, $i0, $i1);

        if $r4 == null goto label1;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser _createJsonParser(java.io.InputStream,org.codehaus.jackson.io.IOContext)>($r4, $r2);

        return $r5;

     label1:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser _createJsonParser(byte[],int,int,org.codehaus.jackson.io.IOContext)>($r1, $i0, $i1, $r2);

        return $r5;
    }

    public org.codehaus.jackson.JsonFactory disable(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        int $i0, $i1, $i2;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _generatorFeatures>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i2 = -1;

        $i1 = $i1 ^ $i2;

        $i0 = $i1 & $i0;

        r0.<org.codehaus.jackson.JsonFactory: int _generatorFeatures> = $i0;

        return r0;
    }

    public org.codehaus.jackson.JsonFactory disable(org.codehaus.jackson.JsonParser$Feature)
    {
        int $i0, $i1, $i2;
        org.codehaus.jackson.JsonParser$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _parserFeatures>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser$Feature: int getMask()>();

        $i2 = -1;

        $i1 = $i1 ^ $i2;

        $i0 = $i1 & $i0;

        r0.<org.codehaus.jackson.JsonFactory: int _parserFeatures> = $i0;

        return r0;
    }

    public final void disableGeneratorFeature(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonFactory disable(org.codehaus.jackson.JsonGenerator$Feature)>($r1);

        return;
    }

    public final void disableParserFeature(org.codehaus.jackson.JsonParser$Feature)
    {
        org.codehaus.jackson.JsonParser$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonFactory disable(org.codehaus.jackson.JsonParser$Feature)>($r1);

        return;
    }

    public org.codehaus.jackson.JsonFactory enable(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        int $i0, $i1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _generatorFeatures>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i0 = $i1 | $i0;

        r0.<org.codehaus.jackson.JsonFactory: int _generatorFeatures> = $i0;

        return r0;
    }

    public org.codehaus.jackson.JsonFactory enable(org.codehaus.jackson.JsonParser$Feature)
    {
        int $i0, $i1;
        org.codehaus.jackson.JsonParser$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _parserFeatures>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser$Feature: int getMask()>();

        $i0 = $i1 | $i0;

        r0.<org.codehaus.jackson.JsonFactory: int _parserFeatures> = $i0;

        return r0;
    }

    public final void enableGeneratorFeature(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonFactory enable(org.codehaus.jackson.JsonGenerator$Feature)>($r1);

        return;
    }

    public final void enableParserFeature(org.codehaus.jackson.JsonParser$Feature)
    {
        org.codehaus.jackson.JsonParser$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonFactory enable(org.codehaus.jackson.JsonParser$Feature)>($r1);

        return;
    }

    public org.codehaus.jackson.io.CharacterEscapes getCharacterEscapes()
    {
        org.codehaus.jackson.io.CharacterEscapes r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        r1 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.CharacterEscapes _characterEscapes>;

        return r1;
    }

    public org.codehaus.jackson.ObjectCodec getCodec()
    {
        org.codehaus.jackson.ObjectCodec r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        r1 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.ObjectCodec _objectCodec>;

        return r1;
    }

    public java.lang.String getFormatName()
    {
        java.lang.Class $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Lorg/codehaus/jackson/JsonFactory;" goto label1;

        return "JSON";

     label1:
        return null;
    }

    public org.codehaus.jackson.io.InputDecorator getInputDecorator()
    {
        org.codehaus.jackson.io.InputDecorator r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        r1 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.InputDecorator _inputDecorator>;

        return r1;
    }

    public org.codehaus.jackson.io.OutputDecorator getOutputDecorator()
    {
        org.codehaus.jackson.io.OutputDecorator r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        r1 = r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.OutputDecorator _outputDecorator>;

        return r1;
    }

    public org.codehaus.jackson.format.MatchStrength hasFormat(org.codehaus.jackson.format.InputAccessor)
    {
        org.codehaus.jackson.format.MatchStrength $r3;
        java.lang.Class $r2;
        org.codehaus.jackson.format.InputAccessor $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.format.InputAccessor;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "Lorg/codehaus/jackson/JsonFactory;" goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.format.MatchStrength hasJSONFormat(org.codehaus.jackson.format.InputAccessor)>($r1);

        return $r3;

     label1:
        return null;
    }

    public org.codehaus.jackson.format.MatchStrength hasJSONFormat(org.codehaus.jackson.format.InputAccessor)
    {
        org.codehaus.jackson.format.MatchStrength $r1;
        org.codehaus.jackson.format.InputAccessor $r2;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r2 := @parameter0: org.codehaus.jackson.format.InputAccessor;

        $r1 = staticinvoke <org.codehaus.jackson.impl.ByteSourceBootstrapper: org.codehaus.jackson.format.MatchStrength hasJSONFormat(org.codehaus.jackson.format.InputAccessor)>($r2);

        return $r1;
    }

    public final boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        int $i0, $i1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _generatorFeatures>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)
    {
        int $i0, $i1;
        org.codehaus.jackson.JsonParser$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _parserFeatures>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser$Feature: int getMask()>();

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isGeneratorFeatureEnabled(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonFactory: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r1);

        return $z0;
    }

    public final boolean isParserFeatureEnabled(org.codehaus.jackson.JsonParser$Feature)
    {
        int $i0, $i1;
        org.codehaus.jackson.JsonParser$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        $i0 = r0.<org.codehaus.jackson.JsonFactory: int _parserFeatures>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser$Feature: int getMask()>();

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public org.codehaus.jackson.JsonFactory setCharacterEscapes(org.codehaus.jackson.io.CharacterEscapes)
    {
        org.codehaus.jackson.io.CharacterEscapes $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.io.CharacterEscapes;

        r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.CharacterEscapes _characterEscapes> = $r1;

        return r0;
    }

    public org.codehaus.jackson.JsonFactory setCodec(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.ObjectCodec $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.ObjectCodec _objectCodec> = $r1;

        return r0;
    }

    public final void setGeneratorFeature(org.codehaus.jackson.JsonGenerator$Feature, boolean)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $z0 := @parameter1: boolean;

        virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonFactory configure(org.codehaus.jackson.JsonGenerator$Feature,boolean)>($r1, $z0);

        return;
    }

    public org.codehaus.jackson.JsonFactory setInputDecorator(org.codehaus.jackson.io.InputDecorator)
    {
        org.codehaus.jackson.io.InputDecorator $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.io.InputDecorator;

        r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.InputDecorator _inputDecorator> = $r1;

        return r0;
    }

    public org.codehaus.jackson.JsonFactory setOutputDecorator(org.codehaus.jackson.io.OutputDecorator)
    {
        org.codehaus.jackson.io.OutputDecorator $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.io.OutputDecorator;

        r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.io.OutputDecorator _outputDecorator> = $r1;

        return r0;
    }

    public final void setParserFeature(org.codehaus.jackson.JsonParser$Feature, boolean)
    {
        org.codehaus.jackson.JsonParser$Feature $r1;
        org.codehaus.jackson.JsonFactory r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        $z0 := @parameter1: boolean;

        virtualinvoke r0.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonFactory configure(org.codehaus.jackson.JsonParser$Feature,boolean)>($r1, $z0);

        return;
    }

    public org.codehaus.jackson.Version version()
    {
        org.codehaus.jackson.Version $r1;
        org.codehaus.jackson.JsonFactory r0;

        r0 := @this: org.codehaus.jackson.JsonFactory;

        $r1 = staticinvoke <org.codehaus.jackson.util.VersionUtil: org.codehaus.jackson.Version versionFor(java.lang.Class)>(class "Lorg/codehaus/jackson/impl/Utf8Generator;");

        return $r1;
    }
}
