public final class k.a.f.c extends k.a.f.f
{
    public final java.lang.reflect.Method c;
    public final java.lang.reflect.Method d;

    public void <init>(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        k.a.f.c r0;
        java.lang.reflect.Method $r1, $r2;

        r0 := @this: k.a.f.c;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.lang.reflect.Method;

        specialinvoke r0.<k.a.f.f: void <init>()>();

        r0.<k.a.f.c: java.lang.reflect.Method c> = $r1;

        r0.<k.a.f.c: java.lang.reflect.Method d> = $r2;

        return;
    }

    public static k.a.f.c e()
    {
        java.lang.NoSuchMethodException $r0, $r1;
        java.lang.Class[] $r3;
        java.lang.Class $r2;
        k.a.f.c $r6;
        java.lang.reflect.Method $r4, $r5;

        $r2 = class "Ljavax/net/ssl/SSLParameters;";

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "[Ljava/lang/String;";

     label1:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setApplicationProtocols", $r3);

     label2:
        $r2 = class "Ljavax/net/ssl/SSLSocket;";

        $r3 = newarray (java.lang.Class)[0];

     label3:
        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getApplicationProtocol", $r3);

     label4:
        $r6 = new k.a.f.c;

     label5:
        specialinvoke $r6.<k.a.f.c: void <init>(java.lang.reflect.Method,java.lang.reflect.Method)>($r4, $r5);

     label6:
        return $r6;

     label7:
        return null;

     label8:
        $r0 := @caughtexception;

        goto label7;

     label9:
        $r1 := @caughtexception;

        goto label7;

        catch java.lang.NoSuchMethodException from label1 to label2 with label8;
        catch java.lang.NoSuchMethodException from label3 to label4 with label9;
        catch java.lang.NoSuchMethodException from label5 to label6 with label9;
    }

    public void a(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        java.lang.Object[] $r6, $r8;
        javax.net.ssl.SSLParameters $r5;
        javax.net.ssl.SSLSocket $r2;
        java.lang.String[] $r7;
        java.lang.ReflectiveOperationException $r9;
        java.lang.AssertionError $r10;
        k.a.f.c r0;
        java.util.List $r4;
        int $i0;
        java.lang.String $r3;
        java.lang.reflect.Method $r1;

        r0 := @this: k.a.f.c;

        $r2 := @parameter0: javax.net.ssl.SSLSocket;

        $r3 := @parameter1: java.lang.String;

        $r4 := @parameter2: java.util.List;

     label01:
        $r5 = virtualinvoke $r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()>();

        $r4 = staticinvoke <k.a.f.f: java.util.List a(java.util.List)>($r4);

     label02:
        $r1 = r0.<k.a.f.c: java.lang.reflect.Method c>;

        $r6 = newarray (java.lang.Object)[1];

     label03:
        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

     label04:
        $r7 = newarray (java.lang.String)[$i0];

     label05:
        $r8 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

     label06:
        $r6[0] = $r8;

     label07:
        virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r6);

        virtualinvoke $r2.<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>($r5);

     label08:
        return;

     label09:
        $r9 := @caughtexception;

        goto label11;

     label10:
        $r9 := @caughtexception;

     label11:
        $r10 = staticinvoke <k.a.e: java.lang.AssertionError a(java.lang.String,java.lang.Exception)>("unable to set ssl parameters", $r9);

        throw $r10;

        catch java.lang.IllegalAccessException from label01 to label02 with label10;
        catch java.lang.IllegalAccessException from label03 to label04 with label10;
        catch java.lang.IllegalAccessException from label05 to label06 with label10;
        catch java.lang.IllegalAccessException from label07 to label08 with label10;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label09;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label09;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label09;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label09;
    }

    public java.lang.String b(javax.net.ssl.SSLSocket)
    {
        java.lang.Object[] $r3;
        javax.net.ssl.SSLSocket $r1;
        java.lang.ReflectiveOperationException $r6;
        java.lang.AssertionError $r7;
        k.a.f.c r0;
        java.lang.Object $r4;
        java.lang.String $r5;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: k.a.f.c;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = r0.<k.a.f.c: java.lang.reflect.Method d>;

        $r3 = newarray (java.lang.Object)[0];

     label1:
        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r3);

     label2:
        $r5 = (java.lang.String) $r4;

        if $r5 == null goto label6;

     label3:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("");

     label4:
        if $z0 == 0 goto label5;

        goto label6;

     label5:
        return $r5;

     label6:
        return null;

     label7:
        $r6 := @caughtexception;

        goto label9;

     label8:
        $r6 := @caughtexception;

     label9:
        $r7 = staticinvoke <k.a.e: java.lang.AssertionError a(java.lang.String,java.lang.Exception)>("unable to get selected protocols", $r6);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label8;
        catch java.lang.IllegalAccessException from label3 to label4 with label8;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
    }
}
