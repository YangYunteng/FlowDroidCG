public abstract class com.google.common.collect.ImmutableCollection$Builder extends java.lang.Object
{
    public static final int DEFAULT_INITIAL_CAPACITY;

    public void <init>()
    {
        com.google.common.collect.ImmutableCollection$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableCollection$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int expandedCapacity(int, int)
    {
        int $i0, $i1, $i2;
        java.lang.AssertionError $r0;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        if $i2 < 0 goto label2;

        $i0 = $i1 >> 1;

        $i1 = $i1 + $i0;

        $i1 = $i1 + 1;

        if $i1 >= $i2 goto label1;

        $i1 = -1;

        $i1 = $i2 + $i1;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1);

        $i1 = $i1 << 1;

     label1:
        if $i1 >= 0 goto label3;

        return 2147483647;

     label2:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("cannot store more than MAX_VALUE elements");

        throw $r0;

     label3:
        return $i1;
    }

    public abstract com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object);

    public transient com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        com.google.common.collect.ImmutableCollection$Builder r0;

        r0 := @this: com.google.common.collect.ImmutableCollection$Builder;

        $r1 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r1[$i1];

        virtualinvoke r0.<com.google.common.collect.ImmutableCollection$Builder: com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.Iterable $r1;
        com.google.common.collect.ImmutableCollection$Builder r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableCollection$Builder;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<com.google.common.collect.ImmutableCollection$Builder: com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return r0;
    }

    public com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)
    {
        java.util.Iterator $r1;
        java.lang.Object $r2;
        com.google.common.collect.ImmutableCollection$Builder r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableCollection$Builder;

        $r1 := @parameter0: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<com.google.common.collect.ImmutableCollection$Builder: com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return r0;
    }

    public abstract com.google.common.collect.ImmutableCollection build();

    public static void <clinit>()
    {
        <com.google.common.collect.ImmutableCollection$Builder: int DEFAULT_INITIAL_CAPACITY> = 4;

        return;
    }
}
