public abstract class com.google.common.collect.ImmutableSortedSet extends com.google.common.collect.ImmutableSortedSetFauxverideShim implements java.util.NavigableSet, com.google.common.collect.SortedIterable
{
    public static final int SPLITERATOR_CHARACTERISTICS;
    public final transient java.util.Comparator comparator;
    public transient com.google.common.collect.ImmutableSortedSet descendingSet;

    public void <init>(java.util.Comparator)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.util.Comparator $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<com.google.common.collect.ImmutableSortedSetFauxverideShim: void <init>()>();

        r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator> = $r1;

        return;
    }

    public static transient com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator, int, java.lang.Object[])
    {
        java.lang.Object[] $r2;
        com.google.common.collect.ImmutableList $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r0, $r4;
        java.util.Comparator $r1;
        com.google.common.collect.RegularImmutableSortedSet $r3, $r6;

        $r1 := @parameter0: java.util.Comparator;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.Object[];

        if $i0 != 0 goto label1;

        $r3 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator)>($r1);

        return $r3;

     label1:
        staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] checkElementsNotNull(java.lang.Object[],int)>($r2, $i0);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>($r2, 0, $i0, $r1);

        $i1 = 1;

        $i2 = 1;

     label2:
        if $i1 >= $i0 goto label4;

        $r0 = $r2[$i1];

        $i3 = -1;

        $i3 = $i2 + $i3;

        $r4 = $r2[$i3];

        $i3 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r0, $r4);

        if $i3 == 0 goto label3;

        $r2[$i2] = $r0;

        $i2 = $i2 + 1;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, $i2, $i0, null);

        $r6 = new com.google.common.collect.RegularImmutableSortedSet;

        $r5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[],int)>($r2, $i2);

        specialinvoke $r6.<com.google.common.collect.RegularImmutableSortedSet: void <init>(com.google.common.collect.ImmutableList,java.util.Comparator)>($r5, $r1);

        return $r6;
    }

    public static com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableSortedSet $r2;
        com.google.common.collect.Ordering $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.lang.Iterable)>($r1, $r0);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedSet copyOf(java.util.Collection)
    {
        com.google.common.collect.ImmutableSortedSet $r2;
        com.google.common.collect.Ordering $r1;
        java.util.Collection $r0;

        $r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)>($r1, $r0);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator, java.lang.Iterable)
    {
        com.google.common.collect.ImmutableSortedSet $r2;
        java.lang.Object[] $r3;
        int $i0;
        java.util.Comparator $r0;
        java.lang.Iterable $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.Comparator;

        $r1 := @parameter1: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = staticinvoke <com.google.common.collect.SortedIterables: boolean hasSameComparator(java.util.Comparator,java.lang.Iterable)>($r0, $r1);

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof com.google.common.collect.ImmutableSortedSet;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.collect.ImmutableSortedSet) $r1;

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: boolean isPartialView()>();

        if $z0 != 0 goto label1;

        return $r2;

     label1:
        $r3 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable)>($r1);

        $i0 = lengthof $r3;

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[])>($r0, $i0, $r3);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator, java.util.Collection)
    {
        com.google.common.collect.ImmutableSortedSet $r1;
        java.util.Comparator $r2;
        java.util.Collection $r0;

        $r2 := @parameter0: java.util.Comparator;

        $r0 := @parameter1: java.util.Collection;

        $r1 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.lang.Iterable)>($r2, $r0);

        return $r1;
    }

    public static com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator, java.util.Iterator)
    {
        com.google.common.collect.ImmutableSortedSet $r3;
        java.util.Iterator $r0;
        com.google.common.collect.ImmutableSortedSet$Builder $r1;
        java.util.Comparator $r2;

        $r2 := @parameter0: java.util.Comparator;

        $r0 := @parameter1: java.util.Iterator;

        $r1 = new com.google.common.collect.ImmutableSortedSet$Builder;

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedSet$Builder: void <init>(java.util.Comparator)>($r2);

        $r1 = virtualinvoke $r1.<com.google.common.collect.ImmutableSortedSet$Builder: com.google.common.collect.ImmutableSortedSet$Builder addAll(java.util.Iterator)>($r0);

        $r3 = virtualinvoke $r1.<com.google.common.collect.ImmutableSortedSet$Builder: com.google.common.collect.ImmutableSortedSet build()>();

        return $r3;
    }

    public static com.google.common.collect.ImmutableSortedSet copyOf(java.util.Iterator)
    {
        com.google.common.collect.ImmutableSortedSet $r2;
        java.util.Iterator $r0;
        com.google.common.collect.Ordering $r1;

        $r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Iterator)>($r1, $r0);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Comparable[])
    {
        com.google.common.collect.ImmutableSortedSet $r4;
        java.lang.Object[] $r3;
        com.google.common.collect.Ordering $r1;
        int $i0;
        java.lang.Object $r2;
        java.lang.Comparable[] $r0;

        $r0 := @parameter0: java.lang.Comparable[];

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $i0 = lengthof $r0;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.Object[]) $r2;

        $r4 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[])>($r1, $i0, $r3);

        return $r4;
    }

    public static com.google.common.collect.ImmutableSortedSet copyOfSorted(java.util.SortedSet)
    {
        java.util.SortedSet $r0;
        com.google.common.collect.ImmutableList $r2;
        java.util.Comparator $r1;
        com.google.common.collect.RegularImmutableSortedSet $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.SortedSet;

        $r1 = staticinvoke <com.google.common.collect.SortedIterables: java.util.Comparator comparator(java.util.SortedSet)>($r0);

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r0);

        $z0 = virtualinvoke $r2.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator)>($r1);

        return $r3;

     label1:
        $r3 = new com.google.common.collect.RegularImmutableSortedSet;

        specialinvoke $r3.<com.google.common.collect.RegularImmutableSortedSet: void <init>(com.google.common.collect.ImmutableList,java.util.Comparator)>($r2, $r1);

        return $r3;
    }

    public static com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator)
    {
        com.google.common.collect.Ordering $r1;
        com.google.common.collect.ImmutableList $r3;
        java.util.Comparator $r0;
        com.google.common.collect.RegularImmutableSortedSet $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.Comparator;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r2 = <com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet NATURAL_EMPTY_SET>;

        return $r2;

     label1:
        $r2 = new com.google.common.collect.RegularImmutableSortedSet;

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        specialinvoke $r2.<com.google.common.collect.RegularImmutableSortedSet: void <init>(com.google.common.collect.ImmutableList,java.util.Comparator)>($r3, $r0);

        return $r2;
    }

    public static com.google.common.collect.ImmutableSortedSet$Builder naturalOrder()
    {
        com.google.common.collect.ImmutableSortedSet$Builder $r0;
        com.google.common.collect.Ordering $r1;

        $r0 = new com.google.common.collect.ImmutableSortedSet$Builder;

        $r1 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        specialinvoke $r0.<com.google.common.collect.ImmutableSortedSet$Builder: void <init>(java.util.Comparator)>($r1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableSortedSet of()
    {
        com.google.common.collect.RegularImmutableSortedSet r0;

        r0 = <com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.RegularImmutableSortedSet NATURAL_EMPTY_SET>;

        return r0;
    }

    public static com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable)
    {
        com.google.common.collect.ImmutableList $r2;
        com.google.common.collect.Ordering $r3;
        java.lang.Comparable $r1;
        com.google.common.collect.RegularImmutableSortedSet $r0;

        $r1 := @parameter0: java.lang.Comparable;

        $r0 = new com.google.common.collect.RegularImmutableSortedSet;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>($r1);

        $r3 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        specialinvoke $r0.<com.google.common.collect.RegularImmutableSortedSet: void <init>(com.google.common.collect.ImmutableList,java.util.Comparator)>($r2, $r3);

        return $r0;
    }

    public static com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable, java.lang.Comparable)
    {
        com.google.common.collect.ImmutableSortedSet $r4;
        com.google.common.collect.Ordering $r3;
        java.lang.Comparable $r0, $r2;
        java.lang.Comparable[] $r1;

        $r2 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable;

        $r3 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r1 = newarray (java.lang.Comparable)[2];

        $r1[0] = $r2;

        $r1[1] = $r0;

        $r4 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[])>($r3, 2, $r1);

        return $r4;
    }

    public static com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        com.google.common.collect.ImmutableSortedSet $r5;
        com.google.common.collect.Ordering $r4;
        java.lang.Comparable $r0, $r1, $r3;
        java.lang.Comparable[] $r2;

        $r3 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable;

        $r1 := @parameter2: java.lang.Comparable;

        $r4 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r2 = newarray (java.lang.Comparable)[3];

        $r2[0] = $r3;

        $r2[1] = $r0;

        $r2[2] = $r1;

        $r5 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[])>($r4, 3, $r2);

        return $r5;
    }

    public static com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        com.google.common.collect.ImmutableSortedSet $r6;
        com.google.common.collect.Ordering $r5;
        java.lang.Comparable $r0, $r1, $r2, $r4;
        java.lang.Comparable[] $r3;

        $r4 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable;

        $r1 := @parameter2: java.lang.Comparable;

        $r2 := @parameter3: java.lang.Comparable;

        $r5 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r3 = newarray (java.lang.Comparable)[4];

        $r3[0] = $r4;

        $r3[1] = $r0;

        $r3[2] = $r1;

        $r3[3] = $r2;

        $r6 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[])>($r5, 4, $r3);

        return $r6;
    }

    public static com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        com.google.common.collect.ImmutableSortedSet $r7;
        java.lang.Comparable[] $r4;
        com.google.common.collect.Ordering $r6;
        java.lang.Comparable $r0, $r1, $r2, $r3, $r5;

        $r5 := @parameter0: java.lang.Comparable;

        $r0 := @parameter1: java.lang.Comparable;

        $r1 := @parameter2: java.lang.Comparable;

        $r2 := @parameter3: java.lang.Comparable;

        $r3 := @parameter4: java.lang.Comparable;

        $r6 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r4 = newarray (java.lang.Comparable)[5];

        $r4[0] = $r5;

        $r4[1] = $r0;

        $r4[2] = $r1;

        $r4[3] = $r2;

        $r4[4] = $r3;

        $r7 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[])>($r6, 5, $r4);

        return $r7;
    }

    public static transient com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable[])
    {
        com.google.common.collect.ImmutableSortedSet $r9;
        java.lang.Comparable[] $r4, $r7;
        com.google.common.collect.Ordering $r8;
        int $i0;
        java.lang.Comparable $r0, $r1, $r2, $r3, $r5, $r6;

        $r5 := @parameter0: java.lang.Comparable;

        $r6 := @parameter1: java.lang.Comparable;

        $r0 := @parameter2: java.lang.Comparable;

        $r1 := @parameter3: java.lang.Comparable;

        $r2 := @parameter4: java.lang.Comparable;

        $r3 := @parameter5: java.lang.Comparable;

        $r4 := @parameter6: java.lang.Comparable[];

        $i0 = lengthof $r4;

        $i0 = $i0 + 6;

        $r7 = newarray (java.lang.Comparable)[$i0];

        $r7[0] = $r5;

        $r7[1] = $r6;

        $r7[2] = $r0;

        $r7[3] = $r1;

        $r7[4] = $r2;

        $r7[5] = $r3;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r7, 6, $i0);

        $r8 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $i0 = lengthof $r7;

        $r9 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[])>($r8, $i0, $r7);

        return $r9;
    }

    public static com.google.common.collect.ImmutableSortedSet$Builder orderedBy(java.util.Comparator)
    {
        com.google.common.collect.ImmutableSortedSet$Builder $r1;
        java.util.Comparator $r0;

        $r0 := @parameter0: java.util.Comparator;

        $r1 = new com.google.common.collect.ImmutableSortedSet$Builder;

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedSet$Builder: void <init>(java.util.Comparator)>($r0);

        return $r1;
    }

    private void readObject(java.io.ObjectInputStream)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.io.ObjectInputStream $r1;
        java.io.InvalidObjectException $r2;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.io.InvalidObjectException;

        specialinvoke $r2.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Use SerializedForm");

        throw $r2;
    }

    public static com.google.common.collect.ImmutableSortedSet$Builder reverseOrder()
    {
        com.google.common.collect.ImmutableSortedSet$Builder $r0;
        java.util.Comparator $r1;

        $r0 = new com.google.common.collect.ImmutableSortedSet$Builder;

        $r1 = staticinvoke <java.util.Collections: java.util.Comparator reverseOrder()>();

        specialinvoke $r0.<com.google.common.collect.ImmutableSortedSet$Builder: void <init>(java.util.Comparator)>($r1);

        return $r0;
    }

    public static java.util.stream.Collector toImmutableSortedSet(java.util.Comparator)
    {
        java.util.stream.Collector $r0;
        java.util.Comparator $r1;

        $r1 := @parameter0: java.util.Comparator;

        $r0 = staticinvoke <com.google.common.collect.CollectCollectors: java.util.stream.Collector toImmutableSortedSet(java.util.Comparator)>($r1);

        return $r0;
    }

    public static int unsafeCompare(java.util.Comparator, java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0, $r1;
        java.util.Comparator $r2;

        $r2 := @parameter0: java.util.Comparator;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r0, $r1);

        return $i0;
    }

    public java.lang.Object ceiling(java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean)>($r1, 1);

        $r1 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getFirst(java.lang.Iterable,java.lang.Object)>(r0, null);

        return $r1;
    }

    public java.util.Comparator comparator()
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.util.Comparator r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        r1 = r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        return r1;
    }

    public abstract com.google.common.collect.ImmutableSortedSet createDescendingSet();

    public abstract com.google.common.collect.UnmodifiableIterator descendingIterator();

    public volatile java.util.Iterator descendingIterator()
    {
        com.google.common.collect.ImmutableSortedSet r0;
        com.google.common.collect.UnmodifiableIterator $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.UnmodifiableIterator descendingIterator()>();

        return $r1;
    }

    public com.google.common.collect.ImmutableSortedSet descendingSet()
    {
        com.google.common.collect.ImmutableSortedSet r0, $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 = r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet descendingSet>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet createDescendingSet()>();

        r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet descendingSet> = $r1;

        $r1.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet descendingSet> = r0;

     label1:
        return $r1;
    }

    public volatile java.util.NavigableSet descendingSet()
    {
        com.google.common.collect.ImmutableSortedSet r0;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet descendingSet()>();

        return r0;
    }

    public java.lang.Object first()
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r2;
        com.google.common.collect.UnmodifiableIterator $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        return $r2;
    }

    public java.lang.Object floor(java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;
        com.google.common.collect.UnmodifiableIterator $r2;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean)>($r1, 1);

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.UnmodifiableIterator descendingIterator()>();

        $r1 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getNext(java.util.Iterator,java.lang.Object)>($r2, null);

        return $r1;
    }

    public com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean)>($r1, 0);

        return r0;
    }

    public com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object, boolean)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean)>($r1, $z0);

        return r0;
    }

    public volatile java.util.NavigableSet headSet(java.lang.Object, boolean)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean)>($r1, $z0);

        return r0;
    }

    public volatile java.util.SortedSet headSet(java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object)>($r1);

        return r0;
    }

    public abstract com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object, boolean);

    public java.lang.Object higher(java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean)>($r1, 0);

        $r1 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getFirst(java.lang.Iterable,java.lang.Object)>(r0, null);

        return $r1;
    }

    public abstract int indexOf(java.lang.Object);

    public abstract com.google.common.collect.UnmodifiableIterator iterator();

    public volatile java.util.Iterator iterator()
    {
        com.google.common.collect.ImmutableSortedSet r0;
        com.google.common.collect.UnmodifiableIterator $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public java.lang.Object last()
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r2;
        com.google.common.collect.UnmodifiableIterator $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.UnmodifiableIterator descendingIterator()>();

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        return $r2;
    }

    public java.lang.Object lower(java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;
        com.google.common.collect.UnmodifiableIterator $r2;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean)>($r1, 0);

        $r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.UnmodifiableIterator descendingIterator()>();

        $r1 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getNext(java.util.Iterator,java.lang.Object)>($r2, null);

        return $r1;
    }

    public final java.lang.Object pollFirst()
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public final java.lang.Object pollLast()
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.Spliterator spliterator()
    {
        com.google.common.collect.ImmutableSortedSet r0;
        int $i0;
        long $l1;
        com.google.common.collect.ImmutableSortedSet$1 $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 = new com.google.common.collect.ImmutableSortedSet$1;

        $i0 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();

        $l1 = (long) $i0;

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedSet$1: void <init>(com.google.common.collect.ImmutableSortedSet,long,int)>(r0, $l1, 1365);

        return $r1;
    }

    public com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)>($r2, 1, $r1, 0);

        return r0;
    }

    public com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        int $i0;
        java.lang.Object $r1, $r2;
        java.util.Comparator $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r2 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.lang.Object;

        $z1 := @parameter3: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $i0 > 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z2);

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)>($r2, $z0, $r1, $z1);

        return r0;
    }

    public volatile java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r2 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.lang.Object;

        $z1 := @parameter3: boolean;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)>($r2, $z0, $r1, $z1);

        return r0;
    }

    public volatile java.util.SortedSet subSet(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1, $r2;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,java.lang.Object)>($r2, $r1);

        return r0;
    }

    public abstract com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object, boolean, java.lang.Object, boolean);

    public com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean)>($r1, 1);

        return r0;
    }

    public com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object, boolean)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean)>($r1, $z0);

        return r0;
    }

    public volatile java.util.NavigableSet tailSet(java.lang.Object, boolean)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean)>($r1, $z0);

        return r0;
    }

    public volatile java.util.SortedSet tailSet(java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object)>($r1);

        return r0;
    }

    public abstract com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object, boolean);

    public int unsafeCompare(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableSortedSet r0;
        int $i0;
        java.lang.Object $r1, $r3;
        java.util.Comparator $r2;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        $i0 = staticinvoke <com.google.common.collect.ImmutableSortedSet: int unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object)>($r2, $r3, $r1);

        return $i0;
    }

    public java.lang.Object writeReplace()
    {
        com.google.common.collect.ImmutableSortedSet r0;
        java.lang.Object[] $r3;
        java.util.Comparator $r2;
        com.google.common.collect.ImmutableSortedSet$SerializedForm $r1;

        r0 := @this: com.google.common.collect.ImmutableSortedSet;

        $r1 = new com.google.common.collect.ImmutableSortedSet$SerializedForm;

        $r2 = r0.<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        $r3 = virtualinvoke r0.<com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableSortedSet$SerializedForm: void <init>(java.util.Comparator,java.lang.Object[])>($r2, $r3);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.google.common.collect.ImmutableSortedSet: int SPLITERATOR_CHARACTERISTICS> = 1301;

        return;
    }
}
