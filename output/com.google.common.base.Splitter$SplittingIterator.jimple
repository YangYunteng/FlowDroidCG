public abstract class com.google.common.base.Splitter$SplittingIterator extends com.google.common.base.AbstractIterator
{
    public int limit;
    public int offset;
    public final boolean omitEmptyStrings;
    public final java.lang.CharSequence toSplit;
    public final com.google.common.base.CharMatcher trimmer;

    public void <init>(com.google.common.base.Splitter, java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        com.google.common.base.Splitter$SplittingIterator r0;
        com.google.common.base.CharMatcher $r3;
        int $i0;
        com.google.common.base.Splitter $r2;
        boolean $z0;

        r0 := @this: com.google.common.base.Splitter$SplittingIterator;

        $r2 := @parameter0: com.google.common.base.Splitter;

        $r1 := @parameter1: java.lang.CharSequence;

        specialinvoke r0.<com.google.common.base.AbstractIterator: void <init>()>();

        r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = 0;

        $r3 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.CharMatcher access$200(com.google.common.base.Splitter)>($r2);

        r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer> = $r3;

        $z0 = staticinvoke <com.google.common.base.Splitter: boolean access$300(com.google.common.base.Splitter)>($r2);

        r0.<com.google.common.base.Splitter$SplittingIterator: boolean omitEmptyStrings> = $z0;

        $i0 = staticinvoke <com.google.common.base.Splitter: int access$400(com.google.common.base.Splitter)>($r2);

        r0.<com.google.common.base.Splitter$SplittingIterator: int limit> = $i0;

        r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit> = $r1;

        return;
    }

    public volatile java.lang.Object computeNext()
    {
        java.lang.String $r1;
        com.google.common.base.Splitter$SplittingIterator r0;

        r0 := @this: com.google.common.base.Splitter$SplittingIterator;

        $r1 = virtualinvoke r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.String computeNext()>();

        return $r1;
    }

    public java.lang.String computeNext()
    {
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher $r2;
        char $c3;
        com.google.common.base.Splitter$SplittingIterator r0;
        int $i0, $i1, $i2, $i4;
        java.lang.Object $r4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.google.common.base.Splitter$SplittingIterator;

        $i1 = r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

     label01:
        $i2 = r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

        $i0 = -1;

        if $i2 == $i0 goto label11;

        $i0 = virtualinvoke r0.<com.google.common.base.Splitter$SplittingIterator: int separatorStart(int)>($i2);

        $i2 = $i0;

        $i4 = -1;

        if $i0 != $i4 goto label02;

        $r1 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = -1;

        r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = $i0;

        goto label03;

     label02:
        $i0 = virtualinvoke r0.<com.google.common.base.Splitter$SplittingIterator: int separatorEnd(int)>($i0);

        r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = $i0;

     label03:
        $i0 = r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

        if $i0 != $i1 goto label04;

        $i2 = $i0 + 1;

        r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = $i2;

        $i2 = r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

        $r1 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i2 <= $i0 goto label01;

        $i2 = -1;

        r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = $i2;

        goto label01;

     label04:
        if $i1 >= $i2 goto label05;

        $r2 = r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer>;

        $r1 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = virtualinvoke $r2.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label05;

        $i1 = $i1 + 1;

        goto label04;

     label05:
        if $i2 <= $i1 goto label06;

        $r2 = r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer>;

        $r1 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i0 = -1;

        $i0 = $i2 + $i0;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = virtualinvoke $r2.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label06;

        $i0 = -1;

        $i2 = $i2 + $i0;

        goto label05;

     label06:
        $z0 = r0.<com.google.common.base.Splitter$SplittingIterator: boolean omitEmptyStrings>;

        if $z0 == 0 goto label07;

        if $i1 != $i2 goto label07;

        $i1 = r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

        goto label01;

     label07:
        $i0 = r0.<com.google.common.base.Splitter$SplittingIterator: int limit>;

        if $i0 != 1 goto label09;

        $r1 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = -1;

        r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = $i0;

     label08:
        if $i2 <= $i1 goto label10;

        $r2 = r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer>;

        $r1 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i0 = -1;

        $i0 = $i2 + $i0;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = virtualinvoke $r2.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label10;

        $i0 = -1;

        $i2 = $i2 + $i0;

        goto label08;

     label09:
        $i0 = $i0 - 1;

        r0.<com.google.common.base.Splitter$SplittingIterator: int limit> = $i0;

     label10:
        $r1 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i2);

        $r3 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        return $r3;

     label11:
        $r4 = virtualinvoke r0.<com.google.common.base.AbstractIterator: java.lang.Object endOfData()>();

        $r3 = (java.lang.String) $r4;

        return $r3;
    }

    public abstract int separatorEnd(int);

    public abstract int separatorStart(int);
}
