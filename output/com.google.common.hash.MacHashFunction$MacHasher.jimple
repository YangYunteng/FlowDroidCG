public final class com.google.common.hash.MacHashFunction$MacHasher extends com.google.common.hash.AbstractByteHasher
{
    public boolean done;
    public final javax.crypto.Mac mac;

    public void <init>(javax.crypto.Mac)
    {
        com.google.common.hash.MacHashFunction$MacHasher r0;
        javax.crypto.Mac $r1;

        r0 := @this: com.google.common.hash.MacHashFunction$MacHasher;

        $r1 := @parameter0: javax.crypto.Mac;

        specialinvoke r0.<com.google.common.hash.AbstractByteHasher: void <init>()>();

        r0.<com.google.common.hash.MacHashFunction$MacHasher: javax.crypto.Mac mac> = $r1;

        return;
    }

    public void <init>(javax.crypto.Mac, com.google.common.hash.MacHashFunction$1)
    {
        com.google.common.hash.MacHashFunction$MacHasher r0;
        com.google.common.hash.MacHashFunction$1 $r2;
        javax.crypto.Mac $r1;

        r0 := @this: com.google.common.hash.MacHashFunction$MacHasher;

        $r1 := @parameter0: javax.crypto.Mac;

        $r2 := @parameter1: com.google.common.hash.MacHashFunction$1;

        specialinvoke r0.<com.google.common.hash.MacHashFunction$MacHasher: void <init>(javax.crypto.Mac)>($r1);

        return;
    }

    private void checkNotDone()
    {
        com.google.common.hash.MacHashFunction$MacHasher r0;
        boolean $z0;

        r0 := @this: com.google.common.hash.MacHashFunction$MacHasher;

        $z0 = r0.<com.google.common.hash.MacHashFunction$MacHasher: boolean done>;

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot re-use a Hasher after calling hash() on it");

        return;
    }

    public com.google.common.hash.HashCode hash()
    {
        byte[] $r2;
        com.google.common.hash.HashCode $r3;
        com.google.common.hash.MacHashFunction$MacHasher r0;
        javax.crypto.Mac $r1;

        r0 := @this: com.google.common.hash.MacHashFunction$MacHasher;

        specialinvoke r0.<com.google.common.hash.MacHashFunction$MacHasher: void checkNotDone()>();

        r0.<com.google.common.hash.MacHashFunction$MacHasher: boolean done> = 1;

        $r1 = r0.<com.google.common.hash.MacHashFunction$MacHasher: javax.crypto.Mac mac>;

        $r2 = virtualinvoke $r1.<javax.crypto.Mac: byte[] doFinal()>();

        $r3 = staticinvoke <com.google.common.hash.HashCode: com.google.common.hash.HashCode fromBytesNoCopy(byte[])>($r2);

        return $r3;
    }

    public void update(byte)
    {
        com.google.common.hash.MacHashFunction$MacHasher r0;
        javax.crypto.Mac $r1;
        byte $b0;

        r0 := @this: com.google.common.hash.MacHashFunction$MacHasher;

        $b0 := @parameter0: byte;

        specialinvoke r0.<com.google.common.hash.MacHashFunction$MacHasher: void checkNotDone()>();

        $r1 = r0.<com.google.common.hash.MacHashFunction$MacHasher: javax.crypto.Mac mac>;

        virtualinvoke $r1.<javax.crypto.Mac: void update(byte)>($b0);

        return;
    }

    public void update(java.nio.ByteBuffer)
    {
        com.google.common.hash.MacHashFunction$MacHasher r0;
        javax.crypto.Mac $r2;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.MacHashFunction$MacHasher;

        $r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke r0.<com.google.common.hash.MacHashFunction$MacHasher: void checkNotDone()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = r0.<com.google.common.hash.MacHashFunction$MacHasher: javax.crypto.Mac mac>;

        virtualinvoke $r2.<javax.crypto.Mac: void update(java.nio.ByteBuffer)>($r1);

        return;
    }

    public void update(byte[])
    {
        com.google.common.hash.MacHashFunction$MacHasher r0;
        byte[] $r1;
        javax.crypto.Mac $r2;

        r0 := @this: com.google.common.hash.MacHashFunction$MacHasher;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<com.google.common.hash.MacHashFunction$MacHasher: void checkNotDone()>();

        $r2 = r0.<com.google.common.hash.MacHashFunction$MacHasher: javax.crypto.Mac mac>;

        virtualinvoke $r2.<javax.crypto.Mac: void update(byte[])>($r1);

        return;
    }

    public void update(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.hash.MacHashFunction$MacHasher r0;
        int $i0, $i1;
        javax.crypto.Mac $r2;

        r0 := @this: com.google.common.hash.MacHashFunction$MacHasher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<com.google.common.hash.MacHashFunction$MacHasher: void checkNotDone()>();

        $r2 = r0.<com.google.common.hash.MacHashFunction$MacHasher: javax.crypto.Mac mac>;

        virtualinvoke $r2.<javax.crypto.Mac: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
}
