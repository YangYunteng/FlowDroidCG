public class org.dom4j.io.STAXEventWriter extends java.lang.Object
{
    public javax.xml.stream.util.XMLEventConsumer consumer;
    public javax.xml.stream.XMLEventFactory factory;
    public javax.xml.stream.XMLOutputFactory outputFactory;

    public void <init>()
    {
        javax.xml.stream.XMLOutputFactory $r2;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = $r1;

        $r2 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory> = $r2;

        return;
    }

    public void <init>(java.io.File)
    {
        javax.xml.stream.XMLOutputFactory $r3;
        javax.xml.stream.XMLEventWriter $r4;
        org.dom4j.io.STAXEventWriter r0;
        java.io.FileWriter $r5;
        java.io.File $r1;
        javax.xml.stream.XMLEventFactory $r2;
        javax.xml.stream.util.XMLEventConsumer $r6;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = $r2;

        $r3 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory> = $r3;

        $r3 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory>;

        $r5 = new java.io.FileWriter;

        specialinvoke $r5.<java.io.FileWriter: void <init>(java.io.File)>($r1);

        $r4 = virtualinvoke $r3.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.Writer)>($r5);

        $r6 = (javax.xml.stream.util.XMLEventConsumer) $r4;

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer> = $r6;

        return;
    }

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream $r1;
        javax.xml.stream.XMLOutputFactory $r3;
        javax.xml.stream.XMLEventWriter $r4;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory $r2;
        javax.xml.stream.util.XMLEventConsumer $r5;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = $r2;

        $r3 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory> = $r3;

        $r3 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory>;

        $r4 = virtualinvoke $r3.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.OutputStream)>($r1);

        $r5 = (javax.xml.stream.util.XMLEventConsumer) $r4;

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer> = $r5;

        return;
    }

    public void <init>(java.io.Writer)
    {
        javax.xml.stream.XMLOutputFactory $r3;
        javax.xml.stream.XMLEventWriter $r4;
        org.dom4j.io.STAXEventWriter r0;
        java.io.Writer $r1;
        javax.xml.stream.XMLEventFactory $r2;
        javax.xml.stream.util.XMLEventConsumer $r5;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = $r2;

        $r3 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory> = $r3;

        $r3 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory>;

        $r4 = virtualinvoke $r3.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.Writer)>($r1);

        $r5 = (javax.xml.stream.util.XMLEventConsumer) $r4;

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer> = $r5;

        return;
    }

    public void <init>(javax.xml.stream.util.XMLEventConsumer)
    {
        javax.xml.stream.XMLOutputFactory $r3;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.util.XMLEventConsumer $r1;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 := @parameter0: javax.xml.stream.util.XMLEventConsumer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = $r2;

        $r3 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory> = $r3;

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer> = $r1;

        return;
    }

    public static javax.xml.stream.XMLEventFactory access$0(org.dom4j.io.STAXEventWriter)
    {
        org.dom4j.io.STAXEventWriter $r0;
        javax.xml.stream.XMLEventFactory r1;

        $r0 := @parameter0: org.dom4j.io.STAXEventWriter;

        r1 = $r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        return r1;
    }

    private javax.xml.stream.events.EntityReference createEntityReference(org.dom4j.Entity)
    {
        org.dom4j.Entity $r2;
        org.dom4j.io.STAXEventWriter r0;
        java.lang.String $r3;
        javax.xml.stream.events.EntityReference $r4;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.Entity;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Node: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EntityReference createEntityReference(java.lang.String,javax.xml.stream.events.EntityDeclaration)>($r3, null);

        return $r4;
    }

    public javax.xml.stream.events.Attribute createAttribute(org.dom4j.Attribute)
    {
        javax.xml.stream.events.Attribute $r6;
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.QName $r3;
        javax.xml.namespace.QName $r4;
        java.lang.String $r5;
        javax.xml.stream.XMLEventFactory $r1;
        org.dom4j.Attribute $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.Attribute;

        $r3 = interfaceinvoke $r2.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r4 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.namespace.QName createQName(org.dom4j.QName)>($r3);

        $r5 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getValue()>();

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r6 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Attribute createAttribute(javax.xml.namespace.QName,java.lang.String)>($r4, $r5);

        return $r6;
    }

    public javax.xml.stream.events.Characters createCharacters(org.dom4j.CDATA)
    {
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.CDATA $r2;
        javax.xml.stream.events.Characters $r4;
        java.lang.String $r3;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.CDATA;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Node: java.lang.String getText()>();

        $r4 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Characters createCData(java.lang.String)>($r3);

        return $r4;
    }

    public javax.xml.stream.events.Characters createCharacters(org.dom4j.Text)
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.Characters $r4;
        org.dom4j.Text $r2;
        java.lang.String $r3;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.Text;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Node: java.lang.String getText()>();

        $r4 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Characters createCharacters(java.lang.String)>($r3);

        return $r4;
    }

    public javax.xml.stream.events.Comment createComment(org.dom4j.Comment)
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.Comment $r4;
        org.dom4j.Comment $r2;
        java.lang.String $r3;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.Comment;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Node: java.lang.String getText()>();

        $r4 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Comment createComment(java.lang.String)>($r3);

        return $r4;
    }

    public javax.xml.stream.events.DTD createDTD(org.dom4j.DocumentType)
    {
        org.dom4j.io.STAXEventWriter r0;
        java.io.StringWriter $r2;
        java.io.IOException $r6;
        java.lang.RuntimeException $r7;
        org.dom4j.DocumentType $r1;
        java.lang.String $r4;
        javax.xml.stream.events.DTD $r5;
        javax.xml.stream.XMLEventFactory $r3;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 := @parameter0: org.dom4j.DocumentType;

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

     label1:
        interfaceinvoke $r1.<org.dom4j.Node: void write(java.io.Writer)>($r2);

     label2:
        $r3 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r4 = virtualinvoke $r2.<java.io.StringWriter: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.DTD createDTD(java.lang.String)>($r4);

        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error writing DTD", $r6);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public javax.xml.stream.events.EndDocument createEndDocument(org.dom4j.Document)
    {
        org.dom4j.Document $r2;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory $r3;
        javax.xml.stream.events.EndDocument $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.Document;

        $r3 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r1 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EndDocument createEndDocument()>();

        return $r1;
    }

    public javax.xml.stream.events.EndElement createEndElement(org.dom4j.Element)
    {
        java.util.Iterator $r6;
        org.dom4j.io.STAXEventWriter r0;
        java.util.List $r5;
        org.dom4j.io.STAXEventWriter$NamespaceIterator $r1;
        org.dom4j.Element $r2;
        org.dom4j.QName $r3;
        javax.xml.stream.events.EndElement $r8;
        javax.xml.namespace.QName $r4;
        javax.xml.stream.XMLEventFactory $r7;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.Element;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r4 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.namespace.QName createQName(org.dom4j.QName)>($r3);

        $r1 = new org.dom4j.io.STAXEventWriter$NamespaceIterator;

        $r5 = interfaceinvoke $r2.<org.dom4j.Element: java.util.List declaredNamespaces()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r1.<org.dom4j.io.STAXEventWriter$NamespaceIterator: void <init>(org.dom4j.io.STAXEventWriter,java.util.Iterator)>(r0, $r6);

        $r7 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r8 = virtualinvoke $r7.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EndElement createEndElement(javax.xml.namespace.QName,java.util.Iterator)>($r4, $r1);

        return $r8;
    }

    public javax.xml.stream.events.Namespace createNamespace(org.dom4j.Namespace)
    {
        javax.xml.stream.events.Namespace $r5;
        org.dom4j.Namespace $r2;
        org.dom4j.io.STAXEventWriter r0;
        java.lang.String $r3, $r4;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.Namespace;

        $r3 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $r4 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getURI()>();

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r5 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Namespace createNamespace(java.lang.String,java.lang.String)>($r3, $r4);

        return $r5;
    }

    public javax.xml.stream.events.ProcessingInstruction createProcessingInstruction(org.dom4j.ProcessingInstruction)
    {
        javax.xml.stream.events.ProcessingInstruction $r5;
        org.dom4j.io.STAXEventWriter r0;
        java.lang.String $r3, $r4;
        javax.xml.stream.XMLEventFactory $r1;
        org.dom4j.ProcessingInstruction $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.ProcessingInstruction;

        $r3 = interfaceinvoke $r2.<org.dom4j.ProcessingInstruction: java.lang.String getTarget()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.ProcessingInstruction: java.lang.String getText()>();

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r5 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>($r3, $r4);

        return $r5;
    }

    public javax.xml.namespace.QName createQName(org.dom4j.QName)
    {
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.QName $r2;
        javax.xml.namespace.QName $r1;
        java.lang.String $r3, $r4, $r5;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.QName;

        $r1 = new javax.xml.namespace.QName;

        $r3 = virtualinvoke $r2.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $r4 = virtualinvoke $r2.<org.dom4j.QName: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<org.dom4j.QName: java.lang.String getNamespacePrefix()>();

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r5);

        return $r1;
    }

    public javax.xml.stream.events.StartDocument createStartDocument(org.dom4j.Document)
    {
        org.dom4j.Document $r2;
        javax.xml.stream.events.StartDocument $r4;
        org.dom4j.io.STAXEventWriter r0;
        java.lang.String $r3;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.Document;

        $r3 = interfaceinvoke $r2.<org.dom4j.Document: java.lang.String getXMLEncoding()>();

        if $r3 == null goto label1;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r4 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartDocument createStartDocument(java.lang.String)>($r3);

        return $r4;

     label1:
        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r4 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartDocument createStartDocument()>();

        return $r4;
    }

    public javax.xml.stream.events.StartElement createStartElement(org.dom4j.Element)
    {
        java.util.Iterator $r5;
        org.dom4j.io.STAXEventWriter r0;
        java.util.List $r7;
        org.dom4j.io.STAXEventWriter$NamespaceIterator $r6;
        org.dom4j.io.STAXEventWriter$AttributeIterator $r1;
        org.dom4j.Element $r2;
        org.dom4j.QName $r3;
        javax.xml.namespace.QName $r4;
        javax.xml.stream.events.StartElement $r9;
        javax.xml.stream.XMLEventFactory $r8;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.Element;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r4 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.namespace.QName createQName(org.dom4j.QName)>($r3);

        $r1 = new org.dom4j.io.STAXEventWriter$AttributeIterator;

        $r5 = interfaceinvoke $r2.<org.dom4j.Element: java.util.Iterator attributeIterator()>();

        specialinvoke $r1.<org.dom4j.io.STAXEventWriter$AttributeIterator: void <init>(org.dom4j.io.STAXEventWriter,java.util.Iterator)>(r0, $r5);

        $r6 = new org.dom4j.io.STAXEventWriter$NamespaceIterator;

        $r7 = interfaceinvoke $r2.<org.dom4j.Element: java.util.List declaredNamespaces()>();

        $r5 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r6.<org.dom4j.io.STAXEventWriter$NamespaceIterator: void <init>(org.dom4j.io.STAXEventWriter,java.util.Iterator)>(r0, $r5);

        $r8 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r9 = virtualinvoke $r8.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartElement createStartElement(javax.xml.namespace.QName,java.util.Iterator,java.util.Iterator)>($r4, $r1, $r6);

        return $r9;
    }

    public javax.xml.stream.util.XMLEventConsumer getConsumer()
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.util.XMLEventConsumer r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        return r1;
    }

    public javax.xml.stream.XMLEventFactory getEventFactory()
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        return r1;
    }

    public void setConsumer(javax.xml.stream.util.XMLEventConsumer)
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.util.XMLEventConsumer $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 := @parameter0: javax.xml.stream.util.XMLEventConsumer;

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer> = $r1;

        return;
    }

    public void setEventFactory(javax.xml.stream.XMLEventFactory)
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 := @parameter0: javax.xml.stream.XMLEventFactory;

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = $r1;

        return;
    }

    public void writeAttribute(org.dom4j.Attribute)
    {
        javax.xml.stream.events.Attribute $r2;
        javax.xml.stream.events.XMLEvent $r4;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.util.XMLEventConsumer $r1;
        org.dom4j.Attribute $r3;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r3 := @parameter0: org.dom4j.Attribute;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r2 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.Attribute createAttribute(org.dom4j.Attribute)>($r3);

        $r4 = (javax.xml.stream.events.XMLEvent) $r2;

        interfaceinvoke $r1.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeCDATA(org.dom4j.CDATA)
    {
        javax.xml.stream.events.XMLEvent $r4;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.Characters $r2;
        org.dom4j.CDATA $r3;
        javax.xml.stream.util.XMLEventConsumer $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r3 := @parameter0: org.dom4j.CDATA;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r2 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.Characters createCharacters(org.dom4j.CDATA)>($r3);

        $r4 = (javax.xml.stream.events.XMLEvent) $r2;

        interfaceinvoke $r1.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeChildNodes(org.dom4j.Branch)
    {
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.Branch $r1;
        org.dom4j.Node $r2;
        int $i0, $i1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 := @parameter0: org.dom4j.Branch;

        $i0 = interfaceinvoke $r1.<org.dom4j.Branch: int nodeCount()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return;

     label2:
        $r2 = interfaceinvoke $r1.<org.dom4j.Branch: org.dom4j.Node node(int)>($i1);

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeNode(org.dom4j.Node)>($r2);

        $i1 = $i1 + 1;

        goto label1;
    }

    public void writeComment(org.dom4j.Comment)
    {
        javax.xml.stream.events.XMLEvent $r4;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.Comment $r2;
        org.dom4j.Comment $r3;
        javax.xml.stream.util.XMLEventConsumer $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r3 := @parameter0: org.dom4j.Comment;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r2 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.Comment createComment(org.dom4j.Comment)>($r3);

        $r4 = (javax.xml.stream.events.XMLEvent) $r2;

        interfaceinvoke $r1.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeDocument(org.dom4j.Document)
    {
        org.dom4j.Document $r1;
        javax.xml.stream.events.XMLEvent $r5;
        javax.xml.stream.events.StartDocument $r3;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.util.XMLEventConsumer $r2;
        javax.xml.stream.events.EndDocument $r4;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 := @parameter0: org.dom4j.Document;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.StartDocument createStartDocument(org.dom4j.Document)>($r1);

        $r5 = (javax.xml.stream.events.XMLEvent) $r3;

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r5);

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeChildNodes(org.dom4j.Branch)>($r1);

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r4 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.EndDocument createEndDocument(org.dom4j.Document)>($r1);

        $r5 = (javax.xml.stream.events.XMLEvent) $r4;

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r5);

        return;
    }

    public void writeDocumentType(org.dom4j.DocumentType)
    {
        org.dom4j.DocumentType $r3;
        javax.xml.stream.events.XMLEvent $r4;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.DTD $r2;
        javax.xml.stream.util.XMLEventConsumer $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r3 := @parameter0: org.dom4j.DocumentType;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r2 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.DTD createDTD(org.dom4j.DocumentType)>($r3);

        $r4 = (javax.xml.stream.events.XMLEvent) $r2;

        interfaceinvoke $r1.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeElement(org.dom4j.Element)
    {
        javax.xml.stream.events.XMLEvent $r5;
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.Element $r1;
        javax.xml.stream.events.EndElement $r4;
        javax.xml.stream.events.StartElement $r3;
        javax.xml.stream.util.XMLEventConsumer $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.StartElement createStartElement(org.dom4j.Element)>($r1);

        $r5 = (javax.xml.stream.events.XMLEvent) $r3;

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r5);

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeChildNodes(org.dom4j.Branch)>($r1);

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r4 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.EndElement createEndElement(org.dom4j.Element)>($r1);

        $r5 = (javax.xml.stream.events.XMLEvent) $r4;

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r5);

        return;
    }

    public void writeEntity(org.dom4j.Entity)
    {
        org.dom4j.Entity $r3;
        javax.xml.stream.events.XMLEvent $r4;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.EntityReference $r2;
        javax.xml.stream.util.XMLEventConsumer $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r3 := @parameter0: org.dom4j.Entity;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r2 = specialinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.EntityReference createEntityReference(org.dom4j.Entity)>($r3);

        $r4 = (javax.xml.stream.events.XMLEvent) $r2;

        interfaceinvoke $r1.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeNamespace(org.dom4j.Namespace)
    {
        javax.xml.stream.events.Namespace $r2;
        javax.xml.stream.events.XMLEvent $r4;
        org.dom4j.Namespace $r3;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.util.XMLEventConsumer $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r3 := @parameter0: org.dom4j.Namespace;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r2 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.Namespace createNamespace(org.dom4j.Namespace)>($r3);

        $r4 = (javax.xml.stream.events.XMLEvent) $r2;

        interfaceinvoke $r1.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeNode(org.dom4j.Node)
    {
        java.lang.Throwable $r16;
        org.dom4j.Document $r6;
        org.dom4j.Node $r2;
        org.dom4j.Entity $r9;
        short $s0;
        org.dom4j.DocumentType $r5;
        org.dom4j.CDATA $r10;
        org.dom4j.Comment $r7;
        javax.xml.stream.XMLStreamException $r15;
        int $i1;
        java.lang.String $r3;
        org.dom4j.ProcessingInstruction $r8;
        org.dom4j.Namespace $r4;
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.Text $r11;
        java.lang.StringBuilder $r1, $r14;
        org.dom4j.Element $r13;
        org.dom4j.Attribute $r12;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r2 := @parameter0: org.dom4j.Node;

        $s0 = interfaceinvoke $r2.<org.dom4j.Node: short getNodeType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 1: goto label11;
            case 2: goto label10;
            case 3: goto label09;
            case 4: goto label08;
            case 5: goto label07;
            case 6: goto label01;
            case 7: goto label06;
            case 8: goto label05;
            case 9: goto label04;
            case 10: goto label03;
            case 11: goto label01;
            case 12: goto label01;
            case 13: goto label02;
            default: goto label01;
        };

     label01:
        $r15 = new javax.xml.stream.XMLStreamException;

        $r14 = new java.lang.StringBuilder;

        $r1 = $r14;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unsupported DOM4J Node: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r3);

        $r16 = (java.lang.Throwable) $r15;

        throw $r16;

     label02:
        $r4 = (org.dom4j.Namespace) $r2;

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeNamespace(org.dom4j.Namespace)>($r4);

        return;

     label03:
        $r5 = (org.dom4j.DocumentType) $r2;

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeDocumentType(org.dom4j.DocumentType)>($r5);

        return;

     label04:
        $r6 = (org.dom4j.Document) $r2;

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeDocument(org.dom4j.Document)>($r6);

        return;

     label05:
        $r7 = (org.dom4j.Comment) $r2;

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeComment(org.dom4j.Comment)>($r7);

        return;

     label06:
        $r8 = (org.dom4j.ProcessingInstruction) $r2;

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeProcessingInstruction(org.dom4j.ProcessingInstruction)>($r8);

        return;

     label07:
        $r9 = (org.dom4j.Entity) $r2;

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeEntity(org.dom4j.Entity)>($r9);

        return;

     label08:
        $r10 = (org.dom4j.CDATA) $r2;

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeCDATA(org.dom4j.CDATA)>($r10);

        return;

     label09:
        $r11 = (org.dom4j.Text) $r2;

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeText(org.dom4j.Text)>($r11);

        return;

     label10:
        $r12 = (org.dom4j.Attribute) $r2;

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeAttribute(org.dom4j.Attribute)>($r12);

        return;

     label11:
        $r13 = (org.dom4j.Element) $r2;

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeElement(org.dom4j.Element)>($r13);

        return;
    }

    public void writeProcessingInstruction(org.dom4j.ProcessingInstruction)
    {
        javax.xml.stream.events.ProcessingInstruction $r2;
        javax.xml.stream.events.XMLEvent $r4;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.util.XMLEventConsumer $r1;
        org.dom4j.ProcessingInstruction $r3;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r3 := @parameter0: org.dom4j.ProcessingInstruction;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r2 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.ProcessingInstruction createProcessingInstruction(org.dom4j.ProcessingInstruction)>($r3);

        $r4 = (javax.xml.stream.events.XMLEvent) $r2;

        interfaceinvoke $r1.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeText(org.dom4j.Text)
    {
        javax.xml.stream.events.XMLEvent $r4;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.Characters $r2;
        org.dom4j.Text $r3;
        javax.xml.stream.util.XMLEventConsumer $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r3 := @parameter0: org.dom4j.Text;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r2 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.Characters createCharacters(org.dom4j.Text)>($r3);

        $r4 = (javax.xml.stream.events.XMLEvent) $r2;

        interfaceinvoke $r1.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }
}
