public final class org.codehaus.jackson.map.deser.Creator$StringBased extends java.lang.Object
{
    public final java.lang.reflect.Constructor _ctor;
    public final java.lang.reflect.Method _factoryMethod;
    public final java.lang.Class _valueClass;

    public void <init>(java.lang.Class, org.codehaus.jackson.map.introspect.AnnotatedConstructor, org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        org.codehaus.jackson.map.deser.Creator$StringBased r0;
        java.lang.Class $r2;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r3;
        java.lang.reflect.Method $r4;
        java.lang.reflect.Constructor $r5;

        r0 := @this: org.codehaus.jackson.map.deser.Creator$StringBased;

        $r2 := @parameter0: java.lang.Class;

        $r3 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedConstructor;

        $r1 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.deser.Creator$StringBased: java.lang.Class _valueClass> = $r2;

        $r4 = null;

        if $r3 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.reflect.Constructor getAnnotated()>();

     label2:
        r0.<org.codehaus.jackson.map.deser.Creator$StringBased: java.lang.reflect.Constructor _ctor> = $r5;

        if $r1 != null goto label3;

        goto label4;

     label3:
        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

     label4:
        r0.<org.codehaus.jackson.map.deser.Creator$StringBased: java.lang.reflect.Method _factoryMethod> = $r4;

        return;
    }

    public java.lang.Object construct(java.lang.String)
    {
        java.lang.Object[] $r4;
        java.lang.reflect.Constructor $r3;
        java.lang.Exception $r7;
        java.lang.NullPointerException r8;
        org.codehaus.jackson.map.deser.Creator$StringBased r0;
        java.lang.Class $r1;
        java.lang.Object $r5;
        java.lang.String $r2;
        java.lang.reflect.Method $r6;

        r0 := @this: org.codehaus.jackson.map.deser.Creator$StringBased;

        $r2 := @parameter0: java.lang.String;

     label01:
        $r3 = r0.<org.codehaus.jackson.map.deser.Creator$StringBased: java.lang.reflect.Constructor _ctor>;

     label02:
        if $r3 == null goto label07;

     label03:
        $r3 = r0.<org.codehaus.jackson.map.deser.Creator$StringBased: java.lang.reflect.Constructor _ctor>;

     label04:
        $r4 = newarray (java.lang.Object)[1];

     label05:
        $r4[0] = $r2;

        $r5 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

     label06:
        return $r5;

     label07:
        $r6 = r0.<org.codehaus.jackson.map.deser.Creator$StringBased: java.lang.reflect.Method _factoryMethod>;

     label08:
        if $r6 == null goto label13;

     label09:
        $r6 = r0.<org.codehaus.jackson.map.deser.Creator$StringBased: java.lang.reflect.Method _factoryMethod>;

        $r1 = r0.<org.codehaus.jackson.map.deser.Creator$StringBased: java.lang.Class _valueClass>;

     label10:
        $r4 = newarray (java.lang.Object)[1];

     label11:
        $r4[0] = $r2;

        $r5 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r4);

     label12:
        return $r5;

     label13:
        return null;

     label14:
        $r7 := @caughtexception;

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void unwrapAndThrowAsIAE(java.lang.Throwable)>($r7);

        r8 = new java.lang.NullPointerException;

        specialinvoke r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r8;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Exception from label03 to label04 with label14;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Exception from label07 to label08 with label14;
        catch java.lang.Exception from label09 to label10 with label14;
        catch java.lang.Exception from label11 to label12 with label14;
    }
}
