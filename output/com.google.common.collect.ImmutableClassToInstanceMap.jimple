public final class com.google.common.collect.ImmutableClassToInstanceMap extends com.google.common.collect.ForwardingMap implements com.google.common.collect.ClassToInstanceMap, java.io.Serializable
{
    public static final com.google.common.collect.ImmutableClassToInstanceMap EMPTY;
    public final com.google.common.collect.ImmutableMap delegate;

    static void <clinit>()
    {
        com.google.common.collect.ImmutableClassToInstanceMap $r0;
        com.google.common.collect.ImmutableMap $r1;

        $r0 = new com.google.common.collect.ImmutableClassToInstanceMap;

        $r1 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        specialinvoke $r0.<com.google.common.collect.ImmutableClassToInstanceMap: void <init>(com.google.common.collect.ImmutableMap)>($r1);

        <com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableClassToInstanceMap EMPTY> = $r0;

        return;
    }

    public void <init>(com.google.common.collect.ImmutableMap)
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        $r1 := @parameter0: com.google.common.collect.ImmutableMap;

        specialinvoke r0.<com.google.common.collect.ForwardingMap: void <init>()>();

        r0.<com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableMap delegate> = $r1;

        return;
    }

    public void <init>(com.google.common.collect.ImmutableMap, com.google.common.collect.ImmutableClassToInstanceMap$1)
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableClassToInstanceMap$1 $r2;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        $r1 := @parameter0: com.google.common.collect.ImmutableMap;

        $r2 := @parameter1: com.google.common.collect.ImmutableClassToInstanceMap$1;

        specialinvoke r0.<com.google.common.collect.ImmutableClassToInstanceMap: void <init>(com.google.common.collect.ImmutableMap)>($r1);

        return;
    }

    public static com.google.common.collect.ImmutableClassToInstanceMap$Builder builder()
    {
        com.google.common.collect.ImmutableClassToInstanceMap$Builder $r0;

        $r0 = new com.google.common.collect.ImmutableClassToInstanceMap$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.ImmutableClassToInstanceMap copyOf(java.util.Map)
    {
        java.util.Map $r0;
        com.google.common.collect.ImmutableClassToInstanceMap$Builder $r2;
        com.google.common.collect.ImmutableClassToInstanceMap $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.Map;

        $z0 = $r0 instanceof com.google.common.collect.ImmutableClassToInstanceMap;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.collect.ImmutableClassToInstanceMap) $r0;

        return $r1;

     label1:
        $r2 = new com.google.common.collect.ImmutableClassToInstanceMap$Builder;

        specialinvoke $r2.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: void <init>()>();

        $r2 = virtualinvoke $r2.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder putAll(java.util.Map)>($r0);

        $r1 = virtualinvoke $r2.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap build()>();

        return $r1;
    }

    public static com.google.common.collect.ImmutableClassToInstanceMap of()
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;

        r0 = <com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableClassToInstanceMap EMPTY>;

        return r0;
    }

    public static com.google.common.collect.ImmutableClassToInstanceMap of(java.lang.Class, java.lang.Object)
    {
        com.google.common.collect.ImmutableMap $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        com.google.common.collect.ImmutableClassToInstanceMap $r3;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.Object;

        $r0 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r3 = new com.google.common.collect.ImmutableClassToInstanceMap;

        specialinvoke $r3.<com.google.common.collect.ImmutableClassToInstanceMap: void <init>(com.google.common.collect.ImmutableMap)>($r0);

        return $r3;
    }

    public volatile java.lang.Object delegate()
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableClassToInstanceMap: java.util.Map delegate()>();

        return $r1;
    }

    public java.util.Map delegate()
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;
        com.google.common.collect.ImmutableMap r1;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        r1 = r0.<com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableMap delegate>;

        return r1;
    }

    public java.lang.Object getInstance(java.lang.Class)
    {
        com.google.common.collect.ImmutableMap $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        com.google.common.collect.ImmutableClassToInstanceMap r0;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        $r3 := @parameter0: java.lang.Class;

        $r1 = r0.<com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableMap delegate>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r3);

        return $r2;
    }

    public java.lang.Object putInstance(java.lang.Class, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r3;
        java.lang.Object $r1;
        java.lang.Class $r2;
        com.google.common.collect.ImmutableClassToInstanceMap r0;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        $r2 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.Object readResolve()
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        $z0 = virtualinvoke r0.<com.google.common.collect.ForwardingMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r0 = staticinvoke <com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableClassToInstanceMap of()>();

     label1:
        return r0;
    }
}
