public final class com.google.common.collect.CollectSpliterators extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.collect.CollectSpliterators r0;

        r0 := @this: com.google.common.collect.CollectSpliterators;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Spliterator filter(java.util.Spliterator, java.util.function.Predicate)
    {
        com.google.common.collect.CollectSpliterators$1Splitr $r2;
        java.util.Spliterator $r0;
        java.util.function.Predicate $r1;

        $r0 := @parameter0: java.util.Spliterator;

        $r1 := @parameter1: java.util.function.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.CollectSpliterators$1Splitr;

        specialinvoke $r2.<com.google.common.collect.CollectSpliterators$1Splitr: void <init>(java.util.Spliterator,java.util.function.Predicate)>($r0, $r1);

        return $r2;
    }

    public static java.util.Spliterator flatMap(java.util.Spliterator, java.util.function.Function, int, long)
    {
        long $l1;
        java.util.function.Function $r1;
        com.google.common.collect.CollectSpliterators$1FlatMapSpliterator $r2;
        int $i0, $i2;
        java.util.Spliterator $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.Spliterator;

        $r1 := @parameter1: java.util.function.Function;

        $i0 := @parameter2: int;

        $l1 := @parameter3: long;

        $i2 = $i0 & 16384;

        $z0 = 1;

        if $i2 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "flatMap does not support SUBSIZED characteristic");

        $i2 = $i0 & 4;

        if $i2 != 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "flatMap does not support SORTED characteristic");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.CollectSpliterators$1FlatMapSpliterator;

        specialinvoke $r2.<com.google.common.collect.CollectSpliterators$1FlatMapSpliterator: void <init>(java.util.Spliterator,java.util.Spliterator,int,long,java.util.function.Function)>(null, $r0, $i0, $l1, $r1);

        return $r2;
    }

    public static java.util.Spliterator indexed(int, int, java.util.function.IntFunction)
    {
        int $i0, $i1;
        java.util.Spliterator $r1;
        java.util.function.IntFunction $r0;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.util.function.IntFunction;

        $r1 = staticinvoke <com.google.common.collect.CollectSpliterators: java.util.Spliterator indexed(int,int,java.util.function.IntFunction,java.util.Comparator)>($i1, $i0, $r0, null);

        return $r1;
    }

    public static java.util.Spliterator indexed(int, int, java.util.function.IntFunction, java.util.Comparator)
    {
        java.util.stream.IntStream $r3;
        com.google.common.collect.CollectSpliterators$1WithCharacteristics $r2;
        java.util.Spliterator$OfInt $r4;
        int $i0, $i1, $i2;
        java.util.Comparator $r1;
        java.util.function.IntFunction $r0;
        boolean $z0;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.util.function.IntFunction;

        $r1 := @parameter3: java.util.Comparator;

        if $r1 == null goto label3;

        $i2 = $i0 & 4;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

     label3:
        $r2 = new com.google.common.collect.CollectSpliterators$1WithCharacteristics;

        $r3 = staticinvoke <g.a.b.c: java.util.stream.IntStream a(int,int)>(0, $i1);

        $r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.Spliterator$OfInt spliterator()>();

        specialinvoke $r2.<com.google.common.collect.CollectSpliterators$1WithCharacteristics: void <init>(java.util.Spliterator$OfInt,java.util.function.IntFunction,int,java.util.Comparator)>($r4, $r0, $i0, $r1);

        return $r2;
    }

    public static java.util.Spliterator map(java.util.Spliterator, java.util.function.Function)
    {
        com.google.common.collect.CollectSpliterators$1 $r2;
        java.util.Spliterator $r0;
        java.util.function.Function $r1;

        $r0 := @parameter0: java.util.Spliterator;

        $r1 := @parameter1: java.util.function.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.CollectSpliterators$1;

        specialinvoke $r2.<com.google.common.collect.CollectSpliterators$1: void <init>(java.util.Spliterator,java.util.function.Function)>($r0, $r1);

        return $r2;
    }
}
