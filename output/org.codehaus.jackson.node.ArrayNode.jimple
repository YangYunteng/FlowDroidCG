public final class org.codehaus.jackson.node.ArrayNode extends org.codehaus.jackson.node.ContainerNode
{
    public java.util.ArrayList _children;

    public void <init>(org.codehaus.jackson.node.JsonNodeFactory)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.JsonNodeFactory $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: org.codehaus.jackson.node.JsonNodeFactory;

        specialinvoke r0.<org.codehaus.jackson.node.ContainerNode: void <init>(org.codehaus.jackson.node.JsonNodeFactory)>($r1);

        return;
    }

    private void _add(org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.JsonNode $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: org.codehaus.jackson.JsonNode;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children> = $r2;

     label1:
        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }

    private void _insert(int, org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0, $i1;
        org.codehaus.jackson.JsonNode $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i1 := @parameter0: int;

        $r1 := @parameter1: org.codehaus.jackson.JsonNode;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children> = $r2;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;

     label1:
        if $i1 >= 0 goto label2;

        virtualinvoke $r2.<java.util.ArrayList: void add(int,java.lang.Object)>(0, $r1);

        return;

     label2:
        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 < $i0 goto label3;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;

     label3:
        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke $r2.<java.util.ArrayList: void add(int,java.lang.Object)>($i1, $r1);

        return;
    }

    private boolean _sameChildren(java.util.ArrayList)
    {
        org.codehaus.jackson.JsonNode $r4;
        java.util.ArrayList $r1, $r2;
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: java.util.ArrayList;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: int size()>();

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (org.codehaus.jackson.JsonNode) $r3;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.JsonNode: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return 1;
    }

    public org.codehaus.jackson.JsonNode _set(int, org.codehaus.jackson.JsonNode)
    {
        java.lang.IndexOutOfBoundsException $r4;
        org.codehaus.jackson.JsonNode $r1;
        java.util.ArrayList $r2;
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.codehaus.jackson.JsonNode;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 == null goto label1;

        if $i0 < 0 goto label1;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label1;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i0, $r1);

        $r1 = (org.codehaus.jackson.JsonNode) $r3;

        return $r1;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal index ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", array size ");

        $i0 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: int size()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r4;
    }

    public void add(double)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.NumericNode $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NumericNode numberNode(double)>($d0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(float)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        float $f0;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NumericNode numberNode(float)>($f0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(int)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NumericNode numberNode(int)>($i0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(long)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.NumericNode $r1;
        long $l0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NumericNode numberNode(long)>($l0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.TextNode $r1;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r2 := @parameter0: java.lang.String;

        if $r2 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        return;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.TextNode textNode(java.lang.String)>($r2);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(java.math.BigDecimal)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.math.BigDecimal $r2;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r2 := @parameter0: java.math.BigDecimal;

        if $r2 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        return;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NumericNode numberNode(java.math.BigDecimal)>($r2);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: org.codehaus.jackson.JsonNode;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NullNode nullNode()>();

     label1:
        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(boolean)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.BooleanNode $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>($z0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public void add(byte[])
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.BinaryNode $r1;
        byte[] $r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r2 := @parameter0: byte[];

        if $r2 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        return;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.BinaryNode binaryNode(byte[])>($r2);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public org.codehaus.jackson.JsonNode addAll(java.util.Collection)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.Collection $r1;
        int $i0;
        java.util.ArrayList $r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        if $i0 <= 0 goto label2;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

        r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children> = $r2;

        return r0;

     label1:
        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r1);

     label2:
        return r0;
    }

    public org.codehaus.jackson.JsonNode addAll(org.codehaus.jackson.node.ArrayNode)
    {
        org.codehaus.jackson.node.ArrayNode r0, $r1;
        int $i0;
        java.util.ArrayList $r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: org.codehaus.jackson.node.ArrayNode;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.node.ArrayNode: int size()>();

        if $i0 <= 0 goto label2;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 != null goto label1;

        $r2 = new java.util.ArrayList;

        $i0 = $i0 + 2;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children> = $r2;

     label1:
        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        virtualinvoke $r1.<org.codehaus.jackson.node.ArrayNode: void addContentsTo(java.util.List)>($r2);

     label2:
        return r0;
    }

    public org.codehaus.jackson.node.ArrayNode addArray()
    {
        org.codehaus.jackson.node.ArrayNode r0, $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.ArrayNode arrayNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return $r1;
    }

    public void addContentsTo(java.util.List)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.List $r1;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        org.codehaus.jackson.JsonNode $r5;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: java.util.List;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.codehaus.jackson.JsonNode) $r4;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    public void addNull()
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.NullNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NullNode nullNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public org.codehaus.jackson.node.ObjectNode addObject()
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.ObjectNode objectNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return $r1;
    }

    public void addPOJO(java.lang.Object)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.lang.Object $r2;
        org.codehaus.jackson.node.POJONode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r2 := @parameter0: java.lang.Object;

        if $r2 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: void addNull()>();

        return;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.POJONode POJONode(java.lang.Object)>($r2);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _add(org.codehaus.jackson.JsonNode)>($r1);

        return;
    }

    public org.codehaus.jackson.JsonToken asToken()
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.JsonToken r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.node.ArrayNode r0, $r3;
        int $i0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.util.ArrayList $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == class "Lorg/codehaus/jackson/node/ArrayNode;" goto label3;

        return 0;

     label3:
        $r3 = (org.codehaus.jackson.node.ArrayNode) $r1;

        $r4 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r4 == null goto label5;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label4;

        goto label5;

     label4:
        $r4 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $z0 = specialinvoke $r3.<org.codehaus.jackson.node.ArrayNode: boolean _sameChildren(java.util.ArrayList)>($r4);

        return $z0;

     label5:
        $i0 = virtualinvoke $r3.<org.codehaus.jackson.node.ArrayNode: int size()>();

        if $i0 != 0 goto label6;

        return 1;

     label6:
        return 0;
    }

    public volatile org.codehaus.jackson.JsonNode findParent(java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.lang.String $r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.ObjectNode findParent(java.lang.String)>($r2);

        return $r1;
    }

    public org.codehaus.jackson.node.ObjectNode findParent(java.lang.String)
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.JsonNode $r5;
        java.util.ArrayList $r2;
        org.codehaus.jackson.node.ArrayNode r0;
        java.lang.Object $r4;
        java.lang.String $r1;
        boolean $z0;
        org.codehaus.jackson.node.ObjectNode $r6;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.codehaus.jackson.JsonNode) $r4;

        $r5 = virtualinvoke $r5.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode findParent(java.lang.String)>($r1);

        if $r5 == null goto label1;

        $r6 = (org.codehaus.jackson.node.ObjectNode) $r5;

        return $r6;

     label2:
        return null;
    }

    public java.util.List findParents(java.lang.String, java.util.List)
    {
        java.util.Iterator $r4;
        org.codehaus.jackson.JsonNode $r6;
        java.util.ArrayList $r3;
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.List $r2;
        java.lang.Object $r5;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.List;

        $r3 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.codehaus.jackson.JsonNode) $r5;

        $r2 = virtualinvoke $r6.<org.codehaus.jackson.JsonNode: java.util.List findParents(java.lang.String,java.util.List)>($r1, $r2);

        goto label1;

     label2:
        return $r2;
    }

    public org.codehaus.jackson.JsonNode findValue(java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.lang.String $r1;
        org.codehaus.jackson.JsonNode $r5;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.codehaus.jackson.JsonNode) $r4;

        $r5 = virtualinvoke $r5.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode findValue(java.lang.String)>($r1);

        if $r5 == null goto label1;

        return $r5;

     label2:
        return null;
    }

    public java.util.List findValues(java.lang.String, java.util.List)
    {
        java.util.Iterator $r4;
        org.codehaus.jackson.JsonNode $r6;
        java.util.ArrayList $r3;
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.List $r2;
        java.lang.Object $r5;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.List;

        $r3 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.codehaus.jackson.JsonNode) $r5;

        $r2 = virtualinvoke $r6.<org.codehaus.jackson.JsonNode: java.util.List findValues(java.lang.String,java.util.List)>($r1, $r2);

        goto label1;

     label2:
        return $r2;
    }

    public java.util.List findValuesAsText(java.lang.String, java.util.List)
    {
        java.util.Iterator $r4;
        org.codehaus.jackson.JsonNode $r6;
        java.util.ArrayList $r3;
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.List $r2;
        java.lang.Object $r5;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.List;

        $r3 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.codehaus.jackson.JsonNode) $r5;

        $r2 = virtualinvoke $r6.<org.codehaus.jackson.JsonNode: java.util.List findValuesAsText(java.lang.String,java.util.List)>($r1, $r2);

        goto label1;

     label2:
        return $r2;
    }

    public org.codehaus.jackson.JsonNode get(int)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0, $i1;
        java.lang.Object $r2;
        org.codehaus.jackson.JsonNode $r3;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label1;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label1;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (org.codehaus.jackson.JsonNode) $r2;

        return $r3;

     label1:
        return null;
    }

    public org.codehaus.jackson.JsonNode get(java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.util.Iterator getElements()
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.util.Iterator $r3;
        org.codehaus.jackson.node.ContainerNode$NoNodesIterator $r2;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 != null goto label1;

        $r2 = staticinvoke <org.codehaus.jackson.node.ContainerNode$NoNodesIterator: org.codehaus.jackson.node.ContainerNode$NoNodesIterator instance()>();

        return $r2;

     label1:
        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

        return $r3;
    }

    public int hashCode()
    {
        java.util.Iterator $r2;
        org.codehaus.jackson.JsonNode $r4;
        java.util.ArrayList $r1;
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 != null goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.jackson.JsonNode) $r3;

        if $r4 == null goto label2;

        $i1 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        $i0 = $i0 ^ $i1;

        goto label2;

     label3:
        return $i0;
    }

    public void insert(int, double)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0;
        org.codehaus.jackson.node.NumericNode $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NumericNode numberNode(double)>($d0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return;
    }

    public void insert(int, float)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0;
        float $f0;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NumericNode numberNode(float)>($f0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return;
    }

    public void insert(int, int)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0, $i1;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NumericNode numberNode(int)>($i1);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return;
    }

    public void insert(int, long)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0;
        org.codehaus.jackson.node.NumericNode $r1;
        long $l1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NumericNode numberNode(long)>($l1);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return;
    }

    public void insert(int, java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0;
        org.codehaus.jackson.node.TextNode $r1;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $r2 := @parameter1: java.lang.String;

        if $r2 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>($i0);

        return;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.TextNode textNode(java.lang.String)>($r2);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return;
    }

    public void insert(int, java.math.BigDecimal)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.math.BigDecimal $r2;
        int $i0;
        org.codehaus.jackson.node.NumericNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $r2 := @parameter1: java.math.BigDecimal;

        if $r2 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>($i0);

        return;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NumericNode numberNode(java.math.BigDecimal)>($r2);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return;
    }

    public void insert(int, org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.codehaus.jackson.JsonNode;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NullNode nullNode()>();

     label1:
        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return;
    }

    public void insert(int, boolean)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.BooleanNode $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>($z0);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return;
    }

    public void insert(int, byte[])
    {
        org.codehaus.jackson.node.ArrayNode r0;
        byte[] $r2;
        int $i0;
        org.codehaus.jackson.node.BinaryNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $r2 := @parameter1: byte[];

        if $r2 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>($i0);

        return;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.BinaryNode binaryNode(byte[])>($r2);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return;
    }

    public org.codehaus.jackson.node.ArrayNode insertArray(int)
    {
        org.codehaus.jackson.node.ArrayNode r0, $r1;
        int $i0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.ArrayNode arrayNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return $r1;
    }

    public void insertNull(int)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0;
        org.codehaus.jackson.node.NullNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NullNode nullNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return;
    }

    public org.codehaus.jackson.node.ObjectNode insertObject(int)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.ObjectNode objectNode()>();

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return $r1;
    }

    public void insertPOJO(int, java.lang.Object)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.POJONode $r1;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $r2 := @parameter1: java.lang.Object;

        if $r2 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: void insertNull(int)>($i0);

        return;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.POJONode POJONode(java.lang.Object)>($r2);

        specialinvoke r0.<org.codehaus.jackson.node.ArrayNode: void _insert(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return;
    }

    public boolean isArray()
    {
        org.codehaus.jackson.node.ArrayNode r0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        return 1;
    }

    public org.codehaus.jackson.JsonNode path(int)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.node.MissingNode $r4;
        int $i0, $i1;
        java.lang.Object $r2;
        org.codehaus.jackson.JsonNode $r3;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label1;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label1;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (org.codehaus.jackson.JsonNode) $r2;

        return $r3;

     label1:
        $r4 = staticinvoke <org.codehaus.jackson.node.MissingNode: org.codehaus.jackson.node.MissingNode getInstance()>();

        return $r4;
    }

    public org.codehaus.jackson.JsonNode path(java.lang.String)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        java.lang.String $r2;
        org.codehaus.jackson.node.MissingNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r2 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.codehaus.jackson.node.MissingNode: org.codehaus.jackson.node.MissingNode getInstance()>();

        return $r1;
    }

    public org.codehaus.jackson.JsonNode remove(int)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0, $i1;
        java.lang.Object $r2;
        org.codehaus.jackson.JsonNode $r3;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 == null goto label1;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label1;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>($i0);

        $r3 = (org.codehaus.jackson.JsonNode) $r2;

        return $r3;

     label1:
        return null;
    }

    public org.codehaus.jackson.node.ArrayNode removeAll()
    {
        org.codehaus.jackson.node.ArrayNode r0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children> = null;

        return r0;
    }

    public volatile org.codehaus.jackson.node.ContainerNode removeAll()
    {
        org.codehaus.jackson.node.ArrayNode r0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        r0 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.node.ArrayNode removeAll()>();

        return r0;
    }

    public final void serialize(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        java.util.Iterator $r4;
        org.codehaus.jackson.node.BaseJsonNode $r6;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.util.ArrayList $r3;
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.JsonGenerator $r1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        $r3 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.codehaus.jackson.node.BaseJsonNode) $r5;

        virtualinvoke $r6.<org.codehaus.jackson.node.BaseJsonNode: void writeTo(org.codehaus.jackson.JsonGenerator)>($r1);

        goto label1;

     label2:
        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeEndArray()>();

        return;
    }

    public void serializeWithType(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        java.util.Iterator $r5;
        org.codehaus.jackson.node.BaseJsonNode $r7;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.util.ArrayList $r4;
        org.codehaus.jackson.node.ArrayNode r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.TypeSerializer $r2;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke $r2.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r0, $r1);

        $r4 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r4 == null goto label2;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.codehaus.jackson.node.BaseJsonNode) $r6;

        virtualinvoke $r7.<org.codehaus.jackson.node.BaseJsonNode: void writeTo(org.codehaus.jackson.JsonGenerator)>($r1);

        goto label1;

     label2:
        virtualinvoke $r2.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r0, $r1);

        return;
    }

    public org.codehaus.jackson.JsonNode set(int, org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.codehaus.jackson.JsonNode;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ContainerNode: org.codehaus.jackson.node.NullNode nullNode()>();

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: org.codehaus.jackson.JsonNode _set(int,org.codehaus.jackson.JsonNode)>($i0, $r1);

        return $r1;
    }

    public int size()
    {
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.JsonNode $r4;
        java.util.ArrayList $r2;
        org.codehaus.jackson.node.ArrayNode r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.Object $r3;
        java.lang.String $r5;

        r0 := @this: org.codehaus.jackson.node.ArrayNode;

        $r1 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.node.ArrayNode: int size()>();

        $i0 = $i0 << 4;

        $i0 = $i0 + 16;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        if $r2 == null goto label3;

        $i0 = 0;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label1:
        if $i0 >= $i1 goto label3;

        if $i0 <= 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r2 = r0.<org.codehaus.jackson.node.ArrayNode: java.util.ArrayList _children>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r4 = (org.codehaus.jackson.JsonNode) $r3;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.JsonNode: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i0 = $i0 + 1;

        goto label1;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
