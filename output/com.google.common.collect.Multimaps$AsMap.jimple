public final class com.google.common.collect.Multimaps$AsMap extends com.google.common.collect.Maps$ViewCachingAbstractMap
{
    public final com.google.common.collect.Multimap multimap;

    public void <init>(com.google.common.collect.Multimap)
    {
        com.google.common.collect.Multimaps$AsMap r0;
        com.google.common.collect.Multimap $r1;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r1 := @parameter0: com.google.common.collect.Multimap;

        specialinvoke r0.<com.google.common.collect.Maps$ViewCachingAbstractMap: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        r0.<com.google.common.collect.Multimaps$AsMap: com.google.common.collect.Multimap multimap> = $r1;

        return;
    }

    public static com.google.common.collect.Multimap access$200(com.google.common.collect.Multimaps$AsMap)
    {
        com.google.common.collect.Multimaps$AsMap $r0;
        com.google.common.collect.Multimap r1;

        $r0 := @parameter0: com.google.common.collect.Multimaps$AsMap;

        r1 = $r0.<com.google.common.collect.Multimaps$AsMap: com.google.common.collect.Multimap multimap>;

        return r1;
    }

    public void clear()
    {
        com.google.common.collect.Multimaps$AsMap r0;
        com.google.common.collect.Multimap $r1;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r1 = r0.<com.google.common.collect.Multimaps$AsMap: com.google.common.collect.Multimap multimap>;

        interfaceinvoke $r1.<com.google.common.collect.Multimap: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.google.common.collect.Multimaps$AsMap r0;
        java.lang.Object $r2;
        com.google.common.collect.Multimap $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.Multimaps$AsMap: com.google.common.collect.Multimap multimap>;

        $z0 = interfaceinvoke $r1.<com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public java.util.Set createEntrySet()
    {
        com.google.common.collect.Multimaps$AsMap r0;
        com.google.common.collect.Multimaps$AsMap$EntrySet $r1;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r1 = new com.google.common.collect.Multimaps$AsMap$EntrySet;

        specialinvoke $r1.<com.google.common.collect.Multimaps$AsMap$EntrySet: void <init>(com.google.common.collect.Multimaps$AsMap)>(r0);

        return $r1;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        com.google.common.collect.Multimaps$AsMap r0;
        java.lang.Object $r2;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.Multimaps$AsMap: java.util.Collection get(java.lang.Object)>($r2);

        return $r1;
    }

    public java.util.Collection get(java.lang.Object)
    {
        com.google.common.collect.Multimaps$AsMap r0;
        java.util.Collection $r3;
        java.lang.Object $r1;
        com.google.common.collect.Multimap $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.Multimaps$AsMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.common.collect.Multimaps$AsMap: com.google.common.collect.Multimap multimap>;

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>($r1);

        return $r3;

     label1:
        return null;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.Multimaps$AsMap r0;
        com.google.common.collect.Multimap $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r1 = r0.<com.google.common.collect.Multimaps$AsMap: com.google.common.collect.Multimap multimap>;

        $z0 = interfaceinvoke $r1.<com.google.common.collect.Multimap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        com.google.common.collect.Multimaps$AsMap r0;
        java.util.Set $r1;
        com.google.common.collect.Multimap $r2;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r2 = r0.<com.google.common.collect.Multimaps$AsMap: com.google.common.collect.Multimap multimap>;

        $r1 = interfaceinvoke $r2.<com.google.common.collect.Multimap: java.util.Set keySet()>();

        return $r1;
    }

    public volatile java.lang.Object remove(java.lang.Object)
    {
        com.google.common.collect.Multimaps$AsMap r0;
        java.lang.Object $r2;
        java.util.Collection $r1;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.collect.Multimaps$AsMap: java.util.Collection remove(java.lang.Object)>($r2);

        return $r1;
    }

    public java.util.Collection remove(java.lang.Object)
    {
        com.google.common.collect.Multimaps$AsMap r0;
        java.util.Collection $r3;
        java.lang.Object $r1;
        com.google.common.collect.Multimap $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.Multimaps$AsMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.common.collect.Multimaps$AsMap: com.google.common.collect.Multimap multimap>;

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Multimap: java.util.Collection removeAll(java.lang.Object)>($r1);

        return $r3;

     label1:
        return null;
    }

    public void removeValuesForKey(java.lang.Object)
    {
        com.google.common.collect.Multimaps$AsMap r0;
        java.util.Set $r2;
        java.lang.Object $r1;
        com.google.common.collect.Multimap $r3;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r1 := @parameter0: java.lang.Object;

        $r3 = r0.<com.google.common.collect.Multimaps$AsMap: com.google.common.collect.Multimap multimap>;

        $r2 = interfaceinvoke $r3.<com.google.common.collect.Multimap: java.util.Set keySet()>();

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        return;
    }

    public int size()
    {
        com.google.common.collect.Multimaps$AsMap r0;
        int $i0;
        java.util.Set $r2;
        com.google.common.collect.Multimap $r1;

        r0 := @this: com.google.common.collect.Multimaps$AsMap;

        $r1 = r0.<com.google.common.collect.Multimaps$AsMap: com.google.common.collect.Multimap multimap>;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multimap: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        return $i0;
    }
}
