public class com.google.common.graph.Traverser$GraphTraverser$3 extends java.lang.Object implements java.lang.Iterable
{
    public final com.google.common.graph.Traverser$GraphTraverser this$0;
    public final java.lang.Object val$startNode;

    public void <init>(com.google.common.graph.Traverser$GraphTraverser, java.lang.Object)
    {
        java.lang.Object $r2;
        com.google.common.graph.Traverser$GraphTraverser$3 r0;
        com.google.common.graph.Traverser$GraphTraverser $r1;

        r0 := @this: com.google.common.graph.Traverser$GraphTraverser$3;

        $r1 := @parameter0: com.google.common.graph.Traverser$GraphTraverser;

        $r2 := @parameter1: java.lang.Object;

        r0.<com.google.common.graph.Traverser$GraphTraverser$3: com.google.common.graph.Traverser$GraphTraverser this$0> = $r1;

        r0.<com.google.common.graph.Traverser$GraphTraverser$3: java.lang.Object val$startNode> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.graph.Traverser$GraphTraverser$3 r0;
        com.google.common.graph.Traverser$GraphTraverser $r2;
        java.lang.Object $r3;
        com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator $r1;
        com.google.common.graph.Traverser$Order $r4;

        r0 := @this: com.google.common.graph.Traverser$GraphTraverser$3;

        $r1 = new com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator;

        $r2 = r0.<com.google.common.graph.Traverser$GraphTraverser$3: com.google.common.graph.Traverser$GraphTraverser this$0>;

        $r3 = r0.<com.google.common.graph.Traverser$GraphTraverser$3: java.lang.Object val$startNode>;

        $r4 = <com.google.common.graph.Traverser$Order: com.google.common.graph.Traverser$Order POSTORDER>;

        specialinvoke $r1.<com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator: void <init>(com.google.common.graph.Traverser$GraphTraverser,java.lang.Object,com.google.common.graph.Traverser$Order)>($r2, $r3, $r4);

        return $r1;
    }
}
