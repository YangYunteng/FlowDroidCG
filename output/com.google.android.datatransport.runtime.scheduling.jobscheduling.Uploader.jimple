public class com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader extends java.lang.Object
{
    public static final java.lang.String LOG_TAG;
    public final com.google.android.datatransport.runtime.backends.BackendRegistry backendRegistry;
    public final com.google.android.datatransport.runtime.time.Clock clock;
    public final android.content.Context context;
    public final com.google.android.datatransport.runtime.scheduling.persistence.EventStore eventStore;
    public final java.util.concurrent.Executor executor;
    public final com.google.android.datatransport.runtime.synchronization.SynchronizationGuard guard;
    public final com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler workScheduler;

    public void <init>(android.content.Context, com.google.android.datatransport.runtime.backends.BackendRegistry, com.google.android.datatransport.runtime.scheduling.persistence.EventStore, com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler, java.util.concurrent.Executor, com.google.android.datatransport.runtime.synchronization.SynchronizationGuard, com.google.android.datatransport.runtime.time.Clock)
    {
        com.google.android.datatransport.runtime.time.Clock $r7;
        android.content.Context $r1;
        com.google.android.datatransport.runtime.synchronization.SynchronizationGuard $r6;
        java.util.concurrent.Executor $r5;
        com.google.android.datatransport.runtime.backends.BackendRegistry $r2;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader r0;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler $r4;
        com.google.android.datatransport.runtime.scheduling.persistence.EventStore $r3;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.google.android.datatransport.runtime.backends.BackendRegistry;

        $r3 := @parameter2: com.google.android.datatransport.runtime.scheduling.persistence.EventStore;

        $r4 := @parameter3: com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler;

        $r5 := @parameter4: java.util.concurrent.Executor;

        $r6 := @parameter5: com.google.android.datatransport.runtime.synchronization.SynchronizationGuard;

        $r7 := @parameter6: com.google.android.datatransport.runtime.time.Clock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: android.content.Context context> = $r1;

        r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.backends.BackendRegistry backendRegistry> = $r2;

        r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.persistence.EventStore eventStore> = $r3;

        r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler workScheduler> = $r4;

        r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: java.util.concurrent.Executor executor> = $r5;

        r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.synchronization.SynchronizationGuard guard> = $r6;

        r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.time.Clock clock> = $r7;

        return;
    }

    public static java.lang.Iterable lambda$logAndUpdateState$2(com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader, com.google.android.datatransport.runtime.TransportContext)
    {
        com.google.android.datatransport.runtime.TransportContext $r0;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader $r2;
        com.google.android.datatransport.runtime.scheduling.persistence.EventStore $r3;
        java.lang.Iterable $r1;

        $r2 := @parameter0: com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader;

        $r0 := @parameter1: com.google.android.datatransport.runtime.TransportContext;

        $r3 = $r2.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.persistence.EventStore eventStore>;

        $r1 = interfaceinvoke $r3.<com.google.android.datatransport.runtime.scheduling.persistence.EventStore: java.lang.Iterable loadBatch(com.google.android.datatransport.runtime.TransportContext)>($r0);

        return $r1;
    }

    public static java.lang.Object lambda$logAndUpdateState$3(com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader, com.google.android.datatransport.runtime.backends.BackendResponse, java.lang.Iterable, com.google.android.datatransport.runtime.TransportContext, int)
    {
        com.google.android.datatransport.runtime.time.Clock $r8;
        com.google.android.datatransport.runtime.backends.BackendResponse$Status $r1, $r5;
        com.google.android.datatransport.runtime.backends.BackendResponse $r3;
        long $l1, $l2;
        java.lang.Iterable $r4;
        com.google.android.datatransport.runtime.TransportContext $r0;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader $r2;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler $r7;
        int $i0;
        com.google.android.datatransport.runtime.scheduling.persistence.EventStore $r6;
        boolean $z0;

        $r2 := @parameter0: com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader;

        $r3 := @parameter1: com.google.android.datatransport.runtime.backends.BackendResponse;

        $r4 := @parameter2: java.lang.Iterable;

        $r0 := @parameter3: com.google.android.datatransport.runtime.TransportContext;

        $i0 := @parameter4: int;

        $r5 = virtualinvoke $r3.<com.google.android.datatransport.runtime.backends.BackendResponse: com.google.android.datatransport.runtime.backends.BackendResponse$Status getStatus()>();

        $r1 = <com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status TRANSIENT_ERROR>;

        if $r5 != $r1 goto label1;

        $r6 = $r2.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.persistence.EventStore eventStore>;

        interfaceinvoke $r6.<com.google.android.datatransport.runtime.scheduling.persistence.EventStore: void recordFailure(java.lang.Iterable)>($r4);

        $r7 = $r2.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler workScheduler>;

        $i0 = $i0 + 1;

        interfaceinvoke $r7.<com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler: void schedule(com.google.android.datatransport.runtime.TransportContext,int)>($r0, $i0);

        goto label3;

     label1:
        $r6 = $r2.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.persistence.EventStore eventStore>;

        interfaceinvoke $r6.<com.google.android.datatransport.runtime.scheduling.persistence.EventStore: void recordSuccess(java.lang.Iterable)>($r4);

        $r1 = virtualinvoke $r3.<com.google.android.datatransport.runtime.backends.BackendResponse: com.google.android.datatransport.runtime.backends.BackendResponse$Status getStatus()>();

        $r5 = <com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status OK>;

        if $r1 != $r5 goto label2;

        $r6 = $r2.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.persistence.EventStore eventStore>;

        $r8 = $r2.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.time.Clock clock>;

        $l1 = interfaceinvoke $r8.<com.google.android.datatransport.runtime.time.Clock: long getTime()>();

        $l2 = virtualinvoke $r3.<com.google.android.datatransport.runtime.backends.BackendResponse: long getNextRequestWaitMillis()>();

        $l1 = $l1 + $l2;

        interfaceinvoke $r6.<com.google.android.datatransport.runtime.scheduling.persistence.EventStore: void recordNextCallTime(com.google.android.datatransport.runtime.TransportContext,long)>($r0, $l1);

     label2:
        $r6 = $r2.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.persistence.EventStore eventStore>;

        $z0 = interfaceinvoke $r6.<com.google.android.datatransport.runtime.scheduling.persistence.EventStore: boolean hasPendingEventsFor(com.google.android.datatransport.runtime.TransportContext)>($r0);

        if $z0 == 0 goto label3;

        $r7 = $r2.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler workScheduler>;

        interfaceinvoke $r7.<com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler: void schedule(com.google.android.datatransport.runtime.TransportContext,int)>($r0, 1);

     label3:
        return null;
    }

    public static java.lang.Object lambda$upload$0(com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader, com.google.android.datatransport.runtime.TransportContext, int)
    {
        com.google.android.datatransport.runtime.TransportContext $r0;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader $r1;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler $r2;
        int $i0;

        $r1 := @parameter0: com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader;

        $r0 := @parameter1: com.google.android.datatransport.runtime.TransportContext;

        $i0 := @parameter2: int;

        $r2 = $r1.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler workScheduler>;

        $i0 = $i0 + 1;

        interfaceinvoke $r2.<com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler: void schedule(com.google.android.datatransport.runtime.TransportContext,int)>($r0, $i0);

        return null;
    }

    public static void lambda$upload$1(com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader, com.google.android.datatransport.runtime.TransportContext, int, java.lang.Runnable)
    {
        java.lang.Throwable $r7;
        com.google.android.datatransport.runtime.synchronization.SynchronizationGuard $r4;
        com.google.android.datatransport.runtime.synchronization.SynchronizationGuard$CriticalSection $r6;
        java.lang.Runnable $r1;
        com.google.android.datatransport.runtime.TransportContext $r0;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader $r3;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler $r8;
        int $i0;
        com.google.android.datatransport.runtime.scheduling.persistence.EventStore $r5;
        com.google.android.datatransport.runtime.synchronization.SynchronizationException $r2;
        boolean $z0;

        $r3 := @parameter0: com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader;

        $r0 := @parameter1: com.google.android.datatransport.runtime.TransportContext;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.lang.Runnable;

     label01:
        $r4 = $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.synchronization.SynchronizationGuard guard>;

        $r5 = $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.persistence.EventStore eventStore>;

     label02:
        virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader$$Lambda$4: com.google.android.datatransport.runtime.synchronization.SynchronizationGuard$CriticalSection lambdaFactory$(com.google.android.datatransport.runtime.scheduling.persistence.EventStore)>($r5);

        interfaceinvoke $r4.<com.google.android.datatransport.runtime.synchronization.SynchronizationGuard: java.lang.Object runCriticalSection(com.google.android.datatransport.runtime.synchronization.SynchronizationGuard$CriticalSection)>($r6);

        $z0 = virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: boolean isNetworkAvailable()>();

     label03:
        if $z0 != 0 goto label07;

     label04:
        $r4 = $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.synchronization.SynchronizationGuard guard>;

     label05:
        $r6 = staticinvoke <com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader$$Lambda$5: com.google.android.datatransport.runtime.synchronization.SynchronizationGuard$CriticalSection lambdaFactory$(com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader,com.google.android.datatransport.runtime.TransportContext,int)>($r3, $r0, $i0);

        interfaceinvoke $r4.<com.google.android.datatransport.runtime.synchronization.SynchronizationGuard: java.lang.Object runCriticalSection(com.google.android.datatransport.runtime.synchronization.SynchronizationGuard$CriticalSection)>($r6);

     label06:
        goto label13;

     label07:
        virtualinvoke $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: void logAndUpdateState(com.google.android.datatransport.runtime.TransportContext,int)>($r0, $i0);

     label08:
        goto label13;

     label09:
        $r7 := @caughtexception;

        goto label14;

     label10:
        $r8 = $r3.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler workScheduler>;

     label11:
        $i0 = $i0 + 1;

     label12:
        interfaceinvoke $r8.<com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler: void schedule(com.google.android.datatransport.runtime.TransportContext,int)>($r0, $i0);

     label13:
        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        return;

     label14:
        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        throw $r7;

     label15:
        $r2 := @caughtexception;

        goto label10;

        catch com.google.android.datatransport.runtime.synchronization.SynchronizationException from label02 to label03 with label15;
        catch com.google.android.datatransport.runtime.synchronization.SynchronizationException from label05 to label06 with label15;
        catch com.google.android.datatransport.runtime.synchronization.SynchronizationException from label07 to label08 with label15;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }

    public boolean isNetworkAvailable()
    {
        android.net.ConnectivityManager $r3;
        android.content.Context $r1;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader r0;
        android.net.NetworkInfo $r4;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader;

        $r1 = r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r3 = (android.net.ConnectivityManager) $r2;

        $r4 = virtualinvoke $r3.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r4 == null goto label1;

        $z0 = virtualinvoke $r4.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void logAndUpdateState(com.google.android.datatransport.runtime.TransportContext, int)
    {
        com.google.android.datatransport.runtime.backends.BackendRequest$Builder $r14;
        byte[] $r15;
        com.google.android.datatransport.runtime.backends.BackendResponse $r10;
        com.google.android.datatransport.runtime.synchronization.SynchronizationGuard$CriticalSection $r6;
        com.google.android.datatransport.runtime.scheduling.persistence.PersistedEvent $r12;
        java.lang.Iterable $r8;
        java.util.ArrayList $r11;
        com.google.android.datatransport.runtime.TransportContext $r1;
        com.google.android.datatransport.runtime.EventInternal $r13;
        int $i0;
        java.lang.String $r3;
        boolean $z0;
        com.google.android.datatransport.runtime.backends.TransportBackend $r4;
        com.google.android.datatransport.runtime.backends.BackendRequest $r16;
        com.google.android.datatransport.runtime.synchronization.SynchronizationGuard $r5;
        java.util.Iterator $r9;
        com.google.android.datatransport.runtime.backends.BackendRegistry $r2;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader r0;
        java.lang.Object $r7;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader;

        $r1 := @parameter0: com.google.android.datatransport.runtime.TransportContext;

        $i0 := @parameter1: int;

        $r2 = r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.backends.BackendRegistry backendRegistry>;

        $r3 = virtualinvoke $r1.<com.google.android.datatransport.runtime.TransportContext: java.lang.String getBackendName()>();

        $r4 = interfaceinvoke $r2.<com.google.android.datatransport.runtime.backends.BackendRegistry: com.google.android.datatransport.runtime.backends.TransportBackend get(java.lang.String)>($r3);

        $r5 = r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.synchronization.SynchronizationGuard guard>;

        $r6 = staticinvoke <com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader$$Lambda$2: com.google.android.datatransport.runtime.synchronization.SynchronizationGuard$CriticalSection lambdaFactory$(com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader,com.google.android.datatransport.runtime.TransportContext)>(r0, $r1);

        $r7 = interfaceinvoke $r5.<com.google.android.datatransport.runtime.synchronization.SynchronizationGuard: java.lang.Object runCriticalSection(com.google.android.datatransport.runtime.synchronization.SynchronizationGuard$CriticalSection)>($r6);

        $r8 = (java.lang.Iterable) $r7;

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        if $r4 != null goto label2;

        staticinvoke <com.google.android.datatransport.runtime.logging.Logging: void d(java.lang.String,java.lang.String,java.lang.Object)>("Uploader", "Unknown backend for %s, deleting event batch for it...", $r1);

        $r10 = staticinvoke <com.google.android.datatransport.runtime.backends.BackendResponse: com.google.android.datatransport.runtime.backends.BackendResponse fatalError()>();

        goto label5;

     label2:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r9 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (com.google.android.datatransport.runtime.scheduling.persistence.PersistedEvent) $r7;

        $r13 = virtualinvoke $r12.<com.google.android.datatransport.runtime.scheduling.persistence.PersistedEvent: com.google.android.datatransport.runtime.EventInternal getEvent()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label3;

     label4:
        $r14 = staticinvoke <com.google.android.datatransport.runtime.backends.BackendRequest: com.google.android.datatransport.runtime.backends.BackendRequest$Builder builder()>();

        $r14 = virtualinvoke $r14.<com.google.android.datatransport.runtime.backends.BackendRequest$Builder: com.google.android.datatransport.runtime.backends.BackendRequest$Builder setEvents(java.lang.Iterable)>($r11);

        $r15 = virtualinvoke $r1.<com.google.android.datatransport.runtime.TransportContext: byte[] getExtras()>();

        $r14 = virtualinvoke $r14.<com.google.android.datatransport.runtime.backends.BackendRequest$Builder: com.google.android.datatransport.runtime.backends.BackendRequest$Builder setExtras(byte[])>($r15);

        $r16 = virtualinvoke $r14.<com.google.android.datatransport.runtime.backends.BackendRequest$Builder: com.google.android.datatransport.runtime.backends.BackendRequest build()>();

        $r10 = interfaceinvoke $r4.<com.google.android.datatransport.runtime.backends.TransportBackend: com.google.android.datatransport.runtime.backends.BackendResponse send(com.google.android.datatransport.runtime.backends.BackendRequest)>($r16);

     label5:
        $r5 = r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: com.google.android.datatransport.runtime.synchronization.SynchronizationGuard guard>;

        $r6 = staticinvoke <com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader$$Lambda$3: com.google.android.datatransport.runtime.synchronization.SynchronizationGuard$CriticalSection lambdaFactory$(com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader,com.google.android.datatransport.runtime.backends.BackendResponse,java.lang.Iterable,com.google.android.datatransport.runtime.TransportContext,int)>(r0, $r10, $r8, $r1, $i0);

        interfaceinvoke $r5.<com.google.android.datatransport.runtime.synchronization.SynchronizationGuard: java.lang.Object runCriticalSection(com.google.android.datatransport.runtime.synchronization.SynchronizationGuard$CriticalSection)>($r6);

        return;
    }

    public void upload(com.google.android.datatransport.runtime.TransportContext, int, java.lang.Runnable)
    {
        com.google.android.datatransport.runtime.TransportContext $r3;
        com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader r0;
        java.util.concurrent.Executor $r2;
        int $i0;
        java.lang.Runnable $r1;

        r0 := @this: com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader;

        $r3 := @parameter0: com.google.android.datatransport.runtime.TransportContext;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Runnable;

        $r2 = r0.<com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: java.util.concurrent.Executor executor>;

        $r1 = staticinvoke <com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader$$Lambda$1: java.lang.Runnable lambdaFactory$(com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader,com.google.android.datatransport.runtime.TransportContext,int,java.lang.Runnable)>(r0, $r3, $i0, $r1);

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

        return;
    }

    public static void <clinit>()
    {
        <com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader: java.lang.String LOG_TAG> = "Uploader";

        return;
    }
}
