public final class com.google.common.collect.Tables extends java.lang.Object
{
    public static final com.google.common.base.Function UNMODIFIABLE_WRAPPER;

    static void <clinit>()
    {
        com.google.common.collect.Tables$1 $r0;

        $r0 = new com.google.common.collect.Tables$1;

        specialinvoke $r0.<com.google.common.collect.Tables$1: void <init>()>();

        <com.google.common.collect.Tables: com.google.common.base.Function UNMODIFIABLE_WRAPPER> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.collect.Tables r0;

        r0 := @this: com.google.common.collect.Tables;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.collect.Table a(java.util.function.BinaryOperator, com.google.common.collect.Table, com.google.common.collect.Table)
    {
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.util.function.BinaryOperator $r0;
        com.google.common.collect.Table$Cell $r6;
        java.lang.Object $r5, $r7, $r8;
        com.google.common.collect.Table $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.function.BinaryOperator;

        $r1 := @parameter1: com.google.common.collect.Table;

        $r2 := @parameter2: com.google.common.collect.Table;

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Table: java.util.Set cellSet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.common.collect.Table$Cell) $r5;

        $r5 = interfaceinvoke $r6.<com.google.common.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r7 = interfaceinvoke $r6.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r8 = interfaceinvoke $r6.<com.google.common.collect.Table$Cell: java.lang.Object getValue()>();

        staticinvoke <com.google.common.collect.Tables: void merge(com.google.common.collect.Table,java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)>($r1, $r5, $r7, $r8, $r0);

        goto label1;

     label2:
        return $r1;
    }

    public static java.lang.Object a(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalStateException $r1;
        java.lang.Object $r0, $r4;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r4 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conflicting values ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static void a(java.util.function.Function, java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator, com.google.common.collect.Table, java.lang.Object)
    {
        java.util.function.Function $r3, $r4, $r5;
        java.util.function.BinaryOperator $r0;
        java.lang.Object $r2, $r6, $r7;
        com.google.common.collect.Table $r1;

        $r3 := @parameter0: java.util.function.Function;

        $r4 := @parameter1: java.util.function.Function;

        $r5 := @parameter2: java.util.function.Function;

        $r0 := @parameter3: java.util.function.BinaryOperator;

        $r1 := @parameter4: com.google.common.collect.Table;

        $r2 := @parameter5: java.lang.Object;

        $r6 = interfaceinvoke $r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r2);

        $r7 = interfaceinvoke $r4.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r2);

        $r2 = interfaceinvoke $r5.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r2);

        staticinvoke <com.google.common.collect.Tables: void merge(com.google.common.collect.Table,java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)>($r1, $r6, $r7, $r2, $r0);

        return;
    }

    public static com.google.common.base.Function access$000()
    {
        com.google.common.base.Function $r0;

        $r0 = staticinvoke <com.google.common.collect.Tables: com.google.common.base.Function unmodifiableWrapper()>();

        return $r0;
    }

    public static boolean equalsImpl(com.google.common.collect.Table, java.lang.Object)
    {
        java.util.Set $r3, $r4;
        java.lang.Object $r1;
        com.google.common.collect.Table $r0, $r2;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.Table;

        $r1 := @parameter1: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof com.google.common.collect.Table;

        if $z0 == 0 goto label2;

        $r2 = (com.google.common.collect.Table) $r1;

        $r3 = interfaceinvoke $r0.<com.google.common.collect.Table: java.util.Set cellSet()>();

        $r4 = interfaceinvoke $r2.<com.google.common.collect.Table: java.util.Set cellSet()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean equals(java.lang.Object)>($r4);

        return $z0;

     label2:
        return 0;
    }

    public static com.google.common.collect.Table$Cell immutableCell(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.Tables$ImmutableCell $r3;
        java.lang.Object $r0, $r1, $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = new com.google.common.collect.Tables$ImmutableCell;

        specialinvoke $r3.<com.google.common.collect.Tables$ImmutableCell: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        return $r3;
    }

    public static void merge(com.google.common.collect.Table, java.lang.Object, java.lang.Object, java.lang.Object, java.util.function.BinaryOperator)
    {
        java.lang.Object $r1, $r2, $r4, $r5;
        com.google.common.collect.Table $r0;
        java.util.function.BinaryOperator $r3;

        $r0 := @parameter0: com.google.common.collect.Table;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r4 := @parameter3: java.lang.Object;

        $r3 := @parameter4: java.util.function.BinaryOperator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r5 = interfaceinvoke $r0.<com.google.common.collect.Table: java.lang.Object get(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $r5 != null goto label1;

        interfaceinvoke $r0.<com.google.common.collect.Table: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, $r4);

        return;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.function.BinaryOperator: java.lang.Object apply(java.lang.Object,java.lang.Object)>($r5, $r4);

        if $r4 != null goto label2;

        interfaceinvoke $r0.<com.google.common.collect.Table: java.lang.Object remove(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;

     label2:
        interfaceinvoke $r0.<com.google.common.collect.Table: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, $r4);

        return;
    }

    public static com.google.common.collect.Table newCustomTable(java.util.Map, com.google.common.base.Supplier)
    {
        com.google.common.collect.StandardTable $r2;
        java.util.Map $r0;
        com.google.common.base.Supplier $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: com.google.common.base.Supplier;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.collect.StandardTable;

        specialinvoke $r2.<com.google.common.collect.StandardTable: void <init>(java.util.Map,com.google.common.base.Supplier)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.collect.Table synchronizedTable(com.google.common.collect.Table)
    {
        com.google.common.collect.Table $r0;

        $r0 := @parameter0: com.google.common.collect.Table;

        $r0 = staticinvoke <com.google.common.collect.Synchronized: com.google.common.collect.Table table(com.google.common.collect.Table,java.lang.Object)>($r0, null);

        return $r0;
    }

    public static java.util.stream.Collector toTable(java.util.function.Function, java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator, java.util.function.Supplier)
    {
        c.i.b.c.Lb $r3;
        c.i.b.c.Kb $r7;
        java.util.function.Function $r0, $r5, $r6;
        java.util.function.Supplier $r2;
        java.util.function.BinaryOperator $r1;
        java.util.stream.Collector $r4;
        java.util.stream.Collector$Characteristics[] $r8;

        $r5 := @parameter0: java.util.function.Function;

        $r6 := @parameter1: java.util.function.Function;

        $r0 := @parameter2: java.util.function.Function;

        $r1 := @parameter3: java.util.function.BinaryOperator;

        $r2 := @parameter4: java.util.function.Supplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r6);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r3 = new c.i.b.c.Lb;

        specialinvoke $r3.<c.i.b.c.Lb: void <init>(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)>($r5, $r6, $r0, $r1);

        $r7 = new c.i.b.c.Kb;

        specialinvoke $r7.<c.i.b.c.Kb: void <init>(java.util.function.BinaryOperator)>($r1);

        $r8 = newarray (java.util.stream.Collector$Characteristics)[0];

        $r4 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector$Characteristics[])>($r2, $r3, $r7, $r8);

        return $r4;
    }

    public static java.util.stream.Collector toTable(java.util.function.Function, java.util.function.Function, java.util.function.Function, java.util.function.Supplier)
    {
        c.i.b.c.Mb $r3;
        java.util.stream.Collector $r4;
        java.util.function.Function $r0, $r1, $r5;
        java.util.function.Supplier $r2;

        $r5 := @parameter0: java.util.function.Function;

        $r0 := @parameter1: java.util.function.Function;

        $r1 := @parameter2: java.util.function.Function;

        $r2 := @parameter3: java.util.function.Supplier;

        $r3 = <c.i.b.c.Mb: c.i.b.c.Mb a>;

        $r4 = staticinvoke <com.google.common.collect.Tables: java.util.stream.Collector toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)>($r5, $r0, $r1, $r3, $r2);

        return $r4;
    }

    public static com.google.common.collect.Table transformValues(com.google.common.collect.Table, com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.Tables$TransformedTable $r2;
        com.google.common.collect.Table $r0;

        $r0 := @parameter0: com.google.common.collect.Table;

        $r1 := @parameter1: com.google.common.base.Function;

        $r2 = new com.google.common.collect.Tables$TransformedTable;

        specialinvoke $r2.<com.google.common.collect.Tables$TransformedTable: void <init>(com.google.common.collect.Table,com.google.common.base.Function)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.collect.Table transpose(com.google.common.collect.Table)
    {
        com.google.common.collect.Tables$TransposeTable $r1;
        com.google.common.collect.Table $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.Table;

        $z0 = $r0 instanceof com.google.common.collect.Tables$TransposeTable;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.collect.Tables$TransposeTable) $r0;

        $r0 = $r1.<com.google.common.collect.Tables$TransposeTable: com.google.common.collect.Table original>;

        return $r0;

     label1:
        $r1 = new com.google.common.collect.Tables$TransposeTable;

        specialinvoke $r1.<com.google.common.collect.Tables$TransposeTable: void <init>(com.google.common.collect.Table)>($r0);

        return $r1;
    }

    public static com.google.common.collect.RowSortedTable unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable)
    {
        com.google.common.collect.RowSortedTable $r0;
        com.google.common.collect.Tables$UnmodifiableRowSortedMap $r1;

        $r0 := @parameter0: com.google.common.collect.RowSortedTable;

        $r1 = new com.google.common.collect.Tables$UnmodifiableRowSortedMap;

        specialinvoke $r1.<com.google.common.collect.Tables$UnmodifiableRowSortedMap: void <init>(com.google.common.collect.RowSortedTable)>($r0);

        return $r1;
    }

    public static com.google.common.collect.Table unmodifiableTable(com.google.common.collect.Table)
    {
        com.google.common.collect.Table $r0;
        com.google.common.collect.Tables$UnmodifiableTable $r1;

        $r0 := @parameter0: com.google.common.collect.Table;

        $r1 = new com.google.common.collect.Tables$UnmodifiableTable;

        specialinvoke $r1.<com.google.common.collect.Tables$UnmodifiableTable: void <init>(com.google.common.collect.Table)>($r0);

        return $r1;
    }

    public static com.google.common.base.Function unmodifiableWrapper()
    {
        com.google.common.base.Function r0;

        r0 = <com.google.common.collect.Tables: com.google.common.base.Function UNMODIFIABLE_WRAPPER>;

        return r0;
    }
}
