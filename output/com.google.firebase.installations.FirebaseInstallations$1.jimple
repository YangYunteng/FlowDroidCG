public class com.google.firebase.installations.FirebaseInstallations$1 extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    public final java.util.concurrent.atomic.AtomicInteger mCount;

    public void <init>()
    {
        com.google.firebase.installations.FirebaseInstallations$1 r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<com.google.firebase.installations.FirebaseInstallations$1: java.util.concurrent.atomic.AtomicInteger mCount> = $r1;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        java.lang.Object[] $r3;
        com.google.firebase.installations.FirebaseInstallations$1 r0;
        java.lang.Runnable $r1;
        java.lang.Integer $r5;
        java.util.concurrent.atomic.AtomicInteger $r4;
        java.lang.Thread $r2;
        int $i0;
        java.lang.String $r6;

        r0 := @this: com.google.firebase.installations.FirebaseInstallations$1;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = new java.lang.Thread;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = r0.<com.google.firebase.installations.FirebaseInstallations$1: java.util.concurrent.atomic.AtomicInteger mCount>;

        $i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("firebase-installations-executor-%d", $r3);

        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r1, $r6);

        return $r2;
    }
}
