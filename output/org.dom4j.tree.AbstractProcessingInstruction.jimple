public abstract class org.dom4j.tree.AbstractProcessingInstruction extends org.dom4j.tree.AbstractNode implements org.dom4j.ProcessingInstruction
{

    public void <init>()
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        specialinvoke r0.<org.dom4j.tree.AbstractNode: void <init>()>();

        return;
    }

    private java.lang.String getName(java.util.StringTokenizer)
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.StringBuffer $r1;
        java.util.StringTokenizer $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r2 := @parameter0: java.util.StringTokenizer;

        $r3 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r3);

     label1:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r3 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("=");

        if $z0 != 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        goto label1;

     label3:
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        return $r3;
    }

    private java.lang.String getValue(java.util.StringTokenizer)
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.StringBuffer $r1;
        java.util.StringTokenizer $r2;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r2 := @parameter0: java.util.StringTokenizer;

        $r3 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

     label1:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("\'");

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("\"");

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r3 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        goto label1;

     label3:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label4;

        goto label5;

     label4:
        $r4 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label5;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        goto label3;

     label5:
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public void accept(org.dom4j.Visitor)
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;
        org.dom4j.Visitor $r1;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r1 := @parameter0: org.dom4j.Visitor;

        interfaceinvoke $r1.<org.dom4j.Visitor: void visit(org.dom4j.ProcessingInstruction)>(r0);

        return;
    }

    public java.lang.String asXML()
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("<?");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractProcessingInstruction: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.String getText()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?>");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String getName()
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r1 = interfaceinvoke r0.<org.dom4j.ProcessingInstruction: java.lang.String getTarget()>();

        return $r1;
    }

    public short getNodeType()
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        return 7;
    }

    public java.lang.String getPath(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.StringBuilder $r1;
        org.dom4j.Element $r2, $r3;
        java.lang.String $r4;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r2 := @parameter0: org.dom4j.Element;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r3 == null goto label1;

        if $r3 == $r2 goto label1;

        $r1 = new java.lang.StringBuilder;

        $r4 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getPath(org.dom4j.Element)>($r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/processing-instruction()");

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return "processing-instruction()";
    }

    public java.lang.String getUniquePath(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.StringBuilder $r1;
        org.dom4j.Element $r2, $r3;
        java.lang.String $r4;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r2 := @parameter0: org.dom4j.Element;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r3 == null goto label1;

        if $r3 == $r2 goto label1;

        $r1 = new java.lang.StringBuilder;

        $r4 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getUniquePath(org.dom4j.Element)>($r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/processing-instruction()");

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return "processing-instruction()";
    }

    public java.util.Map parseValues(java.lang.String)
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.util.StringTokenizer $r2;
        java.util.HashMap $r1;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r3 := @parameter0: java.lang.String;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>($r3, " =\'\"", 1);

     label1:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        $r3 = specialinvoke r0.<org.dom4j.tree.AbstractProcessingInstruction: java.lang.String getName(java.util.StringTokenizer)>($r2);

        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<org.dom4j.tree.AbstractProcessingInstruction: java.lang.String getValue(java.util.StringTokenizer)>($r2);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        goto label1;
    }

    public boolean removeValue(java.lang.String)
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        return 0;
    }

    public void setName(java.lang.String)
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        interfaceinvoke r0.<org.dom4j.ProcessingInstruction: void setTarget(java.lang.String)>($r1);

        return;
    }

    public void setValue(java.lang.String, java.lang.String)
    {
        java.lang.UnsupportedOperationException $r3;
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This PI is read-only and cannot be modified");

        throw $r3;
    }

    public void setValues(java.util.Map)
    {
        java.lang.UnsupportedOperationException $r2;
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.util.Map $r1;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r1 := @parameter0: java.util.Map;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This PI is read-only and cannot be modified");

        throw $r2;
    }

    public java.lang.String toString()
    {
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ProcessingInstruction: &");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractProcessingInstruction: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String toString(java.util.Map)
    {
        java.util.Map$Entry $r7;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.StringBuffer $r1, $r9;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.Object $r6;
        java.lang.String $r5, $r8;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r2 := @parameter0: java.util.Map;

        $r9 = new java.lang.StringBuffer;

        $r1 = $r9;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $i0 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>($i0);

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;

     label2:
        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = (java.lang.String) $r6;

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.String) $r6;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        goto label1;
    }

    public void write(java.io.Writer)
    {
        java.io.Writer $r1;
        org.dom4j.tree.AbstractProcessingInstruction r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractProcessingInstruction;

        $r1 := @parameter0: java.io.Writer;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("<?");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractProcessingInstruction: java.lang.String getName()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(" ");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.String getText()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("?>");

        return;
    }
}
