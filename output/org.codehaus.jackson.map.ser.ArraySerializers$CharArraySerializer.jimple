public final class org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer extends org.codehaus.jackson.map.ser.SerializerBase
{

    public void <init>()
    {
        org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void <init>(java.lang.Class)>(class "[C");

        return;
    }

    private final void _writeArrayContents(org.codehaus.jackson.JsonGenerator, char[])
    {
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer r0;
        int $i0, $i1;
        char[] $r2;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter1: char[];

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeString(char[],int,int)>($r2, $i1, 1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.node.ObjectNode $r3, $r4;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("array", 1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String)>("string");

        virtualinvoke $r4.<org.codehaus.jackson.node.ObjectNode: void put(java.lang.String,java.lang.String)>("type", "string");

        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r4);

        return $r3;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        char[] $r4;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (char[]) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer: void serialize(char[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serialize(char[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer r0;
        int $i0;
        char[] $r1;
        org.codehaus.jackson.map.SerializerProvider $r3;
        boolean $z0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r4;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer;

        $r1 := @parameter0: char[];

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS>;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r4);

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        specialinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer: void _writeArrayContents(org.codehaus.jackson.JsonGenerator,char[])>($r2, $r1);

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeEndArray()>();

        return;

     label1:
        $i0 = lengthof $r1;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeString(char[],int,int)>($r1, 0, $i0);

        return;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r2;
        char[] $r5;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (char[]) $r4;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer: void serializeWithType(char[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, $r1, $r2, $r3);

        return;
    }

    public void serializeWithType(char[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.SerializerProvider $r4;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer r0;
        int $i0;
        char[] $r1;
        boolean $z0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r5;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer;

        $r1 := @parameter0: char[];

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r4 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS>;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r5);

        if $z0 == 0 goto label1;

        virtualinvoke $r3.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        specialinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer: void _writeArrayContents(org.codehaus.jackson.JsonGenerator,char[])>($r2, $r1);

        virtualinvoke $r3.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        return;

     label1:
        virtualinvoke $r3.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        $i0 = lengthof $r1;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeString(char[],int,int)>($r1, 0, $i0);

        virtualinvoke $r3.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        return;
    }
}
