public abstract class org.codehaus.jackson.map.deser.BaseNodeDeserializer extends org.codehaus.jackson.map.deser.StdDeserializer
{

    public void <init>(java.lang.Class)
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.deser.BaseNodeDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.BaseNodeDeserializer;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer: void <init>(java.lang.Class)>($r1);

        return;
    }

    public void _handleDuplicateField(java.lang.String, org.codehaus.jackson.node.ObjectNode, org.codehaus.jackson.JsonNode, org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.map.deser.BaseNodeDeserializer r0;
        java.lang.String $r1;
        org.codehaus.jackson.JsonNode $r3, $r4;
        org.codehaus.jackson.node.ObjectNode $r2;

        r0 := @this: org.codehaus.jackson.map.deser.BaseNodeDeserializer;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.codehaus.jackson.node.ObjectNode;

        $r3 := @parameter2: org.codehaus.jackson.JsonNode;

        $r4 := @parameter3: org.codehaus.jackson.JsonNode;

        return;
    }

    public void _reportProblem(org.codehaus.jackson.JsonParser, java.lang.String)
    {
        org.codehaus.jackson.map.JsonMappingException $r2;
        org.codehaus.jackson.map.deser.BaseNodeDeserializer r0;
        java.lang.String $r1;
        org.codehaus.jackson.JsonLocation $r3;
        org.codehaus.jackson.JsonParser $r4;

        r0 := @this: org.codehaus.jackson.map.deser.BaseNodeDeserializer;

        $r4 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: java.lang.String;

        $r2 = new org.codehaus.jackson.map.JsonMappingException;

        $r3 = virtualinvoke $r4.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonLocation getTokenLocation()>();

        specialinvoke $r2.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation)>($r1, $r3);

        throw $r2;
    }

    public final org.codehaus.jackson.JsonNode deserializeAny(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        org.codehaus.jackson.JsonToken $r5;
        org.codehaus.jackson.node.TextNode $r17;
        org.codehaus.jackson.node.NumericNode $r13;
        long $l1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        java.math.BigDecimal $r14;
        org.codehaus.jackson.map.JsonMappingException $r7;
        org.codehaus.jackson.node.JsonNodeFactory $r3;
        int[] $r4;
        org.codehaus.jackson.map.deser.BaseNodeDeserializer r0;
        int $i0;
        java.math.BigInteger $r15;
        java.lang.String $r16;
        org.codehaus.jackson.JsonParser $r1;
        boolean $z0;
        double $d0;
        org.codehaus.jackson.node.ObjectNode $r19;
        org.codehaus.jackson.node.NullNode $r8;
        org.codehaus.jackson.node.BooleanNode $r9;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r12;
        org.codehaus.jackson.JsonParser$NumberType $r10, $r11;
        org.codehaus.jackson.node.ArrayNode $r18;
        java.lang.Class $r6;

        r0 := @this: org.codehaus.jackson.map.deser.BaseNodeDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.node.JsonNodeFactory getNodeFactory()>();

        $r4 = <org.codehaus.jackson.map.deser.BaseNodeDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r5.<java.lang.Enum: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label14;
            case 2: goto label14;
            case 3: goto label13;
            case 4: goto label12;
            case 5: goto label08;
            case 6: goto label05;
            case 7: goto label04;
            case 8: goto label03;
            case 9: goto label02;
            default: goto label01;
        };

     label01:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class getValueClass()>();

        $r7 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r6);

        throw $r7;

     label02:
        $r8 = virtualinvoke $r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NullNode nullNode()>();

        return $r8;

     label03:
        $r9 = virtualinvoke $r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>(0);

        return $r9;

     label04:
        $r9 = virtualinvoke $r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.BooleanNode booleanNode(boolean)>(1);

        return $r9;

     label05:
        $r10 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $r11 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType BIG_DECIMAL>;

        if $r10 == $r11 goto label07;

        $r12 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_DECIMAL_FOR_FLOATS>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r12);

        if $z0 == 0 goto label06;

        goto label07;

     label06:
        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r13 = virtualinvoke $r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(double)>($d0);

        return $r13;

     label07:
        $r14 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        $r13 = virtualinvoke $r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(java.math.BigDecimal)>($r14);

        return $r13;

     label08:
        $r10 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $r11 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType BIG_INTEGER>;

        if $r10 == $r11 goto label11;

        $r12 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_INTEGER_FOR_INTS>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r12);

        if $z0 == 0 goto label09;

        goto label11;

     label09:
        $r11 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType INT>;

        if $r10 != $r11 goto label10;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        $r13 = virtualinvoke $r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(int)>($i0);

        return $r13;

     label10:
        $l1 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        $r13 = virtualinvoke $r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(long)>($l1);

        return $r13;

     label11:
        $r15 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        $r13 = virtualinvoke $r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.NumericNode numberNode(java.math.BigInteger)>($r15);

        return $r13;

     label12:
        $r16 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r17 = virtualinvoke $r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.TextNode textNode(java.lang.String)>($r16);

        return $r17;

     label13:
        $r18 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BaseNodeDeserializer: org.codehaus.jackson.node.ArrayNode deserializeArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r18;

     label14:
        $r19 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BaseNodeDeserializer: org.codehaus.jackson.node.ObjectNode deserializeObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r19;
    }

    public final org.codehaus.jackson.node.ArrayNode deserializeArray(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        org.codehaus.jackson.JsonToken $r3, $r6;
        org.codehaus.jackson.JsonNode $r7;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.node.ArrayNode $r5;
        org.codehaus.jackson.node.JsonNodeFactory $r4;
        org.codehaus.jackson.map.deser.BaseNodeDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;

        r0 := @this: org.codehaus.jackson.map.deser.BaseNodeDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.node.JsonNodeFactory getNodeFactory()>();

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.ArrayNode arrayNode()>();

     label1:
        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r6 == $r3 goto label2;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BaseNodeDeserializer: org.codehaus.jackson.JsonNode deserializeAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        virtualinvoke $r5.<org.codehaus.jackson.node.ArrayNode: void add(org.codehaus.jackson.JsonNode)>($r7);

        goto label1;

     label2:
        return $r5;
    }

    public final org.codehaus.jackson.node.ObjectNode deserializeObject(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        org.codehaus.jackson.JsonToken $r5, $r6, $r7;
        org.codehaus.jackson.JsonNode $r9, $r10;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.node.JsonNodeFactory $r3;
        org.codehaus.jackson.map.deser.BaseNodeDeserializer r0;
        java.lang.String $r8;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.node.ObjectNode $r4;

        r0 := @this: org.codehaus.jackson.map.deser.BaseNodeDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.node.JsonNodeFactory getNodeFactory()>();

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.ObjectNode objectNode()>();

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r6 = $r5;

        $r7 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r5 != $r7 goto label1;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

     label1:
        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r6 != $r5 goto label3;

        $r8 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getCurrentName()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r9 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BaseNodeDeserializer: org.codehaus.jackson.JsonNode deserializeAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        $r10 = virtualinvoke $r4.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>($r8, $r9);

        if $r10 == null goto label2;

        virtualinvoke r0.<org.codehaus.jackson.map.deser.BaseNodeDeserializer: void _handleDuplicateField(java.lang.String,org.codehaus.jackson.node.ObjectNode,org.codehaus.jackson.JsonNode,org.codehaus.jackson.JsonNode)>($r8, $r4, $r10, $r9);

     label2:
        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        goto label1;

     label3:
        return $r4;
    }

    public java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer)
    {
        org.codehaus.jackson.map.TypeDeserializer $r2;
        org.codehaus.jackson.map.deser.BaseNodeDeserializer r0;
        java.lang.Object $r3;
        org.codehaus.jackson.map.DeserializationContext $r1;
        org.codehaus.jackson.JsonParser $r4;

        r0 := @this: org.codehaus.jackson.map.deser.BaseNodeDeserializer;

        $r4 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r2 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r4, $r1);

        return $r3;
    }
}
