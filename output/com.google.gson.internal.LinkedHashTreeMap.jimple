public final class com.google.gson.internal.LinkedHashTreeMap extends java.util.AbstractMap implements java.io.Serializable
{
    public static final boolean $assertionsDisabled;
    public static final java.util.Comparator NATURAL_ORDER;
    public java.util.Comparator comparator;
    public com.google.gson.internal.LinkedHashTreeMap$EntrySet entrySet;
    public final com.google.gson.internal.LinkedHashTreeMap$Node header;
    public com.google.gson.internal.LinkedHashTreeMap$KeySet keySet;
    public int modCount;
    public int size;
    public com.google.gson.internal.LinkedHashTreeMap$Node[] table;
    public int threshold;

    static void <clinit>()
    {
        com.google.gson.internal.LinkedHashTreeMap$1 $r0;

        $r0 = new com.google.gson.internal.LinkedHashTreeMap$1;

        specialinvoke $r0.<com.google.gson.internal.LinkedHashTreeMap$1: void <init>()>();

        <com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator NATURAL_ORDER> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.util.Comparator $r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 = <com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator NATURAL_ORDER>;

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void <init>(java.util.Comparator)>($r1);

        return;
    }

    public void <init>(java.util.Comparator)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node[] $r3;
        com.google.gson.internal.LinkedHashTreeMap$Node $r2;
        int $i0, $i1;
        java.util.Comparator $r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<com.google.gson.internal.LinkedHashTreeMap: int size> = 0;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount> = 0;

        if $r1 == null goto label1;

        goto label2;

     label1:
        $r1 = <com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator NATURAL_ORDER>;

     label2:
        r0.<com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator comparator> = $r1;

        $r2 = new com.google.gson.internal.LinkedHashTreeMap$Node;

        specialinvoke $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: void <init>()>();

        r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node header> = $r2;

        $r3 = newarray (com.google.gson.internal.LinkedHashTreeMap$Node)[16];

        r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table> = $r3;

        $r3 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $i0 = lengthof $r3;

        $i0 = $i0 / 2;

        $i1 = lengthof $r3;

        $i1 = $i1 / 4;

        $i0 = $i0 + $i1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int threshold> = $i0;

        return;
    }

    private void doubleCapacity()
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node[] $r1;
        int $i0, $i1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $r1 = staticinvoke <com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] doubleCapacity(com.google.gson.internal.LinkedHashTreeMap$Node[])>($r1);

        r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table> = $r1;

        $r1 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $i0 = lengthof $r1;

        $i0 = $i0 / 2;

        $i1 = lengthof $r1;

        $i1 = $i1 / 4;

        $i0 = $i0 + $i1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int threshold> = $i0;

        return;
    }

    public static com.google.gson.internal.LinkedHashTreeMap$Node[] doubleCapacity(com.google.gson.internal.LinkedHashTreeMap$Node[])
    {
        com.google.gson.internal.LinkedHashTreeMap$AvlIterator $r1;
        com.google.gson.internal.LinkedHashTreeMap$Node[] $r0, $r4;
        com.google.gson.internal.LinkedHashTreeMap$Node $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        com.google.gson.internal.LinkedHashTreeMap$AvlBuilder $r2, $r3;

        $r0 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node[];

        $i0 = lengthof $r0;

        $i1 = $i0 * 2;

        $r4 = newarray (com.google.gson.internal.LinkedHashTreeMap$Node)[$i1];

        $r1 = new com.google.gson.internal.LinkedHashTreeMap$AvlIterator;

        specialinvoke $r1.<com.google.gson.internal.LinkedHashTreeMap$AvlIterator: void <init>()>();

        $r2 = new com.google.gson.internal.LinkedHashTreeMap$AvlBuilder;

        specialinvoke $r2.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void <init>()>();

        $r3 = new com.google.gson.internal.LinkedHashTreeMap$AvlBuilder;

        specialinvoke $r3.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void <init>()>();

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label13;

        $r5 = $r0[$i1];

        if $r5 != null goto label02;

        goto label12;

     label02:
        virtualinvoke $r1.<com.google.gson.internal.LinkedHashTreeMap$AvlIterator: void reset(com.google.gson.internal.LinkedHashTreeMap$Node)>($r5);

        $i2 = 0;

        $i3 = 0;

     label03:
        $r6 = virtualinvoke $r1.<com.google.gson.internal.LinkedHashTreeMap$AvlIterator: com.google.gson.internal.LinkedHashTreeMap$Node next()>();

        if $r6 == null goto label05;

        $i4 = $r6.<com.google.gson.internal.LinkedHashTreeMap$Node: int hash>;

        $i4 = $i4 & $i0;

        if $i4 != 0 goto label04;

        $i2 = $i2 + 1;

        goto label03;

     label04:
        $i3 = $i3 + 1;

        goto label03;

     label05:
        virtualinvoke $r2.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void reset(int)>($i2);

        virtualinvoke $r3.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void reset(int)>($i3);

        virtualinvoke $r1.<com.google.gson.internal.LinkedHashTreeMap$AvlIterator: void reset(com.google.gson.internal.LinkedHashTreeMap$Node)>($r5);

     label06:
        $r5 = virtualinvoke $r1.<com.google.gson.internal.LinkedHashTreeMap$AvlIterator: com.google.gson.internal.LinkedHashTreeMap$Node next()>();

        if $r5 == null goto label08;

        $i4 = $r5.<com.google.gson.internal.LinkedHashTreeMap$Node: int hash>;

        $i4 = $i4 & $i0;

        if $i4 != 0 goto label07;

        virtualinvoke $r2.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void add(com.google.gson.internal.LinkedHashTreeMap$Node)>($r5);

        goto label06;

     label07:
        virtualinvoke $r3.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void add(com.google.gson.internal.LinkedHashTreeMap$Node)>($r5);

        goto label06;

     label08:
        $r5 = null;

        if $i2 <= 0 goto label09;

        $r6 = virtualinvoke $r2.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: com.google.gson.internal.LinkedHashTreeMap$Node root()>();

        goto label10;

     label09:
        $r6 = null;

     label10:
        $r4[$i1] = $r6;

        $i2 = $i1 + $i0;

        if $i3 <= 0 goto label11;

        $r5 = virtualinvoke $r3.<com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: com.google.gson.internal.LinkedHashTreeMap$Node root()>();

     label11:
        $r4[$i2] = $r5;

     label12:
        $i1 = $i1 + 1;

        goto label01;

     label13:
        return $r4;
    }

    private boolean equal(java.lang.Object, java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r2 == $r1 goto label2;

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private void rebalance(com.google.gson.internal.LinkedHashTreeMap$Node, boolean)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node;

        $z0 := @parameter1: boolean;

     label01:
        if $r1 == null goto label22;

        $r2 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        $r3 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        $i1 = 0;

        if $r2 == null goto label02;

        $i2 = $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        goto label03;

     label02:
        $i2 = 0;

     label03:
        if $r3 == null goto label04;

        $i3 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        goto label05;

     label04:
        $i3 = 0;

     label05:
        $i0 = $i2 - $i3;

        $i4 = -2;

        if $i0 != $i4 goto label12;

        $r2 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        $r4 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        if $r4 == null goto label06;

        $i0 = $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        goto label07;

     label06:
        $i0 = 0;

     label07:
        if $r2 == null goto label08;

        $i1 = $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label08:
        $i1 = $i1 - $i0;

        $i0 = -1;

        if $i1 == $i0 goto label10;

        if $i1 != 0 goto label09;

        if $z0 != 0 goto label09;

        goto label10;

     label09:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateRight(com.google.gson.internal.LinkedHashTreeMap$Node)>($r3);

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateLeft(com.google.gson.internal.LinkedHashTreeMap$Node)>($r1);

        goto label11;

     label10:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateLeft(com.google.gson.internal.LinkedHashTreeMap$Node)>($r1);

     label11:
        if $z0 == 0 goto label21;

        return;

     label12:
        if $i0 != 2 goto label19;

        $r3 = $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        $r4 = $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        if $r4 == null goto label13;

        $i0 = $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        goto label14;

     label13:
        $i0 = 0;

     label14:
        if $r3 == null goto label15;

        $i1 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label15:
        $i1 = $i1 - $i0;

        if $i1 == 1 goto label17;

        if $i1 != 0 goto label16;

        if $z0 != 0 goto label16;

        goto label17;

     label16:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateLeft(com.google.gson.internal.LinkedHashTreeMap$Node)>($r2);

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateRight(com.google.gson.internal.LinkedHashTreeMap$Node)>($r1);

        goto label18;

     label17:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rotateRight(com.google.gson.internal.LinkedHashTreeMap$Node)>($r1);

     label18:
        if $z0 == 0 goto label21;

        return;

     label19:
        if $i0 != 0 goto label20;

        $i1 = $i2 + 1;

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i1;

        if $z0 == 0 goto label21;

        return;

     label20:
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i3);

        $i1 = $i1 + 1;

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i1;

        if $z0 != 0 goto label21;

        return;

     label21:
        $r1 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent>;

        goto label01;

     label22:
        return;
    }

    private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node, com.google.gson.internal.LinkedHashTreeMap$Node)
    {
        com.google.gson.internal.LinkedHashTreeMap$Node[] $r5;
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r2 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node;

        $r1 := @parameter1: com.google.gson.internal.LinkedHashTreeMap$Node;

        $r3 = $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent>;

        $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = null;

        if $r1 == null goto label1;

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = $r3;

     label1:
        if $r3 == null goto label3;

        $r4 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        if $r4 != $r2 goto label2;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = $r1;

        return;

     label2:
        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = $r1;

        return;

     label3:
        $i0 = $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int hash>;

        $r5 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $i1 = lengthof $r5;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $i0 = $i0 & $i1;

        $r5[$i0] = $r1;

        return;
    }

    private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap$Node)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r3 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node;

        $r4 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        $r1 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        $r5 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        $r2 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = $r5;

        if $r5 == null goto label1;

        $r5.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = $r3;

     label1:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>($r3, $r1);

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = $r3;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = $r1;

        $i0 = 0;

        if $r4 == null goto label2;

        $i1 = $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        goto label3;

     label2:
        $i1 = 0;

     label3:
        if $r5 == null goto label4;

        $i2 = $r5.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        goto label5;

     label4:
        $i2 = 0;

     label5:
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        $i1 = $i1 + 1;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i1;

        $i1 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        if $r2 == null goto label6;

        $i0 = $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label6:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        $i0 = $i0 + 1;

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i0;

        return;
    }

    private void rotateRight(com.google.gson.internal.LinkedHashTreeMap$Node)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r3 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node;

        $r1 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        $r4 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        $r2 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        $r5 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = $r5;

        if $r5 == null goto label1;

        $r5.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = $r3;

     label1:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>($r3, $r1);

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = $r3;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = $r1;

        $i0 = 0;

        if $r4 == null goto label2;

        $i1 = $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        goto label3;

     label2:
        $i1 = 0;

     label3:
        if $r5 == null goto label4;

        $i2 = $r5.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        goto label5;

     label4:
        $i2 = 0;

     label5:
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        $i1 = $i1 + 1;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i1;

        $i1 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        if $r2 == null goto label6;

        $i0 = $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

     label6:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        $i0 = $i0 + 1;

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i0;

        return;
    }

    public static int secondaryHash(int)
    {
        int $i0, $i1, $i2;

        $i1 := @parameter0: int;

        $i2 = $i1 >>> 20;

        $i0 = $i1 >>> 12;

        $i0 = $i2 ^ $i0;

        $i1 = $i1 ^ $i0;

        $i0 = $i1 >>> 7;

        $i0 = $i0 ^ $i1;

        $i1 = $i1 >>> 4;

        $i1 = $i1 ^ $i0;

        return $i1;
    }

    private java.lang.Object writeReplace()
    {
        java.util.LinkedHashMap $r1;
        com.google.gson.internal.LinkedHashTreeMap r0;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(java.util.Map)>(r0);

        return $r1;
    }

    public void clear()
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node[] $r2;
        com.google.gson.internal.LinkedHashTreeMap$Node $r1, $r3, $r4;
        int $i0;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r2 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r2, null);

        r0.<com.google.gson.internal.LinkedHashTreeMap: int size> = 0;

        $i0 = r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount>;

        $i0 = $i0 + 1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount> = $i0;

        $r3 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node header>;

        $r4 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next>;

     label1:
        if $r4 == $r3 goto label2;

        $r1 = $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next>;

        $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev> = null;

        $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next> = null;

        $r4 = $r1;

        goto label1;

     label2:
        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev> = $r3;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next> = $r3;

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object $r2;
        com.google.gson.internal.LinkedHashTreeMap$Node $r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node findByObject(java.lang.Object)>($r2);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Set entrySet()
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$EntrySet $r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$EntrySet entrySet>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r1 = new com.google.gson.internal.LinkedHashTreeMap$EntrySet;

        specialinvoke $r1.<com.google.gson.internal.LinkedHashTreeMap$EntrySet: void <init>(com.google.gson.internal.LinkedHashTreeMap)>(r0);

        r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$EntrySet entrySet> = $r1;

        return $r1;
    }

    public com.google.gson.internal.LinkedHashTreeMap$Node find(java.lang.Object, boolean)
    {
        java.lang.ClassCastException $r9;
        com.google.gson.internal.LinkedHashTreeMap r0;
        int $i0, $i1, $i2;
        java.lang.String $r12;
        boolean $z0;
        com.google.gson.internal.LinkedHashTreeMap$Node[] $r1;
        com.google.gson.internal.LinkedHashTreeMap$Node $r4, $r8, $r13, $r14;
        java.lang.Object $r2, $r7;
        java.lang.Comparable $r6;
        java.lang.StringBuilder $r10;
        java.lang.Class $r11;
        java.util.Comparator $r3, $r5;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r2 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r3 = r0.<com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator comparator>;

        $r1 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table>;

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i0 = staticinvoke <com.google.gson.internal.LinkedHashTreeMap: int secondaryHash(int)>($i0);

        $i1 = lengthof $r1;

        $i1 = $i1 - 1;

        $i1 = $i1 & $i0;

        $r4 = $r1[$i1];

        if $r4 == null goto label09;

        $r5 = <com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator NATURAL_ORDER>;

        if $r3 != $r5 goto label01;

        $r6 = (java.lang.Comparable) $r2;

        goto label02;

     label01:
        $r6 = null;

     label02:
        if $r6 == null goto label03;

        $r7 = $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object key>;

        $i2 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        goto label04;

     label03:
        $r7 = $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object key>;

        $i2 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r2, $r7);

     label04:
        if $i2 != 0 goto label05;

        return $r4;

     label05:
        if $i2 >= 0 goto label06;

        $r8 = $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        goto label07;

     label06:
        $r8 = $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

     label07:
        if $r8 != null goto label08;

        goto label10;

     label08:
        $r4 = $r8;

        goto label02;

     label09:
        $i2 = 0;

     label10:
        if $z0 != 0 goto label11;

        return null;

     label11:
        $r8 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node header>;

        if $r4 != null goto label14;

        $r5 = <com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator NATURAL_ORDER>;

        if $r3 != $r5 goto label13;

        $z0 = $r2 instanceof java.lang.Comparable;

        if $z0 == 0 goto label12;

        goto label13;

     label12:
        $r9 = new java.lang.ClassCastException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not Comparable");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.ClassCastException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label13:
        $r13 = new com.google.gson.internal.LinkedHashTreeMap$Node;

        $r14 = $r8.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev>;

        specialinvoke $r13.<com.google.gson.internal.LinkedHashTreeMap$Node: void <init>(com.google.gson.internal.LinkedHashTreeMap$Node,java.lang.Object,int,com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>($r4, $r2, $i0, $r8, $r14);

        $r1[$i1] = $r13;

        goto label17;

     label14:
        $r13 = new com.google.gson.internal.LinkedHashTreeMap$Node;

        $r14 = $r8.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev>;

        specialinvoke $r13.<com.google.gson.internal.LinkedHashTreeMap$Node: void <init>(com.google.gson.internal.LinkedHashTreeMap$Node,java.lang.Object,int,com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>($r4, $r2, $i0, $r8, $r14);

        if $i2 >= 0 goto label15;

        $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = $r13;

        goto label16;

     label15:
        $r4.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = $r13;

     label16:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rebalance(com.google.gson.internal.LinkedHashTreeMap$Node,boolean)>($r4, 1);

     label17:
        $i0 = r0.<com.google.gson.internal.LinkedHashTreeMap: int size>;

        $i1 = $i0 + 1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int size> = $i1;

        $i1 = r0.<com.google.gson.internal.LinkedHashTreeMap: int threshold>;

        if $i0 <= $i1 goto label18;

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void doubleCapacity()>();

     label18:
        $i0 = r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount>;

        $i0 = $i0 + 1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount> = $i0;

        return $r13;
    }

    public com.google.gson.internal.LinkedHashTreeMap$Node findByEntry(java.util.Map$Entry)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.util.Map$Entry $r2;
        com.google.gson.internal.LinkedHashTreeMap$Node $r3;
        java.lang.Object $r1, $r4;
        boolean $z0;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r2 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node findByObject(java.lang.Object)>($r1);

        if $r3 == null goto label1;

        $r1 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object value>;

        $r4 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r4);

        if $z0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return $r3;

     label3:
        return null;
    }

    public com.google.gson.internal.LinkedHashTreeMap$Node findByObject(java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node $r2;
        java.lang.Object $r1;
        java.lang.ClassCastException $r3;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label4;

     label1:
        $r2 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node find(java.lang.Object,boolean)>($r1, 0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

     label4:
        return null;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object $r2;
        com.google.gson.internal.LinkedHashTreeMap$Node $r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node findByObject(java.lang.Object)>($r2);

        if $r1 == null goto label1;

        $r2 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object value>;

        return $r2;

     label1:
        return null;
    }

    public java.util.Set keySet()
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$KeySet $r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 = r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$KeySet keySet>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r1 = new com.google.gson.internal.LinkedHashTreeMap$KeySet;

        specialinvoke $r1.<com.google.gson.internal.LinkedHashTreeMap$KeySet: void <init>(com.google.gson.internal.LinkedHashTreeMap)>(r0);

        r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$KeySet keySet> = $r1;

        return $r1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node $r1;
        java.lang.Object $r2, $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r2 := @parameter0: java.lang.Object;

        $r3 := @parameter1: java.lang.Object;

        if $r2 == null goto label1;

        $r1 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node find(java.lang.Object,boolean)>($r2, 1);

        $r2 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object value>;

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object value> = $r3;

        return $r2;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r4;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object $r2;
        com.google.gson.internal.LinkedHashTreeMap$Node $r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node removeInternalByKey(java.lang.Object)>($r2);

        if $r1 == null goto label1;

        $r2 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object value>;

        return $r2;

     label1:
        return null;
    }

    public void removeInternal(com.google.gson.internal.LinkedHashTreeMap$Node, boolean)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        com.google.gson.internal.LinkedHashTreeMap$Node $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r1 := @parameter0: com.google.gson.internal.LinkedHashTreeMap$Node;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label01;

        $r2 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev>;

        $r3 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next>;

        $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next> = $r3;

        $r3 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next>;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev> = $r2;

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev> = null;

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next> = null;

     label01:
        $r2 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        $r3 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        $r4 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent>;

        $i1 = 0;

        if $r2 == null goto label07;

        if $r3 == null goto label07;

        $i2 = $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        $i0 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        if $i2 <= $i0 goto label02;

        $r2 = virtualinvoke $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node last()>();

        goto label03;

     label02:
        $r2 = virtualinvoke $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node first()>();

     label03:
        virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void removeInternal(com.google.gson.internal.LinkedHashTreeMap$Node,boolean)>($r2, 0);

        $r3 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left>;

        if $r3 == null goto label04;

        $i0 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = $r3;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = $r2;

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = null;

        goto label05;

     label04:
        $i0 = 0;

     label05:
        $r3 = $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right>;

        if $r3 == null goto label06;

        $i1 = $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: int height>;

        $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = $r3;

        $r3.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent> = $r2;

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = null;

     label06:
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $i1 = $i1 + 1;

        $r2.<com.google.gson.internal.LinkedHashTreeMap$Node: int height> = $i1;

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>($r1, $r2);

        return;

     label07:
        if $r2 == null goto label08;

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>($r1, $r2);

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left> = null;

        goto label10;

     label08:
        if $r3 == null goto label09;

        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>($r1, $r3);

        $r1.<com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right> = null;

        goto label10;

     label09:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)>($r1, null);

     label10:
        specialinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void rebalance(com.google.gson.internal.LinkedHashTreeMap$Node,boolean)>($r4, 0);

        $i1 = r0.<com.google.gson.internal.LinkedHashTreeMap: int size>;

        $i0 = -1;

        $i1 = $i1 + $i0;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int size> = $i1;

        $i1 = r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount>;

        $i1 = $i1 + 1;

        r0.<com.google.gson.internal.LinkedHashTreeMap: int modCount> = $i1;

        return;
    }

    public com.google.gson.internal.LinkedHashTreeMap$Node removeInternalByKey(java.lang.Object)
    {
        com.google.gson.internal.LinkedHashTreeMap r0;
        java.lang.Object $r2;
        com.google.gson.internal.LinkedHashTreeMap$Node $r1;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node findByObject(java.lang.Object)>($r2);

        if $r1 == null goto label1;

        virtualinvoke r0.<com.google.gson.internal.LinkedHashTreeMap: void removeInternal(com.google.gson.internal.LinkedHashTreeMap$Node,boolean)>($r1, 1);

     label1:
        return $r1;
    }

    public int size()
    {
        int i0;
        com.google.gson.internal.LinkedHashTreeMap r0;

        r0 := @this: com.google.gson.internal.LinkedHashTreeMap;

        i0 = r0.<com.google.gson.internal.LinkedHashTreeMap: int size>;

        return i0;
    }
}
