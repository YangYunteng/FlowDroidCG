public abstract class org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer extends org.codehaus.jackson.map.ser.ContainerSerializerBase
{
    public final org.codehaus.jackson.map.BeanProperty _property;
    public final org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer;

    public void <init>(java.lang.Class, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.TypeSerializer $r2;
        java.lang.Class $r1;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.codehaus.jackson.map.TypeSerializer;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializerBase: void <init>(java.lang.Class)>($r1);

        r0.<org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer> = $r2;

        r0.<org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer: org.codehaus.jackson.map.BeanProperty _property> = $r3;

        return;
    }

    public final void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.Object $r1;
        org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeStartArray()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer: void serializeContents(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeEndArray()>();

        return;
    }

    public abstract void serializeContents(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider);

    public final void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.TypeSerializer $r4;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.Object $r1;
        org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        virtualinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer: void serializeContents(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForArray(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        return;
    }
}
