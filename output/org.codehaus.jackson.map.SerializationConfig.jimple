public class org.codehaus.jackson.map.SerializationConfig extends org.codehaus.jackson.map.MapperConfig
{
    public static final int DEFAULT_FEATURE_FLAGS;
    public int _featureFlags;
    public org.codehaus.jackson.map.ser.FilterProvider _filterProvider;
    public org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion;
    public java.lang.Class _serializationView;

    static void <clinit>()
    {
        int $i0;

        $i0 = staticinvoke <org.codehaus.jackson.map.SerializationConfig$Feature: int collectDefaults()>();

        <org.codehaus.jackson.map.SerializationConfig: int DEFAULT_FEATURE_FLAGS> = $i0;

        return;
    }

    public void <init>(org.codehaus.jackson.map.ClassIntrospector, org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.introspect.VisibilityChecker, org.codehaus.jackson.map.jsontype.SubtypeResolver, org.codehaus.jackson.map.PropertyNamingStrategy, org.codehaus.jackson.map.type.TypeFactory, org.codehaus.jackson.map.HandlerInstantiator)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r3;
        org.codehaus.jackson.map.HandlerInstantiator $r6;
        org.codehaus.jackson.map.PropertyNamingStrategy $r4;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.type.TypeFactory $r5;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r2;
        int $i0;
        org.codehaus.jackson.map.ClassIntrospector $r7;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r7 := @parameter0: org.codehaus.jackson.map.ClassIntrospector;

        $r1 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        $r2 := @parameter2: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r3 := @parameter3: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        $r4 := @parameter4: org.codehaus.jackson.map.PropertyNamingStrategy;

        $r5 := @parameter5: org.codehaus.jackson.map.type.TypeFactory;

        $r6 := @parameter6: org.codehaus.jackson.map.HandlerInstantiator;

        specialinvoke r0.<org.codehaus.jackson.map.MapperConfig: void <init>(org.codehaus.jackson.map.ClassIntrospector,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.introspect.VisibilityChecker,org.codehaus.jackson.map.jsontype.SubtypeResolver,org.codehaus.jackson.map.PropertyNamingStrategy,org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.map.HandlerInstantiator)>($r7, $r1, $r2, $r3, $r4, $r5, $r6);

        $i0 = <org.codehaus.jackson.map.SerializationConfig: int DEFAULT_FEATURE_FLAGS>;

        r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags> = $i0;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion> = null;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.ser.FilterProvider _filterProvider> = null;

        return;
    }

    public void <init>(org.codehaus.jackson.map.SerializationConfig)
    {
        org.codehaus.jackson.map.SerializationConfig r0, $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 = $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        specialinvoke r0.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.MapperConfig$Base)>($r1, $r2);

        return;
    }

    public void <init>(org.codehaus.jackson.map.SerializationConfig, java.lang.Class)
    {
        int $i0;
        java.lang.Class $r1;
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion $r3;
        org.codehaus.jackson.map.ser.FilterProvider $r4;
        org.codehaus.jackson.map.SerializationConfig r0, $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.MapperConfig: void <init>(org.codehaus.jackson.map.MapperConfig)>($r2);

        $i0 = <org.codehaus.jackson.map.SerializationConfig: int DEFAULT_FEATURE_FLAGS>;

        r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags> = $i0;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion> = null;

        $i0 = $r2.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags>;

        r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags> = $i0;

        $r3 = $r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion>;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion> = $r3;

        r0.<org.codehaus.jackson.map.SerializationConfig: java.lang.Class _serializationView> = $r1;

        $r4 = $r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.ser.FilterProvider _filterProvider>;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.ser.FilterProvider _filterProvider> = $r4;

        return;
    }

    public void <init>(org.codehaus.jackson.map.SerializationConfig, java.util.HashMap, org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r3;
        java.util.HashMap $r2;
        org.codehaus.jackson.map.SerializationConfig r0, $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r4;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: java.util.HashMap;

        $r3 := @parameter2: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        $r4 = $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        specialinvoke r0.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.MapperConfig$Base)>($r1, $r4);

        r0.<org.codehaus.jackson.map.MapperConfig: java.util.HashMap _mixInAnnotations> = $r2;

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r3;

        return;
    }

    public void <init>(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.MapperConfig$Base)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r1;
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion $r4;
        org.codehaus.jackson.map.ser.FilterProvider $r6;
        org.codehaus.jackson.map.SerializationConfig r0, $r2;
        int $i0;
        java.lang.Class $r5;
        org.codehaus.jackson.map.MapperConfig$Base $r3;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.map.MapperConfig$Base;

        $r1 = $r2.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver>;

        specialinvoke r0.<org.codehaus.jackson.map.MapperConfig: void <init>(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.MapperConfig$Base,org.codehaus.jackson.map.jsontype.SubtypeResolver)>($r2, $r3, $r1);

        $i0 = <org.codehaus.jackson.map.SerializationConfig: int DEFAULT_FEATURE_FLAGS>;

        r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags> = $i0;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion> = null;

        $i0 = $r2.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags>;

        r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags> = $i0;

        $r4 = $r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion>;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion> = $r4;

        $r5 = $r2.<org.codehaus.jackson.map.SerializationConfig: java.lang.Class _serializationView>;

        r0.<org.codehaus.jackson.map.SerializationConfig: java.lang.Class _serializationView> = $r5;

        $r6 = $r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.ser.FilterProvider _filterProvider>;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.ser.FilterProvider _filterProvider> = $r6;

        return;
    }

    public void <init>(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.ser.FilterProvider)
    {
        int $i0;
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion $r3;
        java.lang.Class $r4;
        org.codehaus.jackson.map.ser.FilterProvider $r1;
        org.codehaus.jackson.map.SerializationConfig r0, $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.ser.FilterProvider;

        specialinvoke r0.<org.codehaus.jackson.map.MapperConfig: void <init>(org.codehaus.jackson.map.MapperConfig)>($r2);

        $i0 = <org.codehaus.jackson.map.SerializationConfig: int DEFAULT_FEATURE_FLAGS>;

        r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags> = $i0;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion> = null;

        $i0 = $r2.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags>;

        r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags> = $i0;

        $r3 = $r2.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion>;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion> = $r3;

        $r4 = $r2.<org.codehaus.jackson.map.SerializationConfig: java.lang.Class _serializationView>;

        r0.<org.codehaus.jackson.map.SerializationConfig: java.lang.Class _serializationView> = $r4;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.ser.FilterProvider _filterProvider> = $r1;

        return;
    }

    public boolean canOverrideAccessModifiers()
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        boolean $z0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        return $z0;
    }

    public volatile org.codehaus.jackson.map.MapperConfig createUnshared(org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig createUnshared(org.codehaus.jackson.map.jsontype.SubtypeResolver)>($r1);

        return r0;
    }

    public volatile org.codehaus.jackson.map.MapperConfig createUnshared(org.codehaus.jackson.map.jsontype.TypeResolverBuilder, org.codehaus.jackson.map.introspect.VisibilityChecker, org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r1;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r3;
        org.codehaus.jackson.map.SerializationConfig r0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter0: org.codehaus.jackson.map.jsontype.TypeResolverBuilder;

        $r1 := @parameter1: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r2 := @parameter2: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig createUnshared(org.codehaus.jackson.map.jsontype.TypeResolverBuilder,org.codehaus.jackson.map.introspect.VisibilityChecker,org.codehaus.jackson.map.jsontype.SubtypeResolver)>($r3, $r1, $r2);

        return r0;
    }

    public org.codehaus.jackson.map.SerializationConfig createUnshared(org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r1;
        java.util.HashMap $r2;
        org.codehaus.jackson.map.SerializationConfig r0, $r3;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: java.util.HashMap _mixInAnnotations>;

        r0.<org.codehaus.jackson.map.MapperConfig: boolean _mixInAnnotationsShared> = 1;

        $r3 = new org.codehaus.jackson.map.SerializationConfig;

        specialinvoke $r3.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,java.util.HashMap,org.codehaus.jackson.map.jsontype.SubtypeResolver)>(r0, $r2, $r1);

        return $r3;
    }

    public org.codehaus.jackson.map.SerializationConfig createUnshared(org.codehaus.jackson.map.jsontype.TypeResolverBuilder, org.codehaus.jackson.map.introspect.VisibilityChecker, org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r3;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r1;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r2;
        org.codehaus.jackson.map.SerializationConfig r0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.jsontype.TypeResolverBuilder;

        $r1 := @parameter1: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r3 := @parameter2: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig createUnshared(org.codehaus.jackson.map.jsontype.SubtypeResolver)>($r3);

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig withTypeResolverBuilder(org.codehaus.jackson.map.jsontype.TypeResolverBuilder)>($r2);

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig withVisibilityChecker(org.codehaus.jackson.map.introspect.VisibilityChecker)>($r1);

        return r0;
    }

    public void disable(org.codehaus.jackson.map.SerializationConfig$Feature)
    {
        int $i0, $i1, $i2;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig$Feature;

        $i0 = r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig$Feature: int getMask()>();

        $i2 = -1;

        $i1 = $i1 ^ $i2;

        $i0 = $i1 & $i0;

        r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags> = $i0;

        return;
    }

    public void enable(org.codehaus.jackson.map.SerializationConfig$Feature)
    {
        int $i0, $i1;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig$Feature;

        $i0 = r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig$Feature: int getMask()>();

        $i0 = $i1 | $i0;

        r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags> = $i0;

        return;
    }

    public void fromAnnotations(java.lang.Class)
    {
        org.codehaus.jackson.map.annotate.JsonSerialize$Typing $r8, $r10;
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion $r6, $r7;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r3;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r5;
        java.lang.Class $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r4;
        org.codehaus.jackson.map.SerializationConfig$Feature $r9;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r3 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass construct(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r1, $r2, null);

        $r4 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.introspect.VisibilityChecker getDefaultVisibilityChecker()>();

        $r5 = virtualinvoke $r2.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.introspect.VisibilityChecker findAutoDetectVisibility(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.introspect.VisibilityChecker)>($r3, $r5);

        $r4 = virtualinvoke $r4.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withVisibilityChecker(org.codehaus.jackson.map.introspect.VisibilityChecker)>($r5);

        r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base> = $r4;

        $r6 = virtualinvoke $r2.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion findSerializationInclusion(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)>($r3, null);

        $r7 = r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion>;

        if $r6 == $r7 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: void setSerializationInclusion(org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)>($r6);

     label1:
        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.annotate.JsonSerialize$Typing findSerializationTyping(org.codehaus.jackson.map.introspect.Annotated)>($r3);

        if $r8 == null goto label4;

        $r9 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_STATIC_TYPING>;

        $r10 = <org.codehaus.jackson.map.annotate.JsonSerialize$Typing: org.codehaus.jackson.map.annotate.JsonSerialize$Typing STATIC>;

        if $r8 != $r10 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: void set(org.codehaus.jackson.map.SerializationConfig$Feature,boolean)>($r9, $z0);

     label4:
        return;
    }

    public org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r2;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_ANNOTATIONS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        return $r2;

     label1:
        $r2 = staticinvoke <org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.AnnotationIntrospector nopInstance()>();

        return $r2;
    }

    public org.codehaus.jackson.map.ser.FilterProvider getFilterProvider()
    {
        org.codehaus.jackson.map.ser.FilterProvider r1;
        org.codehaus.jackson.map.SerializationConfig r0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        r1 = r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.ser.FilterProvider _filterProvider>;

        return r1;
    }

    public org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion getSerializationInclusion()
    {
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion $r1;
        org.codehaus.jackson.map.SerializationConfig r0;
        boolean $z0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 = r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_PROPERTIES>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r2);

        if $z0 == 0 goto label2;

        $r1 = <org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion ALWAYS>;

        return $r1;

     label2:
        $r1 = <org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion NON_NULL>;

        return $r1;
    }

    public java.lang.Class getSerializationView()
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.SerializationConfig r0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        r1 = r0.<org.codehaus.jackson.map.SerializationConfig: java.lang.Class _serializationView>;

        return r1;
    }

    public org.codehaus.jackson.map.BeanDescription introspect(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.ClassIntrospector $r2;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.BeanDescription $r3;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.ClassIntrospector getClassIntrospector()>();

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.ClassIntrospector: org.codehaus.jackson.map.BeanDescription forSerialization(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r0, $r1, r0);

        return $r3;
    }

    public org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)
    {
        org.codehaus.jackson.map.ClassIntrospector $r2;
        java.lang.Class $r1;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.BeanDescription $r3;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.ClassIntrospector getClassIntrospector()>();

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.ClassIntrospector: org.codehaus.jackson.map.BeanDescription forClassAnnotations(org.codehaus.jackson.map.MapperConfig,java.lang.Class,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r0, $r1, r0);

        return $r3;
    }

    public org.codehaus.jackson.map.BeanDescription introspectDirectClassAnnotations(java.lang.Class)
    {
        org.codehaus.jackson.map.ClassIntrospector $r2;
        java.lang.Class $r1;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.BeanDescription $r3;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.ClassIntrospector getClassIntrospector()>();

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.ClassIntrospector: org.codehaus.jackson.map.BeanDescription forDirectClassAnnotations(org.codehaus.jackson.map.MapperConfig,java.lang.Class,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r0, $r1, r0);

        return $r3;
    }

    public boolean isAnnotationProcessingEnabled()
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        boolean $z0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_ANNOTATIONS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        return $z0;
    }

    public final boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)
    {
        int $i0, $i1;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig$Feature;

        $i0 = r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig$Feature: int getMask()>();

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public org.codehaus.jackson.map.JsonSerializer serializerInstance(org.codehaus.jackson.map.introspect.Annotated, java.lang.Class)
    {
        org.codehaus.jackson.map.introspect.Annotated $r2;
        org.codehaus.jackson.map.HandlerInstantiator $r3;
        java.lang.Class $r1;
        java.lang.Object $r5;
        org.codehaus.jackson.map.JsonSerializer $r4;
        org.codehaus.jackson.map.SerializationConfig r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.HandlerInstantiator getHandlerInstantiator()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.HandlerInstantiator: org.codehaus.jackson.map.JsonSerializer serializerInstance(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r0, $r2, $r1);

        if $r4 == null goto label1;

        return $r4;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: boolean canOverrideAccessModifiers()>();

        $r5 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>($r1, $z0);

        $r4 = (org.codehaus.jackson.map.JsonSerializer) $r5;

        return $r4;
    }

    public void set(org.codehaus.jackson.map.SerializationConfig$Feature, boolean)
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig$Feature;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: void enable(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        return;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: void disable(org.codehaus.jackson.map.SerializationConfig$Feature)>($r1);

        return;
    }

    public final void setDateFormat(java.text.DateFormat)
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        java.text.DateFormat $r2;
        org.codehaus.jackson.map.SerializationConfig$Feature $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter0: java.text.DateFormat;

        specialinvoke r0.<org.codehaus.jackson.map.MapperConfig: void setDateFormat(java.text.DateFormat)>($r2);

        $r1 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATES_AS_TIMESTAMPS>;

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: void set(org.codehaus.jackson.map.SerializationConfig$Feature,boolean)>($r1, $z0);

        return;
    }

    public void setSerializationInclusion(org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)
    {
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion $r1, $r2;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r3;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter0: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion;

        r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion _serializationInclusion> = $r2;

        $r1 = <org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion NON_NULL>;

        if $r2 != $r1 goto label1;

        $r3 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_PROPERTIES>;

        virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: void disable(org.codehaus.jackson.map.SerializationConfig$Feature)>($r3);

        return;

     label1:
        $r3 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_PROPERTIES>;

        virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: void enable(org.codehaus.jackson.map.SerializationConfig$Feature)>($r3);

        return;
    }

    public void setSerializationView(java.lang.Class)
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.SerializationConfig r0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: java.lang.Class;

        r0.<org.codehaus.jackson.map.SerializationConfig: java.lang.Class _serializationView> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.codehaus.jackson.map.SerializationConfig r0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SerializationConfig: flags=0x");

        $i0 = r0.<org.codehaus.jackson.map.SerializationConfig: int _featureFlags>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public volatile org.codehaus.jackson.map.MapperConfig withAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.AnnotationIntrospector;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig withAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.SerializationConfig withAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)
    {
        org.codehaus.jackson.map.SerializationConfig r0, $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r3;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter0: org.codehaus.jackson.map.AnnotationIntrospector;

        $r1 = new org.codehaus.jackson.map.SerializationConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)>($r3);

        specialinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.MapperConfig$Base)>(r0, $r2);

        return $r1;
    }

    public volatile org.codehaus.jackson.map.MapperConfig withClassIntrospector(org.codehaus.jackson.map.ClassIntrospector)
    {
        org.codehaus.jackson.map.ClassIntrospector $r1;
        org.codehaus.jackson.map.SerializationConfig r0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.ClassIntrospector;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig withClassIntrospector(org.codehaus.jackson.map.ClassIntrospector)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.SerializationConfig withClassIntrospector(org.codehaus.jackson.map.ClassIntrospector)
    {
        org.codehaus.jackson.map.ClassIntrospector $r3;
        org.codehaus.jackson.map.SerializationConfig r0, $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter0: org.codehaus.jackson.map.ClassIntrospector;

        $r1 = new org.codehaus.jackson.map.SerializationConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withClassIntrospector(org.codehaus.jackson.map.ClassIntrospector)>($r3);

        specialinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.MapperConfig$Base)>(r0, $r2);

        return $r1;
    }

    public volatile org.codehaus.jackson.map.MapperConfig withDateFormat(java.text.DateFormat)
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        java.text.DateFormat $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: java.text.DateFormat;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig withDateFormat(java.text.DateFormat)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.SerializationConfig withDateFormat(java.text.DateFormat)
    {
        org.codehaus.jackson.map.SerializationConfig r0, $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r2;
        java.text.DateFormat $r3;
        org.codehaus.jackson.map.SerializationConfig$Feature $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter0: java.text.DateFormat;

        $r1 = new org.codehaus.jackson.map.SerializationConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withDateFormat(java.text.DateFormat)>($r3);

        specialinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.MapperConfig$Base)>(r0, $r2);

        $r4 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_DATES_AS_TIMESTAMPS>;

        if $r3 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: void set(org.codehaus.jackson.map.SerializationConfig$Feature,boolean)>($r4, $z0);

        return $r1;
    }

    public org.codehaus.jackson.map.SerializationConfig withFilters(org.codehaus.jackson.map.ser.FilterProvider)
    {
        org.codehaus.jackson.map.ser.FilterProvider $r1;
        org.codehaus.jackson.map.SerializationConfig r0, $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.ser.FilterProvider;

        $r2 = new org.codehaus.jackson.map.SerializationConfig;

        specialinvoke $r2.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.ser.FilterProvider)>(r0, $r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.MapperConfig withHandlerInstantiator(org.codehaus.jackson.map.HandlerInstantiator)
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.HandlerInstantiator $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.HandlerInstantiator;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig withHandlerInstantiator(org.codehaus.jackson.map.HandlerInstantiator)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.SerializationConfig withHandlerInstantiator(org.codehaus.jackson.map.HandlerInstantiator)
    {
        org.codehaus.jackson.map.HandlerInstantiator $r3;
        org.codehaus.jackson.map.SerializationConfig r0, $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter0: org.codehaus.jackson.map.HandlerInstantiator;

        $r1 = new org.codehaus.jackson.map.SerializationConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withHandlerInstantiator(org.codehaus.jackson.map.HandlerInstantiator)>($r3);

        specialinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.MapperConfig$Base)>(r0, $r2);

        return $r1;
    }

    public volatile org.codehaus.jackson.map.MapperConfig withPropertyNamingStrategy(org.codehaus.jackson.map.PropertyNamingStrategy)
    {
        org.codehaus.jackson.map.PropertyNamingStrategy $r1;
        org.codehaus.jackson.map.SerializationConfig r0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.PropertyNamingStrategy;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig withPropertyNamingStrategy(org.codehaus.jackson.map.PropertyNamingStrategy)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.SerializationConfig withPropertyNamingStrategy(org.codehaus.jackson.map.PropertyNamingStrategy)
    {
        org.codehaus.jackson.map.PropertyNamingStrategy $r3;
        org.codehaus.jackson.map.SerializationConfig r0, $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter0: org.codehaus.jackson.map.PropertyNamingStrategy;

        $r1 = new org.codehaus.jackson.map.SerializationConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withPropertyNamingStrategy(org.codehaus.jackson.map.PropertyNamingStrategy)>($r3);

        specialinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.MapperConfig$Base)>(r0, $r2);

        return $r1;
    }

    public volatile org.codehaus.jackson.map.MapperConfig withSubtypeResolver(org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig withSubtypeResolver(org.codehaus.jackson.map.jsontype.SubtypeResolver)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.SerializationConfig withSubtypeResolver(org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.SerializationConfig r0, $r2;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        $r2 = new org.codehaus.jackson.map.SerializationConfig;

        specialinvoke $r2.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig)>(r0);

        $r2.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r1;

        return $r2;
    }

    public volatile org.codehaus.jackson.map.MapperConfig withTypeFactory(org.codehaus.jackson.map.type.TypeFactory)
    {
        org.codehaus.jackson.map.type.TypeFactory $r1;
        org.codehaus.jackson.map.SerializationConfig r0;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.type.TypeFactory;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig withTypeFactory(org.codehaus.jackson.map.type.TypeFactory)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.SerializationConfig withTypeFactory(org.codehaus.jackson.map.type.TypeFactory)
    {
        org.codehaus.jackson.map.type.TypeFactory $r3;
        org.codehaus.jackson.map.SerializationConfig r0, $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter0: org.codehaus.jackson.map.type.TypeFactory;

        $r1 = new org.codehaus.jackson.map.SerializationConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withTypeFactory(org.codehaus.jackson.map.type.TypeFactory)>($r3);

        specialinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.MapperConfig$Base)>(r0, $r2);

        return $r1;
    }

    public volatile org.codehaus.jackson.map.MapperConfig withTypeResolverBuilder(org.codehaus.jackson.map.jsontype.TypeResolverBuilder)
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.jsontype.TypeResolverBuilder;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig withTypeResolverBuilder(org.codehaus.jackson.map.jsontype.TypeResolverBuilder)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.SerializationConfig withTypeResolverBuilder(org.codehaus.jackson.map.jsontype.TypeResolverBuilder)
    {
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r3;
        org.codehaus.jackson.map.SerializationConfig r0, $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter0: org.codehaus.jackson.map.jsontype.TypeResolverBuilder;

        $r1 = new org.codehaus.jackson.map.SerializationConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withTypeResolverBuilder(org.codehaus.jackson.map.jsontype.TypeResolverBuilder)>($r3);

        specialinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.MapperConfig$Base)>(r0, $r2);

        return $r1;
    }

    public org.codehaus.jackson.map.SerializationConfig withView(java.lang.Class)
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.SerializationConfig r0, $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: java.lang.Class;

        $r2 = new org.codehaus.jackson.map.SerializationConfig;

        specialinvoke $r2.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,java.lang.Class)>(r0, $r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.MapperConfig withVisibilityChecker(org.codehaus.jackson.map.introspect.VisibilityChecker)
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r1;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.SerializationConfig withVisibilityChecker(org.codehaus.jackson.map.introspect.VisibilityChecker)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.SerializationConfig withVisibilityChecker(org.codehaus.jackson.map.introspect.VisibilityChecker)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker $r3;
        org.codehaus.jackson.map.SerializationConfig r0, $r1;
        org.codehaus.jackson.map.MapperConfig$Base $r2;

        r0 := @this: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r1 = new org.codehaus.jackson.map.SerializationConfig;

        $r2 = r0.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.MapperConfig$Base _base>;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.map.MapperConfig$Base: org.codehaus.jackson.map.MapperConfig$Base withVisibilityChecker(org.codehaus.jackson.map.introspect.VisibilityChecker)>($r3);

        specialinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: void <init>(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.MapperConfig$Base)>(r0, $r2);

        return $r1;
    }
}
