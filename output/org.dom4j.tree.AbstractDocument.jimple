public abstract class org.dom4j.tree.AbstractDocument extends org.dom4j.tree.AbstractBranch implements org.dom4j.Document
{
    public java.lang.String encoding;

    public void <init>()
    {
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        specialinvoke r0.<org.dom4j.tree.AbstractBranch: void <init>()>();

        return;
    }

    public void accept(org.dom4j.Visitor)
    {
        java.util.Iterator $r4;
        org.dom4j.Node $r9;
        org.dom4j.Text $r8;
        org.dom4j.DocumentFactory $r6;
        java.util.List $r3;
        org.dom4j.tree.AbstractDocument r0;
        org.dom4j.DocumentType $r2;
        java.lang.Object $r5;
        org.dom4j.Visitor $r1;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: org.dom4j.Visitor;

        interfaceinvoke $r1.<org.dom4j.Visitor: void visit(org.dom4j.Document)>(r0);

        $r2 = interfaceinvoke r0.<org.dom4j.Document: org.dom4j.DocumentType getDocType()>();

        if $r2 == null goto label1;

        interfaceinvoke $r1.<org.dom4j.Visitor: void visit(org.dom4j.DocumentType)>($r2);

     label1:
        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List content()>();

        if $r3 == null goto label5;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return;

     label3:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r5 instanceof java.lang.String;

        if $z0 == 0 goto label4;

        $r6 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r7 = (java.lang.String) $r5;

        $r8 = virtualinvoke $r6.<org.dom4j.DocumentFactory: org.dom4j.Text createText(java.lang.String)>($r7);

        interfaceinvoke $r1.<org.dom4j.Visitor: void visit(org.dom4j.Text)>($r8);

        goto label2;

     label4:
        $r9 = (org.dom4j.Node) $r5;

        interfaceinvoke $r9.<org.dom4j.Node: void accept(org.dom4j.Visitor)>($r1);

        goto label2;

     label5:
        return;
    }

    public void add(org.dom4j.Element)
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: org.dom4j.Element;

        virtualinvoke r0.<org.dom4j.tree.AbstractDocument: void checkAddElementAllowed(org.dom4j.Element)>($r1);

        specialinvoke r0.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.Element)>($r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractDocument: void rootElementAdded(org.dom4j.Element)>($r1);

        return;
    }

    public org.dom4j.Document addComment(java.lang.String)
    {
        org.dom4j.tree.AbstractDocument r0;
        org.dom4j.Comment $r3;
        java.lang.String $r1;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Comment createComment(java.lang.String)>($r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.Comment)>($r3);

        return r0;
    }

    public org.dom4j.Element addElement(java.lang.String)
    {
        org.dom4j.tree.AbstractDocument r0;
        org.dom4j.Element $r3;
        java.lang.String $r1;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(java.lang.String)>($r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractDocument: void add(org.dom4j.Element)>($r3);

        return $r3;
    }

    public org.dom4j.Element addElement(java.lang.String, java.lang.String)
    {
        org.dom4j.tree.AbstractDocument r0;
        org.dom4j.Element $r4;
        java.lang.String $r1, $r2;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(java.lang.String,java.lang.String)>($r2, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractDocument: void add(org.dom4j.Element)>($r4);

        return $r4;
    }

    public org.dom4j.Element addElement(org.dom4j.QName)
    {
        org.dom4j.tree.AbstractDocument r0;
        org.dom4j.QName $r1;
        org.dom4j.Element $r3;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractDocument: void add(org.dom4j.Element)>($r3);

        return $r3;
    }

    public org.dom4j.Document addProcessingInstruction(java.lang.String, java.lang.String)
    {
        org.dom4j.tree.AbstractDocument r0;
        java.lang.String $r1, $r2;
        org.dom4j.ProcessingInstruction $r4;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>($r2, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.ProcessingInstruction)>($r4);

        return r0;
    }

    public org.dom4j.Document addProcessingInstruction(java.lang.String, java.util.Map)
    {
        org.dom4j.tree.AbstractDocument r0;
        java.util.Map $r1;
        java.lang.String $r2;
        org.dom4j.ProcessingInstruction $r4;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Map;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String,java.util.Map)>($r2, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.ProcessingInstruction)>($r4);

        return r0;
    }

    public java.lang.String asXML()
    {
        java.io.StringWriter $r3;
        org.dom4j.io.XMLWriter $r4;
        org.dom4j.io.OutputFormat $r1;
        java.io.IOException $r5;
        java.lang.RuntimeException $r6;
        org.dom4j.tree.AbstractDocument r0;
        java.lang.StringBuilder $r7;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 = new org.dom4j.io.OutputFormat;

        specialinvoke $r1.<org.dom4j.io.OutputFormat: void <init>()>();

        $r2 = r0.<org.dom4j.tree.AbstractDocument: java.lang.String encoding>;

        virtualinvoke $r1.<org.dom4j.io.OutputFormat: void setEncoding(java.lang.String)>($r2);

        $r3 = new java.io.StringWriter;

     label1:
        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

     label2:
        $r4 = new org.dom4j.io.XMLWriter;

     label3:
        specialinvoke $r4.<org.dom4j.io.XMLWriter: void <init>(java.io.Writer,org.dom4j.io.OutputFormat)>($r3, $r1);

        virtualinvoke $r4.<org.dom4j.io.XMLWriter: void write(org.dom4j.Document)>(r0);

        virtualinvoke $r4.<org.dom4j.io.XMLWriter: void flush()>();

        $r2 = virtualinvoke $r3.<java.io.StringWriter: java.lang.String toString()>();

     label4:
        return $r2;

     label5:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("IOException while generating textual representation: ");

        $r2 = virtualinvoke $r5.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public org.dom4j.Node asXPathResult(org.dom4j.Element)
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: org.dom4j.Element;

        return r0;
    }

    public void checkAddElementAllowed(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractDocument r0;
        org.dom4j.IllegalAddException $r2;
        org.dom4j.Element $r1, $r4;
        java.lang.StringBuilder $r3;
        java.lang.String $r5;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: org.dom4j.Element;

        $r4 = interfaceinvoke r0.<org.dom4j.Document: org.dom4j.Element getRootElement()>();

        if $r4 != null goto label1;

        return;

     label1:
        $r2 = new org.dom4j.IllegalAddException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot add another element to this Document as it already has a root element of: ");

        $r5 = interfaceinvoke $r4.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.dom4j.IllegalAddException: void <init>(org.dom4j.Branch,org.dom4j.Node,java.lang.String)>(r0, $r1, $r5);

        throw $r2;
    }

    public void childAdded(org.dom4j.Node)
    {
        org.dom4j.tree.AbstractDocument r0;
        org.dom4j.Node $r1;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: org.dom4j.Node;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<org.dom4j.Node: void setDocument(org.dom4j.Document)>(r0);

     label1:
        return;
    }

    public void childRemoved(org.dom4j.Node)
    {
        org.dom4j.tree.AbstractDocument r0;
        org.dom4j.Node $r1;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: org.dom4j.Node;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<org.dom4j.Node: void setDocument(org.dom4j.Document)>(null);

     label1:
        return;
    }

    public org.dom4j.Document getDocument()
    {
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        return r0;
    }

    public short getNodeType()
    {
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        return 9;
    }

    public java.lang.String getPath(org.dom4j.Element)
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: org.dom4j.Element;

        return "/";
    }

    public java.lang.String getStringValue()
    {
        org.dom4j.Element $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 = interfaceinvoke r0.<org.dom4j.Document: org.dom4j.Element getRootElement()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getStringValue()>();

        return $r2;

     label1:
        return "";
    }

    public java.lang.String getUniquePath(org.dom4j.Element)
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: org.dom4j.Element;

        return "/";
    }

    public java.lang.String getXMLEncoding()
    {
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        return null;
    }

    public void normalize()
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 = interfaceinvoke r0.<org.dom4j.Document: org.dom4j.Element getRootElement()>();

        if $r1 == null goto label1;

        interfaceinvoke $r1.<org.dom4j.Branch: void normalize()>();

     label1:
        return;
    }

    public boolean remove(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractDocument r0;
        org.dom4j.Element $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: org.dom4j.Element;

        $z0 = specialinvoke r0.<org.dom4j.tree.AbstractBranch: boolean remove(org.dom4j.Element)>($r1);

        $r2 = interfaceinvoke r0.<org.dom4j.Document: org.dom4j.Element getRootElement()>();

        if $r2 == null goto label1;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.tree.AbstractDocument: void setRootElement(org.dom4j.Element)>(null);

     label1:
        interfaceinvoke $r1.<org.dom4j.Node: void setDocument(org.dom4j.Document)>(null);

        return $z0;
    }

    public abstract void rootElementAdded(org.dom4j.Element);

    public void setRootElement(org.dom4j.Element)
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: org.dom4j.Element;

        interfaceinvoke r0.<org.dom4j.Branch: void clearContent()>();

        if $r1 == null goto label1;

        specialinvoke r0.<org.dom4j.tree.AbstractBranch: void add(org.dom4j.Element)>($r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractDocument: void rootElementAdded(org.dom4j.Element)>($r1);

     label1:
        return;
    }

    public void setXMLEncoding(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: java.lang.String;

        r0.<org.dom4j.tree.AbstractDocument: java.lang.String encoding> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractDocument r0;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [Document: name ");

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void write(java.io.Writer)
    {
        org.dom4j.tree.AbstractDocument r0;
        org.dom4j.io.XMLWriter $r4;
        java.io.Writer $r1;
        org.dom4j.io.OutputFormat $r2;
        java.lang.String $r3;

        r0 := @this: org.dom4j.tree.AbstractDocument;

        $r1 := @parameter0: java.io.Writer;

        $r2 = new org.dom4j.io.OutputFormat;

        specialinvoke $r2.<org.dom4j.io.OutputFormat: void <init>()>();

        $r3 = r0.<org.dom4j.tree.AbstractDocument: java.lang.String encoding>;

        virtualinvoke $r2.<org.dom4j.io.OutputFormat: void setEncoding(java.lang.String)>($r3);

        $r4 = new org.dom4j.io.XMLWriter;

        specialinvoke $r4.<org.dom4j.io.XMLWriter: void <init>(java.io.Writer,org.dom4j.io.OutputFormat)>($r1, $r2);

        virtualinvoke $r4.<org.dom4j.io.XMLWriter: void write(org.dom4j.Document)>(r0);

        return;
    }
}
