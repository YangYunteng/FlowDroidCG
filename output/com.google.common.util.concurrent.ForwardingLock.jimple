public abstract class com.google.common.util.concurrent.ForwardingLock extends java.lang.Object implements java.util.concurrent.locks.Lock
{

    public void <init>()
    {
        com.google.common.util.concurrent.ForwardingLock r0;

        r0 := @this: com.google.common.util.concurrent.ForwardingLock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.util.concurrent.locks.Lock delegate();

    public void lock()
    {
        com.google.common.util.concurrent.ForwardingLock r0;
        java.util.concurrent.locks.Lock $r1;

        r0 := @this: com.google.common.util.concurrent.ForwardingLock;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingLock: java.util.concurrent.locks.Lock delegate()>();

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

        return;
    }

    public void lockInterruptibly()
    {
        com.google.common.util.concurrent.ForwardingLock r0;
        java.util.concurrent.locks.Lock $r1;

        r0 := @this: com.google.common.util.concurrent.ForwardingLock;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingLock: java.util.concurrent.locks.Lock delegate()>();

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lockInterruptibly()>();

        return;
    }

    public java.util.concurrent.locks.Condition newCondition()
    {
        com.google.common.util.concurrent.ForwardingLock r0;
        java.util.concurrent.locks.Lock $r1;
        java.util.concurrent.locks.Condition $r2;

        r0 := @this: com.google.common.util.concurrent.ForwardingLock;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingLock: java.util.concurrent.locks.Lock delegate()>();

        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>();

        return $r2;
    }

    public boolean tryLock()
    {
        com.google.common.util.concurrent.ForwardingLock r0;
        java.util.concurrent.locks.Lock $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ForwardingLock;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingLock: java.util.concurrent.locks.Lock delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.concurrent.locks.Lock: boolean tryLock()>();

        return $z0;
    }

    public boolean tryLock(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        com.google.common.util.concurrent.ForwardingLock r0;
        java.util.concurrent.locks.Lock $r2;
        long $l0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.ForwardingLock;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingLock: java.util.concurrent.locks.Lock delegate()>();

        $z0 = interfaceinvoke $r2.<java.util.concurrent.locks.Lock: boolean tryLock(long,java.util.concurrent.TimeUnit)>($l0, $r1);

        return $z0;
    }

    public void unlock()
    {
        com.google.common.util.concurrent.ForwardingLock r0;
        java.util.concurrent.locks.Lock $r1;

        r0 := @this: com.google.common.util.concurrent.ForwardingLock;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingLock: java.util.concurrent.locks.Lock delegate()>();

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void unlock()>();

        return;
    }
}
