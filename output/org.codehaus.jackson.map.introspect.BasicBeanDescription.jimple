public class org.codehaus.jackson.map.introspect.BasicBeanDescription extends org.codehaus.jackson.map.BeanDescription
{
    public final org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector;
    public org.codehaus.jackson.map.type.TypeBindings _bindings;
    public final org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo;
    public final org.codehaus.jackson.map.MapperConfig _config;

    public void <init>(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.AnnotatedClass)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass $r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.MapperConfig $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r3;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedClass;

        specialinvoke r0.<org.codehaus.jackson.map.BeanDescription: void <init>(org.codehaus.jackson.type.JavaType)>($r1);

        r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config> = $r4;

        $r3 = virtualinvoke $r4.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector> = $r3;

        r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo> = $r2;

        return;
    }

    public static java.lang.String descFor(java.lang.reflect.AnnotatedElement)
    {
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        java.lang.reflect.Method $r4;
        java.lang.reflect.Constructor $r5;
        java.lang.reflect.AnnotatedElement $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.reflect.AnnotatedElement;

        $z0 = $r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("class ");

        $r2 = (java.lang.Class) $r0;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        $z0 = $r0 instanceof java.lang.reflect.Method;

        if $z0 == 0 goto label2;

        $r4 = (java.lang.reflect.Method) $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("method ");

        $r3 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (from class ");

        $r2 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        $z0 = $r0 instanceof java.lang.reflect.Constructor;

        if $z0 == 0 goto label3;

        $r5 = (java.lang.reflect.Constructor) $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("constructor() (from class ");

        $r2 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown type [");

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String manglePropertyName(java.lang.String)
    {
        char $c2, $c3;
        int $i0, $i1, $i4, $i5;
        java.lang.StringBuilder $r1, $r2;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r1 = null;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label5;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c2);

        $i4 = (int) $c2;

        $i5 = (int) $c3;

        if $i4 != $i5 goto label3;

        goto label5;

     label3:
        if $r1 != null goto label4;

        $r2 = new java.lang.StringBuilder;

        $r1 = $r2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r0);

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: void setCharAt(int,char)>($i1, $c3);

        $i1 = $i1 + 1;

        goto label2;

     label5:
        if $r1 != null goto label6;

        return $r0;

     label6:
        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public java.util.LinkedHashMap _findPropertyFields(org.codehaus.jackson.map.introspect.VisibilityChecker, java.util.Collection, boolean)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.PropertyNamingStrategy $r5;
        java.lang.Iterable $r7;
        java.util.LinkedHashMap $r3;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r6;
        int $i0;
        java.lang.String $r12, $r13, $r17;
        boolean $z0, $z1;
        java.util.Iterator $r8;
        java.util.Collection $r2;
        org.codehaus.jackson.map.MapperConfig $r4;
        java.lang.IllegalArgumentException $r18;
        org.codehaus.jackson.map.AnnotationIntrospector $r11;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r1;
        java.lang.Object $r9;
        org.codehaus.jackson.map.introspect.AnnotatedField $r10, $r14;
        java.lang.Class $r15, $r16;
        java.lang.StringBuilder $r19;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r2 := @parameter1: java.util.Collection;

        $z0 := @parameter2: boolean;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        $r4 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.PropertyNamingStrategy getPropertyNamingStrategy()>();

        $r6 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Iterable fields()>();

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.codehaus.jackson.map.introspect.AnnotatedField) $r9;

        if $z0 == 0 goto label2;

        $r11 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findSerializablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedField)>($r10);

        goto label3;

     label2:
        $r11 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findDeserializablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedField)>($r10);

     label3:
        if $r12 == null goto label4;

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i0 != 0 goto label6;

        $r13 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.String getName()>();

        $r12 = $r13;

        if $r5 == null goto label6;

        $r4 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config>;

        $r12 = virtualinvoke $r5.<org.codehaus.jackson.map.PropertyNamingStrategy: java.lang.String nameForField(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedField,java.lang.String)>($r4, $r10, $r13);

        goto label6;

     label4:
        $z1 = interfaceinvoke $r1.<org.codehaus.jackson.map.introspect.VisibilityChecker: boolean isFieldVisible(org.codehaus.jackson.map.introspect.AnnotatedField)>($r10);

        if $z1 != 0 goto label5;

        goto label1;

     label5:
        $r13 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.String getName()>();

        $r12 = $r13;

        if $r5 == null goto label6;

        $r4 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config>;

        $r12 = virtualinvoke $r5.<org.codehaus.jackson.map.PropertyNamingStrategy: java.lang.String nameForField(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedField,java.lang.String)>($r4, $r10, $r13);

     label6:
        if $r2 == null goto label7;

        $z1 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>($r12);

        if $z1 == 0 goto label7;

        goto label1;

     label7:
        $r9 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r10);

        $r14 = (org.codehaus.jackson.map.introspect.AnnotatedField) $r9;

        if $r14 == null goto label1;

        $r15 = virtualinvoke $r14.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.Class getDeclaringClass()>();

        $r16 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.Class getDeclaringClass()>();

        if $r15 == $r16 goto label8;

        goto label1;

     label8:
        $r13 = virtualinvoke $r14.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.String getFullName()>();

        $r17 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.String getFullName()>();

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple fields representing property \"");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r12 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r18;

     label9:
        return $r3;
    }

    public org.codehaus.jackson.map.type.TypeBindings bindingsForBeanType()
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.type.TypeBindings $r3;
        org.codehaus.jackson.map.MapperConfig $r4;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings _bindings>;

        if $r3 != null goto label1;

        $r3 = new org.codehaus.jackson.map.type.TypeBindings;

        $r4 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config>;

        $r2 = virtualinvoke $r4.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        $r1 = r0.<org.codehaus.jackson.map.BeanDescription: org.codehaus.jackson.type.JavaType _type>;

        specialinvoke $r3.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.type.JavaType)>($r2, $r1);

        r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings _bindings> = $r3;

     label1:
        $r3 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings _bindings>;

        return $r3;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod findAnyGetter()
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r4, $r6;
        java.lang.IllegalArgumentException $r10;
        java.lang.Iterable $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r7;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        java.lang.Object $r5;
        java.lang.Class $r8, $r9;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Iterable memberMethods()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r4 = null;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r5;

        $r7 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector: boolean hasAnyGetterAnnotation(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r6);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        if $r4 != null goto label4;

        $r8 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getRawType()>();

        $r9 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z0 == 0 goto label3;

        $r4 = $r6;

        goto label1;

     label3:
        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid \'any-getter\' annotation on method ");

        $r12 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(): return type is not instance of java.util.Map");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label4:
        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple methods with \'any-getter\' annotation (");

        $r12 = virtualinvoke $r4.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(), ");

        $r12 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label5:
        return $r4;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod findAnySetter()
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r4, $r6;
        java.lang.IllegalArgumentException $r9;
        java.lang.Iterable $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r7;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        int $i0;
        java.lang.Object $r5;
        java.lang.Class $r8;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Iterable memberMethods()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r4 = null;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r5;

        $r7 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector: boolean hasAnySetterAnnotation(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r6);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        if $r4 != null goto label6;

        $i0 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: int getParameterCount()>();

        if $i0 != 2 goto label5;

        $r8 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getParameterClass(int)>(0);

        if $r8 == class "Ljava/lang/String;" goto label4;

        if $r8 != class "Ljava/lang/Object;" goto label3;

        goto label4;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid \'any-setter\' annotation on method ");

        $r11 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(): first argument not of type String or Object, but ");

        $r11 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label4:
        $r4 = $r6;

        goto label1;

     label5:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid \'any-setter\' annotation on method ");

        $r11 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(): takes ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parameters, should take 2");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label6:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple methods with \'any-setter\' annotation (");

        $r11 = virtualinvoke $r4.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(), ");

        $r11 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label7:
        return $r4;
    }

    public java.util.Map findBackReferenceProperties()
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r6;
        java.util.HashMap $r4;
        java.lang.IllegalArgumentException $r10;
        java.lang.Iterable $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r7;
        org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty $r8;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        int $i0;
        java.lang.Object $r5;
        java.lang.StringBuilder $r11;
        org.codehaus.jackson.map.introspect.AnnotatedField $r12;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Iterable memberMethods()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r4 = null;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r5;

        $i0 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: int getParameterCount()>();

        if $i0 != 1 goto label1;

        $r7 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty findReferenceType(org.codehaus.jackson.map.introspect.AnnotatedMember)>($r6);

        if $r8 == null goto label1;

        $z0 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: boolean isBackReference()>();

        if $z0 == 0 goto label1;

        if $r4 != null goto label2;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

     label2:
        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: java.lang.String getName()>();

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r6);

        if $r5 != null goto label3;

        goto label1;

     label3:
        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple back-reference properties with name \'");

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r10;

     label4:
        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Iterable fields()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (org.codehaus.jackson.map.introspect.AnnotatedField) $r5;

        $r7 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty findReferenceType(org.codehaus.jackson.map.introspect.AnnotatedMember)>($r12);

        if $r8 == null goto label5;

        $z0 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: boolean isBackReference()>();

        if $z0 == 0 goto label5;

        if $r4 != null goto label6;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

     label6:
        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: java.lang.String getName()>();

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

        if $r5 != null goto label7;

        goto label5;

     label7:
        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple back-reference properties with name \'");

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector$ReferenceProperty: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r10;

     label8:
        return $r4;
    }

    public java.util.List findCreatorPropertyNames()
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedWithParams $r5;
        org.codehaus.jackson.map.introspect.AnnotatedParameter $r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;
        java.util.ArrayList $r1;
        java.util.List $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = null;

        $i0 = 0;

     label01:
        if $i0 >= 2 goto label10;

        if $i0 != 0 goto label02;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List getConstructors()>();

        goto label03;

     label02:
        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List getFactoryMethods()>();

     label03:
        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.codehaus.jackson.map.introspect.AnnotatedWithParams) $r4;

        $i1 = virtualinvoke $r5.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: int getParameterCount()>();

        $i2 = 1;

        if $i1 >= 1 goto label05;

        goto label04;

     label05:
        $r6 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r7 = virtualinvoke $r5.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotatedParameter getParameter(int)>(0);

        $r8 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findPropertyNameForParam(org.codehaus.jackson.map.introspect.AnnotatedParameter)>($r7);

        if $r8 != null goto label06;

        goto label04;

     label06:
        if $r1 != null goto label07;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

     label07:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r8);

     label08:
        if $i2 >= $i1 goto label04;

        $r6 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r7 = virtualinvoke $r5.<org.codehaus.jackson.map.introspect.AnnotatedWithParams: org.codehaus.jackson.map.introspect.AnnotatedParameter getParameter(int)>($i2);

        $r8 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findPropertyNameForParam(org.codehaus.jackson.map.introspect.AnnotatedParameter)>($r7);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        $i2 = $i2 + 1;

        goto label08;

     label09:
        $i0 = $i0 + 1;

        goto label01;

     label10:
        if $r1 != null goto label11;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label11:
        return $r1;
    }

    public java.lang.reflect.Constructor findDefaultConstructor()
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r2;
        java.lang.reflect.Constructor $r3;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor getDefaultConstructor()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.reflect.Constructor getAnnotated()>();

        return $r3;
    }

    public java.util.LinkedHashMap findDeserializableFields(org.codehaus.jackson.map.introspect.VisibilityChecker, java.util.Collection)
    {
        java.util.LinkedHashMap $r2;
        java.util.Collection $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r1 := @parameter1: java.util.Collection;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.LinkedHashMap _findPropertyFields(org.codehaus.jackson.map.introspect.VisibilityChecker,java.util.Collection,boolean)>($r3, $r1, 0);

        return $r2;
    }

    public transient java.lang.reflect.Method findFactoryMethod(java.lang.Class[])
    {
        java.util.Iterator $r4;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r6;
        java.lang.Class[] $r1;
        java.util.List $r3;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r2;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.Class $r7, $r8;
        java.lang.reflect.Method $r9;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: java.lang.Class[];

        $r2 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List getStaticMethods()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r5;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: boolean isFactoryMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r6);

        if $z0 == 0 goto label1;

        $i1 = 0;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getParameterClass(int)>(0);

        $i0 = lengthof $r1;

     label2:
        if $i1 >= $i0 goto label1;

        $r8 = $r1[$i1];

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z0 == 0 goto label3;

        $r9 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        return $r9;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return null;
    }

    public java.util.LinkedHashMap findGetters(org.codehaus.jackson.map.introspect.VisibilityChecker, java.util.Collection)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.PropertyNamingStrategy $r5;
        java.lang.Iterable $r7;
        java.util.LinkedHashMap $r3;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r6;
        int $i0;
        java.lang.String $r12, $r13, $r15;
        boolean $z0;
        java.util.Iterator $r8;
        java.util.Collection $r2;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r10, $r14;
        org.codehaus.jackson.map.MapperConfig $r4;
        java.lang.IllegalArgumentException $r16;
        org.codehaus.jackson.map.AnnotationIntrospector $r11;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r1;
        java.lang.Object $r9;
        java.lang.StringBuilder $r17;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r2 := @parameter1: java.util.Collection;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        $r4 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.PropertyNamingStrategy getPropertyNamingStrategy()>();

        $r6 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Iterable memberMethods()>();

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r9;

        $i0 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.AnnotatedMethod: int getParameterCount()>();

        if $i0 == 0 goto label02;

        goto label01;

     label02:
        $r11 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findGettablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r10);

        $r13 = $r12;

        if $r12 == null goto label04;

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i0 != 0 goto label11;

        $r13 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        $r12 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String okNameForAnyGetter(org.codehaus.jackson.map.introspect.AnnotatedMethod,java.lang.String)>($r10, $r13);

        $r13 = $r12;

        if $r12 != null goto label03;

        $r13 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

     label03:
        if $r5 == null goto label11;

        $r4 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config>;

        $r13 = virtualinvoke $r5.<org.codehaus.jackson.map.PropertyNamingStrategy: java.lang.String nameForGetterMethod(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedMethod,java.lang.String)>($r4, $r10, $r13);

        goto label11;

     label04:
        $r13 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        $z0 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z0 == 0 goto label06;

        $z0 = interfaceinvoke $r1.<org.codehaus.jackson.map.introspect.VisibilityChecker: boolean isGetterVisible(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r10);

        if $z0 != 0 goto label05;

        goto label01;

     label05:
        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String okNameForGetter(org.codehaus.jackson.map.introspect.AnnotatedMethod,java.lang.String)>($r10, $r13);

        goto label08;

     label06:
        $z0 = interfaceinvoke $r1.<org.codehaus.jackson.map.introspect.VisibilityChecker: boolean isIsGetterVisible(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r10);

        if $z0 != 0 goto label07;

        goto label01;

     label07:
        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String okNameForIsGetter(org.codehaus.jackson.map.introspect.AnnotatedMethod,java.lang.String)>($r10, $r13);

     label08:
        if $r13 != null goto label09;

        goto label01;

     label09:
        $r11 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r11.<org.codehaus.jackson.map.AnnotationIntrospector: boolean hasAnyGetterAnnotation(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r10);

        if $z0 == 0 goto label10;

        goto label01;

     label10:
        if $r5 == null goto label11;

        $r4 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config>;

        $r13 = virtualinvoke $r5.<org.codehaus.jackson.map.PropertyNamingStrategy: java.lang.String nameForGetterMethod(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedMethod,java.lang.String)>($r4, $r10, $r13);

     label11:
        if $r2 == null goto label12;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>($r13);

        if $z0 == 0 goto label12;

        goto label01;

     label12:
        $r9 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r10);

        $r14 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r9;

        if $r14 != null goto label13;

        goto label01;

     label13:
        $r12 = virtualinvoke $r14.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getFullName()>();

        $r15 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getFullName()>();

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conflicting getter definitions for property \"");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r13 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r16;

     label14:
        return $r3;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod findJsonValueMethod()
    {
        java.util.Iterator $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r4, $r6;
        java.lang.IllegalArgumentException $r9;
        java.lang.Iterable $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r7;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;
        java.lang.reflect.Method $r8;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Iterable memberMethods()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r4 = null;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r5;

        $r7 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector: boolean hasAsValueAnnotation(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r6);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        if $r4 != null goto label4;

        $r8 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        $z0 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: boolean hasGetterSignature(java.lang.reflect.Method)>($r8);

        if $z0 == 0 goto label3;

        $r4 = $r6;

        goto label1;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r11 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("() marked with an \'as-value\' annotation, but does not have valid getter signature (non-static, takes no args, returns a value)");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label4:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple methods with active \'as-value\' annotation (");

        $r11 = virtualinvoke $r4.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(), ");

        $r11 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label5:
        return $r4;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod findMethod(java.lang.String, java.lang.Class[])
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass $r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r3;
        java.lang.Class[] $r1;
        java.lang.String $r4;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Class[];

        $r2 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethod findMethod(java.lang.String,java.lang.Class[])>($r4, $r1);

        return $r3;
    }

    public java.util.LinkedHashMap findSerializableFields(org.codehaus.jackson.map.introspect.VisibilityChecker, java.util.Collection)
    {
        java.util.LinkedHashMap $r2;
        java.util.Collection $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r1 := @parameter1: java.util.Collection;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.LinkedHashMap _findPropertyFields(org.codehaus.jackson.map.introspect.VisibilityChecker,java.util.Collection,boolean)>($r3, $r1, 1);

        return $r2;
    }

    public org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion findSerializationInclusion(org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass $r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion $r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 := @parameter0: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r2 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion findSerializationInclusion(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.annotate.JsonSerialize$Inclusion)>($r2, $r3);

        return $r3;
    }

    public java.util.LinkedHashMap findSetters(org.codehaus.jackson.map.introspect.VisibilityChecker)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.PropertyNamingStrategy $r4;
        java.lang.Iterable $r6;
        java.util.LinkedHashMap $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5;
        int $i0;
        java.lang.String $r11, $r12, $r16;
        boolean $z0;
        java.util.Iterator $r7;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r9, $r13;
        org.codehaus.jackson.map.MapperConfig $r3;
        java.lang.IllegalArgumentException $r17;
        org.codehaus.jackson.map.AnnotationIntrospector $r10;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r1;
        java.lang.Object $r8;
        java.lang.Class $r14, $r15;
        java.lang.StringBuilder $r18;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.PropertyNamingStrategy getPropertyNamingStrategy()>();

        $r5 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Iterable memberMethods()>();

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r8;

        $i0 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.AnnotatedMethod: int getParameterCount()>();

        if $i0 == 1 goto label2;

        goto label1;

     label2:
        $r10 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findSettablePropertyName(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r9);

        $r12 = $r11;

        if $r11 == null goto label4;

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i0 != 0 goto label7;

        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String okNameForSetter(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r9);

        $r12 = $r11;

        if $r11 != null goto label3;

        $r12 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

     label3:
        if $r4 == null goto label7;

        $r3 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config>;

        $r12 = virtualinvoke $r4.<org.codehaus.jackson.map.PropertyNamingStrategy: java.lang.String nameForSetterMethod(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedMethod,java.lang.String)>($r3, $r9, $r12);

        goto label7;

     label4:
        $z0 = interfaceinvoke $r1.<org.codehaus.jackson.map.introspect.VisibilityChecker: boolean isSetterVisible(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r9);

        if $z0 != 0 goto label5;

        goto label1;

     label5:
        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String okNameForSetter(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r9);

        $r12 = $r11;

        if $r11 != null goto label6;

        goto label1;

     label6:
        if $r4 == null goto label7;

        $r3 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.MapperConfig _config>;

        $r12 = virtualinvoke $r4.<org.codehaus.jackson.map.PropertyNamingStrategy: java.lang.String nameForSetterMethod(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedMethod,java.lang.String)>($r3, $r9, $r11);

     label7:
        $r8 = virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r9);

        $r13 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r8;

        if $r13 == null goto label1;

        $r14 = virtualinvoke $r13.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getDeclaringClass()>();

        $r15 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getDeclaringClass()>();

        if $r14 == $r15 goto label8;

        virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        goto label1;

     label8:
        $r11 = virtualinvoke $r13.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getFullName()>();

        $r16 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getFullName()>();

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conflicting setter definitions for property \"");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r12 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r17;

     label9:
        return $r2;
    }

    public transient java.lang.reflect.Constructor findSingleArgConstructor(java.lang.Class[])
    {
        java.util.Iterator $r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        java.lang.Class[] $r2;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r7;
        java.lang.reflect.Constructor $r9;
        java.util.List $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r3;
        int $i0, $i1;
        java.lang.Class $r1, $r8;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 := @parameter0: java.lang.Class[];

        $r3 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List getConstructors()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.codehaus.jackson.map.introspect.AnnotatedConstructor) $r6;

        $i0 = virtualinvoke $r7.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: int getParameterCount()>();

        if $i0 != 1 goto label1;

        $i1 = 0;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.Class getParameterClass(int)>(0);

        $i0 = lengthof $r2;

     label2:
        if $i1 >= $i0 goto label1;

        $r1 = $r2[$i1];

        if $r1 != $r8 goto label3;

        $r9 = virtualinvoke $r7.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.reflect.Constructor getAnnotated()>();

        return $r9;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return null;
    }

    public org.codehaus.jackson.map.util.Annotations getClassAnnotations()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.util.Annotations $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.util.Annotations getAnnotations()>();

        return $r1;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        return r1;
    }

    public java.util.List getConstructors()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        java.util.List $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List getConstructors()>();

        return $r1;
    }

    public java.util.List getFactoryMethods()
    {
        java.util.Iterator $r4;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r6;
        java.util.ArrayList $r3;
        java.util.List $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List getStaticMethods()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return $r2;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r5;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: boolean isFactoryMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r6);

        if $z0 == 0 goto label2;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        goto label2;

     label3:
        return $r3;
    }

    public boolean hasKnownClassAnnotations()
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        boolean $z0;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean hasAnnotations()>();

        return $z0;
    }

    public java.lang.Object instantiateBean(boolean)
    {
        java.lang.Throwable $r6, $r7;
        java.lang.Object[] $r4;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        java.lang.Error $r13;
        java.lang.RuntimeException $r8;
        java.lang.IllegalArgumentException $r9;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r2;
        java.lang.reflect.Constructor $r3;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r10;
        java.lang.Class $r11;
        java.lang.String $r12;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $z0 := @parameter0: boolean;

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor getDefaultConstructor()>();

        if $r2 != null goto label01;

        return null;

     label01:
        if $z0 == 0 goto label02;

        virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMember: void fixAccess()>();

     label02:
        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.reflect.Constructor getAnnotated()>();

     label03:
        $r4 = newarray (java.lang.Object)[0];

     label04:
        $r5 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

     label05:
        return $r5;

     label06:
        $r6 := @caughtexception;

     label07:
        $r7 = virtualinvoke $r6.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r7 == null goto label08;

        $r6 = virtualinvoke $r6.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label07;

     label08:
        $z0 = $r6 instanceof java.lang.Error;

        if $z0 != 0 goto label10;

        $z0 = $r6 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label09;

        $r8 = (java.lang.RuntimeException) $r6;

        throw $r8;

     label09:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to instantiate bean of type ");

        $r1 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass _classInfo>;

        $r11 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class getAnnotated()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": (");

        $r11 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r12 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r9;

     label10:
        $r13 = (java.lang.Error) $r6;

        goto label11;

     label11:
        throw $r13;

        catch java.lang.Exception from label02 to label03 with label06;
        catch java.lang.Exception from label04 to label05 with label06;
    }

    public boolean isCglibGetCallbacks(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        java.lang.Package $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        java.lang.Class $r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getRawType()>();

        if $r2 == null goto label3;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Package getPackage()>();

        if $r3 == null goto label3;

        $r4 = virtualinvoke $r3.<java.lang.Package: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("net.sf.cglib");

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("org.hibernate.repackage.cglib");

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public boolean isFactoryMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        java.lang.Class $r2, $r3;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getRawType()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.BeanDescription: java.lang.Class getBeanClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: boolean hasCreatorAnnotation(org.codehaus.jackson.map.introspect.Annotated)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        $r6 = "valueOf";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean isGroovyMetaClassGetter(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        java.lang.Package $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        java.lang.Class $r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getRawType()>();

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Package getPackage()>();

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<java.lang.Package: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("groovy.lang");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isGroovyMetaClassSetter(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        java.lang.Package $r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        java.lang.Class $r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getParameterClass(int)>(0);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Package getPackage()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<java.lang.Package: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("groovy.lang");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String mangleGetterName(org.codehaus.jackson.map.introspect.Annotated, java.lang.String)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.Annotated $r2;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String manglePropertyName(java.lang.String)>($r1);

        return $r1;
    }

    public java.lang.String mangleSetterName(org.codehaus.jackson.map.introspect.Annotated, java.lang.String)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.Annotated $r2;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r2 := @parameter0: org.codehaus.jackson.map.introspect.Annotated;

        $r1 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String manglePropertyName(java.lang.String)>($r1);

        return $r1;
    }

    public java.lang.String okNameForAnyGetter(org.codehaus.jackson.map.introspect.AnnotatedMethod, java.lang.String)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String okNameForIsGetter(org.codehaus.jackson.map.introspect.AnnotatedMethod,java.lang.String)>($r1, $r2);

        if $r3 != null goto label1;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String okNameForGetter(org.codehaus.jackson.map.introspect.AnnotatedMethod,java.lang.String)>($r1, $r2);

        return $r2;

     label1:
        return $r3;
    }

    public java.lang.String okNameForGetter(org.codehaus.jackson.map.introspect.AnnotatedMethod, java.lang.String)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z0 == 0 goto label3;

        $r3 = "getCallbacks";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: boolean isCglibGetCallbacks(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r1);

        if $z0 == 0 goto label2;

        return null;

     label1:
        $r3 = "getMetaClass";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: boolean isGroovyMetaClassGetter(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r1);

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(3);

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String mangleGetterName(org.codehaus.jackson.map.introspect.Annotated,java.lang.String)>($r1, $r2);

        return $r2;

     label3:
        return null;
    }

    public java.lang.String okNameForIsGetter(org.codehaus.jackson.map.introspect.AnnotatedMethod, java.lang.String)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        java.lang.Class $r3, $r4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getRawType()>();

        if $r3 == class "Ljava/lang/Boolean;" goto label1;

        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r3 == $r4 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(2);

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String mangleGetterName(org.codehaus.jackson.map.introspect.Annotated,java.lang.String)>($r1, $r2);

        return $r2;

     label2:
        return null;
    }

    public java.lang.String okNameForSetter(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(3);

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.String mangleSetterName(org.codehaus.jackson.map.introspect.Annotated,java.lang.String)>($r1, $r2);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = "metaClass";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.BasicBeanDescription: boolean isGroovyMetaClassSetter(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r1);

        if $z0 == 0 goto label4;

        return null;

     label2:
        return $r2;

     label3:
        return null;

     label4:
        return $r2;
    }
}
