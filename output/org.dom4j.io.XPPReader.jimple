public class org.dom4j.io.XPPReader extends java.lang.Object
{
    public org.dom4j.io.DispatchHandler dispatchHandler;
    public org.dom4j.DocumentFactory factory;
    public org.gjt.xpp.XmlPullParserFactory xppFactory;
    public org.gjt.xpp.XmlPullParser xppParser;

    public void <init>()
    {
        org.dom4j.io.XPPReader r0;

        r0 := @this: org.dom4j.io.XPPReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.XPPReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.XPPReader: org.dom4j.DocumentFactory factory> = $r1;

        return;
    }

    public void addHandler(java.lang.String, org.dom4j.ElementHandler)
    {
        org.dom4j.ElementHandler $r2;
        java.lang.String $r1;
        org.dom4j.io.DispatchHandler $r3;
        org.dom4j.io.XPPReader r0;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.dom4j.ElementHandler;

        $r3 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r3.<org.dom4j.io.DispatchHandler: void addHandler(java.lang.String,org.dom4j.ElementHandler)>($r1, $r2);

        return;
    }

    public java.io.Reader createReader(java.io.InputStream)
    {
        java.io.BufferedReader $r2;
        org.dom4j.io.XPPReader r0;
        java.io.InputStreamReader $r3;
        java.io.InputStream $r1;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r1);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        return $r2;
    }

    public org.dom4j.io.DispatchHandler getDispatchHandler()
    {
        org.dom4j.io.DispatchHandler $r1;
        org.dom4j.io.XPPReader r0;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 = r0.<org.dom4j.io.XPPReader: org.dom4j.io.DispatchHandler dispatchHandler>;

        if $r1 != null goto label1;

        $r1 = new org.dom4j.io.DispatchHandler;

        specialinvoke $r1.<org.dom4j.io.DispatchHandler: void <init>()>();

        r0.<org.dom4j.io.XPPReader: org.dom4j.io.DispatchHandler dispatchHandler> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.XPPReader: org.dom4j.io.DispatchHandler dispatchHandler>;

        return $r1;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.io.XPPReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 = r0.<org.dom4j.io.XPPReader: org.dom4j.DocumentFactory factory>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.io.XPPReader: org.dom4j.DocumentFactory factory> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.XPPReader: org.dom4j.DocumentFactory factory>;

        return $r1;
    }

    public org.gjt.xpp.XmlPullParserFactory getXPPFactory()
    {
        org.dom4j.io.XPPReader r0;
        org.gjt.xpp.XmlPullParserFactory $r1;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 = r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParserFactory xppFactory>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.gjt.xpp.XmlPullParserFactory: org.gjt.xpp.XmlPullParserFactory newInstance()>();

        r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParserFactory xppFactory> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParserFactory xppFactory>;

        return $r1;
    }

    public org.gjt.xpp.XmlPullParser getXPPParser()
    {
        org.gjt.xpp.XmlPullParser $r1;
        org.dom4j.io.XPPReader r0;
        org.gjt.xpp.XmlPullParserFactory $r2;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 = r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParser xppParser>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParserFactory getXPPFactory()>();

        $r1 = virtualinvoke $r2.<org.gjt.xpp.XmlPullParserFactory: org.gjt.xpp.XmlPullParser newPullParser()>();

        r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParser xppParser> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParser xppParser>;

        return $r1;
    }

    public org.dom4j.Document parseDocument()
    {
        org.dom4j.Document $r3;
        org.gjt.xpp.XmlEndTag $r6;
        org.dom4j.io.XPPReader r0;
        org.gjt.xpp.XmlPullParserFactory $r5;
        org.dom4j.DocumentFactory $r2;
        org.dom4j.DocumentException $r12;
        byte $b0;
        int $i1;
        java.lang.String $r8;
        org.gjt.xpp.XmlPullParser $r4;
        org.dom4j.xpp.ProxyXmlStartTag $r1, $r11;
        org.dom4j.Element $r7, $r10;
        java.lang.StringBuilder $r9, $r13;

        r0 := @this: org.dom4j.io.XPPReader;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        $r4 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParser getXPPParser()>();

        interfaceinvoke $r4.<org.gjt.xpp.XmlPullParser: void setNamespaceAware(boolean)>(1);

        $r11 = new org.dom4j.xpp.ProxyXmlStartTag;

        $r1 = $r11;

        specialinvoke $r11.<org.dom4j.xpp.ProxyXmlStartTag: void <init>()>();

        $r5 = r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParserFactory xppFactory>;

        $r6 = virtualinvoke $r5.<org.gjt.xpp.XmlPullParserFactory: org.gjt.xpp.XmlEndTag newEndTag()>();

        $r7 = null;

     label1:
        $b0 = interfaceinvoke $r4.<org.gjt.xpp.XmlPullParser: byte next()>();

        if $b0 == 1 goto label8;

        $i1 = (int) $b0;

        if $i1 == 2 goto label5;

        $i1 = (int) $b0;

        if $i1 == 3 goto label4;

        $i1 = (int) $b0;

        if $i1 != 4 goto label3;

        $r8 = interfaceinvoke $r4.<org.gjt.xpp.XmlPullParser: java.lang.String readContent()>();

        if $r7 == null goto label2;

        interfaceinvoke $r7.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r8);

        goto label1;

     label2:
        $r12 = new org.dom4j.DocumentException;

        specialinvoke $r12.<org.dom4j.DocumentException: void <init>(java.lang.String)>("Cannot have text content outside of the root document");

        throw $r12;

     label3:
        $r12 = new org.dom4j.DocumentException;

        $r13 = new java.lang.StringBuilder;

        $r9 = $r13;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error: unknown type: ");

        $i1 = (int) $b0;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.dom4j.DocumentException: void <init>(java.lang.String)>($r8);

        throw $r12;

     label4:
        interfaceinvoke $r4.<org.gjt.xpp.XmlPullParser: void readEndTag(org.gjt.xpp.XmlEndTag)>($r6);

        if $r7 == null goto label1;

        $r7 = interfaceinvoke $r7.<org.dom4j.Node: org.dom4j.Element getParent()>();

        goto label1;

     label5:
        interfaceinvoke $r4.<org.gjt.xpp.XmlPullParser: void readStartTag(org.gjt.xpp.XmlStartTag)>($r1);

        $r10 = virtualinvoke $r1.<org.dom4j.xpp.ProxyXmlStartTag: org.dom4j.Element getElement()>();

        if $r7 == null goto label6;

        interfaceinvoke $r7.<org.dom4j.Branch: void add(org.dom4j.Element)>($r10);

        goto label7;

     label6:
        interfaceinvoke $r3.<org.dom4j.Branch: void add(org.dom4j.Element)>($r10);

     label7:
        $r7 = $r10;

        goto label1;

     label8:
        return $r3;
    }

    public org.dom4j.Document read(java.io.File)
    {
        org.dom4j.Document $r5;
        java.io.BufferedReader $r1;
        java.io.FileReader $r2;
        java.lang.String $r4;
        org.dom4j.io.XPPReader r0;
        java.io.File $r3;

        r0 := @this: org.dom4j.io.XPPReader;

        $r3 := @parameter0: java.io.File;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r1 = new java.io.BufferedReader;

        $r2 = new java.io.FileReader;

        specialinvoke $r2.<java.io.FileReader: void <init>(java.io.File)>($r3);

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

        $r5 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r1, $r4);

        return $r5;
    }

    public org.dom4j.Document read(java.io.InputStream)
    {
        org.dom4j.Document $r3;
        java.io.Reader $r2;
        org.dom4j.io.XPPReader r0;
        java.io.InputStream $r1;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPPReader: java.io.Reader createReader(java.io.InputStream)>($r1);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.Document read(java.io.Reader)>($r2);

        return $r3;
    }

    public org.dom4j.Document read(java.io.InputStream, java.lang.String)
    {
        org.dom4j.Document $r4;
        java.lang.String $r1;
        java.io.Reader $r3;
        org.dom4j.io.XPPReader r0;
        java.io.InputStream $r2;

        r0 := @this: org.dom4j.io.XPPReader;

        $r2 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.io.XPPReader: java.io.Reader createReader(java.io.InputStream)>($r2);

        $r4 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r3, $r1);

        return $r4;
    }

    public org.dom4j.Document read(java.io.Reader)
    {
        org.dom4j.Document $r3;
        org.gjt.xpp.XmlPullParser $r2;
        java.io.Reader $r1;
        org.dom4j.io.XPPReader r0;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: java.io.Reader;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParser getXPPParser()>();

        interfaceinvoke $r2.<org.gjt.xpp.XmlPullParser: void setInput(java.io.Reader)>($r1);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.Document parseDocument()>();

        return $r3;
    }

    public org.dom4j.Document read(java.io.Reader, java.lang.String)
    {
        org.dom4j.Document $r2;
        java.lang.String $r1;
        java.io.Reader $r3;
        org.dom4j.io.XPPReader r0;

        r0 := @this: org.dom4j.io.XPPReader;

        $r3 := @parameter0: java.io.Reader;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.Document read(java.io.Reader)>($r3);

        interfaceinvoke $r2.<org.dom4j.Node: void setName(java.lang.String)>($r1);

        return $r2;
    }

    public org.dom4j.Document read(java.lang.String)
    {
        org.dom4j.Document $r3;
        java.net.URL $r2;
        int $i0;
        java.lang.String $r1;
        org.dom4j.io.XPPReader r0;
        java.io.File $r4;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label1;

        $r2 = new java.net.URL;

        specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.Document read(java.net.URL)>($r2);

        return $r3;

     label1:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.Document read(java.io.File)>($r4);

        return $r3;
    }

    public org.dom4j.Document read(java.net.URL)
    {
        org.dom4j.Document $r5;
        java.net.URL $r1;
        java.lang.String $r2;
        java.io.Reader $r4;
        org.dom4j.io.XPPReader r0;
        java.io.InputStream $r3;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: java.net.URL;

        $r2 = virtualinvoke $r1.<java.net.URL: java.lang.String toExternalForm()>();

        $r3 = staticinvoke <com.google.firebase.perf.network.FirebasePerfUrlConnection: java.io.InputStream openStream(java.net.URL)>($r1);

        $r4 = virtualinvoke r0.<org.dom4j.io.XPPReader: java.io.Reader createReader(java.io.InputStream)>($r3);

        $r5 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r4, $r2);

        return $r5;
    }

    public org.dom4j.Document read(char[])
    {
        org.dom4j.Document $r3;
        char[] $r1;
        org.gjt.xpp.XmlPullParser $r2;
        org.dom4j.io.XPPReader r0;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: char[];

        $r2 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParser getXPPParser()>();

        interfaceinvoke $r2.<org.gjt.xpp.XmlPullParser: void setInput(char[])>($r1);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.Document parseDocument()>();

        return $r3;
    }

    public void removeHandler(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.io.DispatchHandler $r2;
        org.dom4j.io.XPPReader r0;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r2.<org.dom4j.io.DispatchHandler: org.dom4j.ElementHandler removeHandler(java.lang.String)>($r1);

        return;
    }

    public void setDefaultHandler(org.dom4j.ElementHandler)
    {
        org.dom4j.io.DispatchHandler $r2;
        org.dom4j.io.XPPReader r0;
        org.dom4j.ElementHandler $r1;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: org.dom4j.ElementHandler;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPPReader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r2.<org.dom4j.io.DispatchHandler: void setDefaultHandler(org.dom4j.ElementHandler)>($r1);

        return;
    }

    public void setDispatchHandler(org.dom4j.io.DispatchHandler)
    {
        org.dom4j.io.DispatchHandler $r1;
        org.dom4j.io.XPPReader r0;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: org.dom4j.io.DispatchHandler;

        r0.<org.dom4j.io.XPPReader: org.dom4j.io.DispatchHandler dispatchHandler> = $r1;

        return;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.XPPReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        r0.<org.dom4j.io.XPPReader: org.dom4j.DocumentFactory factory> = $r1;

        return;
    }

    public void setXPPFactory(org.gjt.xpp.XmlPullParserFactory)
    {
        org.dom4j.io.XPPReader r0;
        org.gjt.xpp.XmlPullParserFactory $r1;

        r0 := @this: org.dom4j.io.XPPReader;

        $r1 := @parameter0: org.gjt.xpp.XmlPullParserFactory;

        r0.<org.dom4j.io.XPPReader: org.gjt.xpp.XmlPullParserFactory xppFactory> = $r1;

        return;
    }
}
