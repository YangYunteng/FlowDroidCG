public class project.android.imageprocessing.filter.effect.PolarPixellateFilter extends project.android.imageprocessing.filter.BasicFilter
{
    public static final java.lang.String UNIFORM_CENTER;
    public static final java.lang.String UNIFORM_FRACTIONAL_SIZE;
    public android.graphics.PointF center;
    public int centerHandle;
    public android.graphics.PointF fractionalSize;
    public int fractionalSizeHandle;

    public void <init>(android.graphics.PointF, android.graphics.PointF)
    {
        project.android.imageprocessing.filter.effect.PolarPixellateFilter r0;
        android.graphics.PointF $r1, $r2;

        r0 := @this: project.android.imageprocessing.filter.effect.PolarPixellateFilter;

        $r1 := @parameter0: android.graphics.PointF;

        $r2 := @parameter1: android.graphics.PointF;

        specialinvoke r0.<project.android.imageprocessing.filter.BasicFilter: void <init>()>();

        r0.<project.android.imageprocessing.filter.effect.PolarPixellateFilter: android.graphics.PointF center> = $r1;

        r0.<project.android.imageprocessing.filter.effect.PolarPixellateFilter: android.graphics.PointF fractionalSize> = $r2;

        return;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.filter.effect.PolarPixellateFilter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.PolarPixellateFilter;

        return "precision mediump float;\nuniform sampler2D u_Texture0;\nvarying vec2 v_TexCoord;\nuniform vec2 u_FractionalSize;\nuniform vec2 u_Center;\nvoid main(){\n  highp vec2 normCoord = 2.0 * v_TexCoord - 1.0;\n  highp vec2 normCenter = 2.0 * u_Center - 1.0;\n  normCoord -= normCenter;\n  highp float r = length(normCoord);\n  highp float phi = atan(normCoord.y, normCoord.x);\n  r = r - mod(r, u_FractionalSize.x) + 0.03;\n  phi = phi - mod(phi, u_FractionalSize.y);\n  normCoord.x = r * cos(phi);\n  normCoord.y = r * sin(phi);\n  normCoord += normCenter;\n  mediump vec2 textureCoordinateToUse = normCoord / 2.0 + 0.5;\n  gl_FragColor = texture2D(u_Texture0, textureCoordinateToUse);\n}\n";
    }

    public void initShaderHandles()
    {
        project.android.imageprocessing.filter.effect.PolarPixellateFilter r0;
        int $i0;

        r0 := @this: project.android.imageprocessing.filter.effect.PolarPixellateFilter;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void initShaderHandles()>();

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_FractionalSize");

        r0.<project.android.imageprocessing.filter.effect.PolarPixellateFilter: int fractionalSizeHandle> = $i0;

        $i0 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $i0 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i0, "u_Center");

        r0.<project.android.imageprocessing.filter.effect.PolarPixellateFilter: int centerHandle> = $i0;

        return;
    }

    public void passShaderValues()
    {
        project.android.imageprocessing.filter.effect.PolarPixellateFilter r0;
        android.graphics.PointF $r1;
        int $i0;
        float $f0, $f1;

        r0 := @this: project.android.imageprocessing.filter.effect.PolarPixellateFilter;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void passShaderValues()>();

        $i0 = r0.<project.android.imageprocessing.filter.effect.PolarPixellateFilter: int fractionalSizeHandle>;

        $r1 = r0.<project.android.imageprocessing.filter.effect.PolarPixellateFilter: android.graphics.PointF fractionalSize>;

        $f0 = $r1.<android.graphics.PointF: float x>;

        $f1 = $r1.<android.graphics.PointF: float y>;

        staticinvoke <android.opengl.GLES20: void glUniform2f(int,float,float)>($i0, $f0, $f1);

        $i0 = r0.<project.android.imageprocessing.filter.effect.PolarPixellateFilter: int centerHandle>;

        $r1 = r0.<project.android.imageprocessing.filter.effect.PolarPixellateFilter: android.graphics.PointF center>;

        $f0 = $r1.<android.graphics.PointF: float x>;

        $f1 = $r1.<android.graphics.PointF: float y>;

        staticinvoke <android.opengl.GLES20: void glUniform2f(int,float,float)>($i0, $f0, $f1);

        return;
    }

    public static void <clinit>()
    {
        <project.android.imageprocessing.filter.effect.PolarPixellateFilter: java.lang.String UNIFORM_FRACTIONAL_SIZE> = "u_FractionalSize";

        <project.android.imageprocessing.filter.effect.PolarPixellateFilter: java.lang.String UNIFORM_CENTER> = "u_Center";

        return;
    }
}
