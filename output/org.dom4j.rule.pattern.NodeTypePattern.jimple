public class org.dom4j.rule.pattern.NodeTypePattern extends java.lang.Object implements org.dom4j.rule.Pattern
{
    public static final org.dom4j.rule.pattern.NodeTypePattern ANY_ATTRIBUTE;
    public static final org.dom4j.rule.pattern.NodeTypePattern ANY_COMMENT;
    public static final org.dom4j.rule.pattern.NodeTypePattern ANY_DOCUMENT;
    public static final org.dom4j.rule.pattern.NodeTypePattern ANY_ELEMENT;
    public static final org.dom4j.rule.pattern.NodeTypePattern ANY_PROCESSING_INSTRUCTION;
    public static final org.dom4j.rule.pattern.NodeTypePattern ANY_TEXT;
    public short nodeType;

    static void <clinit>()
    {
        org.dom4j.rule.pattern.NodeTypePattern $r0;

        $r0 = new org.dom4j.rule.pattern.NodeTypePattern;

        specialinvoke $r0.<org.dom4j.rule.pattern.NodeTypePattern: void <init>(short)>(2);

        <org.dom4j.rule.pattern.NodeTypePattern: org.dom4j.rule.pattern.NodeTypePattern ANY_ATTRIBUTE> = $r0;

        $r0 = new org.dom4j.rule.pattern.NodeTypePattern;

        specialinvoke $r0.<org.dom4j.rule.pattern.NodeTypePattern: void <init>(short)>(8);

        <org.dom4j.rule.pattern.NodeTypePattern: org.dom4j.rule.pattern.NodeTypePattern ANY_COMMENT> = $r0;

        $r0 = new org.dom4j.rule.pattern.NodeTypePattern;

        specialinvoke $r0.<org.dom4j.rule.pattern.NodeTypePattern: void <init>(short)>(9);

        <org.dom4j.rule.pattern.NodeTypePattern: org.dom4j.rule.pattern.NodeTypePattern ANY_DOCUMENT> = $r0;

        $r0 = new org.dom4j.rule.pattern.NodeTypePattern;

        specialinvoke $r0.<org.dom4j.rule.pattern.NodeTypePattern: void <init>(short)>(1);

        <org.dom4j.rule.pattern.NodeTypePattern: org.dom4j.rule.pattern.NodeTypePattern ANY_ELEMENT> = $r0;

        $r0 = new org.dom4j.rule.pattern.NodeTypePattern;

        specialinvoke $r0.<org.dom4j.rule.pattern.NodeTypePattern: void <init>(short)>(7);

        <org.dom4j.rule.pattern.NodeTypePattern: org.dom4j.rule.pattern.NodeTypePattern ANY_PROCESSING_INSTRUCTION> = $r0;

        $r0 = new org.dom4j.rule.pattern.NodeTypePattern;

        specialinvoke $r0.<org.dom4j.rule.pattern.NodeTypePattern: void <init>(short)>(3);

        <org.dom4j.rule.pattern.NodeTypePattern: org.dom4j.rule.pattern.NodeTypePattern ANY_TEXT> = $r0;

        return;
    }

    public void <init>(short)
    {
        short $s0;
        org.dom4j.rule.pattern.NodeTypePattern r0;

        r0 := @this: org.dom4j.rule.pattern.NodeTypePattern;

        $s0 := @parameter0: short;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.rule.pattern.NodeTypePattern: short nodeType> = $s0;

        return;
    }

    public short getMatchType()
    {
        short s0;
        org.dom4j.rule.pattern.NodeTypePattern r0;

        r0 := @this: org.dom4j.rule.pattern.NodeTypePattern;

        s0 = r0.<org.dom4j.rule.pattern.NodeTypePattern: short nodeType>;

        return s0;
    }

    public java.lang.String getMatchesNodeName()
    {
        org.dom4j.rule.pattern.NodeTypePattern r0;

        r0 := @this: org.dom4j.rule.pattern.NodeTypePattern;

        return null;
    }

    public double getPriority()
    {
        org.dom4j.rule.pattern.NodeTypePattern r0;

        r0 := @this: org.dom4j.rule.pattern.NodeTypePattern;

        return 0.5;
    }

    public org.dom4j.rule.Pattern[] getUnionPatterns()
    {
        org.dom4j.rule.pattern.NodeTypePattern r0;

        r0 := @this: org.dom4j.rule.pattern.NodeTypePattern;

        return null;
    }

    public boolean matches(org.dom4j.Node)
    {
        short $s0, $s1;
        org.dom4j.rule.pattern.NodeTypePattern r0;
        org.dom4j.Node $r1;
        int $i2, $i3;

        r0 := @this: org.dom4j.rule.pattern.NodeTypePattern;

        $r1 := @parameter0: org.dom4j.Node;

        $s1 = interfaceinvoke $r1.<org.dom4j.Node: short getNodeType()>();

        $s0 = r0.<org.dom4j.rule.pattern.NodeTypePattern: short nodeType>;

        $i2 = (int) $s1;

        $i3 = (int) $s0;

        if $i2 != $i3 goto label1;

        return 1;

     label1:
        return 0;
    }
}
