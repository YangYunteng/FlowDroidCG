public final class com.google.common.collect.Iterables$7 extends com.google.common.collect.FluentIterable
{
    public final java.lang.Iterable val$iterable;
    public final int val$limitSize;

    public void <init>(java.lang.Iterable, int)
    {
        int $i0;
        com.google.common.collect.Iterables$7 r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.Iterables$7;

        $r1 := @parameter0: java.lang.Iterable;

        $i0 := @parameter1: int;

        r0.<com.google.common.collect.Iterables$7: java.lang.Iterable val$iterable> = $r1;

        r0.<com.google.common.collect.Iterables$7: int val$limitSize> = $i0;

        specialinvoke r0.<com.google.common.collect.FluentIterable: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r2;
        com.google.common.collect.Iterables$7 r0;
        int $i0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.Iterables$7;

        $r1 = r0.<com.google.common.collect.Iterables$7: java.lang.Iterable val$iterable>;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $i0 = r0.<com.google.common.collect.Iterables$7: int val$limitSize>;

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator limit(java.util.Iterator,int)>($r2, $i0);

        return $r2;
    }

    public java.util.Spliterator spliterator()
    {
        java.util.stream.Stream $r2;
        com.google.common.collect.Iterables$7 r0;
        int $i0;
        long $l1;
        java.util.Spliterator $r3;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.Iterables$7;

        $r1 = r0.<com.google.common.collect.Iterables$7: java.lang.Iterable val$iterable>;

        $r2 = staticinvoke <com.google.common.collect.Streams: java.util.stream.Stream stream(java.lang.Iterable)>($r1);

        $i0 = r0.<com.google.common.collect.Iterables$7: int val$limitSize>;

        $l1 = (long) $i0;

        $r2 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream limit(long)>($l1);

        $r3 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.Spliterator spliterator()>();

        return $r3;
    }
}
