public final class com.google.common.base.Strings extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.base.Strings r0;

        r0 := @this: com.google.common.base.Strings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String commonPrefix(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        char $c2, $c3;
        int $i0, $i1, $i4, $i5;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label2;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $i4 = (int) $c2;

        $i5 = (int) $c3;

        if $i4 != $i5 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i1 = -1;

        $i1 = $i0 + $i1;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>($r0, $i1);

        if $z0 != 0 goto label3;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>($r1, $i1);

        if $z0 == 0 goto label4;

     label3:
        $i1 = -1;

        $i0 = $i0 + $i1;

     label4:
        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        $r2 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String commonSuffix(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        char $c3, $c4;
        int $i0, $i1, $i2, $i5;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label2;

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i2 = $i2 - $i0;

        $i5 = -1;

        $i2 = $i2 + $i5;

        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i2);

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i2 = $i2 - $i0;

        $i5 = -1;

        $i2 = $i2 + $i5;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i2);

        $i2 = (int) $c3;

        $i5 = (int) $c4;

        if $i2 != $i5 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = $i1 - $i0;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>($r0, $i1);

        if $z0 != 0 goto label3;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i1 - $i0;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>($r1, $i1);

        if $z0 == 0 goto label4;

     label3:
        $i1 = -1;

        $i0 = $i0 + $i1;

     label4:
        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i0 = $i1 - $i0;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r2 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String emptyToNull(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        return $r0;
    }

    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.google.common.base.Platform: boolean stringIsNullOrEmpty(java.lang.String)>($r0);

        return $z0;
    }

    public static java.lang.String nullToEmpty(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return "";

     label1:
        return $r0;
    }

    public static java.lang.String padEnd(java.lang.String, int, char)
    {
        int $i0, $i2;
        char $c1;
        java.lang.StringBuilder $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i2 < $i0 goto label1;

        return $r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

     label2:
        if $i2 >= $i0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static java.lang.String padStart(java.lang.String, int, char)
    {
        int $i0, $i2;
        char $c1;
        java.lang.StringBuilder $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i2 < $i0 goto label1;

        return $r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

     label2:
        if $i2 >= $i0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static java.lang.String repeat(java.lang.String, int)
    {
        long $l4, $l5;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        byte $b0;
        int $i1, $i2, $i3;
        char[] $r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i1 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = 1;

        if $i1 > 1 goto label3;

        if $i1 < 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "invalid count: %s", $i1);

        if $i1 != 0 goto label8;

        return "";

     label3:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i3 = $i2;

        $l4 = (long) $i2;

        $l5 = (long) $i1;

        $l4 = $l4 * $l5;

        $i1 = (int) $l4;

        $l5 = (long) $i1;

        $b0 = $l5 cmp $l4;

        if $b0 != 0 goto label6;

        $r1 = newarray (char)[$i1];

        virtualinvoke $r0.<java.lang.String: void getChars(int,int,char[],int)>(0, $i2, $r1, 0);

     label4:
        $i2 = $i1 - $i3;

        if $i3 >= $i2 goto label5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r1, $i3, $i3);

        $i3 = $i3 << 1;

        goto label4;

     label5:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r1, $i3, $i2);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r1);

        return $r0;

     label6:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Required array size too large: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r0);

        goto label7;

     label7:
        throw $r2;

     label8:
        return $r0;
    }

    public static boolean validSurrogatePairAt(java.lang.CharSequence, int)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i3;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        if $i0 < 0 goto label1;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i3 = -2;

        $i1 = $i1 + $i3;

        if $i0 > $i1 goto label1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c2);

        if $z0 == 0 goto label1;

        $i0 = $i0 + 1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
