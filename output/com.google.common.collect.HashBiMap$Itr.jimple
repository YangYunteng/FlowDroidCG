public abstract class com.google.common.collect.HashBiMap$Itr extends java.lang.Object implements java.util.Iterator
{
    public int expectedModCount;
    public com.google.common.collect.HashBiMap$BiEntry next;
    public final com.google.common.collect.HashBiMap this$0;
    public com.google.common.collect.HashBiMap$BiEntry toRemove;

    public void <init>(com.google.common.collect.HashBiMap)
    {
        com.google.common.collect.HashBiMap$Itr r0;
        com.google.common.collect.HashBiMap $r1;
        int $i0;
        com.google.common.collect.HashBiMap$BiEntry $r2;

        r0 := @this: com.google.common.collect.HashBiMap$Itr;

        $r1 := @parameter0: com.google.common.collect.HashBiMap;

        r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap this$0>;

        $r2 = staticinvoke <com.google.common.collect.HashBiMap: com.google.common.collect.HashBiMap$BiEntry access$000(com.google.common.collect.HashBiMap)>($r1);

        r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap$BiEntry next> = $r2;

        r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap$BiEntry toRemove> = null;

        $r1 = r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap this$0>;

        $i0 = staticinvoke <com.google.common.collect.HashBiMap: int access$100(com.google.common.collect.HashBiMap)>($r1);

        r0.<com.google.common.collect.HashBiMap$Itr: int expectedModCount> = $i0;

        return;
    }

    public boolean hasNext()
    {
        com.google.common.collect.HashBiMap$Itr r0;
        com.google.common.collect.HashBiMap $r1;
        int $i0, $i1;
        com.google.common.collect.HashBiMap$BiEntry $r2;
        java.util.ConcurrentModificationException $r3;

        r0 := @this: com.google.common.collect.HashBiMap$Itr;

        $r1 = r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap this$0>;

        $i1 = staticinvoke <com.google.common.collect.HashBiMap: int access$100(com.google.common.collect.HashBiMap)>($r1);

        $i0 = r0.<com.google.common.collect.HashBiMap$Itr: int expectedModCount>;

        if $i1 != $i0 goto label2;

        $r2 = r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap$BiEntry next>;

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;
    }

    public java.lang.Object next()
    {
        com.google.common.collect.HashBiMap$Itr r0;
        com.google.common.collect.HashBiMap$BiEntry $r1, $r2;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.HashBiMap$Itr;

        $z0 = virtualinvoke r0.<com.google.common.collect.HashBiMap$Itr: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap$BiEntry next>;

        $r1 = $r2.<com.google.common.collect.HashBiMap$BiEntry: com.google.common.collect.HashBiMap$BiEntry nextInKeyInsertionOrder>;

        r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap$BiEntry next> = $r1;

        r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap$BiEntry toRemove> = $r2;

        $r3 = virtualinvoke r0.<com.google.common.collect.HashBiMap$Itr: java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry)>($r2);

        return $r3;

     label1:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;
    }

    public abstract java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry);

    public void remove()
    {
        com.google.common.collect.HashBiMap$Itr r0;
        com.google.common.collect.HashBiMap $r1;
        int $i0, $i1;
        com.google.common.collect.HashBiMap$BiEntry $r2;
        java.util.ConcurrentModificationException $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.HashBiMap$Itr;

        $r1 = r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap this$0>;

        $i0 = staticinvoke <com.google.common.collect.HashBiMap: int access$100(com.google.common.collect.HashBiMap)>($r1);

        $i1 = r0.<com.google.common.collect.HashBiMap$Itr: int expectedModCount>;

        if $i0 != $i1 goto label3;

        $r2 = r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap$BiEntry toRemove>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.collect.CollectPreconditions: void checkRemove(boolean)>($z0);

        $r1 = r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap this$0>;

        $r2 = r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap$BiEntry toRemove>;

        staticinvoke <com.google.common.collect.HashBiMap: void access$200(com.google.common.collect.HashBiMap,com.google.common.collect.HashBiMap$BiEntry)>($r1, $r2);

        $r1 = r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap this$0>;

        $i0 = staticinvoke <com.google.common.collect.HashBiMap: int access$100(com.google.common.collect.HashBiMap)>($r1);

        r0.<com.google.common.collect.HashBiMap$Itr: int expectedModCount> = $i0;

        r0.<com.google.common.collect.HashBiMap$Itr: com.google.common.collect.HashBiMap$BiEntry toRemove> = null;

        return;

     label3:
        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;
    }
}
