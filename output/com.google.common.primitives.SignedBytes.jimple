public final class com.google.common.primitives.SignedBytes extends java.lang.Object
{
    public static final byte MAX_POWER_OF_TWO;

    public void <init>()
    {
        com.google.common.primitives.SignedBytes r0;

        r0 := @this: com.google.common.primitives.SignedBytes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte checkedCast(long)
    {
        byte $b1, $b3;
        int $i2;
        long $l0, $l4;
        boolean $z0;

        $l0 := @parameter0: long;

        $i2 = (int) $l0;

        $b3 = (byte) $i2;

        $l4 = (long) $b3;

        $b1 = $l4 cmp $l0;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "Out of range: %s", $l0);

        return $b3;
    }

    public static int compare(byte, byte)
    {
        byte $b0, $b1;
        int $i2, $i3;

        $b1 := @parameter0: byte;

        $b0 := @parameter1: byte;

        $i2 = (int) $b1;

        $i3 = (int) $b0;

        $i2 = $i2 - $i3;

        return $i2;
    }

    public static transient java.lang.String join(java.lang.String, byte[])
    {
        byte[] $r0;
        byte $b1;
        int $i0, $i2;
        java.lang.StringBuilder $r2, $r3;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: byte[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r3 = new java.lang.StringBuilder;

        $r2 = $r3;

        $i0 = lengthof $r0;

        $i0 = $i0 * 5;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i0);

        $b1 = $r0[0];

        $i0 = (int) $b1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $i0 = 1;

     label2:
        $i2 = lengthof $r0;

        if $i0 >= $i2 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $b1 = $r0[$i0];

        $i2 = (int) $b1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.google.common.primitives.SignedBytes$LexicographicalComparator r0;

        r0 = <com.google.common.primitives.SignedBytes$LexicographicalComparator: com.google.common.primitives.SignedBytes$LexicographicalComparator INSTANCE>;

        return r0;
    }

    public static transient byte max(byte[])
    {
        byte[] $r0;
        byte $b2, $b3;
        int $i0, $i1, $i4;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $b2 = $r0[0];

     label3:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label5;

        $b3 = $r0[$i1];

        $i0 = (int) $b3;

        $i4 = (int) $b2;

        if $i0 <= $i4 goto label4;

        $b2 = $r0[$i1];

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return $b2;
    }

    public static transient byte min(byte[])
    {
        byte[] $r0;
        byte $b2, $b3;
        int $i0, $i1, $i4;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $i1 = 1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $b2 = $r0[0];

     label3:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label5;

        $b3 = $r0[$i1];

        $i0 = (int) $b3;

        $i4 = (int) $b2;

        if $i0 >= $i4 goto label4;

        $b2 = $r0[$i1];

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return $b2;
    }

    public static byte saturatedCast(long)
    {
        int $i0;
        long $l1;
        byte $b2;

        $l1 := @parameter0: long;

        $b2 = $l1 cmp 127L;

        $i0 = (int) $b2;

        if $i0 <= 0 goto label1;

        return 127;

     label1:
        $b2 = $l1 cmp -128L;

        $i0 = (int) $b2;

        if $i0 >= 0 goto label2;

        return -128;

     label2:
        $i0 = (int) $l1;

        $b2 = (byte) $i0;

        return $b2;
    }

    public static void sortDescending(byte[])
    {
        int $i0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.SignedBytes: void sortDescending(byte[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void sortDescending(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, $i2);

        staticinvoke <java.util.Arrays: void sort(byte[],int,int)>($r0, $i0, $i1);

        staticinvoke <com.google.common.primitives.Bytes: void reverse(byte[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static void <clinit>()
    {
        <com.google.common.primitives.SignedBytes: byte MAX_POWER_OF_TWO> = 64;

        return;
    }
}
