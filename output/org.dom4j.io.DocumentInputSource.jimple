public class org.dom4j.io.DocumentInputSource extends org.xml.sax.InputSource
{
    public org.dom4j.Document document;

    public void <init>()
    {
        org.dom4j.io.DocumentInputSource r0;

        r0 := @this: org.dom4j.io.DocumentInputSource;

        specialinvoke r0.<org.xml.sax.InputSource: void <init>()>();

        return;
    }

    public void <init>(org.dom4j.Document)
    {
        org.dom4j.io.DocumentInputSource r0;
        org.dom4j.Document $r2;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.DocumentInputSource;

        $r2 := @parameter0: org.dom4j.Document;

        specialinvoke r0.<org.xml.sax.InputSource: void <init>()>();

        r0.<org.dom4j.io.DocumentInputSource: org.dom4j.Document document> = $r2;

        $r1 = interfaceinvoke $r2.<org.dom4j.Node: java.lang.String getName()>();

        virtualinvoke r0.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>($r1);

        return;
    }

    public java.io.Reader getCharacterStream()
    {
        org.dom4j.Document $r1;
        java.io.StringWriter $r3;
        org.dom4j.io.XMLWriter $r4;
        java.io.IOException $r6;
        org.dom4j.io.DocumentInputSource$1 $r7;
        java.io.StringReader $r5;
        org.dom4j.io.DocumentInputSource r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.io.DocumentInputSource;

        $r3 = new java.io.StringWriter;

     label1:
        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

     label2:
        $r4 = new org.dom4j.io.XMLWriter;

     label3:
        specialinvoke $r4.<org.dom4j.io.XMLWriter: void <init>(java.io.Writer)>($r3);

     label4:
        $r1 = r0.<org.dom4j.io.DocumentInputSource: org.dom4j.Document document>;

     label5:
        virtualinvoke $r4.<org.dom4j.io.XMLWriter: void write(org.dom4j.Document)>($r1);

        virtualinvoke $r4.<org.dom4j.io.XMLWriter: void flush()>();

     label6:
        $r5 = new java.io.StringReader;

     label7:
        $r2 = virtualinvoke $r3.<java.io.StringWriter: java.lang.String toString()>();

        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>($r2);

     label8:
        return $r5;

     label9:
        $r6 := @caughtexception;

        $r7 = new org.dom4j.io.DocumentInputSource$1;

        specialinvoke $r7.<org.dom4j.io.DocumentInputSource$1: void <init>(org.dom4j.io.DocumentInputSource,java.io.IOException)>(r0, $r6);

        return $r7;

        catch java.io.IOException from label1 to label2 with label9;
        catch java.io.IOException from label3 to label4 with label9;
        catch java.io.IOException from label5 to label6 with label9;
        catch java.io.IOException from label7 to label8 with label9;
    }

    public org.dom4j.Document getDocument()
    {
        org.dom4j.io.DocumentInputSource r0;
        org.dom4j.Document r1;

        r0 := @this: org.dom4j.io.DocumentInputSource;

        r1 = r0.<org.dom4j.io.DocumentInputSource: org.dom4j.Document document>;

        return r1;
    }

    public void setCharacterStream(java.io.Reader)
    {
        org.dom4j.io.DocumentInputSource r0;
        java.lang.UnsupportedOperationException $r2;
        java.io.Reader $r1;

        r0 := @this: org.dom4j.io.DocumentInputSource;

        $r1 := @parameter0: java.io.Reader;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setDocument(org.dom4j.Document)
    {
        org.dom4j.io.DocumentInputSource r0;
        org.dom4j.Document $r2;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.DocumentInputSource;

        $r2 := @parameter0: org.dom4j.Document;

        r0.<org.dom4j.io.DocumentInputSource: org.dom4j.Document document> = $r2;

        $r1 = interfaceinvoke $r2.<org.dom4j.Node: java.lang.String getName()>();

        virtualinvoke r0.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>($r1);

        return;
    }
}
