public abstract class com.google.common.hash.AbstractByteHasher extends com.google.common.hash.AbstractHasher
{
    public final java.nio.ByteBuffer scratch;

    public void <init>()
    {
        java.nio.ByteOrder $r1;
        com.google.common.hash.AbstractByteHasher r0;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        specialinvoke r0.<com.google.common.hash.AbstractHasher: void <init>()>();

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        r0.<com.google.common.hash.AbstractByteHasher: java.nio.ByteBuffer scratch> = $r2;

        return;
    }

    private com.google.common.hash.Hasher update(int)
    {
        java.lang.Throwable $r3;
        byte[] $r1;
        com.google.common.hash.AbstractByteHasher r0;
        int $i0;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.google.common.hash.AbstractByteHasher: java.nio.ByteBuffer scratch>;

        $r1 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: void update(byte[],int,int)>($r1, 0, $i0);

     label2:
        $r2 = r0.<com.google.common.hash.AbstractByteHasher: java.nio.ByteBuffer scratch>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        return r0;

     label3:
        $r3 := @caughtexception;

        $r2 = r0.<com.google.common.hash.AbstractByteHasher: java.nio.ByteBuffer scratch>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public com.google.common.hash.Hasher putByte(byte)
    {
        com.google.common.hash.AbstractByteHasher r0;
        byte $b0;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $b0 := @parameter0: byte;

        virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: void update(byte)>($b0);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putByte(byte)
    {
        com.google.common.hash.AbstractByteHasher r0;
        com.google.common.hash.Hasher $r1;
        byte $b0;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $b0 := @parameter0: byte;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher putByte(byte)>($b0);

        return $r1;
    }

    public com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)
    {
        com.google.common.hash.AbstractByteHasher r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: void update(java.nio.ByteBuffer)>($r1);

        return r0;
    }

    public com.google.common.hash.Hasher putBytes(byte[])
    {
        byte[] $r1;
        com.google.common.hash.AbstractByteHasher r0;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $r1 := @parameter0: byte[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: void update(byte[])>($r1);

        return r0;
    }

    public com.google.common.hash.Hasher putBytes(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.hash.AbstractByteHasher r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i2, $i3);

        virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: void update(byte[],int,int)>($r1, $i0, $i1);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer)
    {
        com.google.common.hash.AbstractByteHasher r0;
        com.google.common.hash.Hasher $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $r2 := @parameter0: java.nio.ByteBuffer;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)>($r2);

        return $r1;
    }

    public volatile com.google.common.hash.PrimitiveSink putBytes(byte[])
    {
        byte[] $r2;
        com.google.common.hash.AbstractByteHasher r0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $r2 := @parameter0: byte[];

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher putBytes(byte[])>($r2);

        return $r1;
    }

    public volatile com.google.common.hash.PrimitiveSink putBytes(byte[], int, int)
    {
        byte[] $r2;
        com.google.common.hash.AbstractByteHasher r0;
        int $i0, $i1;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $r2 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>($r2, $i0, $i1);

        return $r1;
    }

    public com.google.common.hash.Hasher putChar(char)
    {
        com.google.common.hash.AbstractByteHasher r0;
        char $c0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $c0 := @parameter0: char;

        $r1 = r0.<com.google.common.hash.AbstractByteHasher: java.nio.ByteBuffer scratch>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>($c0);

        specialinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher update(int)>(2);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putChar(char)
    {
        com.google.common.hash.AbstractByteHasher r0;
        char $c0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher putChar(char)>($c0);

        return $r1;
    }

    public com.google.common.hash.Hasher putInt(int)
    {
        int $i0;
        com.google.common.hash.AbstractByteHasher r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.hash.AbstractByteHasher: java.nio.ByteBuffer scratch>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        specialinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher update(int)>(4);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putInt(int)
    {
        int $i0;
        com.google.common.hash.AbstractByteHasher r0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher putInt(int)>($i0);

        return $r1;
    }

    public com.google.common.hash.Hasher putLong(long)
    {
        com.google.common.hash.AbstractByteHasher r0;
        long $l0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $l0 := @parameter0: long;

        $r1 = r0.<com.google.common.hash.AbstractByteHasher: java.nio.ByteBuffer scratch>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l0);

        specialinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher update(int)>(8);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putLong(long)
    {
        com.google.common.hash.AbstractByteHasher r0;
        long $l0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher putLong(long)>($l0);

        return $r1;
    }

    public com.google.common.hash.Hasher putShort(short)
    {
        com.google.common.hash.AbstractByteHasher r0;
        short $s0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $s0 := @parameter0: short;

        $r1 = r0.<com.google.common.hash.AbstractByteHasher: java.nio.ByteBuffer scratch>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s0);

        specialinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher update(int)>(2);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putShort(short)
    {
        com.google.common.hash.AbstractByteHasher r0;
        short $s0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $s0 := @parameter0: short;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: com.google.common.hash.Hasher putShort(short)>($s0);

        return $r1;
    }

    public abstract void update(byte);

    public void update(java.nio.ByteBuffer)
    {
        byte[] $r2;
        com.google.common.hash.AbstractByteHasher r0;
        byte $b2;
        int $i0, $i1;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: void update(byte[],int,int)>($r2, $i0, $i1);

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i0);

        return;

     label1:
        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

     label2:
        if $i0 <= 0 goto label3;

        $b2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: void update(byte)>($b2);

        $i1 = -1;

        $i0 = $i0 + $i1;

        goto label2;

     label3:
        return;
    }

    public void update(byte[])
    {
        int $i0;
        byte[] $r1;
        com.google.common.hash.AbstractByteHasher r0;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: void update(byte[],int,int)>($r1, 0, $i0);

        return;
    }

    public void update(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.hash.AbstractByteHasher r0;
        byte $b4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.google.common.hash.AbstractByteHasher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0;

     label1:
        $i3 = $i0 + $i1;

        if $i2 >= $i3 goto label2;

        $b4 = $r1[$i2];

        virtualinvoke r0.<com.google.common.hash.AbstractByteHasher: void update(byte)>($b4);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }
}
