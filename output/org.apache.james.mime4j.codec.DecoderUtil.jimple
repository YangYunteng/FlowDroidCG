public class org.apache.james.mime4j.codec.DecoderUtil extends java.lang.Object
{
    public static final java.util.regex.Pattern PATTERN_ENCODED_WORD;
    public static org.apache.commons.logging.Log log;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;
        java.util.regex.Pattern $r1;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/james/mime4j/codec/DecoderUtil;");

        <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("(.*?)=\\?([^\\?]+?)\\?(\\w)\\?([^\\?]+?)\\?=", 32);

        <org.apache.james.mime4j.codec.DecoderUtil: java.util.regex.Pattern PATTERN_ENCODED_WORD> = $r1;

        return;
    }

    public void <init>()
    {
        org.apache.james.mime4j.codec.DecoderUtil r0;

        r0 := @this: org.apache.james.mime4j.codec.DecoderUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String decodeB(java.lang.String, java.lang.String)
    {
        byte[] $r2;
        java.lang.String $r0, $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeBase64(java.lang.String)>($r1);

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, $r0);

        return $r1;
    }

    public static byte[] decodeBase64(java.lang.String)
    {
        byte[] $r2;
        java.lang.IllegalStateException $r10;
        java.io.ByteArrayOutputStream $r1, $r7;
        java.io.IOException $r5;
        java.io.ByteArrayInputStream $r4, $r8;
        int $i0, $i1;
        org.apache.commons.logging.Log $r6;
        java.lang.String $r0;
        org.apache.james.mime4j.codec.Base64InputStream $r3, $r9;

        $r0 := @parameter0: java.lang.String;

        $r7 = new java.io.ByteArrayOutputStream;

        $r1 = $r7;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

     label01:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label02:
        $r9 = new org.apache.james.mime4j.codec.Base64InputStream;

        $r3 = $r9;

        $r8 = new java.io.ByteArrayInputStream;

        $r4 = $r8;

     label03:
        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        specialinvoke $r9.<org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream)>($r4);

     label04:
        $i0 = virtualinvoke $r3.<org.apache.james.mime4j.codec.Base64InputStream: int read()>();

     label05:
        $i1 = -1;

        if $i0 == $i1 goto label08;

     label06:
        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>($i0);

     label07:
        goto label04;

     label08:
        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;

     label09:
        $r5 := @caughtexception;

        $r6 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r5);

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r5);

        goto label10;

     label10:
        throw $r10;

        catch java.io.IOException from label01 to label02 with label09;
        catch java.io.IOException from label03 to label05 with label09;
        catch java.io.IOException from label06 to label07 with label09;
    }

    public static java.lang.String decodeEncodedWords(java.lang.String)
    {
        java.util.regex.Matcher $r3;
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r4, $r5, $r6, $r7;
        java.util.regex.Pattern $r2;
        boolean $z0, $z1;

        $r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = <org.apache.james.mime4j.codec.DecoderUtil: java.util.regex.Pattern PATTERN_ENCODED_WORD>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $i0 = 0;

        $z0 = 0;

     label1:
        $z1 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label8;

        $z1 = 1;

        $r4 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r5 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r6 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $r7 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $r5 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String tryDecodeEncodedWord(java.lang.String,java.lang.String,java.lang.String)>($r5, $r6, $r7);

        if $r5 != null goto label2;

        $r4 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        goto label5;

     label2:
        if $z0 == 0 goto label3;

        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(java.lang.String)>($r4);

        if $z0 != 0 goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label5:
        $i0 = virtualinvoke $r3.<java.util.regex.Matcher: int end()>();

        if $r5 == null goto label6;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        $z0 = $z1;

        goto label1;

     label8:
        if $i0 != 0 goto label9;

        return $r1;

     label9:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String decodeQ(java.lang.String, java.lang.String)
    {
        byte[] $r2;
        java.lang.String $r0, $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String replaceUnderscores(java.lang.String)>($r1);

        $r2 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeQuotedPrintable(java.lang.String)>($r1);

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, $r0);

        return $r1;
    }

    public static byte[] decodeQuotedPrintable(java.lang.String)
    {
        byte[] $r2;
        java.lang.IllegalStateException $r10;
        java.io.ByteArrayOutputStream $r1, $r7;
        java.io.IOException $r5;
        org.apache.james.mime4j.codec.QuotedPrintableInputStream $r3, $r9;
        java.io.ByteArrayInputStream $r4, $r8;
        int $i0, $i1;
        org.apache.commons.logging.Log $r6;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r7 = new java.io.ByteArrayOutputStream;

        $r1 = $r7;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

     label01:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label02:
        $r9 = new org.apache.james.mime4j.codec.QuotedPrintableInputStream;

        $r3 = $r9;

        $r8 = new java.io.ByteArrayInputStream;

        $r4 = $r8;

     label03:
        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        specialinvoke $r9.<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void <init>(java.io.InputStream)>($r4);

     label04:
        $i0 = virtualinvoke $r3.<org.apache.james.mime4j.codec.QuotedPrintableInputStream: int read()>();

     label05:
        $i1 = -1;

        if $i0 == $i1 goto label08;

     label06:
        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>($i0);

     label07:
        goto label04;

     label08:
        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;

     label09:
        $r5 := @caughtexception;

        $r6 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r5);

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r5);

        goto label10;

     label10:
        throw $r10;

        catch java.io.IOException from label01 to label02 with label09;
        catch java.io.IOException from label03 to label05 with label09;
        catch java.io.IOException from label06 to label07 with label09;
    }

    public static java.lang.String recombine(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r2;
        java.lang.String $r0, $r1, $r3;

        $r3 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String replaceUnderscores(java.lang.String)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r2;
        char $c2;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        $r0 = $r2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(128);

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label4;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i1 = (int) $c2;

        if $i1 != 95 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=20");

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String tryDecodeEncodedWord(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.RuntimeException $r6;
        int $i0;
        org.apache.commons.logging.Log $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r0, $r1, $r2, $r3;
        java.io.UnsupportedEncodingException $r7;
        boolean $z0;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: java.lang.String toJavaCharset(java.lang.String)>($r2);

        if $r3 != null goto label01;

        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label18;

        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MIME charset \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in encoded word \'");

        $r2 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String recombine(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t have a ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("corresponding Java charset");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r2);

        return null;

     label01:
        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isDecodingSupported(java.lang.String)>($r3);

        if $z0 != 0 goto label02;

        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label18;

        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current JDK doesn\'t support decoding of charset \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (MIME charset \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in encoded word \'");

        $r2 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String recombine(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r2);

        return null;

     label02:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label18;

        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing encoded text in encoded word: \'");

        $r2 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String recombine(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r2);

        return null;

     label03:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Q");

     label04:
        if $z0 == 0 goto label07;

     label05:
        $r3 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeQ(java.lang.String,java.lang.String)>($r1, $r3);

     label06:
        return $r3;

     label07:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("B");

     label08:
        if $z0 == 0 goto label11;

     label09:
        $r3 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeB(java.lang.String,java.lang.String)>($r1, $r3);

     label10:
        return $r3;

     label11:
        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

     label12:
        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

     label13:
        if $z0 == 0 goto label18;

        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        $r5 = new java.lang.StringBuilder;

     label14:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: Unknown encoding in encoded word \'");

        $r3 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String recombine(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r3);

     label15:
        return null;

     label16:
        $r6 := @caughtexception;

        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label18;

        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not decode encoded word \'");

        $r2 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String recombine(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r2, $r6);

        return null;

     label17:
        $r7 := @caughtexception;

        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label18;

        $r4 = <org.apache.james.mime4j.codec.DecoderUtil: org.apache.commons.logging.Log log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported encoding in encoded word \'");

        $r2 = staticinvoke <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String recombine(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r2, $r7);

     label18:
        return null;

        catch java.io.UnsupportedEncodingException from label03 to label04 with label17;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label17;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label17;
        catch java.io.UnsupportedEncodingException from label09 to label10 with label17;
        catch java.io.UnsupportedEncodingException from label12 to label13 with label17;
        catch java.io.UnsupportedEncodingException from label14 to label15 with label17;
        catch java.lang.RuntimeException from label03 to label04 with label16;
        catch java.lang.RuntimeException from label05 to label06 with label16;
        catch java.lang.RuntimeException from label07 to label08 with label16;
        catch java.lang.RuntimeException from label09 to label10 with label16;
        catch java.lang.RuntimeException from label12 to label13 with label16;
        catch java.lang.RuntimeException from label14 to label15 with label16;
    }
}
