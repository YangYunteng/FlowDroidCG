public class project.android.imageprocessing.filter.processing.FlipFilter extends project.android.imageprocessing.filter.BasicFilter
{
    public static final int FLIP_BOTH;
    public static final int FLIP_HORIZONTAL;
    public static final int FLIP_VERTICAL;

    public void <init>(int)
    {
        java.nio.FloatBuffer $r5;
        float[] $r2;
        java.nio.ByteBuffer $r3;
        java.nio.ByteOrder $r4;
        project.android.imageprocessing.filter.processing.FlipFilter r0;
        java.nio.FloatBuffer[] $r1;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3;

        r0 := @this: project.android.imageprocessing.filter.processing.FlipFilter;

        $i0 := @parameter0: int;

        specialinvoke r0.<project.android.imageprocessing.filter.BasicFilter: void <init>()>();

        $r1 = newarray (java.nio.FloatBuffer)[4];

        r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices> = $r1;

        $f0 = 1.0F;

        $f1 = 0.0F;

        if $i0 == 0 goto label5;

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        $f2 = 1.0F;

        $f0 = 0.0F;

     label1:
        $f3 = 1.0F;

        goto label6;

     label2:
        $f2 = 0.0F;

        goto label4;

     label3:
        $f2 = 1.0F;

        $f0 = 0.0F;

     label4:
        $f1 = 1.0F;

        $f3 = 0.0F;

        goto label6;

     label5:
        $f2 = 0.0F;

        goto label1;

     label6:
        $r2 = newarray (float)[8];

        $i0 = 0;

        $r2[0] = $f0;

        $r2[1] = $f1;

        $r2[2] = $f2;

        $r2[3] = $f1;

        $r2[4] = $f0;

        $r2[5] = $f3;

        $r2[6] = $f2;

        $r2[7] = $f3;

        $r1 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i1 = lengthof $r2;

        $i1 = $i1 * 4;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i1);

        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r3 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        $r5 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r1[0] = $r5;

        $r1 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r5 = $r1[0];

        $r5 = virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r2);

        virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $r2 = newarray (float)[8];

        $r2[0] = $f1;

        $r2[1] = $f2;

        $r2[2] = $f1;

        $r2[3] = $f0;

        $r2[4] = $f3;

        $r2[5] = $f2;

        $r2[6] = $f3;

        $r2[7] = $f0;

        $r1 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i1 = lengthof $r2;

        $i1 = $i1 * 4;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i1);

        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r3 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        $r5 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r1[1] = $r5;

        $r1 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r5 = $r1[1];

        $r5 = virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r2);

        virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $r2 = newarray (float)[8];

        $r2[0] = $f2;

        $r2[1] = $f3;

        $r2[2] = $f0;

        $r2[3] = $f3;

        $r2[4] = $f2;

        $r2[5] = $f1;

        $r2[6] = $f0;

        $r2[7] = $f1;

        $r1 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i1 = lengthof $r2;

        $i1 = $i1 * 4;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i1);

        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r3 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        $r5 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r1[2] = $r5;

        $r1 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r5 = $r1[2];

        $r5 = virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r2);

        virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $r2 = newarray (float)[8];

        $r2[0] = $f3;

        $r2[1] = $f0;

        $r2[2] = $f3;

        $r2[3] = $f2;

        $r2[4] = $f1;

        $r2[5] = $f0;

        $r2[6] = $f1;

        $r2[7] = $f2;

        $r1 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $i1 = lengthof $r2;

        $i1 = $i1 * 4;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i1);

        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r3 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        $r5 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r1[3] = $r5;

        $r1 = r0.<project.android.imageprocessing.GLRenderer: java.nio.FloatBuffer[] textureVertices>;

        $r5 = $r1[3];

        $r5 = virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r2);

        virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

     label7:
        if $i0 < 4 goto label8;

        return;

     label8:
        $i0 = $i0 + 1;

        goto label7;
    }

    public static void <clinit>()
    {
        <project.android.imageprocessing.filter.processing.FlipFilter: int FLIP_HORIZONTAL> = 1;

        <project.android.imageprocessing.filter.processing.FlipFilter: int FLIP_BOTH> = 2;

        return;
    }
}
