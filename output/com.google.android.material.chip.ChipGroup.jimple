public class com.google.android.material.chip.ChipGroup extends com.google.android.material.internal.FlowLayout
{
    public static final int DEF_STYLE_RES;
    public int checkedId;
    public final com.google.android.material.chip.ChipGroup$CheckedStateTracker checkedStateTracker;
    public int chipSpacingHorizontal;
    public int chipSpacingVertical;
    public com.google.android.material.chip.ChipGroup$OnCheckedChangeListener onCheckedChangeListener;
    public com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener passThroughListener;
    public boolean protectFromCheckedChange;
    public boolean selectionRequired;
    public boolean singleSelection;

    static void <clinit>()
    {
        int $i0;

        $i0 = <com.google.android.material.R$style: int Widget_MaterialComponents_ChipGroup>;

        <com.google.android.material.chip.ChipGroup: int DEF_STYLE_RES> = $i0;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.google.android.material.chip.ChipGroup r0;
        android.content.Context $r1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.google.android.material.chip.ChipGroup: void <init>(android.content.Context,android.util.AttributeSet)>($r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0;
        com.google.android.material.chip.ChipGroup r0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 = <com.google.android.material.R$attr: int chipGroupStyle>;

        specialinvoke r0.<com.google.android.material.chip.ChipGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.content.Context $r3;
        com.google.android.material.chip.ChipGroup$CheckedStateTracker $r7;
        com.google.android.material.chip.ChipGroup r0;
        android.content.res.TypedArray $r6;
        android.util.AttributeSet $r4;
        int[] $r1, $r2;
        com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener $r5, $r8;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r3 := @parameter0: android.content.Context;

        $r4 := @parameter1: android.util.AttributeSet;

        $i1 := @parameter2: int;

        $i0 = <com.google.android.material.chip.ChipGroup: int DEF_STYLE_RES>;

        $r3 = staticinvoke <com.google.android.material.theme.overlay.MaterialThemeOverlay: android.content.Context wrap(android.content.Context,android.util.AttributeSet,int,int)>($r3, $r4, $i1, $i0);

        specialinvoke r0.<com.google.android.material.internal.FlowLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>($r3, $r4, $i1);

        $r7 = new com.google.android.material.chip.ChipGroup$CheckedStateTracker;

        specialinvoke $r7.<com.google.android.material.chip.ChipGroup$CheckedStateTracker: void <init>(com.google.android.material.chip.ChipGroup,com.google.android.material.chip.ChipGroup$1)>(r0, null);

        r0.<com.google.android.material.chip.ChipGroup: com.google.android.material.chip.ChipGroup$CheckedStateTracker checkedStateTracker> = $r7;

        $r8 = new com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener;

        specialinvoke $r8.<com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener: void <init>(com.google.android.material.chip.ChipGroup,com.google.android.material.chip.ChipGroup$1)>(r0, null);

        r0.<com.google.android.material.chip.ChipGroup: com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener passThroughListener> = $r8;

        $i0 = -1;

        r0.<com.google.android.material.chip.ChipGroup: int checkedId> = $i0;

        r0.<com.google.android.material.chip.ChipGroup: boolean protectFromCheckedChange> = 0;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.content.Context getContext()>();

        $r1 = <com.google.android.material.R$styleable: int[] ChipGroup>;

        $i0 = <com.google.android.material.chip.ChipGroup: int DEF_STYLE_RES>;

        $r2 = newarray (int)[0];

        $r6 = staticinvoke <com.google.android.material.internal.ThemeEnforcement: android.content.res.TypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int,int[])>($r3, $r4, $r1, $i1, $i0, $r2);

        $i1 = <com.google.android.material.R$styleable: int ChipGroup_chipSpacing>;

        $i1 = virtualinvoke $r6.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>($i1, 0);

        $i0 = <com.google.android.material.R$styleable: int ChipGroup_chipSpacingHorizontal>;

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>($i0, $i1);

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setChipSpacingHorizontal(int)>($i0);

        $i0 = <com.google.android.material.R$styleable: int ChipGroup_chipSpacingVertical>;

        $i1 = virtualinvoke $r6.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>($i0, $i1);

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setChipSpacingVertical(int)>($i1);

        $i1 = <com.google.android.material.R$styleable: int ChipGroup_singleLine>;

        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i1, 0);

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setSingleLine(boolean)>($z0);

        $i1 = <com.google.android.material.R$styleable: int ChipGroup_singleSelection>;

        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i1, 0);

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setSingleSelection(boolean)>($z0);

        $i1 = <com.google.android.material.R$styleable: int ChipGroup_selectionRequired>;

        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i1, 0);

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setSelectionRequired(boolean)>($z0);

        $i1 = <com.google.android.material.R$styleable: int ChipGroup_checkedChip>;

        $i0 = -1;

        $i1 = virtualinvoke $r6.<android.content.res.TypedArray: int getResourceId(int,int)>($i1, $i0);

        $i0 = -1;

        if $i1 == $i0 goto label1;

        r0.<com.google.android.material.chip.ChipGroup: int checkedId> = $i1;

     label1:
        virtualinvoke $r6.<android.content.res.TypedArray: void recycle()>();

        $r5 = r0.<com.google.android.material.chip.ChipGroup: com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener passThroughListener>;

        specialinvoke r0.<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>($r5);

        staticinvoke <b.i.i.y: void h(android.view.View,int)>(r0, 1);

        return;
    }

    public static com.google.android.material.chip.ChipGroup$CheckedStateTracker access$1000(com.google.android.material.chip.ChipGroup)
    {
        com.google.android.material.chip.ChipGroup $r0;
        com.google.android.material.chip.ChipGroup$CheckedStateTracker r1;

        $r0 := @parameter0: com.google.android.material.chip.ChipGroup;

        r1 = $r0.<com.google.android.material.chip.ChipGroup: com.google.android.material.chip.ChipGroup$CheckedStateTracker checkedStateTracker>;

        return r1;
    }

    public static boolean access$300(com.google.android.material.chip.ChipGroup)
    {
        com.google.android.material.chip.ChipGroup $r0;
        boolean z0;

        $r0 := @parameter0: com.google.android.material.chip.ChipGroup;

        z0 = $r0.<com.google.android.material.chip.ChipGroup: boolean protectFromCheckedChange>;

        return z0;
    }

    public static boolean access$400(com.google.android.material.chip.ChipGroup)
    {
        com.google.android.material.chip.ChipGroup $r0;
        boolean z0;

        $r0 := @parameter0: com.google.android.material.chip.ChipGroup;

        z0 = $r0.<com.google.android.material.chip.ChipGroup: boolean selectionRequired>;

        return z0;
    }

    public static void access$500(com.google.android.material.chip.ChipGroup, int, boolean)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        specialinvoke $r0.<com.google.android.material.chip.ChipGroup: void setCheckedStateForView(int,boolean)>($i0, $z0);

        return;
    }

    public static void access$600(com.google.android.material.chip.ChipGroup, int, boolean)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        specialinvoke $r0.<com.google.android.material.chip.ChipGroup: void setCheckedId(int,boolean)>($i0, $z0);

        return;
    }

    public static int access$700(com.google.android.material.chip.ChipGroup)
    {
        int i0;
        com.google.android.material.chip.ChipGroup $r0;

        $r0 := @parameter0: com.google.android.material.chip.ChipGroup;

        i0 = $r0.<com.google.android.material.chip.ChipGroup: int checkedId>;

        return i0;
    }

    public static boolean access$800(com.google.android.material.chip.ChipGroup)
    {
        com.google.android.material.chip.ChipGroup $r0;
        boolean z0;

        $r0 := @parameter0: com.google.android.material.chip.ChipGroup;

        z0 = $r0.<com.google.android.material.chip.ChipGroup: boolean singleSelection>;

        return z0;
    }

    public static void access$900(com.google.android.material.chip.ChipGroup, int)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup $r0;

        $r0 := @parameter0: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter1: int;

        specialinvoke $r0.<com.google.android.material.chip.ChipGroup: void setCheckedId(int)>($i0);

        return;
    }

    private int getChipCount()
    {
        int $i0, $i1, $i2;
        com.google.android.material.chip.ChipGroup r0;
        android.view.View $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 = 0;

        $i1 = 0;

     label1:
        $i2 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if $i0 >= $i2 goto label3;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>($i0);

        $z0 = $r1 instanceof com.google.android.material.chip.Chip;

        if $z0 == 0 goto label2;

        $i1 = $i1 + 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $i1;
    }

    private void setCheckedId(int)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup r0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.android.material.chip.ChipGroup: void setCheckedId(int,boolean)>($i0, 1);

        return;
    }

    private void setCheckedId(int, boolean)
    {
        com.google.android.material.chip.ChipGroup$OnCheckedChangeListener $r1;
        int $i0;
        com.google.android.material.chip.ChipGroup r0;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        r0.<com.google.android.material.chip.ChipGroup: int checkedId> = $i0;

        $r1 = r0.<com.google.android.material.chip.ChipGroup: com.google.android.material.chip.ChipGroup$OnCheckedChangeListener onCheckedChangeListener>;

        if $r1 == null goto label1;

        $z1 = r0.<com.google.android.material.chip.ChipGroup: boolean singleSelection>;

        if $z1 == 0 goto label1;

        if $z0 == 0 goto label1;

        interfaceinvoke $r1.<com.google.android.material.chip.ChipGroup$OnCheckedChangeListener: void onCheckedChanged(com.google.android.material.chip.ChipGroup,int)>(r0, $i0);

     label1:
        return;
    }

    private void setCheckedStateForView(int, boolean)
    {
        com.google.android.material.chip.Chip $r2;
        int $i0;
        com.google.android.material.chip.ChipGroup r0;
        android.view.View $r1;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View findViewById(int)>($i0);

        $z1 = $r1 instanceof com.google.android.material.chip.Chip;

        if $z1 == 0 goto label1;

        r0.<com.google.android.material.chip.ChipGroup: boolean protectFromCheckedChange> = 1;

        $r2 = (com.google.android.material.chip.Chip) $r1;

        virtualinvoke $r2.<com.google.android.material.chip.Chip: void setChecked(boolean)>($z0);

        r0.<com.google.android.material.chip.ChipGroup: boolean protectFromCheckedChange> = 0;

     label1:
        return;
    }

    public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        com.google.android.material.chip.Chip $r3;
        android.view.ViewGroup$LayoutParams $r2;
        com.google.android.material.chip.ChipGroup r0;
        int $i0, $i1, $i2;
        android.view.View $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        $z0 = $r1 instanceof com.google.android.material.chip.Chip;

        if $z0 == 0 goto label2;

        $r3 = (com.google.android.material.chip.Chip) $r1;

        $z0 = virtualinvoke $r3.<android.widget.CheckBox: boolean isChecked()>();

        if $z0 == 0 goto label2;

        $i1 = r0.<com.google.android.material.chip.ChipGroup: int checkedId>;

        $i2 = -1;

        if $i1 == $i2 goto label1;

        $z0 = r0.<com.google.android.material.chip.ChipGroup: boolean singleSelection>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.google.android.material.chip.ChipGroup: void setCheckedStateForView(int,boolean)>($i1, 0);

     label1:
        $i1 = virtualinvoke $r3.<android.widget.CheckBox: int getId()>();

        specialinvoke r0.<com.google.android.material.chip.ChipGroup: void setCheckedId(int)>($i1);

     label2:
        specialinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>($r1, $i0, $r2);

        return;
    }

    public void check(int)
    {
        int $i0, $i1, $i2;
        com.google.android.material.chip.ChipGroup r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.android.material.chip.ChipGroup: int checkedId>;

        if $i0 != $i1 goto label1;

        return;

     label1:
        $i2 = -1;

        if $i1 == $i2 goto label2;

        $z0 = r0.<com.google.android.material.chip.ChipGroup: boolean singleSelection>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.google.android.material.chip.ChipGroup: void setCheckedStateForView(int,boolean)>($i1, 0);

     label2:
        $i1 = -1;

        if $i0 == $i1 goto label3;

        specialinvoke r0.<com.google.android.material.chip.ChipGroup: void setCheckedStateForView(int,boolean)>($i0, 1);

     label3:
        specialinvoke r0.<com.google.android.material.chip.ChipGroup: void setCheckedId(int)>($i0);

        return;
    }

    public boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        com.google.android.material.chip.ChipGroup r0;
        android.view.ViewGroup$LayoutParams $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>($r1);

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof com.google.android.material.chip.ChipGroup$LayoutParams;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void clearCheck()
    {
        com.google.android.material.chip.Chip $r2;
        int $i0, $i1;
        com.google.android.material.chip.ChipGroup r0;
        android.view.View $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        r0.<com.google.android.material.chip.ChipGroup: boolean protectFromCheckedChange> = 1;

        $i0 = 0;

     label1:
        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if $i0 >= $i1 goto label3;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>($i0);

        $z0 = $r1 instanceof com.google.android.material.chip.Chip;

        if $z0 == 0 goto label2;

        $r2 = (com.google.android.material.chip.Chip) $r1;

        virtualinvoke $r2.<com.google.android.material.chip.Chip: void setChecked(boolean)>(0);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        r0.<com.google.android.material.chip.ChipGroup: boolean protectFromCheckedChange> = 0;

        $i0 = -1;

        specialinvoke r0.<com.google.android.material.chip.ChipGroup: void setCheckedId(int)>($i0);

        return;
    }

    public android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        com.google.android.material.chip.ChipGroup$LayoutParams $r1;
        int $i0, $i1;
        com.google.android.material.chip.ChipGroup r0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 = new com.google.android.material.chip.ChipGroup$LayoutParams;

        $i0 = -2;

        $i1 = -2;

        specialinvoke $r1.<com.google.android.material.chip.ChipGroup$LayoutParams: void <init>(int,int)>($i0, $i1);

        return $r1;
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        android.content.Context $r3;
        android.util.AttributeSet $r1;
        com.google.android.material.chip.ChipGroup$LayoutParams $r2;
        com.google.android.material.chip.ChipGroup r0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: android.util.AttributeSet;

        $r2 = new com.google.android.material.chip.ChipGroup$LayoutParams;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.content.Context getContext()>();

        specialinvoke $r2.<com.google.android.material.chip.ChipGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>($r3, $r1);

        return $r2;
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        com.google.android.material.chip.ChipGroup r0;
        android.view.ViewGroup$LayoutParams $r1;
        com.google.android.material.chip.ChipGroup$LayoutParams $r2;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $r2 = new com.google.android.material.chip.ChipGroup$LayoutParams;

        specialinvoke $r2.<com.google.android.material.chip.ChipGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1);

        return $r2;
    }

    public int getCheckedChipId()
    {
        int i0;
        com.google.android.material.chip.ChipGroup r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $z0 = r0.<com.google.android.material.chip.ChipGroup: boolean singleSelection>;

        if $z0 == 0 goto label1;

        i0 = r0.<com.google.android.material.chip.ChipGroup: int checkedId>;

        return i0;

     label1:
        i0 = -1;

        return i0;
    }

    public java.util.List getCheckedChipIds()
    {
        com.google.android.material.chip.Chip $r3;
        com.google.android.material.chip.ChipGroup r0;
        java.lang.Integer $r4;
        java.util.ArrayList $r1;
        int $i0, $i1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if $i0 >= $i1 goto label3;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>($i0);

        $z0 = $r2 instanceof com.google.android.material.chip.Chip;

        if $z0 == 0 goto label2;

        $r3 = (com.google.android.material.chip.Chip) $r2;

        $z0 = virtualinvoke $r3.<android.widget.CheckBox: boolean isChecked()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r2.<android.view.View: int getId()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $z0 = r0.<com.google.android.material.chip.ChipGroup: boolean singleSelection>;

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $r1;
    }

    public int getChipSpacingHorizontal()
    {
        int i0;
        com.google.android.material.chip.ChipGroup r0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        i0 = r0.<com.google.android.material.chip.ChipGroup: int chipSpacingHorizontal>;

        return i0;
    }

    public int getChipSpacingVertical()
    {
        int i0;
        com.google.android.material.chip.ChipGroup r0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        i0 = r0.<com.google.android.material.chip.ChipGroup: int chipSpacingVertical>;

        return i0;
    }

    public int getIndexOfChip(android.view.View)
    {
        com.google.android.material.chip.Chip $r3;
        com.google.android.material.chip.ChipGroup r0;
        int $i0, $i1, $i2;
        android.view.View $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: android.view.View;

        $z0 = $r1 instanceof com.google.android.material.chip.Chip;

        if $z0 != 0 goto label1;

        $i0 = -1;

        return $i0;

     label1:
        $i0 = 0;

        $i1 = 0;

     label2:
        $i2 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if $i0 >= $i2 goto label5;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>($i0);

        $z0 = $r2 instanceof com.google.android.material.chip.Chip;

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>($i0);

        $r3 = (com.google.android.material.chip.Chip) $r2;

        if $r3 != $r1 goto label3;

        return $i1;

     label3:
        $i1 = $i1 + 1;

     label4:
        $i0 = $i0 + 1;

        goto label2;

     label5:
        $i0 = -1;

        return $i0;
    }

    public boolean isSelectionRequired()
    {
        com.google.android.material.chip.ChipGroup r0;
        boolean z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        z0 = r0.<com.google.android.material.chip.ChipGroup: boolean selectionRequired>;

        return z0;
    }

    public boolean isSingleLine()
    {
        com.google.android.material.chip.ChipGroup r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $z0 = specialinvoke r0.<com.google.android.material.internal.FlowLayout: boolean isSingleLine()>();

        return $z0;
    }

    public boolean isSingleSelection()
    {
        com.google.android.material.chip.ChipGroup r0;
        boolean z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        z0 = r0.<com.google.android.material.chip.ChipGroup: boolean singleSelection>;

        return z0;
    }

    public void onFinishInflate()
    {
        int $i0, $i1;
        com.google.android.material.chip.ChipGroup r0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        specialinvoke r0.<android.view.ViewGroup: void onFinishInflate()>();

        $i0 = r0.<com.google.android.material.chip.ChipGroup: int checkedId>;

        $i1 = -1;

        if $i0 == $i1 goto label1;

        specialinvoke r0.<com.google.android.material.chip.ChipGroup: void setCheckedStateForView(int,boolean)>($i0, 1);

        $i0 = r0.<com.google.android.material.chip.ChipGroup: int checkedId>;

        specialinvoke r0.<com.google.android.material.chip.ChipGroup: void setCheckedId(int)>($i0);

     label1:
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo $r1;
        com.google.android.material.chip.ChipGroup r0;
        b.i.i.a.b $r2;
        byte $b2;
        int $i0, $i1;
        b.i.i.a.b$b $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.view.ViewGroup: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>($r1);

        $r2 = staticinvoke <b.i.i.a.b: b.i.i.a.b a(android.view.accessibility.AccessibilityNodeInfo)>($r1);

        $z0 = virtualinvoke r0.<com.google.android.material.chip.ChipGroup: boolean isSingleLine()>();

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<com.google.android.material.chip.ChipGroup: int getChipCount()>();

        goto label2;

     label1:
        $i0 = -1;

     label2:
        $i1 = virtualinvoke r0.<com.google.android.material.internal.FlowLayout: int getRowCount()>();

        $z0 = virtualinvoke r0.<com.google.android.material.chip.ChipGroup: boolean isSingleSelection()>();

        if $z0 == 0 goto label3;

        $b2 = 1;

        goto label4;

     label3:
        $b2 = 2;

     label4:
        $r3 = staticinvoke <b.i.i.a.b$b: b.i.i.a.b$b a(int,int,boolean,int)>($i1, $i0, 0, $b2);

        virtualinvoke $r2.<b.i.i.a.b: void a(java.lang.Object)>($r3);

        return;
    }

    public void setChipSpacing(int)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup r0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setChipSpacingHorizontal(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setChipSpacingVertical(int)>($i0);

        return;
    }

    public void setChipSpacingHorizontal(int)
    {
        int $i0, $i1;
        com.google.android.material.chip.ChipGroup r0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.android.material.chip.ChipGroup: int chipSpacingHorizontal>;

        if $i1 == $i0 goto label1;

        r0.<com.google.android.material.chip.ChipGroup: int chipSpacingHorizontal> = $i0;

        virtualinvoke r0.<com.google.android.material.internal.FlowLayout: void setItemSpacing(int)>($i0);

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

     label1:
        return;
    }

    public void setChipSpacingHorizontalResource(int)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup r0;
        android.content.res.Resources $r1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelOffset(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setChipSpacingHorizontal(int)>($i0);

        return;
    }

    public void setChipSpacingResource(int)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup r0;
        android.content.res.Resources $r1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelOffset(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setChipSpacing(int)>($i0);

        return;
    }

    public void setChipSpacingVertical(int)
    {
        int $i0, $i1;
        com.google.android.material.chip.ChipGroup r0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.android.material.chip.ChipGroup: int chipSpacingVertical>;

        if $i1 == $i0 goto label1;

        r0.<com.google.android.material.chip.ChipGroup: int chipSpacingVertical> = $i0;

        virtualinvoke r0.<com.google.android.material.internal.FlowLayout: void setLineSpacing(int)>($i0);

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

     label1:
        return;
    }

    public void setChipSpacingVerticalResource(int)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup r0;
        android.content.res.Resources $r1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelOffset(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setChipSpacingVertical(int)>($i0);

        return;
    }

    public void setDividerDrawableHorizontal(android.graphics.drawable.Drawable)
    {
        com.google.android.material.chip.ChipGroup r0;
        java.lang.UnsupportedOperationException $r2;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Changing divider drawables have no effect. ChipGroup do not use divider drawables as spacing.");

        throw $r2;
    }

    public void setDividerDrawableVertical(android.graphics.drawable.Drawable)
    {
        com.google.android.material.chip.ChipGroup r0;
        java.lang.UnsupportedOperationException $r2;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Changing divider drawables have no effect. ChipGroup do not use divider drawables as spacing.");

        throw $r2;
    }

    public void setFlexWrap(int)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Changing flex wrap not allowed. ChipGroup exposes a singleLine attribute instead.");

        throw $r1;
    }

    public void setOnCheckedChangeListener(com.google.android.material.chip.ChipGroup$OnCheckedChangeListener)
    {
        com.google.android.material.chip.ChipGroup r0;
        com.google.android.material.chip.ChipGroup$OnCheckedChangeListener $r1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: com.google.android.material.chip.ChipGroup$OnCheckedChangeListener;

        r0.<com.google.android.material.chip.ChipGroup: com.google.android.material.chip.ChipGroup$OnCheckedChangeListener onCheckedChangeListener> = $r1;

        return;
    }

    public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)
    {
        com.google.android.material.chip.ChipGroup r0;
        com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener $r2;
        android.view.ViewGroup$OnHierarchyChangeListener $r1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $r1 := @parameter0: android.view.ViewGroup$OnHierarchyChangeListener;

        $r2 = r0.<com.google.android.material.chip.ChipGroup: com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener passThroughListener>;

        staticinvoke <com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener: android.view.ViewGroup$OnHierarchyChangeListener access$202(com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener,android.view.ViewGroup$OnHierarchyChangeListener)>($r2, $r1);

        return;
    }

    public void setSelectionRequired(boolean)
    {
        com.google.android.material.chip.ChipGroup r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $z0 := @parameter0: boolean;

        r0.<com.google.android.material.chip.ChipGroup: boolean selectionRequired> = $z0;

        return;
    }

    public void setShowDividerHorizontal(int)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Changing divider modes has no effect. ChipGroup do not use divider drawables as spacing.");

        throw $r1;
    }

    public void setShowDividerVertical(int)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Changing divider modes has no effect. ChipGroup do not use divider drawables as spacing.");

        throw $r1;
    }

    public void setSingleLine(int)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup r0;
        android.content.res.Resources $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setSingleLine(boolean)>($z0);

        return;
    }

    public void setSingleLine(boolean)
    {
        com.google.android.material.chip.ChipGroup r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<com.google.android.material.internal.FlowLayout: void setSingleLine(boolean)>($z0);

        return;
    }

    public void setSingleSelection(int)
    {
        int $i0;
        com.google.android.material.chip.ChipGroup r0;
        android.content.res.Resources $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void setSingleSelection(boolean)>($z0);

        return;
    }

    public void setSingleSelection(boolean)
    {
        com.google.android.material.chip.ChipGroup r0;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.ChipGroup;

        $z0 := @parameter0: boolean;

        $z1 = r0.<com.google.android.material.chip.ChipGroup: boolean singleSelection>;

        if $z1 == $z0 goto label1;

        r0.<com.google.android.material.chip.ChipGroup: boolean singleSelection> = $z0;

        virtualinvoke r0.<com.google.android.material.chip.ChipGroup: void clearCheck()>();

     label1:
        return;
    }
}
