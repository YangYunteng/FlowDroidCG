public final class com.google.android.material.internal.ThemeEnforcement extends java.lang.Object
{
    public static final int[] APPCOMPAT_CHECK_ATTRS;
    public static final java.lang.String APPCOMPAT_THEME_NAME;
    public static final int[] MATERIAL_CHECK_ATTRS;
    public static final java.lang.String MATERIAL_THEME_NAME;

    static void <clinit>()
    {
        int $i0;
        int[] $r0;

        <com.google.android.material.internal.ThemeEnforcement: java.lang.String MATERIAL_THEME_NAME> = "Theme.MaterialComponents";

        <com.google.android.material.internal.ThemeEnforcement: java.lang.String APPCOMPAT_THEME_NAME> = "Theme.AppCompat";

        $r0 = newarray (int)[1];

        $i0 = <com.google.android.material.R$attr: int colorPrimary>;

        $r0[0] = $i0;

        <com.google.android.material.internal.ThemeEnforcement: int[] APPCOMPAT_CHECK_ATTRS> = $r0;

        $r0 = newarray (int)[1];

        $i0 = <com.google.android.material.R$attr: int colorPrimaryVariant>;

        $r0[0] = $i0;

        <com.google.android.material.internal.ThemeEnforcement: int[] MATERIAL_CHECK_ATTRS> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.android.material.internal.ThemeEnforcement r0;

        r0 := @this: com.google.android.material.internal.ThemeEnforcement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkAppCompatTheme(android.content.Context)
    {
        android.content.Context $r0;
        int[] $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = <com.google.android.material.internal.ThemeEnforcement: int[] APPCOMPAT_CHECK_ATTRS>;

        staticinvoke <com.google.android.material.internal.ThemeEnforcement: void checkTheme(android.content.Context,int[],java.lang.String)>($r0, $r1, "Theme.AppCompat");

        return;
    }

    public static void checkCompatibleTheme(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.content.Context $r0;
        android.content.res.TypedArray $r3;
        android.util.AttributeSet $r1;
        android.util.TypedValue $r4;
        int[] $r2;
        int $i0, $i1;
        android.content.res.Resources$Theme $r5;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 = <com.google.android.material.R$styleable: int[] ThemeEnforcement>;

        $r3 = virtualinvoke $r0.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>($r1, $r2, $i0, $i1);

        $i0 = <com.google.android.material.R$styleable: int ThemeEnforcement_enforceMaterialTheme>;

        $z0 = virtualinvoke $r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, 0);

        virtualinvoke $r3.<android.content.res.TypedArray: void recycle()>();

        if $z0 == 0 goto label2;

        $r4 = new android.util.TypedValue;

        specialinvoke $r4.<android.util.TypedValue: void <init>()>();

        $r5 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $i0 = <com.google.android.material.R$attr: int isMaterialTheme>;

        $z0 = virtualinvoke $r5.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>($i0, $r4, 1);

        if $z0 == 0 goto label1;

        $i0 = $r4.<android.util.TypedValue: int type>;

        if $i0 != 18 goto label2;

        $i0 = $r4.<android.util.TypedValue: int data>;

        if $i0 != 0 goto label2;

     label1:
        staticinvoke <com.google.android.material.internal.ThemeEnforcement: void checkMaterialTheme(android.content.Context)>($r0);

     label2:
        staticinvoke <com.google.android.material.internal.ThemeEnforcement: void checkAppCompatTheme(android.content.Context)>($r0);

        return;
    }

    public static void checkMaterialTheme(android.content.Context)
    {
        android.content.Context $r0;
        int[] $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = <com.google.android.material.internal.ThemeEnforcement: int[] MATERIAL_CHECK_ATTRS>;

        staticinvoke <com.google.android.material.internal.ThemeEnforcement: void checkTheme(android.content.Context,int[],java.lang.String)>($r0, $r1, "Theme.MaterialComponents");

        return;
    }

    public static transient void checkTextAppearance(android.content.Context, android.util.AttributeSet, int[], int, int, int[])
    {
        android.content.Context $r2;
        java.lang.IllegalArgumentException $r6;
        android.content.res.TypedArray $r5;
        android.util.AttributeSet $r3;
        int[] $r0, $r1, $r4;
        int $i0, $i1, $i2;
        boolean $z0;

        $r2 := @parameter0: android.content.Context;

        $r3 := @parameter1: android.util.AttributeSet;

        $r0 := @parameter2: int[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r1 := @parameter5: int[];

        $r4 = <com.google.android.material.R$styleable: int[] ThemeEnforcement>;

        $r5 = virtualinvoke $r2.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>($r3, $r4, $i0, $i1);

        $i2 = <com.google.android.material.R$styleable: int ThemeEnforcement_enforceTextAppearance>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i2, 0);

        if $z0 != 0 goto label1;

        virtualinvoke $r5.<android.content.res.TypedArray: void recycle()>();

        return;

     label1:
        if $r1 == null goto label3;

        $i2 = lengthof $r1;

        if $i2 != 0 goto label2;

        goto label3;

     label2:
        $z0 = staticinvoke <com.google.android.material.internal.ThemeEnforcement: boolean isCustomTextAppearanceValid(android.content.Context,android.util.AttributeSet,int[],int,int,int[])>($r2, $r3, $r0, $i0, $i1, $r1);

        goto label5;

     label3:
        $i0 = <com.google.android.material.R$styleable: int ThemeEnforcement_android_textAppearance>;

        $i1 = -1;

        $i0 = virtualinvoke $r5.<android.content.res.TypedArray: int getResourceId(int,int)>($i0, $i1);

        $i1 = -1;

        if $i0 == $i1 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        virtualinvoke $r5.<android.content.res.TypedArray: void recycle()>();

        if $z0 == 0 goto label6;

        return;

     label6:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This component requires that you specify a valid TextAppearance attribute. Update your app theme to inherit from Theme.MaterialComponents (or a descendant).");

        throw $r6;
    }

    public static void checkTheme(android.content.Context, int[], java.lang.String)
    {
        android.content.Context $r0;
        int[] $r1;
        java.lang.StringBuilder $r4;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <com.google.android.material.internal.ThemeEnforcement: boolean isTheme(android.content.Context,int[])>($r0, $r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The style on this component requires your app theme to be ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (or a descendant).");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    public static boolean isAppCompatTheme(android.content.Context)
    {
        android.content.Context $r1;
        int[] $r0;
        boolean $z0;

        $r1 := @parameter0: android.content.Context;

        $r0 = <com.google.android.material.internal.ThemeEnforcement: int[] APPCOMPAT_CHECK_ATTRS>;

        $z0 = staticinvoke <com.google.android.material.internal.ThemeEnforcement: boolean isTheme(android.content.Context,int[])>($r1, $r0);

        return $z0;
    }

    public static transient boolean isCustomTextAppearanceValid(android.content.Context, android.util.AttributeSet, int[], int, int, int[])
    {
        android.content.Context $r1;
        android.content.res.TypedArray $r4;
        android.util.AttributeSet $r2;
        int[] $r0, $r3;
        int $i0, $i1, $i2, $i3;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $r3 := @parameter2: int[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r0 := @parameter5: int[];

        $r4 = virtualinvoke $r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>($r2, $r3, $i0, $i1);

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $i2 = $r0[$i1];

        $i3 = -1;

        $i2 = virtualinvoke $r4.<android.content.res.TypedArray: int getResourceId(int,int)>($i2, $i3);

        $i3 = -1;

        if $i2 != $i3 goto label2;

        virtualinvoke $r4.<android.content.res.TypedArray: void recycle()>();

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r4.<android.content.res.TypedArray: void recycle()>();

        return 1;
    }

    public static boolean isMaterialTheme(android.content.Context)
    {
        android.content.Context $r1;
        int[] $r0;
        boolean $z0;

        $r1 := @parameter0: android.content.Context;

        $r0 = <com.google.android.material.internal.ThemeEnforcement: int[] MATERIAL_CHECK_ATTRS>;

        $z0 = staticinvoke <com.google.android.material.internal.ThemeEnforcement: boolean isTheme(android.content.Context,int[])>($r1, $r0);

        return $z0;
    }

    public static boolean isTheme(android.content.Context, int[])
    {
        android.content.Context $r1;
        int[] $r0;
        int $i0, $i1;
        android.content.res.TypedArray $r2;
        boolean $z0;

        $r1 := @parameter0: android.content.Context;

        $r0 := @parameter1: int[];

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r0);

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $z0 = virtualinvoke $r2.<android.content.res.TypedArray: boolean hasValue(int)>($i0);

        if $z0 != 0 goto label2;

        virtualinvoke $r2.<android.content.res.TypedArray: void recycle()>();

        return 0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        virtualinvoke $r2.<android.content.res.TypedArray: void recycle()>();

        return 1;
    }

    public static transient android.content.res.TypedArray obtainStyledAttributes(android.content.Context, android.util.AttributeSet, int[], int, int, int[])
    {
        android.content.Context $r4;
        android.util.AttributeSet $r0;
        int[] $r1, $r2;
        int $i0, $i1;
        android.content.res.TypedArray $r3;

        $r4 := @parameter0: android.content.Context;

        $r0 := @parameter1: android.util.AttributeSet;

        $r1 := @parameter2: int[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r2 := @parameter5: int[];

        staticinvoke <com.google.android.material.internal.ThemeEnforcement: void checkCompatibleTheme(android.content.Context,android.util.AttributeSet,int,int)>($r4, $r0, $i0, $i1);

        staticinvoke <com.google.android.material.internal.ThemeEnforcement: void checkTextAppearance(android.content.Context,android.util.AttributeSet,int[],int,int,int[])>($r4, $r0, $r1, $i0, $i1, $r2);

        $r3 = virtualinvoke $r4.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>($r0, $r1, $i0, $i1);

        return $r3;
    }

    public static transient b.b.f.ma obtainTintedStyledAttributes(android.content.Context, android.util.AttributeSet, int[], int, int, int[])
    {
        b.b.f.ma $r3;
        android.content.Context $r4;
        android.util.AttributeSet $r0;
        int[] $r1, $r2;
        int $i0, $i1;

        $r4 := @parameter0: android.content.Context;

        $r0 := @parameter1: android.util.AttributeSet;

        $r1 := @parameter2: int[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r2 := @parameter5: int[];

        staticinvoke <com.google.android.material.internal.ThemeEnforcement: void checkCompatibleTheme(android.content.Context,android.util.AttributeSet,int,int)>($r4, $r0, $i0, $i1);

        staticinvoke <com.google.android.material.internal.ThemeEnforcement: void checkTextAppearance(android.content.Context,android.util.AttributeSet,int[],int,int,int[])>($r4, $r0, $r1, $i0, $i1, $r2);

        $r3 = staticinvoke <b.b.f.ma: b.b.f.ma a(android.content.Context,android.util.AttributeSet,int[],int,int)>($r4, $r0, $r1, $i0, $i1);

        return $r3;
    }
}
