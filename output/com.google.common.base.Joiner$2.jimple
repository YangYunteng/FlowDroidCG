public class com.google.common.base.Joiner$2 extends com.google.common.base.Joiner
{
    public final com.google.common.base.Joiner this$0;

    public void <init>(com.google.common.base.Joiner, com.google.common.base.Joiner)
    {
        com.google.common.base.Joiner$2 r0;
        com.google.common.base.Joiner $r1, $r2;

        r0 := @this: com.google.common.base.Joiner$2;

        $r2 := @parameter0: com.google.common.base.Joiner;

        $r1 := @parameter1: com.google.common.base.Joiner;

        r0.<com.google.common.base.Joiner$2: com.google.common.base.Joiner this$0> = $r2;

        specialinvoke r0.<com.google.common.base.Joiner: void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner$1)>($r1, null);

        return;
    }

    public java.lang.Appendable appendTo(java.lang.Appendable, java.util.Iterator)
    {
        com.google.common.base.Joiner$2 r0;
        java.util.Iterator $r2;
        java.lang.CharSequence $r5;
        java.lang.Appendable $r1;
        java.lang.Object $r3;
        java.lang.String $r6;
        boolean $z0;
        com.google.common.base.Joiner $r4;

        r0 := @this: com.google.common.base.Joiner$2;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "appendable");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "parts");

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if $r3 == null goto label1;

        $r4 = r0.<com.google.common.base.Joiner$2: com.google.common.base.Joiner this$0>;

        $r5 = virtualinvoke $r4.<com.google.common.base.Joiner: java.lang.CharSequence toString(java.lang.Object)>($r3);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if $r3 == null goto label2;

        $r4 = r0.<com.google.common.base.Joiner$2: com.google.common.base.Joiner this$0>;

        $r6 = staticinvoke <com.google.common.base.Joiner: java.lang.String access$100(com.google.common.base.Joiner)>($r4);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r6);

        $r4 = r0.<com.google.common.base.Joiner$2: com.google.common.base.Joiner this$0>;

        $r5 = virtualinvoke $r4.<com.google.common.base.Joiner: java.lang.CharSequence toString(java.lang.Object)>($r3);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);

        goto label2;

     label3:
        return $r1;
    }

    public com.google.common.base.Joiner useForNull(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r2;
        com.google.common.base.Joiner$2 r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.base.Joiner$2;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("already specified skipNulls");

        throw $r2;
    }

    public com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r2;
        com.google.common.base.Joiner$2 r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.base.Joiner$2;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("can\'t use .skipNulls() with maps");

        throw $r2;
    }
}
