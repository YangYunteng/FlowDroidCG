public final class com.google.common.math.IntMath extends java.lang.Object
{
    public static final int FLOOR_SQRT_MAX_INT;
    public static final int MAX_POWER_OF_SQRT2_UNSIGNED;
    public static final int MAX_SIGNED_POWER_OF_TWO;
    public static int[] biggestBinomials;
    public static final int[] factorials;
    public static final int[] halfPowersOf10;
    public static final byte[] maxLog10ForLeadingZeros;
    public static final int[] powersOf10;

    static void <clinit>()
    {
        int $i0;
        byte[] $r1;
        int[] $r0;

        <com.google.common.math.IntMath: int MAX_SIGNED_POWER_OF_TWO> = 1073741824;

        <com.google.common.math.IntMath: int MAX_POWER_OF_SQRT2_UNSIGNED> = -1257966797;

        <com.google.common.math.IntMath: int FLOOR_SQRT_MAX_INT> = 46340;

        $r1 = newarray (byte)[33];

        $r1[0] = 9;

        $r1[1] = 9;

        $r1[2] = 9;

        $r1[3] = 8;

        $r1[4] = 8;

        $r1[5] = 8;

        $r1[6] = 7;

        $r1[7] = 7;

        $r1[8] = 7;

        $r1[9] = 6;

        $r1[10] = 6;

        $r1[11] = 6;

        $r1[12] = 6;

        $r1[13] = 5;

        $r1[14] = 5;

        $r1[15] = 5;

        $r1[16] = 4;

        $r1[17] = 4;

        $r1[18] = 4;

        $r1[19] = 3;

        $r1[20] = 3;

        $r1[21] = 3;

        $r1[22] = 3;

        $r1[23] = 2;

        $r1[24] = 2;

        $r1[25] = 2;

        $r1[26] = 1;

        $r1[27] = 1;

        $r1[28] = 1;

        $r1[29] = 0;

        $r1[30] = 0;

        $r1[31] = 0;

        $r1[32] = 0;

        <com.google.common.math.IntMath: byte[] maxLog10ForLeadingZeros> = $r1;

        $r0 = newarray (int)[10];

        $r0[0] = 1;

        $r0[1] = 10;

        $r0[2] = 100;

        $r0[3] = 1000;

        $r0[4] = 10000;

        $r0[5] = 100000;

        $r0[6] = 1000000;

        $r0[7] = 10000000;

        $r0[8] = 100000000;

        $r0[9] = 1000000000;

        <com.google.common.math.IntMath: int[] powersOf10> = $r0;

        $r0 = newarray (int)[10];

        $r0[0] = 3;

        $r0[1] = 31;

        $r0[2] = 316;

        $r0[3] = 3162;

        $r0[4] = 31622;

        $r0[5] = 316227;

        $r0[6] = 3162277;

        $r0[7] = 31622776;

        $r0[8] = 316227766;

        $r0[9] = 2147483647;

        <com.google.common.math.IntMath: int[] halfPowersOf10> = $r0;

        $r0 = newarray (int)[13];

        $r0[0] = 1;

        $r0[1] = 1;

        $r0[2] = 2;

        $r0[3] = 6;

        $r0[4] = 24;

        $r0[5] = 120;

        $r0[6] = 720;

        $r0[7] = 5040;

        $i0 = 40320;

        $r0[8] = $i0;

        $r0[9] = 362880;

        $r0[10] = 3628800;

        $r0[11] = 39916800;

        $r0[12] = 479001600;

        <com.google.common.math.IntMath: int[] factorials> = $r0;

        $r0 = newarray (int)[17];

        $r0[0] = 2147483647;

        $r0[1] = 2147483647;

        $r0[2] = 65536;

        $r0[3] = 2345;

        $r0[4] = 477;

        $r0[5] = 193;

        $r0[6] = 110;

        $r0[7] = 75;

        $r0[8] = 58;

        $r0[9] = 49;

        $r0[10] = 43;

        $r0[11] = 39;

        $r0[12] = 37;

        $r0[13] = 35;

        $r0[14] = 34;

        $r0[15] = 34;

        $r0[16] = 33;

        <com.google.common.math.IntMath: int[] biggestBinomials> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.math.IntMath r0;

        r0 := @this: com.google.common.math.IntMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int binomial(int, int)
    {
        long $l4, $l5;
        int[] $r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", $i0);

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("k", $i1);

        $i2 = 0;

        if $i1 > $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "k (%s) > n (%s)", $i1, $i0);

        $i3 = $i0 >> 1;

        if $i1 <= $i3 goto label3;

        $i1 = $i0 - $i1;

     label3:
        $r0 = <com.google.common.math.IntMath: int[] biggestBinomials>;

        $i3 = lengthof $r0;

        if $i1 >= $i3 goto label8;

        $i3 = $r0[$i1];

        if $i0 <= $i3 goto label4;

        goto label8;

     label4:
        if $i1 == 0 goto label7;

        if $i1 == 1 goto label9;

        $l4 = 1L;

     label5:
        if $i2 >= $i1 goto label6;

        $i3 = $i0 - $i2;

        $l5 = (long) $i3;

        $l4 = $l4 * $l5;

        $i2 = $i2 + 1;

        $l5 = (long) $i2;

        $l4 = $l4 / $l5;

        goto label5;

     label6:
        $i0 = (int) $l4;

        return $i0;

     label7:
        return 1;

     label8:
        return 2147483647;

     label9:
        return $i0;
    }

    public static int ceilingPowerOfTwo(int)
    {
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.ArithmeticException $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkPositive(java.lang.String,int)>("x", $i0);

        if $i0 > 1073741824 goto label1;

        $i0 = $i0 - 1;

        $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i0 = neg $i0;

        $i0 = 1 << $i0;

        return $i0;

     label1:
        $r1 = new java.lang.ArithmeticException;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ceilingPowerOfTwo(");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not representable as an int");

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    public static int checkedAdd(int, int)
    {
        byte $b4;
        int $i1, $i2;
        long $l0, $l3;
        boolean $z0;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $l0 = (long) $i1;

        $l3 = (long) $i2;

        $l3 = $l0 + $l3;

        $i1 = (int) $l3;

        $l0 = (long) $i1;

        $b4 = $l3 cmp $l0;

        if $b4 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        return $i1;
    }

    public static int checkedMultiply(int, int)
    {
        byte $b4;
        int $i1, $i2;
        long $l0, $l3;
        boolean $z0;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $l0 = (long) $i1;

        $l3 = (long) $i2;

        $l3 = $l0 * $l3;

        $i1 = (int) $l3;

        $l0 = (long) $i1;

        $b4 = $l3 cmp $l0;

        if $b4 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        return $i1;
    }

    public static int checkedPow(int, int)
    {
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", $i1);

        $z0 = 0;

        $i2 = -2;

        if $i0 == $i2 goto label13;

        $i2 = -1;

        if $i0 == $i2 goto label12;

        if $i0 == 0 goto label11;

        if $i0 == 1 goto label10;

        if $i0 == 2 goto label08;

        $i2 = 1;

     label01:
        if $i1 == 0 goto label16;

        if $i1 == 1 goto label07;

        $i3 = $i1 & 1;

        if $i3 == 0 goto label02;

        $i2 = staticinvoke <com.google.common.math.IntMath: int checkedMultiply(int,int)>($i2, $i0);

     label02:
        $i1 = $i1 >> 1;

        if $i1 <= 0 goto label01;

        if -46340 > $i0 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        $i3 = 46340;

        if $i0 > $i3 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        $z0 = $z0 & $z1;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        $i0 = $i0 * $i0;

        goto label01;

     label07:
        $i0 = staticinvoke <com.google.common.math.IntMath: int checkedMultiply(int,int)>($i2, $i0);

        return $i0;

     label08:
        if $i1 >= 31 goto label09;

        $z0 = 1;

     label09:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        $i0 = 1 << $i1;

        return $i0;

     label10:
        return 1;

     label11:
        if $i1 != 0 goto label17;

        return 1;

     label12:
        $i0 = $i1 & 1;

        if $i0 != 0 goto label18;

        return 1;

     label13:
        if $i1 >= 32 goto label14;

        $z0 = 1;

     label14:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        $i0 = $i1 & 1;

        if $i0 != 0 goto label15;

        $i0 = 1 << $i1;

        return $i0;

     label15:
        $i0 = -1;

        $i0 = $i0 << $i1;

        return $i0;

     label16:
        return $i2;

     label17:
        return 0;

     label18:
        $i0 = -1;

        return $i0;
    }

    public static int checkedSubtract(int, int)
    {
        byte $b4;
        int $i1, $i2;
        long $l0, $l3;
        boolean $z0;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $l0 = (long) $i1;

        $l3 = (long) $i2;

        $l3 = $l0 - $l3;

        $i1 = (int) $l3;

        $l0 = (long) $i1;

        $b4 = $l3 cmp $l0;

        if $b4 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        return $i1;
    }

    public static int divide(int, int, java.math.RoundingMode)
    {
        java.lang.AssertionError $r2;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.ArithmeticException $r4;
        java.math.RoundingMode $r0, $r3;
        boolean $z0, $z1, $z2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: java.math.RoundingMode;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        if $i1 == 0 goto label16;

        $i2 = $i0 / $i1;

        $i3 = $i1 * $i2;

        $i3 = $i0 - $i3;

        if $i3 != 0 goto label01;

        return $i2;

     label01:
        $i0 = $i0 ^ $i1;

        $i0 = $i0 >> 31;

        $z0 = 1;

        $i0 = $i0 | 1;

        $r1 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i4 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i4 = $r1[$i4];

        lookupswitch($i4)
        {
            case 1: goto label11;
            case 2: goto label14;
            case 3: goto label10;
            case 4: goto label15;
            case 5: goto label09;
            case 6: goto label03;
            case 7: goto label03;
            case 8: goto label03;
            default: goto label02;
        };

     label02:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i3);

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        $i1 = $i1 - $i3;

        $i1 = $i3 - $i1;

        if $i1 != 0 goto label08;

        $r3 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        if $r0 == $r3 goto label15;

        $r3 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        if $r0 != $r3 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        $i1 = $i2 & 1;

        if $i1 == 0 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        $z1 = $z1 & $z2;

        if $z1 == 0 goto label14;

        goto label15;

     label08:
        if $i1 <= 0 goto label14;

        goto label15;

     label09:
        if $i0 <= 0 goto label14;

        goto label15;

     label10:
        if $i0 >= 0 goto label14;

        goto label15;

     label11:
        if $i3 != 0 goto label12;

        goto label13;

     label12:
        $z0 = 0;

     label13:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label14:
        $z0 = 0;

     label15:
        if $z0 == 0 goto label17;

        $i0 = $i2 + $i0;

        return $i0;

     label16:
        $r4 = new java.lang.ArithmeticException;

        specialinvoke $r4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("/ by zero");

        throw $r4;

     label17:
        return $i2;
    }

    public static int factorial(int)
    {
        int $i0, $i1;
        int[] $r0;

        $i1 := @parameter0: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", $i1);

        $r0 = <com.google.common.math.IntMath: int[] factorials>;

        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label1;

        $i1 = $r0[$i1];

        return $i1;

     label1:
        return 2147483647;
    }

    public static int floorPowerOfTwo(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkPositive(java.lang.String,int)>("x", $i0);

        $i0 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        return $i0;
    }

    public static int gcd(int, int)
    {
        int $i0, $i1, $i2, $i3, $i4;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("a", $i0);

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("b", $i1);

        if $i0 != 0 goto label1;

        return $i1;

     label1:
        if $i1 != 0 goto label2;

        return $i0;

     label2:
        $i2 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>($i0);

        $i3 = $i0 >> $i2;

        $i0 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>($i1);

        $i1 = $i1 >> $i0;

     label3:
        if $i3 == $i1 goto label4;

        $i4 = $i3 - $i1;

        $i3 = $i4 >> 31;

        $i3 = $i3 & $i4;

        $i4 = $i4 - $i3;

        $i4 = $i4 - $i3;

        $i1 = $i1 + $i3;

        $i3 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>($i4);

        $i3 = $i4 >> $i3;

        goto label3;

     label4:
        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i0);

        $i0 = $i3 << $i0;

        return $i0;
    }

    public static boolean isPowerOfTwo(int)
    {
        int $i0, $i1;
        boolean $z0, $z1;

        $i1 := @parameter0: int;

        $z0 = 0;

        if $i1 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $i0 = -1;

        $i0 = $i1 + $i0;

        $i1 = $i1 & $i0;

        if $i1 != 0 goto label3;

        $z0 = 1;

     label3:
        $z0 = $z1 & $z0;

        return $z0;
    }

    public static boolean isPrime(int)
    {
        int $i1;
        long $l0;
        boolean $z0;

        $i1 := @parameter0: int;

        $l0 = (long) $i1;

        $z0 = staticinvoke <com.google.common.math.LongMath: boolean isPrime(long)>($l0);

        return $z0;
    }

    public static int lessThanBranchFree(int, int)
    {
        int $i0, $i1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = $i1 - $i0;

        $i0 = -1;

        $i1 = $i1 ^ $i0;

        $i0 = -1;

        $i1 = $i1 ^ $i0;

        $i1 = $i1 >>> 31;

        return $i1;
    }

    public static int log10(int, java.math.RoundingMode)
    {
        java.lang.AssertionError $r2;
        int[] $r0;
        int $i0, $i1, $i2, $i3;
        java.math.RoundingMode $r1;
        boolean $z0;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: int checkPositive(java.lang.String,int)>("x", $i0);

        $i1 = staticinvoke <com.google.common.math.IntMath: int log10Floor(int)>($i0);

        $r0 = <com.google.common.math.IntMath: int[] powersOf10>;

        $i2 = $r0[$i1];

        $r0 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i3 = virtualinvoke $r1.<java.math.RoundingMode: int ordinal()>();

        $i3 = $r0[$i3];

        lookupswitch($i3)
        {
            case 1: goto label5;
            case 2: goto label8;
            case 3: goto label8;
            case 4: goto label4;
            case 5: goto label4;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $r0 = <com.google.common.math.IntMath: int[] halfPowersOf10>;

        $i2 = $r0[$i1];

        $i0 = staticinvoke <com.google.common.math.IntMath: int lessThanBranchFree(int,int)>($i2, $i0);

     label3:
        $i0 = $i1 + $i0;

        return $i0;

     label4:
        $i0 = staticinvoke <com.google.common.math.IntMath: int lessThanBranchFree(int,int)>($i2, $i0);

        goto label3;

     label5:
        if $i0 != $i2 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label8:
        return $i1;
    }

    public static int log10Floor(int)
    {
        byte[] $r0;
        byte $b2;
        int[] $r1;
        int $i0, $i1;

        $i0 := @parameter0: int;

        $r0 = <com.google.common.math.IntMath: byte[] maxLog10ForLeadingZeros>;

        $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $b2 = $r0[$i1];

        $r1 = <com.google.common.math.IntMath: int[] powersOf10>;

        $i1 = (int) $b2;

        $i1 = $r1[$i1];

        $i0 = staticinvoke <com.google.common.math.IntMath: int lessThanBranchFree(int,int)>($i0, $i1);

        $i1 = (int) $b2;

        $i0 = $i1 - $i0;

        return $i0;
    }

    public static int log2(int, java.math.RoundingMode)
    {
        int[] $r1;
        int $i0, $i1, $i2;
        java.lang.AssertionError $r2;
        java.math.RoundingMode $r0;
        boolean $z0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: int checkPositive(java.lang.String,int)>("x", $i0);

        $r1 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i1 = virtualinvoke $r0.<java.math.RoundingMode: int ordinal()>();

        $i1 = $r1[$i1];

        lookupswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i1 = -1257966797 >>> $i2;

        $i2 = 31 - $i2;

        $i0 = staticinvoke <com.google.common.math.IntMath: int lessThanBranchFree(int,int)>($i1, $i0);

        $i0 = $i2 + $i0;

        return $i0;

     label3:
        $i1 = -1;

        $i0 = $i0 + $i1;

        $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i0 = 32 - $i0;

        return $i0;

     label4:
        $z0 = staticinvoke <com.google.common.math.IntMath: boolean isPowerOfTwo(int)>($i0);

        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label5:
        $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i0 = 31 - $i0;

        return $i0;
    }

    public static int mean(int, int)
    {
        int $i0, $i1, $i2;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i2 = $i1 & $i0;

        $i1 = $i1 ^ $i0;

        $i1 = $i1 >> 1;

        $i1 = $i2 + $i1;

        return $i1;
    }

    public static int mod(int, int)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.ArithmeticException $r2;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 <= 0 goto label2;

        $i0 = $i0 % $i1;

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        $i0 = $i0 + $i1;

        return $i0;

     label2:
        $r2 = new java.lang.ArithmeticException;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Modulus ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be > 0");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    public static int pow(int, int)
    {
        int $i0, $i1, $i2, $i3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", $i1);

        $i2 = -2;

        if $i0 == $i2 goto label10;

        $i2 = -1;

        if $i0 == $i2 goto label09;

        if $i0 == 0 goto label08;

        if $i0 == 1 goto label07;

        if $i0 == 2 goto label06;

        $i2 = 1;

     label01:
        if $i1 == 0 goto label05;

        if $i1 == 1 goto label04;

        $i3 = $i1 & 1;

        if $i3 != 0 goto label02;

        $i3 = 1;

        goto label03;

     label02:
        $i3 = $i0;

     label03:
        $i2 = $i2 * $i3;

        $i0 = $i0 * $i0;

        $i1 = $i1 >> 1;

        goto label01;

     label04:
        $i0 = $i0 * $i2;

        return $i0;

     label05:
        return $i2;

     label06:
        if $i1 >= 32 goto label12;

        $i0 = 1 << $i1;

        return $i0;

     label07:
        return 1;

     label08:
        if $i1 != 0 goto label12;

        return 1;

     label09:
        $i0 = $i1 & 1;

        if $i0 != 0 goto label13;

        return 1;

     label10:
        if $i1 >= 32 goto label12;

        $i0 = $i1 & 1;

        if $i0 != 0 goto label11;

        $i0 = 1 << $i1;

        return $i0;

     label11:
        $i0 = 1 << $i1;

        $i0 = neg $i0;

        return $i0;

     label12:
        return 0;

     label13:
        $i0 = -1;

        return $i0;
    }

    public static int saturatedAdd(int, int)
    {
        int $i0, $i1;
        long $l2, $l3;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $l2 = (long) $i1;

        $l3 = (long) $i0;

        $l2 = $l2 + $l3;

        $i1 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l2);

        return $i1;
    }

    public static int saturatedMultiply(int, int)
    {
        int $i0, $i1;
        long $l2, $l3;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $l2 = (long) $i1;

        $l3 = (long) $i0;

        $l2 = $l2 * $l3;

        $i1 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l2);

        return $i1;
    }

    public static int saturatedPow(int, int)
    {
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", $i1);

        $i2 = -2;

        if $i0 == $i2 goto label14;

        $i2 = -1;

        if $i0 == $i2 goto label13;

        if $i0 == 0 goto label12;

        if $i0 == 1 goto label11;

        if $i0 == 2 goto label09;

        $i2 = $i0 >>> 31;

        $i3 = $i1 & 1;

        $i2 = $i2 & $i3;

        $i2 = $i2 + 2147483647;

        $i3 = 1;

     label01:
        if $i1 == 0 goto label17;

        if $i1 == 1 goto label08;

        $i4 = $i1 & 1;

        if $i4 == 0 goto label02;

        $i3 = staticinvoke <com.google.common.math.IntMath: int saturatedMultiply(int,int)>($i3, $i0);

     label02:
        $i1 = $i1 >> 1;

        if $i1 <= 0 goto label01;

        if -46340 <= $i0 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        $i4 = 46340;

        if $i0 <= $i4 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        $z0 = $z0 | $z1;

        if $z0 == 0 goto label07;

        return $i2;

     label07:
        $i0 = $i0 * $i0;

        goto label01;

     label08:
        $i0 = staticinvoke <com.google.common.math.IntMath: int saturatedMultiply(int,int)>($i3, $i0);

        return $i0;

     label09:
        if $i1 < 31 goto label10;

        return 2147483647;

     label10:
        $i0 = 1 << $i1;

        return $i0;

     label11:
        return 1;

     label12:
        if $i1 != 0 goto label18;

        return 1;

     label13:
        $i0 = $i1 & 1;

        if $i0 != 0 goto label19;

        return 1;

     label14:
        if $i1 < 32 goto label15;

        $i0 = $i1 & 1;

        $i0 = $i0 + 2147483647;

        return $i0;

     label15:
        $i0 = $i1 & 1;

        if $i0 != 0 goto label16;

        $i0 = 1 << $i1;

        return $i0;

     label16:
        $i0 = -1;

        $i0 = $i0 << $i1;

        return $i0;

     label17:
        return $i3;

     label18:
        return 0;

     label19:
        $i0 = -1;

        return $i0;
    }

    public static int saturatedSubtract(int, int)
    {
        int $i0, $i1;
        long $l2, $l3;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $l2 = (long) $i1;

        $l3 = (long) $i0;

        $l2 = $l2 - $l3;

        $i1 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>($l2);

        return $i1;
    }

    public static int sqrt(int, java.math.RoundingMode)
    {
        int[] $r0;
        int $i0, $i1, $i2;
        java.lang.AssertionError $r2;
        java.math.RoundingMode $r1;
        boolean $z0;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("x", $i0);

        $i1 = staticinvoke <com.google.common.math.IntMath: int sqrtFloor(int)>($i0);

        $r0 = <com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i2 = virtualinvoke $r1.<java.math.RoundingMode: int ordinal()>();

        $i2 = $r0[$i2];

        lookupswitch($i2)
        {
            case 1: goto label5;
            case 2: goto label8;
            case 3: goto label8;
            case 4: goto label4;
            case 5: goto label4;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $i2 = $i1 * $i1;

        $i2 = $i2 + $i1;

        $i0 = staticinvoke <com.google.common.math.IntMath: int lessThanBranchFree(int,int)>($i2, $i0);

     label3:
        $i0 = $i1 + $i0;

        return $i0;

     label4:
        $i2 = $i1 * $i1;

        $i0 = staticinvoke <com.google.common.math.IntMath: int lessThanBranchFree(int,int)>($i2, $i0);

        goto label3;

     label5:
        $i2 = $i1 * $i1;

        if $i2 != $i0 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label8:
        return $i1;
    }

    public static int sqrtFloor(int)
    {
        int $i0;
        double $d0;

        $i0 := @parameter0: int;

        $d0 = (double) $i0;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $i0 = (int) $d0;

        return $i0;
    }
}
