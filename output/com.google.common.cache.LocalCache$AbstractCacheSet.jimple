public abstract class com.google.common.cache.LocalCache$AbstractCacheSet extends java.util.AbstractSet
{
    public final java.util.concurrent.ConcurrentMap map;
    public final com.google.common.cache.LocalCache this$0;

    public void <init>(com.google.common.cache.LocalCache, java.util.concurrent.ConcurrentMap)
    {
        com.google.common.cache.LocalCache$AbstractCacheSet r0;
        com.google.common.cache.LocalCache $r1;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.google.common.cache.LocalCache$AbstractCacheSet;

        $r1 := @parameter0: com.google.common.cache.LocalCache;

        $r2 := @parameter1: java.util.concurrent.ConcurrentMap;

        r0.<com.google.common.cache.LocalCache$AbstractCacheSet: com.google.common.cache.LocalCache this$0> = $r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<com.google.common.cache.LocalCache$AbstractCacheSet: java.util.concurrent.ConcurrentMap map> = $r2;

        return;
    }

    public void clear()
    {
        com.google.common.cache.LocalCache$AbstractCacheSet r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.google.common.cache.LocalCache$AbstractCacheSet;

        $r1 = r0.<com.google.common.cache.LocalCache$AbstractCacheSet: java.util.concurrent.ConcurrentMap map>;

        interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: void clear()>();

        return;
    }

    public boolean isEmpty()
    {
        com.google.common.cache.LocalCache$AbstractCacheSet r0;
        boolean $z0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.google.common.cache.LocalCache$AbstractCacheSet;

        $r1 = r0.<com.google.common.cache.LocalCache$AbstractCacheSet: java.util.concurrent.ConcurrentMap map>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        return $z0;
    }

    public int size()
    {
        int $i0;
        com.google.common.cache.LocalCache$AbstractCacheSet r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.google.common.cache.LocalCache$AbstractCacheSet;

        $r1 = r0.<com.google.common.cache.LocalCache$AbstractCacheSet: java.util.concurrent.ConcurrentMap map>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        com.google.common.cache.LocalCache$AbstractCacheSet r0;
        java.lang.Object[] $r2;
        java.util.ArrayList $r1;

        r0 := @this: com.google.common.cache.LocalCache$AbstractCacheSet;

        $r1 = staticinvoke <com.google.common.cache.LocalCache: java.util.ArrayList access$200(java.util.Collection)>(r0);

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        com.google.common.cache.LocalCache$AbstractCacheSet r0;
        java.lang.Object[] $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.google.common.cache.LocalCache$AbstractCacheSet;

        $r1 := @parameter0: java.lang.Object[];

        $r2 = staticinvoke <com.google.common.cache.LocalCache: java.util.ArrayList access$200(java.util.Collection)>(r0);

        $r1 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        return $r1;
    }
}
