public abstract class com.google.common.cache.AbstractLoadingCache extends com.google.common.cache.AbstractCache implements com.google.common.cache.LoadingCache
{

    public void <init>()
    {
        com.google.common.cache.AbstractLoadingCache r0;

        r0 := @this: com.google.common.cache.AbstractLoadingCache;

        specialinvoke r0.<com.google.common.cache.AbstractCache: void <init>()>();

        return;
    }

    public final java.lang.Object apply(java.lang.Object)
    {
        com.google.common.cache.AbstractLoadingCache r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.cache.AbstractLoadingCache;

        $r1 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.google.common.cache.AbstractLoadingCache: java.lang.Object getUnchecked(java.lang.Object)>($r1);

        return $r1;
    }

    public com.google.common.collect.ImmutableMap getAll(java.lang.Iterable)
    {
        java.util.Iterator $r3;
        com.google.common.collect.ImmutableMap $r6;
        com.google.common.cache.AbstractLoadingCache r0;
        java.lang.Iterable $r1;
        java.util.LinkedHashMap $r2;
        java.lang.Object $r4, $r5;
        boolean $z0;

        r0 := @this: com.google.common.cache.AbstractLoadingCache;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r5 = interfaceinvoke r0.<com.google.common.cache.LoadingCache: java.lang.Object get(java.lang.Object)>($r4);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        goto label1;

     label2:
        $r6 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>($r2);

        return $r6;
    }

    public java.lang.Object getUnchecked(java.lang.Object)
    {
        java.util.concurrent.ExecutionException $r3;
        java.lang.Throwable $r4;
        com.google.common.util.concurrent.UncheckedExecutionException $r1;
        com.google.common.cache.AbstractLoadingCache r0;
        java.lang.Object $r2;

        r0 := @this: com.google.common.cache.AbstractLoadingCache;

        $r2 := @parameter0: java.lang.Object;

     label1:
        $r2 = interfaceinvoke r0.<com.google.common.cache.LoadingCache: java.lang.Object get(java.lang.Object)>($r2);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r1 = new com.google.common.util.concurrent.UncheckedExecutionException;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke $r1.<com.google.common.util.concurrent.UncheckedExecutionException: void <init>(java.lang.Throwable)>($r4);

        throw $r1;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public void refresh(java.lang.Object)
    {
        com.google.common.cache.AbstractLoadingCache r0;
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;

        r0 := @this: com.google.common.cache.AbstractLoadingCache;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }
}
