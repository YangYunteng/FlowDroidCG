public final class i.a.r extends java.lang.Object implements java.util.List, java.io.Serializable, java.util.RandomAccess, i.f.b.a.a
{
    public static final i.a.r a;

    static void <clinit>()
    {
        i.a.r $r0;

        $r0 = new i.a.r;

        specialinvoke $r0.<i.a.r: void <init>()>();

        <i.a.r: i.a.r a> = $r0;

        return;
    }

    public void <init>()
    {
        i.a.r r0;

        r0 := @this: i.a.r;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int a()
    {
        i.a.r r0;

        r0 := @this: i.a.r;

        return 0;
    }

    public boolean a(java.lang.Void)
    {
        java.lang.Void $r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.lang.Void;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "element");

        return 0;
    }

    public void add(int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        int $i0;
        java.lang.Object $r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        java.util.Collection $r1;
        int $i0;
        i.a.r r0;

        r0 := @this: i.a.r;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        i.a.r r0;
        java.util.Collection $r1;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public int b(java.lang.Void)
    {
        int $i0;
        java.lang.Void $r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.lang.Void;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "element");

        $i0 = -1;

        return $i0;
    }

    public int c(java.lang.Void)
    {
        int $i0;
        java.lang.Void $r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.lang.Void;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "element");

        $i0 = -1;

        return $i0;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final volatile boolean contains(java.lang.Object)
    {
        java.lang.Void $r2;
        java.lang.Object $r1;
        i.a.r r0;
        boolean $z0;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.Void;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Void) $r1;

        $z0 = virtualinvoke r0.<i.a.r: boolean a(java.lang.Void)>($r2);

        return $z0;

     label1:
        return 0;
    }

    public boolean containsAll(java.util.Collection)
    {
        i.a.r r0;
        boolean $z0;
        java.util.Collection $r1;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "elements");

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.List $r2;
        java.lang.Object $r1;
        i.a.r r0;
        boolean $z0;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile java.lang.Object get(int)
    {
        int $i0;
        i.a.r r0;
        java.lang.NullPointerException r1;

        r0 := @this: i.a.r;

        $i0 := @parameter0: int;

        virtualinvoke r0.<i.a.r: java.lang.Void get(int)>($i0);

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

    public java.lang.Void get(int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        i.a.r r0;

        r0 := @this: i.a.r;

        $i0 := @parameter0: int;

        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty list doesn\'t contain element at index ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public int hashCode()
    {
        i.a.r r0;

        r0 := @this: i.a.r;

        return 1;
    }

    public final volatile int indexOf(java.lang.Object)
    {
        java.lang.Void $r2;
        int $i0;
        java.lang.Object $r1;
        i.a.r r0;
        boolean $z0;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.Void;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Void) $r1;

        $i0 = virtualinvoke r0.<i.a.r: int b(java.lang.Void)>($r2);

        return $i0;

     label1:
        $i0 = -1;

        return $i0;
    }

    public boolean isEmpty()
    {
        i.a.r r0;

        r0 := @this: i.a.r;

        return 1;
    }

    public java.util.Iterator iterator()
    {
        i.a.q r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        r1 = <i.a.q: i.a.q a>;

        return r1;
    }

    public final volatile int lastIndexOf(java.lang.Object)
    {
        java.lang.Void $r2;
        int $i0;
        java.lang.Object $r1;
        i.a.r r0;
        boolean $z0;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.Void;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Void) $r1;

        $i0 = virtualinvoke r0.<i.a.r: int c(java.lang.Void)>($r2);

        return $i0;

     label1:
        $i0 = -1;

        return $i0;
    }

    public java.util.ListIterator listIterator()
    {
        i.a.q r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        r1 = <i.a.q: i.a.q a>;

        return r1;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        i.a.q r4;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        i.a.r r0;

        r0 := @this: i.a.r;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        r4 = <i.a.q: i.a.q a>;

        return r4;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public java.lang.Object remove(int)
    {
        int $i0;
        java.lang.UnsupportedOperationException $r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object $r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        i.a.r r0;
        java.util.Collection $r1;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r2;
        i.a.r r0;
        java.util.Collection $r1;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r2;
        int $i0;
        java.lang.Object $r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public final volatile int size()
    {
        int $i0;
        i.a.r r0;

        r0 := @this: i.a.r;

        $i0 = virtualinvoke r0.<i.a.r: int a()>();

        return $i0;
    }

    public java.util.List subList(int, int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        i.a.r r0;

        r0 := @this: i.a.r;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        if $i1 != 0 goto label1;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", toIndex: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public java.lang.Object[] toArray()
    {
        java.lang.Object[] $r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        $r1 = staticinvoke <i.f.b.f: java.lang.Object[] a(java.util.Collection)>(r0);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] $r1;
        i.a.r r0;

        r0 := @this: i.a.r;

        $r1 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <i.f.b.f: java.lang.Object[] a(java.util.Collection,java.lang.Object[])>(r0, $r1);

        return $r1;
    }

    public java.lang.String toString()
    {
        i.a.r r0;

        r0 := @this: i.a.r;

        return "[]";
    }
}
