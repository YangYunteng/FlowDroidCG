public final class com.google.common.collect.ImmutableTable$CollectorState extends java.lang.Object
{
    public final java.util.List insertionOrder;
    public final com.google.common.collect.Table table;

    public void <init>()
    {
        com.google.common.collect.HashBasedTable $r1;
        com.google.common.collect.ImmutableTable$CollectorState r0;
        java.util.ArrayList $r2;

        r0 := @this: com.google.common.collect.ImmutableTable$CollectorState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.google.common.collect.ImmutableTable$CollectorState: java.util.List insertionOrder> = $r2;

        $r1 = staticinvoke <com.google.common.collect.HashBasedTable: com.google.common.collect.HashBasedTable create()>();

        r0.<com.google.common.collect.ImmutableTable$CollectorState: com.google.common.collect.Table table> = $r1;

        return;
    }

    public void <init>(com.google.common.collect.ImmutableTable$1)
    {
        com.google.common.collect.ImmutableTable$CollectorState r0;
        com.google.common.collect.ImmutableTable$1 $r1;

        r0 := @this: com.google.common.collect.ImmutableTable$CollectorState;

        $r1 := @parameter0: com.google.common.collect.ImmutableTable$1;

        specialinvoke r0.<com.google.common.collect.ImmutableTable$CollectorState: void <init>()>();

        return;
    }

    public com.google.common.collect.ImmutableTable$CollectorState combine(com.google.common.collect.ImmutableTable$CollectorState, java.util.function.BinaryOperator)
    {
        java.util.Iterator $r4;
        com.google.common.collect.ImmutableTable$CollectorState r0, $r2;
        java.util.function.BinaryOperator $r1;
        java.util.List $r3;
        com.google.common.collect.ImmutableTable$MutableCell $r6;
        java.lang.Object $r5, $r7, $r8;
        boolean $z0;

        r0 := @this: com.google.common.collect.ImmutableTable$CollectorState;

        $r2 := @parameter0: com.google.common.collect.ImmutableTable$CollectorState;

        $r1 := @parameter1: java.util.function.BinaryOperator;

        $r3 = $r2.<com.google.common.collect.ImmutableTable$CollectorState: java.util.List insertionOrder>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.common.collect.ImmutableTable$MutableCell) $r5;

        $r5 = virtualinvoke $r6.<com.google.common.collect.ImmutableTable$MutableCell: java.lang.Object getRowKey()>();

        $r7 = virtualinvoke $r6.<com.google.common.collect.ImmutableTable$MutableCell: java.lang.Object getColumnKey()>();

        $r8 = virtualinvoke $r6.<com.google.common.collect.ImmutableTable$MutableCell: java.lang.Object getValue()>();

        virtualinvoke r0.<com.google.common.collect.ImmutableTable$CollectorState: void put(java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)>($r5, $r7, $r8, $r1);

        goto label1;

     label2:
        return r0;
    }

    public void put(java.lang.Object, java.lang.Object, java.lang.Object, java.util.function.BinaryOperator)
    {
        com.google.common.collect.ImmutableTable$CollectorState r0;
        java.util.function.BinaryOperator $r5;
        java.util.List $r8;
        com.google.common.collect.ImmutableTable$MutableCell $r7;
        java.lang.Object $r1, $r2, $r3, $r4;
        com.google.common.collect.Table $r6;

        r0 := @this: com.google.common.collect.ImmutableTable$CollectorState;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r4 := @parameter2: java.lang.Object;

        $r5 := @parameter3: java.util.function.BinaryOperator;

        $r6 = r0.<com.google.common.collect.ImmutableTable$CollectorState: com.google.common.collect.Table table>;

        $r3 = interfaceinvoke $r6.<com.google.common.collect.Table: java.lang.Object get(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r7 = (com.google.common.collect.ImmutableTable$MutableCell) $r3;

        if $r7 != null goto label1;

        $r7 = new com.google.common.collect.ImmutableTable$MutableCell;

        specialinvoke $r7.<com.google.common.collect.ImmutableTable$MutableCell: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, $r4);

        $r8 = r0.<com.google.common.collect.ImmutableTable$CollectorState: java.util.List insertionOrder>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r6 = r0.<com.google.common.collect.ImmutableTable$CollectorState: com.google.common.collect.Table table>;

        interfaceinvoke $r6.<com.google.common.collect.Table: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r2, $r7);

        return;

     label1:
        virtualinvoke $r7.<com.google.common.collect.ImmutableTable$MutableCell: void merge(java.lang.Object,java.util.function.BinaryOperator)>($r4, $r5);

        return;
    }

    public com.google.common.collect.ImmutableTable toTable()
    {
        java.util.List $r2;
        com.google.common.collect.ImmutableTable$CollectorState r0;
        com.google.common.collect.ImmutableTable $r1;

        r0 := @this: com.google.common.collect.ImmutableTable$CollectorState;

        $r2 = r0.<com.google.common.collect.ImmutableTable$CollectorState: java.util.List insertionOrder>;

        $r1 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable access$000(java.lang.Iterable)>($r2);

        return $r1;
    }
}
