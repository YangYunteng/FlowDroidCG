public class project.android.imageprocessing.filter.effect.HalftoneFilter extends project.android.imageprocessing.filter.effect.PixellateFilter
{

    public void <init>(float, float)
    {
        float $f0, $f1;
        project.android.imageprocessing.filter.effect.HalftoneFilter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.HalftoneFilter;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        specialinvoke r0.<project.android.imageprocessing.filter.effect.PixellateFilter: void <init>(float,float)>($f0, $f1);

        return;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.filter.effect.HalftoneFilter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.HalftoneFilter;

        return "precision mediump float;\nuniform sampler2D u_Texture0;\nvarying vec2 v_TexCoord;\nuniform float u_FractionalWidth;\nuniform float u_AspectRatio;\nconst highp vec3 W = vec3(0.2125, 0.7154, 0.0721);\nvoid main(){\n   highp vec2 sampleDivisor = vec2(u_FractionalWidth, u_FractionalWidth /  u_AspectRatio);\n   highp vec2 samplePos = v_TexCoord - mod(v_TexCoord, sampleDivisor) + 0.5 * sampleDivisor;\n   highp vec2 textureCoordinateToUse = vec2(v_TexCoord.x, (v_TexCoord.y * u_AspectRatio + 0.5 - 0.5 * u_AspectRatio));\n   highp vec2 adjustedSamplePos = vec2(samplePos.x, (samplePos.y * u_AspectRatio + 0.5 - 0.5 * u_AspectRatio));\n   highp float distanceFromSamplePoint = distance(adjustedSamplePos, textureCoordinateToUse);\n   lowp vec3 sampledColor = texture2D(u_Texture0, samplePos ).rgb;\n   highp float dotScaling = 1.0 - dot(sampledColor, W);\n   lowp float checkForPresenceWithinDot = 1.0 - step(distanceFromSamplePoint, (u_FractionalWidth * 0.5) * dotScaling);\n   gl_FragColor = vec4(vec3(checkForPresenceWithinDot), 1.0);\n}\n";
    }
}
