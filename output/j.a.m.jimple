public abstract class j.a.M extends j.a.K
{

    public void <init>()
    {
        j.a.M r0;

        r0 := @this: j.a.M;

        specialinvoke r0.<j.a.K: void <init>()>();

        return;
    }

    public final void a(long, j.a.L$a)
    {
        j.a.M r0;
        j.a.L$a $r1;
        long $l0;
        java.lang.AssertionError $r3;
        j.a.B $r2;
        boolean $z0;

        r0 := @this: j.a.M;

        $l0 := @parameter0: long;

        $r1 := @parameter1: j.a.L$a;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "delayedTask");

        $z0 = staticinvoke <j.a.z: boolean a()>();

        if $z0 == 0 goto label4;

        $r2 = <j.a.B: j.a.B g>;

        if r0 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $r2 = <j.a.B: j.a.B g>;

        virtualinvoke $r2.<j.a.L: void b(long,j.a.L$a)>($l0, $r1);

        return;
    }

    public abstract java.lang.Thread q();

    public final void r()
    {
        j.a.M r0;
        java.lang.Thread $r1, $r2;
        j.a.qa $r3;

        r0 := @this: j.a.M;

        $r1 = virtualinvoke r0.<j.a.M: java.lang.Thread q()>();

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r2 == $r1 goto label2;

        $r3 = staticinvoke <j.a.ra: j.a.qa a()>();

        if $r3 == null goto label1;

        interfaceinvoke $r3.<j.a.qa: void a(java.lang.Thread)>($r1);

        return;

     label1:
        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r1);

     label2:
        return;
    }
}
