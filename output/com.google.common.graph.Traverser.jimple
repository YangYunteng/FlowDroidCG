public abstract class com.google.common.graph.Traverser extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.graph.Traverser r0;

        r0 := @this: com.google.common.graph.Traverser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(com.google.common.graph.Traverser$1)
    {
        com.google.common.graph.Traverser$1 $r1;
        com.google.common.graph.Traverser r0;

        r0 := @this: com.google.common.graph.Traverser;

        $r1 := @parameter0: com.google.common.graph.Traverser$1;

        specialinvoke r0.<com.google.common.graph.Traverser: void <init>()>();

        return;
    }

    public static com.google.common.graph.Traverser forGraph(com.google.common.graph.SuccessorsFunction)
    {
        com.google.common.graph.SuccessorsFunction $r0;
        com.google.common.graph.Traverser$GraphTraverser $r1;

        $r0 := @parameter0: com.google.common.graph.SuccessorsFunction;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.graph.Traverser$GraphTraverser;

        specialinvoke $r1.<com.google.common.graph.Traverser$GraphTraverser: void <init>(com.google.common.graph.SuccessorsFunction)>($r0);

        return $r1;
    }

    public static com.google.common.graph.Traverser forTree(com.google.common.graph.SuccessorsFunction)
    {
        com.google.common.graph.BaseGraph $r1;
        com.google.common.graph.Traverser$TreeTraverser $r3;
        com.google.common.graph.SuccessorsFunction $r0;
        com.google.common.graph.Network $r2;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.SuccessorsFunction;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $z0 = $r0 instanceof com.google.common.graph.BaseGraph;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.graph.BaseGraph) $r0;

        $z0 = interfaceinvoke $r1.<com.google.common.graph.BaseGraph: boolean isDirected()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Undirected graphs can never be trees.");

     label1:
        $z0 = $r0 instanceof com.google.common.graph.Network;

        if $z0 == 0 goto label2;

        $r2 = (com.google.common.graph.Network) $r0;

        $z0 = interfaceinvoke $r2.<com.google.common.graph.Network: boolean isDirected()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Undirected networks can never be trees.");

     label2:
        $r3 = new com.google.common.graph.Traverser$TreeTraverser;

        specialinvoke $r3.<com.google.common.graph.Traverser$TreeTraverser: void <init>(com.google.common.graph.SuccessorsFunction)>($r0);

        return $r3;
    }

    public abstract java.lang.Iterable breadthFirst(java.lang.Object);

    public abstract java.lang.Iterable depthFirstPostOrder(java.lang.Object);

    public abstract java.lang.Iterable depthFirstPreOrder(java.lang.Object);
}
