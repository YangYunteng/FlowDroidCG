public class org.dom4j.tree.QNameCache extends java.lang.Object
{
    public org.dom4j.DocumentFactory documentFactory;
    public java.util.Map namespaceCache;
    public java.util.Map noNamespaceCache;

    public void <init>()
    {
        org.dom4j.tree.QNameCache r0;
        java.util.WeakHashMap $r1;
        java.util.Map $r2;

        r0 := @this: org.dom4j.tree.QNameCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1);

        r0.<org.dom4j.tree.QNameCache: java.util.Map noNamespaceCache> = $r2;

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1);

        r0.<org.dom4j.tree.QNameCache: java.util.Map namespaceCache> = $r2;

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        java.util.Map $r3;
        org.dom4j.tree.QNameCache r0;
        java.util.WeakHashMap $r2;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.WeakHashMap;

        specialinvoke $r2.<java.util.WeakHashMap: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r2);

        r0.<org.dom4j.tree.QNameCache: java.util.Map noNamespaceCache> = $r3;

        $r2 = new java.util.WeakHashMap;

        specialinvoke $r2.<java.util.WeakHashMap: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r2);

        r0.<org.dom4j.tree.QNameCache: java.util.Map namespaceCache> = $r3;

        r0.<org.dom4j.tree.QNameCache: org.dom4j.DocumentFactory documentFactory> = $r1;

        return;
    }

    public java.util.Map createMap()
    {
        java.util.HashMap $r2;
        org.dom4j.tree.QNameCache r0;
        java.util.Map $r1;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r2);

        return $r1;
    }

    public org.dom4j.QName createQName(java.lang.String)
    {
        org.dom4j.QName $r2;
        java.lang.String $r1;
        org.dom4j.tree.QNameCache r0;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.dom4j.QName;

        specialinvoke $r2.<org.dom4j.QName: void <init>(java.lang.String)>($r1);

        return $r2;
    }

    public org.dom4j.QName createQName(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.Namespace $r2;
        org.dom4j.QName $r3;
        java.lang.String $r1;
        org.dom4j.tree.QNameCache r0;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.dom4j.Namespace;

        $r3 = new org.dom4j.QName;

        specialinvoke $r3.<org.dom4j.QName: void <init>(java.lang.String,org.dom4j.Namespace)>($r1, $r2);

        return $r3;
    }

    public org.dom4j.QName createQName(java.lang.String, org.dom4j.Namespace, java.lang.String)
    {
        org.dom4j.Namespace $r2;
        org.dom4j.QName $r4;
        java.lang.String $r1, $r3;
        org.dom4j.tree.QNameCache r0;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.dom4j.Namespace;

        $r3 := @parameter2: java.lang.String;

        $r4 = new org.dom4j.QName;

        specialinvoke $r4.<org.dom4j.QName: void <init>(java.lang.String,org.dom4j.Namespace,java.lang.String)>($r1, $r2, $r3);

        return $r4;
    }

    public org.dom4j.QName get(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        org.dom4j.QName $r4;
        java.lang.String $r1;
        org.dom4j.tree.QNameCache r0;
        org.dom4j.DocumentFactory $r5;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r2 = r0.<org.dom4j.tree.QNameCache: java.util.Map noNamespaceCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.dom4j.QName) $r3;

        goto label2;

     label1:
        $r4 = null;

        $r1 = "";

     label2:
        if $r4 != null goto label3;

        $r4 = virtualinvoke r0.<org.dom4j.tree.QNameCache: org.dom4j.QName createQName(java.lang.String)>($r1);

        $r5 = r0.<org.dom4j.tree.QNameCache: org.dom4j.DocumentFactory documentFactory>;

        virtualinvoke $r4.<org.dom4j.QName: void setDocumentFactory(org.dom4j.DocumentFactory)>($r5);

        $r2 = r0.<org.dom4j.tree.QNameCache: java.util.Map noNamespaceCache>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

     label3:
        return $r4;
    }

    public org.dom4j.QName get(java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r3;
        org.dom4j.tree.QNameCache r0;
        int $i0, $i1;
        org.dom4j.QName $r4;
        java.lang.String $r1, $r2, $r5;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 >= 0 goto label1;

        $r3 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String)>($r2);

        $r4 = virtualinvoke r0.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>($r1, $r3);

        return $r4;

     label1:
        $i1 = $i0 + 1;

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r3 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String,java.lang.String)>($r1, $r2);

        $r4 = virtualinvoke r0.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>($r5, $r3);

        return $r4;
    }

    public org.dom4j.QName get(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.Namespace $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        org.dom4j.QName $r5;
        java.lang.String $r1;
        org.dom4j.tree.QNameCache r0;
        org.dom4j.DocumentFactory $r6;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.dom4j.Namespace;

        $r3 = virtualinvoke r0.<org.dom4j.tree.QNameCache: java.util.Map getNamespaceCache(org.dom4j.Namespace)>($r2);

        if $r1 == null goto label1;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (org.dom4j.QName) $r4;

        goto label2;

     label1:
        $r5 = null;

        $r1 = "";

     label2:
        if $r5 != null goto label3;

        $r5 = virtualinvoke r0.<org.dom4j.tree.QNameCache: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r1, $r2);

        $r6 = r0.<org.dom4j.tree.QNameCache: org.dom4j.DocumentFactory documentFactory>;

        virtualinvoke $r5.<org.dom4j.QName: void setDocumentFactory(org.dom4j.DocumentFactory)>($r6);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

     label3:
        return $r5;
    }

    public org.dom4j.QName get(java.lang.String, org.dom4j.Namespace, java.lang.String)
    {
        org.dom4j.Namespace $r3;
        org.dom4j.tree.QNameCache r0;
        org.dom4j.DocumentFactory $r7;
        java.util.Map $r4;
        java.lang.Object $r5;
        org.dom4j.QName $r6;
        java.lang.String $r1, $r2;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: org.dom4j.Namespace;

        $r1 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<org.dom4j.tree.QNameCache: java.util.Map getNamespaceCache(org.dom4j.Namespace)>($r3);

        if $r2 == null goto label1;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r6 = (org.dom4j.QName) $r5;

        goto label2;

     label1:
        $r6 = null;

        $r2 = "";

     label2:
        if $r6 != null goto label3;

        $r6 = virtualinvoke r0.<org.dom4j.tree.QNameCache: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace,java.lang.String)>($r2, $r3, $r1);

        $r7 = r0.<org.dom4j.tree.QNameCache: org.dom4j.DocumentFactory documentFactory>;

        virtualinvoke $r6.<org.dom4j.QName: void setDocumentFactory(org.dom4j.DocumentFactory)>($r7);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

     label3:
        return $r6;
    }

    public java.util.Map getNamespaceCache(org.dom4j.Namespace)
    {
        org.dom4j.Namespace $r2, $r3;
        java.util.Map $r1, $r5;
        java.lang.Object $r4;
        org.dom4j.tree.QNameCache r0;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r2 := @parameter0: org.dom4j.Namespace;

        $r3 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        if $r2 != $r3 goto label1;

        $r1 = r0.<org.dom4j.tree.QNameCache: java.util.Map noNamespaceCache>;

        return $r1;

     label1:
        $r1 = null;

        if $r2 == null goto label2;

        $r1 = r0.<org.dom4j.tree.QNameCache: java.util.Map namespaceCache>;

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r1 = (java.util.Map) $r4;

     label2:
        if $r1 != null goto label3;

        $r5 = virtualinvoke r0.<org.dom4j.tree.QNameCache: java.util.Map createMap()>();

        $r1 = r0.<org.dom4j.tree.QNameCache: java.util.Map namespaceCache>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r5);

        return $r5;

     label3:
        return $r1;
    }

    public java.util.List getQNames()
    {
        java.util.Iterator $r4;
        java.util.Map $r2;
        java.util.Collection $r3;
        java.lang.Object $r5;
        org.dom4j.tree.QNameCache r0;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<org.dom4j.tree.QNameCache: java.util.Map noNamespaceCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r2 = r0.<org.dom4j.tree.QNameCache: java.util.Map namespaceCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.util.Map) $r5;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        goto label1;
    }

    public org.dom4j.QName intern(org.dom4j.QName)
    {
        org.dom4j.Namespace $r3;
        org.dom4j.QName $r1;
        java.lang.String $r2, $r4;
        org.dom4j.tree.QNameCache r0;

        r0 := @this: org.dom4j.tree.QNameCache;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<org.dom4j.QName: org.dom4j.Namespace getNamespace()>();

        $r4 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getQualifiedName()>();

        $r1 = virtualinvoke r0.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace,java.lang.String)>($r2, $r3, $r4);

        return $r1;
    }
}
