public abstract class i.c.a extends java.lang.Object implements i.c.h$b
{
    public final i.c.h$c key;

    public void <init>(i.c.h$c)
    {
        i.c.h$c $r1;
        i.c.a r0;

        r0 := @this: i.c.a;

        $r1 := @parameter0: i.c.h$c;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "key");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<i.c.a: i.c.h$c key> = $r1;

        return;
    }

    public java.lang.Object fold(java.lang.Object, i.f.a.p)
    {
        java.lang.Object $r2;
        i.f.a.p $r1;
        i.c.a r0;

        r0 := @this: i.c.a;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: i.f.a.p;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "operation");

        $r2 = staticinvoke <i.c.h$b$a: java.lang.Object a(i.c.h$b,java.lang.Object,i.f.a.p)>(r0, $r2, $r1);

        return $r2;
    }

    public i.c.h$b get(i.c.h$c)
    {
        i.c.h$b $r1;
        i.c.h$c $r2;
        i.c.a r0;

        r0 := @this: i.c.a;

        $r2 := @parameter0: i.c.h$c;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r2, "key");

        $r1 = staticinvoke <i.c.h$b$a: i.c.h$b a(i.c.h$b,i.c.h$c)>(r0, $r2);

        return $r1;
    }

    public i.c.h$c getKey()
    {
        i.c.h$c r1;
        i.c.a r0;

        r0 := @this: i.c.a;

        r1 = r0.<i.c.a: i.c.h$c key>;

        return r1;
    }

    public i.c.h minusKey(i.c.h$c)
    {
        i.c.h$c $r2;
        i.c.h $r1;
        i.c.a r0;

        r0 := @this: i.c.a;

        $r2 := @parameter0: i.c.h$c;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r2, "key");

        $r1 = staticinvoke <i.c.h$b$a: i.c.h b(i.c.h$b,i.c.h$c)>(r0, $r2);

        return $r1;
    }

    public i.c.h plus(i.c.h)
    {
        i.c.h $r1;
        i.c.a r0;

        r0 := @this: i.c.a;

        $r1 := @parameter0: i.c.h;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "context");

        $r1 = staticinvoke <i.c.h$b$a: i.c.h a(i.c.h$b,i.c.h)>(r0, $r1);

        return $r1;
    }
}
