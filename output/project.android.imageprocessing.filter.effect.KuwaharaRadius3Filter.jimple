public class project.android.imageprocessing.filter.effect.KuwaharaRadius3Filter extends project.android.imageprocessing.filter.BasicFilter
{

    public void <init>()
    {
        project.android.imageprocessing.filter.effect.KuwaharaRadius3Filter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.KuwaharaRadius3Filter;

        specialinvoke r0.<project.android.imageprocessing.filter.BasicFilter: void <init>()>();

        return;
    }

    public java.lang.String getFragmentShader()
    {
        project.android.imageprocessing.filter.effect.KuwaharaRadius3Filter r0;

        r0 := @this: project.android.imageprocessing.filter.effect.KuwaharaRadius3Filter;

        return "precision highp float;\nuniform sampler2D u_Texture0;\nvarying vec2 v_TexCoord;\nconst vec2 src_size = vec2 (1.0 / 768.0, 1.0 / 1024.0);\nvoid main(){\n  vec2 uv = v_TexCoord;\n  float n = float(16);\n  vec3 m0 = vec3(0.0); vec3 m1 = vec3(0.0); vec3 m2 = vec3(0.0); vec3 m3 = vec3(0.0);\n  vec3 s0 = vec3(0.0); vec3 s1 = vec3(0.0); vec3 s2 = vec3(0.0); vec3 s3 = vec3(0.0);\n  vec3 c;\n\tvec3 cSq;\n \tc = texture2D(u_Texture0, uv + vec2(-3,-3) * src_size).rgb;\n\tm0 += c;\n\ts0 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-3,-2) * src_size).rgb;\n\tm0 += c;\n\ts0 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-3,-1) * src_size).rgb;\n\tm0 += c;\n\ts0 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-3,0) * src_size).rgb;\n\tcSq = c * c;\n\tm0 += c;\n\ts0 += cSq;\n\tm1 += c;\n\ts1 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(-2,-3) * src_size).rgb;\n\tm0 += c;\n\ts0 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-2,-2) * src_size).rgb;\n\tm0 += c;\n\ts0 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-2,-1) * src_size).rgb;\n\tm0 += c;\n\ts0 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-2,0) * src_size).rgb;\n\tcSq = c * c;\n\tm0 += c;\n\ts0 += cSq;\n\tm1 += c;\n\ts1 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(-1,-3) * src_size).rgb;\n\tm0 += c;\n\ts0 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-1,-2) * src_size).rgb;\n\tm0 += c;\n\ts0 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-1,-1) * src_size).rgb;\n\tm0 += c;\n\ts0 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-1,0) * src_size).rgb;\n\tcSq = c * c;\n\tm0 += c;\n\ts0 += cSq;\n\tm1 += c;\n\ts1 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(0,-3) * src_size).rgb;\n\tcSq = c * c;\n\tm0 += c;\n\ts0 += cSq;\n\tm3 += c;\n\ts3 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(0,-2) * src_size).rgb;\n\tcSq = c * c;\n\tm0 += c;\n\ts0 += cSq;\n\tm3 += c;\n\ts3 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(0,-1) * src_size).rgb;\n\tcSq = c * c;\n\tm0 += c;\n\ts0 += cSq;\n\tm3 += c;\n\ts3 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(0,0) * src_size).rgb;\n\tcSq = c * c;\n\tm0 += c;\n\ts0 += cSq;\n\tm1 += c;\n\ts1 += cSq;\n\tm2 += c;\n\ts2 += cSq;\n\tm3 += c;\n\ts3 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(-3,3) * src_size).rgb;\n\tm1 += c;\n\ts1 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-3,2) * src_size).rgb;\n\tm1 += c;\n\ts1 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-3,1) * src_size).rgb;\n\tm1 += c;\n\ts1 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-2,3) * src_size).rgb;\n\tm1 += c;\n\ts1 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-2,2) * src_size).rgb;\n\tm1 += c;\n\ts1 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-2,1) * src_size).rgb;\n\tm1 += c;\n\ts1 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-1,3) * src_size).rgb;\n\tm1 += c;\n\ts1 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-1,2) * src_size).rgb;\n\tm1 += c;\n\ts1 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(-1,1) * src_size).rgb;\n\tm1 += c;\n\ts1 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(0,3) * src_size).rgb;\n\tcSq = c * c;\n\tm1 += c;\n\ts1 += cSq;\n\tm2 += c;\n\ts2 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(0,2) * src_size).rgb;\n\tcSq = c * c;\n\tm1 += c;\n\ts1 += cSq;\n\tm2 += c;\n\ts2 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(0,1) * src_size).rgb;\n\tcSq = c * c;\n\tm1 += c;\n\ts1 += cSq;\n\tm2 += c;\n\ts2 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(3,3) * src_size).rgb;\n\tm2 += c;\n\ts2 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(3,2) * src_size).rgb;\n\tm2 += c;\n\ts2 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(3,1) * src_size).rgb;\n\tm2 += c;\n\ts2 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(3,0) * src_size).rgb;\n\tcSq = c * c;\n\tm2 += c;\n\ts2 += cSq;\n\tm3 += c;\n\ts3 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(2,3) * src_size).rgb;\n\tm2 += c;\n\ts2 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(2,2) * src_size).rgb;\n\tm2 += c;\n\ts2 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(2,1) * src_size).rgb;\n\tm2 += c;\n\ts2 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(2,0) * src_size).rgb;\n\tcSq = c * c;\n\tm2 += c;\n\ts2 += cSq;\n\tm3 += c;\n\ts3 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(1,3) * src_size).rgb;\n\tm2 += c;\n\ts2 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(1,2) * src_size).rgb;\n\tm2 += c;\n\ts2 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(1,1) * src_size).rgb;\n\tm2 += c;\n\ts2 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(1,0) * src_size).rgb;\n\tcSq = c * c;\n\tm2 += c;\n\ts2 += cSq;\n\tm3 += c;\n\ts3 += cSq;\n\tc = texture2D(u_Texture0, uv + vec2(3,-3) * src_size).rgb;\n\tm3 += c;\n\ts3 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(3,-2) * src_size).rgb;\n\tm3 += c;\n\ts3 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(3,-1) * src_size).rgb;\n\tm3 += c;\n\ts3 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(2,-3) * src_size).rgb;\n\tm3 += c;\n\ts3 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(2,-2) * src_size).rgb;\n\tm3 += c;\n\ts3 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(2,-1) * src_size).rgb;\n\tm3 += c;\n\ts3 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(1,-3) * src_size).rgb;\n\tm3 += c;\n\ts3 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(1,-2) * src_size).rgb;\n\tm3 += c;\n\ts3 += c * c;\n\tc = texture2D(u_Texture0, uv + vec2(1,-1) * src_size).rgb;\n\tm3 += c;\n\ts3 += c * c;\n \tfloat min_sigma2 = 1e+2;\n \tm0 /= n;\n \ts0 = abs(s0 / n - m0 * m0);\n \tfloat sigma2 = s0.r + s0.g + s0.b;\n \tif (sigma2 < min_sigma2) {\n \t\tmin_sigma2 = sigma2;\n \t\tgl_FragColor = vec4(m0, 1.0);\n \t}\n \tm1 /= n;\n \ts1 = abs(s1 / n - m1 * m1);\n \tsigma2 = s1.r + s1.g + s1.b;\n \tif (sigma2 < min_sigma2) {\n \t\tmin_sigma2 = sigma2;\n \t\tgl_FragColor = vec4(m1, 1.0);\n \t}\n \tm2 /= n;\n \ts2 = abs(s2 / n - m2 * m2);\n \tsigma2 = s2.r + s2.g + s2.b;\n \tif (sigma2 < min_sigma2) {\n \t\tmin_sigma2 = sigma2;\n \t\tgl_FragColor = vec4(m2, 1.0);\n \t}\n \tm3 /= n;\n \ts3 = abs(s3 / n - m3 * m3);\n \tsigma2 = s3.r + s3.g + s3.b;\n \tif (sigma2 < min_sigma2) {\n \t\tmin_sigma2 = sigma2;\n \t\tgl_FragColor = vec4(m3, 1.0);\n \t}\n}\n";
    }
}
