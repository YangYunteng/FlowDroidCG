public abstract class project.android.imageprocessing.filter.MultiInputFilter extends project.android.imageprocessing.filter.BasicFilter
{
    public java.util.List filterLocations;
    public int numOfInputs;
    public int[] texture;
    public int[] textureHandle;
    public java.util.List texturesReceived;

    public void <init>(int)
    {
        project.android.imageprocessing.filter.MultiInputFilter r0;
        int[] $r1;
        int $i0, $i1;
        java.util.ArrayList $r2;

        r0 := @this: project.android.imageprocessing.filter.MultiInputFilter;

        $i0 := @parameter0: int;

        specialinvoke r0.<project.android.imageprocessing.filter.BasicFilter: void <init>()>();

        r0.<project.android.imageprocessing.filter.MultiInputFilter: int numOfInputs> = $i0;

        $i1 = -1;

        $i1 = $i0 + $i1;

        $r1 = newarray (int)[$i1];

        r0.<project.android.imageprocessing.filter.MultiInputFilter: int[] textureHandle> = $r1;

        $r1 = newarray (int)[$i1];

        r0.<project.android.imageprocessing.filter.MultiInputFilter: int[] texture> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List texturesReceived> = $r2;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List filterLocations> = $r2;

        return;
    }

    public void clearRegisteredFilterLocations()
    {
        java.util.List $r1;
        project.android.imageprocessing.filter.MultiInputFilter r0;

        r0 := @this: project.android.imageprocessing.filter.MultiInputFilter;

        $r1 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List filterLocations>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public void initShaderHandles()
    {
        project.android.imageprocessing.filter.MultiInputFilter r0;
        int[] $r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String $r3;

        r0 := @this: project.android.imageprocessing.filter.MultiInputFilter;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void initShaderHandles()>();

        $i0 = 0;

     label1:
        $i1 = r0.<project.android.imageprocessing.filter.MultiInputFilter: int numOfInputs>;

        $i2 = -1;

        $i1 = $i1 + $i2;

        if $i0 < $i1 goto label2;

        return;

     label2:
        $r1 = r0.<project.android.imageprocessing.filter.MultiInputFilter: int[] textureHandle>;

        $i2 = r0.<project.android.imageprocessing.GLRenderer: int programHandle>;

        $r4 = new java.lang.StringBuilder;

        $r2 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("u_Texture");

        $i1 = $i0 + 1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i2, $r3);

        $r1[$i0] = $i2;

        $i0 = $i1;

        goto label1;
    }

    public void newTextureReady(int, project.android.imageprocessing.input.GLTextureOutputRenderer, boolean)
    {
        java.lang.Throwable $r4;
        project.android.imageprocessing.input.GLTextureOutputRenderer $r1;
        java.util.List $r2;
        project.android.imageprocessing.filter.MultiInputFilter r0;
        int[] $r3;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: project.android.imageprocessing.filter.MultiInputFilter;

        $i0 := @parameter0: int;

        $r1 := @parameter1: project.android.imageprocessing.input.GLTextureOutputRenderer;

        $z0 := @parameter2: boolean;

        entermonitor r0;

     label1:
        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List texturesReceived>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r1);

        if $z1 != 0 goto label2;

        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List texturesReceived>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<project.android.imageprocessing.input.GLTextureOutputRenderer: void markAsDirty()>();

     label2:
        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List filterLocations>;

        $i1 = interfaceinvoke $r2.<java.util.List: int lastIndexOf(java.lang.Object)>($r1);

        if $i1 != 0 goto label3;

        r0.<project.android.imageprocessing.GLRenderer: int texture_in> = $i0;

        goto label4;

     label3:
        $r3 = r0.<project.android.imageprocessing.filter.MultiInputFilter: int[] texture>;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $r3[$i1] = $i0;

     label4:
        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List texturesReceived>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = r0.<project.android.imageprocessing.filter.MultiInputFilter: int numOfInputs>;

        if $i0 != $i1 goto label5;

        $i0 = virtualinvoke $r1.<project.android.imageprocessing.GLRenderer: int getWidth()>();

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void setWidth(int)>($i0);

        $i0 = virtualinvoke $r1.<project.android.imageprocessing.GLRenderer: int getHeight()>();

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void setHeight(int)>($i0);

        virtualinvoke r0.<project.android.imageprocessing.GLRenderer: void onDrawFrame()>();

        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List texturesReceived>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

     label5:
        exitmonitor r0;

        return;

     label6:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label5 with label6;
    }

    public void passShaderValues()
    {
        project.android.imageprocessing.filter.MultiInputFilter r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: project.android.imageprocessing.filter.MultiInputFilter;

        specialinvoke r0.<project.android.imageprocessing.GLRenderer: void passShaderValues()>();

        $i0 = 0;

        $i1 = 0;

     label01:
        $i2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: int numOfInputs>;

        $i3 = -1;

        $i2 = $i2 + $i3;

        if $i0 < $i2 goto label02;

        return;

     label02:
        lookupswitch($i0)
        {
            case 0: goto label12;
            case 1: goto label11;
            case 2: goto label10;
            case 3: goto label09;
            case 4: goto label08;
            case 5: goto label07;
            case 6: goto label06;
            case 7: goto label05;
            case 8: goto label04;
            default: goto label03;
        };

     label03:
        goto label13;

     label04:
        $i1 = 33993;

        goto label13;

     label05:
        $i1 = 33992;

        goto label13;

     label06:
        $i1 = 33991;

        goto label13;

     label07:
        $i1 = 33990;

        goto label13;

     label08:
        $i1 = 33989;

        goto label13;

     label09:
        $i1 = 33988;

        goto label13;

     label10:
        $i1 = 33987;

        goto label13;

     label11:
        $i1 = 33986;

        goto label13;

     label12:
        $i1 = 33985;

     label13:
        staticinvoke <android.opengl.GLES20: void glActiveTexture(int)>($i1);

        $r1 = r0.<project.android.imageprocessing.filter.MultiInputFilter: int[] texture>;

        $i2 = $r1[$i0];

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>(3553, $i2);

        $r1 = r0.<project.android.imageprocessing.filter.MultiInputFilter: int[] textureHandle>;

        $i2 = $r1[$i0];

        $i0 = $i0 + 1;

        staticinvoke <android.opengl.GLES20: void glUniform1i(int,int)>($i2, $i0);

        goto label01;
    }

    public void registerFilterLocation(project.android.imageprocessing.input.GLTextureOutputRenderer)
    {
        java.util.List $r2;
        project.android.imageprocessing.filter.MultiInputFilter r0;
        project.android.imageprocessing.input.GLTextureOutputRenderer $r1;
        boolean $z0;

        r0 := @this: project.android.imageprocessing.filter.MultiInputFilter;

        $r1 := @parameter0: project.android.imageprocessing.input.GLTextureOutputRenderer;

        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List filterLocations>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List filterLocations>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

     label1:
        return;
    }

    public void registerFilterLocation(project.android.imageprocessing.input.GLTextureOutputRenderer, int)
    {
        java.util.List $r2;
        project.android.imageprocessing.filter.MultiInputFilter r0;
        project.android.imageprocessing.input.GLTextureOutputRenderer $r1;
        int $i0;
        boolean $z0;

        r0 := @this: project.android.imageprocessing.filter.MultiInputFilter;

        $r1 := @parameter0: project.android.imageprocessing.input.GLTextureOutputRenderer;

        $i0 := @parameter1: int;

        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List filterLocations>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List filterLocations>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

     label1:
        $r2 = r0.<project.android.imageprocessing.filter.MultiInputFilter: java.util.List filterLocations>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>($i0, $r1);

        return;
    }
}
