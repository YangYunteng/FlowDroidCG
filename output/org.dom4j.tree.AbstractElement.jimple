public abstract class org.dom4j.tree.AbstractElement extends org.dom4j.tree.AbstractBranch implements org.dom4j.Element
{
    public static final org.dom4j.DocumentFactory DOCUMENT_FACTORY;
    public static final java.util.Iterator EMPTY_ITERATOR;
    public static final java.util.List EMPTY_LIST;
    public static final boolean USE_STRINGVALUE_SEPARATOR;
    public static final boolean VERBOSE_TOSTRING;

    static void <clinit>()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.dom4j.DocumentFactory $r0;

        <org.dom4j.tree.AbstractElement: boolean VERBOSE_TOSTRING> = 0;

        <org.dom4j.tree.AbstractElement: boolean USE_STRINGVALUE_SEPARATOR> = 0;

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        <org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory DOCUMENT_FACTORY> = $r0;

        $r1 = <java.util.Collections: java.util.List EMPTY_LIST>;

        <org.dom4j.tree.AbstractElement: java.util.List EMPTY_LIST> = $r1;

        $r1 = <org.dom4j.tree.AbstractElement: java.util.List EMPTY_LIST>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        <org.dom4j.tree.AbstractElement: java.util.Iterator EMPTY_ITERATOR> = $r2;

        return;
    }

    public void <init>()
    {
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        specialinvoke r0.<org.dom4j.tree.AbstractBranch: void <init>()>();

        return;
    }

    public void accept(org.dom4j.Visitor)
    {
        org.dom4j.Node $r2;
        int $i0, $i1, $i2;
        org.dom4j.Visitor $r1;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Attribute $r3;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Visitor;

        interfaceinvoke $r1.<org.dom4j.Visitor: void visit(org.dom4j.Element)>(r0);

        $i0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: int attributeCount()>();

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i2 < $i0 goto label4;

        $i0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: int nodeCount()>();

     label2:
        if $i1 < $i0 goto label3;

        return;

     label3:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Node node(int)>($i1);

        interfaceinvoke $r2.<org.dom4j.Node: void accept(org.dom4j.Visitor)>($r1);

        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Attribute attribute(int)>($i2);

        interfaceinvoke $r1.<org.dom4j.Visitor: void visit(org.dom4j.Attribute)>($r3);

        $i2 = $i2 + 1;

        goto label1;
    }

    public void add(org.dom4j.Attribute)
    {
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r5;
        org.dom4j.IllegalAddException $r7;
        org.dom4j.Element $r2;
        org.dom4j.QName $r4;
        java.lang.StringBuilder $r6;
        java.lang.String $r3;
        org.dom4j.Attribute $r1;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Attribute;

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Element getParent()>();

        if $r2 != null goto label2;

        $r3 = interfaceinvoke $r1.<org.dom4j.Attribute: java.lang.String getValue()>();

        if $r3 != null goto label1;

        $r4 = interfaceinvoke $r1.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Attribute attribute(org.dom4j.QName)>($r4);

        if $r1 == null goto label3;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Attribute)>($r1);

        return;

     label1:
        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childAdded(org.dom4j.Node)>($r1);

        return;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("The Attribute already has an existing parent \"");

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Element getParent()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new org.dom4j.IllegalAddException;

        specialinvoke $r7.<org.dom4j.IllegalAddException: void <init>(org.dom4j.Element,org.dom4j.Node,java.lang.String)>(r0, $r1, $r3);

        throw $r7;

     label3:
        return;
    }

    public void add(org.dom4j.CDATA)
    {
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.CDATA $r1;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.CDATA;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNode(org.dom4j.Node)>($r1);

        return;
    }

    public void add(org.dom4j.Comment)
    {
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Comment $r1;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Comment;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNode(org.dom4j.Node)>($r1);

        return;
    }

    public void add(org.dom4j.Element)
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Element;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNode(org.dom4j.Node)>($r1);

        return;
    }

    public void add(org.dom4j.Entity)
    {
        org.dom4j.Entity $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Entity;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNode(org.dom4j.Node)>($r1);

        return;
    }

    public void add(org.dom4j.Namespace)
    {
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Namespace $r1;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Namespace;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNode(org.dom4j.Node)>($r1);

        return;
    }

    public void add(org.dom4j.Node)
    {
        org.dom4j.Namespace $r2;
        org.dom4j.Node $r1;
        org.dom4j.Text $r7;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Entity $r5;
        short $s0;
        org.dom4j.CDATA $r6;
        org.dom4j.Comment $r3;
        int $i1;
        org.dom4j.Element $r9;
        org.dom4j.ProcessingInstruction $r4;
        org.dom4j.Attribute $r8;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Node;

        $s0 = interfaceinvoke $r1.<org.dom4j.Node: short getNodeType()>();

        if $s0 == 1 goto label8;

        $i1 = (int) $s0;

        if $i1 == 2 goto label7;

        $i1 = (int) $s0;

        if $i1 == 3 goto label6;

        $i1 = (int) $s0;

        if $i1 == 4 goto label5;

        $i1 = (int) $s0;

        if $i1 == 5 goto label4;

        $i1 = (int) $s0;

        if $i1 == 7 goto label3;

        $i1 = (int) $s0;

        if $i1 == 8 goto label2;

        $i1 = (int) $s0;

        if $i1 == 13 goto label1;

        virtualinvoke r0.<org.dom4j.tree.AbstractBranch: void invalidNodeTypeAddException(org.dom4j.Node)>($r1);

        return;

     label1:
        $r2 = (org.dom4j.Namespace) $r1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Namespace)>($r2);

        return;

     label2:
        $r3 = (org.dom4j.Comment) $r1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Comment)>($r3);

        return;

     label3:
        $r4 = (org.dom4j.ProcessingInstruction) $r1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.ProcessingInstruction)>($r4);

        return;

     label4:
        $r5 = (org.dom4j.Entity) $r1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Entity)>($r5);

        return;

     label5:
        $r6 = (org.dom4j.CDATA) $r1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.CDATA)>($r6);

        return;

     label6:
        $r7 = (org.dom4j.Text) $r1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Text)>($r7);

        return;

     label7:
        $r8 = (org.dom4j.Attribute) $r1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Attribute)>($r8);

        return;

     label8:
        $r9 = (org.dom4j.Element) $r1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Element)>($r9);

        return;
    }

    public void add(org.dom4j.ProcessingInstruction)
    {
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.ProcessingInstruction $r1;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.ProcessingInstruction;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNode(org.dom4j.Node)>($r1);

        return;
    }

    public void add(org.dom4j.Text)
    {
        org.dom4j.Text $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Text;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNode(org.dom4j.Node)>($r1);

        return;
    }

    public org.dom4j.Element addAttribute(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Attribute $r3;
        org.dom4j.DocumentFactory $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Attribute attribute(java.lang.String)>($r2);

        if $r1 == null goto label3;

        if $r3 != null goto label1;

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,java.lang.String,java.lang.String)>(r0, $r2, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Attribute)>($r3);

        return r0;

     label1:
        $z0 = interfaceinvoke $r3.<org.dom4j.Node: boolean isReadOnly()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Attribute)>($r3);

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,java.lang.String,java.lang.String)>(r0, $r2, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Attribute)>($r3);

        return r0;

     label2:
        interfaceinvoke $r3.<org.dom4j.Attribute: void setValue(java.lang.String)>($r1);

        return r0;

     label3:
        if $r3 == null goto label4;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Attribute)>($r3);

     label4:
        return r0;
    }

    public org.dom4j.Element addAttribute(org.dom4j.QName, java.lang.String)
    {
        org.dom4j.QName $r2;
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Attribute $r3;
        org.dom4j.DocumentFactory $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: org.dom4j.QName;

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Attribute attribute(org.dom4j.QName)>($r2);

        if $r1 == null goto label3;

        if $r3 != null goto label1;

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)>(r0, $r2, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Attribute)>($r3);

        return r0;

     label1:
        $z0 = interfaceinvoke $r3.<org.dom4j.Node: boolean isReadOnly()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Attribute)>($r3);

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)>(r0, $r2, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Attribute)>($r3);

        return r0;

     label2:
        interfaceinvoke $r3.<org.dom4j.Attribute: void setValue(java.lang.String)>($r1);

        return r0;

     label3:
        if $r3 == null goto label4;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Attribute)>($r3);

     label4:
        return r0;
    }

    public org.dom4j.Element addCDATA(java.lang.String)
    {
        org.dom4j.CDATA $r3;
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.CDATA createCDATA(java.lang.String)>($r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNewNode(org.dom4j.Node)>($r3);

        return r0;
    }

    public org.dom4j.Element addComment(java.lang.String)
    {
        org.dom4j.Comment $r3;
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Comment createComment(java.lang.String)>($r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNewNode(org.dom4j.Node)>($r3);

        return r0;
    }

    public org.dom4j.Element addElement(java.lang.String)
    {
        org.dom4j.Namespace $r5, $r6;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r2;
        org.dom4j.IllegalAddException $r7;
        int $i0;
        java.lang.StringBuilder $r8;
        org.dom4j.QName $r9;
        org.dom4j.Element $r10;
        java.lang.String $r1, $r3, $r4;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 <= 0 goto label2;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i0 = $i0 + 1;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)>($r3);

        $r6 = $r5;

        if $r5 == null goto label1;

        goto label3;

     label1:
        $r7 = new org.dom4j.IllegalAddException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("No such namespace prefix: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is in scope on: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" so cannot add element: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.dom4j.IllegalAddException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label2:
        $r6 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)>("");

        $r4 = $r1;

     label3:
        if $r6 == null goto label4;

        $r9 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r4, $r6);

        $r10 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r9);

        goto label5;

     label4:
        $r10 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(java.lang.String)>($r1);

     label5:
        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNewNode(org.dom4j.Node)>($r10);

        return $r10;
    }

    public org.dom4j.Element addEntity(java.lang.String, java.lang.String)
    {
        org.dom4j.Entity $r4;
        java.lang.String $r1, $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Entity createEntity(java.lang.String,java.lang.String)>($r2, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNewNode(org.dom4j.Node)>($r4);

        return r0;
    }

    public org.dom4j.Element addNamespace(java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r4;
        java.lang.String $r1, $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>($r2, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNewNode(org.dom4j.Node)>($r4);

        return r0;
    }

    public void addNewNode(int, org.dom4j.Node)
    {
        java.util.List $r2;
        org.dom4j.Node $r1;
        int $i0;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.dom4j.Node;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>($i0, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childAdded(org.dom4j.Node)>($r1);

        return;
    }

    public void addNewNode(org.dom4j.Node)
    {
        java.util.List $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Node $r1;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Node;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childAdded(org.dom4j.Node)>($r1);

        return;
    }

    public void addNode(int, org.dom4j.Node)
    {
        org.dom4j.Node $r1;
        org.dom4j.IllegalAddException $r5;
        int $i0;
        org.dom4j.Element $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.dom4j.Node;

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Element getParent()>();

        if $r2 != null goto label1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNewNode(int,org.dom4j.Node)>($i0, $r1);

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("The Node already has an existing parent of \"");

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Element getParent()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new org.dom4j.IllegalAddException;

        specialinvoke $r5.<org.dom4j.IllegalAddException: void <init>(org.dom4j.Element,org.dom4j.Node,java.lang.String)>(r0, $r1, $r4);

        throw $r5;
    }

    public void addNode(org.dom4j.Node)
    {
        org.dom4j.Node $r1;
        org.dom4j.IllegalAddException $r5;
        org.dom4j.Element $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Node;

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Element getParent()>();

        if $r2 != null goto label1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNewNode(org.dom4j.Node)>($r1);

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("The Node already has an existing parent of \"");

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Element getParent()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new org.dom4j.IllegalAddException;

        specialinvoke $r5.<org.dom4j.IllegalAddException: void <init>(org.dom4j.Element,org.dom4j.Node,java.lang.String)>(r0, $r1, $r4);

        throw $r5;
    }

    public org.dom4j.Element addProcessingInstruction(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.ProcessingInstruction $r4;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>($r2, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNewNode(org.dom4j.Node)>($r4);

        return r0;
    }

    public org.dom4j.Element addProcessingInstruction(java.lang.String, java.util.Map)
    {
        java.util.Map $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.ProcessingInstruction $r4;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Map;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String,java.util.Map)>($r2, $r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNewNode(org.dom4j.Node)>($r4);

        return r0;
    }

    public org.dom4j.Element addText(java.lang.String)
    {
        org.dom4j.Text $r3;
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Text createText(java.lang.String)>($r1);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void addNewNode(org.dom4j.Node)>($r3);

        return r0;
    }

    public java.util.List additionalNamespaces()
    {
        org.dom4j.Namespace $r4, $r5;
        org.dom4j.tree.BackedList $r2;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r2;

     label2:
        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r3 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label3;

        $r4 = (org.dom4j.Namespace) $r3;

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Namespace getNamespace()>();

        $z0 = virtualinvoke $r4.<org.dom4j.Namespace: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        virtualinvoke $r2.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r4);

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public java.util.List additionalNamespaces(java.lang.String)
    {
        org.dom4j.Namespace $r5;
        org.dom4j.tree.BackedList $r3;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.String $r1, $r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r4 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label3;

        $r5 = (org.dom4j.Namespace) $r4;

        $r6 = virtualinvoke $r5.<org.dom4j.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label3;

        virtualinvoke $r3.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r5);

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public void appendAttributes(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractElement r0;
        int $i0, $i1;
        org.dom4j.Element $r1;
        org.dom4j.QName $r3;
        java.lang.String $r4;
        org.dom4j.Attribute $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Element;

        $i0 = interfaceinvoke $r1.<org.dom4j.Element: int attributeCount()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return;

     label2:
        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Attribute attribute(int)>($i1);

        $z0 = interfaceinvoke $r2.<org.dom4j.Node: boolean supportsParent()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r4 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getValue()>();

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r3, $r4);

        goto label4;

     label3:
        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Attribute)>($r2);

     label4:
        $i1 = $i1 + 1;

        goto label1;
    }

    public java.lang.String asXML()
    {
        java.io.StringWriter $r1;
        org.dom4j.io.XMLWriter $r2;
        org.dom4j.io.OutputFormat $r3;
        java.io.IOException $r5;
        java.lang.RuntimeException $r6;
        org.dom4j.tree.AbstractElement r0;
        java.lang.StringBuilder $r7;
        java.lang.String $r4;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = new java.io.StringWriter;

     label1:
        specialinvoke $r1.<java.io.StringWriter: void <init>()>();

     label2:
        $r2 = new org.dom4j.io.XMLWriter;

        $r3 = new org.dom4j.io.OutputFormat;

     label3:
        specialinvoke $r3.<org.dom4j.io.OutputFormat: void <init>()>();

        specialinvoke $r2.<org.dom4j.io.XMLWriter: void <init>(java.io.Writer,org.dom4j.io.OutputFormat)>($r1, $r3);

        virtualinvoke $r2.<org.dom4j.io.XMLWriter: void write(org.dom4j.Element)>(r0);

        virtualinvoke $r2.<org.dom4j.io.XMLWriter: void flush()>();

        $r4 = virtualinvoke $r1.<java.io.StringWriter: java.lang.String toString()>();

     label4:
        return $r4;

     label5:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("IOException while generating textual representation: ");

        $r4 = virtualinvoke $r5.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public org.dom4j.Attribute attribute(int)
    {
        java.util.List $r1;
        int $i0;
        java.lang.Object $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Attribute $r3;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.dom4j.Attribute) $r2;

        return $r3;
    }

    public org.dom4j.Attribute attribute(java.lang.String)
    {
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String $r1, $r5;
        org.dom4j.Attribute $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return null;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (org.dom4j.Attribute) $r3;

        $r5 = interfaceinvoke $r4.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public org.dom4j.Attribute attribute(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.Namespace $r1;
        org.dom4j.QName $r4;
        java.lang.String $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Attribute $r5;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.dom4j.Namespace;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r2, $r1);

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Attribute attribute(org.dom4j.QName)>($r4);

        return $r5;
    }

    public org.dom4j.Attribute attribute(org.dom4j.QName)
    {
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r2;
        int $i0, $i1;
        org.dom4j.QName $r1, $r5;
        java.lang.Object $r3;
        org.dom4j.Attribute $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return null;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (org.dom4j.Attribute) $r3;

        $r5 = interfaceinvoke $r4.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $z0 = virtualinvoke $r1.<org.dom4j.QName: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public int attributeCount()
    {
        int $i0;
        java.util.List $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.Iterator attributeIterator()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public abstract java.util.List attributeList();

    public abstract java.util.List attributeList(int);

    public java.lang.String attributeValue(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Attribute $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Attribute attribute(java.lang.String)>($r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getValue()>();

        return $r1;
    }

    public java.lang.String attributeValue(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String attributeValue(java.lang.String)>($r2);

        if $r2 == null goto label1;

        return $r2;

     label1:
        return $r1;
    }

    public java.lang.String attributeValue(org.dom4j.QName)
    {
        org.dom4j.QName $r1;
        java.lang.String $r3;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Attribute $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Attribute attribute(org.dom4j.QName)>($r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getValue()>();

        return $r3;
    }

    public java.lang.String attributeValue(org.dom4j.QName, java.lang.String)
    {
        org.dom4j.QName $r3;
        java.lang.String $r1, $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r3 := @parameter0: org.dom4j.QName;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String attributeValue(org.dom4j.QName)>($r3);

        if $r2 == null goto label1;

        return $r2;

     label1:
        return $r1;
    }

    public java.util.List attributes()
    {
        org.dom4j.tree.ContentListFacade $r1;
        java.util.List $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = new org.dom4j.tree.ContentListFacade;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList()>();

        specialinvoke $r1.<org.dom4j.tree.ContentListFacade: void <init>(org.dom4j.tree.AbstractBranch,java.util.List)>(r0, $r2);

        return $r1;
    }

    public void childAdded(org.dom4j.Node)
    {
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Node $r1;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Node;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<org.dom4j.Node: void setParent(org.dom4j.Element)>(r0);

     label1:
        return;
    }

    public void childRemoved(org.dom4j.Node)
    {
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Node $r1;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Node;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<org.dom4j.Node: void setParent(org.dom4j.Element)>(null);

        interfaceinvoke $r1.<org.dom4j.Node: void setDocument(org.dom4j.Document)>(null);

     label1:
        return;
    }

    public java.util.List createAttributeList()
    {
        java.util.List $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List createAttributeList(int)>(5);

        return $r1;
    }

    public java.util.List createAttributeList(int)
    {
        int $i0;
        org.dom4j.tree.AbstractElement r0;
        java.util.ArrayList $r1;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $i0 := @parameter0: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        return $r1;
    }

    public org.dom4j.Element createCopy()
    {
        org.dom4j.QName $r1;
        org.dom4j.Element $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element createElement(org.dom4j.QName)>($r1);

        interfaceinvoke $r2.<org.dom4j.Element: void appendAttributes(org.dom4j.Element)>(r0);

        interfaceinvoke $r2.<org.dom4j.Branch: void appendContent(org.dom4j.Branch)>(r0);

        return $r2;
    }

    public org.dom4j.Element createCopy(java.lang.String)
    {
        org.dom4j.Element $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element createElement(java.lang.String)>($r2);

        interfaceinvoke $r1.<org.dom4j.Element: void appendAttributes(org.dom4j.Element)>(r0);

        interfaceinvoke $r1.<org.dom4j.Branch: void appendContent(org.dom4j.Branch)>(r0);

        return $r1;
    }

    public org.dom4j.Element createCopy(org.dom4j.QName)
    {
        org.dom4j.Element $r1;
        org.dom4j.QName $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: org.dom4j.QName;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element createElement(org.dom4j.QName)>($r2);

        interfaceinvoke $r1.<org.dom4j.Element: void appendAttributes(org.dom4j.Element)>(r0);

        interfaceinvoke $r1.<org.dom4j.Branch: void appendContent(org.dom4j.Branch)>(r0);

        return $r1;
    }

    public org.dom4j.Element createElement(java.lang.String)
    {
        org.dom4j.Element $r3;
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(java.lang.String)>($r1);

        return $r3;
    }

    public org.dom4j.Element createElement(org.dom4j.QName)
    {
        org.dom4j.QName $r1;
        org.dom4j.Element $r3;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r1);

        return $r3;
    }

    public java.util.Iterator createSingleIterator(java.lang.Object)
    {
        java.lang.Object $r1;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.tree.SingleIterator $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new org.dom4j.tree.SingleIterator;

        specialinvoke $r2.<org.dom4j.tree.SingleIterator: void <init>(java.lang.Object)>($r1);

        return $r2;
    }

    public java.util.List declaredNamespaces()
    {
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        org.dom4j.tree.BackedList $r1;
        org.dom4j.tree.AbstractElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r1;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r3 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r3);

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public org.dom4j.Element element(java.lang.String)
    {
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        org.dom4j.Element $r4;
        java.lang.String $r1, $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return null;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r3 instanceof org.dom4j.Element;

        if $z0 == 0 goto label3;

        $r4 = (org.dom4j.Element) $r3;

        $r5 = interfaceinvoke $r4.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public org.dom4j.Element element(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.Namespace $r1;
        org.dom4j.QName $r4;
        org.dom4j.Element $r5;
        java.lang.String $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.dom4j.Namespace;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r2, $r1);

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element element(org.dom4j.QName)>($r4);

        return $r5;
    }

    public org.dom4j.Element element(org.dom4j.QName)
    {
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r2;
        int $i0, $i1;
        org.dom4j.QName $r1, $r5;
        java.lang.Object $r3;
        org.dom4j.Element $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return null;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r3 instanceof org.dom4j.Element;

        if $z0 == 0 goto label3;

        $r4 = (org.dom4j.Element) $r3;

        $r5 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $z0 = virtualinvoke $r1.<org.dom4j.QName: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public java.util.Iterator elementIterator()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List elements()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public java.util.Iterator elementIterator(java.lang.String)
    {
        java.util.List $r2;
        java.util.Iterator $r3;
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List elements(java.lang.String)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.util.Iterator elementIterator(java.lang.String, org.dom4j.Namespace)
    {
        java.util.Iterator $r5;
        org.dom4j.Namespace $r1;
        org.dom4j.QName $r4;
        java.lang.String $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.dom4j.Namespace;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r2, $r1);

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.Iterator elementIterator(org.dom4j.QName)>($r4);

        return $r5;
    }

    public java.util.Iterator elementIterator(org.dom4j.QName)
    {
        java.util.List $r2;
        java.util.Iterator $r3;
        org.dom4j.QName $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List elements(org.dom4j.QName)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.lang.String elementText(java.lang.String)
    {
        org.dom4j.Element $r2;
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element element(java.lang.String)>($r1);

        if $r2 == null goto label1;

        $r1 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String getText()>();

        return $r1;

     label1:
        return null;
    }

    public java.lang.String elementText(org.dom4j.QName)
    {
        org.dom4j.QName $r1;
        org.dom4j.Element $r2;
        java.lang.String $r3;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element element(org.dom4j.QName)>($r1);

        if $r2 == null goto label1;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String getText()>();

        return $r3;

     label1:
        return null;
    }

    public java.lang.String elementTextTrim(java.lang.String)
    {
        org.dom4j.Element $r2;
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element element(java.lang.String)>($r1);

        if $r2 == null goto label1;

        $r1 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String getTextTrim()>();

        return $r1;

     label1:
        return null;
    }

    public java.lang.String elementTextTrim(org.dom4j.QName)
    {
        org.dom4j.QName $r1;
        org.dom4j.Element $r2;
        java.lang.String $r3;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element element(org.dom4j.QName)>($r1);

        if $r2 == null goto label1;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String getTextTrim()>();

        return $r3;

     label1:
        return null;
    }

    public java.util.List elements()
    {
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        org.dom4j.tree.BackedList $r2;
        org.dom4j.tree.AbstractElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r2;

     label2:
        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r3 instanceof org.dom4j.Element;

        if $z0 == 0 goto label3;

        virtualinvoke $r2.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r3);

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public java.util.List elements(java.lang.String)
    {
        org.dom4j.tree.BackedList $r3;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r4;
        org.dom4j.Element $r5;
        java.lang.String $r1, $r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r4 instanceof org.dom4j.Element;

        if $z0 == 0 goto label3;

        $r5 = (org.dom4j.Element) $r4;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        virtualinvoke $r3.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r5);

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public java.util.List elements(java.lang.String, org.dom4j.Namespace)
    {
        java.util.List $r5;
        org.dom4j.Namespace $r1;
        org.dom4j.QName $r4;
        java.lang.String $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.dom4j.Namespace;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r2, $r1);

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List elements(org.dom4j.QName)>($r4);

        return $r5;
    }

    public java.util.List elements(org.dom4j.QName)
    {
        org.dom4j.tree.BackedList $r3;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r2;
        int $i0, $i1;
        org.dom4j.QName $r1, $r6;
        java.lang.Object $r4;
        org.dom4j.Element $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r4 instanceof org.dom4j.Element;

        if $z0 == 0 goto label3;

        $r5 = (org.dom4j.Element) $r4;

        $r6 = interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $z0 = virtualinvoke $r1.<org.dom4j.QName: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        virtualinvoke $r3.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r5);

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public void ensureAttributesCapacity(int)
    {
        java.util.List $r1;
        int $i0;
        org.dom4j.tree.AbstractElement r0;
        boolean $z0;
        java.util.ArrayList $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $i0 := @parameter0: int;

        if $i0 <= 1 goto label1;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList()>();

        $z0 = $r1 instanceof java.util.ArrayList;

        if $z0 == 0 goto label1;

        $r2 = (java.util.ArrayList) $r1;

        virtualinvoke $r2.<java.util.ArrayList: void ensureCapacity(int)>($i0);

     label1:
        return;
    }

    public java.lang.Object getData()
    {
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getText()>();

        return $r1;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.QName $r1;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.QName getQName()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.dom4j.QName: org.dom4j.DocumentFactory getDocumentFactory()>();

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r2 = <org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory DOCUMENT_FACTORY>;

        return $r2;
    }

    public java.lang.String getName()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getName()>();

        return $r2;
    }

    public org.dom4j.Namespace getNamespace()
    {
        org.dom4j.QName $r1;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Namespace $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: org.dom4j.Namespace getNamespace()>();

        return $r2;
    }

    public org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)
    {
        org.dom4j.Namespace $r3;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r4;
        int $i0, $i1;
        org.dom4j.Element $r5;
        java.lang.Object $r6;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r1 = "";

     label1:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getNamespacePrefix()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Namespace getNamespace()>();

        return $r3;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z0 == 0 goto label3;

        $r3 = <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE>;

        return $r3;

     label3:
        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = 0;

     label4:
        if $i1 < $i0 goto label8;

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r5 == null goto label5;

        $r3 = interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)>($r1);

        if $r3 == null goto label5;

        return $r3;

     label5:
        if $r1 == null goto label7;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 > 0 goto label6;

        goto label7;

     label6:
        return null;

     label7:
        $r3 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        return $r3;

     label8:
        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r6 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label9;

        $r3 = (org.dom4j.Namespace) $r6;

        $r2 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label9;

        return $r3;

     label9:
        $i1 = $i1 + 1;

        goto label4;
    }

    public org.dom4j.Namespace getNamespaceForURI(java.lang.String)
    {
        org.dom4j.Namespace $r3;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label6;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 > 0 goto label1;

        goto label6;

     label1:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Namespace getNamespace()>();

        return $r3;

     label2:
        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = 0;

     label3:
        if $i1 < $i0 goto label4;

        return null;

     label4:
        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r5 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label5;

        $r3 = (org.dom4j.Namespace) $r5;

        $r2 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        return $r3;

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        $r3 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        return $r3;
    }

    public java.lang.String getNamespacePrefix()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getNamespacePrefix()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public java.util.List getNamespacesForURI(java.lang.String)
    {
        org.dom4j.Namespace $r5;
        org.dom4j.tree.BackedList $r2;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r3;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.String $r1, $r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r2;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r4 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label3;

        $r5 = (org.dom4j.Namespace) $r4;

        $r6 = virtualinvoke $r5.<org.dom4j.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        virtualinvoke $r2.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r4);

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public short getNodeType()
    {
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        return 1;
    }

    public java.lang.String getPath(org.dom4j.Element)
    {
        java.lang.StringBuilder $r1;
        org.dom4j.Element $r2, $r3;
        java.lang.String $r4;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: org.dom4j.Element;

        if r0 != $r2 goto label1;

        return ".";

     label1:
        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r3 != null goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("/");

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getXPathNameStep()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label2:
        if $r3 != $r2 goto label3;

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getXPathNameStep()>();

        return $r4;

     label3:
        $r1 = new java.lang.StringBuilder;

        $r4 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getPath(org.dom4j.Element)>($r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getXPathNameStep()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public org.dom4j.QName getQName(java.lang.String)
    {
        org.dom4j.Namespace $r3;
        int $i0;
        org.dom4j.QName $r5;
        java.lang.String $r1, $r2;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r4;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 <= 0 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        goto label2;

     label1:
        $r2 = "";

     label2:
        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)>($r2);

        if $r3 == null goto label3;

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r5 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r1, $r3);

        return $r5;

     label3:
        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r5 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>($r1);

        return $r5;
    }

    public java.lang.String getQualifiedName()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getQualifiedName()>();

        return $r2;
    }

    public java.lang.String getStringValue()
    {
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r1;
        java.lang.StringBuffer $r4;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label5;

        $i1 = 0;

        if $i0 != 1 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getContentAsStringValue(java.lang.Object)>($r2);

        return $r3;

     label1:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

     label2:
        if $i1 < $i0 goto label3;

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label3:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.lang.String getContentAsStringValue(java.lang.Object)>($r2);

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 <= 0 goto label4;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        return "";
    }

    public java.lang.String getUniquePath(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r7;
        java.lang.StringBuffer $r1;
        int $i0;
        org.dom4j.Element $r2, $r3;
        java.lang.StringBuilder $r4;
        org.dom4j.QName $r6;
        java.lang.String $r5;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r2 := @parameter0: org.dom4j.Element;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r3 != null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("/");

        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getXPathNameStep()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        if $r3 == $r2 goto label2;

        $r5 = interfaceinvoke $r3.<org.dom4j.Node: java.lang.String getUniquePath(org.dom4j.Element)>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

     label2:
        $r5 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getXPathNameStep()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r6 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r7 = interfaceinvoke $r3.<org.dom4j.Element: java.util.List elements(org.dom4j.QName)>($r6);

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 <= 1 goto label3;

        $i0 = interfaceinvoke $r7.<java.util.List: int indexOf(java.lang.Object)>(r0);

        if $i0 < 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $i0 = $i0 + 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

     label3:
        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String getXPathNameStep()
    {
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getNamespaceURI()>();

        if $r1 == null goto label4;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        goto label4;

     label1:
        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getNamespacePrefix()>();

        if $r1 == null goto label3;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        goto label3;

     label2:
        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getQualifiedName()>();

        return $r1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("*[name()=\'");

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\']");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label4:
        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getName()>();

        return $r1;
    }

    public org.dom4j.Node getXPathResult(int)
    {
        org.dom4j.Node $r1;
        int $i0;
        org.dom4j.tree.AbstractElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Node node(int)>($i0);

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<org.dom4j.Node: boolean supportsParent()>();

        if $z0 != 0 goto label1;

        $r1 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Node asXPathResult(org.dom4j.Element)>(r0);

     label1:
        return $r1;
    }

    public boolean hasMixedContent()
    {
        java.util.Iterator $r3;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r1;
        int $i0;
        java.lang.Class $r2, $r5;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        if $r1 == null goto label5;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= 2 goto label1;

        return 0;

     label1:
        $r2 = null;

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        if $r5 == $r2 goto label2;

        if $r2 == null goto label4;

        return 1;

     label4:
        $r2 = $r5;

        goto label2;

     label5:
        return 0;
    }

    public int indexOf(org.dom4j.Node)
    {
        java.util.List $r2;
        org.dom4j.Node $r1;
        int $i0;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Node;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>($r1);

        return $i0;
    }

    public boolean isRootElement()
    {
        org.dom4j.Document $r1;
        org.dom4j.Element $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Document getDocument()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.Element getRootElement()>();

        if $r2 != r0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isTextOnly()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.dom4j.tree.AbstractElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        if $r1 == null goto label4;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return 1;

     label3:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r3 instanceof org.dom4j.CharacterData;

        if $z0 != 0 goto label2;

        $z0 = $r3 instanceof java.lang.String;

        if $z0 != 0 goto label2;

        return 0;

     label4:
        return 1;
    }

    public org.dom4j.Node node(int)
    {
        org.dom4j.Node $r3;
        org.dom4j.Text $r6;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r4;
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label3;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < $i1 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        if $r2 == null goto label3;

        $z0 = $r2 instanceof org.dom4j.Node;

        if $z0 == 0 goto label2;

        $r3 = (org.dom4j.Node) $r2;

        return $r3;

     label2:
        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r6 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Text createText(java.lang.String)>($r5);

        return $r6;

     label3:
        return null;
    }

    public int nodeCount()
    {
        int $i0;
        java.util.List $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.Iterator nodeIterator()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public void normalize()
    {
        org.dom4j.Node $r4;
        org.dom4j.Text $r2, $r5;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        org.dom4j.Element $r7;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = 0;

     label1:
        $r2 = null;

     label2:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < $i1 goto label3;

        return;

     label3:
        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (org.dom4j.Node) $r3;

        $z0 = $r4 instanceof org.dom4j.Text;

        if $z0 == 0 goto label7;

        $r5 = (org.dom4j.Text) $r4;

        if $r2 == null goto label4;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getText()>();

        interfaceinvoke $r2.<org.dom4j.CharacterData: void appendText(java.lang.String)>($r6);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Text)>($r5);

        goto label2;

     label4:
        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getText()>();

        if $r6 == null goto label6;

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 > 0 goto label5;

        goto label6;

     label5:
        $i0 = $i0 + 1;

        $r2 = $r5;

        goto label2;

     label6:
        virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Text)>($r5);

        goto label2;

     label7:
        $z0 = $r4 instanceof org.dom4j.Element;

        if $z0 == 0 goto label8;

        $r7 = (org.dom4j.Element) $r4;

        interfaceinvoke $r7.<org.dom4j.Branch: void normalize()>();

     label8:
        $i0 = $i0 + 1;

        goto label1;
    }

    public org.dom4j.ProcessingInstruction processingInstruction(java.lang.String)
    {
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String $r1, $r5;
        org.dom4j.ProcessingInstruction $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return null;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r3 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label3;

        $r4 = (org.dom4j.ProcessingInstruction) $r3;

        $r5 = interfaceinvoke $r4.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public java.util.List processingInstructions()
    {
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        org.dom4j.tree.BackedList $r2;
        org.dom4j.tree.AbstractElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r2;

     label2:
        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r3 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label3;

        virtualinvoke $r2.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r3);

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public java.util.List processingInstructions(java.lang.String)
    {
        org.dom4j.tree.BackedList $r3;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.String $r1, $r6;
        org.dom4j.ProcessingInstruction $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: org.dom4j.tree.BackedList createResultList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r3;

     label2:
        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z0 = $r4 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label3;

        $r5 = (org.dom4j.ProcessingInstruction) $r4;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        virtualinvoke $r3.<org.dom4j.tree.BackedList: void addLocal(java.lang.Object)>($r5);

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    public boolean remove(org.dom4j.Attribute)
    {
        java.util.List $r2;
        org.dom4j.QName $r3;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Attribute $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Attribute;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childRemoved(org.dom4j.Node)>($r1);

        return $z0;

     label1:
        $r3 = interfaceinvoke $r1.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Attribute attribute(org.dom4j.QName)>($r3);

        if $r1 == null goto label2;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        return 1;

     label2:
        return $z0;
    }

    public boolean remove(org.dom4j.CDATA)
    {
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.CDATA $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.CDATA;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean removeNode(org.dom4j.Node)>($r1);

        return $z0;
    }

    public boolean remove(org.dom4j.Comment)
    {
        org.dom4j.tree.AbstractElement r0;
        boolean $z0;
        org.dom4j.Comment $r1;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Comment;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean removeNode(org.dom4j.Node)>($r1);

        return $z0;
    }

    public boolean remove(org.dom4j.Element)
    {
        org.dom4j.Element $r1;
        org.dom4j.tree.AbstractElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Element;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean removeNode(org.dom4j.Node)>($r1);

        return $z0;
    }

    public boolean remove(org.dom4j.Entity)
    {
        org.dom4j.Entity $r1;
        org.dom4j.tree.AbstractElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Entity;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean removeNode(org.dom4j.Node)>($r1);

        return $z0;
    }

    public boolean remove(org.dom4j.Namespace)
    {
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Namespace $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Namespace;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean removeNode(org.dom4j.Node)>($r1);

        return $z0;
    }

    public boolean remove(org.dom4j.Node)
    {
        org.dom4j.Namespace $r2;
        org.dom4j.Node $r1;
        org.dom4j.Text $r7;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.Entity $r5;
        short $s0;
        org.dom4j.CDATA $r6;
        org.dom4j.Comment $r3;
        int $i1;
        org.dom4j.Element $r9;
        org.dom4j.ProcessingInstruction $r4;
        org.dom4j.Attribute $r8;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Node;

        $s0 = interfaceinvoke $r1.<org.dom4j.Node: short getNodeType()>();

        if $s0 == 1 goto label8;

        $i1 = (int) $s0;

        if $i1 == 2 goto label7;

        $i1 = (int) $s0;

        if $i1 == 3 goto label6;

        $i1 = (int) $s0;

        if $i1 == 4 goto label5;

        $i1 = (int) $s0;

        if $i1 == 5 goto label4;

        $i1 = (int) $s0;

        if $i1 == 7 goto label3;

        $i1 = (int) $s0;

        if $i1 == 8 goto label2;

        $i1 = (int) $s0;

        if $i1 == 13 goto label1;

        return 0;

     label1:
        $r2 = (org.dom4j.Namespace) $r1;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Namespace)>($r2);

        return $z0;

     label2:
        $r3 = (org.dom4j.Comment) $r1;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Comment)>($r3);

        return $z0;

     label3:
        $r4 = (org.dom4j.ProcessingInstruction) $r1;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.ProcessingInstruction)>($r4);

        return $z0;

     label4:
        $r5 = (org.dom4j.Entity) $r1;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Entity)>($r5);

        return $z0;

     label5:
        $r6 = (org.dom4j.CDATA) $r1;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.CDATA)>($r6);

        return $z0;

     label6:
        $r7 = (org.dom4j.Text) $r1;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Text)>($r7);

        return $z0;

     label7:
        $r8 = (org.dom4j.Attribute) $r1;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Attribute)>($r8);

        return $z0;

     label8:
        $r9 = (org.dom4j.Element) $r1;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean remove(org.dom4j.Element)>($r9);

        return $z0;
    }

    public boolean remove(org.dom4j.ProcessingInstruction)
    {
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.ProcessingInstruction $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.ProcessingInstruction;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean removeNode(org.dom4j.Node)>($r1);

        return $z0;
    }

    public boolean remove(org.dom4j.Text)
    {
        org.dom4j.Text $r1;
        org.dom4j.tree.AbstractElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Text;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: boolean removeNode(org.dom4j.Node)>($r1);

        return $z0;
    }

    public boolean removeNode(org.dom4j.Node)
    {
        java.util.List $r2;
        org.dom4j.Node $r1;
        org.dom4j.tree.AbstractElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Node;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childRemoved(org.dom4j.Node)>($r1);

     label1:
        return $z0;
    }

    public boolean removeProcessingInstruction(java.lang.String)
    {
        java.util.Iterator $r3;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r2;
        java.lang.Object $r4;
        java.lang.String $r1, $r6;
        org.dom4j.ProcessingInstruction $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r4 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label1;

        $r5 = (org.dom4j.ProcessingInstruction) $r4;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        return 1;
    }

    public void setAttributeValue(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>($r1, $r2);

        return;
    }

    public void setAttributeValue(org.dom4j.QName, java.lang.String)
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r1, $r2);

        return;
    }

    public void setAttributes(org.xml.sax.Attributes, org.dom4j.tree.NamespaceStack, boolean)
    {
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r3;
        org.dom4j.tree.NamespaceStack $r2;
        java.util.List $r10;
        org.xml.sax.Attributes $r1;
        int $i0, $i1;
        org.dom4j.QName $r8;
        java.lang.String $r4, $r5, $r6, $r7;
        org.dom4j.Attribute $r9;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.xml.sax.Attributes;

        $r2 := @parameter1: org.dom4j.tree.NamespaceStack;

        $z0 := @parameter2: boolean;

        $i0 = interfaceinvoke $r1.<org.xml.sax.Attributes: int getLength()>();

        if $i0 <= 0 goto label7;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $i1 = 0;

        if $i0 != 1 goto label2;

        $r4 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getQName(int)>(0);

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns");

        if $z0 != 0 goto label7;

     label1:
        $r5 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getURI(int)>(0);

        $r6 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getLocalName(int)>(0);

        $r7 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>(0);

        $r8 = virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: org.dom4j.QName getAttributeQName(java.lang.String,java.lang.String,java.lang.String)>($r5, $r6, $r4);

        $r9 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)>(r0, $r8, $r7);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void add(org.dom4j.Attribute)>($r9);

        return;

     label2:
        $r10 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList(int)>($i0);

        interfaceinvoke $r10.<java.util.List: void clear()>();

     label3:
        if $i1 < $i0 goto label4;

        return;

     label4:
        $r4 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getQName(int)>($i1);

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns");

        if $z1 != 0 goto label6;

     label5:
        $r5 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getURI(int)>($i1);

        $r6 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getLocalName(int)>($i1);

        $r7 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>($i1);

        $r8 = virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: org.dom4j.QName getAttributeQName(java.lang.String,java.lang.String,java.lang.String)>($r5, $r6, $r4);

        $r9 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)>(r0, $r8, $r7);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

        virtualinvoke r0.<org.dom4j.tree.AbstractElement: void childAdded(org.dom4j.Node)>($r9);

     label6:
        $i1 = $i1 + 1;

        goto label3;

     label7:
        return;
    }

    public void setData(java.lang.Object)
    {
        java.lang.Object $r1;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.Object;

        return;
    }

    public void setName(java.lang.String)
    {
        org.dom4j.QName $r3;
        java.lang.String $r1;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>($r1);

        interfaceinvoke r0.<org.dom4j.Element: void setQName(org.dom4j.QName)>($r3);

        return;
    }

    public void setNamespace(org.dom4j.Namespace)
    {
        org.dom4j.Namespace $r1;
        org.dom4j.QName $r4;
        java.lang.String $r3;
        org.dom4j.tree.AbstractElement r0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: org.dom4j.Namespace;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r3, $r1);

        interfaceinvoke r0.<org.dom4j.Element: void setQName(org.dom4j.QName)>($r4);

        return;
    }

    public void setText(java.lang.String)
    {
        java.util.Iterator $r3;
        org.dom4j.Node $r5;
        org.dom4j.tree.AbstractElement r0;
        java.util.List $r2;
        short $s0;
        int $i1;
        java.lang.Object $r4;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractBranch: java.util.List contentList()>();

        if $r2 == null goto label4;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.dom4j.Node) $r4;

        $s0 = interfaceinvoke $r5.<org.dom4j.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if $i1 == 3 goto label3;

        $i1 = (int) $s0;

        if $i1 == 4 goto label3;

        $i1 = (int) $s0;

        if $i1 == 5 goto label3;

        goto label1;

     label3:
        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label1;

     label4:
        virtualinvoke r0.<org.dom4j.tree.AbstractElement: org.dom4j.Element addText(java.lang.String)>($r1);

        return;
    }

    public java.lang.String toString()
    {
        java.util.List $r4;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1, $r3;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getNamespaceURI()>();

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        $r3 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [Element: <");

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getQualifiedName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uri: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attributes: ");

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/>]");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label1:
        $r2 = new java.lang.StringBuilder;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [Element: <");

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.lang.String getQualifiedName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attributes: ");

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractElement: java.util.List attributeList()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/>]");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public void write(java.io.Writer)
    {
        org.dom4j.io.XMLWriter $r2;
        java.io.Writer $r1;
        org.dom4j.io.OutputFormat $r3;
        org.dom4j.tree.AbstractElement r0;

        r0 := @this: org.dom4j.tree.AbstractElement;

        $r1 := @parameter0: java.io.Writer;

        $r2 = new org.dom4j.io.XMLWriter;

        $r3 = new org.dom4j.io.OutputFormat;

        specialinvoke $r3.<org.dom4j.io.OutputFormat: void <init>()>();

        specialinvoke $r2.<org.dom4j.io.XMLWriter: void <init>(java.io.Writer,org.dom4j.io.OutputFormat)>($r1, $r3);

        virtualinvoke $r2.<org.dom4j.io.XMLWriter: void write(org.dom4j.Element)>(r0);

        return;
    }
}
