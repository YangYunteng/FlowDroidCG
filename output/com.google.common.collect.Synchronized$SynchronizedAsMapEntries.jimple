public class com.google.common.collect.Synchronized$SynchronizedAsMapEntries extends com.google.common.collect.Synchronized$SynchronizedSet
{
    public static final long serialVersionUID;

    public void <init>(java.util.Set, java.lang.Object)
    {
        java.util.Set $r1;
        java.lang.Object $r2;
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries r0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMapEntries;

        $r1 := @parameter0: java.util.Set;

        $r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.google.common.collect.Synchronized$SynchronizedSet: void <init>(java.util.Set,java.lang.Object)>($r1, $r2);

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.lang.Throwable $r4;
        java.util.Set $r3;
        java.lang.Object $r1, $r2;
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMapEntries;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedSet: java.util.Set delegate()>();

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean containsEntryImpl(java.util.Collection,java.lang.Object)>($r3, $r2);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.lang.Throwable $r4;
        java.util.Collection $r2;
        java.util.Set $r3;
        java.lang.Object $r1;
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMapEntries;

        $r2 := @parameter0: java.util.Collection;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedSet: java.util.Set delegate()>();

        $z0 = staticinvoke <com.google.common.collect.Collections2: boolean containsAllImpl(java.util.Collection,java.util.Collection)>($r3, $r2);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Throwable $r4;
        java.util.Set $r3;
        java.lang.Object $r1, $r2;
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMapEntries;

        $r2 := @parameter0: java.lang.Object;

        if $r2 != r0 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label2:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedSet: java.util.Set delegate()>();

        $z0 = staticinvoke <com.google.common.collect.Sets: boolean equalsImpl(java.util.Set,java.lang.Object)>($r3, $r2);

        exitmonitor $r1;

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries r0;
        java.util.Iterator $r2;
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1 $r1;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMapEntries;

        $r1 = new com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1;

        $r2 = specialinvoke r0.<com.google.common.collect.Synchronized$SynchronizedCollection: java.util.Iterator iterator()>();

        specialinvoke $r1.<com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1: void <init>(com.google.common.collect.Synchronized$SynchronizedAsMapEntries,java.util.Iterator)>(r0, $r2);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.lang.Throwable $r4;
        java.util.Set $r3;
        java.lang.Object $r1, $r2;
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMapEntries;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedSet: java.util.Set delegate()>();

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean removeEntryImpl(java.util.Collection,java.lang.Object)>($r3, $r2);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.lang.Throwable $r5;
        java.util.Iterator $r4;
        java.util.Collection $r2;
        java.util.Set $r3;
        java.lang.Object $r1;
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMapEntries;

        $r2 := @parameter0: java.util.Collection;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedSet: java.util.Set delegate()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean removeAll(java.util.Iterator,java.util.Collection)>($r4, $r2);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.lang.Throwable $r5;
        java.util.Iterator $r4;
        java.util.Collection $r2;
        java.util.Set $r3;
        java.lang.Object $r1;
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMapEntries;

        $r2 := @parameter0: java.util.Collection;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedSet: java.util.Set delegate()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.google.common.collect.Iterators: boolean retainAll(java.util.Iterator,java.util.Collection)>($r4, $r2);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object[] toArray()
    {
        java.lang.Throwable $r4;
        java.lang.Object[] $r3;
        java.util.Set $r2;
        java.lang.Object $r1;
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries r0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMapEntries;

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedSet: java.util.Set delegate()>();

        $r3 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] toArrayImpl(java.util.Collection)>($r2);

        exitmonitor $r1;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Throwable $r4;
        java.lang.Object[] $r2;
        java.util.Set $r3;
        java.lang.Object $r1;
        com.google.common.collect.Synchronized$SynchronizedAsMapEntries r0;

        r0 := @this: com.google.common.collect.Synchronized$SynchronizedAsMapEntries;

        $r2 := @parameter0: java.lang.Object[];

        $r1 = r0.<com.google.common.collect.Synchronized$SynchronizedObject: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.collect.Synchronized$SynchronizedSet: java.util.Set delegate()>();

        $r2 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] toArrayImpl(java.util.Collection,java.lang.Object[])>($r3, $r2);

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
