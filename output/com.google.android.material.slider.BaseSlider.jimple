public abstract class com.google.android.material.slider.BaseSlider extends android.view.View
{
    public static final int DEF_STYLE_RES;
    public static final java.lang.String EXCEPTION_ILLEGAL_DISCRETE_VALUE;
    public static final java.lang.String EXCEPTION_ILLEGAL_STEP_SIZE;
    public static final java.lang.String EXCEPTION_ILLEGAL_VALUE;
    public static final java.lang.String EXCEPTION_ILLEGAL_VALUE_FROM;
    public static final java.lang.String EXCEPTION_ILLEGAL_VALUE_TO;
    public static final int HALO_ALPHA;
    public static final java.lang.String TAG;
    public static final double THRESHOLD;
    public static final int TIMEOUT_SEND_ACCESSIBILITY_EVENT;
    public com.google.android.material.slider.BaseSlider$AccessibilityEventSender accessibilityEventSender;
    public final com.google.android.material.slider.BaseSlider$AccessibilityHelper accessibilityHelper;
    public final android.view.accessibility.AccessibilityManager accessibilityManager;
    public int activeThumbIdx;
    public final android.graphics.Paint activeTicksPaint;
    public final android.graphics.Paint activeTrackPaint;
    public final java.util.List changeListeners;
    public boolean dirtyConfig;
    public int focusedThumbIdx;
    public boolean forceDrawCompatHalo;
    public com.google.android.material.slider.LabelFormatter formatter;
    public android.content.res.ColorStateList haloColor;
    public final android.graphics.Paint haloPaint;
    public int haloRadius;
    public final android.graphics.Paint inactiveTicksPaint;
    public final android.graphics.Paint inactiveTrackPaint;
    public boolean isLongPress;
    public int labelBehavior;
    public final com.google.android.material.slider.BaseSlider$TooltipDrawableFactory labelMaker;
    public int labelPadding;
    public final java.util.List labels;
    public android.view.MotionEvent lastEvent;
    public final int scaledTouchSlop;
    public float stepSize;
    public final com.google.android.material.shape.MaterialShapeDrawable thumbDrawable;
    public boolean thumbIsPressed;
    public final android.graphics.Paint thumbPaint;
    public int thumbRadius;
    public android.content.res.ColorStateList tickColorActive;
    public android.content.res.ColorStateList tickColorInactive;
    public float[] ticksCoordinates;
    public float touchDownX;
    public final java.util.List touchListeners;
    public float touchPosition;
    public android.content.res.ColorStateList trackColorActive;
    public android.content.res.ColorStateList trackColorInactive;
    public int trackHeight;
    public int trackSidePadding;
    public int trackTop;
    public int trackWidth;
    public float valueFrom;
    public float valueTo;
    public java.util.ArrayList values;
    public int widgetHeight;

    static void <clinit>()
    {
        int $i0;

        <com.google.android.material.slider.BaseSlider: int TIMEOUT_SEND_ACCESSIBILITY_EVENT> = 200;

        <com.google.android.material.slider.BaseSlider: double THRESHOLD> = 1.0E-4;

        <com.google.android.material.slider.BaseSlider: java.lang.String TAG> = "BaseSlider";

        <com.google.android.material.slider.BaseSlider: int HALO_ALPHA> = 63;

        <com.google.android.material.slider.BaseSlider: java.lang.String EXCEPTION_ILLEGAL_VALUE_TO> = "valueTo(%s) must be greater than valueFrom(%s)";

        <com.google.android.material.slider.BaseSlider: java.lang.String EXCEPTION_ILLEGAL_VALUE_FROM> = "valueFrom(%s) must be smaller than valueTo(%s)";

        <com.google.android.material.slider.BaseSlider: java.lang.String EXCEPTION_ILLEGAL_VALUE> = "Slider value(%s) must be greater or equal to valueFrom(%s), and lower or equal to valueTo(%s)";

        <com.google.android.material.slider.BaseSlider: java.lang.String EXCEPTION_ILLEGAL_STEP_SIZE> = "The stepSize(%s) must be 0, or a factor of the valueFrom(%s)-valueTo(%s) range";

        <com.google.android.material.slider.BaseSlider: java.lang.String EXCEPTION_ILLEGAL_DISCRETE_VALUE> = "Value(%s) must be equal to valueFrom(%s) plus a multiple of stepSize(%s) when using stepSize(%s)";

        <com.google.android.material.slider.BaseSlider: int DEF_STYLE_RES> = 0;

        $i0 = <com.google.android.material.R$style: int Widget_MaterialComponents_Slider>;

        <com.google.android.material.slider.BaseSlider: int DEF_STYLE_RES> = $i0;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.content.Context $r1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void <init>(android.content.Context,android.util.AttributeSet)>($r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 = <com.google.android.material.R$attr: int sliderStyle>;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        com.google.android.material.slider.BaseSlider$AccessibilityHelper $r10, $r18;
        android.content.Context $r2;
        java.util.ArrayList $r13;
        android.graphics.Paint$Style $r6;
        android.view.ViewConfiguration $r9;
        android.view.accessibility.AccessibilityManager $r12;
        android.util.AttributeSet $r3;
        int $i0, $i1;
        com.google.android.material.slider.BaseSlider$1 $r17;
        android.graphics.PorterDuff$Mode $r1;
        com.google.android.material.shape.MaterialShapeDrawable $r4, $r14;
        android.graphics.Paint$Cap $r7;
        android.graphics.PorterDuffXfermode $r16;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Paint $r5, $r15;
        java.lang.Object $r11;
        android.content.res.Resources $r8;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r2 := @parameter0: android.content.Context;

        $r3 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        $i1 = <com.google.android.material.slider.BaseSlider: int DEF_STYLE_RES>;

        $r2 = staticinvoke <com.google.android.material.theme.overlay.MaterialThemeOverlay: android.content.Context wrap(android.content.Context,android.util.AttributeSet,int,int)>($r2, $r3, $i0, $i1);

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r2, $r3, $i0);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<com.google.android.material.slider.BaseSlider: java.util.List labels> = $r13;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<com.google.android.material.slider.BaseSlider: java.util.List changeListeners> = $r13;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<com.google.android.material.slider.BaseSlider: java.util.List touchListeners> = $r13;

        r0.<com.google.android.material.slider.BaseSlider: boolean thumbIsPressed> = 0;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values> = $r13;

        $i1 = -1;

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = $i1;

        $i1 = -1;

        r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx> = $i1;

        r0.<com.google.android.material.slider.BaseSlider: float stepSize> = 0.0F;

        r0.<com.google.android.material.slider.BaseSlider: boolean isLongPress> = 0;

        $r14 = new com.google.android.material.shape.MaterialShapeDrawable;

        specialinvoke $r14.<com.google.android.material.shape.MaterialShapeDrawable: void <init>()>();

        r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable> = $r14;

        $r2 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r15 = new android.graphics.Paint;

        specialinvoke $r15.<android.graphics.Paint: void <init>()>();

        r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTrackPaint> = $r15;

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTrackPaint>;

        $r6 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r5.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r6);

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTrackPaint>;

        $r7 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>;

        virtualinvoke $r5.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r7);

        $r15 = new android.graphics.Paint;

        specialinvoke $r15.<android.graphics.Paint: void <init>()>();

        r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTrackPaint> = $r15;

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTrackPaint>;

        $r6 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r5.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r6);

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTrackPaint>;

        $r7 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>;

        virtualinvoke $r5.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r7);

        $r15 = new android.graphics.Paint;

        specialinvoke $r15.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint thumbPaint> = $r15;

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint thumbPaint>;

        $r6 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r5.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r6);

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint thumbPaint>;

        $r16 = new android.graphics.PorterDuffXfermode;

        $r1 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

        specialinvoke $r16.<android.graphics.PorterDuffXfermode: void <init>(android.graphics.PorterDuff$Mode)>($r1);

        virtualinvoke $r5.<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>($r16);

        $r15 = new android.graphics.Paint;

        specialinvoke $r15.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint haloPaint> = $r15;

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint haloPaint>;

        $r6 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r5.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r6);

        $r15 = new android.graphics.Paint;

        specialinvoke $r15.<android.graphics.Paint: void <init>()>();

        r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTicksPaint> = $r15;

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTicksPaint>;

        $r6 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r5.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r6);

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTicksPaint>;

        $r7 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>;

        virtualinvoke $r5.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r7);

        $r15 = new android.graphics.Paint;

        specialinvoke $r15.<android.graphics.Paint: void <init>()>();

        r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTicksPaint> = $r15;

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTicksPaint>;

        $r6 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r5.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r6);

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTicksPaint>;

        $r7 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>;

        virtualinvoke $r5.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r7);

        $r8 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void loadResources(android.content.res.Resources)>($r8);

        $r17 = new com.google.android.material.slider.BaseSlider$1;

        specialinvoke $r17.<com.google.android.material.slider.BaseSlider$1: void <init>(com.google.android.material.slider.BaseSlider,android.util.AttributeSet,int)>(r0, $r3, $i0);

        r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$TooltipDrawableFactory labelMaker> = $r17;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void processAttributes(android.content.Context,android.util.AttributeSet,int)>($r2, $r3, $i0);

        virtualinvoke r0.<android.view.View: void setFocusable(boolean)>(1);

        virtualinvoke r0.<android.view.View: void setClickable(boolean)>(1);

        $r4 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable>;

        virtualinvoke $r4.<com.google.android.material.shape.MaterialShapeDrawable: void setShadowCompatibilityMode(int)>(2);

        $r9 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r2);

        $i0 = virtualinvoke $r9.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        r0.<com.google.android.material.slider.BaseSlider: int scaledTouchSlop> = $i0;

        $r18 = new com.google.android.material.slider.BaseSlider$AccessibilityHelper;

        specialinvoke $r18.<com.google.android.material.slider.BaseSlider$AccessibilityHelper: void <init>(com.google.android.material.slider.BaseSlider)>(r0);

        r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityHelper accessibilityHelper> = $r18;

        $r10 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityHelper accessibilityHelper>;

        staticinvoke <b.i.i.y: void a(android.view.View,b.i.i.a)>(r0, $r10);

        $r2 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r11 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility");

        $r12 = (android.view.accessibility.AccessibilityManager) $r11;

        r0.<com.google.android.material.slider.BaseSlider: android.view.accessibility.AccessibilityManager accessibilityManager> = $r12;

        return;
    }

    public static int access$000()
    {
        int i0;

        i0 = <com.google.android.material.slider.BaseSlider: int DEF_STYLE_RES>;

        return i0;
    }

    public static com.google.android.material.tooltip.TooltipDrawable access$100(android.content.Context, android.content.res.TypedArray)
    {
        android.content.Context $r2;
        com.google.android.material.tooltip.TooltipDrawable $r1;
        android.content.res.TypedArray $r0;

        $r2 := @parameter0: android.content.Context;

        $r0 := @parameter1: android.content.res.TypedArray;

        $r1 = staticinvoke <com.google.android.material.slider.BaseSlider: com.google.android.material.tooltip.TooltipDrawable parseLabelDrawable(android.content.Context,android.content.res.TypedArray)>($r2, $r0);

        return $r1;
    }

    public static com.google.android.material.slider.BaseSlider$AccessibilityHelper access$300(com.google.android.material.slider.BaseSlider)
    {
        com.google.android.material.slider.BaseSlider$AccessibilityHelper r1;
        com.google.android.material.slider.BaseSlider $r0;

        $r0 := @parameter0: com.google.android.material.slider.BaseSlider;

        r1 = $r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityHelper accessibilityHelper>;

        return r1;
    }

    public static java.lang.String access$500(com.google.android.material.slider.BaseSlider, float)
    {
        float $f0;
        com.google.android.material.slider.BaseSlider $r1;
        java.lang.String $r0;

        $r1 := @parameter0: com.google.android.material.slider.BaseSlider;

        $f0 := @parameter1: float;

        $r0 = specialinvoke $r1.<com.google.android.material.slider.BaseSlider: java.lang.String formatValue(float)>($f0);

        return $r0;
    }

    public static boolean access$600(com.google.android.material.slider.BaseSlider, int, float)
    {
        int $i0;
        float $f0;
        com.google.android.material.slider.BaseSlider $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter1: int;

        $f0 := @parameter2: float;

        $z0 = specialinvoke $r0.<com.google.android.material.slider.BaseSlider: boolean snapThumbToValue(int,float)>($i0, $f0);

        return $z0;
    }

    public static void access$700(com.google.android.material.slider.BaseSlider)
    {
        com.google.android.material.slider.BaseSlider $r0;

        $r0 := @parameter0: com.google.android.material.slider.BaseSlider;

        specialinvoke $r0.<com.google.android.material.slider.BaseSlider: void updateHaloHotspot()>();

        return;
    }

    public static float access$800(com.google.android.material.slider.BaseSlider, int)
    {
        int $i0;
        float $f0;
        com.google.android.material.slider.BaseSlider $r0;

        $r0 := @parameter0: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter1: int;

        $f0 = specialinvoke $r0.<com.google.android.material.slider.BaseSlider: float calculateStepIncrement(int)>($i0);

        return $f0;
    }

    private void attachLabelToContentView(com.google.android.material.tooltip.TooltipDrawable)
    {
        com.google.android.material.slider.BaseSlider r0;
        com.google.android.material.tooltip.TooltipDrawable $r1;
        android.view.ViewGroup $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: com.google.android.material.tooltip.TooltipDrawable;

        $r2 = staticinvoke <com.google.android.material.internal.ViewUtils: android.view.ViewGroup getContentView(android.view.View)>(r0);

        virtualinvoke $r1.<com.google.android.material.tooltip.TooltipDrawable: void setRelativeToView(android.view.View)>($r2);

        return;
    }

    private java.lang.Float calculateIncrementForKey(int)
    {
        java.lang.Float $r1;
        int $i0;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $z0 = r0.<com.google.android.material.slider.BaseSlider: boolean isLongPress>;

        if $z0 == 0 goto label1;

        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float calculateStepIncrement(int)>(20);

        goto label2;

     label1:
        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float calculateStepIncrement()>();

     label2:
        if $i0 == 21 goto label7;

        if $i0 == 22 goto label5;

        if $i0 == 69 goto label4;

        if $i0 == 70 goto label3;

        if $i0 == 81 goto label3;

        return null;

     label3:
        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;

     label4:
        $f0 = neg $f0;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;

     label5:
        $z0 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean isRtl()>();

        if $z0 == 0 goto label6;

        $f0 = neg $f0;

     label6:
        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;

     label7:
        $z0 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean isRtl()>();

        if $z0 == 0 goto label8;

        goto label9;

     label8:
        $f0 = neg $f0;

     label9:
        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    private float calculateStepIncrement()
    {
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        byte $b0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return 1.0F;

     label1:
        return $f0;
    }

    private float calculateStepIncrement(int)
    {
        byte $b1;
        int $i0;
        float $f0, $f1, $f2;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float calculateStepIncrement()>();

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $f2 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $f1 = $f1 - $f2;

        $f1 = $f1 / $f0;

        $f2 = (float) $i0;

        $b1 = $f1 cmpg $f2;

        $i0 = (int) $b1;

        if $i0 > 0 goto label1;

        return $f0;

     label1:
        $f1 = $f1 / $f2;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $f1 = (float) $i0;

        $f0 = $f1 * $f0;

        return $f0;
    }

    private void calculateTicksCoordinates()
    {
        float[] $r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void validateConfigurationIfDirty()>();

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $f0 = $f0 - $f1;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $f0 = $f0 / $f1;

        $f0 = $f0 + 1.0F;

        $i0 = (int) $f0;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int trackHeight>;

        $i2 = $i2 * 2;

        $i1 = $i1 / $i2;

        $i1 = $i1 + 1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: float[] ticksCoordinates>;

        if $r1 == null goto label1;

        $i1 = lengthof $r1;

        $i2 = $i0 * 2;

        if $i1 == $i2 goto label2;

     label1:
        $i1 = $i0 * 2;

        $r1 = newarray (float)[$i1];

        r0.<com.google.android.material.slider.BaseSlider: float[] ticksCoordinates> = $r1;

     label2:
        $i1 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        $f0 = (float) $i1;

        $i1 = -1;

        $i1 = $i0 + $i1;

        $f1 = (float) $i1;

        $f0 = $f0 / $f1;

        $i1 = 0;

     label3:
        $i2 = $i0 * 2;

        if $i1 >= $i2 goto label4;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: float[] ticksCoordinates>;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $f1 = (float) $i2;

        $i2 = $i1 / 2;

        $f2 = (float) $i2;

        $f2 = $f2 * $f0;

        $f1 = $f1 + $f2;

        $r1[$i1] = $f1;

        $i2 = $i1 + 1;

        $i3 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int calculateTop()>();

        $f1 = (float) $i3;

        $r1[$i2] = $f1;

        $i1 = $i1 + 2;

        goto label3;

     label4:
        return;
    }

    private int calculateTop()
    {
        java.util.List $r1;
        com.google.android.material.tooltip.TooltipDrawable $r3;
        int $i0, $i1, $i2;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int trackTop>;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int labelBehavior>;

        $i2 = 0;

        if $i1 != 1 goto label1;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (com.google.android.material.tooltip.TooltipDrawable) $r2;

        $i2 = virtualinvoke $r3.<com.google.android.material.tooltip.TooltipDrawable: int getIntrinsicHeight()>();

     label1:
        $i0 = $i0 + $i2;

        return $i0;
    }

    private void createLabelPool()
    {
        java.util.Iterator $r4;
        java.util.ArrayList $r2;
        java.util.List $r1, $r3;
        com.google.android.material.tooltip.TooltipDrawable $r6;
        com.google.android.material.slider.BaseSlider$TooltipDrawableFactory $r7;
        int $i0, $i1;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 <= $i1 goto label3;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $r3 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r1 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.android.material.tooltip.TooltipDrawable) $r5;

        $z0 = staticinvoke <b.i.i.y: boolean D(android.view.View)>(r0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void detachLabelFromContentView(com.google.android.material.tooltip.TooltipDrawable)>($r6);

        goto label1;

     label2:
        interfaceinvoke $r1.<java.util.List: void clear()>();

     label3:
        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label4;

        $r7 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$TooltipDrawableFactory labelMaker>;

        $r6 = interfaceinvoke $r7.<com.google.android.material.slider.BaseSlider$TooltipDrawableFactory: com.google.android.material.tooltip.TooltipDrawable createTooltipDrawable()>();

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        $z0 = staticinvoke <b.i.i.y: boolean D(android.view.View)>(r0);

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void attachLabelToContentView(com.google.android.material.tooltip.TooltipDrawable)>($r6);

        goto label3;

     label4:
        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $z0 = 1;

        if $i0 != 1 goto label5;

        $z0 = 0;

     label5:
        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.android.material.tooltip.TooltipDrawable) $r5;

        $f0 = (float) $z0;

        virtualinvoke $r6.<com.google.android.material.shape.MaterialShapeDrawable: void setStrokeWidth(float)>($f0);

        goto label6;

     label7:
        return;
    }

    private void detachLabelFromContentView(com.google.android.material.tooltip.TooltipDrawable)
    {
        com.google.android.material.tooltip.TooltipDrawable $r1;
        com.google.android.material.internal.ViewOverlayImpl $r2;
        com.google.android.material.slider.BaseSlider r0;
        android.view.ViewGroup $r3;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: com.google.android.material.tooltip.TooltipDrawable;

        $r2 = staticinvoke <com.google.android.material.internal.ViewUtils: com.google.android.material.internal.ViewOverlayImpl getContentViewOverlay(android.view.View)>(r0);

        if $r2 == null goto label1;

        interfaceinvoke $r2.<com.google.android.material.internal.ViewOverlayImpl: void remove(android.graphics.drawable.Drawable)>($r1);

        $r3 = staticinvoke <com.google.android.material.internal.ViewUtils: android.view.ViewGroup getContentView(android.view.View)>(r0);

        virtualinvoke $r1.<com.google.android.material.tooltip.TooltipDrawable: void detachView(android.view.View)>($r3);

     label1:
        return;
    }

    private void dispatchOnChangedFromUser(int)
    {
        java.lang.Float $r6;
        java.util.Iterator $r2;
        java.util.ArrayList $r5;
        com.google.android.material.slider.BaseOnChangeListener $r4;
        java.util.List $r1;
        android.view.accessibility.AccessibilityManager $r7;
        int $i0;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List changeListeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.android.material.slider.BaseOnChangeListener) $r3;

        $r5 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r3 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r6 = (java.lang.Float) $r3;

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        interfaceinvoke $r4.<com.google.android.material.slider.BaseOnChangeListener: void onValueChange(java.lang.Object,float,boolean)>(r0, $f0, 1);

        goto label1;

     label2:
        $r7 = r0.<com.google.android.material.slider.BaseSlider: android.view.accessibility.AccessibilityManager accessibilityManager>;

        if $r7 == null goto label3;

        $z0 = virtualinvoke $r7.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void scheduleAccessibilityEventSender(int)>($i0);

     label3:
        return;
    }

    private void dispatchOnChangedProgramatically()
    {
        java.lang.Float $r7;
        java.util.Iterator $r2, $r6;
        java.util.ArrayList $r5;
        com.google.android.material.slider.BaseOnChangeListener $r4;
        java.util.List $r1;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List changeListeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.android.material.slider.BaseOnChangeListener) $r3;

        $r5 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.Float) $r3;

        $f0 = virtualinvoke $r7.<java.lang.Float: float floatValue()>();

        interfaceinvoke $r4.<com.google.android.material.slider.BaseOnChangeListener: void onValueChange(java.lang.Object,float,boolean)>(r0, $f0, 0);

        goto label2;

     label3:
        return;
    }

    private void drawActiveTrack(android.graphics.Canvas, int, int)
    {
        float[] $r3;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.graphics.Canvas;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r3 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float[] getActiveRange()>();

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $f1 = (float) $i2;

        $f2 = $r3[1];

        $f0 = (float) $i1;

        $f2 = $f2 * $f0;

        $f1 = $f1 + $f2;

        $f2 = (float) $i2;

        $f3 = $r3[0];

        $f0 = $f3 * $f0;

        $f0 = $f2 + $f0;

        $f2 = (float) $i0;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTrackPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, $f2, $f1, $f2, $r2);

        return;
    }

    private void drawInactiveTrack(android.graphics.Canvas, int, int)
    {
        float[] $r3;
        byte $b4;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.graphics.Canvas;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r3 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float[] getActiveRange()>();

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $f2 = (float) $i2;

        $f0 = $r3[1];

        $f3 = (float) $i1;

        $f0 = $f0 * $f3;

        $f2 = $f2 + $f0;

        $i3 = $i2 + $i1;

        $f0 = (float) $i3;

        $b4 = $f2 cmpg $f0;

        $i3 = (int) $b4;

        if $i3 >= 0 goto label1;

        $f1 = (float) $i0;

        $i1 = $i2 + $i1;

        $f0 = (float) $i1;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTrackPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f2, $f1, $f0, $f1, $r2);

     label1:
        $i1 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $f2 = (float) $i1;

        $f0 = $r3[0];

        $f3 = $f0 * $f3;

        $f3 = $f2 + $f3;

        $f2 = (float) $i1;

        $b4 = $f3 cmpl $f2;

        $i2 = (int) $b4;

        if $i2 <= 0 goto label2;

        $f2 = (float) $i1;

        $f0 = (float) $i0;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTrackPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f2, $f0, $f3, $f0, $r2);

     label2:
        return;
    }

    private void drawThumbs(android.graphics.Canvas, int, int)
    {
        java.lang.Float $r6;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2, $i3;
        android.graphics.Canvas $r1;
        boolean $z0;
        java.util.Iterator $r4;
        com.google.android.material.shape.MaterialShapeDrawable $r7;
        float $f0, $f1, $f2;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Paint $r2;
        java.lang.Object $r5;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.graphics.Canvas;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Float) $r5;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $f0 = (float) $i2;

        $f1 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        $f1 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float normalizeValue(float)>($f1);

        $f2 = (float) $i0;

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = (float) $i1;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int thumbRadius>;

        $f2 = (float) $i2;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint thumbPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r2);

        goto label1;

     label2:
        $r3 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Float) $r5;

        virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float normalizeValue(float)>($f0);

        $f1 = (float) $i0;

        $f0 = $f0 * $f1;

        $i3 = (int) $f0;

        $i3 = $i2 + $i3;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int thumbRadius>;

        $i3 = $i3 - $i2;

        $f0 = (float) $i3;

        $i2 = $i1 - $i2;

        $f1 = (float) $i2;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $r7 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable>;

        virtualinvoke $r7.<com.google.android.material.shape.MaterialShapeDrawable: void draw(android.graphics.Canvas)>($r1);

        virtualinvoke $r1.<android.graphics.Canvas: void restore()>();

        goto label3;

     label4:
        return;
    }

    private void drawTicks(android.graphics.Canvas)
    {
        float[] $r2, $r3;
        int $i0, $i1, $i2;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r4;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float[] getActiveRange()>();

        $r3 = r0.<com.google.android.material.slider.BaseSlider: float[] ticksCoordinates>;

        $f0 = $r2[0];

        $i0 = staticinvoke <com.google.android.material.slider.BaseSlider: int pivotIndex(float[],float)>($r3, $f0);

        $r3 = r0.<com.google.android.material.slider.BaseSlider: float[] ticksCoordinates>;

        $f0 = $r2[1];

        $i1 = staticinvoke <com.google.android.material.slider.BaseSlider: int pivotIndex(float[],float)>($r3, $f0);

        $r2 = r0.<com.google.android.material.slider.BaseSlider: float[] ticksCoordinates>;

        $i0 = $i0 * 2;

        $r4 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTicksPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>($r2, 0, $i0, $r4);

        $r2 = r0.<com.google.android.material.slider.BaseSlider: float[] ticksCoordinates>;

        $i1 = $i1 * 2;

        $i2 = $i1 - $i0;

        $r4 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTicksPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>($r2, $i0, $i2, $r4);

        $r2 = r0.<com.google.android.material.slider.BaseSlider: float[] ticksCoordinates>;

        $i0 = lengthof $r2;

        $i0 = $i0 - $i1;

        $r4 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTicksPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>($r2, $i1, $i0, $r4);

        return;
    }

    private void ensureLabels()
    {
        java.lang.Float $r6;
        java.lang.IllegalStateException $r7;
        java.lang.Object[] $r8;
        java.util.Iterator $r2;
        java.lang.Integer $r9;
        java.util.ArrayList $r3;
        java.util.List $r1;
        com.google.android.material.tooltip.TooltipDrawable $r5;
        int $i0, $i1;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r4;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int labelBehavior>;

        if $i0 != 2 goto label1;

        return;

     label1:
        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $i0 = 0;

     label2:
        $r3 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label5;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx>;

        if $i0 != $i1 goto label3;

        goto label4;

     label3:
        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.android.material.tooltip.TooltipDrawable) $r4;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r6 = (java.lang.Float) $r4;

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void setValueForLabel(com.google.android.material.tooltip.TooltipDrawable,float)>($r5, $f0);

     label4:
        $i0 = $i0 + 1;

        goto label2;

     label5:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.android.material.tooltip.TooltipDrawable) $r4;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r6 = (java.lang.Float) $r4;

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void setValueForLabel(com.google.android.material.tooltip.TooltipDrawable,float)>($r5, $f0);

        return;

     label6:
        $r7 = new java.lang.IllegalStateException;

        $r8 = newarray (java.lang.Object)[2];

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8[0] = $r9;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Not enough labels(%d) to display all the values(%d)", $r8);

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        goto label7;

     label7:
        throw $r7;
    }

    private void focusThumbOnFocusGained(int)
    {
        int $i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        if $i0 == 1 goto label4;

        if $i0 == 2 goto label3;

        if $i0 == 17 goto label2;

        if $i0 == 66 goto label1;

        return;

     label1:
        specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocusInAbsoluteDirection(int)>(-2147483648);

        return;

     label2:
        specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocusInAbsoluteDirection(int)>(2147483647);

        return;

     label3:
        specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocus(int)>(-2147483648);

        return;

     label4:
        specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocus(int)>(2147483647);

        return;
    }

    private java.lang.String formatValue(float)
    {
        java.lang.Float $r4;
        java.lang.Object[] $r3;
        byte $b1;
        int $i0;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        com.google.android.material.slider.LabelFormatter $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean hasLabelFormatter()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.LabelFormatter formatter>;

        $r2 = interfaceinvoke $r1.<com.google.android.material.slider.LabelFormatter: java.lang.String getFormattedValue(float)>($f0);

        return $r2;

     label1:
        $i0 = (int) $f0;

        $f1 = (float) $i0;

        $b1 = $f1 cmpl $f0;

        if $b1 != 0 goto label2;

        $r2 = "%.0f";

        goto label3;

     label2:
        $r2 = "%.2f";

     label3:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r3[0] = $r4;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r2, $r3);

        return $r2;
    }

    private float[] getActiveRange()
    {
        java.lang.Float $r3;
        float[] $r5;
        java.util.ArrayList $r4;
        java.util.List $r1;
        int $i0;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: java.util.List getValues()>();

        $r2 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>($r1);

        $r3 = (java.lang.Float) $r2;

        $f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $r1 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: java.util.List getValues()>();

        $r2 = staticinvoke <java.util.Collections: java.lang.Object min(java.util.Collection)>($r1);

        $r3 = (java.lang.Float) $r2;

        $f1 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $r4 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i0 != 1 goto label1;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

     label1:
        $f1 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float normalizeValue(float)>($f1);

        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float normalizeValue(float)>($f0);

        $z0 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean isRtl()>();

        if $z0 == 0 goto label2;

        $r5 = newarray (float)[2];

        $r5[0] = $f0;

        $r5[1] = $f1;

        return $r5;

     label2:
        $r5 = newarray (float)[2];

        $r5[0] = $f1;

        $r5[1] = $f0;

        return $r5;
    }

    private float getClampedValue(int, float)
    {
        java.lang.Float $r3;
        java.util.ArrayList $r1;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $i1 = $i0 + 1;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i2 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i1 < $i2 goto label1;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        goto label2;

     label1:
        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r3 = (java.lang.Float) $r2;

        $f1 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

     label2:
        $i1 = -1;

        $i0 = $i0 + $i1;

        if $i0 >= 0 goto label3;

        $f2 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        goto label4;

     label3:
        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.Float) $r2;

        $f2 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

     label4:
        $f0 = staticinvoke <b.i.d.a: float a(float,float,float)>($f0, $f2, $f1);

        return $f0;
    }

    private int getColorForState(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        int[] $r2;
        int $i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        $i0 = virtualinvoke $r1.<android.content.res.ColorStateList: int getDefaultColor()>();

        $i0 = virtualinvoke $r1.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r2, $i0);

        return $i0;
    }

    private float getValueOfTouchPosition()
    {
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float touchPosition>;

        $d0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: double snapPosition(float)>($f0);

        $d1 = $d0;

        $z0 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean isRtl()>();

        if $z0 == 0 goto label1;

        $d1 = 1.0 - $d0;

     label1:
        $f1 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $f1 = $f1 - $f0;

        $d0 = (double) $f1;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d1 = $d1 * $d0;

        $d0 = (double) $f0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d1 = $d1 + $d0;

        $f0 = (float) $d1;

        return $f0;
    }

    private float getValueOfTouchPositionAbsolute()
    {
        float $f0, $f1, $f2;
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float touchPosition>;

        $z0 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean isRtl()>();

        if $z0 == 0 goto label1;

        $f1 = 1.0F - $f1;

     label1:
        $f2 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $f2 = $f2 - $f0;

        $f1 = $f1 * $f2;

        $f0 = $f1 + $f0;

        return $f0;
    }

    private void invalidateTrack()
    {
        int $i0;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Paint $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTrackPaint>;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int trackHeight>;

        $f0 = (float) $i0;

        virtualinvoke $r1.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTrackPaint>;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int trackHeight>;

        $f0 = (float) $i0;

        virtualinvoke $r1.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTicksPaint>;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int trackHeight>;

        $f0 = (float) $i0;

        $f0 = $f0 / 2.0F;

        virtualinvoke $r1.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTicksPaint>;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int trackHeight>;

        $f0 = (float) $i0;

        $f0 = $f0 / 2.0F;

        virtualinvoke $r1.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        return;
    }

    private boolean isInScrollingContainer()
    {
        android.view.ViewParent $r1;
        com.google.android.material.slider.BaseSlider r0;
        android.view.ViewGroup $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

     label1:
        $z0 = $r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label3;

        $r2 = (android.view.ViewGroup) $r1;

        $z0 = virtualinvoke $r2.<android.view.ViewGroup: boolean shouldDelayChildPressedState()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r1 = interfaceinvoke $r1.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return 0;
    }

    private void loadResources(android.content.res.Resources)
    {
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        android.content.res.Resources $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.res.Resources;

        $i0 = <com.google.android.material.R$dimen: int mtrl_slider_widget_height>;

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelSize(int)>($i0);

        r0.<com.google.android.material.slider.BaseSlider: int widgetHeight> = $i0;

        $i0 = <com.google.android.material.R$dimen: int mtrl_slider_track_side_padding>;

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelOffset(int)>($i0);

        r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding> = $i0;

        $i0 = <com.google.android.material.R$dimen: int mtrl_slider_track_top>;

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelOffset(int)>($i0);

        r0.<com.google.android.material.slider.BaseSlider: int trackTop> = $i0;

        $i0 = <com.google.android.material.R$dimen: int mtrl_slider_label_padding>;

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelSize(int)>($i0);

        r0.<com.google.android.material.slider.BaseSlider: int labelPadding> = $i0;

        return;
    }

    private void maybeDrawHalo(android.graphics.Canvas, int, int)
    {
        android.graphics.Region$Op $r2;
        java.lang.Float $r5;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2, $i3;
        android.graphics.Canvas $r1;
        boolean $z0;
        float $f0, $f1, $f2, $f3;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r4;
        android.graphics.Paint $r6;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.graphics.Canvas;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean shouldDrawCompatHalo()>();

        if $z0 == 0 goto label2;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $f0 = (float) $i2;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r5 = (java.lang.Float) $r4;

        $f1 = virtualinvoke $r5.<java.lang.Float: float floatValue()>();

        $f1 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float normalizeValue(float)>($f1);

        $f2 = (float) $i0;

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $i0 = (int) $f0;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 >= 28 goto label1;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int haloRadius>;

        $i3 = $i0 - $i2;

        $f0 = (float) $i3;

        $i3 = $i1 - $i2;

        $f1 = (float) $i3;

        $i3 = $i0 + $i2;

        $f2 = (float) $i3;

        $i2 = $i2 + $i1;

        $f3 = (float) $i2;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke $r1.<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>($f0, $f1, $f2, $f3, $r2);

     label1:
        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int haloRadius>;

        $f2 = (float) $i0;

        $r6 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint haloPaint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $r6);

     label2:
        return;
    }

    private boolean moveFocus(int)
    {
        int $i2, $i3, $i4;
        com.google.android.material.slider.BaseSlider r0;
        long $l0, $l1;
        java.util.ArrayList $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i2 := @parameter0: int;

        $i3 = r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx>;

        $l1 = (long) $i3;

        $l0 = (long) $i2;

        $l0 = $l1 + $l0;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i2 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i2 = $i2 - 1;

        $l1 = (long) $i2;

        $l0 = staticinvoke <b.i.d.a: long a(long,long,long)>($l0, 0L, $l1);

        $i2 = (int) $l0;

        r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx> = $i2;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx>;

        if $i2 != $i3 goto label1;

        return 0;

     label1:
        $i3 = r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx>;

        $i4 = -1;

        if $i3 == $i4 goto label2;

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = $i2;

     label2:
        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void updateHaloHotspot()>();

        virtualinvoke r0.<android.view.View: void postInvalidate()>();

        return 1;
    }

    private boolean moveFocusInAbsoluteDirection(int)
    {
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean isRtl()>();

        if $z0 == 0 goto label2;

        if $i0 != -2147483648 goto label1;

        $i0 = 2147483647;

        goto label2;

     label1:
        $i0 = neg $i0;

     label2:
        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocus(int)>($i0);

        return $z0;
    }

    private float normalizeValue(float)
    {
        float $f0, $f1, $f2;
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 := @parameter0: float;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $f0 = $f0 - $f1;

        $f2 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $f1 = $f2 - $f1;

        $f0 = $f0 / $f1;

        $z0 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean isRtl()>();

        if $z0 == 0 goto label1;

        $f0 = 1.0F - $f0;

     label1:
        return $f0;
    }

    private java.lang.Boolean onKeyDownNoActiveThumb(int, android.view.KeyEvent)
    {
        android.view.KeyEvent $r1;
        int $i0;
        java.lang.Boolean $r2;
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        if $i0 == 61 goto label7;

        if $i0 == 66 goto label6;

        if $i0 == 81 goto label5;

        if $i0 == 69 goto label4;

        if $i0 == 70 goto label5;

        lookupswitch($i0)
        {
            case 21: goto label3;
            case 22: goto label2;
            case 23: goto label6;
            default: goto label1;
        };

     label1:
        return null;

     label2:
        specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocusInAbsoluteDirection(int)>(1);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r2;

     label3:
        $i0 = -1;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocusInAbsoluteDirection(int)>($i0);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r2;

     label4:
        $i0 = -1;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocus(int)>($i0);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r2;

     label5:
        specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocus(int)>(1);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r2;

     label6:
        $i0 = r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx>;

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = $i0;

        virtualinvoke r0.<android.view.View: void postInvalidate()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r2;

     label7:
        $z0 = virtualinvoke $r1.<android.view.KeyEvent: boolean hasNoModifiers()>();

        if $z0 == 0 goto label8;

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocus(int)>(1);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;

     label8:
        $z0 = virtualinvoke $r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z0 == 0 goto label9;

        $i0 = -1;

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocus(int)>($i0);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;

     label9:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r2;
    }

    private void onStartTrackingTouch()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        com.google.android.material.slider.BaseOnSliderTouchListener $r4;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List touchListeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.android.material.slider.BaseOnSliderTouchListener) $r3;

        interfaceinvoke $r4.<com.google.android.material.slider.BaseOnSliderTouchListener: void onStartTrackingTouch(java.lang.Object)>(r0);

        goto label1;

     label2:
        return;
    }

    private void onStopTrackingTouch()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        com.google.android.material.slider.BaseOnSliderTouchListener $r4;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List touchListeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.android.material.slider.BaseOnSliderTouchListener) $r3;

        interfaceinvoke $r4.<com.google.android.material.slider.BaseOnSliderTouchListener: void onStopTrackingTouch(java.lang.Object)>(r0);

        goto label1;

     label2:
        return;
    }

    public static com.google.android.material.tooltip.TooltipDrawable parseLabelDrawable(android.content.Context, android.content.res.TypedArray)
    {
        android.content.Context $r0;
        com.google.android.material.tooltip.TooltipDrawable $r2;
        int $i0, $i1;
        android.content.res.TypedArray $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.content.res.TypedArray;

        $i0 = <com.google.android.material.R$styleable: int Slider_labelStyle>;

        $i1 = <com.google.android.material.R$style: int Widget_MaterialComponents_Tooltip>;

        $i0 = virtualinvoke $r1.<android.content.res.TypedArray: int getResourceId(int,int)>($i0, $i1);

        $r2 = staticinvoke <com.google.android.material.tooltip.TooltipDrawable: com.google.android.material.tooltip.TooltipDrawable createFromAttributes(android.content.Context,android.util.AttributeSet,int,int)>($r0, null, 0, $i0);

        return $r2;
    }

    public static int pivotIndex(float[], float)
    {
        int $i0, $i1;
        float $f0, $f1;
        float[] $r0;

        $r0 := @parameter0: float[];

        $f0 := @parameter1: float;

        $i0 = lengthof $r0;

        $i0 = $i0 / 2;

        $i1 = -1;

        $i0 = $i0 + $i1;

        $f1 = (float) $i0;

        $f0 = $f0 * $f1;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        return $i0;
    }

    private void processAttributes(android.content.Context, android.util.AttributeSet, int)
    {
        android.content.Context $r3;
        java.lang.Float $r7;
        android.content.res.TypedArray $r5;
        com.google.android.material.shape.MaterialShapeDrawable $r10;
        android.content.res.ColorStateList $r8, $r9;
        android.util.AttributeSet $r4;
        int[] $r1, $r2;
        int $i0, $i1;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Float[] $r6;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r3 := @parameter0: android.content.Context;

        $r4 := @parameter1: android.util.AttributeSet;

        $i1 := @parameter2: int;

        $r1 = <com.google.android.material.R$styleable: int[] Slider>;

        $i0 = <com.google.android.material.slider.BaseSlider: int DEF_STYLE_RES>;

        $r2 = newarray (int)[0];

        $r5 = staticinvoke <com.google.android.material.internal.ThemeEnforcement: android.content.res.TypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int,int[])>($r3, $r4, $r1, $i1, $i0, $r2);

        $i1 = <com.google.android.material.R$styleable: int Slider_android_valueFrom>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getFloat(int,float)>($i1, 0.0F);

        r0.<com.google.android.material.slider.BaseSlider: float valueFrom> = $f0;

        $i1 = <com.google.android.material.R$styleable: int Slider_android_valueTo>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getFloat(int,float)>($i1, 1.0F);

        r0.<com.google.android.material.slider.BaseSlider: float valueTo> = $f0;

        $r6 = newarray (java.lang.Float)[1];

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r6[0] = $r7;

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setValues(java.lang.Float[])>($r6);

        $i1 = <com.google.android.material.R$styleable: int Slider_android_stepSize>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getFloat(int,float)>($i1, 0.0F);

        r0.<com.google.android.material.slider.BaseSlider: float stepSize> = $f0;

        $i1 = <com.google.android.material.R$styleable: int Slider_trackColor>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean hasValue(int)>($i1);

        if $z0 == 0 goto label01;

        $i0 = <com.google.android.material.R$styleable: int Slider_trackColor>;

        goto label02;

     label01:
        $i0 = <com.google.android.material.R$styleable: int Slider_trackColorInactive>;

     label02:
        if $z0 == 0 goto label03;

        $i1 = <com.google.android.material.R$styleable: int Slider_trackColor>;

        goto label04;

     label03:
        $i1 = <com.google.android.material.R$styleable: int Slider_trackColorActive>;

     label04:
        $r8 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        $r9 = $r8;

        if $r8 == null goto label05;

        goto label06;

     label05:
        $i0 = <com.google.android.material.R$color: int material_slider_inactive_track_color>;

        $r9 = staticinvoke <b.b.b.a.a: android.content.res.ColorStateList b(android.content.Context,int)>($r3, $i0);

     label06:
        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setTrackInactiveTintList(android.content.res.ColorStateList)>($r9);

        $r8 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i1);

        $r9 = $r8;

        if $r8 == null goto label07;

        goto label08;

     label07:
        $i1 = <com.google.android.material.R$color: int material_slider_active_track_color>;

        $r9 = staticinvoke <b.b.b.a.a: android.content.res.ColorStateList b(android.content.Context,int)>($r3, $i1);

     label08:
        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setTrackActiveTintList(android.content.res.ColorStateList)>($r9);

        $i1 = <com.google.android.material.R$styleable: int Slider_thumbColor>;

        $r8 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i1);

        $r10 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable>;

        virtualinvoke $r10.<com.google.android.material.shape.MaterialShapeDrawable: void setFillColor(android.content.res.ColorStateList)>($r8);

        $i1 = <com.google.android.material.R$styleable: int Slider_haloColor>;

        $r8 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i1);

        $r9 = $r8;

        if $r8 == null goto label09;

        goto label10;

     label09:
        $i1 = <com.google.android.material.R$color: int material_slider_halo_color>;

        $r9 = staticinvoke <b.b.b.a.a: android.content.res.ColorStateList b(android.content.Context,int)>($r3, $i1);

     label10:
        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setHaloTintList(android.content.res.ColorStateList)>($r9);

        $i1 = <com.google.android.material.R$styleable: int Slider_tickColor>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean hasValue(int)>($i1);

        if $z0 == 0 goto label11;

        $i0 = <com.google.android.material.R$styleable: int Slider_tickColor>;

        goto label12;

     label11:
        $i0 = <com.google.android.material.R$styleable: int Slider_tickColorInactive>;

     label12:
        if $z0 == 0 goto label13;

        $i1 = <com.google.android.material.R$styleable: int Slider_tickColor>;

        goto label14;

     label13:
        $i1 = <com.google.android.material.R$styleable: int Slider_tickColorActive>;

     label14:
        $r8 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i0);

        $r9 = $r8;

        if $r8 == null goto label15;

        goto label16;

     label15:
        $i0 = <com.google.android.material.R$color: int material_slider_inactive_tick_marks_color>;

        $r9 = staticinvoke <b.b.b.a.a: android.content.res.ColorStateList b(android.content.Context,int)>($r3, $i0);

     label16:
        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setTickInactiveTintList(android.content.res.ColorStateList)>($r9);

        $r8 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r5, $i1);

        $r9 = $r8;

        if $r8 == null goto label17;

        goto label18;

     label17:
        $i1 = <com.google.android.material.R$color: int material_slider_active_tick_marks_color>;

        $r9 = staticinvoke <b.b.b.a.a: android.content.res.ColorStateList b(android.content.Context,int)>($r3, $i1);

     label18:
        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setTickActiveTintList(android.content.res.ColorStateList)>($r9);

        $i1 = <com.google.android.material.R$styleable: int Slider_thumbRadius>;

        $i1 = virtualinvoke $r5.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i1, 0);

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setThumbRadius(int)>($i1);

        $i1 = <com.google.android.material.R$styleable: int Slider_haloRadius>;

        $i1 = virtualinvoke $r5.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i1, 0);

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setHaloRadius(int)>($i1);

        $i1 = <com.google.android.material.R$styleable: int Slider_thumbElevation>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i1, 0.0F);

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setThumbElevation(float)>($f0);

        $i1 = <com.google.android.material.R$styleable: int Slider_trackHeight>;

        $i1 = virtualinvoke $r5.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i1, 0);

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setTrackHeight(int)>($i1);

        $i1 = <com.google.android.material.R$styleable: int Slider_labelBehavior>;

        $i1 = virtualinvoke $r5.<android.content.res.TypedArray: int getInt(int,int)>($i1, 0);

        r0.<com.google.android.material.slider.BaseSlider: int labelBehavior> = $i1;

        virtualinvoke $r5.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    private void scheduleAccessibilityEventSender(int)
    {
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        com.google.android.material.slider.BaseSlider$AccessibilityEventSender $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityEventSender accessibilityEventSender>;

        if $r1 != null goto label1;

        $r1 = new com.google.android.material.slider.BaseSlider$AccessibilityEventSender;

        specialinvoke $r1.<com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void <init>(com.google.android.material.slider.BaseSlider,com.google.android.material.slider.BaseSlider$1)>(r0, null);

        r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityEventSender accessibilityEventSender> = $r1;

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r1);

     label2:
        $r1 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityEventSender accessibilityEventSender>;

        virtualinvoke $r1.<com.google.android.material.slider.BaseSlider$AccessibilityEventSender: void setVirtualViewId(int)>($i0);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityEventSender accessibilityEventSender>;

        virtualinvoke r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r1, 200L);

        return;
    }

    private void setValueForLabel(com.google.android.material.tooltip.TooltipDrawable, float)
    {
        android.graphics.Rect $r3, $r4;
        android.view.ViewGroup $r5;
        com.google.android.material.tooltip.TooltipDrawable $r1;
        int $i0, $i1, $i2, $i3;
        com.google.android.material.internal.ViewOverlayImpl $r6;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.String $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: com.google.android.material.tooltip.TooltipDrawable;

        $f0 := @parameter1: float;

        $r2 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: java.lang.String formatValue(float)>($f0);

        virtualinvoke $r1.<com.google.android.material.tooltip.TooltipDrawable: void setText(java.lang.CharSequence)>($r2);

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float normalizeValue(float)>($f0);

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        $f1 = (float) $i1;

        $f0 = $f0 * $f1;

        $i1 = (int) $f0;

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r1.<com.google.android.material.tooltip.TooltipDrawable: int getIntrinsicWidth()>();

        $i1 = $i1 / 2;

        $i0 = $i0 - $i1;

        $i1 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int calculateTop()>();

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int labelPadding>;

        $i3 = r0.<com.google.android.material.slider.BaseSlider: int thumbRadius>;

        $i2 = $i2 + $i3;

        $i1 = $i1 - $i2;

        $i2 = virtualinvoke $r1.<com.google.android.material.tooltip.TooltipDrawable: int getIntrinsicHeight()>();

        $i2 = $i1 - $i2;

        $i3 = virtualinvoke $r1.<com.google.android.material.tooltip.TooltipDrawable: int getIntrinsicWidth()>();

        $i3 = $i3 + $i0;

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i0, $i2, $i3, $i1);

        $r3 = new android.graphics.Rect;

        $r4 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        specialinvoke $r3.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r4);

        $r5 = staticinvoke <com.google.android.material.internal.ViewUtils: android.view.ViewGroup getContentView(android.view.View)>(r0);

        staticinvoke <com.google.android.material.internal.DescendantOffsetUtils: void offsetDescendantRect(android.view.ViewGroup,android.view.View,android.graphics.Rect)>($r5, r0, $r3);

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>($r3);

        $r6 = staticinvoke <com.google.android.material.internal.ViewUtils: com.google.android.material.internal.ViewOverlayImpl getContentViewOverlay(android.view.View)>(r0);

        interfaceinvoke $r6.<com.google.android.material.internal.ViewOverlayImpl: void add(android.graphics.drawable.Drawable)>($r1);

        return;
    }

    private void setValuesInternal(java.util.ArrayList)
    {
        int $i0, $i1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.IllegalArgumentException $r3;
        java.util.ArrayList $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: java.util.ArrayList;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r1);

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 != $i1 goto label1;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values> = $r1;

        r0.<com.google.android.material.slider.BaseSlider: boolean dirtyConfig> = 1;

        r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx> = 0;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void updateHaloHotspot()>();

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void createLabelPool()>();

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void dispatchOnChangedProgramatically()>();

        virtualinvoke r0.<android.view.View: void postInvalidate()>();

        return;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one value must be set");

        throw $r3;
    }

    private boolean shouldDrawCompatHalo()
    {
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $z0 = r0.<com.google.android.material.slider.BaseSlider: boolean forceDrawCompatHalo>;

        if $z0 != 0 goto label2;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 21 goto label2;

        $r1 = virtualinvoke r0.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        $z0 = $r1 instanceof android.graphics.drawable.RippleDrawable;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private boolean snapActiveThumbToValue(float)
    {
        int $i0;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 := @parameter0: float;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx>;

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean snapThumbToValue(int,float)>($i0, $f0);

        return $z0;
    }

    private double snapPosition(float)
    {
        byte $b1;
        int $i0, $i2;
        float $f0, $f1, $f2, $f3;
        com.google.android.material.slider.BaseSlider r0;
        double $d0, $d1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f1 := @parameter0: float;

        $f2 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $b1 = $f2 cmpl 0.0F;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label1;

        $f3 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $f0 = $f3 - $f0;

        $f2 = $f0 / $f2;

        $i2 = (int) $f2;

        $f2 = (float) $i2;

        $f1 = $f1 * $f2;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $d1 = (double) $i0;

        $d0 = (double) $i2;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d1 / $d0;

        return $d0;

     label1:
        $d0 = (double) $f1;

        return $d0;
    }

    private boolean snapThumbToValue(int, float)
    {
        java.lang.Float $r3;
        java.util.ArrayList $r1;
        byte $b0;
        int $i1, $i2;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r2;
        double $d0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i1 := @parameter0: int;

        $f0 := @parameter1: float;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r3 = (java.lang.Float) $r2;

        $f1 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $f1 = $f0 - $f1;

        $f1 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $d0 = (double) $f1;

        $b0 = $d0 cmpg 1.0E-4;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        return 0;

     label1:
        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float getClampedValue(int,float)>($i1, $f0);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r1.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i1, $r3);

        r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx> = $i1;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void dispatchOnChangedFromUser(int)>($i1);

        return 1;
    }

    private boolean snapTouchPosition()
    {
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float getValueOfTouchPosition()>();

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean snapActiveThumbToValue(float)>($f0);

        return $z0;
    }

    private void updateHaloHotspot()
    {
        java.lang.Float $r4;
        android.graphics.drawable.Drawable $r1;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean shouldDrawCompatHalo()>();

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke r0.<android.view.View: int getMeasuredWidth()>();

        if $i1 <= 0 goto label1;

        $r1 = virtualinvoke r0.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        $z0 = $r1 instanceof android.graphics.drawable.RippleDrawable;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (java.lang.Float) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float normalizeValue(float)>($f0);

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        $f1 = (float) $i1;

        $f0 = $f0 * $f1;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $f1 = (float) $i1;

        $f0 = $f0 + $f1;

        $i3 = (int) $f0;

        $i4 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int calculateTop()>();

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int haloRadius>;

        $i1 = $i3 - $i0;

        $i2 = $i4 - $i0;

        $i3 = $i3 + $i0;

        $i0 = $i4 + $i0;

        staticinvoke <b.i.c.a.a: void a(android.graphics.drawable.Drawable,int,int,int,int)>($r1, $i1, $i2, $i3, $i0);

     label1:
        return;
    }

    private void validateConfigurationIfDirty()
    {
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $z0 = r0.<com.google.android.material.slider.BaseSlider: boolean dirtyConfig>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void validateValueFrom()>();

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void validateValueTo()>();

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void validateStepSize()>();

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void validateValues()>();

        r0.<com.google.android.material.slider.BaseSlider: boolean dirtyConfig> = 0;

     label1:
        return;
    }

    private void validateStepSize()
    {
        java.lang.IllegalStateException $r3;
        java.lang.Object[] $r1;
        byte $b0;
        int $i1;
        float $f0, $f1, $f2;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.String $r2;
        double $d0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $b0 = $f0 cmpl 0.0F;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label2;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $f2 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $f1 = $f1 - $f2;

        $f1 = $f1 / $f0;

        $f1 = $f1 % 1.0F;

        $d0 = (double) $f1;

        $b0 = $d0 cmpl 1.0E-4;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1[0] = $r2;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1[1] = $r2;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1[2] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The stepSize(%s) must be 0, or a factor of the valueFrom(%s)-valueTo(%s) range", $r1);

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label2:
        return;
    }

    private void validateValueFrom()
    {
        java.lang.IllegalStateException $r3;
        java.lang.Object[] $r1;
        byte $b0;
        int $i1;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.String $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $b0 = $f0 cmpl $f1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1[0] = $r2;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1[1] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("valueFrom(%s) must be smaller than valueTo(%s)", $r1);

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    private void validateValueTo()
    {
        java.lang.IllegalStateException $r3;
        java.lang.Object[] $r1;
        byte $b0;
        int $i1;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.String $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $b0 = $f0 cmpg $f1;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1[0] = $r2;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1[1] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("valueTo(%s) must be greater than valueFrom(%s)", $r1);

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    private void validateValues()
    {
        java.lang.Float $r4;
        java.lang.IllegalStateException $r7;
        java.lang.Object[] $r5;
        java.util.Iterator $r2;
        java.util.ArrayList $r1;
        byte $b0;
        int $i1;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r3;
        java.lang.String $r6;
        boolean $z0;
        double $d0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Float) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $b0 = $f0 cmpg $f1;

        $i1 = (int) $b0;

        if $i1 < 0 goto label3;

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $b0 = $f0 cmpl $f1;

        $i1 = (int) $b0;

        if $i1 > 0 goto label3;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $b0 = $f0 cmpl 0.0F;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $f1 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        $f0 = $f0 - $f1;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $f0 = $f0 / $f1;

        $f0 = $f0 % 1.0F;

        $d0 = (double) $f0;

        $b0 = $d0 cmpl 1.0E-4;

        $i1 = (int) $b0;

        if $i1 > 0 goto label2;

        goto label1;

     label2:
        $r7 = new java.lang.IllegalStateException;

        $r5 = newarray (java.lang.Object)[4];

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        $r6 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r5[0] = $r6;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $r6 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r5[1] = $r6;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $r6 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r5[2] = $r6;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $r6 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r5[3] = $r6;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Value(%s) must be equal to valueFrom(%s) plus a multiple of stepSize(%s) when using stepSize(%s)", $r5);

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r7;

     label3:
        $r7 = new java.lang.IllegalStateException;

        $r5 = newarray (java.lang.Object)[3];

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        $r6 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r5[0] = $r6;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $r6 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r5[1] = $r6;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $r6 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r5[2] = $r6;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Slider value(%s) must be greater or equal to valueFrom(%s), and lower or equal to valueTo(%s)", $r5);

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r7;

     label4:
        return;
    }

    private float valueToX(float)
    {
        int $i0;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 := @parameter0: float;

        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float normalizeValue(float)>($f0);

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        $f1 = (float) $i0;

        $f0 = $f0 * $f1;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $f1 = (float) $i0;

        $f0 = $f0 + $f1;

        return $f0;
    }

    public void addOnChangeListener(com.google.android.material.slider.BaseOnChangeListener)
    {
        com.google.android.material.slider.BaseOnChangeListener $r1;
        com.google.android.material.slider.BaseSlider r0;
        java.util.List $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: com.google.android.material.slider.BaseOnChangeListener;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.List changeListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void addOnSliderTouchListener(com.google.android.material.slider.BaseOnSliderTouchListener)
    {
        com.google.android.material.slider.BaseOnSliderTouchListener $r1;
        com.google.android.material.slider.BaseSlider r0;
        java.util.List $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: com.google.android.material.slider.BaseOnSliderTouchListener;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.List touchListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void clearOnChangeListeners()
    {
        com.google.android.material.slider.BaseSlider r0;
        java.util.List $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List changeListeners>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public void clearOnSliderTouchListeners()
    {
        com.google.android.material.slider.BaseSlider r0;
        java.util.List $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List touchListeners>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public boolean dispatchHoverEvent(android.view.MotionEvent)
    {
        com.google.android.material.slider.BaseSlider$AccessibilityHelper $r2;
        android.view.MotionEvent $r1;
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityHelper accessibilityHelper>;

        $z0 = virtualinvoke $r2.<b.k.b.c: boolean dispatchHoverEvent(android.view.MotionEvent)>($r1);

        if $z0 != 0 goto label2;

        $z0 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>($r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        com.google.android.material.slider.BaseSlider r0;
        android.view.KeyEvent $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.view.KeyEvent;

        $z0 = specialinvoke r0.<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>($r1);

        return $z0;
    }

    public void drawableStateChanged()
    {
        java.util.Iterator $r4;
        com.google.android.material.shape.MaterialShapeDrawable $r8;
        android.content.res.ColorStateList $r2;
        java.util.List $r3;
        com.google.android.material.tooltip.TooltipDrawable $r6;
        int[] $r7;
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Paint $r1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        specialinvoke r0.<android.view.View: void drawableStateChanged()>();

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTrackPaint>;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorInactive>;

        $i0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int getColorForState(android.content.res.ColorStateList)>($r2);

        virtualinvoke $r1.<android.graphics.Paint: void setColor(int)>($i0);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTrackPaint>;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorActive>;

        $i0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int getColorForState(android.content.res.ColorStateList)>($r2);

        virtualinvoke $r1.<android.graphics.Paint: void setColor(int)>($i0);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTicksPaint>;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorInactive>;

        $i0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int getColorForState(android.content.res.ColorStateList)>($r2);

        virtualinvoke $r1.<android.graphics.Paint: void setColor(int)>($i0);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTicksPaint>;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorActive>;

        $i0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int getColorForState(android.content.res.ColorStateList)>($r2);

        virtualinvoke $r1.<android.graphics.Paint: void setColor(int)>($i0);

        $r3 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.android.material.tooltip.TooltipDrawable) $r5;

        $z0 = virtualinvoke $r6.<com.google.android.material.shape.MaterialShapeDrawable: boolean isStateful()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $r6.<android.graphics.drawable.Drawable: boolean setState(int[])>($r7);

        goto label1;

     label2:
        $r8 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable>;

        $z0 = virtualinvoke $r8.<com.google.android.material.shape.MaterialShapeDrawable: boolean isStateful()>();

        if $z0 == 0 goto label3;

        $r8 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable>;

        $r7 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $r8.<android.graphics.drawable.Drawable: boolean setState(int[])>($r7);

     label3:
        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint haloPaint>;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList haloColor>;

        $i0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int getColorForState(android.content.res.ColorStateList)>($r2);

        virtualinvoke $r1.<android.graphics.Paint: void setColor(int)>($i0);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint haloPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setAlpha(int)>(63);

        return;
    }

    public void forceDrawCompatHalo(boolean)
    {
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $z0 := @parameter0: boolean;

        r0.<com.google.android.material.slider.BaseSlider: boolean forceDrawCompatHalo> = $z0;

        return;
    }

    public java.lang.CharSequence getAccessibilityClassName()
    {
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Class $r2;
        java.lang.String $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r2 = class "Landroid/widget/SeekBar;";

        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r1;
    }

    public final int getAccessibilityFocusedVirtualViewId()
    {
        int $i0;
        com.google.android.material.slider.BaseSlider$AccessibilityHelper $r1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityHelper accessibilityHelper>;

        $i0 = virtualinvoke $r1.<b.k.b.c: int getAccessibilityFocusedVirtualViewId()>();

        return $i0;
    }

    public int getActiveThumbIndex()
    {
        int i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        i0 = r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx>;

        return i0;
    }

    public int getFocusedThumbIndex()
    {
        int i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        i0 = r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx>;

        return i0;
    }

    public int getHaloRadius()
    {
        int i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        i0 = r0.<com.google.android.material.slider.BaseSlider: int haloRadius>;

        return i0;
    }

    public android.content.res.ColorStateList getHaloTintList()
    {
        android.content.res.ColorStateList r1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList haloColor>;

        return r1;
    }

    public int getLabelBehavior()
    {
        int i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        i0 = r0.<com.google.android.material.slider.BaseSlider: int labelBehavior>;

        return i0;
    }

    public float getStepSize()
    {
        float f0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        f0 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        return f0;
    }

    public float getThumbElevation()
    {
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        com.google.android.material.shape.MaterialShapeDrawable $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable>;

        $f0 = virtualinvoke $r1.<com.google.android.material.shape.MaterialShapeDrawable: float getElevation()>();

        return $f0;
    }

    public int getThumbRadius()
    {
        int i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        i0 = r0.<com.google.android.material.slider.BaseSlider: int thumbRadius>;

        return i0;
    }

    public android.content.res.ColorStateList getThumbTintList()
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.slider.BaseSlider r0;
        com.google.android.material.shape.MaterialShapeDrawable $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable>;

        $r1 = virtualinvoke $r2.<com.google.android.material.shape.MaterialShapeDrawable: android.content.res.ColorStateList getFillColor()>();

        return $r1;
    }

    public android.content.res.ColorStateList getTickActiveTintList()
    {
        android.content.res.ColorStateList r1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorActive>;

        return r1;
    }

    public android.content.res.ColorStateList getTickInactiveTintList()
    {
        android.content.res.ColorStateList r1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorInactive>;

        return r1;
    }

    public android.content.res.ColorStateList getTickTintList()
    {
        android.content.res.ColorStateList $r1, $r2;
        java.lang.IllegalStateException $r3;
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorInactive>;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorActive>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorActive>;

        return $r1;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The inactive and active ticks are different colors. Use the getTickColorInactive() and getTickColorActive() methods instead.");

        throw $r3;
    }

    public android.content.res.ColorStateList getTrackActiveTintList()
    {
        android.content.res.ColorStateList r1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorActive>;

        return r1;
    }

    public int getTrackHeight()
    {
        int i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        i0 = r0.<com.google.android.material.slider.BaseSlider: int trackHeight>;

        return i0;
    }

    public android.content.res.ColorStateList getTrackInactiveTintList()
    {
        android.content.res.ColorStateList r1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorInactive>;

        return r1;
    }

    public int getTrackSidePadding()
    {
        int i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        i0 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        return i0;
    }

    public android.content.res.ColorStateList getTrackTintList()
    {
        android.content.res.ColorStateList $r1, $r2;
        java.lang.IllegalStateException $r3;
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorInactive>;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorActive>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorActive>;

        return $r1;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The inactive and active parts of the track are different colors. Use the getInactiveTrackColor() and getActiveTrackColor() methods instead.");

        throw $r3;
    }

    public int getTrackWidth()
    {
        int i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        i0 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        return i0;
    }

    public float getValueFrom()
    {
        float f0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        return f0;
    }

    public float getValueTo()
    {
        float f0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        f0 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        return f0;
    }

    public java.util.List getValues()
    {
        com.google.android.material.slider.BaseSlider r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = new java.util.ArrayList;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r1;
    }

    public boolean hasLabelFormatter()
    {
        com.google.android.material.slider.BaseSlider r0;
        com.google.android.material.slider.LabelFormatter $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.LabelFormatter formatter>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isRtl()
    {
        int $i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 = staticinvoke <b.i.i.y: int p(android.view.View)>(r0);

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void onAttachedToWindow()
    {
        java.util.List $r1;
        com.google.android.material.tooltip.TooltipDrawable $r4;
        java.util.Iterator $r2;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        specialinvoke r0.<android.view.View: void onAttachedToWindow()>();

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.android.material.tooltip.TooltipDrawable) $r3;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void attachLabelToContentView(com.google.android.material.tooltip.TooltipDrawable)>($r4);

        goto label1;

     label2:
        return;
    }

    public void onDetachedFromWindow()
    {
        java.util.List $r2;
        com.google.android.material.tooltip.TooltipDrawable $r5;
        java.util.Iterator $r3;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r4;
        com.google.android.material.slider.BaseSlider$AccessibilityEventSender $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityEventSender accessibilityEventSender>;

        if $r1 == null goto label1;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r1);

     label1:
        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.android.material.tooltip.TooltipDrawable) $r4;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void detachLabelFromContentView(com.google.android.material.tooltip.TooltipDrawable)>($r5);

        goto label2;

     label3:
        specialinvoke r0.<android.view.View: void onDetachedFromWindow()>();

        return;
    }

    public void onDraw(android.graphics.Canvas)
    {
        java.lang.Float $r4;
        java.util.List $r2;
        byte $b0;
        int $i1, $i2, $i3;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Canvas $r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.graphics.Canvas;

        $z0 = r0.<com.google.android.material.slider.BaseSlider: boolean dirtyConfig>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void validateConfigurationIfDirty()>();

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $b0 = $f0 cmpl 0.0F;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void calculateTicksCoordinates()>();

     label1:
        specialinvoke r0.<android.view.View: void onDraw(android.graphics.Canvas)>($r1);

        $i1 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int calculateTop()>();

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void drawInactiveTrack(android.graphics.Canvas,int,int)>($r1, $i2, $i1);

        $r2 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: java.util.List getValues()>();

        $r3 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>($r2);

        $r4 = (java.lang.Float) $r3;

        $f1 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $b0 = $f1 cmpl $f0;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label2;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void drawActiveTrack(android.graphics.Canvas,int,int)>($r1, $i2, $i1);

     label2:
        $f0 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $b0 = $f0 cmpl 0.0F;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label3;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void drawTicks(android.graphics.Canvas)>($r1);

     label3:
        $z0 = r0.<com.google.android.material.slider.BaseSlider: boolean thumbIsPressed>;

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z0 == 0 goto label5;

     label4:
        $z0 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        if $z0 == 0 goto label5;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void maybeDrawHalo(android.graphics.Canvas,int,int)>($r1, $i2, $i1);

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx>;

        $i3 = -1;

        if $i2 == $i3 goto label5;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void ensureLabels()>();

     label5:
        $i2 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void drawThumbs(android.graphics.Canvas,int,int)>($r1, $i2, $i1);

        return;
    }

    public void onFocusChanged(boolean, int, android.graphics.Rect)
    {
        com.google.android.material.slider.BaseSlider$AccessibilityHelper $r7;
        android.graphics.Rect $r1;
        java.util.Iterator $r3;
        java.util.List $r2;
        com.google.android.material.tooltip.TooltipDrawable $r5;
        int $i0;
        com.google.android.material.internal.ViewOverlayImpl $r6;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r1 := @parameter2: android.graphics.Rect;

        specialinvoke r0.<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>($z0, $i0, $r1);

        if $z0 != 0 goto label3;

        $i0 = -1;

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = $i0;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.android.material.tooltip.TooltipDrawable) $r4;

        $r6 = staticinvoke <com.google.android.material.internal.ViewUtils: com.google.android.material.internal.ViewOverlayImpl getContentViewOverlay(android.view.View)>(r0);

        interfaceinvoke $r6.<com.google.android.material.internal.ViewOverlayImpl: void remove(android.graphics.drawable.Drawable)>($r5);

        goto label1;

     label2:
        $r7 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityHelper accessibilityHelper>;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx>;

        virtualinvoke $r7.<b.k.b.c: boolean clearKeyboardFocusForVirtualView(int)>($i0);

        return;

     label3:
        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void focusThumbOnFocusGained(int)>($i0);

        $r7 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityHelper accessibilityHelper>;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx>;

        virtualinvoke $r7.<b.k.b.c: boolean requestKeyboardFocusForVirtualView(int)>($i0);

        return;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        java.lang.Float $r4, $r6;
        android.view.KeyEvent $r1;
        java.util.ArrayList $r2;
        com.google.android.material.tooltip.TooltipDrawable $r9;
        int $i0, $i1, $i2;
        java.lang.Boolean $r3;
        boolean $z0, $z1;
        java.util.Iterator $r8;
        java.util.List $r7;
        com.google.android.material.internal.ViewOverlayImpl $r10;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r5;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        $z0 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        if $z0 != 0 goto label01;

        $z0 = specialinvoke r0.<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>($i0, $r1);

        return $z0;

     label01:
        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 != 1 goto label02;

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = 0;

     label02:
        $i1 = r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx>;

        $i2 = -1;

        if $i1 != $i2 goto label04;

        $r3 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: java.lang.Boolean onKeyDownNoActiveThumb(int,android.view.KeyEvent)>($i0, $r1);

        if $r3 == null goto label03;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label03:
        $z0 = specialinvoke r0.<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>($i0, $r1);

        return $z0;

     label04:
        $z0 = r0.<com.google.android.material.slider.BaseSlider: boolean isLongPress>;

        $z1 = virtualinvoke $r1.<android.view.KeyEvent: boolean isLongPress()>();

        $z0 = $z0 | $z1;

        r0.<com.google.android.material.slider.BaseSlider: boolean isLongPress> = $z0;

        $r4 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: java.lang.Float calculateIncrementForKey(int)>($i0);

        if $r4 == null goto label05;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx>;

        $r5 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r6 = (java.lang.Float) $r5;

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        $f1 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        $f0 = $f0 + $f1;

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean snapActiveThumbToValue(float)>($f0);

        if $z0 == 0 goto label12;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void updateHaloHotspot()>();

        virtualinvoke r0.<android.view.View: void postInvalidate()>();

        return 1;

     label05:
        if $i0 == 23 goto label09;

        if $i0 == 61 goto label06;

        if $i0 == 66 goto label09;

        $z0 = specialinvoke r0.<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>($i0, $r1);

        return $z0;

     label06:
        $z0 = virtualinvoke $r1.<android.view.KeyEvent: boolean hasNoModifiers()>();

        if $z0 == 0 goto label07;

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocus(int)>(1);

        return $z0;

     label07:
        $z0 = virtualinvoke $r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z0 == 0 goto label08;

        $i0 = -1;

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean moveFocus(int)>($i0);

        return $z0;

     label08:
        return 0;

     label09:
        $i0 = -1;

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = $i0;

        $r7 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r5 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (com.google.android.material.tooltip.TooltipDrawable) $r5;

        $r10 = staticinvoke <com.google.android.material.internal.ViewUtils: com.google.android.material.internal.ViewOverlayImpl getContentViewOverlay(android.view.View)>(r0);

        interfaceinvoke $r10.<com.google.android.material.internal.ViewOverlayImpl: void remove(android.graphics.drawable.Drawable)>($r9);

        goto label10;

     label11:
        virtualinvoke r0.<android.view.View: void postInvalidate()>();

     label12:
        return 1;
    }

    public boolean onKeyUp(int, android.view.KeyEvent)
    {
        android.view.KeyEvent $r1;
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        r0.<com.google.android.material.slider.BaseSlider: boolean isLongPress> = 0;

        $z0 = specialinvoke r0.<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>($i0, $r1);

        return $z0;
    }

    public void onMeasure(int, int)
    {
        java.util.List $r1;
        com.google.android.material.tooltip.TooltipDrawable $r3;
        int $i0, $i1, $i2, $i3;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int widgetHeight>;

        $i2 = r0.<com.google.android.material.slider.BaseSlider: int labelBehavior>;

        $i3 = 0;

        if $i2 != 1 goto label1;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (com.google.android.material.tooltip.TooltipDrawable) $r2;

        $i3 = virtualinvoke $r3.<com.google.android.material.tooltip.TooltipDrawable: int getIntrinsicHeight()>();

     label1:
        $i1 = $i1 + $i3;

        $i1 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i1, 1073741824);

        specialinvoke r0.<android.view.View: void onMeasure(int,int)>($i0, $i1);

        return;
    }

    public void onRestoreInstanceState(android.os.Parcelable)
    {
        android.os.Parcelable $r1;
        com.google.android.material.slider.BaseSlider$SliderState $r2;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        java.util.ArrayList $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.os.Parcelable;

        $r2 = (com.google.android.material.slider.BaseSlider$SliderState) $r1;

        $r1 = virtualinvoke $r2.<android.view.View$BaseSavedState: android.os.Parcelable getSuperState()>();

        specialinvoke r0.<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>($r1);

        $f0 = $r2.<com.google.android.material.slider.BaseSlider$SliderState: float valueFrom>;

        r0.<com.google.android.material.slider.BaseSlider: float valueFrom> = $f0;

        $f0 = $r2.<com.google.android.material.slider.BaseSlider$SliderState: float valueTo>;

        r0.<com.google.android.material.slider.BaseSlider: float valueTo> = $f0;

        $r3 = $r2.<com.google.android.material.slider.BaseSlider$SliderState: java.util.ArrayList values>;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void setValuesInternal(java.util.ArrayList)>($r3);

        $f0 = $r2.<com.google.android.material.slider.BaseSlider$SliderState: float stepSize>;

        r0.<com.google.android.material.slider.BaseSlider: float stepSize> = $f0;

        $z0 = $r2.<com.google.android.material.slider.BaseSlider$SliderState: boolean hasFocus>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: boolean requestFocus()>();

     label1:
        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void dispatchOnChangedProgramatically()>();

        return;
    }

    public android.os.Parcelable onSaveInstanceState()
    {
        android.os.Parcelable $r3;
        com.google.android.material.slider.BaseSlider$SliderState $r1;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        java.util.ArrayList $r2, $r4;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r3 = specialinvoke r0.<android.view.View: android.os.Parcelable onSaveInstanceState()>();

        $r1 = new com.google.android.material.slider.BaseSlider$SliderState;

        specialinvoke $r1.<com.google.android.material.slider.BaseSlider$SliderState: void <init>(android.os.Parcelable)>($r3);

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $r1.<com.google.android.material.slider.BaseSlider$SliderState: float valueFrom> = $f0;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $r1.<com.google.android.material.slider.BaseSlider$SliderState: float valueTo> = $f0;

        $r4 = new java.util.ArrayList;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r1.<com.google.android.material.slider.BaseSlider$SliderState: java.util.ArrayList values> = $r4;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $r1.<com.google.android.material.slider.BaseSlider$SliderState: float stepSize> = $f0;

        $z0 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        $r1.<com.google.android.material.slider.BaseSlider$SliderState: boolean hasFocus> = $z0;

        return $r1;
    }

    public void onSizeChanged(int, int, int, int)
    {
        byte $b4;
        int $i0, $i1, $i2, $i3;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i2 := @parameter0: int;

        $i3 := @parameter1: int;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i3 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $i3 = $i3 * 2;

        $i2 = $i2 - $i3;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 0);

        r0.<com.google.android.material.slider.BaseSlider: int trackWidth> = $i2;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $b4 = $f0 cmpl 0.0F;

        $i2 = (int) $b4;

        if $i2 <= 0 goto label1;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void calculateTicksCoordinates()>();

     label1:
        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void updateHaloHotspot()>();

        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.view.ViewParent $r2;
        com.google.android.material.tooltip.TooltipDrawable $r7;
        byte $b1;
        android.view.MotionEvent $r1, $r3;
        int $i0, $i2;
        boolean $z0;
        java.util.Iterator $r5;
        java.util.List $r4;
        com.google.android.material.internal.ViewOverlayImpl $r8;
        float $f0, $f1, $f2;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r6;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $f1 = (float) $i0;

        $f1 = $f0 - $f1;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        $f2 = (float) $i0;

        $f1 = $f1 / $f2;

        r0.<com.google.android.material.slider.BaseSlider: float touchPosition> = $f1;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float touchPosition>;

        $f1 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f1);

        r0.<com.google.android.material.slider.BaseSlider: float touchPosition> = $f1;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float touchPosition>;

        $f1 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f1);

        r0.<com.google.android.material.slider.BaseSlider: float touchPosition> = $f1;

        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i0 == 0 goto label11;

        if $i0 == 1 goto label06;

        if $i0 == 2 goto label02;

        goto label14;

     label02:
        $z0 = r0.<com.google.android.material.slider.BaseSlider: boolean thumbIsPressed>;

        if $z0 != 0 goto label04;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float touchDownX>;

        $f0 = $f0 - $f1;

        $f0 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int scaledTouchSlop>;

        $f1 = (float) $i0;

        $b1 = $f0 cmpg $f1;

        $i0 = (int) $b1;

        if $i0 >= 0 goto label03;

        return 0;

     label03:
        $r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        interfaceinvoke $r2.<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>(1);

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void onStartTrackingTouch()>();

     label04:
        $z0 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean pickActiveThumb()>();

        if $z0 != 0 goto label05;

        goto label14;

     label05:
        r0.<com.google.android.material.slider.BaseSlider: boolean thumbIsPressed> = 1;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean snapTouchPosition()>();

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void updateHaloHotspot()>();

        virtualinvoke r0.<android.view.View: void invalidate()>();

        goto label14;

     label06:
        r0.<com.google.android.material.slider.BaseSlider: boolean thumbIsPressed> = 0;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: android.view.MotionEvent lastEvent>;

        if $r3 == null goto label07;

        $i0 = virtualinvoke $r3.<android.view.MotionEvent: int getActionMasked()>();

        if $i0 != 0 goto label07;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: android.view.MotionEvent lastEvent>;

        $f0 = virtualinvoke $r3.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $f0 = $f0 - $f1;

        $f0 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int scaledTouchSlop>;

        $f1 = (float) $i0;

        $b1 = $f0 cmpg $f1;

        $i0 = (int) $b1;

        if $i0 > 0 goto label07;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: android.view.MotionEvent lastEvent>;

        $f0 = virtualinvoke $r3.<android.view.MotionEvent: float getY()>();

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $f0 = $f0 - $f1;

        $f0 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int scaledTouchSlop>;

        $f1 = (float) $i0;

        $b1 = $f0 cmpg $f1;

        $i0 = (int) $b1;

        if $i0 > 0 goto label07;

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean pickActiveThumb()>();

     label07:
        $i0 = r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx>;

        $i2 = -1;

        if $i0 == $i2 goto label08;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean snapTouchPosition()>();

        $i0 = -1;

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = $i0;

     label08:
        $r4 = r0.<com.google.android.material.slider.BaseSlider: java.util.List labels>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.google.android.material.tooltip.TooltipDrawable) $r6;

        $r8 = staticinvoke <com.google.android.material.internal.ViewUtils: com.google.android.material.internal.ViewOverlayImpl getContentViewOverlay(android.view.View)>(r0);

        interfaceinvoke $r8.<com.google.android.material.internal.ViewOverlayImpl: void remove(android.graphics.drawable.Drawable)>($r7);

        goto label09;

     label10:
        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void onStopTrackingTouch()>();

        virtualinvoke r0.<android.view.View: void invalidate()>();

        goto label14;

     label11:
        r0.<com.google.android.material.slider.BaseSlider: float touchDownX> = $f0;

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean isInScrollingContainer()>();

        if $z0 == 0 goto label12;

        goto label14;

     label12:
        $r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        interfaceinvoke $r2.<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>(1);

        $z0 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean pickActiveThumb()>();

        if $z0 != 0 goto label13;

        goto label14;

     label13:
        virtualinvoke r0.<android.view.View: boolean requestFocus()>();

        r0.<com.google.android.material.slider.BaseSlider: boolean thumbIsPressed> = 1;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean snapTouchPosition()>();

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void updateHaloHotspot()>();

        virtualinvoke r0.<android.view.View: void invalidate()>();

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void onStartTrackingTouch()>();

     label14:
        $z0 = r0.<com.google.android.material.slider.BaseSlider: boolean thumbIsPressed>;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>($z0);

        $r1 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>($r1);

        r0.<com.google.android.material.slider.BaseSlider: android.view.MotionEvent lastEvent> = $r1;

        return 1;
    }

    public boolean pickActiveThumb()
    {
        java.lang.Float $r3;
        java.util.ArrayList $r1;
        byte $b2;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx>;

        $i1 = -1;

        if $i0 == $i1 goto label01;

        return 1;

     label01:
        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float getValueOfTouchPositionAbsolute()>();

        $f1 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float valueToX(float)>($f0);

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = 0;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.Float) $r2;

        $f2 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $f2 = $f2 - $f0;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $i0 = 1;

     label02:
        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label12;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.Float) $r2;

        $f3 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $f3 = $f3 - $f0;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.Float) $r2;

        $f4 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $f4 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float valueToX(float)>($f4);

        $i1 = staticinvoke <java.lang.Float: int compare(float,float)>($f3, $f2);

        if $i1 <= 1 goto label03;

        goto label12;

     label03:
        $z0 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: boolean isRtl()>();

        if $z0 == 0 goto label04;

        $f5 = $f4 - $f1;

        $b2 = $f5 cmpl 0.0F;

        $i1 = (int) $b2;

        if $i1 <= 0 goto label06;

        goto label05;

     label04:
        $f5 = $f4 - $f1;

        $b2 = $f5 cmpg 0.0F;

        $i1 = (int) $b2;

        if $i1 >= 0 goto label06;

     label05:
        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        $i1 = staticinvoke <java.lang.Float: int compare(float,float)>($f3, $f2);

        if $i1 >= 0 goto label08;

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = $i0;

        goto label10;

     label08:
        $i1 = staticinvoke <java.lang.Float: int compare(float,float)>($f3, $f2);

        if $i1 != 0 goto label11;

        $f4 = $f4 - $f1;

        $f4 = staticinvoke <java.lang.Math: float abs(float)>($f4);

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int scaledTouchSlop>;

        $f5 = (float) $i1;

        $b2 = $f4 cmpg $f5;

        $i1 = (int) $b2;

        if $i1 >= 0 goto label09;

        $i0 = -1;

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = $i0;

        return 0;

     label09:
        if $z0 == 0 goto label11;

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = $i0;

     label10:
        $f2 = $f3;

     label11:
        $i0 = $i0 + 1;

        goto label02;

     label12:
        $i0 = r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx>;

        $i1 = -1;

        if $i0 == $i1 goto label13;

        return 1;

     label13:
        return 0;
    }

    public void removeOnChangeListener(com.google.android.material.slider.BaseOnChangeListener)
    {
        com.google.android.material.slider.BaseOnChangeListener $r1;
        com.google.android.material.slider.BaseSlider r0;
        java.util.List $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: com.google.android.material.slider.BaseOnChangeListener;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.List changeListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        return;
    }

    public void removeOnSliderTouchListener(com.google.android.material.slider.BaseOnSliderTouchListener)
    {
        com.google.android.material.slider.BaseOnSliderTouchListener $r1;
        com.google.android.material.slider.BaseSlider r0;
        java.util.List $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: com.google.android.material.slider.BaseOnSliderTouchListener;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: java.util.List touchListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        return;
    }

    public void setActiveThumbIndex(int)
    {
        int $i0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        r0.<com.google.android.material.slider.BaseSlider: int activeThumbIdx> = $i0;

        return;
    }

    public void setEnabled(boolean)
    {
        com.google.android.material.slider.BaseSlider r0;
        byte $b0;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.View: void setEnabled(boolean)>($z0);

        if $z0 == 0 goto label1;

        $b0 = 0;

        goto label2;

     label1:
        $b0 = 2;

     label2:
        virtualinvoke r0.<android.view.View: void setLayerType(int,android.graphics.Paint)>($b0, null);

        return;
    }

    public void setFocusedThumbIndex(int)
    {
        com.google.android.material.slider.BaseSlider$AccessibilityHelper $r2;
        int $i0, $i1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.IllegalArgumentException $r3;
        java.util.ArrayList $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i1 := @parameter0: int;

        if $i1 < 0 goto label1;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: java.util.ArrayList values>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i1 >= $i0 goto label1;

        r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx> = $i1;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.BaseSlider$AccessibilityHelper accessibilityHelper>;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int focusedThumbIdx>;

        virtualinvoke $r2.<b.k.b.c: boolean requestKeyboardFocusForVirtualView(int)>($i1);

        virtualinvoke r0.<android.view.View: void postInvalidate()>();

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("index out of range");

        throw $r3;
    }

    public void setHaloRadius(int)
    {
        android.graphics.drawable.RippleDrawable $r2;
        int $i0, $i1;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int haloRadius>;

        if $i0 != $i1 goto label1;

        return;

     label1:
        r0.<com.google.android.material.slider.BaseSlider: int haloRadius> = $i0;

        $r1 = virtualinvoke r0.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean shouldDrawCompatHalo()>();

        if $z0 != 0 goto label2;

        $z0 = $r1 instanceof android.graphics.drawable.RippleDrawable;

        if $z0 == 0 goto label2;

        $r2 = (android.graphics.drawable.RippleDrawable) $r1;

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int haloRadius>;

        staticinvoke <com.google.android.material.drawable.DrawableUtils: void setRippleDrawableRadius(android.graphics.drawable.RippleDrawable,int)>($r2, $i0);

        return;

     label2:
        virtualinvoke r0.<android.view.View: void postInvalidate()>();

        return;
    }

    public void setHaloRadiusResource(int)
    {
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        android.content.res.Resources $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelSize(int)>($i0);

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setHaloRadius(int)>($i0);

        return;
    }

    public void setHaloTintList(android.content.res.ColorStateList)
    {
        android.graphics.drawable.Drawable $r3;
        android.content.res.ColorStateList $r1, $r2;
        android.graphics.drawable.RippleDrawable $r4;
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Paint $r5;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList haloColor>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList haloColor> = $r1;

        $r3 = virtualinvoke r0.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        $z0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: boolean shouldDrawCompatHalo()>();

        if $z0 != 0 goto label2;

        $z0 = $r3 instanceof android.graphics.drawable.RippleDrawable;

        if $z0 == 0 goto label2;

        $r4 = (android.graphics.drawable.RippleDrawable) $r3;

        virtualinvoke $r4.<android.graphics.drawable.RippleDrawable: void setColor(android.content.res.ColorStateList)>($r1);

        return;

     label2:
        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint haloPaint>;

        $i0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int getColorForState(android.content.res.ColorStateList)>($r1);

        virtualinvoke $r5.<android.graphics.Paint: void setColor(int)>($i0);

        $r5 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint haloPaint>;

        virtualinvoke $r5.<android.graphics.Paint: void setAlpha(int)>(63);

        virtualinvoke r0.<android.view.View: void invalidate()>();

        return;
    }

    public void setLabelBehavior(int)
    {
        int $i0, $i1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int labelBehavior>;

        if $i1 == $i0 goto label1;

        r0.<com.google.android.material.slider.BaseSlider: int labelBehavior> = $i0;

        virtualinvoke r0.<android.view.View: void requestLayout()>();

     label1:
        return;
    }

    public void setLabelFormatter(com.google.android.material.slider.LabelFormatter)
    {
        com.google.android.material.slider.BaseSlider r0;
        com.google.android.material.slider.LabelFormatter $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: com.google.android.material.slider.LabelFormatter;

        r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.slider.LabelFormatter formatter> = $r1;

        return;
    }

    public void setStepSize(float)
    {
        java.lang.Object[] $r1;
        java.lang.IllegalArgumentException $r3;
        byte $b0;
        int $i1;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.String $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 := @parameter0: float;

        $b0 = $f0 cmpg 0.0F;

        $i1 = (int) $b0;

        if $i1 < 0 goto label1;

        $f1 = r0.<com.google.android.material.slider.BaseSlider: float stepSize>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label2;

        r0.<com.google.android.material.slider.BaseSlider: float stepSize> = $f0;

        r0.<com.google.android.material.slider.BaseSlider: boolean dirtyConfig> = 1;

        virtualinvoke r0.<android.view.View: void postInvalidate()>();

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1[0] = $r2;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueFrom>;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1[1] = $r2;

        $f0 = r0.<com.google.android.material.slider.BaseSlider: float valueTo>;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        $r1[2] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The stepSize(%s) must be 0, or a factor of the valueFrom(%s)-valueTo(%s) range", $r1);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label2:
        return;
    }

    public void setThumbElevation(float)
    {
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        com.google.android.material.shape.MaterialShapeDrawable $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable>;

        virtualinvoke $r1.<com.google.android.material.shape.MaterialShapeDrawable: void setElevation(float)>($f0);

        return;
    }

    public void setThumbElevationResource(int)
    {
        int $i0;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        android.content.res.Resources $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r1.<android.content.res.Resources: float getDimension(int)>($i0);

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setThumbElevation(float)>($f0);

        return;
    }

    public void setThumbRadius(int)
    {
        int $i0, $i1;
        float $f0;
        com.google.android.material.slider.BaseSlider r0;
        com.google.android.material.shape.ShapeAppearanceModel $r3;
        com.google.android.material.shape.ShapeAppearanceModel$Builder $r2;
        com.google.android.material.shape.MaterialShapeDrawable $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int thumbRadius>;

        if $i0 != $i1 goto label1;

        return;

     label1:
        r0.<com.google.android.material.slider.BaseSlider: int thumbRadius> = $i0;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable>;

        $r2 = staticinvoke <com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.ShapeAppearanceModel$Builder builder()>();

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int thumbRadius>;

        $f0 = (float) $i0;

        $r2 = virtualinvoke $r2.<com.google.android.material.shape.ShapeAppearanceModel$Builder: com.google.android.material.shape.ShapeAppearanceModel$Builder setAllCorners(int,float)>(0, $f0);

        $r3 = virtualinvoke $r2.<com.google.android.material.shape.ShapeAppearanceModel$Builder: com.google.android.material.shape.ShapeAppearanceModel build()>();

        virtualinvoke $r1.<com.google.android.material.shape.MaterialShapeDrawable: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)>($r3);

        $r1 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable>;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int thumbRadius>;

        $i0 = $i1 * 2;

        $i1 = $i1 * 2;

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i0, $i1);

        virtualinvoke r0.<android.view.View: void postInvalidate()>();

        return;
    }

    public void setThumbRadiusResource(int)
    {
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        android.content.res.Resources $r1;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelSize(int)>($i0);

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setThumbRadius(int)>($i0);

        return;
    }

    public void setThumbTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.slider.BaseSlider r0;
        com.google.android.material.shape.MaterialShapeDrawable $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: com.google.android.material.shape.MaterialShapeDrawable thumbDrawable>;

        virtualinvoke $r2.<com.google.android.material.shape.MaterialShapeDrawable: void setFillColor(android.content.res.ColorStateList)>($r1);

        return;
    }

    public void setTickActiveTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r2;
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Paint $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorActive>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorActive> = $r1;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTicksPaint>;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorActive>;

        $i0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int getColorForState(android.content.res.ColorStateList)>($r1);

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i0);

        virtualinvoke r0.<android.view.View: void invalidate()>();

        return;
    }

    public void setTickInactiveTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r2;
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Paint $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorInactive>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorInactive> = $r1;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTicksPaint>;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList tickColorInactive>;

        $i0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int getColorForState(android.content.res.ColorStateList)>($r1);

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i0);

        virtualinvoke r0.<android.view.View: void invalidate()>();

        return;
    }

    public void setTickTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.res.ColorStateList;

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setTickInactiveTintList(android.content.res.ColorStateList)>($r1);

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setTickActiveTintList(android.content.res.ColorStateList)>($r1);

        return;
    }

    public void setTrackActiveTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r2;
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Paint $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorActive>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorActive> = $r1;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint activeTrackPaint>;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorActive>;

        $i0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int getColorForState(android.content.res.ColorStateList)>($r1);

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i0);

        virtualinvoke r0.<android.view.View: void invalidate()>();

        return;
    }

    public void setTrackHeight(int)
    {
        int $i0, $i1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int trackHeight>;

        if $i1 == $i0 goto label1;

        r0.<com.google.android.material.slider.BaseSlider: int trackHeight> = $i0;

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void invalidateTrack()>();

        virtualinvoke r0.<android.view.View: void postInvalidate()>();

     label1:
        return;
    }

    public void setTrackInactiveTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1, $r2;
        int $i0;
        com.google.android.material.slider.BaseSlider r0;
        android.graphics.Paint $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorInactive>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorInactive> = $r1;

        $r3 = r0.<com.google.android.material.slider.BaseSlider: android.graphics.Paint inactiveTrackPaint>;

        $r1 = r0.<com.google.android.material.slider.BaseSlider: android.content.res.ColorStateList trackColorInactive>;

        $i0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int getColorForState(android.content.res.ColorStateList)>($r1);

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i0);

        virtualinvoke r0.<android.view.View: void invalidate()>();

        return;
    }

    public void setTrackTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: android.content.res.ColorStateList;

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setTrackInactiveTintList(android.content.res.ColorStateList)>($r1);

        virtualinvoke r0.<com.google.android.material.slider.BaseSlider: void setTrackActiveTintList(android.content.res.ColorStateList)>($r1);

        return;
    }

    public void setValueFrom(float)
    {
        float $f0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 := @parameter0: float;

        r0.<com.google.android.material.slider.BaseSlider: float valueFrom> = $f0;

        r0.<com.google.android.material.slider.BaseSlider: boolean dirtyConfig> = 1;

        virtualinvoke r0.<android.view.View: void postInvalidate()>();

        return;
    }

    public void setValueTo(float)
    {
        float $f0;
        com.google.android.material.slider.BaseSlider r0;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $f0 := @parameter0: float;

        r0.<com.google.android.material.slider.BaseSlider: float valueTo> = $f0;

        r0.<com.google.android.material.slider.BaseSlider: boolean dirtyConfig> = 1;

        virtualinvoke r0.<android.view.View: void postInvalidate()>();

        return;
    }

    public void setValues(java.util.List)
    {
        com.google.android.material.slider.BaseSlider r0;
        java.util.List $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: java.util.List;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void setValuesInternal(java.util.ArrayList)>($r2);

        return;
    }

    public transient void setValues(java.lang.Float[])
    {
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Float[] $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $r1 := @parameter0: java.lang.Float[];

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r1);

        specialinvoke r0.<com.google.android.material.slider.BaseSlider: void setValuesInternal(java.util.ArrayList)>($r2);

        return;
    }

    public void updateBoundsForVirturalViewId(int, android.graphics.Rect)
    {
        android.graphics.Rect $r1;
        java.lang.Float $r4;
        java.util.List $r2;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1;
        com.google.android.material.slider.BaseSlider r0;
        java.lang.Object $r3;

        r0 := @this: com.google.android.material.slider.BaseSlider;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.graphics.Rect;

        $i1 = r0.<com.google.android.material.slider.BaseSlider: int trackSidePadding>;

        $r2 = virtualinvoke r0.<com.google.android.material.slider.BaseSlider: java.util.List getValues()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (java.lang.Float) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        $f0 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: float normalizeValue(float)>($f0);

        $i0 = r0.<com.google.android.material.slider.BaseSlider: int trackWidth>;

        $f1 = (float) $i0;

        $f0 = $f0 * $f1;

        $i0 = (int) $f0;

        $i2 = $i1 + $i0;

        $i3 = specialinvoke r0.<com.google.android.material.slider.BaseSlider: int calculateTop()>();

        $i4 = r0.<com.google.android.material.slider.BaseSlider: int thumbRadius>;

        $i0 = $i2 - $i4;

        $i1 = $i3 - $i4;

        $i2 = $i2 + $i4;

        $i3 = $i3 + $i4;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }
}
