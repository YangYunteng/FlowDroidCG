public abstract class b.f.h extends java.lang.Object
{
    public b.f.h$b a;
    public b.f.h$c b;
    public b.f.h$e c;

    public void <init>()
    {
        b.f.h r0;

        r0 := @this: b.f.h;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean a(java.util.Map, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Map $r0;
        java.util.Collection $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Collection;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public static boolean a(java.util.Set, java.lang.Object)
    {
        java.util.Set $r2, $r4;
        java.lang.ClassCastException $r1;
        java.lang.NullPointerException $r0;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        $r2 := @parameter0: java.util.Set;

        $r3 := @parameter1: java.lang.Object;

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        $z0 = $r3 instanceof java.util.Set;

        if $z0 == 0 goto label7;

        $r4 = (java.util.Set) $r3;

     label2:
        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $i1 = interfaceinvoke $r4.<java.util.Set: int size()>();

     label3:
        if $i0 != $i1 goto label6;

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>($r4);

     label5:
        if $z0 == 0 goto label6;

        return 1;

     label6:
        return 0;

     label7:
        return 0;

     label8:
        $r0 := @caughtexception;

        return 0;

     label9:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.NullPointerException from label2 to label3 with label8;
        catch java.lang.NullPointerException from label4 to label5 with label8;
        catch java.lang.ClassCastException from label2 to label3 with label9;
        catch java.lang.ClassCastException from label4 to label5 with label9;
    }

    public static boolean b(java.util.Map, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Map $r0;
        java.util.Collection $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke $r0.<java.util.Map: int size()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        goto label1;

     label2:
        $i1 = interfaceinvoke $r0.<java.util.Map: int size()>();

        if $i0 == $i1 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean c(java.util.Map, java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection $r0;
        java.util.Set $r2;
        java.util.Map $r1;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        $r1 := @parameter0: java.util.Map;

        $r0 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r0.<java.util.Collection: boolean contains(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $i1 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 == $i1 goto label3;

        return 1;

     label3:
        return 0;
    }

    public abstract int a(java.lang.Object);

    public abstract java.lang.Object a(int, int);

    public abstract java.lang.Object a(int, java.lang.Object);

    public abstract void a();

    public abstract void a(int);

    public abstract void a(java.lang.Object, java.lang.Object);

    public java.lang.Object[] a(java.lang.Object[], int)
    {
        java.lang.Object[] $r1;
        int $i0, $i1, $i2;
        java.lang.Class $r2;
        java.lang.Object $r3;
        b.f.h r0;

        r0 := @this: b.f.h;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<b.f.h: int c()>();

        $i2 = lengthof $r1;

        if $i2 >= $i1 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, $i1);

        $r1 = (java.lang.Object[]) $r3;

     label1:
        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label3;

        $r3 = virtualinvoke r0.<b.f.h: java.lang.Object a(int,int)>($i2, $i0);

        $r1[$i2] = $r3;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $i0 = lengthof $r1;

        if $i0 <= $i1 goto label4;

        $r1[$i1] = null;

     label4:
        return $r1;
    }

    public abstract int b(java.lang.Object);

    public abstract java.util.Map b();

    public java.lang.Object[] b(int)
    {
        java.lang.Object[] $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        b.f.h r0;

        r0 := @this: b.f.h;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<b.f.h: int c()>();

        $r1 = newarray (java.lang.Object)[$i1];

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<b.f.h: java.lang.Object a(int,int)>($i2, $i0);

        $r1[$i2] = $r2;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public abstract int c();

    public java.util.Set d()
    {
        b.f.h r0;
        b.f.h$b $r1;

        r0 := @this: b.f.h;

        $r1 = r0.<b.f.h: b.f.h$b a>;

        if $r1 != null goto label1;

        $r1 = new b.f.h$b;

        specialinvoke $r1.<b.f.h$b: void <init>(b.f.h)>(r0);

        r0.<b.f.h: b.f.h$b a> = $r1;

     label1:
        $r1 = r0.<b.f.h: b.f.h$b a>;

        return $r1;
    }

    public java.util.Set e()
    {
        b.f.h$c $r1;
        b.f.h r0;

        r0 := @this: b.f.h;

        $r1 = r0.<b.f.h: b.f.h$c b>;

        if $r1 != null goto label1;

        $r1 = new b.f.h$c;

        specialinvoke $r1.<b.f.h$c: void <init>(b.f.h)>(r0);

        r0.<b.f.h: b.f.h$c b> = $r1;

     label1:
        $r1 = r0.<b.f.h: b.f.h$c b>;

        return $r1;
    }

    public java.util.Collection f()
    {
        b.f.h$e $r1;
        b.f.h r0;

        r0 := @this: b.f.h;

        $r1 = r0.<b.f.h: b.f.h$e c>;

        if $r1 != null goto label1;

        $r1 = new b.f.h$e;

        specialinvoke $r1.<b.f.h$e: void <init>(b.f.h)>(r0);

        r0.<b.f.h: b.f.h$e c> = $r1;

     label1:
        $r1 = r0.<b.f.h: b.f.h$e c>;

        return $r1;
    }
}
