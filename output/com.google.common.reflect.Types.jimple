public final class com.google.common.reflect.Types extends java.lang.Object
{
    public static final com.google.common.base.Joiner COMMA_JOINER;
    public static final com.google.common.base.Function TYPE_NAME;

    static void <clinit>()
    {
        com.google.common.reflect.Types$1 $r0;
        com.google.common.base.Joiner $r1;

        $r0 = new com.google.common.reflect.Types$1;

        specialinvoke $r0.<com.google.common.reflect.Types$1: void <init>()>();

        <com.google.common.reflect.Types: com.google.common.base.Function TYPE_NAME> = $r0;

        $r1 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>(", ");

        $r1 = virtualinvoke $r1.<com.google.common.base.Joiner: com.google.common.base.Joiner useForNull(java.lang.String)>("null");

        <com.google.common.reflect.Types: com.google.common.base.Joiner COMMA_JOINER> = $r1;

        return;
    }

    public void <init>()
    {
        com.google.common.reflect.Types r0;

        r0 := @this: com.google.common.reflect.Types;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.reflect.Type access$100(java.lang.reflect.Type[])
    {
        java.lang.reflect.Type[] $r1;
        java.lang.reflect.Type $r0;

        $r1 := @parameter0: java.lang.reflect.Type[];

        $r0 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type subtypeOfComponentType(java.lang.reflect.Type[])>($r1);

        return $r0;
    }

    public static void access$200(java.lang.reflect.Type[], java.lang.String)
    {
        java.lang.reflect.Type[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.reflect.Type[];

        $r1 := @parameter1: java.lang.String;

        staticinvoke <com.google.common.reflect.Types: void disallowPrimitiveType(java.lang.reflect.Type[],java.lang.String)>($r0, $r1);

        return;
    }

    public static java.lang.reflect.Type[] access$300(java.util.Collection)
    {
        java.lang.reflect.Type[] $r0;
        java.util.Collection $r1;

        $r1 := @parameter0: java.util.Collection;

        $r0 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type[] toArray(java.util.Collection)>($r1);

        return $r0;
    }

    public static com.google.common.base.Function access$400()
    {
        com.google.common.base.Function r0;

        r0 = <com.google.common.reflect.Types: com.google.common.base.Function TYPE_NAME>;

        return r0;
    }

    public static com.google.common.base.Joiner access$500()
    {
        com.google.common.base.Joiner r0;

        r0 = <com.google.common.reflect.Types: com.google.common.base.Joiner COMMA_JOINER>;

        return r0;
    }

    public static java.lang.Iterable access$700(java.lang.Iterable)
    {
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.google.common.reflect.Types: java.lang.Iterable filterUpperBounds(java.lang.Iterable)>($r0);

        return $r0;
    }

    public static void disallowPrimitiveType(java.lang.reflect.Type[], java.lang.String)
    {
        java.lang.reflect.Type $r2;
        java.lang.reflect.Type[] $r0;
        int $i0, $i1;
        java.lang.Class $r3;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.reflect.Type[];

        $r1 := @parameter1: java.lang.String;

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r2 = $r0[$i1];

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.Class) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isPrimitive()>();

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object)>($z0, "Primitive type \'%s\' used as %s", $r3, $r1);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static java.lang.Iterable filterUpperBounds(java.lang.Iterable)
    {
        com.google.common.base.Predicate $r1;
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(class "Ljava/lang/Object;");

        $r1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate not(com.google.common.base.Predicate)>($r1);

        $r0 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,com.google.common.base.Predicate)>($r0, $r1);

        return $r0;
    }

    public static java.lang.Class getArrayClass(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r0, 0);

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        return $r0;
    }

    public static java.lang.reflect.Type getComponentType(java.lang.reflect.Type)
    {
        com.google.common.reflect.Types$2 $r1;
        java.lang.reflect.Type $r3;
        java.lang.reflect.Type[] $r4;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReference $r0;

        $r3 := @parameter0: java.lang.reflect.Type;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r0 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        $r1 = new com.google.common.reflect.Types$2;

        specialinvoke $r1.<com.google.common.reflect.Types$2: void <init>(java.util.concurrent.atomic.AtomicReference)>($r0);

        $r4 = newarray (java.lang.reflect.Type)[1];

        $r4[0] = $r3;

        virtualinvoke $r1.<com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])>($r4);

        $r2 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (java.lang.reflect.Type) $r2;

        return $r3;
    }

    public static java.lang.reflect.Type newArrayType(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r0;
        java.lang.reflect.WildcardType $r1;
        java.lang.reflect.Type[] $r2;
        int $i0;
        com.google.common.reflect.Types$JavaVersion $r3;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.reflect.Type;

        $z0 = $r0 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label6;

        $r1 = (java.lang.reflect.WildcardType) $r0;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $i0 = lengthof $r2;

        $z0 = 1;

        if $i0 > 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Wildcard cannot have more than one lower bounds.");

        $i0 = lengthof $r2;

        if $i0 != 1 goto label3;

        $r0 = $r2[0];

        $r0 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)>($r0);

        $r1 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type)>($r0);

        return $r1;

     label3:
        $r2 = interfaceinvoke $r1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $i0 = lengthof $r2;

        if $i0 != 1 goto label4;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Wildcard should have only one upper bound.");

        $r0 = $r2[0];

        $r0 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)>($r0);

        $r1 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)>($r0);

        return $r1;

     label6:
        $r3 = <com.google.common.reflect.Types$JavaVersion: com.google.common.reflect.Types$JavaVersion CURRENT>;

        $r0 = virtualinvoke $r3.<com.google.common.reflect.Types$JavaVersion: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)>($r0);

        return $r0;
    }

    public static transient java.lang.reflect.TypeVariable newArtificialTypeVariable(java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.Type[])
    {
        java.lang.reflect.GenericDeclaration $r2;
        java.lang.reflect.TypeVariable $r1;
        int $i0;
        java.lang.reflect.Type[] $r3;
        java.lang.String $r0;

        $r2 := @parameter0: java.lang.reflect.GenericDeclaration;

        $r0 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.reflect.Type[];

        $i0 = lengthof $r3;

        if $i0 != 0 goto label1;

        $r3 = newarray (java.lang.reflect.Type)[1];

        $r3[0] = class "Ljava/lang/Object;";

     label1:
        $r1 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.TypeVariable newTypeVariableImpl(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])>($r2, $r0, $r3);

        return $r1;
    }

    public static transient java.lang.reflect.ParameterizedType newParameterizedType(java.lang.Class, java.lang.reflect.Type[])
    {
        com.google.common.reflect.Types$ClassOwnership $r4;
        java.lang.reflect.Type[] $r1;
        java.lang.Class $r0, $r3;
        com.google.common.reflect.Types$ParameterizedTypeImpl $r2;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.reflect.Type[];

        $r2 = new com.google.common.reflect.Types$ParameterizedTypeImpl;

        $r4 = <com.google.common.reflect.Types$ClassOwnership: com.google.common.reflect.Types$ClassOwnership JVM_BEHAVIOR>;

        $r3 = virtualinvoke $r4.<com.google.common.reflect.Types$ClassOwnership: java.lang.Class getOwnerType(java.lang.Class)>($r0);

        specialinvoke $r2.<com.google.common.reflect.Types$ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])>($r3, $r0, $r1);

        return $r2;
    }

    public static transient java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type[])
    {
        java.lang.reflect.ParameterizedType $r3;
        java.lang.reflect.Type $r2;
        java.lang.reflect.Type[] $r1;
        java.lang.Class $r0, $r4;
        com.google.common.reflect.Types$ParameterizedTypeImpl $r5;
        boolean $z0;

        $r2 := @parameter0: java.lang.reflect.Type;

        $r0 := @parameter1: java.lang.Class;

        $r1 := @parameter2: java.lang.reflect.Type[];

        if $r2 != null goto label1;

        $r3 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.ParameterizedType newParameterizedType(java.lang.Class,java.lang.reflect.Type[])>($r0, $r1);

        return $r3;

     label1:
        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r4 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Owner type for unenclosed %s", $r0);

        $r5 = new com.google.common.reflect.Types$ParameterizedTypeImpl;

        specialinvoke $r5.<com.google.common.reflect.Types$ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])>($r2, $r0, $r1);

        return $r5;
    }

    public static java.lang.reflect.TypeVariable newTypeVariableImpl(java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.Type[])
    {
        java.lang.reflect.GenericDeclaration $r3;
        com.google.common.reflect.Types$TypeVariableInvocationHandler $r5;
        com.google.common.reflect.Types$TypeVariableImpl $r1;
        java.lang.reflect.TypeVariable $r6;
        java.lang.reflect.Type[] $r0;
        java.lang.Object $r2;
        java.lang.String $r4;

        $r3 := @parameter0: java.lang.reflect.GenericDeclaration;

        $r4 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.reflect.Type[];

        $r1 = new com.google.common.reflect.Types$TypeVariableImpl;

        specialinvoke $r1.<com.google.common.reflect.Types$TypeVariableImpl: void <init>(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])>($r3, $r4, $r0);

        $r5 = new com.google.common.reflect.Types$TypeVariableInvocationHandler;

        specialinvoke $r5.<com.google.common.reflect.Types$TypeVariableInvocationHandler: void <init>(com.google.common.reflect.Types$TypeVariableImpl)>($r1);

        $r2 = staticinvoke <com.google.common.reflect.Reflection: java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)>(class "Ljava/lang/reflect/TypeVariable;", $r5);

        $r6 = (java.lang.reflect.TypeVariable) $r2;

        return $r6;
    }

    public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r0;
        com.google.common.reflect.Types$WildcardTypeImpl $r1;
        java.lang.reflect.Type[] $r2, $r3;

        $r0 := @parameter0: java.lang.reflect.Type;

        $r1 = new com.google.common.reflect.Types$WildcardTypeImpl;

        $r2 = newarray (java.lang.reflect.Type)[0];

        $r3 = newarray (java.lang.reflect.Type)[1];

        $r3[0] = $r0;

        specialinvoke $r1.<com.google.common.reflect.Types$WildcardTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[])>($r2, $r3);

        return $r1;
    }

    public static java.lang.reflect.Type subtypeOfComponentType(java.lang.reflect.Type[])
    {
        java.lang.reflect.Type $r1;
        java.lang.reflect.WildcardType $r3;
        java.lang.reflect.Type[] $r0;
        int $i0, $i1;
        java.lang.Class $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.reflect.Type[];

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r1 = $r0[$i1];

        $r1 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.Type getComponentType(java.lang.reflect.Type)>($r1);

        if $r1 == null goto label3;

        $z0 = $r1 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r2 = (java.lang.Class) $r1;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        $r3 = staticinvoke <com.google.common.reflect.Types: java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)>($r1);

        return $r3;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        return null;
    }

    public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r2;
        com.google.common.reflect.Types$WildcardTypeImpl $r0;
        java.lang.reflect.Type[] $r1, $r3;

        $r2 := @parameter0: java.lang.reflect.Type;

        $r0 = new com.google.common.reflect.Types$WildcardTypeImpl;

        $r1 = newarray (java.lang.reflect.Type)[1];

        $r1[0] = $r2;

        $r3 = newarray (java.lang.reflect.Type)[1];

        $r3[0] = class "Ljava/lang/Object;";

        specialinvoke $r0.<com.google.common.reflect.Types$WildcardTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[])>($r1, $r3);

        return $r0;
    }

    public static java.lang.reflect.Type[] toArray(java.util.Collection)
    {
        java.lang.Object[] $r2;
        java.util.Collection $r0;
        int $i0;
        java.lang.reflect.Type[] $r1;

        $r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        $r1 = newarray (java.lang.reflect.Type)[$i0];

        $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r1 = (java.lang.reflect.Type[]) $r2;

        return $r1;
    }

    public static java.lang.String toString(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.reflect.Type;

        $z0 = $r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Class) $r0;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
