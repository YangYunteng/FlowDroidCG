public final class com.google.common.collect.Comparators extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.collect.Comparators r0;

        r0 := @this: com.google.common.collect.Comparators;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.collect.TopKSelector a(int, java.util.Comparator)
    {
        int $i0;
        java.util.Comparator $r0;
        com.google.common.collect.TopKSelector $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.util.Comparator;

        $r1 = staticinvoke <com.google.common.collect.TopKSelector: com.google.common.collect.TopKSelector least(int,java.util.Comparator)>($i0, $r0);

        return $r1;
    }

    public static java.lang.Object a(java.util.Optional)
    {
        java.util.Optional $r1;
        java.lang.Object $r0;

        $r1 := @parameter0: java.util.Optional;

        $r0 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        return $r0;
    }

    public static java.lang.Object b(java.util.Optional)
    {
        java.util.Optional $r1;
        java.lang.Object $r0;

        $r1 := @parameter0: java.util.Optional;

        $r0 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        return $r0;
    }

    public static java.util.Comparator emptiesFirst(java.util.Comparator)
    {
        java.util.Comparator $r1;
        c.i.b.c.Q $r0;

        $r1 := @parameter0: java.util.Comparator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r0 = <c.i.b.c.Q: c.i.b.c.Q a>;

        $r1 = staticinvoke <g.a.a: java.util.Comparator a(java.util.Comparator)>($r1);

        $r1 = staticinvoke <g.a.a: java.util.Comparator a(java.util.function.Function,java.util.Comparator)>($r0, $r1);

        return $r1;
    }

    public static java.util.Comparator emptiesLast(java.util.Comparator)
    {
        c.i.b.c.P $r0;
        java.util.Comparator $r1;

        $r1 := @parameter0: java.util.Comparator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r0 = <c.i.b.c.P: c.i.b.c.P a>;

        $r1 = staticinvoke <g.a.a: java.util.Comparator b(java.util.Comparator)>($r1);

        $r1 = staticinvoke <g.a.a: java.util.Comparator a(java.util.function.Function,java.util.Comparator)>($r0, $r1);

        return $r1;
    }

    public static java.util.stream.Collector greatest(int, java.util.Comparator)
    {
        int $i0;
        java.util.stream.Collector $r1;
        java.util.Comparator $r0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.util.Comparator;

        $r0 = interfaceinvoke $r0.<java.util.Comparator: java.util.Comparator reversed()>();

        $r1 = staticinvoke <com.google.common.collect.Comparators: java.util.stream.Collector least(int,java.util.Comparator)>($i0, $r0);

        return $r1;
    }

    public static boolean isInOrder(java.lang.Iterable, java.util.Comparator)
    {
        java.util.Iterator $r2;
        int $i0;
        java.lang.Object $r3, $r4;
        java.util.Comparator $r0;
        java.lang.Iterable $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $i0 <= 0 goto label2;

        return 0;

     label2:
        $r3 = $r4;

        goto label1;

     label3:
        return 1;
    }

    public static boolean isInStrictOrder(java.lang.Iterable, java.util.Comparator)
    {
        java.util.Iterator $r2;
        int $i0;
        java.lang.Object $r3, $r4;
        java.util.Comparator $r0;
        java.lang.Iterable $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.util.Comparator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $i0 < 0 goto label2;

        return 0;

     label2:
        $r3 = $r4;

        goto label1;

     label3:
        return 1;
    }

    public static java.util.stream.Collector least(int, java.util.Comparator)
    {
        c.i.b.c.Nb $r0;
        java.util.stream.Collector$Characteristics $r1;
        c.i.b.c.Wb $r5;
        int $i0;
        c.i.b.c.S $r4;
        java.util.stream.Collector $r2;
        java.util.Comparator $r3;
        c.i.b.c.ea $r6;
        java.util.stream.Collector$Characteristics[] $r7;

        $i0 := @parameter0: int;

        $r3 := @parameter1: java.util.Comparator;

        staticinvoke <com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)>($i0, "k");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r4 = new c.i.b.c.S;

        specialinvoke $r4.<c.i.b.c.S: void <init>(int,java.util.Comparator)>($i0, $r3);

        $r5 = <c.i.b.c.Wb: c.i.b.c.Wb a>;

        $r6 = <c.i.b.c.ea: c.i.b.c.ea a>;

        $r0 = <c.i.b.c.Nb: c.i.b.c.Nb a>;

        $r7 = newarray (java.util.stream.Collector$Characteristics)[1];

        $r1 = <java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics UNORDERED>;

        $r7[0] = $r1;

        $r2 = staticinvoke <g.a.b.a: java.util.stream.Collector a(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>($r4, $r5, $r6, $r0, $r7);

        return $r2;
    }

    public static java.util.Comparator lexicographical(java.util.Comparator)
    {
        java.util.Comparator $r1;
        com.google.common.collect.LexicographicalOrdering $r0;

        $r1 := @parameter0: java.util.Comparator;

        $r0 = new com.google.common.collect.LexicographicalOrdering;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        specialinvoke $r0.<com.google.common.collect.LexicographicalOrdering: void <init>(java.util.Comparator)>($r1);

        return $r0;
    }
}
