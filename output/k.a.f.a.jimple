public class k.a.f.a extends k.a.f.f
{
    public final java.lang.Class c;
    public final k.a.f.e d;
    public final k.a.f.e e;
    public final k.a.f.e f;
    public final k.a.f.e g;
    public final k.a.f.a$c h;

    public void <init>(java.lang.Class, k.a.f.e, k.a.f.e, k.a.f.e, k.a.f.e)
    {
        k.a.f.a$c $r6;
        java.lang.Class $r1;
        k.a.f.e $r2, $r3, $r4, $r5;
        k.a.f.a r0;

        r0 := @this: k.a.f.a;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: k.a.f.e;

        $r3 := @parameter2: k.a.f.e;

        $r4 := @parameter3: k.a.f.e;

        $r5 := @parameter4: k.a.f.e;

        specialinvoke r0.<k.a.f.f: void <init>()>();

        $r6 = staticinvoke <k.a.f.a$c: k.a.f.a$c a()>();

        r0.<k.a.f.a: k.a.f.a$c h> = $r6;

        r0.<k.a.f.a: java.lang.Class c> = $r1;

        r0.<k.a.f.a: k.a.f.e d> = $r2;

        r0.<k.a.f.a: k.a.f.e e> = $r3;

        r0.<k.a.f.a: k.a.f.e f> = $r4;

        r0.<k.a.f.a: k.a.f.e g> = $r5;

        return;
    }

    public static k.a.f.f e()
    {
        java.lang.Class[] $r4;
        k.a.f.e $r1, $r6, $r7, $r8;
        k.a.f.a $r9;
        java.lang.Class $r0, $r5;
        java.lang.ClassNotFoundException $r2, $r3;
        boolean $z0;

     label01:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.android.org.conscrypt.SSLParametersImpl");

     label02:
        goto label05;

     label03:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.harmony.xnet.provider.jsse.SSLParametersImpl");

     label04:
        goto label02;

     label05:
        $r1 = new k.a.f.e;

        $r4 = newarray (java.lang.Class)[1];

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r4[0] = $r5;

     label06:
        specialinvoke $r1.<k.a.f.e: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setUseSessionTickets", $r4);

     label07:
        $r6 = new k.a.f.e;

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Ljava/lang/String;";

     label08:
        specialinvoke $r6.<k.a.f.e: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setHostname", $r4);

        $z0 = staticinvoke <k.a.f.a: boolean f()>();

     label09:
        if $z0 == 0 goto label14;

        $r7 = new k.a.f.e;

        $r4 = newarray (java.lang.Class)[0];

     label10:
        specialinvoke $r7.<k.a.f.e: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(class "[B", "getAlpnSelectedProtocol", $r4);

     label11:
        $r8 = new k.a.f.e;

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "[B";

     label12:
        specialinvoke $r8.<k.a.f.e: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setAlpnProtocols", $r4);

     label13:
        goto label15;

     label14:
        $r7 = null;

        $r8 = null;

     label15:
        $r9 = new k.a.f.a;

     label16:
        specialinvoke $r9.<k.a.f.a: void <init>(java.lang.Class,k.a.f.e,k.a.f.e,k.a.f.e,k.a.f.e)>($r0, $r1, $r6, $r7, $r8);

     label17:
        return $r9;

     label18:
        $r2 := @caughtexception;

        goto label03;

     label19:
        $r3 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label01 to label02 with label18;
        catch java.lang.ClassNotFoundException from label03 to label04 with label19;
        catch java.lang.ClassNotFoundException from label06 to label07 with label19;
        catch java.lang.ClassNotFoundException from label08 to label09 with label19;
        catch java.lang.ClassNotFoundException from label10 to label11 with label19;
        catch java.lang.ClassNotFoundException from label12 to label13 with label19;
        catch java.lang.ClassNotFoundException from label16 to label17 with label19;
    }

    public static boolean f()
    {
        java.lang.ClassNotFoundException $r1;
        java.security.Provider $r0;

        $r0 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>("GMSCore_OpenSSL");

        if $r0 == null goto label1;

        return 1;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.net.Network");

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r1 := @caughtexception;

        goto label3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
    }

    public java.lang.Object a(java.lang.String)
    {
        k.a.f.a$c $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        k.a.f.a r0;

        r0 := @this: k.a.f.a;

        $r3 := @parameter0: java.lang.String;

        $r1 = r0.<k.a.f.a: k.a.f.a$c h>;

        $r2 = virtualinvoke $r1.<k.a.f.a$c: java.lang.Object a(java.lang.String)>($r3);

        return $r2;
    }

    public k.a.h.c a(javax.net.ssl.X509TrustManager)
    {
        java.lang.Object[] $r6;
        java.lang.Class[] $r4;
        k.a.h.c $r10;
        java.lang.reflect.Constructor $r5;
        k.a.f.a r0;
        java.lang.Exception $r1;
        javax.net.ssl.X509TrustManager $r2;
        k.a.f.a$a $r9;
        java.lang.Class $r3;
        java.lang.Object $r7;
        java.lang.reflect.Method $r8;

        r0 := @this: k.a.f.a;

        $r2 := @parameter0: javax.net.ssl.X509TrustManager;

     label01:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.net.http.X509TrustManagerExtensions");

     label02:
        $r4 = newarray (java.lang.Class)[1];

     label03:
        $r4[0] = class "Ljavax/net/ssl/X509TrustManager;";

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r4);

     label04:
        $r6 = newarray (java.lang.Object)[1];

     label05:
        $r6[0] = $r2;

        $r7 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

     label06:
        $r4 = newarray (java.lang.Class)[3];

     label07:
        $r4[0] = class "[Ljava/security/cert/X509Certificate;";

        $r4[1] = class "Ljava/lang/String;";

        $r4[2] = class "Ljava/lang/String;";

        $r8 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("checkServerTrusted", $r4);

     label08:
        $r9 = new k.a.f.a$a;

     label09:
        specialinvoke $r9.<k.a.f.a$a: void <init>(java.lang.Object,java.lang.reflect.Method)>($r7, $r8);

     label10:
        return $r9;

     label11:
        $r10 = specialinvoke r0.<k.a.f.f: k.a.h.c a(javax.net.ssl.X509TrustManager)>($r2);

        return $r10;

     label12:
        $r1 := @caughtexception;

        goto label11;

        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Exception from label03 to label04 with label12;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.lang.Exception from label07 to label08 with label12;
        catch java.lang.Exception from label09 to label10 with label12;
    }

    public void a(int, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        k.a.f.a r0;
        byte $b1;
        int $i0, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r3, $r5;
        java.lang.String $r1, $r4;

        r0 := @this: k.a.f.a;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Throwable;

        $b1 = 5;

        if $i0 != 5 goto label1;

        goto label2;

     label1:
        $b1 = 3;

     label2:
        if $r2 == null goto label3;

        $r5 = new java.lang.StringBuilder;

        $r3 = $r5;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r1 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $i0 = 0;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

     label4:
        if $i0 >= $i2 goto label8;

        $i3 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(10, $i0);

        $i4 = $i3;

        $i5 = -1;

        if $i3 == $i5 goto label5;

        goto label6;

     label5:
        $i4 = $i2;

     label6:
        $i3 = $i0 + 4000;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i3);

        staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>($b1, "OkHttp", $r4);

        if $i3 < $i4 goto label7;

        $i0 = $i3 + 1;

        goto label4;

     label7:
        $i0 = $i3;

        goto label6;

     label8:
        return;
    }

    public void a(java.lang.String, java.lang.Object)
    {
        k.a.f.a$c $r3;
        java.lang.Object $r2;
        java.lang.String $r1;
        k.a.f.a r0;
        boolean $z0;

        r0 := @this: k.a.f.a;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = r0.<k.a.f.a: k.a.f.a$c h>;

        $z0 = virtualinvoke $r3.<k.a.f.a$c: boolean a(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<k.a.f.a: void a(int,java.lang.String,java.lang.Throwable)>(5, $r1, null);

     label1:
        return;
    }

    public void a(java.net.Socket, java.net.InetSocketAddress, int)
    {
        java.net.Socket $r1;
        java.io.IOException $r4;
        java.lang.AssertionError $r6;
        java.net.InetSocketAddress $r2;
        java.lang.ClassCastException $r3;
        k.a.f.a r0;
        int $i0;
        java.lang.SecurityException $r5;
        boolean $z0;

        r0 := @this: k.a.f.a;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.net.InetSocketAddress;

        $i0 := @parameter2: int;

     label1:
        virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 != 26 goto label4;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Exception in connect");

        virtualinvoke $r4.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        throw $r3;

     label5:
        $r5 := @caughtexception;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Exception in connect");

        virtualinvoke $r4.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r5);

        throw $r4;

     label6:
        $r6 := @caughtexception;

        $z0 = staticinvoke <k.a.e: boolean a(java.lang.AssertionError)>($r6);

        if $z0 == 0 goto label7;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.Throwable)>($r6);

        throw $r4;

     label7:
        throw $r6;

        catch java.lang.AssertionError from label1 to label2 with label6;
        catch java.lang.SecurityException from label1 to label2 with label5;
        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public void a(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        byte[] $r7;
        java.lang.Object[] $r5;
        javax.net.ssl.SSLSocket $r1;
        k.a.f.e $r4;
        k.a.f.a r0;
        java.util.List $r3;
        java.lang.Boolean $r6;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: k.a.f.a;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.List;

        if $r2 == null goto label1;

        $r4 = r0.<k.a.f.a: k.a.f.e d>;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r5[0] = $r6;

        virtualinvoke $r4.<k.a.f.e: java.lang.Object c(java.lang.Object,java.lang.Object[])>($r1, $r5);

        $r4 = r0.<k.a.f.a: k.a.f.e e>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r2;

        virtualinvoke $r4.<k.a.f.e: java.lang.Object c(java.lang.Object,java.lang.Object[])>($r1, $r5);

     label1:
        $r4 = r0.<k.a.f.a: k.a.f.e g>;

        if $r4 == null goto label2;

        $z0 = virtualinvoke $r4.<k.a.f.e: boolean a(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <k.a.f.f: byte[] b(java.util.List)>($r3);

        $r5[0] = $r7;

        $r4 = r0.<k.a.f.a: k.a.f.e g>;

        virtualinvoke $r4.<k.a.f.e: java.lang.Object d(java.lang.Object,java.lang.Object[])>($r1, $r5);

     label2:
        return;
    }

    public final boolean a(java.lang.String, java.lang.Class, java.lang.Object)
    {
        java.lang.Object[] $r7;
        java.lang.NoSuchMethodException $r3;
        java.lang.Class[] $r2;
        k.a.f.a r0;
        java.lang.Boolean $r8;
        java.lang.Object $r1;
        java.lang.Class $r5;
        java.lang.String $r4;
        java.lang.reflect.Method $r6;
        boolean $z0;

        r0 := @this: k.a.f.a;

        $r4 := @parameter0: java.lang.String;

        $r5 := @parameter1: java.lang.Class;

        $r1 := @parameter2: java.lang.Object;

        $r2 = newarray (java.lang.Class)[0];

     label1:
        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isCleartextTrafficPermitted", $r2);

     label2:
        $r7 = newarray (java.lang.Object)[0];

     label3:
        $r1 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r7);

     label4:
        $r8 = (java.lang.Boolean) $r1;

     label5:
        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

     label6:
        return $z0;

     label7:
        $z0 = specialinvoke r0.<k.a.f.f: boolean b(java.lang.String)>($r4);

        return $z0;

     label8:
        $r3 := @caughtexception;

        goto label7;

        catch java.lang.NoSuchMethodException from label1 to label2 with label8;
        catch java.lang.NoSuchMethodException from label3 to label4 with label8;
        catch java.lang.NoSuchMethodException from label5 to label6 with label8;
    }

    public java.lang.String b(javax.net.ssl.SSLSocket)
    {
        byte[] $r5;
        java.lang.Object[] $r3;
        javax.net.ssl.SSLSocket $r1;
        k.a.f.e $r2;
        k.a.f.a r0;
        java.nio.charset.Charset $r7;
        java.lang.Object $r4;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: k.a.f.a;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = r0.<k.a.f.a: k.a.f.e f>;

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke $r2.<k.a.f.e: boolean a(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r2 = r0.<k.a.f.a: k.a.f.e f>;

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<k.a.f.e: java.lang.Object d(java.lang.Object,java.lang.Object[])>($r1, $r3);

        $r5 = (byte[]) $r4;

        if $r5 == null goto label3;

        $r6 = new java.lang.String;

        $r7 = <k.a.e: java.nio.charset.Charset j>;

        specialinvoke $r6.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r5, $r7);

        return $r6;

     label3:
        return null;
    }

    public k.a.h.e b(javax.net.ssl.X509TrustManager)
    {
        java.lang.NoSuchMethodException $r2;
        k.a.h.e $r7;
        java.lang.Class[] $r1;
        k.a.f.a r0;
        javax.net.ssl.X509TrustManager $r3;
        k.a.f.a$b $r6;
        java.lang.Class $r4;
        java.lang.reflect.Method $r5;

        r0 := @this: k.a.f.a;

        $r3 := @parameter0: javax.net.ssl.X509TrustManager;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/security/cert/X509Certificate;";

     label3:
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("findTrustAnchorByIssuerAndSignature", $r1);

        virtualinvoke $r5.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label4:
        $r6 = new k.a.f.a$b;

     label5:
        specialinvoke $r6.<k.a.f.a$b: void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method)>($r3, $r5);

     label6:
        return $r6;

     label7:
        $r7 = specialinvoke r0.<k.a.f.f: k.a.h.e b(javax.net.ssl.X509TrustManager)>($r3);

        return $r7;

     label8:
        $r2 := @caughtexception;

        goto label7;

        catch java.lang.NoSuchMethodException from label1 to label2 with label8;
        catch java.lang.NoSuchMethodException from label3 to label4 with label8;
        catch java.lang.NoSuchMethodException from label5 to label6 with label8;
    }

    public boolean b(java.lang.String)
    {
        java.lang.Object[] $r7;
        java.lang.NoSuchMethodException $r2;
        java.lang.Class[] $r5;
        java.lang.AssertionError $r10;
        k.a.f.a r0;
        java.lang.Exception $r9;
        java.lang.ClassNotFoundException $r1;
        java.lang.Class $r4;
        java.lang.Object $r8;
        java.lang.String $r3;
        java.lang.reflect.Method $r6;
        boolean $z0;

        r0 := @this: k.a.f.a;

        $r3 := @parameter0: java.lang.String;

     label01:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.security.NetworkSecurityPolicy");

     label02:
        $r5 = newarray (java.lang.Class)[0];

     label03:
        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getInstance", $r5);

     label04:
        $r7 = newarray (java.lang.Object)[0];

     label05:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7);

        $z0 = virtualinvoke r0.<k.a.f.a: boolean b(java.lang.String,java.lang.Class,java.lang.Object)>($r3, $r4, $r8);

     label06:
        return $z0;

     label07:
        $r9 := @caughtexception;

        goto label10;

     label08:
        $r9 := @caughtexception;

        goto label10;

     label09:
        $r9 := @caughtexception;

     label10:
        $r10 = staticinvoke <k.a.e: java.lang.AssertionError a(java.lang.String,java.lang.Exception)>("unable to determine cleartext support", $r9);

        throw $r10;

     label11:
        $z0 = specialinvoke r0.<k.a.f.f: boolean b(java.lang.String)>($r3);

        return $z0;

     label12:
        $r1 := @caughtexception;

        goto label11;

     label13:
        $r2 := @caughtexception;

        goto label11;

        catch java.lang.ClassNotFoundException from label01 to label02 with label12;
        catch java.lang.ClassNotFoundException from label03 to label04 with label12;
        catch java.lang.ClassNotFoundException from label05 to label06 with label12;
        catch java.lang.NoSuchMethodException from label01 to label02 with label13;
        catch java.lang.NoSuchMethodException from label03 to label04 with label13;
        catch java.lang.NoSuchMethodException from label05 to label06 with label13;
        catch java.lang.IllegalAccessException from label01 to label02 with label09;
        catch java.lang.IllegalAccessException from label03 to label04 with label09;
        catch java.lang.IllegalAccessException from label05 to label06 with label09;
        catch java.lang.IllegalArgumentException from label01 to label02 with label08;
        catch java.lang.IllegalArgumentException from label03 to label04 with label08;
        catch java.lang.IllegalArgumentException from label05 to label06 with label08;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label07;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label07;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label07;
    }

    public final boolean b(java.lang.String, java.lang.Class, java.lang.Object)
    {
        java.lang.Object[] $r7;
        java.lang.NoSuchMethodException $r4;
        java.lang.Class[] $r3;
        k.a.f.a r0;
        java.lang.Boolean $r9;
        java.lang.Class $r1;
        java.lang.Object $r2, $r8;
        java.lang.String $r5;
        java.lang.reflect.Method $r6;
        boolean $z0;

        r0 := @this: k.a.f.a;

        $r5 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Class;

        $r2 := @parameter2: java.lang.Object;

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/lang/String;";

     label1:
        $r6 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isCleartextTrafficPermitted", $r3);

     label2:
        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r5;

     label3:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r7);

     label4:
        $r9 = (java.lang.Boolean) $r8;

     label5:
        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

     label6:
        return $z0;

     label7:
        $z0 = virtualinvoke r0.<k.a.f.a: boolean a(java.lang.String,java.lang.Class,java.lang.Object)>($r5, $r1, $r2);

        return $z0;

     label8:
        $r4 := @caughtexception;

        goto label7;

        catch java.lang.NoSuchMethodException from label1 to label2 with label8;
        catch java.lang.NoSuchMethodException from label3 to label4 with label8;
        catch java.lang.NoSuchMethodException from label5 to label6 with label8;
    }

    public javax.net.ssl.SSLContext c()
    {
        java.lang.IllegalStateException $r5;
        javax.net.ssl.SSLContext $r3;
        k.a.f.a r0;
        java.security.NoSuchAlgorithmException $r2, $r4;
        int $i0;
        java.lang.NoClassDefFoundError $r1;
        boolean $z0;

        r0 := @this: k.a.f.a;

        $z0 = 1;

     label01:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

     label02:
        if $i0 < 16 goto label05;

     label03:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

     label04:
        if $i0 >= 22 goto label05;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label09;

     label07:
        $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLSv1.2");

     label08:
        return $r3;

     label09:
        $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

     label10:
        return $r3;

     label11:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("No TLS provider", $r4);

        throw $r5;

     label12:
        $r1 := @caughtexception;

        goto label06;

     label13:
        $r2 := @caughtexception;

        goto label09;

        catch java.lang.NoClassDefFoundError from label01 to label02 with label12;
        catch java.lang.NoClassDefFoundError from label03 to label04 with label12;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label13;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label11;
    }
}
