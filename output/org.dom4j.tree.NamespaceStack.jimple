public class org.dom4j.tree.NamespaceStack extends java.lang.Object
{
    public java.util.Map currentNamespaceCache;
    public org.dom4j.Namespace defaultNamespace;
    public org.dom4j.DocumentFactory documentFactory;
    public java.util.ArrayList namespaceCacheList;
    public java.util.ArrayList namespaceStack;
    public java.util.Map rootNamespaceCache;

    public void <init>()
    {
        org.dom4j.tree.NamespaceStack r0;
        java.util.HashMap $r3;
        org.dom4j.DocumentFactory $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack> = $r2;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map rootNamespaceCache> = $r3;

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory> = $r1;

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.tree.NamespaceStack r0;
        java.util.HashMap $r3;
        org.dom4j.DocumentFactory $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack> = $r2;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map rootNamespaceCache> = $r3;

        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory> = $r1;

        return;
    }

    public org.dom4j.Namespace addNamespace(java.lang.String, java.lang.String)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r2;
        java.lang.String $r1, $r3;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>($r3, $r1);

        virtualinvoke r0.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r2);

        return $r2;
    }

    public void clear()
    {
        org.dom4j.tree.NamespaceStack r0;
        java.util.ArrayList $r1;
        java.util.Map $r2;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map rootNamespaceCache>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = null;

        return;
    }

    public boolean contains(org.dom4j.Namespace)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r1, $r3;
        int $i0;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 := @parameter0: org.dom4j.Namespace;

        $r2 = virtualinvoke $r1.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)>($r2);

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace getDefaultNamespace()>();

     label3:
        if $r3 != null goto label4;

        return 0;

     label4:
        if $r3 != $r1 goto label5;

        return 1;

     label5:
        $r2 = virtualinvoke $r1.<org.dom4j.Namespace: java.lang.String getURI()>();

        $r4 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    public org.dom4j.Namespace createNamespace(java.lang.String, java.lang.String)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r3;
        java.lang.String $r1, $r4;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r4 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory>;

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>($r4, $r1);

        return $r3;
    }

    public org.dom4j.QName createQName(java.lang.String, java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r1;
        org.dom4j.QName $r2;
        java.lang.String $r3, $r4;
        org.dom4j.DocumentFactory $r5;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r3 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.String;

        $r1 := @parameter2: org.dom4j.Namespace;

        $r5 = r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory>;

        $r2 = virtualinvoke $r5.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r3, $r1);

        return $r2;
    }

    public org.dom4j.Namespace findDefaultNamespace()
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r3;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r4;
        java.util.ArrayList $r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

     label1:
        if $i0 >= 0 goto label2;

        return null;

     label2:
        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (org.dom4j.Namespace) $r2;

        if $r3 == null goto label3;

        $r4 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        if $r4 == null goto label4;

        $r4 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        return $r3;

     label3:
        $i1 = -1;

        $i0 = $i0 + $i1;

        goto label1;

     label4:
        return $r3;
    }

    public org.dom4j.QName getAttributeQName(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r9;
        org.dom4j.tree.NamespaceStack r0;
        java.util.Map $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        org.dom4j.QName $r6;
        java.lang.String $r1, $r2, $r3, $r7, $r8;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r3 = $r2;

     label2:
        $r4 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: java.util.Map getNamespaceCache()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r6 = (org.dom4j.QName) $r5;

        if $r6 == null goto label3;

        return $r6;

     label3:
        if $r2 != null goto label4;

        $r2 = $r3;

     label4:
        $r7 = "";

        if $r1 != null goto label5;

        $r1 = "";

     label5:
        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 <= 0 goto label6;

        $r8 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r7 = $r8;

        $r9 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>($r8, $r1);

        $r1 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label7;

        $i0 = $i0 + 1;

        $r2 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i0);

        goto label7;

     label6:
        $r9 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        $r1 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label7;

        $r2 = $r3;

     label7:
        $r6 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.QName pushQName(java.lang.String,java.lang.String,org.dom4j.Namespace,java.lang.String)>($r2, $r3, $r9, $r7);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        return $r6;
    }

    public org.dom4j.Namespace getDefaultNamespace()
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace findDefaultNamespace()>();

        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace> = $r1;

     label1:
        $r1 = r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace>;

        return $r1;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r1 = r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory>;

        return r1;
    }

    public org.dom4j.Namespace getNamespace(int)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r3;
        int $i0;
        java.lang.Object $r2;
        java.util.ArrayList $r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $i0 := @parameter0: int;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (org.dom4j.Namespace) $r2;

        return $r3;
    }

    public java.util.Map getNamespaceCache()
    {
        org.dom4j.tree.NamespaceStack r0;
        java.util.Map $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        java.util.HashMap $r4;
        java.util.ArrayList $r2;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache>;

        if $r1 != null goto label2;

        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        if $i0 >= 0 goto label1;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map rootNamespaceCache>;

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = $r1;

        goto label2;

     label1:
        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r1 = (java.util.Map) $r3;

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = $r1;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache>;

        if $r1 != null goto label2;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = $r4;

        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList>;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache>;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i0, $r1);

     label2:
        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache>;

        return $r1;
    }

    public org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)
    {
        org.dom4j.Namespace $r4;
        java.util.ArrayList $r2;
        org.dom4j.tree.NamespaceStack r0;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String $r1, $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r1 = "";

     label1:
        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

     label2:
        if $i0 >= 0 goto label3;

        return null;

     label3:
        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r4 = (org.dom4j.Namespace) $r3;

        $r5 = virtualinvoke $r4.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label4;

        return $r4;

     label4:
        $i1 = -1;

        $i0 = $i0 + $i1;

        goto label2;
    }

    public org.dom4j.QName getQName(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r6;
        org.dom4j.tree.NamespaceStack r0;
        int $i0, $i1;
        org.dom4j.QName $r7;
        java.lang.String $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        if $r2 != null goto label1;

        $r2 = $r3;

        goto label2;

     label1:
        if $r3 != null goto label2;

        $r3 = $r2;

     label2:
        $r4 = "";

        if $r1 != null goto label3;

        $r1 = "";

     label3:
        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 <= 0 goto label4;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label5;

        $i0 = $i0 + 1;

        $r2 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i0);

        goto label5;

     label4:
        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label5;

        $r2 = $r3;

     label5:
        $r6 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>($r4, $r1);

        $r7 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.QName pushQName(java.lang.String,java.lang.String,org.dom4j.Namespace,java.lang.String)>($r2, $r3, $r6, $r4);

        return $r7;
    }

    public java.lang.String getURI(java.lang.String)
    {
        org.dom4j.tree.NamespaceStack r0;
        java.lang.String $r1;
        org.dom4j.Namespace $r2;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)>($r1);

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getURI()>();

        return $r1;

     label1:
        return null;
    }

    public org.dom4j.Namespace pop()
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r2;
        int $i0, $i1;
        java.util.ArrayList $r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r2 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace remove(int)>($i0);

        return $r2;
    }

    public org.dom4j.Namespace pop(java.lang.String)
    {
        java.io.PrintStream $r7;
        org.dom4j.Namespace $r2, $r5;
        java.util.ArrayList $r3;
        org.dom4j.tree.NamespaceStack r0;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8, $r9;
        java.lang.String $r1, $r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r1 = "";

     label1:
        $r2 = null;

        $r3 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $r3 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = (org.dom4j.Namespace) $r4;

        $r6 = virtualinvoke $r5.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label5;

        virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace remove(int)>($i0);

        $r2 = $r5;

     label4:
        if $r2 != null goto label6;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        $r8 = $r9;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Warning: missing namespace prefix ignored: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r1);

        return $r2;

     label5:
        $i1 = -1;

        $i0 = $i0 + $i1;

        goto label2;

     label6:
        return $r2;
    }

    public void push(java.lang.String, java.lang.String)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: java.lang.String;

        if $r3 != null goto label1;

        $r3 = "";

     label1:
        $r1 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>($r2, $r3);

        virtualinvoke r0.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r1);

        return;
    }

    public void push(org.dom4j.Namespace)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r1;
        int $i0;
        java.lang.String $r3;
        java.util.ArrayList $r2;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 := @parameter0: org.dom4j.Namespace;

        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = null;

        $r3 = virtualinvoke $r1.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace> = $r1;

     label2:
        return;
    }

    public org.dom4j.QName pushQName(java.lang.String, java.lang.String, org.dom4j.Namespace, java.lang.String)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r2;
        int $i0;
        org.dom4j.QName $r5;
        java.lang.String $r1, $r3, $r4;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.dom4j.Namespace;

        $r4 := @parameter3: java.lang.String;

        if $r4 == null goto label1;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace> = null;

     label2:
        $r5 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.QName createQName(java.lang.String,java.lang.String,org.dom4j.Namespace)>($r3, $r1, $r2);

        return $r5;
    }

    public org.dom4j.Namespace remove(int)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r3;
        int $i0;
        java.lang.Object $r2;
        java.util.ArrayList $r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $i0 := @parameter0: int;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>($i0);

        $r3 = (org.dom4j.Namespace) $r2;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList>;

        virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>($i0);

        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace> = null;

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = null;

        return $r3;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory> = $r1;

        return;
    }

    public int size()
    {
        int $i0;
        org.dom4j.tree.NamespaceStack r0;
        java.util.ArrayList $r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.dom4j.tree.NamespaceStack r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = new java.lang.StringBuilder;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Stack: ");

        $r3 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r2 = virtualinvoke $r3.<java.util.ArrayList: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
