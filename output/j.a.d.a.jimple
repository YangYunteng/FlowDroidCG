public final class j.a.d.a extends java.lang.Object implements java.util.concurrent.Executor, java.io.Closeable
{
    public static final java.util.concurrent.atomic.AtomicLongFieldUpdater a;
    public static final java.util.concurrent.atomic.AtomicLongFieldUpdater b;
    public static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater c;
    public static final int d;
    public static final int e;
    public static final int f;
    public static final int g;
    public static final j.a.b.A h;
    public static final j.a.d.a$a i;
    public volatile int _isTerminated;
    public volatile long controlState;
    public final j.a.d.e j;
    public final java.util.concurrent.Semaphore k;
    public final j.a.d.a$b[] l;
    public final java.util.Random m;
    public final int n;
    public final int o;
    public final long p;
    public volatile long parkedWorkersStack;
    public final java.lang.String q;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r4;
        j.a.b.A $r2;
        long $l2, $l3;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r3;
        java.util.concurrent.TimeUnit $r1;
        int $i0, $i1;
        j.a.d.a$a $r0;

        $r0 = new j.a.d.a$a;

        specialinvoke $r0.<j.a.d.a$a: void <init>(i.f.b.g)>(null);

        <j.a.d.a: j.a.d.a$a i> = $r0;

        $i0 = staticinvoke <j.a.b.B: int a(java.lang.String,int,int,int,int,java.lang.Object)>("kotlinx.coroutines.scheduler.spins", 1000, 1, 0, 8, null);

        <j.a.d.a: int d> = $i0;

        $i0 = <j.a.d.a: int d>;

        $i1 = staticinvoke <j.a.b.B: int a(java.lang.String,int,int,int,int,java.lang.Object)>("kotlinx.coroutines.scheduler.yields", 0, 0, 0, 8, null);

        $i0 = $i0 + $i1;

        <j.a.d.a: int e> = $i0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(1L);

        $i0 = (int) $l2;

        <j.a.d.a: int f> = $i0;

        $l2 = <j.a.d.m: long a>;

        $l3 = (long) 4;

        $l2 = $l2 / $l3;

        $l2 = staticinvoke <i.g.f: long a(long,long)>($l2, 10L);

        $i0 = <j.a.d.a: int f>;

        $l3 = (long) $i0;

        $l2 = staticinvoke <i.g.f: long b(long,long)>($l2, $l3);

        $i0 = (int) $l2;

        <j.a.d.a: int g> = $i0;

        $r2 = new j.a.b.A;

        specialinvoke $r2.<j.a.b.A: void <init>(java.lang.String)>("NOT_IN_STACK");

        <j.a.d.a: j.a.b.A h> = $r2;

        $r3 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lj/a/d/a;", "parkedWorkersStack");

        <j.a.d.a: java.util.concurrent.atomic.AtomicLongFieldUpdater a> = $r3;

        $r3 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lj/a/d/a;", "controlState");

        <j.a.d.a: java.util.concurrent.atomic.AtomicLongFieldUpdater b> = $r3;

        $r4 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lj/a/d/a;", "_isTerminated");

        <j.a.d.a: java.util.concurrent.atomic.AtomicIntegerFieldUpdater c> = $r4;

        return;
    }

    public void <init>(int, int, long, java.lang.String)
    {
        j.a.d.a r0;
        java.util.concurrent.Semaphore $r5;
        j.a.d.a$b[] $r2;
        long $l2;
        j.a.d.e $r4;
        java.util.Random $r6;
        java.lang.IllegalArgumentException $r8;
        byte $b3;
        int $i0, $i1;
        java.lang.StringBuilder $r3, $r7;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: j.a.d.a;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "schedulerName");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<j.a.d.a: int n> = $i0;

        r0.<j.a.d.a: int o> = $i1;

        r0.<j.a.d.a: long p> = $l2;

        r0.<j.a.d.a: java.lang.String q> = $r1;

        $i0 = r0.<j.a.d.a: int n>;

        if $i0 < 1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label12;

        $i0 = r0.<j.a.d.a: int o>;

        $i1 = r0.<j.a.d.a: int n>;

        if $i0 < $i1 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        if $z0 == 0 goto label11;

        $i0 = r0.<j.a.d.a: int o>;

        if $i0 > 2097150 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label10;

        $l2 = r0.<j.a.d.a: long p>;

        $b3 = $l2 cmp 0L;

        $i0 = (int) $b3;

        if $i0 <= 0 goto label07;

        $z0 = 1;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        if $z0 == 0 goto label09;

        $r4 = new j.a.d.e;

        specialinvoke $r4.<j.a.d.e: void <init>()>();

        r0.<j.a.d.a: j.a.d.e j> = $r4;

        $r5 = new java.util.concurrent.Semaphore;

        $i0 = r0.<j.a.d.a: int n>;

        specialinvoke $r5.<java.util.concurrent.Semaphore: void <init>(int,boolean)>($i0, 0);

        r0.<j.a.d.a: java.util.concurrent.Semaphore k> = $r5;

        r0.<j.a.d.a: long parkedWorkersStack> = 0L;

        $i0 = r0.<j.a.d.a: int o>;

        $i0 = $i0 + 1;

        $r2 = newarray (j.a.d.a$b)[$i0];

        r0.<j.a.d.a: j.a.d.a$b[] l> = $r2;

        r0.<j.a.d.a: long controlState> = 0L;

        $r6 = new java.util.Random;

        specialinvoke $r6.<java.util.Random: void <init>()>();

        r0.<j.a.d.a: java.util.Random m> = $r6;

        r0.<j.a.d.a: int _isTerminated> = 0;

        return;

     label09:
        $r7 = new java.lang.StringBuilder;

        $r3 = $r7;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Idle worker keep alive time ");

        $l2 = r0.<j.a.d.a: long p>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be positive");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label10:
        $r7 = new java.lang.StringBuilder;

        $r3 = $r7;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max pool size ");

        $i0 = r0.<j.a.d.a: int o>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should not exceed maximal supported number of threads 2097150");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label11:
        $r7 = new java.lang.StringBuilder;

        $r3 = $r7;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max pool size ");

        $i0 = r0.<j.a.d.a: int o>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be greater than or equals to core pool size ");

        $i0 = r0.<j.a.d.a: int n>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label12:
        $r7 = new java.lang.StringBuilder;

        $r3 = $r7;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Core pool size ");

        $i0 = r0.<j.a.d.a: int n>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be at least 1");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r8;
    }

    public static final int a(j.a.d.a)
    {
        int i0;
        j.a.d.a $r0;

        $r0 := @parameter0: j.a.d.a;

        i0 = $r0.<j.a.d.a: int n>;

        return i0;
    }

    public static final void a(j.a.d.a, j.a.d.a$b)
    {
        j.a.d.a$b $r1;
        j.a.d.a $r0;

        $r0 := @parameter0: j.a.d.a;

        $r1 := @parameter1: j.a.d.a$b;

        virtualinvoke $r0.<j.a.d.a: void b(j.a.d.a$b)>($r1);

        return;
    }

    public static final void a(j.a.d.a, j.a.d.a$b, int, int)
    {
        j.a.d.a $r0;
        int $i0, $i1;
        j.a.d.a$b $r1;

        $r0 := @parameter0: j.a.d.a;

        $r1 := @parameter1: j.a.d.a$b;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        virtualinvoke $r0.<j.a.d.a: void a(j.a.d.a$b,int,int)>($r1, $i0, $i1);

        return;
    }

    public static final void a(j.a.d.a, j.a.d.i)
    {
        j.a.d.a $r0;
        j.a.d.i $r1;

        $r0 := @parameter0: j.a.d.a;

        $r1 := @parameter1: j.a.d.i;

        virtualinvoke $r0.<j.a.d.a: void a(j.a.d.i)>($r1);

        return;
    }

    public static void a(j.a.d.a, java.lang.Runnable, j.a.d.j, boolean, int, java.lang.Object)
    {
        j.a.d.a $r0;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.Runnable $r1;
        j.a.d.j $r2;
        boolean $z0;

        $r0 := @parameter0: j.a.d.a;

        $r1 := @parameter1: java.lang.Runnable;

        $r2 := @parameter2: j.a.d.j;

        $z0 := @parameter3: boolean;

        $i0 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $r2 = <j.a.d.h: j.a.d.h b>;

     label1:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label2;

        $z0 = 0;

     label2:
        virtualinvoke $r0.<j.a.d.a: void a(java.lang.Runnable,j.a.d.j,boolean)>($r1, $r2, $z0);

        return;
    }

    public static final java.util.concurrent.Semaphore b(j.a.d.a)
    {
        j.a.d.a $r0;
        java.util.concurrent.Semaphore r1;

        $r0 := @parameter0: j.a.d.a;

        r1 = $r0.<j.a.d.a: java.util.concurrent.Semaphore k>;

        return r1;
    }

    public static final int c(j.a.d.a)
    {
        int $i0;
        j.a.d.a $r0;

        $r0 := @parameter0: j.a.d.a;

        $i0 = virtualinvoke $r0.<j.a.d.a: int p()>();

        return $i0;
    }

    public static final j.a.d.e d(j.a.d.a)
    {
        j.a.d.e r1;
        j.a.d.a $r0;

        $r0 := @parameter0: j.a.d.a;

        r1 = $r0.<j.a.d.a: j.a.d.e j>;

        return r1;
    }

    public static final long e(j.a.d.a)
    {
        long l0;
        j.a.d.a $r0;

        $r0 := @parameter0: j.a.d.a;

        l0 = $r0.<j.a.d.a: long p>;

        return l0;
    }

    public static final java.util.Random f(j.a.d.a)
    {
        java.util.Random r1;
        j.a.d.a $r0;

        $r0 := @parameter0: j.a.d.a;

        r1 = $r0.<j.a.d.a: java.util.Random m>;

        return r1;
    }

    public static final java.lang.String g(j.a.d.a)
    {
        java.lang.String r1;
        j.a.d.a $r0;

        $r0 := @parameter0: j.a.d.a;

        r1 = $r0.<j.a.d.a: java.lang.String q>;

        return r1;
    }

    public static final j.a.d.a$b[] h(j.a.d.a)
    {
        j.a.d.a$b[] r1;
        j.a.d.a $r0;

        $r0 := @parameter0: j.a.d.a;

        r1 = $r0.<j.a.d.a: j.a.d.a$b[] l>;

        return r1;
    }

    public static final int i()
    {
        int i0;

        i0 = <j.a.d.a: int f>;

        return i0;
    }

    public static final boolean i(j.a.d.a)
    {
        j.a.d.a $r0;
        boolean $z0;

        $r0 := @parameter0: j.a.d.a;

        $z0 = virtualinvoke $r0.<j.a.d.a: boolean isTerminated()>();

        return $z0;
    }

    public static final int j()
    {
        int i0;

        i0 = <j.a.d.a: int d>;

        return i0;
    }

    public static final void j(j.a.d.a)
    {
        j.a.d.a $r0;

        $r0 := @parameter0: j.a.d.a;

        virtualinvoke $r0.<j.a.d.a: void r()>();

        return;
    }

    public static final int k()
    {
        int i0;

        i0 = <j.a.d.a: int e>;

        return i0;
    }

    public static final int l()
    {
        int i0;

        i0 = <j.a.d.a: int g>;

        return i0;
    }

    public static final j.a.b.A m()
    {
        j.a.b.A r0;

        r0 = <j.a.d.a: j.a.b.A h>;

        return r0;
    }

    public final int a(j.a.d.a$b)
    {
        j.a.b.A $r3;
        j.a.d.a r0;
        int $i0;
        j.a.d.a$b $r1;
        java.lang.Object $r2;

        r0 := @this: j.a.d.a;

        $r1 := @parameter0: j.a.d.a$b;

        $r2 = virtualinvoke $r1.<j.a.d.a$b: java.lang.Object h()>();

     label1:
        $r3 = <j.a.d.a: j.a.b.A h>;

        if $r2 != $r3 goto label2;

        $i0 = -1;

        return $i0;

     label2:
        if $r2 != null goto label3;

        return 0;

     label3:
        $r1 = (j.a.d.a$b) $r2;

        $i0 = virtualinvoke $r1.<j.a.d.a$b: int f()>();

        if $i0 == 0 goto label4;

        return $i0;

     label4:
        $r2 = virtualinvoke $r1.<j.a.d.a$b: java.lang.Object h()>();

        goto label1;
    }

    public final int a(j.a.d.i, boolean)
    {
        j.a.d.a r0;
        j.a.d.e $r8;
        j.a.d.i $r2;
        j.a.d.l $r1, $r6;
        byte $b0;
        j.a.d.o $r7;
        int $i1, $i2;
        j.a.d.a$b $r3;
        j.a.d.a$c $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: j.a.d.a;

        $r2 := @parameter0: j.a.d.i;

        $z0 := @parameter1: boolean;

        $r3 = virtualinvoke r0.<j.a.d.a: j.a.d.a$b o()>();

        if $r3 == null goto label8;

        $r4 = virtualinvoke $r3.<j.a.d.a$b: j.a.d.a$c getState()>();

        $r5 = <j.a.d.a$c: j.a.d.a$c e>;

        if $r4 != $r5 goto label1;

        return 1;

     label1:
        $b0 = -1;

        $r6 = virtualinvoke $r2.<j.a.d.i: j.a.d.l a()>();

        $r1 = <j.a.d.l: j.a.d.l a>;

        if $r6 != $r1 goto label3;

        $z1 = virtualinvoke $r3.<j.a.d.a$b: boolean k()>();

        if $z1 == 0 goto label2;

        $b0 = 0;

        goto label3;

     label2:
        $z1 = virtualinvoke $r3.<j.a.d.a$b: boolean m()>();

        if $z1 != 0 goto label3;

        return 1;

     label3:
        if $z0 == 0 goto label4;

        $r7 = virtualinvoke $r3.<j.a.d.a$b: j.a.d.o g()>();

        $r8 = r0.<j.a.d.a: j.a.d.e j>;

        $z0 = virtualinvoke $r7.<j.a.d.o: boolean b(j.a.d.i,j.a.d.e)>($r2, $r8);

        goto label5;

     label4:
        $r7 = virtualinvoke $r3.<j.a.d.a$b: j.a.d.o g()>();

        $r8 = r0.<j.a.d.a: j.a.d.e j>;

        $z0 = virtualinvoke $r7.<j.a.d.o: boolean a(j.a.d.i,j.a.d.e)>($r2, $r8);

     label5:
        if $z0 == 0 goto label7;

        $r7 = virtualinvoke $r3.<j.a.d.a$b: j.a.d.o g()>();

        $i1 = virtualinvoke $r7.<j.a.d.o: int a()>();

        $i2 = <j.a.d.m: int b>;

        if $i1 <= $i2 goto label6;

        return 0;

     label6:
        return $b0;

     label7:
        return 0;

     label8:
        return 1;
    }

    public final j.a.d.i a(java.lang.Runnable, j.a.d.j)
    {
        j.a.d.a r0;
        long $l0;
        java.lang.Runnable $r2;
        j.a.d.i $r4;
        j.a.d.j $r1;
        j.a.d.k $r5;
        j.a.d.n $r3;
        boolean $z0;

        r0 := @this: j.a.d.a;

        $r2 := @parameter0: java.lang.Runnable;

        $r1 := @parameter1: j.a.d.j;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r2, "block");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "taskContext");

        $r3 = <j.a.d.m: j.a.d.n g>;

        $l0 = virtualinvoke $r3.<j.a.d.n: long a()>();

        $z0 = $r2 instanceof j.a.d.i;

        if $z0 == 0 goto label1;

        $r4 = (j.a.d.i) $r2;

        $r4.<j.a.d.i: long a> = $l0;

        $r4.<j.a.d.i: j.a.d.j b> = $r1;

        return $r4;

     label1:
        $r5 = new j.a.d.k;

        specialinvoke $r5.<j.a.d.k: void <init>(java.lang.Runnable,long,j.a.d.j)>($r2, $l0, $r1);

        return $r5;
    }

    public final void a(j.a.d.a$b, int, int)
    {
        j.a.d.a r0;
        long $l2, $l3, $l5;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r2;
        int $i0, $i1, $i4;
        j.a.d.a$b $r1;
        boolean $z0;

        r0 := @this: j.a.d.a;

        $r1 := @parameter0: j.a.d.a$b;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        $l2 = r0.<j.a.d.a: long parkedWorkersStack>;

        $l3 = 2097151L & $l2;

        $i4 = (int) $l3;

        $l3 = 2097152L + $l2;

        $l3 = $l3 & -2097152L;

        if $i4 != $i0 goto label3;

        if $i1 != 0 goto label2;

        $i4 = virtualinvoke r0.<j.a.d.a: int a(j.a.d.a$b)>($r1);

        goto label3;

     label2:
        $i4 = $i1;

        goto label3;

     label3:
        if $i4 >= 0 goto label4;

        goto label1;

     label4:
        $r2 = <j.a.d.a: java.util.concurrent.atomic.AtomicLongFieldUpdater a>;

        $l5 = (long) $i4;

        $l3 = $l3 | $l5;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l2, $l3);

        if $z0 == 0 goto label1;

        return;
    }

    public final void a(j.a.d.i)
    {
        java.lang.Throwable $r4, $r5;
        j.a.d.a r0;
        j.a.d.i $r1;
        java.lang.Thread$UncaughtExceptionHandler $r7;
        j.a.qa $r2, $r3;
        java.lang.Thread $r6;

        r0 := @this: j.a.d.a;

        $r1 := @parameter0: j.a.d.i;

     label01:
        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

     label02:
        $r2 = staticinvoke <j.a.ra: j.a.qa a()>();

        $r3 = $r2;

        if $r2 == null goto label08;

     label03:
        interfaceinvoke $r3.<j.a.qa: void a()>();

        return;

     label04:
        $r4 := @caughtexception;

        goto label09;

     label05:
        $r5 := @caughtexception;

     label06:
        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        staticinvoke <i.f.b.i: void a(java.lang.Object,java.lang.String)>($r6, "thread");

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r7.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r6, $r5);

     label07:
        $r2 = staticinvoke <j.a.ra: j.a.qa a()>();

        $r3 = $r2;

        if $r2 == null goto label12;

        goto label03;

     label08:
        return;

     label09:
        $r3 = staticinvoke <j.a.ra: j.a.qa a()>();

        if $r3 == null goto label10;

        interfaceinvoke $r3.<j.a.qa: void a()>();

     label10:
        goto label11;

     label11:
        throw $r4;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label06 to label07 with label04;
    }

    public final void a(java.lang.Runnable, j.a.d.j, boolean)
    {
        j.a.d.a r0;
        j.a.d.e $r5;
        java.lang.Runnable $r1;
        j.a.d.i $r4;
        j.a.d.j $r2;
        java.util.concurrent.RejectedExecutionException $r9;
        j.a.qa $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r6, $r8;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: j.a.d.a;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: j.a.d.j;

        $z0 := @parameter2: boolean;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "block");

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r2, "taskContext");

        $r3 = staticinvoke <j.a.ra: j.a.qa a()>();

        if $r3 == null goto label1;

        interfaceinvoke $r3.<j.a.qa: void c()>();

     label1:
        $r4 = virtualinvoke r0.<j.a.d.a: j.a.d.i a(java.lang.Runnable,j.a.d.j)>($r1, $r2);

        $i0 = virtualinvoke r0.<j.a.d.a: int a(j.a.d.i,boolean)>($r4, $z0);

        $i1 = -1;

        if $i0 == $i1 goto label4;

        if $i0 == 1 goto label2;

        virtualinvoke r0.<j.a.d.a: void r()>();

        return;

     label2:
        $r5 = r0.<j.a.d.a: j.a.d.e j>;

        $z0 = virtualinvoke $r5.<j.a.b.q: boolean a(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        virtualinvoke r0.<j.a.d.a: void r()>();

        return;

     label3:
        $r9 = new java.util.concurrent.RejectedExecutionException;

        $r8 = new java.lang.StringBuilder;

        $r6 = $r8;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<j.a.d.a: java.lang.String q>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was terminated");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label4:
        return;
    }

    public final void b(j.a.d.a$b)
    {
        j.a.b.A $r3;
        j.a.d.a r0;
        j.a.d.a$b[] $r5;
        long $l0, $l1, $l4;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r7;
        java.lang.AssertionError $r4;
        int $i2, $i3;
        j.a.d.a$b $r1, $r6;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: j.a.d.a;

        $r1 := @parameter0: j.a.d.a$b;

        $r2 = virtualinvoke $r1.<j.a.d.a$b: java.lang.Object h()>();

        $r3 = <j.a.d.a: j.a.b.A h>;

        if $r2 == $r3 goto label1;

        return;

     label1:
        $l0 = r0.<j.a.d.a: long parkedWorkersStack>;

        $l1 = 2097151L & $l0;

        $i2 = (int) $l1;

        $l1 = 2097152L + $l0;

        $l1 = $l1 & -2097152L;

        $i3 = virtualinvoke $r1.<j.a.d.a$b: int f()>();

        $z0 = staticinvoke <j.a.z: boolean a()>();

        if $z0 == 0 goto label5;

        if $i3 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        $r5 = r0.<j.a.d.a: j.a.d.a$b[] l>;

        $r6 = $r5[$i2];

        virtualinvoke $r1.<j.a.d.a$b: void a(java.lang.Object)>($r6);

        $r7 = <j.a.d.a: java.util.concurrent.atomic.AtomicLongFieldUpdater a>;

        $l4 = (long) $i3;

        $l1 = $l4 | $l1;

        $z0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if $z0 == 0 goto label1;

        return;
    }

    public void close()
    {
        j.a.d.a r0;

        r0 := @this: j.a.d.a;

        virtualinvoke r0.<j.a.d.a: void g(long)>(10000L);

        return;
    }

    public void execute(java.lang.Runnable)
    {
        java.lang.Runnable $r1;
        j.a.d.a r0;

        r0 := @this: j.a.d.a;

        $r1 := @parameter0: java.lang.Runnable;

        staticinvoke <i.f.b.i: void b(java.lang.Object,java.lang.String)>($r1, "command");

        staticinvoke <j.a.d.a: void a(j.a.d.a,java.lang.Runnable,j.a.d.j,boolean,int,java.lang.Object)>(r0, $r1, null, 0, 6, null);

        return;
    }

    public final void g(long)
    {
        java.lang.Throwable $r14;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        j.a.d.a r0;
        j.a.d.a$b[] $r3;
        long $l1, $l2;
        j.a.d.e $r9;
        java.lang.AssertionError $r7;
        j.a.d.i $r10, $r11;
        java.lang.NullPointerException r15;
        j.a.d.o $r8;
        int $i0, $i3;
        j.a.d.a$b $r2, $r4;
        j.a.d.a$c $r5, $r6;
        boolean $z0, $z1;
        java.util.concurrent.Semaphore $r13;
        java.lang.Object $r12;

        r0 := @this: j.a.d.a;

        $l1 := @parameter0: long;

        $r1 = <j.a.d.a: java.util.concurrent.atomic.AtomicIntegerFieldUpdater c>;

        $z0 = 0;

        $z1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, 0, 1);

        if $z1 != 0 goto label01;

        return;

     label01:
        $r2 = virtualinvoke r0.<j.a.d.a: j.a.d.a$b o()>();

        $r3 = r0.<j.a.d.a: j.a.d.a$b[] l>;

        entermonitor $r3;

     label02:
        $l2 = r0.<j.a.d.a: long controlState>;

     label03:
        $l2 = $l2 & 2097151L;

        $i0 = (int) $l2;

        exitmonitor $r3;

        if 1 > $i0 goto label13;

        $i3 = 1;

     label04:
        $r3 = r0.<j.a.d.a: j.a.d.a$b[] l>;

        $r4 = $r3[$i3];

        if $r4 == null goto label12;

        if $r4 == $r2 goto label11;

     label05:
        $z1 = virtualinvoke $r4.<java.lang.Thread: boolean isAlive()>();

        if $z1 == 0 goto label06;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r4);

        virtualinvoke $r4.<java.lang.Thread: void join(long)>($l1);

        goto label05;

     label06:
        $r5 = virtualinvoke $r4.<j.a.d.a$b: j.a.d.a$c getState()>();

        $z1 = staticinvoke <j.a.z: boolean a()>();

        if $z1 == 0 goto label10;

        $r6 = <j.a.d.a$c: j.a.d.a$c e>;

        if $r5 != $r6 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        if $z1 == 0 goto label09;

        goto label10;

     label09:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label10:
        $r8 = virtualinvoke $r4.<j.a.d.a$b: j.a.d.o g()>();

        $r9 = r0.<j.a.d.a: j.a.d.e j>;

        virtualinvoke $r8.<j.a.d.o: void a(j.a.d.e)>($r9);

     label11:
        if $i3 == $i0 goto label13;

        $i3 = $i3 + 1;

        goto label04;

     label12:
        staticinvoke <i.f.b.i: void a()>();

        r15 = new java.lang.NullPointerException;

        specialinvoke r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r15;

     label13:
        $r9 = r0.<j.a.d.a: j.a.d.e j>;

        virtualinvoke $r9.<j.a.b.q: void a()>();

     label14:
        if $r2 == null goto label15;

        $r10 = virtualinvoke $r2.<j.a.d.a$b: j.a.d.i d()>();

        $r11 = $r10;

        if $r10 == null goto label15;

        goto label16;

     label15:
        $r9 = r0.<j.a.d.a: j.a.d.e j>;

        $r12 = virtualinvoke $r9.<j.a.b.q: java.lang.Object c()>();

        $r11 = (j.a.d.i) $r12;

     label16:
        if $r11 == null goto label17;

        virtualinvoke r0.<j.a.d.a: void a(j.a.d.i)>($r11);

        goto label14;

     label17:
        if $r2 == null goto label18;

        $r5 = <j.a.d.a$c: j.a.d.a$c e>;

        virtualinvoke $r2.<j.a.d.a$b: boolean a(j.a.d.a$c)>($r5);

     label18:
        $z1 = staticinvoke <j.a.z: boolean a()>();

        if $z1 == 0 goto label21;

        $r13 = r0.<j.a.d.a: java.util.concurrent.Semaphore k>;

        $i3 = virtualinvoke $r13.<java.util.concurrent.Semaphore: int availablePermits()>();

        $i0 = r0.<j.a.d.a: int n>;

        if $i3 != $i0 goto label19;

        $z0 = 1;

     label19:
        if $z0 == 0 goto label20;

        goto label21;

     label20:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label21:
        r0.<j.a.d.a: long parkedWorkersStack> = 0L;

        r0.<j.a.d.a: long controlState> = 0L;

        return;

     label22:
        $r14 := @caughtexception;

        exitmonitor $r3;

        goto label23;

     label23:
        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label22;
    }

    public final boolean isTerminated()
    {
        int $i0;
        j.a.d.a r0;

        r0 := @this: j.a.d.a;

        $i0 = r0.<j.a.d.a: int _isTerminated>;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final int n()
    {
        java.lang.Throwable $r6;
        j.a.d.a r0;
        j.a.d.a$b[] $r1, $r3;
        long $l1, $l2;
        int $i0, $i3, $i4;
        j.a.d.a$b $r4, $r7;
        boolean $z0, $z1;
        java.util.concurrent.Semaphore $r2;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: j.a.d.a;

        $r1 = r0.<j.a.d.a: j.a.d.a$b[] l>;

        entermonitor $r1;

     label01:
        $z0 = virtualinvoke r0.<j.a.d.a: boolean isTerminated()>();

     label02:
        if $z0 == 0 goto label03;

        exitmonitor $r1;

        $i3 = -1;

        return $i3;

     label03:
        $l1 = r0.<j.a.d.a: long controlState>;

        $l2 = $l1 & 2097151L;

        $i0 = (int) $l2;

        $l1 = $l1 & 4398044413952L;

        $l1 = $l1 >> 21;

        $i3 = (int) $l1;

        $i3 = $i0 - $i3;

        $i4 = r0.<j.a.d.a: int n>;

     label04:
        $z0 = 0;

        if $i3 < $i4 goto label05;

        exitmonitor $r1;

        return 0;

     label05:
        $i4 = r0.<j.a.d.a: int o>;

        if $i0 >= $i4 goto label13;

        $r2 = r0.<j.a.d.a: java.util.concurrent.Semaphore k>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.Semaphore: int availablePermits()>();

        if $i0 != 0 goto label06;

        goto label13;

     label06:
        $l1 = r0.<j.a.d.a: long controlState>;

        $l1 = $l1 & 2097151L;

        $i0 = (int) $l1;

        $i4 = $i0 + 1;

        if $i4 <= 0 goto label07;

        $r3 = r0.<j.a.d.a: j.a.d.a$b[] l>;

        $r4 = $r3[$i4];

        if $r4 != null goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        if $z1 == 0 goto label12;

        $r7 = new j.a.d.a$b;

        $r4 = $r7;

        specialinvoke $r7.<j.a.d.a$b: void <init>(j.a.d.a,int)>(r0, $i4);

        virtualinvoke $r4.<java.lang.Thread: void start()>();

        $r5 = <j.a.d.a: java.util.concurrent.atomic.AtomicLongFieldUpdater b>;

        $l1 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long incrementAndGet(java.lang.Object)>(r0);

        $l1 = 2097151L & $l1;

        $i0 = (int) $l1;

        if $i4 != $i0 goto label09;

        $z0 = 1;

     label09:
        if $z0 == 0 goto label11;

        $r3 = r0.<j.a.d.a: j.a.d.a$b[] l>;

        $r3[$i4] = $r4;

     label10:
        $i3 = $i3 + 1;

        exitmonitor $r1;

        return $i3;

     label11:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Failed requirement.");

        throw $r8;

     label12:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Failed requirement.");

        throw $r8;

     label13:
        exitmonitor $r1;

        return 0;

     label14:
        $r6 := @caughtexception;

        exitmonitor $r1;

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label10 with label14;
        catch java.lang.Throwable from label11 to label13 with label14;
    }

    public final j.a.d.a$b o()
    {
        j.a.d.a r0, $r4;
        java.lang.Thread $r1, $r2;
        j.a.d.a$b $r3;
        boolean $z0;

        r0 := @this: j.a.d.a;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = $r1;

        $z0 = $r1 instanceof j.a.d.a$b;

        if $z0 != 0 goto label1;

        $r2 = null;

     label1:
        $r3 = (j.a.d.a$b) $r2;

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<j.a.d.a$b: j.a.d.a i()>();

        $z0 = staticinvoke <i.f.b.i: boolean a(java.lang.Object,java.lang.Object)>($r4, r0);

        if $z0 == 0 goto label2;

        return $r3;

     label2:
        return null;
    }

    public final int p()
    {
        int $i0;
        long $l1;
        j.a.d.a r0;

        r0 := @this: j.a.d.a;

        $l1 = r0.<j.a.d.a: long controlState>;

        $l1 = $l1 & 2097151L;

        $i0 = (int) $l1;

        return $i0;
    }

    public final j.a.d.a$b q()
    {
        j.a.b.A $r4;
        j.a.d.a r0;
        j.a.d.a$b[] $r3;
        long $l0, $l1, $l3;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        int $i2;
        j.a.d.a$b $r2;
        boolean $z0;

        r0 := @this: j.a.d.a;

     label1:
        $l0 = r0.<j.a.d.a: long parkedWorkersStack>;

        $l1 = 2097151L & $l0;

        $i2 = (int) $l1;

        $r3 = r0.<j.a.d.a: j.a.d.a$b[] l>;

        $r2 = $r3[$i2];

        if $r2 == null goto label3;

        $l1 = 2097152L + $l0;

        $l1 = $l1 & -2097152L;

        $i2 = virtualinvoke r0.<j.a.d.a: int a(j.a.d.a$b)>($r2);

        if $i2 >= 0 goto label2;

        goto label1;

     label2:
        $r1 = <j.a.d.a: java.util.concurrent.atomic.AtomicLongFieldUpdater a>;

        $l3 = (long) $i2;

        $l1 = $l3 | $l1;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        if $z0 == 0 goto label1;

        $r4 = <j.a.d.a: j.a.b.A h>;

        virtualinvoke $r2.<j.a.d.a$b: void a(java.lang.Object)>($r4);

        return $r2;

     label3:
        return null;
    }

    public final void r()
    {
        j.a.d.a r0;
        java.util.concurrent.Semaphore $r1;
        int $i0, $i3;
        long $l1, $l2;
        boolean $z0;

        r0 := @this: j.a.d.a;

        $r1 = r0.<j.a.d.a: java.util.concurrent.Semaphore k>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.Semaphore: int availablePermits()>();

        if $i0 != 0 goto label1;

        virtualinvoke r0.<j.a.d.a: boolean s()>();

        return;

     label1:
        $z0 = virtualinvoke r0.<j.a.d.a: boolean s()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $l1 = r0.<j.a.d.a: long controlState>;

        $l2 = 2097151L & $l1;

        $i0 = (int) $l2;

        $l1 = $l1 & 4398044413952L;

        $l1 = $l1 >> 21;

        $i3 = (int) $l1;

        $i0 = $i0 - $i3;

        $i3 = r0.<j.a.d.a: int n>;

        if $i0 >= $i3 goto label4;

        $i0 = virtualinvoke r0.<j.a.d.a: int n()>();

        if $i0 != 1 goto label3;

        $i3 = r0.<j.a.d.a: int n>;

        if $i3 <= 1 goto label3;

        virtualinvoke r0.<j.a.d.a: int n()>();

     label3:
        if $i0 <= 0 goto label4;

        return;

     label4:
        virtualinvoke r0.<j.a.d.a: boolean s()>();

        return;
    }

    public final boolean s()
    {
        j.a.d.a$b $r1;
        j.a.d.a r0;
        boolean $z0;

        r0 := @this: j.a.d.a;

     label1:
        $r1 = virtualinvoke r0.<j.a.d.a: j.a.d.a$b q()>();

        if $r1 == null goto label4;

        virtualinvoke $r1.<j.a.d.a$b: void j()>();

        $z0 = virtualinvoke $r1.<j.a.d.a$b: boolean l()>();

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r1);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $z0 = virtualinvoke $r1.<j.a.d.a$b: boolean n()>();

        if $z0 != 0 goto label3;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public java.lang.String toString()
    {
        j.a.d.a r0;
        j.a.d.a$b[] $r2;
        long $l9, $l10;
        j.a.d.e $r9;
        java.util.ArrayList $r1;
        j.a.d.o $r4;
        int[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        j.a.d.a$b $r3;
        j.a.d.a$c $r5;
        java.lang.String $r8;
        java.lang.StringBuilder $r7;

        r0 := @this: j.a.d.a;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<j.a.d.a: j.a.d.a$b[] l>;

        $i0 = lengthof $r2;

        $i1 = 0;

        $i2 = 0;

        $i3 = 0;

        $i4 = 0;

        $i5 = 0;

        $i6 = 0;

     label1:
        if $i1 >= $i0 goto label9;

        $r3 = $r2[$i1];

        if $r3 != null goto label2;

        goto label8;

     label2:
        $r4 = virtualinvoke $r3.<j.a.d.a$b: j.a.d.o g()>();

        $i7 = virtualinvoke $r4.<j.a.d.o: int c()>();

        $r5 = virtualinvoke $r3.<j.a.d.a$b: j.a.d.a$c getState()>();

        $r6 = <j.a.d.b: int[] a>;

        $i8 = virtualinvoke $r5.<java.lang.Enum: int ordinal()>();

        $i8 = $r6[$i8];

        if $i8 == 1 goto label7;

        if $i8 == 2 goto label6;

        if $i8 == 3 goto label5;

        if $i8 == 4 goto label4;

        if $i8 == 5 goto label3;

        goto label8;

     label3:
        $i6 = $i6 + 1;

        goto label8;

     label4:
        $i5 = $i5 + 1;

        if $i7 <= 0 goto label8;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i7);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("r");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        goto label8;

     label5:
        $i2 = $i2 + 1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i7);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        goto label8;

     label6:
        $i3 = $i3 + 1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i7);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        goto label8;

     label7:
        $i4 = $i4 + 1;

     label8:
        $i1 = $i1 + 1;

        goto label1;

     label9:
        $l9 = r0.<j.a.d.a: long controlState>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<j.a.d.a: java.lang.String q>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r8 = staticinvoke <j.a.A: java.lang.String b(java.lang.Object)>(r0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pool Size {");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("core = ");

        $i0 = r0.<j.a.d.a: int n>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max = ");

        $i0 = r0.<j.a.d.a: int o>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Worker States {");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CPU = ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("blocking = ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parked = ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("retired = ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("terminated = ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("running workers queues = ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("global queue size = ");

        $r9 = r0.<j.a.d.a: j.a.d.e j>;

        $i2 = virtualinvoke $r9.<j.a.b.q: int b()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Control State Workers {");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("created = ");

        $l10 = 2097151L & $l9;

        $i2 = (int) $l10;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("blocking = ");

        $l9 = $l9 & 4398044413952L;

        $l9 = $l9 >> 21;

        $i2 = (int) $l9;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
