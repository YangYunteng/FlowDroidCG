public final class org.codehaus.jackson.map.deser.StdDeserializer$CharacterDeserializer extends org.codehaus.jackson.map.deser.StdDeserializer$PrimitiveOrWrapperDeserializer
{

    public void <init>(java.lang.Class, java.lang.Character)
    {
        org.codehaus.jackson.map.deser.StdDeserializer$CharacterDeserializer r0;
        java.lang.Class $r1;
        java.lang.Character $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer$CharacterDeserializer;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.Character;

        specialinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer$PrimitiveOrWrapperDeserializer: void <init>(java.lang.Class,java.lang.Object)>($r1, $r2);

        return;
    }

    public java.lang.Character deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        org.codehaus.jackson.JsonToken $r3, $r4;
        char $c1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.map.JsonMappingException $r8;
        java.lang.Character $r5;
        int $i0, $i2;
        org.codehaus.jackson.map.deser.StdDeserializer$CharacterDeserializer r0;
        java.lang.Class $r7;
        java.lang.String $r6;
        org.codehaus.jackson.JsonParser $r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer$CharacterDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 != $r4 goto label1;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        if $i0 < 0 goto label2;

        $i2 = 65535;

        if $i0 > $i2 goto label2;

        $c1 = (char) $i0;

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        return $r5;

     label1:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label2;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 1 goto label2;

        $c1 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        return $r5;

     label2:
        $r7 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r7);

        throw $r8;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext)
    {
        java.lang.Character $r2;
        org.codehaus.jackson.map.deser.StdDeserializer$CharacterDeserializer r0;
        org.codehaus.jackson.map.DeserializationContext $r1;
        org.codehaus.jackson.JsonParser $r3;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer$CharacterDeserializer;

        $r3 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer$CharacterDeserializer: java.lang.Character deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r3, $r1);

        return $r2;
    }
}
