public final class com.google.common.graph.Graphs extends java.lang.Object
{

    public void <init>()
    {
        com.google.common.graph.Graphs r0;

        r0 := @this: com.google.common.graph.Graphs;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean canTraverseWithoutReusingEdge(com.google.common.graph.Graph, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        com.google.common.graph.Graph $r2;
        boolean $z0;

        $r2 := @parameter0: com.google.common.graph.Graph;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        $z0 = interfaceinvoke $r2.<com.google.common.graph.Graph: boolean isDirected()>();

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r0);

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static int checkNonNegative(int)
    {
        int $i0;
        boolean $z0;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "Not true that %s is non-negative.", $i0);

        return $i0;
    }

    public static long checkNonNegative(long)
    {
        byte $b1;
        int $i2;
        long $l0;
        boolean $z0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "Not true that %s is non-negative.", $l0);

        return $l0;
    }

    public static int checkPositive(int)
    {
        int $i0;
        boolean $z0;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "Not true that %s is positive.", $i0);

        return $i0;
    }

    public static long checkPositive(long)
    {
        byte $b1;
        int $i2;
        long $l0;
        boolean $z0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long)>($z0, "Not true that %s is positive.", $l0);

        return $l0;
    }

    public static com.google.common.graph.MutableGraph copyOf(com.google.common.graph.Graph)
    {
        java.util.Iterator $r4;
        com.google.common.graph.MutableGraph $r3;
        java.util.Set $r2;
        com.google.common.graph.GraphBuilder $r1;
        com.google.common.graph.EndpointPair $r6;
        int $i0;
        java.lang.Object $r5, $r7;
        com.google.common.graph.Graph $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Graph;

        $r1 = staticinvoke <com.google.common.graph.GraphBuilder: com.google.common.graph.GraphBuilder 'from'(com.google.common.graph.Graph)>($r0);

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set nodes()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $r1 = virtualinvoke $r1.<com.google.common.graph.GraphBuilder: com.google.common.graph.GraphBuilder expectedNodeCount(int)>($i0);

        $r3 = virtualinvoke $r1.<com.google.common.graph.GraphBuilder: com.google.common.graph.MutableGraph build()>();

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set nodes()>();

        $r4 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r3.<com.google.common.graph.MutableGraph: boolean addNode(java.lang.Object)>($r5);

        goto label1;

     label2:
        $r2 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set edges()>();

        $r4 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.common.graph.EndpointPair) $r5;

        $r5 = virtualinvoke $r6.<com.google.common.graph.EndpointPair: java.lang.Object nodeU()>();

        $r7 = virtualinvoke $r6.<com.google.common.graph.EndpointPair: java.lang.Object nodeV()>();

        interfaceinvoke $r3.<com.google.common.graph.MutableGraph: boolean putEdge(java.lang.Object,java.lang.Object)>($r5, $r7);

        goto label3;

     label4:
        return $r3;
    }

    public static com.google.common.graph.MutableNetwork copyOf(com.google.common.graph.Network)
    {
        java.util.Iterator $r4;
        com.google.common.graph.NetworkBuilder $r1;
        java.util.Set $r2;
        com.google.common.graph.EndpointPair $r6;
        int $i0;
        com.google.common.graph.MutableNetwork $r3;
        java.lang.Object $r5, $r7, $r8;
        com.google.common.graph.Network $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Network;

        $r1 = staticinvoke <com.google.common.graph.NetworkBuilder: com.google.common.graph.NetworkBuilder 'from'(com.google.common.graph.Network)>($r0);

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set nodes()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $r1 = virtualinvoke $r1.<com.google.common.graph.NetworkBuilder: com.google.common.graph.NetworkBuilder expectedNodeCount(int)>($i0);

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set edges()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $r1 = virtualinvoke $r1.<com.google.common.graph.NetworkBuilder: com.google.common.graph.NetworkBuilder expectedEdgeCount(int)>($i0);

        $r3 = virtualinvoke $r1.<com.google.common.graph.NetworkBuilder: com.google.common.graph.MutableNetwork build()>();

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set nodes()>();

        $r4 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r3.<com.google.common.graph.MutableNetwork: boolean addNode(java.lang.Object)>($r5);

        goto label1;

     label2:
        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set edges()>();

        $r4 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke $r0.<com.google.common.graph.Network: com.google.common.graph.EndpointPair incidentNodes(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<com.google.common.graph.EndpointPair: java.lang.Object nodeU()>();

        $r8 = virtualinvoke $r6.<com.google.common.graph.EndpointPair: java.lang.Object nodeV()>();

        interfaceinvoke $r3.<com.google.common.graph.MutableNetwork: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r7, $r8, $r5);

        goto label3;

     label4:
        return $r3;
    }

    public static com.google.common.graph.MutableValueGraph copyOf(com.google.common.graph.ValueGraph)
    {
        java.util.Iterator $r4;
        java.util.Set $r2;
        com.google.common.graph.EndpointPair $r6;
        com.google.common.graph.ValueGraphBuilder $r1;
        com.google.common.graph.ValueGraph $r0;
        com.google.common.graph.MutableValueGraph $r3;
        int $i0;
        java.lang.Object $r5, $r7, $r8, $r9;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.ValueGraph;

        $r1 = staticinvoke <com.google.common.graph.ValueGraphBuilder: com.google.common.graph.ValueGraphBuilder 'from'(com.google.common.graph.ValueGraph)>($r0);

        $r2 = interfaceinvoke $r0.<com.google.common.graph.ValueGraph: java.util.Set nodes()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $r1 = virtualinvoke $r1.<com.google.common.graph.ValueGraphBuilder: com.google.common.graph.ValueGraphBuilder expectedNodeCount(int)>($i0);

        $r3 = virtualinvoke $r1.<com.google.common.graph.ValueGraphBuilder: com.google.common.graph.MutableValueGraph build()>();

        $r2 = interfaceinvoke $r0.<com.google.common.graph.ValueGraph: java.util.Set nodes()>();

        $r4 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r3.<com.google.common.graph.MutableValueGraph: boolean addNode(java.lang.Object)>($r5);

        goto label1;

     label2:
        $r2 = interfaceinvoke $r0.<com.google.common.graph.ValueGraph: java.util.Set edges()>();

        $r4 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.common.graph.EndpointPair) $r5;

        $r5 = virtualinvoke $r6.<com.google.common.graph.EndpointPair: java.lang.Object nodeU()>();

        $r7 = virtualinvoke $r6.<com.google.common.graph.EndpointPair: java.lang.Object nodeV()>();

        $r8 = virtualinvoke $r6.<com.google.common.graph.EndpointPair: java.lang.Object nodeU()>();

        $r9 = virtualinvoke $r6.<com.google.common.graph.EndpointPair: java.lang.Object nodeV()>();

        $r8 = interfaceinvoke $r0.<com.google.common.graph.ValueGraph: java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)>($r8, $r9, null);

        interfaceinvoke $r3.<com.google.common.graph.MutableValueGraph: java.lang.Object putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r7, $r8);

        goto label3;

     label4:
        return $r3;
    }

    public static boolean equivalent(com.google.common.graph.Graph, com.google.common.graph.Graph)
    {
        com.google.common.graph.Graph $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: com.google.common.graph.Graph;

        $r0 := @parameter1: com.google.common.graph.Graph;

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r0);

        return $z0;
    }

    public static boolean equivalent(com.google.common.graph.Network, com.google.common.graph.Network)
    {
        com.google.common.graph.Network $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: com.google.common.graph.Network;

        $r0 := @parameter1: com.google.common.graph.Network;

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r0);

        return $z0;
    }

    public static boolean equivalent(com.google.common.graph.ValueGraph, com.google.common.graph.ValueGraph)
    {
        com.google.common.graph.ValueGraph $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: com.google.common.graph.ValueGraph;

        $r0 := @parameter1: com.google.common.graph.ValueGraph;

        $z0 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r0);

        return $z0;
    }

    public static boolean hasCycle(com.google.common.graph.Graph)
    {
        java.util.Iterator $r3;
        java.util.Set $r1;
        java.util.HashMap $r2;
        int $i0, $i1;
        java.lang.Object $r4;
        com.google.common.graph.Graph $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Graph;

        $r1 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set edges()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke $r0.<com.google.common.graph.Graph: boolean isDirected()>();

        if $z0 != 0 goto label2;

        $r1 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set nodes()>();

        $i1 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 < $i1 goto label2;

        return 1;

     label2:
        $r1 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set nodes()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>($i0);

        $r1 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set nodes()>();

        $r3 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = staticinvoke <com.google.common.graph.Graphs: boolean subgraphHasCycle(com.google.common.graph.Graph,java.util.Map,java.lang.Object,java.lang.Object)>($r0, $r2, $r4, null);

        if $z0 == 0 goto label3;

        return 1;

     label4:
        return 0;
    }

    public static boolean hasCycle(com.google.common.graph.Network)
    {
        int $i0, $i1;
        java.util.Set $r1;
        com.google.common.graph.Network $r0;
        com.google.common.graph.Graph $r2;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Network;

        $z0 = interfaceinvoke $r0.<com.google.common.graph.Network: boolean isDirected()>();

        if $z0 != 0 goto label1;

        $z0 = interfaceinvoke $r0.<com.google.common.graph.Network: boolean allowsParallelEdges()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set edges()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: com.google.common.graph.Graph asGraph()>();

        $r1 = interfaceinvoke $r2.<com.google.common.graph.Graph: java.util.Set edges()>();

        $i1 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 <= $i1 goto label1;

        return 1;

     label1:
        $r2 = interfaceinvoke $r0.<com.google.common.graph.Network: com.google.common.graph.Graph asGraph()>();

        $z0 = staticinvoke <com.google.common.graph.Graphs: boolean hasCycle(com.google.common.graph.Graph)>($r2);

        return $z0;
    }

    public static com.google.common.graph.MutableGraph inducedSubgraph(com.google.common.graph.Graph, java.lang.Iterable)
    {
        java.util.Iterator $r5, $r8;
        java.util.Collection $r3;
        com.google.common.graph.MutableGraph $r4;
        java.util.Set $r7;
        java.lang.Iterable $r1;
        com.google.common.graph.GraphBuilder $r2;
        int $i0;
        java.lang.Object $r6, $r9;
        com.google.common.graph.Graph $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Graph;

        $r1 := @parameter1: java.lang.Iterable;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.graph.GraphBuilder: com.google.common.graph.GraphBuilder 'from'(com.google.common.graph.Graph)>($r0);

        $r3 = (java.util.Collection) $r1;

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        $r2 = virtualinvoke $r2.<com.google.common.graph.GraphBuilder: com.google.common.graph.GraphBuilder expectedNodeCount(int)>($i0);

        $r4 = virtualinvoke $r2.<com.google.common.graph.GraphBuilder: com.google.common.graph.MutableGraph build()>();

        goto label2;

     label1:
        $r2 = staticinvoke <com.google.common.graph.GraphBuilder: com.google.common.graph.GraphBuilder 'from'(com.google.common.graph.Graph)>($r0);

        $r4 = virtualinvoke $r2.<com.google.common.graph.GraphBuilder: com.google.common.graph.MutableGraph build()>();

     label2:
        $r5 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r4.<com.google.common.graph.MutableGraph: boolean addNode(java.lang.Object)>($r6);

        goto label3;

     label4:
        $r7 = interfaceinvoke $r4.<com.google.common.graph.Graph: java.util.Set nodes()>();

        $r5 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set successors(java.lang.Object)>($r6);

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r4.<com.google.common.graph.Graph: java.util.Set nodes()>();

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        if $z0 == 0 goto label6;

        interfaceinvoke $r4.<com.google.common.graph.MutableGraph: boolean putEdge(java.lang.Object,java.lang.Object)>($r6, $r9);

        goto label6;

     label7:
        return $r4;
    }

    public static com.google.common.graph.MutableNetwork inducedSubgraph(com.google.common.graph.Network, java.lang.Iterable)
    {
        java.util.Iterator $r5, $r8;
        com.google.common.graph.NetworkBuilder $r2;
        java.util.Collection $r3;
        java.util.Set $r7;
        java.lang.Iterable $r1;
        com.google.common.graph.EndpointPair $r10;
        int $i0;
        com.google.common.graph.MutableNetwork $r4;
        java.lang.Object $r6, $r9, $r11;
        com.google.common.graph.Network $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Network;

        $r1 := @parameter1: java.lang.Iterable;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.graph.NetworkBuilder: com.google.common.graph.NetworkBuilder 'from'(com.google.common.graph.Network)>($r0);

        $r3 = (java.util.Collection) $r1;

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        $r2 = virtualinvoke $r2.<com.google.common.graph.NetworkBuilder: com.google.common.graph.NetworkBuilder expectedNodeCount(int)>($i0);

        $r4 = virtualinvoke $r2.<com.google.common.graph.NetworkBuilder: com.google.common.graph.MutableNetwork build()>();

        goto label2;

     label1:
        $r2 = staticinvoke <com.google.common.graph.NetworkBuilder: com.google.common.graph.NetworkBuilder 'from'(com.google.common.graph.Network)>($r0);

        $r4 = virtualinvoke $r2.<com.google.common.graph.NetworkBuilder: com.google.common.graph.MutableNetwork build()>();

     label2:
        $r5 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r4.<com.google.common.graph.MutableNetwork: boolean addNode(java.lang.Object)>($r6);

        goto label3;

     label4:
        $r7 = interfaceinvoke $r4.<com.google.common.graph.Network: java.util.Set nodes()>();

        $r5 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r0.<com.google.common.graph.Network: java.util.Set outEdges(java.lang.Object)>($r6);

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = interfaceinvoke $r0.<com.google.common.graph.Network: com.google.common.graph.EndpointPair incidentNodes(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<com.google.common.graph.EndpointPair: java.lang.Object adjacentNode(java.lang.Object)>($r6);

        $r7 = interfaceinvoke $r4.<com.google.common.graph.Network: java.util.Set nodes()>();

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r11);

        if $z0 == 0 goto label6;

        interfaceinvoke $r4.<com.google.common.graph.MutableNetwork: boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r11, $r9);

        goto label6;

     label7:
        return $r4;
    }

    public static com.google.common.graph.MutableValueGraph inducedSubgraph(com.google.common.graph.ValueGraph, java.lang.Iterable)
    {
        java.util.Iterator $r5, $r8;
        java.util.Collection $r3;
        java.util.Set $r7;
        java.lang.Iterable $r1;
        com.google.common.graph.ValueGraphBuilder $r2;
        com.google.common.graph.ValueGraph $r0;
        com.google.common.graph.MutableValueGraph $r4;
        int $i0;
        java.lang.Object $r6, $r9, $r10;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.ValueGraph;

        $r1 := @parameter1: java.lang.Iterable;

        $z0 = $r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.graph.ValueGraphBuilder: com.google.common.graph.ValueGraphBuilder 'from'(com.google.common.graph.ValueGraph)>($r0);

        $r3 = (java.util.Collection) $r1;

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        $r2 = virtualinvoke $r2.<com.google.common.graph.ValueGraphBuilder: com.google.common.graph.ValueGraphBuilder expectedNodeCount(int)>($i0);

        $r4 = virtualinvoke $r2.<com.google.common.graph.ValueGraphBuilder: com.google.common.graph.MutableValueGraph build()>();

        goto label2;

     label1:
        $r2 = staticinvoke <com.google.common.graph.ValueGraphBuilder: com.google.common.graph.ValueGraphBuilder 'from'(com.google.common.graph.ValueGraph)>($r0);

        $r4 = virtualinvoke $r2.<com.google.common.graph.ValueGraphBuilder: com.google.common.graph.MutableValueGraph build()>();

     label2:
        $r5 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r4.<com.google.common.graph.MutableValueGraph: boolean addNode(java.lang.Object)>($r6);

        goto label3;

     label4:
        $r7 = interfaceinvoke $r4.<com.google.common.graph.ValueGraph: java.util.Set nodes()>();

        $r5 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r0.<com.google.common.graph.ValueGraph: java.util.Set successors(java.lang.Object)>($r6);

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r4.<com.google.common.graph.ValueGraph: java.util.Set nodes()>();

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        if $z0 == 0 goto label6;

        $r10 = interfaceinvoke $r0.<com.google.common.graph.ValueGraph: java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r9, null);

        interfaceinvoke $r4.<com.google.common.graph.MutableValueGraph: java.lang.Object putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r9, $r10);

        goto label6;

     label7:
        return $r4;
    }

    public static java.util.Set reachableNodes(com.google.common.graph.Graph, java.lang.Object)
    {
        java.util.Iterator $r5;
        java.util.Set $r2;
        java.lang.Object $r1;
        java.util.ArrayDeque $r4;
        com.google.common.graph.Graph $r0;
        java.util.LinkedHashSet $r3;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Graph;

        $r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set nodes()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Node %s is not an element of this graph.", $r1);

        $r3 = new java.util.LinkedHashSet;

        specialinvoke $r3.<java.util.LinkedHashSet: void <init>()>();

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>()>();

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r1);

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r1 = interfaceinvoke $r4.<java.util.Queue: java.lang.Object remove()>();

        $r2 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set successors(java.lang.Object)>($r1);

        $r5 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r1);

        goto label2;

     label3:
        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        return $r2;
    }

    public static boolean subgraphHasCycle(com.google.common.graph.Graph, java.util.Map, java.lang.Object, java.lang.Object)
    {
        java.util.Iterator $r8;
        java.util.Set $r7;
        com.google.common.graph.Graphs$NodeVisitState $r5, $r6;
        java.util.Map $r0;
        java.lang.Object $r1, $r2, $r4;
        com.google.common.graph.Graph $r3;
        boolean $z0;

        $r3 := @parameter0: com.google.common.graph.Graph;

        $r0 := @parameter1: java.util.Map;

        $r1 := @parameter2: java.lang.Object;

        $r2 := @parameter3: java.lang.Object;

        $r4 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (com.google.common.graph.Graphs$NodeVisitState) $r4;

        $r6 = <com.google.common.graph.Graphs$NodeVisitState: com.google.common.graph.Graphs$NodeVisitState COMPLETE>;

        if $r5 != $r6 goto label1;

        return 0;

     label1:
        $r6 = <com.google.common.graph.Graphs$NodeVisitState: com.google.common.graph.Graphs$NodeVisitState PENDING>;

        if $r5 != $r6 goto label2;

        return 1;

     label2:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

        $r7 = interfaceinvoke $r3.<com.google.common.graph.Graph: java.util.Set successors(java.lang.Object)>($r1);

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $z0 = staticinvoke <com.google.common.graph.Graphs: boolean canTraverseWithoutReusingEdge(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)>($r3, $r4, $r2);

        if $z0 == 0 goto label3;

        $z0 = staticinvoke <com.google.common.graph.Graphs: boolean subgraphHasCycle(com.google.common.graph.Graph,java.util.Map,java.lang.Object,java.lang.Object)>($r3, $r0, $r4, $r1);

        if $z0 == 0 goto label3;

        return 1;

     label4:
        $r5 = <com.google.common.graph.Graphs$NodeVisitState: com.google.common.graph.Graphs$NodeVisitState COMPLETE>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

        return 0;
    }

    public static com.google.common.graph.Graph transitiveClosure(com.google.common.graph.Graph)
    {
        java.util.Iterator $r4, $r6, $r10;
        com.google.common.graph.MutableGraph $r2;
        java.util.Set $r3;
        com.google.common.graph.GraphBuilder $r1;
        java.lang.Iterable $r9;
        java.util.HashSet $r8;
        int $i0, $i1;
        java.lang.Object $r5, $r7;
        com.google.common.graph.Graph $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Graph;

        $r1 = staticinvoke <com.google.common.graph.GraphBuilder: com.google.common.graph.GraphBuilder 'from'(com.google.common.graph.Graph)>($r0);

        $r1 = virtualinvoke $r1.<com.google.common.graph.GraphBuilder: com.google.common.graph.GraphBuilder allowsSelfLoops(boolean)>(1);

        $r2 = virtualinvoke $r1.<com.google.common.graph.GraphBuilder: com.google.common.graph.MutableGraph build()>();

        $z0 = interfaceinvoke $r0.<com.google.common.graph.Graph: boolean isDirected()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set nodes()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r3 = staticinvoke <com.google.common.graph.Graphs: java.util.Set reachableNodes(com.google.common.graph.Graph,java.lang.Object)>($r0, $r5);

        $r6 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r2.<com.google.common.graph.MutableGraph: boolean putEdge(java.lang.Object,java.lang.Object)>($r5, $r7);

        goto label2;

     label3:
        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        $r3 = interfaceinvoke $r0.<com.google.common.graph.Graph: java.util.Set nodes()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z0 != 0 goto label4;

        $r3 = staticinvoke <com.google.common.graph.Graphs: java.util.Set reachableNodes(com.google.common.graph.Graph,java.lang.Object)>($r0, $r5);

        interfaceinvoke $r8.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        $r6 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $i1 = 1;

     label5:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $i0 = $i1 + 1;

        $r9 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable limit(java.lang.Iterable,int)>($r3, $i1);

        $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r2.<com.google.common.graph.MutableGraph: boolean putEdge(java.lang.Object,java.lang.Object)>($r5, $r7);

        goto label6;

     label7:
        $i1 = $i0;

        goto label5;

     label8:
        return $r2;
    }

    public static com.google.common.graph.Graph transpose(com.google.common.graph.Graph)
    {
        com.google.common.graph.Graph $r0;
        com.google.common.graph.Graphs$TransposedGraph $r1;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.Graph;

        $z0 = interfaceinvoke $r0.<com.google.common.graph.Graph: boolean isDirected()>();

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        $z0 = $r0 instanceof com.google.common.graph.Graphs$TransposedGraph;

        if $z0 == 0 goto label2;

        $r1 = (com.google.common.graph.Graphs$TransposedGraph) $r0;

        $r0 = staticinvoke <com.google.common.graph.Graphs$TransposedGraph: com.google.common.graph.Graph access$000(com.google.common.graph.Graphs$TransposedGraph)>($r1);

        return $r0;

     label2:
        $r1 = new com.google.common.graph.Graphs$TransposedGraph;

        specialinvoke $r1.<com.google.common.graph.Graphs$TransposedGraph: void <init>(com.google.common.graph.Graph)>($r0);

        return $r1;
    }

    public static com.google.common.graph.Network transpose(com.google.common.graph.Network)
    {
        com.google.common.graph.Network $r0;
        boolean $z0;
        com.google.common.graph.Graphs$TransposedNetwork $r1;

        $r0 := @parameter0: com.google.common.graph.Network;

        $z0 = interfaceinvoke $r0.<com.google.common.graph.Network: boolean isDirected()>();

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        $z0 = $r0 instanceof com.google.common.graph.Graphs$TransposedNetwork;

        if $z0 == 0 goto label2;

        $r1 = (com.google.common.graph.Graphs$TransposedNetwork) $r0;

        $r0 = staticinvoke <com.google.common.graph.Graphs$TransposedNetwork: com.google.common.graph.Network access$200(com.google.common.graph.Graphs$TransposedNetwork)>($r1);

        return $r0;

     label2:
        $r1 = new com.google.common.graph.Graphs$TransposedNetwork;

        specialinvoke $r1.<com.google.common.graph.Graphs$TransposedNetwork: void <init>(com.google.common.graph.Network)>($r0);

        return $r1;
    }

    public static com.google.common.graph.ValueGraph transpose(com.google.common.graph.ValueGraph)
    {
        com.google.common.graph.ValueGraph $r0;
        com.google.common.graph.Graphs$TransposedValueGraph $r1;
        boolean $z0;

        $r0 := @parameter0: com.google.common.graph.ValueGraph;

        $z0 = interfaceinvoke $r0.<com.google.common.graph.ValueGraph: boolean isDirected()>();

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        $z0 = $r0 instanceof com.google.common.graph.Graphs$TransposedValueGraph;

        if $z0 == 0 goto label2;

        $r1 = (com.google.common.graph.Graphs$TransposedValueGraph) $r0;

        $r0 = staticinvoke <com.google.common.graph.Graphs$TransposedValueGraph: com.google.common.graph.ValueGraph access$100(com.google.common.graph.Graphs$TransposedValueGraph)>($r1);

        return $r0;

     label2:
        $r1 = new com.google.common.graph.Graphs$TransposedValueGraph;

        specialinvoke $r1.<com.google.common.graph.Graphs$TransposedValueGraph: void <init>(com.google.common.graph.ValueGraph)>($r0);

        return $r1;
    }
}
