public class com.google.firebase.abt.FirebaseABTesting extends java.lang.Object
{
    public static final java.lang.String ABT_PREFERENCES;
    public static final java.lang.String ORIGIN_LAST_KNOWN_START_TIME_KEY_FORMAT;
    public final com.google.firebase.analytics.connector.AnalyticsConnector analyticsConnector;
    public java.lang.Integer maxUserProperties;
    public final java.lang.String originService;

    public void <init>(android.content.Context, com.google.firebase.analytics.connector.AnalyticsConnector, java.lang.String)
    {
        android.content.Context $r3;
        com.google.firebase.abt.FirebaseABTesting r0;
        com.google.firebase.analytics.connector.AnalyticsConnector $r1;
        java.lang.String $r2;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r3 := @parameter0: android.content.Context;

        $r1 := @parameter1: com.google.firebase.analytics.connector.AnalyticsConnector;

        $r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.firebase.abt.FirebaseABTesting: com.google.firebase.analytics.connector.AnalyticsConnector analyticsConnector> = $r1;

        r0.<com.google.firebase.abt.FirebaseABTesting: java.lang.String originService> = $r2;

        r0.<com.google.firebase.abt.FirebaseABTesting: java.lang.Integer maxUserProperties> = null;

        return;
    }

    private void addExperimentToAnalytics(com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty)
    {
        com.google.firebase.analytics.connector.AnalyticsConnector $r2;
        com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty $r1;
        com.google.firebase.abt.FirebaseABTesting r0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r1 := @parameter0: com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty;

        $r2 = r0.<com.google.firebase.abt.FirebaseABTesting: com.google.firebase.analytics.connector.AnalyticsConnector analyticsConnector>;

        interfaceinvoke $r2.<com.google.firebase.analytics.connector.AnalyticsConnector: void setConditionalUserProperty(com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty)>($r1);

        return;
    }

    private void addExperiments(java.util.List)
    {
        java.util.Iterator $r4;
        com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty $r7;
        com.google.firebase.abt.AbtExperimentInfo $r6;
        com.google.firebase.abt.FirebaseABTesting r0;
        java.util.List $r2, $r3;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String $r8;
        java.util.ArrayDeque $r1;
        boolean $z0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r2 := @parameter0: java.util.List;

        $r1 = new java.util.ArrayDeque;

        $r3 = specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: java.util.List getAllExperimentsInAnalytics()>();

        specialinvoke $r1.<java.util.ArrayDeque: void <init>(java.util.Collection)>($r3);

        $i0 = specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: int getMaxUserPropertiesInAnalytics()>();

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.firebase.abt.AbtExperimentInfo) $r5;

     label2:
        $i1 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        if $i1 < $i0 goto label3;

        $r5 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object pollFirst()>();

        $r7 = (com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty) $r5;

        $r8 = $r7.<com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty: java.lang.String name>;

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void removeExperimentFromAnalytics(java.lang.String)>($r8);

        goto label2;

     label3:
        $r8 = r0.<com.google.firebase.abt.FirebaseABTesting: java.lang.String originService>;

        $r7 = virtualinvoke $r6.<com.google.firebase.abt.AbtExperimentInfo: com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty toConditionalUserProperty(java.lang.String)>($r8);

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void addExperimentToAnalytics(com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty)>($r7);

        interfaceinvoke $r1.<java.util.Deque: boolean offer(java.lang.Object)>($r7);

        goto label1;

     label4:
        return;
    }

    public static java.util.List convertMapsToExperimentInfos(java.util.List)
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        com.google.firebase.abt.AbtExperimentInfo $r5;
        java.util.Map $r4;
        java.lang.Object $r3;
        java.util.ArrayList $r0;
        boolean $z0;

        $r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.Map) $r3;

        $r5 = staticinvoke <com.google.firebase.abt.AbtExperimentInfo: com.google.firebase.abt.AbtExperimentInfo fromMap(java.util.Map)>($r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    private java.util.List getAllExperimentsInAnalytics()
    {
        java.util.List $r2;
        com.google.firebase.abt.FirebaseABTesting r0;
        com.google.firebase.analytics.connector.AnalyticsConnector $r3;
        java.lang.String $r1;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r3 = r0.<com.google.firebase.abt.FirebaseABTesting: com.google.firebase.analytics.connector.AnalyticsConnector analyticsConnector>;

        $r1 = r0.<com.google.firebase.abt.FirebaseABTesting: java.lang.String originService>;

        $r2 = interfaceinvoke $r3.<com.google.firebase.analytics.connector.AnalyticsConnector: java.util.List getConditionalUserProperties(java.lang.String,java.lang.String)>($r1, "");

        return $r2;
    }

    private java.util.ArrayList getExperimentsToAdd(java.util.List, java.util.Set)
    {
        java.util.Iterator $r4;
        com.google.firebase.abt.AbtExperimentInfo $r6;
        com.google.firebase.abt.FirebaseABTesting r0;
        java.util.Set $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;
        java.lang.Object $r5;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r3 := @parameter0: java.util.List;

        $r1 := @parameter1: java.util.Set;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.firebase.abt.AbtExperimentInfo) $r5;

        $r7 = virtualinvoke $r6.<com.google.firebase.abt.AbtExperimentInfo: java.lang.String getExperimentId()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 != 0 goto label1;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r2;
    }

    private java.util.ArrayList getExperimentsToRemove(java.util.List, java.util.Set)
    {
        java.util.Iterator $r4;
        com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty $r6;
        com.google.firebase.abt.FirebaseABTesting r0;
        java.util.Set $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;
        java.lang.Object $r5;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r3 := @parameter0: java.util.List;

        $r1 := @parameter1: java.util.Set;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty) $r5;

        $r7 = $r6.<com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty: java.lang.String name>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 != 0 goto label1;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r2;
    }

    private int getMaxUserPropertiesInAnalytics()
    {
        com.google.firebase.abt.FirebaseABTesting r0;
        com.google.firebase.analytics.connector.AnalyticsConnector $r3;
        int $i0;
        java.lang.String $r1;
        java.lang.Integer $r2;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r2 = r0.<com.google.firebase.abt.FirebaseABTesting: java.lang.Integer maxUserProperties>;

        if $r2 != null goto label1;

        $r3 = r0.<com.google.firebase.abt.FirebaseABTesting: com.google.firebase.analytics.connector.AnalyticsConnector analyticsConnector>;

        $r1 = r0.<com.google.firebase.abt.FirebaseABTesting: java.lang.String originService>;

        $i0 = interfaceinvoke $r3.<com.google.firebase.analytics.connector.AnalyticsConnector: int getMaxUserProperties(java.lang.String)>($r1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r0.<com.google.firebase.abt.FirebaseABTesting: java.lang.Integer maxUserProperties> = $r2;

     label1:
        $r2 = r0.<com.google.firebase.abt.FirebaseABTesting: java.lang.Integer maxUserProperties>;

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    private void removeExperimentFromAnalytics(java.lang.String)
    {
        com.google.firebase.analytics.connector.AnalyticsConnector $r2;
        java.lang.String $r1;
        com.google.firebase.abt.FirebaseABTesting r0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.google.firebase.abt.FirebaseABTesting: com.google.firebase.analytics.connector.AnalyticsConnector analyticsConnector>;

        interfaceinvoke $r2.<com.google.firebase.analytics.connector.AnalyticsConnector: void clearConditionalUserProperty(java.lang.String,java.lang.String,android.os.Bundle)>($r1, null, null);

        return;
    }

    private void removeExperiments(java.util.Collection)
    {
        java.util.Iterator $r2;
        com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty $r4;
        com.google.firebase.abt.FirebaseABTesting r0;
        java.util.Collection $r1;
        java.lang.Object $r3;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r1 := @parameter0: java.util.Collection;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty) $r3;

        $r5 = $r4.<com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty: java.lang.String name>;

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void removeExperimentFromAnalytics(java.lang.String)>($r5);

        goto label1;

     label2:
        return;
    }

    private void replaceAllExperimentsWith(java.util.List)
    {
        java.util.Iterator $r3;
        com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty $r9;
        com.google.firebase.abt.AbtExperimentInfo $r5;
        com.google.firebase.abt.FirebaseABTesting r0;
        java.util.ArrayList $r10;
        java.util.HashSet $r2, $r8;
        java.util.List $r1, $r7;
        java.lang.Object $r4;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r1 := @parameter0: java.util.List;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void removeAllExperiments()>();

        return;

     label1:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.firebase.abt.AbtExperimentInfo) $r4;

        $r6 = virtualinvoke $r5.<com.google.firebase.abt.AbtExperimentInfo: java.lang.String getExperimentId()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label2;

     label3:
        $r7 = specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: java.util.List getAllExperimentsInAnalytics()>();

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        $r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty) $r4;

        $r6 = $r9.<com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty: java.lang.String name>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label4;

     label5:
        $r10 = specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: java.util.ArrayList getExperimentsToRemove(java.util.List,java.util.Set)>($r7, $r2);

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void removeExperiments(java.util.Collection)>($r10);

        $r10 = specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: java.util.ArrayList getExperimentsToAdd(java.util.List,java.util.Set)>($r1, $r8);

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void addExperiments(java.util.List)>($r10);

        return;
    }

    private void throwAbtExceptionIfAnalyticsIsNull()
    {
        com.google.firebase.analytics.connector.AnalyticsConnector $r1;
        com.google.firebase.abt.AbtException $r2;
        com.google.firebase.abt.FirebaseABTesting r0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r1 = r0.<com.google.firebase.abt.FirebaseABTesting: com.google.firebase.analytics.connector.AnalyticsConnector analyticsConnector>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new com.google.firebase.abt.AbtException;

        specialinvoke $r2.<com.google.firebase.abt.AbtException: void <init>(java.lang.String)>("The Analytics SDK is not available. Please check that the Analytics SDK is included in your app dependencies.");

        throw $r2;
    }

    public java.util.List getAllExperiments()
    {
        java.util.Iterator $r3;
        com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty $r5;
        com.google.firebase.abt.AbtExperimentInfo $r6;
        com.google.firebase.abt.FirebaseABTesting r0;
        java.util.ArrayList $r1;
        java.util.List $r2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void throwAbtExceptionIfAnalyticsIsNull()>();

        $r2 = specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: java.util.List getAllExperimentsInAnalytics()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty) $r4;

        $r6 = staticinvoke <com.google.firebase.abt.AbtExperimentInfo: com.google.firebase.abt.AbtExperimentInfo fromConditionalUserProperty(com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty)>($r5);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r1;
    }

    public void removeAllExperiments()
    {
        java.util.List $r1;
        com.google.firebase.abt.FirebaseABTesting r0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void throwAbtExceptionIfAnalyticsIsNull()>();

        $r1 = specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: java.util.List getAllExperimentsInAnalytics()>();

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void removeExperiments(java.util.Collection)>($r1);

        return;
    }

    public void replaceAllExperiments(java.util.List)
    {
        java.util.List $r1;
        java.lang.IllegalArgumentException $r2;
        com.google.firebase.abt.FirebaseABTesting r0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r1 := @parameter0: java.util.List;

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void throwAbtExceptionIfAnalyticsIsNull()>();

        if $r1 == null goto label1;

        $r1 = staticinvoke <com.google.firebase.abt.FirebaseABTesting: java.util.List convertMapsToExperimentInfos(java.util.List)>($r1);

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void replaceAllExperimentsWith(java.util.List)>($r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The replacementExperiments list is null.");

        throw $r2;
    }

    public void reportActiveExperiment(com.google.firebase.abt.AbtExperimentInfo)
    {
        com.google.firebase.abt.AbtExperimentInfo $r2;
        com.google.firebase.abt.FirebaseABTesting r0;
        java.util.Map $r3;
        java.util.ArrayList $r1;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r2 := @parameter0: com.google.firebase.abt.AbtExperimentInfo;

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void throwAbtExceptionIfAnalyticsIsNull()>();

        staticinvoke <com.google.firebase.abt.AbtExperimentInfo: void validateAbtExperimentInfo(com.google.firebase.abt.AbtExperimentInfo)>($r2);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke $r2.<com.google.firebase.abt.AbtExperimentInfo: java.util.Map toStringMap()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>("triggerEvent");

        $r2 = staticinvoke <com.google.firebase.abt.AbtExperimentInfo: com.google.firebase.abt.AbtExperimentInfo fromMap(java.util.Map)>($r3);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void addExperiments(java.util.List)>($r1);

        return;
    }

    public void validateRunningExperiments(java.util.List)
    {
        java.util.Iterator $r3;
        com.google.firebase.abt.AbtExperimentInfo $r5;
        com.google.firebase.abt.FirebaseABTesting r0;
        java.util.ArrayList $r7;
        java.util.HashSet $r1;
        java.util.List $r2;
        java.lang.Object $r4;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: com.google.firebase.abt.FirebaseABTesting;

        $r2 := @parameter0: java.util.List;

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void throwAbtExceptionIfAnalyticsIsNull()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.firebase.abt.AbtExperimentInfo) $r4;

        $r6 = virtualinvoke $r5.<com.google.firebase.abt.AbtExperimentInfo: java.lang.String getExperimentId()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        $r2 = specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: java.util.List getAllExperimentsInAnalytics()>();

        $r7 = specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: java.util.ArrayList getExperimentsToRemove(java.util.List,java.util.Set)>($r2, $r1);

        specialinvoke r0.<com.google.firebase.abt.FirebaseABTesting: void removeExperiments(java.util.Collection)>($r7);

        return;
    }

    public static void <clinit>()
    {
        <com.google.firebase.abt.FirebaseABTesting: java.lang.String ORIGIN_LAST_KNOWN_START_TIME_KEY_FORMAT> = "%s_lastKnownExperimentStartTime";

        <com.google.firebase.abt.FirebaseABTesting: java.lang.String ABT_PREFERENCES> = "com.google.firebase.abt";

        return;
    }
}
