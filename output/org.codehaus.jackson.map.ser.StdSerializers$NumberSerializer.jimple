public final class org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer extends org.codehaus.jackson.map.ser.ScalarSerializerBase
{
    public static final org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer instance;

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer instance> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ScalarSerializerBase: void <init>(java.lang.Class)>(class "Ljava/lang/Number;");

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer r0;
        java.lang.reflect.Type $r3;
        org.codehaus.jackson.map.SerializerProvider $r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("number", 1);

        return $r1;
    }

    public void serialize(java.lang.Number, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        java.lang.Float $r7;
        java.lang.Double $r6;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer r0;
        java.math.BigDecimal $r4;
        org.codehaus.jackson.JsonGenerator $r1;
        float $f0;
        java.math.BigInteger $r5;
        java.lang.String $r8;
        java.lang.Number $r2;
        boolean $z0;
        double $d0;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        $r2 := @parameter0: java.lang.Number;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $z0 = $r2 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label1;

        $r4 = (java.math.BigDecimal) $r2;

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(java.math.BigDecimal)>($r4);

        return;

     label1:
        $z0 = $r2 instanceof java.math.BigInteger;

        if $z0 == 0 goto label2;

        $r5 = (java.math.BigInteger) $r2;

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(java.math.BigInteger)>($r5);

        return;

     label2:
        $z0 = $r2 instanceof java.lang.Double;

        if $z0 == 0 goto label3;

        $r6 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(double)>($d0);

        return;

     label3:
        $z0 = $r2 instanceof java.lang.Float;

        if $z0 == 0 goto label4;

        $r7 = (java.lang.Float) $r2;

        $f0 = virtualinvoke $r7.<java.lang.Float: float floatValue()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(float)>($f0);

        return;

     label4:
        $r8 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(java.lang.String)>($r8);

        return;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider)
    {
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.lang.Number) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: void serialize(java.lang.Number,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }
}
