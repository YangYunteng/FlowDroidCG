public class com.google.android.material.chip.Chip extends androidx.appcompat.widget.AppCompatCheckBox implements com.google.android.material.chip.ChipDrawable$Delegate, com.google.android.material.shape.Shapeable
{
    public static final java.lang.String BUTTON_ACCESSIBILITY_CLASS_NAME;
    public static final int[] CHECKABLE_STATE_SET;
    public static final int CHIP_BODY_VIRTUAL_ID;
    public static final int CLOSE_ICON_VIRTUAL_ID;
    public static final java.lang.String COMPOUND_BUTTON_ACCESSIBILITY_CLASS_NAME;
    public static final int DEF_STYLE_RES;
    public static final android.graphics.Rect EMPTY_BOUNDS;
    public static final java.lang.String GENERIC_VIEW_ACCESSIBILITY_CLASS_NAME;
    public static final int MIN_TOUCH_TARGET_DP;
    public static final java.lang.String NAMESPACE_ANDROID;
    public static final int[] SELECTED_STATE;
    public static final java.lang.String TAG;
    public com.google.android.material.chip.ChipDrawable chipDrawable;
    public boolean closeIconFocused;
    public boolean closeIconHovered;
    public boolean closeIconPressed;
    public boolean deferredCheckedValue;
    public boolean ensureMinTouchTargetSize;
    public final com.google.android.material.resources.TextAppearanceFontCallback fontCallback;
    public android.graphics.drawable.InsetDrawable insetBackgroundDrawable;
    public int lastLayoutDirection;
    public int minTouchTargetSize;
    public android.widget.CompoundButton$OnCheckedChangeListener onCheckedChangeListenerInternal;
    public android.view.View$OnClickListener onCloseIconClickListener;
    public final android.graphics.Rect rect;
    public final android.graphics.RectF rectF;
    public android.graphics.drawable.RippleDrawable ripple;
    public final com.google.android.material.chip.Chip$ChipTouchHelper touchHelper;

    static void <clinit>()
    {
        int $i0;
        android.graphics.Rect $r0;
        int[] $r1;

        <com.google.android.material.chip.Chip: java.lang.String TAG> = "Chip";

        <com.google.android.material.chip.Chip: java.lang.String NAMESPACE_ANDROID> = "http://schemas.android.com/apk/res/android";

        <com.google.android.material.chip.Chip: int MIN_TOUCH_TARGET_DP> = 48;

        <com.google.android.material.chip.Chip: java.lang.String GENERIC_VIEW_ACCESSIBILITY_CLASS_NAME> = "android.view.View";

        <com.google.android.material.chip.Chip: java.lang.String COMPOUND_BUTTON_ACCESSIBILITY_CLASS_NAME> = "android.widget.CompoundButton";

        <com.google.android.material.chip.Chip: int CLOSE_ICON_VIRTUAL_ID> = 1;

        <com.google.android.material.chip.Chip: int CHIP_BODY_VIRTUAL_ID> = 0;

        <com.google.android.material.chip.Chip: java.lang.String BUTTON_ACCESSIBILITY_CLASS_NAME> = "android.widget.Button";

        $i0 = <com.google.android.material.R$style: int Widget_MaterialComponents_Chip_Action>;

        <com.google.android.material.chip.Chip: int DEF_STYLE_RES> = $i0;

        $r0 = new android.graphics.Rect;

        specialinvoke $r0.<android.graphics.Rect: void <init>()>();

        <com.google.android.material.chip.Chip: android.graphics.Rect EMPTY_BOUNDS> = $r0;

        $r1 = newarray (int)[1];

        $r1[0] = 16842913;

        <com.google.android.material.chip.Chip: int[] SELECTED_STATE> = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 16842911;

        <com.google.android.material.chip.Chip: int[] CHECKABLE_STATE_SET> = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.google.android.material.chip.Chip r0;
        android.content.Context $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.google.android.material.chip.Chip: void <init>(android.content.Context,android.util.AttributeSet)>($r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.google.android.material.chip.Chip r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 = <com.google.android.material.R$attr: int chipStyle>;

        specialinvoke r0.<com.google.android.material.chip.Chip: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        com.google.android.material.chip.Chip r0;
        android.content.Context $r3;
        android.graphics.Rect $r5;
        com.google.android.material.chip.Chip$ChipTouchHelper $r11;
        android.content.res.TypedArray $r9;
        android.content.res.ColorStateList $r10;
        android.util.AttributeSet $r4;
        com.google.android.material.chip.Chip$1 $r7;
        int[] $r1, $r2;
        int $i0, $i1;
        boolean $z0;
        android.graphics.RectF $r6;
        java.lang.CharSequence $r12;
        android.text.TextUtils$TruncateAt $r13;
        com.google.android.material.chip.ChipDrawable $r8;
        float $f0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r3 := @parameter0: android.content.Context;

        $r4 := @parameter1: android.util.AttributeSet;

        $i1 := @parameter2: int;

        $i0 = <com.google.android.material.chip.Chip: int DEF_STYLE_RES>;

        $r3 = staticinvoke <com.google.android.material.theme.overlay.MaterialThemeOverlay: android.content.Context wrap(android.content.Context,android.util.AttributeSet,int,int)>($r3, $r4, $i1, $i0);

        specialinvoke r0.<androidx.appcompat.widget.AppCompatCheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)>($r3, $r4, $i1);

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<com.google.android.material.chip.Chip: android.graphics.Rect rect> = $r5;

        $r6 = new android.graphics.RectF;

        specialinvoke $r6.<android.graphics.RectF: void <init>()>();

        r0.<com.google.android.material.chip.Chip: android.graphics.RectF rectF> = $r6;

        $r7 = new com.google.android.material.chip.Chip$1;

        specialinvoke $r7.<com.google.android.material.chip.Chip$1: void <init>(com.google.android.material.chip.Chip)>(r0);

        r0.<com.google.android.material.chip.Chip: com.google.android.material.resources.TextAppearanceFontCallback fontCallback> = $r7;

        $r3 = virtualinvoke r0.<android.widget.CheckBox: android.content.Context getContext()>();

        specialinvoke r0.<com.google.android.material.chip.Chip: void validateAttributes(android.util.AttributeSet)>($r4);

        $i0 = <com.google.android.material.chip.Chip: int DEF_STYLE_RES>;

        $r8 = staticinvoke <com.google.android.material.chip.ChipDrawable: com.google.android.material.chip.ChipDrawable createFromAttributes(android.content.Context,android.util.AttributeSet,int,int)>($r3, $r4, $i1, $i0);

        specialinvoke r0.<com.google.android.material.chip.Chip: void initMinTouchTarget(android.content.Context,android.util.AttributeSet,int)>($r3, $r4, $i1);

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setChipDrawable(com.google.android.material.chip.ChipDrawable)>($r8);

        $f0 = staticinvoke <b.i.i.y: float l(android.view.View)>(r0);

        virtualinvoke $r8.<com.google.android.material.shape.MaterialShapeDrawable: void setElevation(float)>($f0);

        $r1 = <com.google.android.material.R$styleable: int[] Chip>;

        $i0 = <com.google.android.material.chip.Chip: int DEF_STYLE_RES>;

        $r2 = newarray (int)[0];

        $r9 = staticinvoke <com.google.android.material.internal.ThemeEnforcement: android.content.res.TypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int,int[])>($r3, $r4, $r1, $i1, $i0, $r2);

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 >= 23 goto label1;

        $i1 = <com.google.android.material.R$styleable: int Chip_android_textColor>;

        $r10 = staticinvoke <com.google.android.material.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r3, $r9, $i1);

        virtualinvoke r0.<android.widget.CheckBox: void setTextColor(android.content.res.ColorStateList)>($r10);

     label1:
        $i1 = <com.google.android.material.R$styleable: int Chip_shapeAppearance>;

        $z0 = virtualinvoke $r9.<android.content.res.TypedArray: boolean hasValue(int)>($i1);

        virtualinvoke $r9.<android.content.res.TypedArray: void recycle()>();

        $r11 = new com.google.android.material.chip.Chip$ChipTouchHelper;

        specialinvoke $r11.<com.google.android.material.chip.Chip$ChipTouchHelper: void <init>(com.google.android.material.chip.Chip,com.google.android.material.chip.Chip)>(r0, r0);

        r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.Chip$ChipTouchHelper touchHelper> = $r11;

        specialinvoke r0.<com.google.android.material.chip.Chip: void updateAccessibilityDelegate()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.google.android.material.chip.Chip: void initOutlineProvider()>();

     label2:
        $z0 = r0.<com.google.android.material.chip.Chip: boolean deferredCheckedValue>;

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setChecked(boolean)>($z0);

        $r12 = virtualinvoke $r8.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence getText()>();

        virtualinvoke r0.<android.widget.CheckBox: void setText(java.lang.CharSequence)>($r12);

        $r13 = virtualinvoke $r8.<com.google.android.material.chip.ChipDrawable: android.text.TextUtils$TruncateAt getEllipsize()>();

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setEllipsize(android.text.TextUtils$TruncateAt)>($r13);

        specialinvoke r0.<com.google.android.material.chip.Chip: void updateTextPaintDrawState()>();

        $r8 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $z0 = virtualinvoke $r8.<com.google.android.material.chip.ChipDrawable: boolean shouldDrawText()>();

        if $z0 != 0 goto label3;

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setLines(int)>(1);

        virtualinvoke r0.<android.widget.CheckBox: void setHorizontallyScrolling(boolean)>(1);

     label3:
        virtualinvoke r0.<com.google.android.material.chip.Chip: void setGravity(int)>(8388627);

        specialinvoke r0.<com.google.android.material.chip.Chip: void updatePaddingInternal()>();

        $z0 = virtualinvoke r0.<com.google.android.material.chip.Chip: boolean shouldEnsureMinTouchTargetSize()>();

        if $z0 == 0 goto label4;

        $i1 = r0.<com.google.android.material.chip.Chip: int minTouchTargetSize>;

        virtualinvoke r0.<android.widget.CheckBox: void setMinHeight(int)>($i1);

     label4:
        $i1 = staticinvoke <b.i.i.y: int p(android.view.View)>(r0);

        r0.<com.google.android.material.chip.Chip: int lastLayoutDirection> = $i1;

        return;
    }

    public static com.google.android.material.chip.ChipDrawable access$000(com.google.android.material.chip.Chip)
    {
        com.google.android.material.chip.Chip $r0;
        com.google.android.material.chip.ChipDrawable r1;

        $r0 := @parameter0: com.google.android.material.chip.Chip;

        r1 = $r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        return r1;
    }

    public static boolean access$100(com.google.android.material.chip.Chip)
    {
        com.google.android.material.chip.Chip $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.android.material.chip.Chip;

        $z0 = specialinvoke $r0.<com.google.android.material.chip.Chip: boolean hasCloseIcon()>();

        return $z0;
    }

    public static android.graphics.RectF access$200(com.google.android.material.chip.Chip)
    {
        android.graphics.RectF $r0;
        com.google.android.material.chip.Chip $r1;

        $r1 := @parameter0: com.google.android.material.chip.Chip;

        $r0 = specialinvoke $r1.<com.google.android.material.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()>();

        return $r0;
    }

    public static android.view.View$OnClickListener access$300(com.google.android.material.chip.Chip)
    {
        com.google.android.material.chip.Chip $r0;
        android.view.View$OnClickListener r1;

        $r0 := @parameter0: com.google.android.material.chip.Chip;

        r1 = $r0.<com.google.android.material.chip.Chip: android.view.View$OnClickListener onCloseIconClickListener>;

        return r1;
    }

    public static boolean access$402(com.google.android.material.chip.Chip, boolean)
    {
        com.google.android.material.chip.Chip $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.android.material.chip.Chip;

        $z0 := @parameter1: boolean;

        $r0.<com.google.android.material.chip.Chip: boolean closeIconFocused> = $z0;

        return $z0;
    }

    public static android.graphics.Rect access$500(com.google.android.material.chip.Chip)
    {
        android.graphics.Rect $r0;
        com.google.android.material.chip.Chip $r1;

        $r1 := @parameter0: com.google.android.material.chip.Chip;

        $r0 = specialinvoke $r1.<com.google.android.material.chip.Chip: android.graphics.Rect getCloseIconTouchBoundsInt()>();

        return $r0;
    }

    public static android.graphics.Rect access$600()
    {
        android.graphics.Rect r0;

        r0 = <com.google.android.material.chip.Chip: android.graphics.Rect EMPTY_BOUNDS>;

        return r0;
    }

    private void applyChipDrawable(com.google.android.material.chip.ChipDrawable)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: com.google.android.material.chip.ChipDrawable;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setDelegate(com.google.android.material.chip.ChipDrawable$Delegate)>(r0);

        return;
    }

    private int[] createCloseIconDrawableState()
    {
        com.google.android.material.chip.Chip r0;
        int[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 = virtualinvoke r0.<android.widget.CheckBox: boolean isEnabled()>();

        $i0 = 0;

        if $z0 == 0 goto label01;

        $i1 = 1;

        goto label02;

     label01:
        $i1 = 0;

     label02:
        $z0 = r0.<com.google.android.material.chip.Chip: boolean closeIconFocused>;

        if $z0 == 0 goto label03;

        $i1 = $i1 + 1;

     label03:
        $z0 = r0.<com.google.android.material.chip.Chip: boolean closeIconHovered>;

        if $z0 == 0 goto label04;

        $i1 = $i1 + 1;

     label04:
        $z0 = r0.<com.google.android.material.chip.Chip: boolean closeIconPressed>;

        if $z0 == 0 goto label05;

        $i1 = $i1 + 1;

     label05:
        $z0 = virtualinvoke r0.<android.widget.CheckBox: boolean isChecked()>();

        if $z0 == 0 goto label06;

        $i1 = $i1 + 1;

     label06:
        $r1 = newarray (int)[$i1];

        $z0 = virtualinvoke r0.<android.widget.CheckBox: boolean isEnabled()>();

        if $z0 == 0 goto label07;

        $r1[0] = 16842910;

        $i0 = 1;

     label07:
        $z0 = r0.<com.google.android.material.chip.Chip: boolean closeIconFocused>;

        if $z0 == 0 goto label08;

        $r1[$i0] = 16842908;

        $i0 = $i0 + 1;

     label08:
        $z0 = r0.<com.google.android.material.chip.Chip: boolean closeIconHovered>;

        if $z0 == 0 goto label09;

        $r1[$i0] = 16843623;

        $i0 = $i0 + 1;

     label09:
        $z0 = r0.<com.google.android.material.chip.Chip: boolean closeIconPressed>;

        if $z0 == 0 goto label10;

        $r1[$i0] = 16842919;

        $i0 = $i0 + 1;

     label10:
        $z0 = virtualinvoke r0.<android.widget.CheckBox: boolean isChecked()>();

        if $z0 == 0 goto label11;

        $r1[$i0] = 16842913;

     label11:
        return $r1;
    }

    private void ensureChipDrawableHasCallback()
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.InsetDrawable $r2;
        com.google.android.material.chip.ChipDrawable $r3;
        android.graphics.drawable.Drawable$Callback $r4;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = virtualinvoke r0.<com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getBackgroundDrawable()>();

        $r2 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable>;

        if $r1 != $r2 goto label1;

        $r3 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $r4 = virtualinvoke $r3.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if $r4 != null goto label1;

        $r3 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $r2 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>($r2);

     label1:
        return;
    }

    private android.graphics.RectF getCloseIconTouchBounds()
    {
        android.graphics.RectF $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.RectF rectF>;

        virtualinvoke $r1.<android.graphics.RectF: void setEmpty()>();

        $z0 = specialinvoke r0.<com.google.android.material.chip.Chip: boolean hasCloseIcon()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.RectF rectF>;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void getCloseIconTouchBounds(android.graphics.RectF)>($r1);

     label1:
        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.RectF rectF>;

        return $r1;
    }

    private android.graphics.Rect getCloseIconTouchBoundsInt()
    {
        android.graphics.RectF $r2;
        com.google.android.material.chip.Chip r0;
        android.graphics.Rect $r1;
        int $i0, $i1, $i2, $i3;
        float $f0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = specialinvoke r0.<com.google.android.material.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()>();

        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.Rect rect>;

        $f0 = $r2.<android.graphics.RectF: float left>;

        $i0 = (int) $f0;

        $f0 = $r2.<android.graphics.RectF: float top>;

        $i1 = (int) $f0;

        $f0 = $r2.<android.graphics.RectF: float right>;

        $i2 = (int) $f0;

        $f0 = $r2.<android.graphics.RectF: float bottom>;

        $i3 = (int) $f0;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.Rect rect>;

        return $r1;
    }

    private com.google.android.material.resources.TextAppearance getTextAppearance()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.resources.TextAppearance $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: com.google.android.material.resources.TextAppearance getTextAppearance()>();

        return $r1;

     label1:
        return null;
    }

    private boolean handleAccessibilityExit(android.view.MotionEvent)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.Chip$ChipTouchHelper $r4;
        java.lang.Object[] $r10;
        java.lang.NoSuchMethodException $r14;
        java.lang.Integer $r6;
        java.lang.NoSuchFieldException $r11;
        android.view.MotionEvent $r1;
        int $i0;
        java.lang.reflect.Method $r9;
        java.lang.IllegalAccessException $r13;
        java.lang.Class[] $r7;
        java.lang.reflect.Field $r3;
        java.lang.reflect.InvocationTargetException $r12;
        java.lang.Class $r2, $r8;
        java.lang.Object $r5;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.view.MotionEvent;

        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        if $i0 != 10 goto label17;

        $r2 = class "Lb/k/b/c;";

     label01:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mHoveredVirtualViewId");

        virtualinvoke $r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label02:
        $r4 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.Chip$ChipTouchHelper touchHelper>;

     label03:
        $r5 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r4);

     label04:
        $r6 = (java.lang.Integer) $r5;

     label05:
        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label06:
        if $i0 == -2147483648 goto label17;

        $r2 = class "Lb/k/b/c;";

        $r7 = newarray (java.lang.Class)[1];

        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        $r7[0] = $r8;

     label07:
        $r9 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("updateHoveredVirtualView", $r7);

        virtualinvoke $r9.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label08:
        $r4 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.Chip$ChipTouchHelper touchHelper>;

        $r10 = newarray (java.lang.Object)[1];

     label09:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

     label10:
        $r10[0] = $r6;

     label11:
        virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r10);

     label12:
        return 1;

     label13:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Chip", "Unable to send Accessibility Exit event", $r11);

        return 0;

     label14:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Chip", "Unable to send Accessibility Exit event", $r12);

        return 0;

     label15:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Chip", "Unable to send Accessibility Exit event", $r13);

        return 0;

     label16:
        $r14 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Chip", "Unable to send Accessibility Exit event", $r14);

     label17:
        return 0;

        catch java.lang.NoSuchMethodException from label01 to label02 with label16;
        catch java.lang.NoSuchMethodException from label03 to label04 with label16;
        catch java.lang.NoSuchMethodException from label05 to label06 with label16;
        catch java.lang.IllegalAccessException from label01 to label02 with label15;
        catch java.lang.IllegalAccessException from label03 to label04 with label15;
        catch java.lang.IllegalAccessException from label05 to label06 with label15;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label14;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label14;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label14;
        catch java.lang.NoSuchFieldException from label01 to label02 with label13;
        catch java.lang.NoSuchFieldException from label03 to label04 with label13;
        catch java.lang.NoSuchFieldException from label05 to label06 with label13;
        catch java.lang.NoSuchMethodException from label07 to label08 with label16;
        catch java.lang.NoSuchMethodException from label09 to label10 with label16;
        catch java.lang.NoSuchMethodException from label11 to label12 with label16;
        catch java.lang.IllegalAccessException from label07 to label08 with label15;
        catch java.lang.IllegalAccessException from label09 to label10 with label15;
        catch java.lang.IllegalAccessException from label11 to label12 with label15;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label14;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label14;
        catch java.lang.reflect.InvocationTargetException from label11 to label12 with label14;
        catch java.lang.NoSuchFieldException from label07 to label08 with label13;
        catch java.lang.NoSuchFieldException from label09 to label10 with label13;
        catch java.lang.NoSuchFieldException from label11 to label12 with label13;
    }

    private boolean hasCloseIcon()
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable getCloseIcon()>();

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private void initMinTouchTarget(android.content.Context, android.util.AttributeSet, int)
    {
        com.google.android.material.chip.Chip r0;
        android.content.Context $r3;
        android.content.res.TypedArray $r5;
        android.util.AttributeSet $r4;
        int[] $r1, $r2;
        int $i0, $i1;
        float $f0;
        boolean $z0;
        double $d0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r3 := @parameter0: android.content.Context;

        $r4 := @parameter1: android.util.AttributeSet;

        $i1 := @parameter2: int;

        $r1 = <com.google.android.material.R$styleable: int[] Chip>;

        $i0 = <com.google.android.material.chip.Chip: int DEF_STYLE_RES>;

        $r2 = newarray (int)[0];

        $r5 = staticinvoke <com.google.android.material.internal.ThemeEnforcement: android.content.res.TypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int,int[])>($r3, $r4, $r1, $i1, $i0, $r2);

        $i1 = <com.google.android.material.R$styleable: int Chip_ensureMinTouchTargetSize>;

        $z0 = virtualinvoke $r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i1, 0);

        r0.<com.google.android.material.chip.Chip: boolean ensureMinTouchTargetSize> = $z0;

        $r3 = virtualinvoke r0.<android.widget.CheckBox: android.content.Context getContext()>();

        $f0 = staticinvoke <com.google.android.material.internal.ViewUtils: float dpToPx(android.content.Context,int)>($r3, 48);

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $f0 = (float) $d0;

        $i1 = <com.google.android.material.R$styleable: int Chip_chipMinTouchTargetSize>;

        $f0 = virtualinvoke $r5.<android.content.res.TypedArray: float getDimension(int,float)>($i1, $f0);

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i1 = (int) $d0;

        r0.<com.google.android.material.chip.Chip: int minTouchTargetSize> = $i1;

        virtualinvoke $r5.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    private void initOutlineProvider()
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.Chip$2 $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 21 goto label1;

        $r1 = new com.google.android.material.chip.Chip$2;

        specialinvoke $r1.<com.google.android.material.chip.Chip$2: void <init>(com.google.android.material.chip.Chip)>(r0);

        virtualinvoke r0.<android.widget.CheckBox: void setOutlineProvider(android.view.ViewOutlineProvider)>($r1);

     label1:
        return;
    }

    private void insetChipBackgroundDrawable(int, int, int, int)
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.InsetDrawable $r2;
        com.google.android.material.chip.ChipDrawable $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r2 = new android.graphics.drawable.InsetDrawable;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        specialinvoke $r2.<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int,int,int,int)>($r1, $i0, $i1, $i2, $i3);

        r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable> = $r2;

        return;
    }

    private void removeBackgroundInset()
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.InsetDrawable $r1;
        int $i0;
        float $f0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable>;

        if $r1 == null goto label1;

        r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable> = null;

        virtualinvoke r0.<android.widget.CheckBox: void setMinWidth(int)>(0);

        $f0 = virtualinvoke r0.<com.google.android.material.chip.Chip: float getChipMinHeight()>();

        $i0 = (int) $f0;

        virtualinvoke r0.<android.widget.CheckBox: void setMinHeight(int)>($i0);

        specialinvoke r0.<com.google.android.material.chip.Chip: void updateBackgroundDrawable()>();

     label1:
        return;
    }

    private void setCloseIconHovered(boolean)
    {
        com.google.android.material.chip.Chip r0;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        $z1 = r0.<com.google.android.material.chip.Chip: boolean closeIconHovered>;

        if $z1 == $z0 goto label1;

        r0.<com.google.android.material.chip.Chip: boolean closeIconHovered> = $z0;

        virtualinvoke r0.<android.widget.CheckBox: void refreshDrawableState()>();

     label1:
        return;
    }

    private void setCloseIconPressed(boolean)
    {
        com.google.android.material.chip.Chip r0;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        $z1 = r0.<com.google.android.material.chip.Chip: boolean closeIconPressed>;

        if $z1 == $z0 goto label1;

        r0.<com.google.android.material.chip.Chip: boolean closeIconPressed> = $z0;

        virtualinvoke r0.<android.widget.CheckBox: void refreshDrawableState()>();

     label1:
        return;
    }

    private void unapplyChipDrawable(com.google.android.material.chip.ChipDrawable)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: com.google.android.material.chip.ChipDrawable;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setDelegate(com.google.android.material.chip.ChipDrawable$Delegate)>(null);

     label1:
        return;
    }

    private void updateAccessibilityDelegate()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.Chip$ChipTouchHelper $r2;
        android.view.View$OnClickListener $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 = specialinvoke r0.<com.google.android.material.chip.Chip: boolean hasCloseIcon()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<com.google.android.material.chip.Chip: boolean isCloseIconVisible()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.android.material.chip.Chip: android.view.View$OnClickListener onCloseIconClickListener>;

        if $r1 == null goto label1;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.Chip$ChipTouchHelper touchHelper>;

        staticinvoke <b.i.i.y: void a(android.view.View,b.i.i.a)>(r0, $r2);

        return;

     label1:
        staticinvoke <b.i.i.y: void a(android.view.View,b.i.i.a)>(r0, null);

        return;
    }

    private void updateBackgroundDrawable()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 = <com.google.android.material.ripple.RippleUtils: boolean USE_FRAMEWORK_RIPPLE>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.google.android.material.chip.Chip: void updateFrameworkRippleBackground()>();

        return;

     label1:
        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setUseCompatRipple(boolean)>(1);

        $r1 = virtualinvoke r0.<com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getBackgroundDrawable()>();

        staticinvoke <b.i.i.y: void a(android.view.View,android.graphics.drawable.Drawable)>(r0, $r1);

        specialinvoke r0.<com.google.android.material.chip.Chip: void updatePaddingInternal()>();

        specialinvoke r0.<com.google.android.material.chip.Chip: void ensureChipDrawableHasCallback()>();

        return;
    }

    private void updateFrameworkRippleBackground()
    {
        android.content.res.ColorStateList $r3;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;
        android.graphics.drawable.RippleDrawable $r1;
        android.graphics.drawable.Drawable $r4;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = new android.graphics.drawable.RippleDrawable;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList getRippleColor()>();

        $r3 = staticinvoke <com.google.android.material.ripple.RippleUtils: android.content.res.ColorStateList sanitizeRippleDrawableColor(android.content.res.ColorStateList)>($r3);

        $r4 = virtualinvoke r0.<com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getBackgroundDrawable()>();

        specialinvoke $r1.<android.graphics.drawable.RippleDrawable: void <init>(android.content.res.ColorStateList,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>($r3, $r4, null);

        r0.<com.google.android.material.chip.Chip: android.graphics.drawable.RippleDrawable ripple> = $r1;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setUseCompatRipple(boolean)>(0);

        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.RippleDrawable ripple>;

        staticinvoke <b.i.i.y: void a(android.view.View,android.graphics.drawable.Drawable)>(r0, $r1);

        specialinvoke r0.<com.google.android.material.chip.Chip: void updatePaddingInternal()>();

        return;
    }

    private void updatePaddingInternal()
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.Rect $r4;
        java.lang.CharSequence $r1;
        android.graphics.drawable.InsetDrawable $r3;
        com.google.android.material.chip.ChipDrawable $r2;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = virtualinvoke r0.<android.widget.CheckBox: java.lang.CharSequence getText()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 != 0 goto label3;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 != null goto label1;

        return;

     label1:
        $f0 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: float getChipEndPadding()>();

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $f1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: float getTextEndPadding()>();

        $f0 = $f0 + $f1;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $f1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: float calculateCloseIconWidth()>();

        $f0 = $f0 + $f1;

        $i0 = (int) $f0;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: float getChipStartPadding()>();

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $f1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: float getTextStartPadding()>();

        $f0 = $f0 + $f1;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $f1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: float calculateChipIconWidth()>();

        $f0 = $f0 + $f1;

        $i1 = (int) $f0;

        $r3 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable>;

        if $r3 == null goto label2;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        $r3 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable>;

        virtualinvoke $r3.<android.graphics.drawable.InsetDrawable: boolean getPadding(android.graphics.Rect)>($r4);

        $i2 = $r4.<android.graphics.Rect: int left>;

        $i1 = $i1 + $i2;

        $i2 = $r4.<android.graphics.Rect: int right>;

        $i0 = $i0 + $i2;

     label2:
        $i2 = virtualinvoke r0.<android.widget.CheckBox: int getPaddingTop()>();

        $i3 = virtualinvoke r0.<android.widget.CheckBox: int getPaddingBottom()>();

        staticinvoke <b.i.i.y: void b(android.view.View,int,int,int,int)>(r0, $i1, $i2, $i0, $i3);

     label3:
        return;
    }

    private void updateTextPaintDrawState()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.resources.TextAppearanceFontCallback $r1;
        android.content.Context $r6;
        int[] $r4;
        android.text.TextPaint $r2;
        com.google.android.material.chip.ChipDrawable $r3;
        com.google.android.material.resources.TextAppearance $r5;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = virtualinvoke r0.<android.widget.CheckBox: android.text.TextPaint getPaint()>();

        $r3 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<android.graphics.drawable.Drawable: int[] getState()>();

        $r2.<android.text.TextPaint: int[] drawableState> = $r4;

     label1:
        $r5 = specialinvoke r0.<com.google.android.material.chip.Chip: com.google.android.material.resources.TextAppearance getTextAppearance()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r0.<android.widget.CheckBox: android.content.Context getContext()>();

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.resources.TextAppearanceFontCallback fontCallback>;

        virtualinvoke $r5.<com.google.android.material.resources.TextAppearance: void updateDrawState(android.content.Context,android.text.TextPaint,com.google.android.material.resources.TextAppearanceFontCallback)>($r6, $r2, $r1);

     label2:
        return;
    }

    private void validateAttributes(android.util.AttributeSet)
    {
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r3;
        android.util.AttributeSet $r1;
        int $i0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.util.AttributeSet;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = interfaceinvoke $r1.<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://schemas.android.com/apk/res/android", "background");

        if $r2 == null goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Chip", "Do not set the background; Chip manages its own background drawable.");

     label2:
        $r2 = interfaceinvoke $r1.<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://schemas.android.com/apk/res/android", "drawableLeft");

        if $r2 != null goto label7;

        $r2 = interfaceinvoke $r1.<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://schemas.android.com/apk/res/android", "drawableStart");

        if $r2 != null goto label6;

        $r2 = interfaceinvoke $r1.<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://schemas.android.com/apk/res/android", "drawableEnd");

        if $r2 != null goto label5;

        $r2 = interfaceinvoke $r1.<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://schemas.android.com/apk/res/android", "drawableRight");

        if $r2 != null goto label4;

        $z0 = interfaceinvoke $r1.<android.util.AttributeSet: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>("http://schemas.android.com/apk/res/android", "singleLine", 1);

        if $z0 == 0 goto label3;

        $i0 = interfaceinvoke $r1.<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)>("http://schemas.android.com/apk/res/android", "lines", 1);

        if $i0 != 1 goto label3;

        $i0 = interfaceinvoke $r1.<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)>("http://schemas.android.com/apk/res/android", "minLines", 1);

        if $i0 != 1 goto label3;

        $i0 = interfaceinvoke $r1.<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)>("http://schemas.android.com/apk/res/android", "maxLines", 1);

        if $i0 != 1 goto label3;

        $i0 = interfaceinvoke $r1.<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)>("http://schemas.android.com/apk/res/android", "gravity", 8388627);

        if $i0 == 8388627 goto label8;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Chip", "Chip text must be vertically center and start aligned");

        return;

     label3:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Chip does not support multi-line text");

        throw $r3;

     label4:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set end drawable using R.attr#closeIcon.");

        throw $r3;

     label5:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set end drawable using R.attr#closeIcon.");

        throw $r3;

     label6:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set start drawable using R.attr#chipIcon.");

        throw $r3;

     label7:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set left drawable using R.attr#chipIcon.");

        throw $r3;

     label8:
        return;
    }

    public boolean dispatchHoverEvent(android.view.MotionEvent)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.Chip$ChipTouchHelper $r2;
        android.view.MotionEvent $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.view.MotionEvent;

        $z0 = specialinvoke r0.<com.google.android.material.chip.Chip: boolean handleAccessibilityExit(android.view.MotionEvent)>($r1);

        if $z0 != 0 goto label2;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.Chip$ChipTouchHelper touchHelper>;

        $z0 = virtualinvoke $r2.<b.k.b.c: boolean dispatchHoverEvent(android.view.MotionEvent)>($r1);

        if $z0 != 0 goto label2;

        $z0 = specialinvoke r0.<android.widget.CheckBox: boolean dispatchHoverEvent(android.view.MotionEvent)>($r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.Chip$ChipTouchHelper $r2;
        android.view.KeyEvent $r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.Chip$ChipTouchHelper touchHelper>;

        $z0 = virtualinvoke $r2.<b.k.b.c: boolean dispatchKeyEvent(android.view.KeyEvent)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.Chip$ChipTouchHelper touchHelper>;

        $i0 = virtualinvoke $r2.<b.k.b.c: int getKeyboardFocusedVirtualViewId()>();

        if $i0 == -2147483648 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<android.widget.CheckBox: boolean dispatchKeyEvent(android.view.KeyEvent)>($r1);

        return $z0;
    }

    public void drawableStateChanged()
    {
        com.google.android.material.chip.Chip r0;
        int[] $r2;
        com.google.android.material.chip.ChipDrawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        specialinvoke r0.<androidx.appcompat.widget.AppCompatCheckBox: void drawableStateChanged()>();

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: boolean isCloseIconStateful()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $r2 = specialinvoke r0.<com.google.android.material.chip.Chip: int[] createCloseIconDrawableState()>();

        $z0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: boolean setCloseIconState(int[])>($r2);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        virtualinvoke r0.<android.widget.CheckBox: void invalidate()>();

     label3:
        return;
    }

    public boolean ensureAccessibleTouchTarget(int)
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.Rect $r3;
        android.graphics.drawable.InsetDrawable $r1;
        com.google.android.material.chip.ChipDrawable $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        r0.<com.google.android.material.chip.Chip: int minTouchTargetSize> = $i0;

        $z0 = virtualinvoke r0.<com.google.android.material.chip.Chip: boolean shouldEnsureMinTouchTargetSize()>();

        $i1 = 0;

        if $z0 != 0 goto label02;

        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable>;

        if $r1 == null goto label01;

        specialinvoke r0.<com.google.android.material.chip.Chip: void removeBackgroundInset()>();

        return 0;

     label01:
        specialinvoke r0.<com.google.android.material.chip.Chip: void updateBackgroundDrawable()>();

        return 0;

     label02:
        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $i2 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: int getIntrinsicHeight()>();

        $i2 = $i0 - $i2;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $i2 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: int getIntrinsicWidth()>();

        $i2 = $i0 - $i2;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        if $i2 > 0 goto label04;

        if $i3 > 0 goto label04;

        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable>;

        if $r1 == null goto label03;

        specialinvoke r0.<com.google.android.material.chip.Chip: void removeBackgroundInset()>();

        return 0;

     label03:
        specialinvoke r0.<com.google.android.material.chip.Chip: void updateBackgroundDrawable()>();

        return 0;

     label04:
        if $i2 <= 0 goto label05;

        $i2 = $i2 / 2;

        goto label06;

     label05:
        $i2 = 0;

     label06:
        if $i3 <= 0 goto label07;

        $i1 = $i3 / 2;

     label07:
        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable>;

        if $r1 == null goto label08;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable>;

        virtualinvoke $r1.<android.graphics.drawable.InsetDrawable: boolean getPadding(android.graphics.Rect)>($r3);

        $i3 = $r3.<android.graphics.Rect: int top>;

        if $i3 != $i1 goto label08;

        $i3 = $r3.<android.graphics.Rect: int bottom>;

        if $i3 != $i1 goto label08;

        $i3 = $r3.<android.graphics.Rect: int left>;

        if $i3 != $i2 goto label08;

        $i3 = $r3.<android.graphics.Rect: int right>;

        if $i3 != $i2 goto label08;

        specialinvoke r0.<com.google.android.material.chip.Chip: void updateBackgroundDrawable()>();

        return 1;

     label08:
        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        if $i3 < 16 goto label10;

        $i3 = virtualinvoke r0.<android.widget.CheckBox: int getMinHeight()>();

        if $i3 == $i0 goto label09;

        virtualinvoke r0.<android.widget.CheckBox: void setMinHeight(int)>($i0);

     label09:
        $i3 = virtualinvoke r0.<android.widget.CheckBox: int getMinWidth()>();

        if $i3 == $i0 goto label11;

        virtualinvoke r0.<android.widget.CheckBox: void setMinWidth(int)>($i0);

        goto label11;

     label10:
        virtualinvoke r0.<android.widget.CheckBox: void setMinHeight(int)>($i0);

        virtualinvoke r0.<android.widget.CheckBox: void setMinWidth(int)>($i0);

     label11:
        specialinvoke r0.<com.google.android.material.chip.Chip: void insetChipBackgroundDrawable(int,int,int,int)>($i2, $i1, $i2, $i1);

        specialinvoke r0.<com.google.android.material.chip.Chip: void updateBackgroundDrawable()>();

        return 1;
    }

    public android.graphics.drawable.Drawable getBackgroundDrawable()
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.InsetDrawable $r1;
        com.google.android.material.chip.ChipDrawable r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.InsetDrawable insetBackgroundDrawable>;

        if $r1 != null goto label1;

        r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        return r2;

     label1:
        return $r1;
    }

    public android.graphics.drawable.Drawable getCheckedIcon()
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable getCheckedIcon()>();

        return $r1;

     label1:
        return null;
    }

    public android.content.res.ColorStateList getCheckedIconTint()
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList getCheckedIconTint()>();

        return $r1;

     label1:
        return null;
    }

    public android.content.res.ColorStateList getChipBackgroundColor()
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList getChipBackgroundColor()>();

        return $r1;

     label1:
        return null;
    }

    public float getChipCornerRadius()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getChipCornerRadius()>();

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f0);

        return $f0;

     label1:
        return 0.0F;
    }

    public android.graphics.drawable.Drawable getChipDrawable()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable r1;

        r0 := @this: com.google.android.material.chip.Chip;

        r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        return r1;
    }

    public float getChipEndPadding()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getChipEndPadding()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public android.graphics.drawable.Drawable getChipIcon()
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable getChipIcon()>();

        return $r1;

     label1:
        return null;
    }

    public float getChipIconSize()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getChipIconSize()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public android.content.res.ColorStateList getChipIconTint()
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList getChipIconTint()>();

        return $r1;

     label1:
        return null;
    }

    public float getChipMinHeight()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getChipMinHeight()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public float getChipStartPadding()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getChipStartPadding()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public android.content.res.ColorStateList getChipStrokeColor()
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList getChipStrokeColor()>();

        return $r1;

     label1:
        return null;
    }

    public float getChipStrokeWidth()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getChipStrokeWidth()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public java.lang.CharSequence getChipText()
    {
        com.google.android.material.chip.Chip r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = virtualinvoke r0.<android.widget.CheckBox: java.lang.CharSequence getText()>();

        return $r1;
    }

    public android.graphics.drawable.Drawable getCloseIcon()
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.graphics.drawable.Drawable getCloseIcon()>();

        return $r1;

     label1:
        return null;
    }

    public java.lang.CharSequence getCloseIconContentDescription()
    {
        com.google.android.material.chip.Chip r0;
        java.lang.CharSequence $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: java.lang.CharSequence getCloseIconContentDescription()>();

        return $r1;

     label1:
        return null;
    }

    public float getCloseIconEndPadding()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getCloseIconEndPadding()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public float getCloseIconSize()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getCloseIconSize()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public float getCloseIconStartPadding()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getCloseIconStartPadding()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public android.content.res.ColorStateList getCloseIconTint()
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList getCloseIconTint()>();

        return $r1;

     label1:
        return null;
    }

    public android.text.TextUtils$TruncateAt getEllipsize()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;
        android.text.TextUtils$TruncateAt $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.text.TextUtils$TruncateAt getEllipsize()>();

        return $r1;

     label1:
        return null;
    }

    public void getFocusedRect(android.graphics.Rect)
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.Rect $r1, $r3;
        com.google.android.material.chip.Chip$ChipTouchHelper $r2;
        int $i0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.Chip$ChipTouchHelper touchHelper>;

        $i0 = virtualinvoke $r2.<b.k.b.c: int getKeyboardFocusedVirtualViewId()>();

        if $i0 == 1 goto label2;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.Chip$ChipTouchHelper touchHelper>;

        $i0 = virtualinvoke $r2.<b.k.b.c: int getAccessibilityFocusedVirtualViewId()>();

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        specialinvoke r0.<android.widget.CheckBox: void getFocusedRect(android.graphics.Rect)>($r1);

        return;

     label2:
        $r3 = specialinvoke r0.<com.google.android.material.chip.Chip: android.graphics.Rect getCloseIconTouchBoundsInt()>();

        virtualinvoke $r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        return;
    }

    public com.google.android.material.animation.MotionSpec getHideMotionSpec()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.animation.MotionSpec $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: com.google.android.material.animation.MotionSpec getHideMotionSpec()>();

        return $r1;

     label1:
        return null;
    }

    public float getIconEndPadding()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getIconEndPadding()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public float getIconStartPadding()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getIconStartPadding()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public android.content.res.ColorStateList getRippleColor()
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: android.content.res.ColorStateList getRippleColor()>();

        return $r1;

     label1:
        return null;
    }

    public com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.shape.ShapeAppearanceModel $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $r1 = virtualinvoke $r2.<com.google.android.material.shape.MaterialShapeDrawable: com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()>();

        return $r1;
    }

    public com.google.android.material.animation.MotionSpec getShowMotionSpec()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.animation.MotionSpec $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r1 = virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: com.google.android.material.animation.MotionSpec getShowMotionSpec()>();

        return $r1;

     label1:
        return null;
    }

    public float getTextEndPadding()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getTextEndPadding()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public float getTextStartPadding()
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: float getTextStartPadding()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public boolean isCheckable()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: boolean isCheckable()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isCheckedIconEnabled()
    {
        com.google.android.material.chip.Chip r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 = virtualinvoke r0.<com.google.android.material.chip.Chip: boolean isCheckedIconVisible()>();

        return $z0;
    }

    public boolean isCheckedIconVisible()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: boolean isCheckedIconVisible()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isChipIconEnabled()
    {
        com.google.android.material.chip.Chip r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 = virtualinvoke r0.<com.google.android.material.chip.Chip: boolean isChipIconVisible()>();

        return $z0;
    }

    public boolean isChipIconVisible()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: boolean isChipIconVisible()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isCloseIconEnabled()
    {
        com.google.android.material.chip.Chip r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 = virtualinvoke r0.<com.google.android.material.chip.Chip: boolean isCloseIconVisible()>();

        return $z0;
    }

    public boolean isCloseIconVisible()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: boolean isCloseIconVisible()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void onAttachedToWindow()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        specialinvoke r0.<android.widget.CheckBox: void onAttachedToWindow()>();

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        staticinvoke <com.google.android.material.shape.MaterialShapeUtils: void setParentAbsoluteElevation(android.view.View,com.google.android.material.shape.MaterialShapeDrawable)>(r0, $r1);

        return;
    }

    public void onChipDrawableSizeChange()
    {
        int $i0;
        com.google.android.material.chip.Chip r0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 = r0.<com.google.android.material.chip.Chip: int minTouchTargetSize>;

        virtualinvoke r0.<com.google.android.material.chip.Chip: boolean ensureAccessibleTouchTarget(int)>($i0);

        virtualinvoke r0.<android.widget.CheckBox: void requestLayout()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 21 goto label1;

        virtualinvoke r0.<android.widget.CheckBox: void invalidateOutline()>();

     label1:
        return;
    }

    public int[] onCreateDrawableState(int)
    {
        com.google.android.material.chip.Chip r0;
        int[] $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $i0 = $i0 + 2;

        $r1 = specialinvoke r0.<android.widget.CheckBox: int[] onCreateDrawableState(int)>($i0);

        $z0 = virtualinvoke r0.<android.widget.CheckBox: boolean isChecked()>();

        if $z0 == 0 goto label1;

        $r2 = <com.google.android.material.chip.Chip: int[] SELECTED_STATE>;

        staticinvoke <android.widget.CheckBox: int[] mergeDrawableStates(int[],int[])>($r1, $r2);

     label1:
        $z0 = virtualinvoke r0.<com.google.android.material.chip.Chip: boolean isCheckable()>();

        if $z0 == 0 goto label2;

        $r2 = <com.google.android.material.chip.Chip: int[] CHECKABLE_STATE_SET>;

        staticinvoke <android.widget.CheckBox: int[] mergeDrawableStates(int[],int[])>($r1, $r2);

     label2:
        return $r1;
    }

    public void onFocusChanged(boolean, int, android.graphics.Rect)
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.Rect $r1;
        com.google.android.material.chip.Chip$ChipTouchHelper $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r1 := @parameter2: android.graphics.Rect;

        specialinvoke r0.<android.widget.CheckBox: void onFocusChanged(boolean,int,android.graphics.Rect)>($z0, $i0, $r1);

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.Chip$ChipTouchHelper touchHelper>;

        virtualinvoke $r2.<b.k.b.c: void onFocusChanged(boolean,int,android.graphics.Rect)>($z0, $i0, $r1);

        return;
    }

    public boolean onHoverEvent(android.view.MotionEvent)
    {
        android.graphics.RectF $r2;
        com.google.android.material.chip.Chip r0;
        android.view.MotionEvent $r1;
        int $i0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.view.MotionEvent;

        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i0 == 7 goto label2;

        if $i0 == 10 goto label1;

        goto label3;

     label1:
        specialinvoke r0.<com.google.android.material.chip.Chip: void setCloseIconHovered(boolean)>(0);

        goto label3;

     label2:
        $r2 = specialinvoke r0.<com.google.android.material.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()>();

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $z0 = virtualinvoke $r2.<android.graphics.RectF: boolean contains(float,float)>($f0, $f1);

        specialinvoke r0.<com.google.android.material.chip.Chip: void setCloseIconHovered(boolean)>($z0);

     label3:
        $z0 = specialinvoke r0.<android.widget.CheckBox: boolean onHoverEvent(android.view.MotionEvent)>($r1);

        return $z0;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        com.google.android.material.chip.Chip r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;
        android.view.ViewParent $r3;
        com.google.android.material.chip.ChipGroup $r4;
        b.i.i.a.b $r5;
        int $i0, $i1;
        java.lang.String $r2;
        b.i.i.a.b$c $r6;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.widget.CheckBox: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>($r1);

        $z0 = virtualinvoke r0.<com.google.android.material.chip.Chip: boolean isCheckable()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r0.<android.widget.CheckBox: boolean isClickable()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>("android.view.View");

        goto label5;

     label2:
        $z0 = virtualinvoke r0.<com.google.android.material.chip.Chip: boolean isCheckable()>();

        if $z0 == 0 goto label3;

        $r2 = "android.widget.CompoundButton";

        goto label4;

     label3:
        $r2 = "android.widget.Button";

     label4:
        virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>($r2);

     label5:
        $z0 = virtualinvoke r0.<com.google.android.material.chip.Chip: boolean isCheckable()>();

        virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>($z0);

        $z0 = virtualinvoke r0.<android.widget.CheckBox: boolean isClickable()>();

        virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>($z0);

        $r3 = virtualinvoke r0.<android.widget.CheckBox: android.view.ViewParent getParent()>();

        $z0 = $r3 instanceof com.google.android.material.chip.ChipGroup;

        if $z0 == 0 goto label8;

        $r3 = virtualinvoke r0.<android.widget.CheckBox: android.view.ViewParent getParent()>();

        $r4 = (com.google.android.material.chip.ChipGroup) $r3;

        $r5 = staticinvoke <b.i.i.a.b: b.i.i.a.b a(android.view.accessibility.AccessibilityNodeInfo)>($r1);

        $z0 = virtualinvoke $r4.<com.google.android.material.chip.ChipGroup: boolean isSingleLine()>();

        if $z0 == 0 goto label6;

        $i0 = virtualinvoke $r4.<com.google.android.material.chip.ChipGroup: int getIndexOfChip(android.view.View)>(r0);

        goto label7;

     label6:
        $i0 = -1;

     label7:
        $i1 = virtualinvoke $r4.<com.google.android.material.internal.FlowLayout: int getRowIndex(android.view.View)>(r0);

        $z0 = virtualinvoke r0.<android.widget.CheckBox: boolean isChecked()>();

        $r6 = staticinvoke <b.i.i.a.b$c: b.i.i.a.b$c a(int,int,int,int,boolean,boolean)>($i1, 1, $i0, 1, 0, $z0);

        virtualinvoke $r5.<b.i.i.a.b: void b(java.lang.Object)>($r6);

     label8:
        return;
    }

    public android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent, int)
    {
        android.graphics.RectF $r2;
        com.google.android.material.chip.Chip r0;
        android.content.Context $r3;
        android.view.PointerIcon $r4;
        android.view.MotionEvent $r1;
        int $i0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.view.MotionEvent;

        $i0 := @parameter1: int;

        $r2 = specialinvoke r0.<com.google.android.material.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()>();

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $z0 = virtualinvoke $r2.<android.graphics.RectF: boolean contains(float,float)>($f0, $f1);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<android.widget.CheckBox: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<android.widget.CheckBox: android.content.Context getContext()>();

        $r4 = staticinvoke <android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>($r3, 1002);

        return $r4;

     label1:
        return null;
    }

    public void onRtlPropertiesChanged(int)
    {
        int $i0, $i1;
        com.google.android.material.chip.Chip r0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        specialinvoke r0.<android.widget.CheckBox: void onRtlPropertiesChanged(int)>($i0);

        $i1 = r0.<com.google.android.material.chip.Chip: int lastLayoutDirection>;

        if $i1 == $i0 goto label1;

        r0.<com.google.android.material.chip.Chip: int lastLayoutDirection> = $i0;

        specialinvoke r0.<com.google.android.material.chip.Chip: void updatePaddingInternal()>();

     label1:
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.graphics.RectF $r2;
        com.google.android.material.chip.Chip r0;
        android.view.MotionEvent $r1;
        int $i0;
        float $f0, $f1;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.view.MotionEvent;

        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getActionMasked()>();

        $r2 = specialinvoke r0.<com.google.android.material.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()>();

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $z0 = virtualinvoke $r2.<android.graphics.RectF: boolean contains(float,float)>($f0, $f1);

        if $i0 == 0 goto label05;

        if $i0 == 1 goto label02;

        if $i0 == 2 goto label01;

        if $i0 == 3 goto label03;

        goto label07;

     label01:
        $z1 = r0.<com.google.android.material.chip.Chip: boolean closeIconPressed>;

        if $z1 == 0 goto label07;

        if $z0 != 0 goto label06;

        specialinvoke r0.<com.google.android.material.chip.Chip: void setCloseIconPressed(boolean)>(0);

        goto label06;

     label02:
        $z0 = r0.<com.google.android.material.chip.Chip: boolean closeIconPressed>;

        if $z0 == 0 goto label03;

        virtualinvoke r0.<com.google.android.material.chip.Chip: boolean performCloseIconClick()>();

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        specialinvoke r0.<com.google.android.material.chip.Chip: void setCloseIconPressed(boolean)>(0);

        goto label08;

     label05:
        if $z0 == 0 goto label07;

        specialinvoke r0.<com.google.android.material.chip.Chip: void setCloseIconPressed(boolean)>(1);

     label06:
        $z0 = 1;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        if $z0 != 0 goto label09;

        $z0 = specialinvoke r0.<android.widget.CheckBox: boolean onTouchEvent(android.view.MotionEvent)>($r1);

        if $z0 == 0 goto label10;

     label09:
        return 1;

     label10:
        return 0;
    }

    public boolean performCloseIconClick()
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.Chip$ChipTouchHelper $r2;
        android.view.View$OnClickListener $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 = 0;

        virtualinvoke r0.<android.widget.CheckBox: void playSoundEffect(int)>(0);

        $r1 = r0.<com.google.android.material.chip.Chip: android.view.View$OnClickListener onCloseIconClickListener>;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<android.view.View$OnClickListener: void onClick(android.view.View)>(r0);

        $z0 = 1;

     label1:
        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.Chip$ChipTouchHelper touchHelper>;

        virtualinvoke $r2.<b.k.b.c: boolean sendEventForVirtualView(int,int)>(1, 1);

        return $z0;
    }

    public void setBackground(android.graphics.drawable.Drawable)
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.RippleDrawable $r3;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 := @parameter0: android.graphics.drawable.Drawable;

        $r1 = virtualinvoke r0.<com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getBackgroundDrawable()>();

        if $r2 == $r1 goto label1;

        $r3 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.RippleDrawable ripple>;

        if $r2 == $r3 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Chip", "Do not set the background; Chip manages its own background drawable.");

        return;

     label1:
        specialinvoke r0.<android.widget.CheckBox: void setBackground(android.graphics.drawable.Drawable)>($r2);

        return;
    }

    public void setBackgroundColor(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Chip", "Do not set the background color; Chip manages its own background drawable.");

        return;
    }

    public void setBackgroundDrawable(android.graphics.drawable.Drawable)
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.RippleDrawable $r3;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 := @parameter0: android.graphics.drawable.Drawable;

        $r1 = virtualinvoke r0.<com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getBackgroundDrawable()>();

        if $r2 == $r1 goto label1;

        $r3 = r0.<com.google.android.material.chip.Chip: android.graphics.drawable.RippleDrawable ripple>;

        if $r2 == $r3 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Chip", "Do not set the background drawable; Chip manages its own background drawable.");

        return;

     label1:
        specialinvoke r0.<androidx.appcompat.widget.AppCompatCheckBox: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r2);

        return;
    }

    public void setBackgroundResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Chip", "Do not set the background resource; Chip manages its own background drawable.");

        return;
    }

    public void setBackgroundTintList(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.content.res.ColorStateList;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Chip", "Do not set the background tint list; Chip manages its own background drawable.");

        return;
    }

    public void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.PorterDuff$Mode $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.graphics.PorterDuff$Mode;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Chip", "Do not set the background tint mode; Chip manages its own background drawable.");

        return;
    }

    public void setCheckable(boolean)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCheckable(boolean)>($z0);

     label1:
        return;
    }

    public void setCheckableResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCheckableResource(int)>($i0);

     label1:
        return;
    }

    public void setChecked(boolean)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        android.widget.CompoundButton$OnCheckedChangeListener $r2;
        boolean $z0, $z1;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 != null goto label1;

        r0.<com.google.android.material.chip.Chip: boolean deferredCheckedValue> = $z0;

        return;

     label1:
        $z1 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: boolean isCheckable()>();

        if $z1 == 0 goto label2;

        $z1 = virtualinvoke r0.<android.widget.CheckBox: boolean isChecked()>();

        specialinvoke r0.<android.widget.CheckBox: void setChecked(boolean)>($z0);

        if $z1 == $z0 goto label2;

        $r2 = r0.<com.google.android.material.chip.Chip: android.widget.CompoundButton$OnCheckedChangeListener onCheckedChangeListenerInternal>;

        if $r2 == null goto label2;

        interfaceinvoke $r2.<android.widget.CompoundButton$OnCheckedChangeListener: void onCheckedChanged(android.widget.CompoundButton,boolean)>(r0, $z0);

     label2:
        return;
    }

    public void setCheckedIcon(android.graphics.drawable.Drawable)
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setCheckedIcon(android.graphics.drawable.Drawable)>($r1);

     label1:
        return;
    }

    public void setCheckedIconEnabled(boolean)
    {
        com.google.android.material.chip.Chip r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setCheckedIconVisible(boolean)>($z0);

        return;
    }

    public void setCheckedIconEnabledResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setCheckedIconVisible(int)>($i0);

        return;
    }

    public void setCheckedIconResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCheckedIconResource(int)>($i0);

     label1:
        return;
    }

    public void setCheckedIconTint(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setCheckedIconTint(android.content.res.ColorStateList)>($r1);

     label1:
        return;
    }

    public void setCheckedIconTintResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCheckedIconTintResource(int)>($i0);

     label1:
        return;
    }

    public void setCheckedIconVisible(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCheckedIconVisible(int)>($i0);

     label1:
        return;
    }

    public void setCheckedIconVisible(boolean)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCheckedIconVisible(boolean)>($z0);

     label1:
        return;
    }

    public void setChipBackgroundColor(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setChipBackgroundColor(android.content.res.ColorStateList)>($r1);

     label1:
        return;
    }

    public void setChipBackgroundColorResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipBackgroundColorResource(int)>($i0);

     label1:
        return;
    }

    public void setChipCornerRadius(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipCornerRadius(float)>($f0);

     label1:
        return;
    }

    public void setChipCornerRadiusResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipCornerRadiusResource(int)>($i0);

     label1:
        return;
    }

    public void setChipDrawable(com.google.android.material.chip.ChipDrawable)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1, $r2;
        int $i0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: com.google.android.material.chip.ChipDrawable;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == $r1 goto label1;

        specialinvoke r0.<com.google.android.material.chip.Chip: void unapplyChipDrawable(com.google.android.material.chip.ChipDrawable)>($r2);

        r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable> = $r1;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setShouldDrawText(boolean)>(0);

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        specialinvoke r0.<com.google.android.material.chip.Chip: void applyChipDrawable(com.google.android.material.chip.ChipDrawable)>($r1);

        $i0 = r0.<com.google.android.material.chip.Chip: int minTouchTargetSize>;

        virtualinvoke r0.<com.google.android.material.chip.Chip: boolean ensureAccessibleTouchTarget(int)>($i0);

     label1:
        return;
    }

    public void setChipEndPadding(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipEndPadding(float)>($f0);

     label1:
        return;
    }

    public void setChipEndPaddingResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipEndPaddingResource(int)>($i0);

     label1:
        return;
    }

    public void setChipIcon(android.graphics.drawable.Drawable)
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setChipIcon(android.graphics.drawable.Drawable)>($r1);

     label1:
        return;
    }

    public void setChipIconEnabled(boolean)
    {
        com.google.android.material.chip.Chip r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setChipIconVisible(boolean)>($z0);

        return;
    }

    public void setChipIconEnabledResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setChipIconVisible(int)>($i0);

        return;
    }

    public void setChipIconResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipIconResource(int)>($i0);

     label1:
        return;
    }

    public void setChipIconSize(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipIconSize(float)>($f0);

     label1:
        return;
    }

    public void setChipIconSizeResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipIconSizeResource(int)>($i0);

     label1:
        return;
    }

    public void setChipIconTint(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setChipIconTint(android.content.res.ColorStateList)>($r1);

     label1:
        return;
    }

    public void setChipIconTintResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipIconTintResource(int)>($i0);

     label1:
        return;
    }

    public void setChipIconVisible(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipIconVisible(int)>($i0);

     label1:
        return;
    }

    public void setChipIconVisible(boolean)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipIconVisible(boolean)>($z0);

     label1:
        return;
    }

    public void setChipMinHeight(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipMinHeight(float)>($f0);

     label1:
        return;
    }

    public void setChipMinHeightResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipMinHeightResource(int)>($i0);

     label1:
        return;
    }

    public void setChipStartPadding(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipStartPadding(float)>($f0);

     label1:
        return;
    }

    public void setChipStartPaddingResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipStartPaddingResource(int)>($i0);

     label1:
        return;
    }

    public void setChipStrokeColor(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setChipStrokeColor(android.content.res.ColorStateList)>($r1);

     label1:
        return;
    }

    public void setChipStrokeColorResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipStrokeColorResource(int)>($i0);

     label1:
        return;
    }

    public void setChipStrokeWidth(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipStrokeWidth(float)>($f0);

     label1:
        return;
    }

    public void setChipStrokeWidthResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setChipStrokeWidthResource(int)>($i0);

     label1:
        return;
    }

    public void setChipText(java.lang.CharSequence)
    {
        com.google.android.material.chip.Chip r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: java.lang.CharSequence;

        virtualinvoke r0.<android.widget.CheckBox: void setText(java.lang.CharSequence)>($r1);

        return;
    }

    public void setChipTextResource(int)
    {
        com.google.android.material.chip.Chip r0;
        int $i0;
        java.lang.String $r2;
        android.content.res.Resources $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.widget.CheckBox: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>($i0);

        virtualinvoke r0.<android.widget.CheckBox: void setText(java.lang.CharSequence)>($r2);

        return;
    }

    public void setCloseIcon(android.graphics.drawable.Drawable)
    {
        com.google.android.material.chip.Chip r0;
        android.graphics.drawable.Drawable $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setCloseIcon(android.graphics.drawable.Drawable)>($r1);

     label1:
        specialinvoke r0.<com.google.android.material.chip.Chip: void updateAccessibilityDelegate()>();

        return;
    }

    public void setCloseIconContentDescription(java.lang.CharSequence)
    {
        com.google.android.material.chip.Chip r0;
        java.lang.CharSequence $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setCloseIconContentDescription(java.lang.CharSequence)>($r1);

     label1:
        return;
    }

    public void setCloseIconEnabled(boolean)
    {
        com.google.android.material.chip.Chip r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setCloseIconVisible(boolean)>($z0);

        return;
    }

    public void setCloseIconEnabledResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setCloseIconVisible(int)>($i0);

        return;
    }

    public void setCloseIconEndPadding(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCloseIconEndPadding(float)>($f0);

     label1:
        return;
    }

    public void setCloseIconEndPaddingResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCloseIconEndPaddingResource(int)>($i0);

     label1:
        return;
    }

    public void setCloseIconResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCloseIconResource(int)>($i0);

     label1:
        specialinvoke r0.<com.google.android.material.chip.Chip: void updateAccessibilityDelegate()>();

        return;
    }

    public void setCloseIconSize(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCloseIconSize(float)>($f0);

     label1:
        return;
    }

    public void setCloseIconSizeResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCloseIconSizeResource(int)>($i0);

     label1:
        return;
    }

    public void setCloseIconStartPadding(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCloseIconStartPadding(float)>($f0);

     label1:
        return;
    }

    public void setCloseIconStartPaddingResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCloseIconStartPaddingResource(int)>($i0);

     label1:
        return;
    }

    public void setCloseIconTint(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r1;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setCloseIconTint(android.content.res.ColorStateList)>($r1);

     label1:
        return;
    }

    public void setCloseIconTintResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCloseIconTintResource(int)>($i0);

     label1:
        return;
    }

    public void setCloseIconVisible(int)
    {
        com.google.android.material.chip.Chip r0;
        int $i0;
        android.content.res.Resources $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.widget.CheckBox: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>($i0);

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setCloseIconVisible(boolean)>($z0);

        return;
    }

    public void setCloseIconVisible(boolean)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setCloseIconVisible(boolean)>($z0);

     label1:
        specialinvoke r0.<com.google.android.material.chip.Chip: void updateAccessibilityDelegate()>();

        return;
    }

    public void setCompoundDrawables(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)
    {
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r5;
        android.graphics.drawable.Drawable $r1, $r2, $r3, $r4;

        r0 := @this: com.google.android.material.chip.Chip;

        $r3 := @parameter0: android.graphics.drawable.Drawable;

        $r4 := @parameter1: android.graphics.drawable.Drawable;

        $r1 := @parameter2: android.graphics.drawable.Drawable;

        $r2 := @parameter3: android.graphics.drawable.Drawable;

        if $r3 != null goto label2;

        if $r1 != null goto label1;

        specialinvoke r0.<android.widget.CheckBox: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>($r3, $r4, $r1, $r2);

        return;

     label1:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set end drawable using R.attr#closeIcon.");

        throw $r5;

     label2:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set start drawable using R.attr#chipIcon.");

        throw $r5;
    }

    public void setCompoundDrawablesRelative(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)
    {
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r5;
        android.graphics.drawable.Drawable $r1, $r2, $r3, $r4;

        r0 := @this: com.google.android.material.chip.Chip;

        $r3 := @parameter0: android.graphics.drawable.Drawable;

        $r4 := @parameter1: android.graphics.drawable.Drawable;

        $r1 := @parameter2: android.graphics.drawable.Drawable;

        $r2 := @parameter3: android.graphics.drawable.Drawable;

        if $r3 != null goto label2;

        if $r1 != null goto label1;

        specialinvoke r0.<android.widget.CheckBox: void setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>($r3, $r4, $r1, $r2);

        return;

     label1:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set end drawable using R.attr#closeIcon.");

        throw $r5;

     label2:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set start drawable using R.attr#chipIcon.");

        throw $r5;
    }

    public void setCompoundDrawablesRelativeWithIntrinsicBounds(int, int, int, int)
    {
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.google.android.material.chip.Chip;

        $i2 := @parameter0: int;

        $i3 := @parameter1: int;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        if $i2 != 0 goto label2;

        if $i0 != 0 goto label1;

        specialinvoke r0.<android.widget.CheckBox: void setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)>($i2, $i3, $i0, $i1);

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set end drawable using R.attr#closeIcon.");

        throw $r1;

     label2:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set start drawable using R.attr#chipIcon.");

        throw $r1;
    }

    public void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)
    {
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r5;
        android.graphics.drawable.Drawable $r1, $r2, $r3, $r4;

        r0 := @this: com.google.android.material.chip.Chip;

        $r3 := @parameter0: android.graphics.drawable.Drawable;

        $r4 := @parameter1: android.graphics.drawable.Drawable;

        $r1 := @parameter2: android.graphics.drawable.Drawable;

        $r2 := @parameter3: android.graphics.drawable.Drawable;

        if $r3 != null goto label2;

        if $r1 != null goto label1;

        specialinvoke r0.<android.widget.CheckBox: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>($r3, $r4, $r1, $r2);

        return;

     label1:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set end drawable using R.attr#closeIcon.");

        throw $r5;

     label2:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set start drawable using R.attr#chipIcon.");

        throw $r5;
    }

    public void setCompoundDrawablesWithIntrinsicBounds(int, int, int, int)
    {
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.google.android.material.chip.Chip;

        $i2 := @parameter0: int;

        $i3 := @parameter1: int;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        if $i2 != 0 goto label2;

        if $i0 != 0 goto label1;

        specialinvoke r0.<android.widget.CheckBox: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>($i2, $i3, $i0, $i1);

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set end drawable using R.attr#closeIcon.");

        throw $r1;

     label2:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set start drawable using R.attr#chipIcon.");

        throw $r1;
    }

    public void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)
    {
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r5;
        android.graphics.drawable.Drawable $r1, $r2, $r3, $r4;

        r0 := @this: com.google.android.material.chip.Chip;

        $r3 := @parameter0: android.graphics.drawable.Drawable;

        $r4 := @parameter1: android.graphics.drawable.Drawable;

        $r1 := @parameter2: android.graphics.drawable.Drawable;

        $r2 := @parameter3: android.graphics.drawable.Drawable;

        if $r3 != null goto label2;

        if $r1 != null goto label1;

        specialinvoke r0.<android.widget.CheckBox: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>($r3, $r4, $r1, $r2);

        return;

     label1:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set right drawable using R.attr#closeIcon.");

        throw $r5;

     label2:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Please set left drawable using R.attr#chipIcon.");

        throw $r5;
    }

    public void setElevation(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        specialinvoke r0.<android.widget.CheckBox: void setElevation(float)>($f0);

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.shape.MaterialShapeDrawable: void setElevation(float)>($f0);

     label1:
        return;
    }

    public void setEllipsize(android.text.TextUtils$TruncateAt)
    {
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r4;
        com.google.android.material.chip.ChipDrawable $r2;
        android.text.TextUtils$TruncateAt $r1, $r3;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.text.TextUtils$TruncateAt;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt MARQUEE>;

        if $r1 == $r3 goto label2;

        specialinvoke r0.<android.widget.CheckBox: void setEllipsize(android.text.TextUtils$TruncateAt)>($r1);

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label3;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setEllipsize(android.text.TextUtils$TruncateAt)>($r1);

        return;

     label2:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Text within a chip are not allowed to scroll.");

        throw $r4;

     label3:
        return;
    }

    public void setEnsureMinTouchTargetSize(boolean)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        r0.<com.google.android.material.chip.Chip: boolean ensureMinTouchTargetSize> = $z0;

        $i0 = r0.<com.google.android.material.chip.Chip: int minTouchTargetSize>;

        virtualinvoke r0.<com.google.android.material.chip.Chip: boolean ensureAccessibleTouchTarget(int)>($i0);

        return;
    }

    public void setGravity(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        if $i0 == 8388627 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Chip", "Chip text must be vertically center and start aligned");

        return;

     label1:
        specialinvoke r0.<android.widget.CheckBox: void setGravity(int)>($i0);

        return;
    }

    public void setHideMotionSpec(com.google.android.material.animation.MotionSpec)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.animation.MotionSpec $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: com.google.android.material.animation.MotionSpec;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setHideMotionSpec(com.google.android.material.animation.MotionSpec)>($r1);

     label1:
        return;
    }

    public void setHideMotionSpecResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setHideMotionSpecResource(int)>($i0);

     label1:
        return;
    }

    public void setIconEndPadding(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setIconEndPadding(float)>($f0);

     label1:
        return;
    }

    public void setIconEndPaddingResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setIconEndPaddingResource(int)>($i0);

     label1:
        return;
    }

    public void setIconStartPadding(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setIconStartPadding(float)>($f0);

     label1:
        return;
    }

    public void setIconStartPaddingResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setIconStartPaddingResource(int)>($i0);

     label1:
        return;
    }

    public void setLayoutDirection(int)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        int $i0, $i1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 != null goto label1;

        return;

     label1:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 17 goto label2;

        specialinvoke r0.<android.widget.CheckBox: void setLayoutDirection(int)>($i0);

     label2:
        return;
    }

    public void setLines(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        if $i0 > 1 goto label1;

        specialinvoke r0.<android.widget.CheckBox: void setLines(int)>($i0);

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Chip does not support multi-line text");

        throw $r1;
    }

    public void setMaxLines(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        if $i0 > 1 goto label1;

        specialinvoke r0.<android.widget.CheckBox: void setMaxLines(int)>($i0);

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Chip does not support multi-line text");

        throw $r1;
    }

    public void setMaxWidth(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        specialinvoke r0.<android.widget.CheckBox: void setMaxWidth(int)>($i0);

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setMaxWidth(int)>($i0);

     label1:
        return;
    }

    public void setMinLines(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        if $i0 > 1 goto label1;

        specialinvoke r0.<android.widget.CheckBox: void setMinLines(int)>($i0);

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Chip does not support multi-line text");

        throw $r1;
    }

    public void setOnCheckedChangeListenerInternal(android.widget.CompoundButton$OnCheckedChangeListener)
    {
        com.google.android.material.chip.Chip r0;
        android.widget.CompoundButton$OnCheckedChangeListener $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.widget.CompoundButton$OnCheckedChangeListener;

        r0.<com.google.android.material.chip.Chip: android.widget.CompoundButton$OnCheckedChangeListener onCheckedChangeListenerInternal> = $r1;

        return;
    }

    public void setOnCloseIconClickListener(android.view.View$OnClickListener)
    {
        com.google.android.material.chip.Chip r0;
        android.view.View$OnClickListener $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.view.View$OnClickListener;

        r0.<com.google.android.material.chip.Chip: android.view.View$OnClickListener onCloseIconClickListener> = $r1;

        specialinvoke r0.<com.google.android.material.chip.Chip: void updateAccessibilityDelegate()>();

        return;
    }

    public void setRippleColor(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList $r2;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r2 := @parameter0: android.content.res.ColorStateList;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setRippleColor(android.content.res.ColorStateList)>($r2);

     label1:
        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $z0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: boolean getUseCompatRipple()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.google.android.material.chip.Chip: void updateFrameworkRippleBackground()>();

     label2:
        return;
    }

    public void setRippleColorResource(int)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setRippleColorResource(int)>($i0);

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $z0 = virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: boolean getUseCompatRipple()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.google.android.material.chip.Chip: void updateFrameworkRippleBackground()>();

     label1:
        return;
    }

    public void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.shape.ShapeAppearanceModel $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: com.google.android.material.shape.ShapeAppearanceModel;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<com.google.android.material.shape.MaterialShapeDrawable: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)>($r1);

        return;
    }

    public void setShowMotionSpec(com.google.android.material.animation.MotionSpec)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.animation.MotionSpec $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: com.google.android.material.animation.MotionSpec;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setShowMotionSpec(com.google.android.material.animation.MotionSpec)>($r1);

     label1:
        return;
    }

    public void setShowMotionSpecResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setShowMotionSpecResource(int)>($i0);

     label1:
        return;
    }

    public void setSingleLine(boolean)
    {
        com.google.android.material.chip.Chip r0;
        java.lang.UnsupportedOperationException $r1;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.widget.CheckBox: void setSingleLine(boolean)>($z0);

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Chip does not support multi-line text");

        throw $r1;
    }

    public void setText(java.lang.CharSequence, android.widget.TextView$BufferType)
    {
        android.widget.TextView$BufferType $r2;
        com.google.android.material.chip.Chip r0;
        java.lang.CharSequence $r1, $r4;
        com.google.android.material.chip.ChipDrawable $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: android.widget.TextView$BufferType;

        $r3 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r3 != null goto label1;

        return;

     label1:
        if $r1 != null goto label2;

        $r1 = "";

     label2:
        $r3 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        $z0 = virtualinvoke $r3.<com.google.android.material.chip.ChipDrawable: boolean shouldDrawText()>();

        if $z0 == 0 goto label3;

        $r4 = null;

        goto label4;

     label3:
        $r4 = $r1;

     label4:
        specialinvoke r0.<android.widget.CheckBox: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>($r4, $r2);

        $r3 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r3 == null goto label5;

        virtualinvoke $r3.<com.google.android.material.chip.ChipDrawable: void setText(java.lang.CharSequence)>($r1);

     label5:
        return;
    }

    public void setTextAppearance(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        specialinvoke r0.<android.widget.CheckBox: void setTextAppearance(int)>($i0);

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setTextAppearanceResource(int)>($i0);

     label1:
        specialinvoke r0.<com.google.android.material.chip.Chip: void updateTextPaintDrawState()>();

        return;
    }

    public void setTextAppearance(android.content.Context, int)
    {
        com.google.android.material.chip.Chip r0;
        android.content.Context $r1;
        com.google.android.material.chip.ChipDrawable $r2;
        int $i0;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: android.content.Context;

        $i0 := @parameter1: int;

        specialinvoke r0.<android.widget.CheckBox: void setTextAppearance(android.content.Context,int)>($r1, $i0);

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setTextAppearanceResource(int)>($i0);

     label1:
        specialinvoke r0.<com.google.android.material.chip.Chip: void updateTextPaintDrawState()>();

        return;
    }

    public void setTextAppearance(com.google.android.material.resources.TextAppearance)
    {
        com.google.android.material.chip.Chip r0;
        com.google.android.material.resources.TextAppearance $r1;
        com.google.android.material.chip.ChipDrawable $r2;

        r0 := @this: com.google.android.material.chip.Chip;

        $r1 := @parameter0: com.google.android.material.resources.TextAppearance;

        $r2 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<com.google.android.material.chip.ChipDrawable: void setTextAppearance(com.google.android.material.resources.TextAppearance)>($r1);

     label1:
        specialinvoke r0.<com.google.android.material.chip.Chip: void updateTextPaintDrawState()>();

        return;
    }

    public void setTextAppearanceResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        android.content.Context $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.widget.CheckBox: android.content.Context getContext()>();

        virtualinvoke r0.<com.google.android.material.chip.Chip: void setTextAppearance(android.content.Context,int)>($r1, $i0);

        return;
    }

    public void setTextEndPadding(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setTextEndPadding(float)>($f0);

     label1:
        return;
    }

    public void setTextEndPaddingResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setTextEndPaddingResource(int)>($i0);

     label1:
        return;
    }

    public void setTextStartPadding(float)
    {
        com.google.android.material.chip.Chip r0;
        float $f0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $f0 := @parameter0: float;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setTextStartPadding(float)>($f0);

     label1:
        return;
    }

    public void setTextStartPaddingResource(int)
    {
        int $i0;
        com.google.android.material.chip.Chip r0;
        com.google.android.material.chip.ChipDrawable $r1;

        r0 := @this: com.google.android.material.chip.Chip;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.chip.Chip: com.google.android.material.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<com.google.android.material.chip.ChipDrawable: void setTextStartPaddingResource(int)>($i0);

     label1:
        return;
    }

    public boolean shouldEnsureMinTouchTargetSize()
    {
        com.google.android.material.chip.Chip r0;
        boolean z0;

        r0 := @this: com.google.android.material.chip.Chip;

        z0 = r0.<com.google.android.material.chip.Chip: boolean ensureMinTouchTargetSize>;

        return z0;
    }
}
