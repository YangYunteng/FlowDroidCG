public abstract class org.dom4j.tree.AbstractNode extends java.lang.Object implements org.dom4j.Node, java.lang.Cloneable, java.io.Serializable
{
    public static final org.dom4j.DocumentFactory DOCUMENT_FACTORY;
    public static final java.lang.String[] NODE_TYPE_NAMES;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        org.dom4j.DocumentFactory $r1;

        $r0 = newarray (java.lang.String)[15];

        $r0[0] = "Node";

        $r0[1] = "Element";

        $r0[2] = "Attribute";

        $r0[3] = "Text";

        $r0[4] = "CDATA";

        $r0[5] = "Entity";

        $r0[6] = "Entity";

        $r0[7] = "ProcessingInstruction";

        $r0[8] = "Comment";

        $r0[9] = "Document";

        $r0[10] = "DocumentType";

        $r0[11] = "DocumentFragment";

        $r0[12] = "Notation";

        $r0[13] = "Namespace";

        $r0[14] = "Unknown";

        <org.dom4j.tree.AbstractNode: java.lang.String[] NODE_TYPE_NAMES> = $r0;

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        <org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory DOCUMENT_FACTORY> = $r1;

        return;
    }

    public void <init>()
    {
        org.dom4j.tree.AbstractNode r0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.dom4j.Node asXPathResult(org.dom4j.Element)
    {
        org.dom4j.Node $r2;
        org.dom4j.tree.AbstractNode r0;
        org.dom4j.Element $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: org.dom4j.Element;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: boolean supportsParent()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Node createXPathResult(org.dom4j.Element)>($r1);

        return $r2;
    }

    public java.lang.Object clone()
    {
        org.dom4j.Node $r3;
        java.lang.RuntimeException $r5;
        java.lang.CloneNotSupportedException $r4;
        org.dom4j.tree.AbstractNode r0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r2;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $z0 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        $r3 = (org.dom4j.Node) $r2;

     label3:
        interfaceinvoke $r3.<org.dom4j.Node: void setParent(org.dom4j.Element)>(null);

        interfaceinvoke $r3.<org.dom4j.Node: void setDocument(org.dom4j.Document)>(null);

     label4:
        return $r3;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("This should never happen. Caught: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label5;
        catch java.lang.CloneNotSupportedException from label3 to label4 with label5;
    }

    public org.dom4j.rule.Pattern createPattern(java.lang.String)
    {
        org.dom4j.rule.Pattern $r3;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.rule.Pattern createPattern(java.lang.String)>($r1);

        return $r3;
    }

    public org.dom4j.XPath createXPath(java.lang.String)
    {
        org.dom4j.XPath $r3;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.XPath createXPath(java.lang.String)>($r1);

        return $r3;
    }

    public org.dom4j.NodeFilter createXPathFilter(java.lang.String)
    {
        org.dom4j.NodeFilter $r3;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.NodeFilter createXPathFilter(java.lang.String)>($r1);

        return $r3;
    }

    public org.dom4j.Node createXPathResult(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractNode r0;
        org.dom4j.Element $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r1;
        java.lang.RuntimeException $r3;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r2 := @parameter0: org.dom4j.Element;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("asXPathResult() not yet implemented fully for: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }

    public org.dom4j.Node detach()
    {
        org.dom4j.tree.AbstractNode r0;
        org.dom4j.Element $r1;
        org.dom4j.Document $r2;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r1 == null goto label1;

        interfaceinvoke $r1.<org.dom4j.Branch: boolean remove(org.dom4j.Node)>(r0);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Document getDocument()>();

        if $r2 == null goto label2;

        interfaceinvoke $r2.<org.dom4j.Branch: boolean remove(org.dom4j.Node)>(r0);

     label2:
        virtualinvoke r0.<org.dom4j.tree.AbstractNode: void setParent(org.dom4j.Element)>(null);

        virtualinvoke r0.<org.dom4j.tree.AbstractNode: void setDocument(org.dom4j.Document)>(null);

        return r0;
    }

    public org.dom4j.Document getDocument()
    {
        org.dom4j.tree.AbstractNode r0;
        org.dom4j.Element $r1;
        org.dom4j.Document $r2;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.Element getParent()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: org.dom4j.Document getDocument()>();

        return $r2;

     label1:
        return null;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.tree.AbstractNode r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.tree.AbstractNode;

        r1 = <org.dom4j.tree.AbstractNode: org.dom4j.DocumentFactory DOCUMENT_FACTORY>;

        return r1;
    }

    public java.lang.String getName()
    {
        org.dom4j.tree.AbstractNode r0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        return null;
    }

    public short getNodeType()
    {
        org.dom4j.tree.AbstractNode r0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        return 14;
    }

    public java.lang.String getNodeTypeName()
    {
        short $s1;
        int $i0, $i2;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $s1 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: short getNodeType()>();

        $i0 = (int) $s1;

        if $i0 < 0 goto label2;

        $r1 = <org.dom4j.tree.AbstractNode: java.lang.String[] NODE_TYPE_NAMES>;

        $i0 = lengthof $r1;

        $i2 = (int) $s1;

        if $i2 < $i0 goto label1;

        goto label2;

     label1:
        $i0 = (int) $s1;

        $r2 = $r1[$i0];

        return $r2;

     label2:
        return "Unknown";
    }

    public org.dom4j.Element getParent()
    {
        org.dom4j.tree.AbstractNode r0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        return null;
    }

    public java.lang.String getPath()
    {
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 = interfaceinvoke r0.<org.dom4j.Node: java.lang.String getPath(org.dom4j.Element)>(null);

        return $r1;
    }

    public java.lang.String getStringValue()
    {
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.lang.String getText()>();

        return $r1;
    }

    public java.lang.String getText()
    {
        org.dom4j.tree.AbstractNode r0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        return null;
    }

    public java.lang.String getUniquePath()
    {
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 = interfaceinvoke r0.<org.dom4j.Node: java.lang.String getUniquePath(org.dom4j.Element)>(null);

        return $r1;
    }

    public boolean hasContent()
    {
        org.dom4j.tree.AbstractNode r0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        return 0;
    }

    public boolean isReadOnly()
    {
        org.dom4j.tree.AbstractNode r0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        return 1;
    }

    public boolean matches(java.lang.String)
    {
        org.dom4j.NodeFilter $r2;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.NodeFilter createXPathFilter(java.lang.String)>($r1);

        $z0 = interfaceinvoke $r2.<org.dom4j.NodeFilter: boolean matches(org.dom4j.Node)>(r0);

        return $z0;
    }

    public java.lang.Number numberValueOf(java.lang.String)
    {
        org.dom4j.XPath $r2;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;
        java.lang.Number $r3;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.XPath createXPath(java.lang.String)>($r1);

        $r3 = interfaceinvoke $r2.<org.dom4j.XPath: java.lang.Number numberValueOf(java.lang.Object)>(r0);

        return $r3;
    }

    public java.util.List selectNodes(java.lang.String)
    {
        java.util.List $r3;
        org.dom4j.XPath $r2;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.XPath createXPath(java.lang.String)>($r1);

        $r3 = interfaceinvoke $r2.<org.dom4j.XPath: java.util.List selectNodes(java.lang.Object)>(r0);

        return $r3;
    }

    public java.util.List selectNodes(java.lang.String, java.lang.String)
    {
        java.util.List $r2;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1, $r3;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: java.util.List selectNodes(java.lang.String,java.lang.String,boolean)>($r3, $r1, 0);

        return $r2;
    }

    public java.util.List selectNodes(java.lang.String, java.lang.String, boolean)
    {
        java.util.List $r5;
        org.dom4j.XPath $r3, $r4;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.XPath createXPath(java.lang.String)>($r1);

        $r4 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.XPath createXPath(java.lang.String)>($r2);

        $r5 = interfaceinvoke $r3.<org.dom4j.XPath: java.util.List selectNodes(java.lang.Object,org.dom4j.XPath,boolean)>(r0, $r4, $z0);

        return $r5;
    }

    public java.lang.Object selectObject(java.lang.String)
    {
        org.dom4j.XPath $r2;
        org.dom4j.tree.AbstractNode r0;
        java.lang.Object $r3;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.XPath createXPath(java.lang.String)>($r1);

        $r3 = interfaceinvoke $r2.<org.dom4j.XPath: java.lang.Object evaluate(java.lang.Object)>(r0);

        return $r3;
    }

    public org.dom4j.Node selectSingleNode(java.lang.String)
    {
        org.dom4j.XPath $r2;
        org.dom4j.Node $r3;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.XPath createXPath(java.lang.String)>($r1);

        $r3 = interfaceinvoke $r2.<org.dom4j.XPath: org.dom4j.Node selectSingleNode(java.lang.Object)>(r0);

        return $r3;
    }

    public void setDocument(org.dom4j.Document)
    {
        org.dom4j.tree.AbstractNode r0;
        org.dom4j.Document $r1;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: org.dom4j.Document;

        return;
    }

    public void setName(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r2;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This node cannot be modified");

        throw $r2;
    }

    public void setParent(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractNode r0;
        org.dom4j.Element $r1;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: org.dom4j.Element;

        return;
    }

    public void setText(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r2;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This node cannot be modified");

        throw $r2;
    }

    public boolean supportsParent()
    {
        org.dom4j.tree.AbstractNode r0;

        r0 := @this: org.dom4j.tree.AbstractNode;

        return 0;
    }

    public java.lang.String valueOf(java.lang.String)
    {
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r1;
        org.dom4j.XPath $r2;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.AbstractNode: org.dom4j.XPath createXPath(java.lang.String)>($r1);

        $r1 = interfaceinvoke $r2.<org.dom4j.XPath: java.lang.String valueOf(java.lang.Object)>(r0);

        return $r1;
    }

    public void write(java.io.Writer)
    {
        java.io.Writer $r1;
        org.dom4j.tree.AbstractNode r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.tree.AbstractNode;

        $r1 := @parameter0: java.io.Writer;

        $r2 = interfaceinvoke r0.<org.dom4j.Node: java.lang.String asXML()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        return;
    }
}
