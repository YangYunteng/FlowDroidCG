public abstract class com.google.common.hash.AbstractStreamingHasher extends com.google.common.hash.AbstractHasher
{
    public final java.nio.ByteBuffer buffer;
    public final int bufferSize;
    public final int chunkSize;

    public void <init>(int)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        int $i0;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void <init>(int,int)>($i0, $i0);

        return;
    }

    public void <init>(int, int)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        java.nio.ByteOrder $r1;
        int $i0, $i1, $i2;
        java.nio.ByteBuffer $r2;
        boolean $z0;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<com.google.common.hash.AbstractHasher: void <init>()>();

        $i2 = $i1 % $i0;

        if $i2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i2 = $i1 + 7;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i2);

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer> = $r2;

        r0.<com.google.common.hash.AbstractStreamingHasher: int bufferSize> = $i1;

        r0.<com.google.common.hash.AbstractStreamingHasher: int chunkSize> = $i0;

        return;
    }

    private void munch()
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        int $i0, $i1;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

     label1:
        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        $i0 = r0.<com.google.common.hash.AbstractStreamingHasher: int chunkSize>;

        if $i1 < $i0 goto label2;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void process(java.nio.ByteBuffer)>($r1);

        goto label1;

     label2:
        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

        return;
    }

    private void munchIfFull()
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        int $i0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 >= 8 goto label1;

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void munch()>();

     label1:
        return;
    }

    private com.google.common.hash.Hasher putBytesInternal(java.nio.ByteBuffer)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        byte $b2;
        int $i0, $i1;
        java.nio.ByteBuffer $r1, $r2;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        $r2 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        if $i0 > $i1 goto label1;

        $r2 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r1);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void munchIfFull()>();

        return r0;

     label1:
        $i0 = r0.<com.google.common.hash.AbstractStreamingHasher: int bufferSize>;

        $r2 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        $i0 = $i0 - $i1;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r2 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $b2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b2);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void munch()>();

     label4:
        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        $i1 = r0.<com.google.common.hash.AbstractStreamingHasher: int chunkSize>;

        if $i0 < $i1 goto label5;

        virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void process(java.nio.ByteBuffer)>($r1);

        goto label4;

     label5:
        $r2 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r1);

        return r0;
    }

    public final com.google.common.hash.HashCode hash()
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        com.google.common.hash.HashCode $r2;
        int $i0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void munch()>();

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 <= 0 goto label1;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void processRemaining(java.nio.ByteBuffer)>($r1);

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i0);

     label1:
        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: com.google.common.hash.HashCode makeHash()>();

        return $r2;
    }

    public abstract com.google.common.hash.HashCode makeHash();

    public abstract void process(java.nio.ByteBuffer);

    public void processRemaining(java.nio.ByteBuffer)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        int $i0, $i1;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i0);

        $i0 = r0.<com.google.common.hash.AbstractStreamingHasher: int chunkSize>;

        $i0 = $i0 + 7;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i0);

     label1:
        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $i0 = r0.<com.google.common.hash.AbstractStreamingHasher: int chunkSize>;

        if $i1 >= $i0 goto label2;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(0L);

        goto label1;

     label2:
        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i0);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void process(java.nio.ByteBuffer)>($r1);

        return;
    }

    public final com.google.common.hash.Hasher putByte(byte)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        byte $b0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $b0 := @parameter0: byte;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b0);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void munchIfFull()>();

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putByte(byte)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        com.google.common.hash.Hasher $r1;
        byte $b0;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $b0 := @parameter0: byte;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: com.google.common.hash.Hasher putByte(byte)>($b0);

        return $r1;
    }

    public final com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        java.lang.Throwable $r4;
        java.nio.ByteOrder $r2, $r3;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

     label1:
        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: com.google.common.hash.Hasher putBytesInternal(java.nio.ByteBuffer)>($r1);

     label2:
        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        return r0;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final com.google.common.hash.Hasher putBytes(byte[], int, int)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        byte[] $r1;
        java.nio.ByteOrder $r3;
        int $i0, $i1;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r1, $i1, $i0);

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: com.google.common.hash.Hasher putBytesInternal(java.nio.ByteBuffer)>($r2);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        com.google.common.hash.Hasher $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $r2 := @parameter0: java.nio.ByteBuffer;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)>($r2);

        return $r1;
    }

    public volatile com.google.common.hash.PrimitiveSink putBytes(byte[], int, int)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        byte[] $r2;
        int $i0, $i1;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $r2 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>($r2, $i0, $i1);

        return $r1;
    }

    public final com.google.common.hash.Hasher putChar(char)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        char $c0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $c0 := @parameter0: char;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>($c0);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void munchIfFull()>();

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putChar(char)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        char $c0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: com.google.common.hash.Hasher putChar(char)>($c0);

        return $r1;
    }

    public final com.google.common.hash.Hasher putInt(int)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        int $i0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void munchIfFull()>();

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putInt(int)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        int $i0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: com.google.common.hash.Hasher putInt(int)>($i0);

        return $r1;
    }

    public final com.google.common.hash.Hasher putLong(long)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        long $l0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $l0 := @parameter0: long;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l0);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void munchIfFull()>();

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putLong(long)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        long $l0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: com.google.common.hash.Hasher putLong(long)>($l0);

        return $r1;
    }

    public final com.google.common.hash.Hasher putShort(short)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        short $s0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $s0 := @parameter0: short;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s0);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHasher: void munchIfFull()>();

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putShort(short)
    {
        com.google.common.hash.AbstractStreamingHasher r0;
        short $s0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHasher;

        $s0 := @parameter0: short;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHasher: com.google.common.hash.Hasher putShort(short)>($s0);

        return $r1;
    }
}
