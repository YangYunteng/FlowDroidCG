public abstract class com.google.common.collect.FluentIterable extends java.lang.Object implements java.lang.Iterable
{
    public final com.google.common.base.Optional iterableDelegate;

    public void <init>()
    {
        com.google.common.collect.FluentIterable r0;
        com.google.common.base.Optional $r1;

        r0 := @this: com.google.common.collect.FluentIterable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();

        r0.<com.google.common.collect.FluentIterable: com.google.common.base.Optional iterableDelegate> = $r1;

        return;
    }

    public void <init>(java.lang.Iterable)
    {
        com.google.common.collect.FluentIterable r0;
        com.google.common.base.Optional $r1;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r2 := @parameter0: java.lang.Iterable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        if r0 == $r2 goto label1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        $r1 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional fromNullable(java.lang.Object)>($r2);

        r0.<com.google.common.collect.FluentIterable: com.google.common.base.Optional iterableDelegate> = $r1;

        return;
    }

    public static com.google.common.collect.FluentIterable concat(java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        com.google.common.collect.FluentIterable$3 $r1;

        $r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.collect.FluentIterable$3;

        specialinvoke $r1.<com.google.common.collect.FluentIterable$3: void <init>(java.lang.Iterable)>($r0);

        return $r1;
    }

    public static com.google.common.collect.FluentIterable concat(java.lang.Iterable, java.lang.Iterable)
    {
        java.lang.Iterable[] $r3;
        com.google.common.collect.FluentIterable $r1;
        java.lang.Iterable $r0, $r2;

        $r2 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Iterable;

        $r3 = newarray (java.lang.Iterable)[2];

        $r3[0] = $r2;

        $r3[1] = $r0;

        $r1 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concatNoDefensiveCopy(java.lang.Iterable[])>($r3);

        return $r1;
    }

    public static com.google.common.collect.FluentIterable concat(java.lang.Iterable, java.lang.Iterable, java.lang.Iterable)
    {
        java.lang.Iterable[] $r4;
        com.google.common.collect.FluentIterable $r2;
        java.lang.Iterable $r0, $r1, $r3;

        $r3 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Iterable;

        $r1 := @parameter2: java.lang.Iterable;

        $r4 = newarray (java.lang.Iterable)[3];

        $r4[0] = $r3;

        $r4[1] = $r0;

        $r4[2] = $r1;

        $r2 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concatNoDefensiveCopy(java.lang.Iterable[])>($r4);

        return $r2;
    }

    public static com.google.common.collect.FluentIterable concat(java.lang.Iterable, java.lang.Iterable, java.lang.Iterable, java.lang.Iterable)
    {
        java.lang.Iterable[] $r5;
        com.google.common.collect.FluentIterable $r3;
        java.lang.Iterable $r0, $r1, $r2, $r4;

        $r4 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: java.lang.Iterable;

        $r1 := @parameter2: java.lang.Iterable;

        $r2 := @parameter3: java.lang.Iterable;

        $r5 = newarray (java.lang.Iterable)[4];

        $r5[0] = $r4;

        $r5[1] = $r0;

        $r5[2] = $r1;

        $r5[3] = $r2;

        $r3 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concatNoDefensiveCopy(java.lang.Iterable[])>($r5);

        return $r3;
    }

    public static transient com.google.common.collect.FluentIterable concat(java.lang.Iterable[])
    {
        java.lang.Iterable[] $r0;
        java.lang.Object[] $r1;
        com.google.common.collect.FluentIterable $r2;
        int $i0;

        $r0 := @parameter0: java.lang.Iterable[];

        $i0 = lengthof $r0;

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i0);

        $r0 = (java.lang.Iterable[]) $r1;

        $r2 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concatNoDefensiveCopy(java.lang.Iterable[])>($r0);

        return $r2;
    }

    public static transient com.google.common.collect.FluentIterable concatNoDefensiveCopy(java.lang.Iterable[])
    {
        java.lang.Iterable[] $r0;
        int $i0, $i1;
        com.google.common.collect.FluentIterable$2 $r2;
        java.lang.Iterable $r1;

        $r0 := @parameter0: java.lang.Iterable[];

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r0[$i1];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r2 = new com.google.common.collect.FluentIterable$2;

        specialinvoke $r2.<com.google.common.collect.FluentIterable$2: void <init>(java.lang.Iterable[])>($r0);

        return $r2;
    }

    public static com.google.common.collect.FluentIterable 'from'(com.google.common.collect.FluentIterable)
    {
        com.google.common.collect.FluentIterable $r0;

        $r0 := @parameter0: com.google.common.collect.FluentIterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        return $r0;
    }

    public static com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)
    {
        com.google.common.collect.FluentIterable $r1;
        com.google.common.collect.FluentIterable$1 $r2;
        java.lang.Iterable $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Iterable;

        $z0 = $r0 instanceof com.google.common.collect.FluentIterable;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.collect.FluentIterable) $r0;

        return $r1;

     label1:
        $r2 = new com.google.common.collect.FluentIterable$1;

        specialinvoke $r2.<com.google.common.collect.FluentIterable$1: void <init>(java.lang.Iterable,java.lang.Iterable)>($r0, $r0);

        return $r2;
    }

    public static com.google.common.collect.FluentIterable 'from'(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] $r0;
        com.google.common.collect.FluentIterable $r2;

        $r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r2 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r1);

        return $r2;
    }

    private java.lang.Iterable getDelegate()
    {
        com.google.common.collect.FluentIterable r0;
        com.google.common.base.Optional $r2;
        java.lang.Object $r1;
        java.lang.Iterable $r3;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r2 = r0.<com.google.common.collect.FluentIterable: com.google.common.base.Optional iterableDelegate>;

        $r1 = virtualinvoke $r2.<com.google.common.base.Optional: java.lang.Object or(java.lang.Object)>(r0);

        $r3 = (java.lang.Iterable) $r1;

        return $r3;
    }

    public static com.google.common.collect.FluentIterable of()
    {
        com.google.common.collect.ImmutableList $r0;
        com.google.common.collect.FluentIterable $r1;

        $r0 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        $r1 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r0);

        return $r1;
    }

    public static transient com.google.common.collect.FluentIterable of(java.lang.Object, java.lang.Object[])
    {
        java.util.List $r2;
        java.lang.Object[] $r0;
        com.google.common.collect.FluentIterable $r3;
        java.lang.Object $r1;

        $r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.List asList(java.lang.Object,java.lang.Object[])>($r1, $r0);

        $r3 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r2);

        return $r3;
    }

    public final boolean allMatch(com.google.common.base.Predicate)
    {
        com.google.common.collect.FluentIterable r0;
        com.google.common.base.Predicate $r1;
        java.lang.Iterable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: com.google.common.base.Predicate;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $z0 = staticinvoke <com.google.common.collect.Iterables: boolean all(java.lang.Iterable,com.google.common.base.Predicate)>($r2, $r1);

        return $z0;
    }

    public final boolean anyMatch(com.google.common.base.Predicate)
    {
        com.google.common.collect.FluentIterable r0;
        com.google.common.base.Predicate $r1;
        java.lang.Iterable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: com.google.common.base.Predicate;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $z0 = staticinvoke <com.google.common.collect.Iterables: boolean any(java.lang.Iterable,com.google.common.base.Predicate)>($r2, $r1);

        return $z0;
    }

    public final com.google.common.collect.FluentIterable append(java.lang.Iterable)
    {
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r1, $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: java.lang.Iterable;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        r0 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable)>($r2, $r1);

        return r0;
    }

    public final transient com.google.common.collect.FluentIterable append(java.lang.Object[])
    {
        java.util.List $r3;
        java.lang.Object[] $r1;
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: java.lang.Object[];

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        r0 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable)>($r2, $r3);

        return r0;
    }

    public final boolean contains(java.lang.Object)
    {
        com.google.common.collect.FluentIterable r0;
        java.lang.Object $r1;
        java.lang.Iterable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $z0 = staticinvoke <com.google.common.collect.Iterables: boolean contains(java.lang.Iterable,java.lang.Object)>($r2, $r1);

        return $z0;
    }

    public final java.util.Collection copyInto(java.util.Collection)
    {
        java.util.Iterator $r4;
        com.google.common.collect.FluentIterable r0;
        java.util.Collection $r1, $r3;
        java.lang.Object $r5;
        java.lang.Iterable $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $z0 = $r2 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.google.common.collect.Collections2: java.util.Collection cast(java.lang.Iterable)>($r2);

        interfaceinvoke $r1.<java.util.Collection: boolean addAll(java.util.Collection)>($r3);

        return $r1;

     label1:
        $r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        goto label2;

     label3:
        return $r1;
    }

    public final com.google.common.collect.FluentIterable cycle()
    {
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r1 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable cycle(java.lang.Iterable)>($r1);

        r0 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r1);

        return r0;
    }

    public final com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate)
    {
        com.google.common.collect.FluentIterable r0;
        com.google.common.base.Predicate $r1;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: com.google.common.base.Predicate;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,com.google.common.base.Predicate)>($r2, $r1);

        r0 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r2);

        return r0;
    }

    public final com.google.common.collect.FluentIterable filter(java.lang.Class)
    {
        java.lang.Class $r1;
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: java.lang.Class;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,java.lang.Class)>($r2, $r1);

        r0 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r2);

        return r0;
    }

    public final com.google.common.base.Optional first()
    {
        java.util.Iterator $r2;
        com.google.common.collect.FluentIterable r0;
        com.google.common.base.Optional $r4;
        java.lang.Object $r3;
        java.lang.Iterable $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r3);

        return $r4;

     label1:
        $r4 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();

        return $r4;
    }

    public final com.google.common.base.Optional firstMatch(com.google.common.base.Predicate)
    {
        com.google.common.collect.FluentIterable r0;
        com.google.common.base.Predicate $r1;
        com.google.common.base.Optional $r3;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: com.google.common.base.Predicate;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r3 = staticinvoke <com.google.common.collect.Iterables: com.google.common.base.Optional tryFind(java.lang.Iterable,com.google.common.base.Predicate)>($r2, $r1);

        return $r3;
    }

    public final java.lang.Object get(int)
    {
        com.google.common.collect.FluentIterable r0;
        int $i0;
        java.lang.Object $r2;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.FluentIterable;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object get(java.lang.Iterable,int)>($r1, $i0);

        return $r2;
    }

    public final com.google.common.collect.ImmutableListMultimap index(com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.FluentIterable r0;
        com.google.common.collect.ImmutableListMultimap $r3;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: com.google.common.base.Function;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r3 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>($r2, $r1);

        return $r3;
    }

    public final boolean isEmpty()
    {
        java.util.Iterator $r2;
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public final java.lang.String join(com.google.common.base.Joiner)
    {
        java.lang.String $r1;
        com.google.common.collect.FluentIterable r0;
        com.google.common.base.Joiner $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r2 := @parameter0: com.google.common.base.Joiner;

        $r1 = virtualinvoke $r2.<com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>(r0);

        return $r1;
    }

    public final com.google.common.base.Optional last()
    {
        java.util.Iterator $r5;
        java.util.SortedSet $r6;
        java.lang.Iterable $r1;
        java.util.List $r2;
        com.google.common.collect.FluentIterable r0;
        com.google.common.base.Optional $r3;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r2 = (java.util.List) $r1;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();

        return $r3;

     label1:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r4);

        return $r3;

     label2:
        $r5 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $r3 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();

        return $r3;

     label3:
        $z0 = $r1 instanceof java.util.SortedSet;

        if $z0 == 0 goto label4;

        $r6 = (java.util.SortedSet) $r1;

        $r4 = interfaceinvoke $r6.<java.util.SortedSet: java.lang.Object last()>();

        $r3 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r4);

        return $r3;

     label4:
        $r4 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label4;

        $r3 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r4);

        return $r3;
    }

    public final com.google.common.collect.FluentIterable limit(int)
    {
        int $i0;
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.FluentIterable;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r1 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable limit(java.lang.Iterable,int)>($r1, $i0);

        r0 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r1);

        return r0;
    }

    public final int size()
    {
        int $i0;
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $i0 = staticinvoke <com.google.common.collect.Iterables: int size(java.lang.Iterable)>($r1);

        return $i0;
    }

    public final com.google.common.collect.FluentIterable skip(int)
    {
        int $i0;
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.FluentIterable;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r1 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable skip(java.lang.Iterable,int)>($r1, $i0);

        r0 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r1);

        return r0;
    }

    public final java.util.stream.Stream stream()
    {
        java.util.stream.Stream $r2;
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r2 = staticinvoke <com.google.common.collect.Streams: java.util.stream.Stream stream(java.lang.Iterable)>($r1);

        return $r2;
    }

    public final java.lang.Object[] toArray(java.lang.Class)
    {
        java.lang.Object[] $r3;
        com.google.common.collect.FluentIterable r0;
        java.lang.Class $r1;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: java.lang.Class;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r3 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Class)>($r2, $r1);

        return $r3;
    }

    public final com.google.common.collect.ImmutableList toList()
    {
        com.google.common.collect.ImmutableList $r2;
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r1);

        return $r2;
    }

    public final com.google.common.collect.ImmutableMap toMap(com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.FluentIterable r0;
        com.google.common.collect.ImmutableMap $r3;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: com.google.common.base.Function;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r3 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap toMap(java.lang.Iterable,com.google.common.base.Function)>($r2, $r1);

        return $r3;
    }

    public final com.google.common.collect.ImmutableMultiset toMultiset()
    {
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r1;
        com.google.common.collect.ImmutableMultiset $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableMultiset: com.google.common.collect.ImmutableMultiset copyOf(java.lang.Iterable)>($r1);

        return $r2;
    }

    public final com.google.common.collect.ImmutableSet toSet()
    {
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable)>($r1);

        return $r2;
    }

    public final com.google.common.collect.ImmutableList toSortedList(java.util.Comparator)
    {
        com.google.common.collect.Ordering $r2;
        com.google.common.collect.ImmutableList $r4;
        com.google.common.collect.FluentIterable r0;
        java.util.Comparator $r1;
        java.lang.Iterable $r3;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: java.util.Comparator;

        $r2 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering 'from'(java.util.Comparator)>($r1);

        $r3 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r4 = virtualinvoke $r2.<com.google.common.collect.Ordering: com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable)>($r3);

        return $r4;
    }

    public final com.google.common.collect.ImmutableSortedSet toSortedSet(java.util.Comparator)
    {
        com.google.common.collect.ImmutableSortedSet $r3;
        com.google.common.collect.FluentIterable r0;
        java.util.Comparator $r1;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: java.util.Comparator;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.lang.Iterable)>($r1, $r2);

        return $r3;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r1;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.String toString(java.lang.Iterable)>($r1);

        return $r2;
    }

    public final com.google.common.collect.FluentIterable transform(com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.FluentIterable r0;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: com.google.common.base.Function;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>($r2, $r1);

        r0 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable 'from'(java.lang.Iterable)>($r2);

        return r0;
    }

    public com.google.common.collect.FluentIterable transformAndConcat(com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.FluentIterable r0;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: com.google.common.base.Function;

        r0 = virtualinvoke r0.<com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable transform(com.google.common.base.Function)>($r1);

        r0 = staticinvoke <com.google.common.collect.FluentIterable: com.google.common.collect.FluentIterable concat(java.lang.Iterable)>(r0);

        return r0;
    }

    public final com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.FluentIterable r0;
        com.google.common.collect.ImmutableMap $r3;
        java.lang.Iterable $r2;

        r0 := @this: com.google.common.collect.FluentIterable;

        $r1 := @parameter0: com.google.common.base.Function;

        $r2 = specialinvoke r0.<com.google.common.collect.FluentIterable: java.lang.Iterable getDelegate()>();

        $r3 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap uniqueIndex(java.lang.Iterable,com.google.common.base.Function)>($r2, $r1);

        return $r3;
    }
}
