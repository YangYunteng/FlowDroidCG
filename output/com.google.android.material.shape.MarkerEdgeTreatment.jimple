public final class com.google.android.material.shape.MarkerEdgeTreatment extends com.google.android.material.shape.EdgeTreatment
{
    public final float radius;

    public void <init>(float)
    {
        float $f0;
        com.google.android.material.shape.MarkerEdgeTreatment r0;

        r0 := @this: com.google.android.material.shape.MarkerEdgeTreatment;

        $f0 := @parameter0: float;

        specialinvoke r0.<com.google.android.material.shape.EdgeTreatment: void <init>()>();

        $f0 = $f0 - 0.001F;

        r0.<com.google.android.material.shape.MarkerEdgeTreatment: float radius> = $f0;

        return;
    }

    public boolean forceIntersection()
    {
        com.google.android.material.shape.MarkerEdgeTreatment r0;

        r0 := @this: com.google.android.material.shape.MarkerEdgeTreatment;

        return 1;
    }

    public void getEdgePath(float, float, float, com.google.android.material.shape.ShapePath)
    {
        float $f0, $f1, $f2, $f3, $f4;
        com.google.android.material.shape.ShapePath $r1;
        com.google.android.material.shape.MarkerEdgeTreatment r0;
        double $d0, $d1;

        r0 := @this: com.google.android.material.shape.MarkerEdgeTreatment;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $r1 := @parameter3: com.google.android.material.shape.ShapePath;

        $f0 = r0.<com.google.android.material.shape.MarkerEdgeTreatment: float radius>;

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 * $d1;

        $d0 = $d0 / 2.0;

        $f2 = (float) $d0;

        $f0 = r0.<com.google.android.material.shape.MarkerEdgeTreatment: float radius>;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, 2.0);

        $d1 = (double) $f2;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, 2.0);

        $d0 = $d0 - $d1;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f0 = (float) $d0;

        $f3 = $f1 - $f2;

        $f4 = r0.<com.google.android.material.shape.MarkerEdgeTreatment: float radius>;

        $d0 = (double) $f4;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 * $d1;

        $f4 = r0.<com.google.android.material.shape.MarkerEdgeTreatment: float radius>;

        $d1 = (double) $f4;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 - $d1;

        $d0 = neg $d0;

        $f4 = (float) $d0;

        $f4 = $f4 + $f0;

        virtualinvoke $r1.<com.google.android.material.shape.ShapePath: void reset(float,float)>($f3, $f4);

        $f3 = r0.<com.google.android.material.shape.MarkerEdgeTreatment: float radius>;

        $d0 = (double) $f3;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 * $d1;

        $f3 = r0.<com.google.android.material.shape.MarkerEdgeTreatment: float radius>;

        $d1 = (double) $f3;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 - $d1;

        $d0 = neg $d0;

        $f3 = (float) $d0;

        virtualinvoke $r1.<com.google.android.material.shape.ShapePath: void lineTo(float,float)>($f1, $f3);

        $f1 = $f1 + $f2;

        $f2 = r0.<com.google.android.material.shape.MarkerEdgeTreatment: float radius>;

        $d0 = (double) $f2;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>(2.0);

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 * $d1;

        $f2 = r0.<com.google.android.material.shape.MarkerEdgeTreatment: float radius>;

        $d1 = (double) $f2;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 - $d1;

        $d0 = neg $d0;

        $f2 = (float) $d0;

        $f0 = $f2 + $f0;

        virtualinvoke $r1.<com.google.android.material.shape.ShapePath: void lineTo(float,float)>($f1, $f0);

        return;
    }
}
