public abstract class com.google.common.collect.AbstractBiMap extends com.google.common.collect.ForwardingMap implements com.google.common.collect.BiMap, java.io.Serializable
{
    public static final long serialVersionUID;
    public transient java.util.Map delegate;
    public transient java.util.Set entrySet;
    public transient com.google.common.collect.AbstractBiMap inverse;
    public transient java.util.Set keySet;
    public transient java.util.Set valueSet;

    public void <init>(java.util.Map, com.google.common.collect.AbstractBiMap)
    {
        com.google.common.collect.AbstractBiMap r0, $r2;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: com.google.common.collect.AbstractBiMap;

        specialinvoke r0.<com.google.common.collect.ForwardingMap: void <init>()>();

        r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate> = $r1;

        r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap inverse> = $r2;

        return;
    }

    public void <init>(java.util.Map, com.google.common.collect.AbstractBiMap, com.google.common.collect.AbstractBiMap$1)
    {
        com.google.common.collect.AbstractBiMap$1 $r3;
        com.google.common.collect.AbstractBiMap r0, $r2;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: com.google.common.collect.AbstractBiMap;

        $r3 := @parameter2: com.google.common.collect.AbstractBiMap$1;

        specialinvoke r0.<com.google.common.collect.AbstractBiMap: void <init>(java.util.Map,com.google.common.collect.AbstractBiMap)>($r1, $r2);

        return;
    }

    public void <init>(java.util.Map, java.util.Map)
    {
        com.google.common.collect.AbstractBiMap r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: java.util.Map;

        specialinvoke r0.<com.google.common.collect.ForwardingMap: void <init>()>();

        virtualinvoke r0.<com.google.common.collect.AbstractBiMap: void setDelegates(java.util.Map,java.util.Map)>($r1, $r2);

        return;
    }

    public static java.util.Map access$100(com.google.common.collect.AbstractBiMap)
    {
        com.google.common.collect.AbstractBiMap $r0;
        java.util.Map r1;

        $r0 := @parameter0: com.google.common.collect.AbstractBiMap;

        r1 = $r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        return r1;
    }

    public static java.lang.Object access$200(com.google.common.collect.AbstractBiMap, java.lang.Object)
    {
        java.lang.Object $r0;
        com.google.common.collect.AbstractBiMap $r1;

        $r1 := @parameter0: com.google.common.collect.AbstractBiMap;

        $r0 := @parameter1: java.lang.Object;

        $r0 = specialinvoke $r1.<com.google.common.collect.AbstractBiMap: java.lang.Object removeFromBothMaps(java.lang.Object)>($r0);

        return $r0;
    }

    public static void access$500(com.google.common.collect.AbstractBiMap, java.lang.Object, boolean, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.AbstractBiMap $r0;
        java.lang.Object $r1, $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: java.lang.Object;

        $r3 := @parameter4: java.lang.Object;

        specialinvoke $r0.<com.google.common.collect.AbstractBiMap: void updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object)>($r1, $z0, $r2, $r3);

        return;
    }

    public static void access$600(com.google.common.collect.AbstractBiMap, java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.AbstractBiMap $r0;

        $r0 := @parameter0: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter1: java.lang.Object;

        specialinvoke $r0.<com.google.common.collect.AbstractBiMap: void removeFromInverseMap(java.lang.Object)>($r1);

        return;
    }

    private java.lang.Object putInBothMaps(java.lang.Object, java.lang.Object, boolean)
    {
        com.google.common.collect.BiMap $r4;
        com.google.common.collect.AbstractBiMap r0;
        java.util.Map $r5;
        java.lang.Object $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        virtualinvoke r0.<com.google.common.collect.AbstractBiMap: java.lang.Object checkKey(java.lang.Object)>($r1);

        virtualinvoke r0.<com.google.common.collect.AbstractBiMap: java.lang.Object checkValue(java.lang.Object)>($r2);

        $z1 = virtualinvoke r0.<com.google.common.collect.ForwardingMap: boolean containsKey(java.lang.Object)>($r1);

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.google.common.collect.ForwardingMap: java.lang.Object get(java.lang.Object)>($r1);

        $z2 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z2 == 0 goto label1;

        return $r2;

     label1:
        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.BiMap inverse()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<com.google.common.collect.AbstractBiMap: boolean containsValue(java.lang.Object)>($r2);

        $z0 = $z0 ^ 1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "value already present: %s", $r2);

     label3:
        $r5 = r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        $r3 = interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        specialinvoke r0.<com.google.common.collect.AbstractBiMap: void updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object)>($r1, $z1, $r3, $r2);

        return $r3;
    }

    private java.lang.Object removeFromBothMaps(java.lang.Object)
    {
        java.lang.Object $r2;
        com.google.common.collect.AbstractBiMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        specialinvoke r0.<com.google.common.collect.AbstractBiMap: void removeFromInverseMap(java.lang.Object)>($r2);

        return $r2;
    }

    private void removeFromInverseMap(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.AbstractBiMap r0;
        java.util.Map $r2;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.lang.Object;

        r0 = r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap inverse>;

        $r2 = r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }

    private void updateInverseMap(java.lang.Object, boolean, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.AbstractBiMap r0;
        java.util.Map $r4;
        java.lang.Object $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: java.lang.Object;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.google.common.collect.AbstractBiMap: void removeFromInverseMap(java.lang.Object)>($r2);

     label1:
        r0 = r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap inverse>;

        $r4 = r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        return;
    }

    public java.lang.Object checkKey(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.AbstractBiMap r0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.lang.Object;

        return $r1;
    }

    public java.lang.Object checkValue(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.AbstractBiMap r0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.lang.Object;

        return $r1;
    }

    public void clear()
    {
        com.google.common.collect.AbstractBiMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 = r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        r0 = r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap inverse>;

        $r1 = r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.AbstractBiMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.lang.Object;

        r0 = r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap inverse>;

        $z0 = virtualinvoke r0.<com.google.common.collect.ForwardingMap: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public volatile java.lang.Object delegate()
    {
        com.google.common.collect.AbstractBiMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate()>();

        return $r1;
    }

    public java.util.Map delegate()
    {
        com.google.common.collect.AbstractBiMap r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        r1 = r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        return r1;
    }

    public java.util.Set entrySet()
    {
        java.util.Set $r1;
        com.google.common.collect.AbstractBiMap r0;
        com.google.common.collect.AbstractBiMap$EntrySet $r2;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 = r0.<com.google.common.collect.AbstractBiMap: java.util.Set entrySet>;

        if $r1 != null goto label1;

        $r2 = new com.google.common.collect.AbstractBiMap$EntrySet;

        specialinvoke $r2.<com.google.common.collect.AbstractBiMap$EntrySet: void <init>(com.google.common.collect.AbstractBiMap,com.google.common.collect.AbstractBiMap$1)>(r0, null);

        r0.<com.google.common.collect.AbstractBiMap: java.util.Set entrySet> = $r2;

        return $r2;

     label1:
        return $r1;
    }

    public java.util.Iterator entrySetIterator()
    {
        com.google.common.collect.AbstractBiMap$1 $r1;
        java.util.Iterator $r4;
        com.google.common.collect.AbstractBiMap r0;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r2 = r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r1 = new com.google.common.collect.AbstractBiMap$1;

        specialinvoke $r1.<com.google.common.collect.AbstractBiMap$1: void <init>(com.google.common.collect.AbstractBiMap,java.util.Iterator)>(r0, $r4);

        return $r1;
    }

    public java.lang.Object forcePut(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        com.google.common.collect.AbstractBiMap r0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.common.collect.AbstractBiMap: java.lang.Object putInBothMaps(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 1);

        return $r2;
    }

    public com.google.common.collect.BiMap inverse()
    {
        com.google.common.collect.AbstractBiMap r0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        r0 = r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap inverse>;

        return r0;
    }

    public java.util.Set keySet()
    {
        com.google.common.collect.AbstractBiMap$KeySet $r2;
        java.util.Set $r1;
        com.google.common.collect.AbstractBiMap r0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 = r0.<com.google.common.collect.AbstractBiMap: java.util.Set keySet>;

        if $r1 != null goto label1;

        $r2 = new com.google.common.collect.AbstractBiMap$KeySet;

        specialinvoke $r2.<com.google.common.collect.AbstractBiMap$KeySet: void <init>(com.google.common.collect.AbstractBiMap,com.google.common.collect.AbstractBiMap$1)>(r0, null);

        r0.<com.google.common.collect.AbstractBiMap: java.util.Set keySet> = $r2;

        return $r2;

     label1:
        return $r1;
    }

    public com.google.common.collect.AbstractBiMap makeInverse(java.util.Map)
    {
        com.google.common.collect.AbstractBiMap$Inverse $r2;
        com.google.common.collect.AbstractBiMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.util.Map;

        $r2 = new com.google.common.collect.AbstractBiMap$Inverse;

        specialinvoke $r2.<com.google.common.collect.AbstractBiMap$Inverse: void <init>(java.util.Map,com.google.common.collect.AbstractBiMap)>($r1, r0);

        return $r2;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r1, $r2;
        com.google.common.collect.AbstractBiMap r0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<com.google.common.collect.AbstractBiMap: java.lang.Object putInBothMaps(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 0);

        return $r2;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry $r5;
        java.util.Iterator $r3;
        com.google.common.collect.AbstractBiMap r0;
        java.util.Set $r2;
        java.util.Map $r1;
        java.lang.Object $r4, $r6;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<com.google.common.collect.AbstractBiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.Object $r1;
        com.google.common.collect.AbstractBiMap r0;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.ForwardingMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<com.google.common.collect.AbstractBiMap: java.lang.Object removeFromBothMaps(java.lang.Object)>($r1);

        return $r1;

     label1:
        return null;
    }

    public void replaceAll(java.util.function.BiFunction)
    {
        java.util.Map$Entry $r6, $r8;
        java.util.Iterator $r5;
        com.google.common.collect.AbstractBiMap r0, $r3;
        java.util.function.BiFunction $r1;
        java.util.Set $r4;
        java.lang.IllegalArgumentException $r10;
        java.util.Map $r2;
        java.lang.Object $r7, $r9;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;
        boolean $z0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: java.util.function.BiFunction;

        $r2 = r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        interfaceinvoke $r2.<java.util.Map: void replaceAll(java.util.function.BiFunction)>($r1);

        $r3 = r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap inverse>;

        $r2 = $r3.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r2 = r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        $r6 = null;

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r7;

        $r7 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap inverse>;

        $r2 = $r3.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        $r7 = interfaceinvoke $r2.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r9, $r7);

        if $r7 == null goto label1;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        $r6 = $r8;

        goto label1;

     label2:
        if $r6 != null goto label3;

        return;

     label3:
        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value already present: ");

        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        goto label4;

     label4:
        throw $r10;
    }

    public void setDelegates(java.util.Map, java.util.Map)
    {
        com.google.common.collect.AbstractBiMap r0, $r4;
        java.util.Map $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r2 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Map;

        $r3 = r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate>;

        $z0 = 1;

        if $r3 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        $r4 = r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap inverse>;

        if $r4 != null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        $z1 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        if $r2 == $r1 goto label5;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        r0.<com.google.common.collect.AbstractBiMap: java.util.Map delegate> = $r2;

        $r4 = virtualinvoke r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap makeInverse(java.util.Map)>($r1);

        r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap inverse> = $r4;

        return;
    }

    public void setInverse(com.google.common.collect.AbstractBiMap)
    {
        com.google.common.collect.AbstractBiMap r0, $r1;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 := @parameter0: com.google.common.collect.AbstractBiMap;

        r0.<com.google.common.collect.AbstractBiMap: com.google.common.collect.AbstractBiMap inverse> = $r1;

        return;
    }

    public volatile java.util.Collection values()
    {
        java.util.Set $r1;
        com.google.common.collect.AbstractBiMap r0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.AbstractBiMap: java.util.Set values()>();

        return $r1;
    }

    public java.util.Set values()
    {
        java.util.Set $r1;
        com.google.common.collect.AbstractBiMap$ValueSet $r2;
        com.google.common.collect.AbstractBiMap r0;

        r0 := @this: com.google.common.collect.AbstractBiMap;

        $r1 = r0.<com.google.common.collect.AbstractBiMap: java.util.Set valueSet>;

        if $r1 != null goto label1;

        $r2 = new com.google.common.collect.AbstractBiMap$ValueSet;

        specialinvoke $r2.<com.google.common.collect.AbstractBiMap$ValueSet: void <init>(com.google.common.collect.AbstractBiMap,com.google.common.collect.AbstractBiMap$1)>(r0, null);

        r0.<com.google.common.collect.AbstractBiMap: java.util.Set valueSet> = $r2;

        return $r2;

     label1:
        return $r1;
    }
}
