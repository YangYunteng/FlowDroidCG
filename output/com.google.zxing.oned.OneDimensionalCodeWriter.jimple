public abstract class com.google.zxing.oned.OneDimensionalCodeWriter extends java.lang.Object implements com.google.zxing.Writer
{

    public void <init>()
    {
        com.google.zxing.oned.OneDimensionalCodeWriter r0;

        r0 := @this: com.google.zxing.oned.OneDimensionalCodeWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int appendPattern(boolean[], int, int[], boolean)
    {
        boolean[] $r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        $r0 := @parameter0: boolean[];

        $i1 := @parameter1: int;

        $r1 := @parameter2: int[];

        $z0 := @parameter3: boolean;

        $i0 = lengthof $r1;

        $i2 = $i1;

        $i3 = 0;

        $i4 = 0;

     label1:
        if $i3 >= $i0 goto label6;

        $i1 = $r1[$i3];

        $i5 = $i2;

        $i6 = 0;

     label2:
        if $i6 >= $i1 goto label3;

        $r0[$i5] = $z0;

        $i6 = $i6 + 1;

        $i5 = $i5 + 1;

        goto label2;

     label3:
        $i4 = $i4 + $i1;

        if $z0 != 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        $i3 = $i3 + 1;

        $i2 = $i5;

        goto label1;

     label6:
        return $i4;
    }

    public static com.google.zxing.common.BitMatrix renderResult(boolean[], int, int, int)
    {
        boolean[] $r0;
        int $i0, $i1, $i2, $i3, $i4;
        com.google.zxing.common.BitMatrix $r1;
        boolean $z0;

        $r0 := @parameter0: boolean[];

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i0 = lengthof $r0;

        $i4 = $i3 + $i0;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i4);

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i2);

        $i2 = $i3 / $i4;

        $i4 = $i0 * $i2;

        $i4 = $i3 - $i4;

        $r1 = new com.google.zxing.common.BitMatrix;

        specialinvoke $r1.<com.google.zxing.common.BitMatrix: void <init>(int,int)>($i3, $i1);

        $i3 = $i4 / 2;

        $i4 = 0;

     label1:
        if $i4 >= $i0 goto label3;

        $z0 = $r0[$i4];

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<com.google.zxing.common.BitMatrix: void setRegion(int,int,int,int)>($i3, 0, $i2, $i1);

     label2:
        $i4 = $i4 + 1;

        $i3 = $i3 + $i2;

        goto label1;

     label3:
        return $r1;
    }

    public final com.google.zxing.common.BitMatrix encode(java.lang.String, com.google.zxing.BarcodeFormat, int, int)
    {
        int $i0, $i1;
        com.google.zxing.common.BitMatrix $r2;
        java.lang.String $r3;
        com.google.zxing.BarcodeFormat $r1;
        com.google.zxing.oned.OneDimensionalCodeWriter r0;

        r0 := @this: com.google.zxing.oned.OneDimensionalCodeWriter;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.google.zxing.BarcodeFormat;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 = virtualinvoke r0.<com.google.zxing.oned.OneDimensionalCodeWriter: com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map)>($r3, $r1, $i0, $i1, null);

        return $r2;
    }

    public com.google.zxing.common.BitMatrix encode(java.lang.String, com.google.zxing.BarcodeFormat, int, int, java.util.Map)
    {
        boolean[] $r7;
        java.lang.IllegalArgumentException $r9;
        java.lang.Integer $r6;
        com.google.zxing.EncodeHintType $r1;
        java.util.Map $r4;
        int $i0, $i1, $i2;
        java.lang.Object $r5;
        com.google.zxing.common.BitMatrix $r8;
        java.lang.StringBuilder $r10;
        java.lang.String $r2;
        com.google.zxing.BarcodeFormat $r3;
        com.google.zxing.oned.OneDimensionalCodeWriter r0;
        boolean $z0;

        r0 := @this: com.google.zxing.oned.OneDimensionalCodeWriter;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: com.google.zxing.BarcodeFormat;

        $i1 := @parameter2: int;

        $i0 := @parameter3: int;

        $r4 := @parameter4: java.util.Map;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        if $i1 < 0 goto label2;

        if $i0 < 0 goto label2;

        $i2 = virtualinvoke r0.<com.google.zxing.oned.OneDimensionalCodeWriter: int getDefaultMargin()>();

        if $r4 == null goto label1;

        $r1 = <com.google.zxing.EncodeHintType: com.google.zxing.EncodeHintType MARGIN>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (java.lang.Integer) $r5;

        if $r6 == null goto label1;

        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label1:
        $r7 = virtualinvoke r0.<com.google.zxing.oned.OneDimensionalCodeWriter: boolean[] encode(java.lang.String)>($r2);

        $r8 = staticinvoke <com.google.zxing.oned.OneDimensionalCodeWriter: com.google.zxing.common.BitMatrix renderResult(boolean[],int,int,int)>($r7, $i1, $i0, $i2);

        return $r8;

     label2:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative size is not allowed. Input: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(120);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r9;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Found empty contents");

        throw $r9;
    }

    public abstract boolean[] encode(java.lang.String);

    public int getDefaultMargin()
    {
        com.google.zxing.oned.OneDimensionalCodeWriter r0;

        r0 := @this: com.google.zxing.oned.OneDimensionalCodeWriter;

        return 10;
    }
}
