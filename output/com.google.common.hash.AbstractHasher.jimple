public abstract class com.google.common.hash.AbstractHasher extends java.lang.Object implements com.google.common.hash.Hasher
{

    public void <init>()
    {
        com.google.common.hash.AbstractHasher r0;

        r0 := @this: com.google.common.hash.AbstractHasher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final com.google.common.hash.Hasher putBoolean(boolean)
    {
        com.google.common.hash.AbstractHasher r0;
        byte $b0;
        com.google.common.hash.Hasher $r1;
        boolean $z0;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $z0 := @parameter0: boolean;

        $b0 = (byte) $z0;

        $r1 = interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b0);

        return $r1;
    }

    public volatile com.google.common.hash.PrimitiveSink putBoolean(boolean)
    {
        com.google.common.hash.AbstractHasher r0;
        com.google.common.hash.Hasher $r1;
        boolean $z0;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putBoolean(boolean)>($z0);

        return $r1;
    }

    public volatile com.google.common.hash.PrimitiveSink putByte(byte)
    {
        com.google.common.hash.PrimitiveSink $r1;
        com.google.common.hash.AbstractHasher r0;
        byte $b0;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $b0 := @parameter0: byte;

        $r1 = staticinvoke <c.i.b.e.d: com.google.common.hash.PrimitiveSink a(com.google.common.hash.Hasher,byte)>(r0, $b0);

        return $r1;
    }

    public com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)
    {
        byte[] $r2;
        com.google.common.hash.AbstractHasher r0;
        byte $b2;
        int $i0, $i1;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>($r2, $i0, $i1);

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i0);

        return r0;

     label1:
        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

     label2:
        if $i0 <= 0 goto label3;

        $b2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b2);

        $i1 = -1;

        $i0 = $i0 + $i1;

        goto label2;

     label3:
        return r0;
    }

    public com.google.common.hash.Hasher putBytes(byte[])
    {
        byte[] $r2;
        com.google.common.hash.AbstractHasher r0;
        int $i0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $r2 := @parameter0: byte[];

        $i0 = lengthof $r2;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>($r2, 0, $i0);

        return $r1;
    }

    public com.google.common.hash.Hasher putBytes(byte[], int, int)
    {
        byte[] $r1;
        com.google.common.hash.AbstractHasher r0;
        byte $b4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i2, $i3);

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $i3 = $i0 + $i2;

        $b4 = $r1[$i3];

        interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b4);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer)
    {
        com.google.common.hash.AbstractHasher r0;
        com.google.common.hash.Hasher $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $r2 := @parameter0: java.nio.ByteBuffer;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)>($r2);

        return $r1;
    }

    public volatile com.google.common.hash.PrimitiveSink putBytes(byte[])
    {
        byte[] $r2;
        com.google.common.hash.AbstractHasher r0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $r2 := @parameter0: byte[];

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putBytes(byte[])>($r2);

        return $r1;
    }

    public volatile com.google.common.hash.PrimitiveSink putBytes(byte[], int, int)
    {
        byte[] $r2;
        com.google.common.hash.AbstractHasher r0;
        int $i0, $i1;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $r2 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>($r2, $i0, $i1);

        return $r1;
    }

    public com.google.common.hash.Hasher putChar(char)
    {
        com.google.common.hash.AbstractHasher r0;
        byte $b0;
        int $i2;
        char $c1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $c1 := @parameter0: char;

        $b0 = (byte) $c1;

        interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b0);

        $i2 = (int) $c1;

        $i2 = $i2 >>> 8;

        $b0 = (byte) $i2;

        interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b0);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putChar(char)
    {
        char $c0;
        com.google.common.hash.AbstractHasher r0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putChar(char)>($c0);

        return $r1;
    }

    public final com.google.common.hash.Hasher putDouble(double)
    {
        com.google.common.hash.AbstractHasher r0;
        long $l0;
        com.google.common.hash.Hasher $r1;
        double $d0;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putLong(long)>($l0);

        return $r1;
    }

    public volatile com.google.common.hash.PrimitiveSink putDouble(double)
    {
        com.google.common.hash.AbstractHasher r0;
        com.google.common.hash.Hasher $r1;
        double $d0;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putDouble(double)>($d0);

        return $r1;
    }

    public final com.google.common.hash.Hasher putFloat(float)
    {
        com.google.common.hash.AbstractHasher r0;
        int $i0;
        float $f0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f0);

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putInt(int)>($i0);

        return $r1;
    }

    public volatile com.google.common.hash.PrimitiveSink putFloat(float)
    {
        float $f0;
        com.google.common.hash.AbstractHasher r0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putFloat(float)>($f0);

        return $r1;
    }

    public com.google.common.hash.Hasher putInt(int)
    {
        com.google.common.hash.AbstractHasher r0;
        byte $b1;
        int $i0, $i2;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $i0 := @parameter0: int;

        $b1 = (byte) $i0;

        interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b1);

        $i2 = $i0 >>> 8;

        $b1 = (byte) $i2;

        interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b1);

        $i2 = $i0 >>> 16;

        $b1 = (byte) $i2;

        interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b1);

        $i0 = $i0 >>> 24;

        $b1 = (byte) $i0;

        interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b1);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putInt(int)
    {
        int $i0;
        com.google.common.hash.AbstractHasher r0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putInt(int)>($i0);

        return $r1;
    }

    public com.google.common.hash.Hasher putLong(long)
    {
        com.google.common.hash.AbstractHasher r0;
        byte $b4;
        int $i1, $i2;
        long $l0, $l3;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $l0 := @parameter0: long;

        $i2 = 0;

     label1:
        if $i2 >= 64 goto label2;

        $l3 = $l0 >>> $i2;

        $i1 = (int) $l3;

        $b4 = (byte) $i1;

        interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b4);

        $i2 = $i2 + 8;

        goto label1;

     label2:
        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putLong(long)
    {
        long $l0;
        com.google.common.hash.AbstractHasher r0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putLong(long)>($l0);

        return $r1;
    }

    public com.google.common.hash.Hasher putObject(java.lang.Object, com.google.common.hash.Funnel)
    {
        com.google.common.hash.Funnel $r2;
        java.lang.Object $r1;
        com.google.common.hash.AbstractHasher r0;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.google.common.hash.Funnel;

        interfaceinvoke $r2.<com.google.common.hash.Funnel: void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink)>($r1, r0);

        return r0;
    }

    public com.google.common.hash.Hasher putShort(short)
    {
        short $s1;
        com.google.common.hash.AbstractHasher r0;
        byte $b0;
        int $i2;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $s1 := @parameter0: short;

        $b0 = (byte) $s1;

        interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b0);

        $i2 = (int) $s1;

        $i2 = $i2 >>> 8;

        $b0 = (byte) $i2;

        interfaceinvoke r0.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putByte(byte)>($b0);

        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putShort(short)
    {
        short $s0;
        com.google.common.hash.AbstractHasher r0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $s0 := @parameter0: short;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putShort(short)>($s0);

        return $r1;
    }

    public com.google.common.hash.Hasher putString(java.lang.CharSequence, java.nio.charset.Charset)
    {
        byte[] $r4;
        com.google.common.hash.AbstractHasher r0;
        java.nio.charset.Charset $r1;
        java.lang.CharSequence $r2;
        java.lang.String $r3;
        com.google.common.hash.Hasher $r5;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $r2 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r5 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putBytes(byte[])>($r4);

        return $r5;
    }

    public volatile com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence, java.nio.charset.Charset)
    {
        com.google.common.hash.AbstractHasher r0;
        java.nio.charset.Charset $r1;
        java.lang.CharSequence $r3;
        com.google.common.hash.Hasher $r2;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $r3 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset)>($r3, $r1);

        return $r2;
    }

    public com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence)
    {
        com.google.common.hash.AbstractHasher r0;
        java.lang.CharSequence $r1;
        int $i0, $i1;
        char $c2;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putChar(char)>($c2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public volatile com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence)
    {
        com.google.common.hash.AbstractHasher r0;
        com.google.common.hash.Hasher $r1;
        java.lang.CharSequence $r2;

        r0 := @this: com.google.common.hash.AbstractHasher;

        $r2 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence)>($r2);

        return $r1;
    }
}
