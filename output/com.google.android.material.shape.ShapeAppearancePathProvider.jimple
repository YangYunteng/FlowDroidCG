public class com.google.android.material.shape.ShapeAppearancePathProvider extends java.lang.Object
{
    public final android.graphics.Path boundsPath;
    public final com.google.android.material.shape.ShapePath[] cornerPaths;
    public final android.graphics.Matrix[] cornerTransforms;
    public boolean edgeIntersectionCheckEnabled;
    public final android.graphics.Matrix[] edgeTransforms;
    public final android.graphics.Path overlappedEdgePath;
    public final android.graphics.PointF pointF;
    public final float[] scratch;
    public final float[] scratch2;
    public final com.google.android.material.shape.ShapePath shapePath;

    public void <init>()
    {
        android.graphics.Matrix[] $r2;
        android.graphics.Path $r4;
        android.graphics.PointF $r3;
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        float[] $r6;
        com.google.android.material.shape.ShapePath[] $r1;
        int $i0;
        com.google.android.material.shape.ShapePath $r5;
        android.graphics.Matrix $r7;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (com.google.android.material.shape.ShapePath)[4];

        r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths> = $r1;

        $r2 = newarray (android.graphics.Matrix)[4];

        r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms> = $r2;

        $r2 = newarray (android.graphics.Matrix)[4];

        r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] edgeTransforms> = $r2;

        $r3 = new android.graphics.PointF;

        specialinvoke $r3.<android.graphics.PointF: void <init>()>();

        r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.PointF pointF> = $r3;

        $r4 = new android.graphics.Path;

        specialinvoke $r4.<android.graphics.Path: void <init>()>();

        r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Path overlappedEdgePath> = $r4;

        $r4 = new android.graphics.Path;

        specialinvoke $r4.<android.graphics.Path: void <init>()>();

        r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Path boundsPath> = $r4;

        $r5 = new com.google.android.material.shape.ShapePath;

        specialinvoke $r5.<com.google.android.material.shape.ShapePath: void <init>()>();

        r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath shapePath> = $r5;

        $r6 = newarray (float)[2];

        r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch> = $r6;

        $r6 = newarray (float)[2];

        r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch2> = $r6;

        r0.<com.google.android.material.shape.ShapeAppearancePathProvider: boolean edgeIntersectionCheckEnabled> = 1;

        $i0 = 0;

     label1:
        if $i0 >= 4 goto label2;

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r5 = new com.google.android.material.shape.ShapePath;

        specialinvoke $r5.<com.google.android.material.shape.ShapePath: void <init>()>();

        $r1[$i0] = $r5;

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r7 = new android.graphics.Matrix;

        specialinvoke $r7.<android.graphics.Matrix: void <init>()>();

        $r2[$i0] = $r7;

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] edgeTransforms>;

        $r7 = new android.graphics.Matrix;

        specialinvoke $r7.<android.graphics.Matrix: void <init>()>();

        $r2[$i0] = $r7;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    private float angleOfEdge(int)
    {
        int $i0;
        float $f0;
        com.google.android.material.shape.ShapeAppearancePathProvider r0;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $i0 := @parameter0: int;

        $i0 = $i0 + 1;

        $i0 = $i0 * 90;

        $f0 = (float) $i0;

        return $f0;
    }

    private void appendCornerPath(com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec, int)
    {
        com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec $r1;
        android.graphics.Matrix[] $r5;
        android.graphics.Path $r7;
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        float[] $r2;
        com.google.android.material.shape.ShapePath[] $r3;
        com.google.android.material.shape.ShapeAppearancePathProvider$PathListener $r8;
        int $i0;
        float $f0, $f1;
        com.google.android.material.shape.ShapePath $r4;
        android.graphics.Matrix $r6;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $r1 := @parameter0: com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec;

        $i0 := @parameter1: int;

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r4 = $r3[$i0];

        $f0 = virtualinvoke $r4.<com.google.android.material.shape.ShapePath: float getStartX()>();

        $r2[0] = $f0;

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r4 = $r3[$i0];

        $f0 = virtualinvoke $r4.<com.google.android.material.shape.ShapePath: float getStartY()>();

        $r2[1] = $f0;

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r6 = $r5[$i0];

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        virtualinvoke $r6.<android.graphics.Matrix: void mapPoints(float[])>($r2);

        if $i0 != 0 goto label1;

        $r7 = $r1.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: android.graphics.Path path>;

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $f0 = $r2[0];

        $f1 = $r2[1];

        virtualinvoke $r7.<android.graphics.Path: void moveTo(float,float)>($f0, $f1);

        goto label2;

     label1:
        $r7 = $r1.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: android.graphics.Path path>;

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $f0 = $r2[0];

        $f1 = $r2[1];

        virtualinvoke $r7.<android.graphics.Path: void lineTo(float,float)>($f0, $f1);

     label2:
        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r4 = $r3[$i0];

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r6 = $r5[$i0];

        $r7 = $r1.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: android.graphics.Path path>;

        virtualinvoke $r4.<com.google.android.material.shape.ShapePath: void applyToPath(android.graphics.Matrix,android.graphics.Path)>($r6, $r7);

        $r8 = $r1.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: com.google.android.material.shape.ShapeAppearancePathProvider$PathListener pathListener>;

        if $r8 == null goto label3;

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r4 = $r3[$i0];

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r6 = $r5[$i0];

        interfaceinvoke $r8.<com.google.android.material.shape.ShapeAppearancePathProvider$PathListener: void onCornerPathCreated(com.google.android.material.shape.ShapePath,android.graphics.Matrix,int)>($r4, $r6, $i0);

     label3:
        return;
    }

    private void appendEdgePath(com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec, int)
    {
        android.graphics.Matrix[] $r5;
        android.graphics.Path $r11, $r12;
        float[] $r3, $r7;
        android.graphics.Path$Op $r13;
        com.google.android.material.shape.ShapeAppearancePathProvider$PathListener $r14;
        int $i0, $i1, $i2;
        com.google.android.material.shape.ShapePath $r1;
        android.graphics.Matrix $r6;
        double $d0, $d1;
        boolean $z0;
        android.graphics.RectF $r8;
        com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec $r2;
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        com.google.android.material.shape.ShapePath[] $r4;
        com.google.android.material.shape.ShapeAppearanceModel $r9;
        com.google.android.material.shape.EdgeTreatment $r10;
        float $f0, $f1, $f2;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $r2 := @parameter0: com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec;

        $i0 := @parameter1: int;

        $i1 = $i0 + 1;

        $i1 = $i1 % 4;

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $r4 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r1 = $r4[$i0];

        $f0 = virtualinvoke $r1.<com.google.android.material.shape.ShapePath: float getEndX()>();

        $r3[0] = $f0;

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $r4 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r1 = $r4[$i0];

        $f0 = virtualinvoke $r1.<com.google.android.material.shape.ShapePath: float getEndY()>();

        $r3[1] = $f0;

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r6 = $r5[$i0];

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        virtualinvoke $r6.<android.graphics.Matrix: void mapPoints(float[])>($r3);

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch2>;

        $r4 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r1 = $r4[$i1];

        $f0 = virtualinvoke $r1.<com.google.android.material.shape.ShapePath: float getStartX()>();

        $r3[0] = $f0;

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch2>;

        $r4 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r1 = $r4[$i1];

        $f0 = virtualinvoke $r1.<com.google.android.material.shape.ShapePath: float getStartY()>();

        $r3[1] = $f0;

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r6 = $r5[$i1];

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch2>;

        virtualinvoke $r6.<android.graphics.Matrix: void mapPoints(float[])>($r3);

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $f0 = $r3[0];

        $r7 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch2>;

        $f1 = $r7[0];

        $f0 = $f0 - $f1;

        $d0 = (double) $f0;

        $f0 = $r3[1];

        $f1 = $r7[1];

        $f0 = $f0 - $f1;

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double hypot(double,double)>($d0, $d1);

        $f0 = (float) $d0;

        $f0 = $f0 - 0.001F;

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, 0.0F);

        $r8 = $r2.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: android.graphics.RectF bounds>;

        $f1 = specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float getEdgeCenterForIndex(android.graphics.RectF,int)>($r8, $i0);

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath shapePath>;

        virtualinvoke $r1.<com.google.android.material.shape.ShapePath: void reset(float,float)>(0.0F, 0.0F);

        $r9 = $r2.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: com.google.android.material.shape.ShapeAppearanceModel shapeAppearanceModel>;

        $r10 = specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.EdgeTreatment getEdgeTreatmentForIndex(int,com.google.android.material.shape.ShapeAppearanceModel)>($i0, $r9);

        $f2 = $r2.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: float interpolation>;

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath shapePath>;

        virtualinvoke $r10.<com.google.android.material.shape.EdgeTreatment: void getEdgePath(float,float,float,com.google.android.material.shape.ShapePath)>($f0, $f1, $f2, $r1);

        $r11 = new android.graphics.Path;

        specialinvoke $r11.<android.graphics.Path: void <init>()>();

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath shapePath>;

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] edgeTransforms>;

        $r6 = $r5[$i0];

        virtualinvoke $r1.<com.google.android.material.shape.ShapePath: void applyToPath(android.graphics.Matrix,android.graphics.Path)>($r6, $r11);

        $z0 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: boolean edgeIntersectionCheckEnabled>;

        if $z0 == 0 goto label2;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 19 goto label2;

        $z0 = virtualinvoke $r10.<com.google.android.material.shape.EdgeTreatment: boolean forceIntersection()>();

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: boolean pathOverlapsCorner(android.graphics.Path,int)>($r11, $i0);

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: boolean pathOverlapsCorner(android.graphics.Path,int)>($r11, $i1);

        if $z0 == 0 goto label2;

     label1:
        $r12 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Path boundsPath>;

        $r13 = <android.graphics.Path$Op: android.graphics.Path$Op DIFFERENCE>;

        virtualinvoke $r11.<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path,android.graphics.Path$Op)>($r11, $r12, $r13);

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath shapePath>;

        $f0 = virtualinvoke $r1.<com.google.android.material.shape.ShapePath: float getStartX()>();

        $r3[0] = $f0;

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath shapePath>;

        $f0 = virtualinvoke $r1.<com.google.android.material.shape.ShapePath: float getStartY()>();

        $r3[1] = $f0;

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] edgeTransforms>;

        $r6 = $r5[$i0];

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        virtualinvoke $r6.<android.graphics.Matrix: void mapPoints(float[])>($r3);

        $r11 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Path overlappedEdgePath>;

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $f0 = $r3[0];

        $f1 = $r3[1];

        virtualinvoke $r11.<android.graphics.Path: void moveTo(float,float)>($f0, $f1);

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath shapePath>;

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] edgeTransforms>;

        $r6 = $r5[$i0];

        $r11 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Path overlappedEdgePath>;

        virtualinvoke $r1.<com.google.android.material.shape.ShapePath: void applyToPath(android.graphics.Matrix,android.graphics.Path)>($r6, $r11);

        goto label3;

     label2:
        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath shapePath>;

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] edgeTransforms>;

        $r6 = $r5[$i0];

        $r11 = $r2.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: android.graphics.Path path>;

        virtualinvoke $r1.<com.google.android.material.shape.ShapePath: void applyToPath(android.graphics.Matrix,android.graphics.Path)>($r6, $r11);

     label3:
        $r14 = $r2.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: com.google.android.material.shape.ShapeAppearancePathProvider$PathListener pathListener>;

        if $r14 == null goto label4;

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath shapePath>;

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] edgeTransforms>;

        $r6 = $r5[$i0];

        interfaceinvoke $r14.<com.google.android.material.shape.ShapeAppearancePathProvider$PathListener: void onEdgePathCreated(com.google.android.material.shape.ShapePath,android.graphics.Matrix,int)>($r1, $r6, $i0);

     label4:
        return;
    }

    private void getCoordinatesOfCorner(int, android.graphics.RectF, android.graphics.PointF)
    {
        android.graphics.RectF $r2;
        android.graphics.PointF $r1;
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        int $i0;
        float $f0, $f1;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $i0 := @parameter0: int;

        $r2 := @parameter1: android.graphics.RectF;

        $r1 := @parameter2: android.graphics.PointF;

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 == 3 goto label1;

        $f0 = $r2.<android.graphics.RectF: float right>;

        $f1 = $r2.<android.graphics.RectF: float top>;

        virtualinvoke $r1.<android.graphics.PointF: void set(float,float)>($f0, $f1);

        return;

     label1:
        $f0 = $r2.<android.graphics.RectF: float left>;

        $f1 = $r2.<android.graphics.RectF: float top>;

        virtualinvoke $r1.<android.graphics.PointF: void set(float,float)>($f0, $f1);

        return;

     label2:
        $f0 = $r2.<android.graphics.RectF: float left>;

        $f1 = $r2.<android.graphics.RectF: float bottom>;

        virtualinvoke $r1.<android.graphics.PointF: void set(float,float)>($f0, $f1);

        return;

     label3:
        $f0 = $r2.<android.graphics.RectF: float right>;

        $f1 = $r2.<android.graphics.RectF: float bottom>;

        virtualinvoke $r1.<android.graphics.PointF: void set(float,float)>($f0, $f1);

        return;
    }

    private com.google.android.material.shape.CornerSize getCornerSizeForIndex(int, com.google.android.material.shape.ShapeAppearanceModel)
    {
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        int $i0;
        com.google.android.material.shape.CornerSize $r2;
        com.google.android.material.shape.ShapeAppearanceModel $r1;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.google.android.material.shape.ShapeAppearanceModel;

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 == 3 goto label1;

        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.CornerSize getTopRightCornerSize()>();

        return $r2;

     label1:
        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.CornerSize getTopLeftCornerSize()>();

        return $r2;

     label2:
        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.CornerSize getBottomLeftCornerSize()>();

        return $r2;

     label3:
        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.CornerSize getBottomRightCornerSize()>();

        return $r2;
    }

    private com.google.android.material.shape.CornerTreatment getCornerTreatmentForIndex(int, com.google.android.material.shape.ShapeAppearanceModel)
    {
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        int $i0;
        com.google.android.material.shape.ShapeAppearanceModel $r1;
        com.google.android.material.shape.CornerTreatment $r2;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.google.android.material.shape.ShapeAppearanceModel;

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 == 3 goto label1;

        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.CornerTreatment getTopRightCorner()>();

        return $r2;

     label1:
        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.CornerTreatment getTopLeftCorner()>();

        return $r2;

     label2:
        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.CornerTreatment getBottomLeftCorner()>();

        return $r2;

     label3:
        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.CornerTreatment getBottomRightCorner()>();

        return $r2;
    }

    private float getEdgeCenterForIndex(android.graphics.RectF, int)
    {
        android.graphics.RectF $r1;
        android.graphics.Matrix[] $r5;
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        float[] $r2;
        com.google.android.material.shape.ShapePath[] $r3;
        int $i0;
        float $f0, $f1;
        com.google.android.material.shape.ShapePath $r4;
        android.graphics.Matrix $r6;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $r1 := @parameter0: android.graphics.RectF;

        $i0 := @parameter1: int;

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r4 = $r3[$i0];

        $f0 = $r4.<com.google.android.material.shape.ShapePath: float endX>;

        $r2[0] = $f0;

        $r4 = $r3[$i0];

        $f0 = $r4.<com.google.android.material.shape.ShapePath: float endY>;

        $r2[1] = $f0;

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r6 = $r5[$i0];

        virtualinvoke $r6.<android.graphics.Matrix: void mapPoints(float[])>($r2);

        if $i0 == 1 goto label1;

        if $i0 == 3 goto label1;

        $f0 = virtualinvoke $r1.<android.graphics.RectF: float centerY()>();

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $f1 = $r2[1];

        $f0 = $f0 - $f1;

        $f0 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        return $f0;

     label1:
        $f0 = virtualinvoke $r1.<android.graphics.RectF: float centerX()>();

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $f1 = $r2[0];

        $f0 = $f0 - $f1;

        $f0 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        return $f0;
    }

    private com.google.android.material.shape.EdgeTreatment getEdgeTreatmentForIndex(int, com.google.android.material.shape.ShapeAppearanceModel)
    {
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        com.google.android.material.shape.EdgeTreatment $r2;
        int $i0;
        com.google.android.material.shape.ShapeAppearanceModel $r1;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.google.android.material.shape.ShapeAppearanceModel;

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 == 3 goto label1;

        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.EdgeTreatment getRightEdge()>();

        return $r2;

     label1:
        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.EdgeTreatment getTopEdge()>();

        return $r2;

     label2:
        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.EdgeTreatment getLeftEdge()>();

        return $r2;

     label3:
        $r2 = virtualinvoke $r1.<com.google.android.material.shape.ShapeAppearanceModel: com.google.android.material.shape.EdgeTreatment getBottomEdge()>();

        return $r2;
    }

    private boolean pathOverlapsCorner(android.graphics.Path, int)
    {
        android.graphics.RectF $r7, $r10;
        android.graphics.Path $r1, $r2, $r9;
        android.graphics.Matrix[] $r5;
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        com.google.android.material.shape.ShapePath[] $r3;
        android.graphics.Path$Op $r8;
        byte $b1;
        int $i0;
        float $f0;
        com.google.android.material.shape.ShapePath $r4;
        android.graphics.Matrix $r6;
        boolean $z0;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $r1 := @parameter0: android.graphics.Path;

        $i0 := @parameter1: int;

        $r9 = new android.graphics.Path;

        $r2 = $r9;

        specialinvoke $r9.<android.graphics.Path: void <init>()>();

        $r3 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r4 = $r3[$i0];

        $r5 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r6 = $r5[$i0];

        virtualinvoke $r4.<com.google.android.material.shape.ShapePath: void applyToPath(android.graphics.Matrix,android.graphics.Path)>($r6, $r2);

        $r10 = new android.graphics.RectF;

        $r7 = $r10;

        specialinvoke $r10.<android.graphics.RectF: void <init>()>();

        virtualinvoke $r1.<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>($r7, 1);

        virtualinvoke $r2.<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>($r7, 1);

        $r8 = <android.graphics.Path$Op: android.graphics.Path$Op INTERSECT>;

        virtualinvoke $r1.<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path$Op)>($r2, $r8);

        virtualinvoke $r1.<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>($r7, 1);

        $z0 = virtualinvoke $r7.<android.graphics.RectF: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $f0 = virtualinvoke $r7.<android.graphics.RectF: float width()>();

        $b1 = $f0 cmpl 1.0F;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label1;

        $f0 = virtualinvoke $r7.<android.graphics.RectF: float height()>();

        $b1 = $f0 cmpl 1.0F;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }

    private void setCornerPathAndTransform(com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec, int)
    {
        android.graphics.RectF $r1;
        com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec $r2;
        android.graphics.Matrix[] $r8;
        android.graphics.PointF $r10;
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        com.google.android.material.shape.ShapeAppearanceModel $r3;
        com.google.android.material.shape.ShapePath[] $r6;
        int $i0;
        float $f0, $f1, $f2;
        com.google.android.material.shape.CornerSize $r4;
        com.google.android.material.shape.ShapePath $r7;
        android.graphics.Matrix $r9;
        com.google.android.material.shape.CornerTreatment $r5;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $r2 := @parameter0: com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec;

        $i0 := @parameter1: int;

        $r3 = $r2.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: com.google.android.material.shape.ShapeAppearanceModel shapeAppearanceModel>;

        $r4 = specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.CornerSize getCornerSizeForIndex(int,com.google.android.material.shape.ShapeAppearanceModel)>($i0, $r3);

        $r3 = $r2.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: com.google.android.material.shape.ShapeAppearanceModel shapeAppearanceModel>;

        $r5 = specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.CornerTreatment getCornerTreatmentForIndex(int,com.google.android.material.shape.ShapeAppearanceModel)>($i0, $r3);

        $r6 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r7 = $r6[$i0];

        $f0 = $r2.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: float interpolation>;

        $r1 = $r2.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: android.graphics.RectF bounds>;

        virtualinvoke $r5.<com.google.android.material.shape.CornerTreatment: void getCornerPath(com.google.android.material.shape.ShapePath,float,float,android.graphics.RectF,com.google.android.material.shape.CornerSize)>($r7, 90.0F, $f0, $r1, $r4);

        $f0 = specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float angleOfEdge(int)>($i0);

        $r8 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r9 = $r8[$i0];

        virtualinvoke $r9.<android.graphics.Matrix: void reset()>();

        $r1 = $r2.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: android.graphics.RectF bounds>;

        $r10 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.PointF pointF>;

        specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: void getCoordinatesOfCorner(int,android.graphics.RectF,android.graphics.PointF)>($i0, $r1, $r10);

        $r8 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r9 = $r8[$i0];

        $r10 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.PointF pointF>;

        $f1 = $r10.<android.graphics.PointF: float x>;

        $f2 = $r10.<android.graphics.PointF: float y>;

        virtualinvoke $r9.<android.graphics.Matrix: void setTranslate(float,float)>($f1, $f2);

        $r8 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r9 = $r8[$i0];

        virtualinvoke $r9.<android.graphics.Matrix: boolean preRotate(float)>($f0);

        return;
    }

    private void setEdgePathAndTransform(int)
    {
        android.graphics.Matrix[] $r4;
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        float[] $r1;
        com.google.android.material.shape.ShapePath[] $r2;
        int $i0;
        float $f0, $f1, $f2;
        com.google.android.material.shape.ShapePath $r3;
        android.graphics.Matrix $r5;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $i0 := @parameter0: int;

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r3 = $r2[$i0];

        $f0 = virtualinvoke $r3.<com.google.android.material.shape.ShapePath: float getEndX()>();

        $r1[0] = $f0;

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $r2 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: com.google.android.material.shape.ShapePath[] cornerPaths>;

        $r3 = $r2[$i0];

        $f0 = virtualinvoke $r3.<com.google.android.material.shape.ShapePath: float getEndY()>();

        $r1[1] = $f0;

        $r4 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] cornerTransforms>;

        $r5 = $r4[$i0];

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        virtualinvoke $r5.<android.graphics.Matrix: void mapPoints(float[])>($r1);

        $f0 = specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float angleOfEdge(int)>($i0);

        $r4 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] edgeTransforms>;

        $r5 = $r4[$i0];

        virtualinvoke $r5.<android.graphics.Matrix: void reset()>();

        $r4 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] edgeTransforms>;

        $r5 = $r4[$i0];

        $r1 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: float[] scratch>;

        $f1 = $r1[0];

        $f2 = $r1[1];

        virtualinvoke $r5.<android.graphics.Matrix: void setTranslate(float,float)>($f1, $f2);

        $r4 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Matrix[] edgeTransforms>;

        $r5 = $r4[$i0];

        virtualinvoke $r5.<android.graphics.Matrix: boolean preRotate(float)>($f0);

        return;
    }

    public void calculatePath(com.google.android.material.shape.ShapeAppearanceModel, float, android.graphics.RectF, android.graphics.Path)
    {
        android.graphics.RectF $r2;
        android.graphics.Path $r3;
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        float $f0;
        com.google.android.material.shape.ShapeAppearanceModel $r1;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $r1 := @parameter0: com.google.android.material.shape.ShapeAppearanceModel;

        $f0 := @parameter1: float;

        $r2 := @parameter2: android.graphics.RectF;

        $r3 := @parameter3: android.graphics.Path;

        virtualinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: void calculatePath(com.google.android.material.shape.ShapeAppearanceModel,float,android.graphics.RectF,com.google.android.material.shape.ShapeAppearancePathProvider$PathListener,android.graphics.Path)>($r1, $f0, $r2, null, $r3);

        return;
    }

    public void calculatePath(com.google.android.material.shape.ShapeAppearanceModel, float, android.graphics.RectF, com.google.android.material.shape.ShapeAppearancePathProvider$PathListener, android.graphics.Path)
    {
        android.graphics.RectF $r5;
        android.graphics.Path $r2, $r6;
        com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec $r7;
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        com.google.android.material.shape.ShapeAppearanceModel $r4;
        android.graphics.Path$Op $r8;
        com.google.android.material.shape.ShapeAppearancePathProvider$PathListener $r1;
        int $i0, $i1;
        float $f0;
        android.graphics.Path$Direction $r3;
        boolean $z0;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $r4 := @parameter0: com.google.android.material.shape.ShapeAppearanceModel;

        $f0 := @parameter1: float;

        $r5 := @parameter2: android.graphics.RectF;

        $r1 := @parameter3: com.google.android.material.shape.ShapeAppearancePathProvider$PathListener;

        $r2 := @parameter4: android.graphics.Path;

        virtualinvoke $r2.<android.graphics.Path: void rewind()>();

        $r6 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Path overlappedEdgePath>;

        virtualinvoke $r6.<android.graphics.Path: void rewind()>();

        $r6 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Path boundsPath>;

        virtualinvoke $r6.<android.graphics.Path: void rewind()>();

        $r6 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Path boundsPath>;

        $r3 = <android.graphics.Path$Direction: android.graphics.Path$Direction CW>;

        virtualinvoke $r6.<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)>($r5, $r3);

        $r7 = new com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec;

        specialinvoke $r7.<com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec: void <init>(com.google.android.material.shape.ShapeAppearanceModel,float,android.graphics.RectF,com.google.android.material.shape.ShapeAppearancePathProvider$PathListener,android.graphics.Path)>($r4, $f0, $r5, $r1, $r2);

        $i0 = 0;

        $i1 = 0;

     label1:
        if $i1 >= 4 goto label2;

        specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: void setCornerPathAndTransform(com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec,int)>($r7, $i1);

        specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: void setEdgePathAndTransform(int)>($i1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        if $i0 >= 4 goto label3;

        specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: void appendCornerPath(com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec,int)>($r7, $i0);

        specialinvoke r0.<com.google.android.material.shape.ShapeAppearancePathProvider: void appendEdgePath(com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec,int)>($r7, $i0);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        virtualinvoke $r2.<android.graphics.Path: void close()>();

        $r6 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Path overlappedEdgePath>;

        virtualinvoke $r6.<android.graphics.Path: void close()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label4;

        $r6 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Path overlappedEdgePath>;

        $z0 = virtualinvoke $r6.<android.graphics.Path: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r6 = r0.<com.google.android.material.shape.ShapeAppearancePathProvider: android.graphics.Path overlappedEdgePath>;

        $r8 = <android.graphics.Path$Op: android.graphics.Path$Op UNION>;

        virtualinvoke $r2.<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path$Op)>($r6, $r8);

     label4:
        return;
    }

    public void setEdgeIntersectionCheckEnable(boolean)
    {
        com.google.android.material.shape.ShapeAppearancePathProvider r0;
        boolean $z0;

        r0 := @this: com.google.android.material.shape.ShapeAppearancePathProvider;

        $z0 := @parameter0: boolean;

        r0.<com.google.android.material.shape.ShapeAppearancePathProvider: boolean edgeIntersectionCheckEnabled> = $z0;

        return;
    }
}
