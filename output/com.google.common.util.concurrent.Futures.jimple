public final class com.google.common.util.concurrent.Futures extends com.google.common.util.concurrent.GwtFuturesCatchingSpecialization
{
    public static final com.google.common.util.concurrent.AsyncFunction DEREFERENCER;

    static void <clinit>()
    {
        com.google.common.util.concurrent.Futures$3 $r0;

        $r0 = new com.google.common.util.concurrent.Futures$3;

        specialinvoke $r0.<com.google.common.util.concurrent.Futures$3: void <init>()>();

        <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.AsyncFunction DEREFERENCER> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.util.concurrent.Futures r0;

        r0 := @this: com.google.common.util.concurrent.Futures;

        specialinvoke r0.<com.google.common.util.concurrent.GwtFuturesCatchingSpecialization: void <init>()>();

        return;
    }

    public static void addCallback(com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.FutureCallback)
    {
        com.google.common.util.concurrent.ListenableFuture $r0;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.FutureCallback $r1;

        $r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.FutureCallback;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>($r0, $r1, $r2);

        return;
    }

    public static void addCallback(com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.FutureCallback, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture $r0;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.FutureCallback $r1;
        com.google.common.util.concurrent.Futures$CallbackListener $r3;

        $r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r1 := @parameter1: com.google.common.util.concurrent.FutureCallback;

        $r2 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = new com.google.common.util.concurrent.Futures$CallbackListener;

        specialinvoke $r3.<com.google.common.util.concurrent.Futures$CallbackListener: void <init>(java.util.concurrent.Future,com.google.common.util.concurrent.FutureCallback)>($r0, $r1);

        interfaceinvoke $r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r3, $r2);

        return;
    }

    public static com.google.common.util.concurrent.ListenableFuture allAsList(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableList $r1;
        com.google.common.util.concurrent.CollectionFuture$ListFuture $r0;
        java.lang.Iterable $r2;

        $r2 := @parameter0: java.lang.Iterable;

        $r0 = new com.google.common.util.concurrent.CollectionFuture$ListFuture;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r2);

        specialinvoke $r0.<com.google.common.util.concurrent.CollectionFuture$ListFuture: void <init>(com.google.common.collect.ImmutableCollection,boolean)>($r1, 1);

        return $r0;
    }

    public static transient com.google.common.util.concurrent.ListenableFuture allAsList(com.google.common.util.concurrent.ListenableFuture[])
    {
        com.google.common.collect.ImmutableList $r1;
        com.google.common.util.concurrent.CollectionFuture$ListFuture $r0;
        com.google.common.util.concurrent.ListenableFuture[] $r2;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture[];

        $r0 = new com.google.common.util.concurrent.CollectionFuture$ListFuture;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>($r2);

        specialinvoke $r0.<com.google.common.util.concurrent.CollectionFuture$ListFuture: void <init>(com.google.common.collect.ImmutableCollection,boolean)>($r1, 1);

        return $r0;
    }

    public static com.google.common.util.concurrent.ListenableFuture catching(com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function)
    {
        com.google.common.base.Function $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;
        java.util.concurrent.Executor $r3;
        java.lang.Class $r0;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r0 := @parameter1: java.lang.Class;

        $r1 := @parameter2: com.google.common.base.Function;

        $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)>($r2, $r0, $r1, $r3);

        return $r2;
    }

    public static com.google.common.util.concurrent.ListenableFuture catching(com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function, java.util.concurrent.Executor)
    {
        com.google.common.base.Function $r1;
        com.google.common.util.concurrent.ListenableFuture $r3;
        java.util.concurrent.Executor $r2;
        java.lang.Class $r0;

        $r3 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r0 := @parameter1: java.lang.Class;

        $r1 := @parameter2: com.google.common.base.Function;

        $r2 := @parameter3: java.util.concurrent.Executor;

        $r3 = staticinvoke <com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)>($r3, $r0, $r1, $r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture catchingAsync(com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.util.concurrent.AsyncFunction)
    {
        com.google.common.util.concurrent.ListenableFuture $r2;
        java.util.concurrent.Executor $r3;
        java.lang.Class $r0;
        com.google.common.util.concurrent.AsyncFunction $r1;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r0 := @parameter1: java.lang.Class;

        $r1 := @parameter2: com.google.common.util.concurrent.AsyncFunction;

        $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>($r2, $r0, $r1, $r3);

        return $r2;
    }

    public static com.google.common.util.concurrent.ListenableFuture catchingAsync(com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.util.concurrent.AsyncFunction, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture $r3;
        java.util.concurrent.Executor $r2;
        java.lang.Class $r0;
        com.google.common.util.concurrent.AsyncFunction $r1;

        $r3 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r0 := @parameter1: java.lang.Class;

        $r1 := @parameter2: com.google.common.util.concurrent.AsyncFunction;

        $r2 := @parameter3: java.util.concurrent.Executor;

        $r3 = staticinvoke <com.google.common.util.concurrent.AbstractCatchingFuture: com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>($r3, $r0, $r1, $r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture dereference(com.google.common.util.concurrent.ListenableFuture)
    {
        com.google.common.util.concurrent.AsyncFunction $r0;
        com.google.common.util.concurrent.ListenableFuture $r1;
        java.util.concurrent.Executor $r2;

        $r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r0 = <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.AsyncFunction DEREFERENCER>;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        $r1 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transformAsync(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>($r1, $r0, $r2);

        return $r1;
    }

    public static java.lang.Object getChecked(java.util.concurrent.Future, java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.Object $r1;
        java.util.concurrent.Future $r2;

        $r2 := @parameter0: java.util.concurrent.Future;

        $r0 := @parameter1: java.lang.Class;

        $r1 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class)>($r2, $r0);

        return $r1;
    }

    public static java.lang.Object getChecked(java.util.concurrent.Future, java.lang.Class, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.Future $r3;
        java.lang.Class $r0;
        long $l0;
        java.lang.Object $r2;

        $r3 := @parameter0: java.util.concurrent.Future;

        $r0 := @parameter1: java.lang.Class;

        $l0 := @parameter2: long;

        $r1 := @parameter3: java.util.concurrent.TimeUnit;

        $r2 = staticinvoke <com.google.common.util.concurrent.FuturesGetChecked: java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)>($r3, $r0, $l0, $r1);

        return $r2;
    }

    public static java.lang.Object getDone(java.util.concurrent.Future)
    {
        java.util.concurrent.Future $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.concurrent.Future;

        $z0 = interfaceinvoke $r0.<java.util.concurrent.Future: boolean isDone()>();

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object)>($z0, "Future was expected to be done: %s", $r0);

        $r1 = staticinvoke <com.google.common.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>($r0);

        return $r1;
    }

    public static java.lang.Object getUnchecked(java.util.concurrent.Future)
    {
        java.util.concurrent.ExecutionException $r2;
        java.lang.Throwable $r3;
        java.util.concurrent.Future $r0;
        java.lang.Object $r1;
        java.lang.NullPointerException r4;

        $r0 := @parameter0: java.util.concurrent.Future;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

     label1:
        $r1 = staticinvoke <com.google.common.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>($r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <com.google.common.util.concurrent.Futures: void wrapAndThrowUnchecked(java.lang.Throwable)>($r3);

        r4 = new java.lang.NullPointerException;

        specialinvoke r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r4;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public static com.google.common.util.concurrent.ListenableFuture immediateCancelledFuture()
    {
        com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture $r0;

        $r0 = new com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture;

        specialinvoke $r0.<com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture: void <init>()>();

        return $r0;
    }

    public static com.google.common.util.concurrent.CheckedFuture immediateCheckedFuture(java.lang.Object)
    {
        com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulCheckedFuture $r1;
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        $r1 = new com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulCheckedFuture;

        specialinvoke $r1.<com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulCheckedFuture: void <init>(java.lang.Object)>($r0);

        return $r1;
    }

    public static com.google.common.util.concurrent.CheckedFuture immediateFailedCheckedFuture(java.lang.Exception)
    {
        com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedCheckedFuture $r1;
        java.lang.Exception $r0;

        $r0 := @parameter0: java.lang.Exception;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedCheckedFuture;

        specialinvoke $r1.<com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedCheckedFuture: void <init>(java.lang.Exception)>($r0);

        return $r1;
    }

    public static com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture $r1;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture;

        specialinvoke $r1.<com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture: void <init>(java.lang.Throwable)>($r0);

        return $r1;
    }

    public static com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)
    {
        com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture $r0;
        java.lang.Object $r1;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        $r0 = <com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture: com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture NULL>;

        return $r0;

     label1:
        $r0 = new com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture;

        specialinvoke $r0.<com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture: void <init>(java.lang.Object)>($r1);

        return $r0;
    }

    public static com.google.common.collect.ImmutableList inCompletionOrder(java.lang.Iterable)
    {
        java.lang.Object[] $r4;
        com.google.common.util.concurrent.Futures$4 $r9;
        com.google.common.util.concurrent.ListenableFuture $r8;
        java.util.concurrent.Executor $r10;
        java.util.Collection $r1;
        com.google.common.util.concurrent.Futures$InCompletionOrderFuture $r7;
        java.lang.Iterable $r0;
        com.google.common.util.concurrent.Futures$InCompletionOrderState $r5;
        com.google.common.collect.ImmutableList $r2;
        com.google.common.util.concurrent.ListenableFuture[] $r3;
        int $i0, $i1, $i2;
        boolean $z0;
        com.google.common.collect.ImmutableList$Builder $r6;

        $r0 := @parameter0: java.lang.Iterable;

        $z0 = $r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r1 = (java.util.Collection) $r0;

        goto label2;

     label1:
        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r0);

     label2:
        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $r3 = newarray (com.google.common.util.concurrent.ListenableFuture)[$i0];

        $r4 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (com.google.common.util.concurrent.ListenableFuture[]) $r4;

        $r5 = new com.google.common.util.concurrent.Futures$InCompletionOrderState;

        specialinvoke $r5.<com.google.common.util.concurrent.Futures$InCompletionOrderState: void <init>(com.google.common.util.concurrent.ListenableFuture[],com.google.common.util.concurrent.Futures$1)>($r3, null);

        $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $i0 = 0;

        $i1 = 0;

     label3:
        $i2 = lengthof $r3;

        if $i1 >= $i2 goto label4;

        $r7 = new com.google.common.util.concurrent.Futures$InCompletionOrderFuture;

        specialinvoke $r7.<com.google.common.util.concurrent.Futures$InCompletionOrderFuture: void <init>(com.google.common.util.concurrent.Futures$InCompletionOrderState,com.google.common.util.concurrent.Futures$1)>($r5, null);

        virtualinvoke $r6.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r7);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $r2 = virtualinvoke $r6.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

     label5:
        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label6;

        $r8 = $r3[$i0];

        $r9 = new com.google.common.util.concurrent.Futures$4;

        specialinvoke $r9.<com.google.common.util.concurrent.Futures$4: void <init>(com.google.common.util.concurrent.Futures$InCompletionOrderState,com.google.common.collect.ImmutableList,int)>($r5, $r2, $i0);

        $r10 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r8.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r9, $r10);

        $i0 = $i0 + 1;

        goto label5;

     label6:
        return $r2;
    }

    public static java.util.concurrent.Future lazyTransform(java.util.concurrent.Future, com.google.common.base.Function)
    {
        com.google.common.util.concurrent.Futures$2 $r2;
        java.util.concurrent.Future $r0;
        com.google.common.base.Function $r1;

        $r0 := @parameter0: java.util.concurrent.Future;

        $r1 := @parameter1: com.google.common.base.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.util.concurrent.Futures$2;

        specialinvoke $r2.<com.google.common.util.concurrent.Futures$2: void <init>(java.util.concurrent.Future,com.google.common.base.Function)>($r0, $r1);

        return $r2;
    }

    public static com.google.common.util.concurrent.CheckedFuture makeChecked(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function)
    {
        com.google.common.base.Function $r0;
        com.google.common.util.concurrent.ListenableFuture $r2;
        com.google.common.util.concurrent.Futures$MappingCheckedFuture $r1;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r0 := @parameter1: com.google.common.base.Function;

        $r1 = new com.google.common.util.concurrent.Futures$MappingCheckedFuture;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        specialinvoke $r1.<com.google.common.util.concurrent.Futures$MappingCheckedFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>($r2, $r0);

        return $r1;
    }

    public static com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)
    {
        com.google.common.util.concurrent.ListenableFuture $r0;
        java.util.concurrent.Executor $r2;
        com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture $r1;
        boolean $z0;

        $r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $z0 = interfaceinvoke $r0.<java.util.concurrent.Future: boolean isDone()>();

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r1 = new com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture;

        specialinvoke $r1.<com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture: void <init>(com.google.common.util.concurrent.ListenableFuture)>($r0);

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r1, $r2);

        return $r1;
    }

    public static com.google.common.util.concurrent.ListenableFuture scheduleAsync(com.google.common.util.concurrent.AsyncCallable, long, java.util.concurrent.TimeUnit, java.util.concurrent.ScheduledExecutorService)
    {
        java.util.concurrent.ScheduledFuture $r5;
        java.util.concurrent.Executor $r6;
        long $l0;
        com.google.common.util.concurrent.Futures$1 $r0;
        com.google.common.util.concurrent.AsyncCallable $r3;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.ScheduledExecutorService $r2;
        com.google.common.util.concurrent.TrustedListenableFutureTask $r4;

        $r3 := @parameter0: com.google.common.util.concurrent.AsyncCallable;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $r2 := @parameter3: java.util.concurrent.ScheduledExecutorService;

        $r4 = staticinvoke <com.google.common.util.concurrent.TrustedListenableFutureTask: com.google.common.util.concurrent.TrustedListenableFutureTask create(com.google.common.util.concurrent.AsyncCallable)>($r3);

        $r5 = interfaceinvoke $r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r4, $l0, $r1);

        $r0 = new com.google.common.util.concurrent.Futures$1;

        specialinvoke $r0.<com.google.common.util.concurrent.Futures$1: void <init>(java.util.concurrent.Future)>($r5);

        $r6 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke $r4.<com.google.common.util.concurrent.AbstractFuture$TrustedFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r0, $r6);

        return $r4;
    }

    public static com.google.common.util.concurrent.ListenableFuture submitAsync(com.google.common.util.concurrent.AsyncCallable, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.TrustedListenableFutureTask $r1;
        java.util.concurrent.Executor $r0;
        com.google.common.util.concurrent.AsyncCallable $r2;

        $r2 := @parameter0: com.google.common.util.concurrent.AsyncCallable;

        $r0 := @parameter1: java.util.concurrent.Executor;

        $r1 = staticinvoke <com.google.common.util.concurrent.TrustedListenableFutureTask: com.google.common.util.concurrent.TrustedListenableFutureTask create(com.google.common.util.concurrent.AsyncCallable)>($r2);

        interfaceinvoke $r0.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

        return $r1;
    }

    public static com.google.common.util.concurrent.ListenableFuture successfulAsList(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableList $r1;
        com.google.common.util.concurrent.CollectionFuture$ListFuture $r0;
        java.lang.Iterable $r2;

        $r2 := @parameter0: java.lang.Iterable;

        $r0 = new com.google.common.util.concurrent.CollectionFuture$ListFuture;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r2);

        specialinvoke $r0.<com.google.common.util.concurrent.CollectionFuture$ListFuture: void <init>(com.google.common.collect.ImmutableCollection,boolean)>($r1, 0);

        return $r0;
    }

    public static transient com.google.common.util.concurrent.ListenableFuture successfulAsList(com.google.common.util.concurrent.ListenableFuture[])
    {
        com.google.common.collect.ImmutableList $r1;
        com.google.common.util.concurrent.CollectionFuture$ListFuture $r0;
        com.google.common.util.concurrent.ListenableFuture[] $r2;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture[];

        $r0 = new com.google.common.util.concurrent.CollectionFuture$ListFuture;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>($r2);

        specialinvoke $r0.<com.google.common.util.concurrent.CollectionFuture$ListFuture: void <init>(com.google.common.collect.ImmutableCollection,boolean)>($r1, 0);

        return $r0;
    }

    public static com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function)
    {
        com.google.common.base.Function $r0;
        com.google.common.util.concurrent.ListenableFuture $r1;
        java.util.concurrent.Executor $r2;

        $r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r0 := @parameter1: com.google.common.base.Function;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        $r1 = staticinvoke <com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)>($r1, $r0, $r2);

        return $r1;
    }

    public static com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function, java.util.concurrent.Executor)
    {
        com.google.common.base.Function $r0;
        com.google.common.util.concurrent.ListenableFuture $r2;
        java.util.concurrent.Executor $r1;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r0 := @parameter1: com.google.common.base.Function;

        $r1 := @parameter2: java.util.concurrent.Executor;

        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)>($r2, $r0, $r1);

        return $r2;
    }

    public static com.google.common.util.concurrent.ListenableFuture transformAsync(com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.AsyncFunction)
    {
        com.google.common.util.concurrent.AsyncFunction $r0;
        com.google.common.util.concurrent.ListenableFuture $r1;
        java.util.concurrent.Executor $r2;

        $r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r0 := @parameter1: com.google.common.util.concurrent.AsyncFunction;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        $r1 = staticinvoke <com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>($r1, $r0, $r2);

        return $r1;
    }

    public static com.google.common.util.concurrent.ListenableFuture transformAsync(com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.AsyncFunction, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.AsyncFunction $r0;
        com.google.common.util.concurrent.ListenableFuture $r2;
        java.util.concurrent.Executor $r1;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $r0 := @parameter1: com.google.common.util.concurrent.AsyncFunction;

        $r1 := @parameter2: java.util.concurrent.Executor;

        $r2 = staticinvoke <com.google.common.util.concurrent.AbstractTransformFuture: com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>($r2, $r0, $r1);

        return $r2;
    }

    public static com.google.common.util.concurrent.Futures$FutureCombiner whenAllComplete(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableList $r1;
        java.lang.Iterable $r2;
        com.google.common.util.concurrent.Futures$FutureCombiner $r0;

        $r2 := @parameter0: java.lang.Iterable;

        $r0 = new com.google.common.util.concurrent.Futures$FutureCombiner;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r2);

        specialinvoke $r0.<com.google.common.util.concurrent.Futures$FutureCombiner: void <init>(boolean,com.google.common.collect.ImmutableList,com.google.common.util.concurrent.Futures$1)>(0, $r1, null);

        return $r0;
    }

    public static transient com.google.common.util.concurrent.Futures$FutureCombiner whenAllComplete(com.google.common.util.concurrent.ListenableFuture[])
    {
        com.google.common.collect.ImmutableList $r1;
        com.google.common.util.concurrent.Futures$FutureCombiner $r0;
        com.google.common.util.concurrent.ListenableFuture[] $r2;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture[];

        $r0 = new com.google.common.util.concurrent.Futures$FutureCombiner;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>($r2);

        specialinvoke $r0.<com.google.common.util.concurrent.Futures$FutureCombiner: void <init>(boolean,com.google.common.collect.ImmutableList,com.google.common.util.concurrent.Futures$1)>(0, $r1, null);

        return $r0;
    }

    public static com.google.common.util.concurrent.Futures$FutureCombiner whenAllSucceed(java.lang.Iterable)
    {
        com.google.common.collect.ImmutableList $r1;
        java.lang.Iterable $r2;
        com.google.common.util.concurrent.Futures$FutureCombiner $r0;

        $r2 := @parameter0: java.lang.Iterable;

        $r0 = new com.google.common.util.concurrent.Futures$FutureCombiner;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r2);

        specialinvoke $r0.<com.google.common.util.concurrent.Futures$FutureCombiner: void <init>(boolean,com.google.common.collect.ImmutableList,com.google.common.util.concurrent.Futures$1)>(1, $r1, null);

        return $r0;
    }

    public static transient com.google.common.util.concurrent.Futures$FutureCombiner whenAllSucceed(com.google.common.util.concurrent.ListenableFuture[])
    {
        com.google.common.collect.ImmutableList $r1;
        com.google.common.util.concurrent.Futures$FutureCombiner $r0;
        com.google.common.util.concurrent.ListenableFuture[] $r2;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture[];

        $r0 = new com.google.common.util.concurrent.Futures$FutureCombiner;

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>($r2);

        specialinvoke $r0.<com.google.common.util.concurrent.Futures$FutureCombiner: void <init>(boolean,com.google.common.collect.ImmutableList,com.google.common.util.concurrent.Futures$1)>(1, $r1, null);

        return $r0;
    }

    public static com.google.common.util.concurrent.ListenableFuture withTimeout(com.google.common.util.concurrent.ListenableFuture, long, java.util.concurrent.TimeUnit, java.util.concurrent.ScheduledExecutorService)
    {
        java.util.concurrent.TimeUnit $r0;
        com.google.common.util.concurrent.ListenableFuture $r2;
        java.util.concurrent.ScheduledExecutorService $r1;
        long $l0;

        $r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $l0 := @parameter1: long;

        $r0 := @parameter2: java.util.concurrent.TimeUnit;

        $r1 := @parameter3: java.util.concurrent.ScheduledExecutorService;

        $r2 = staticinvoke <com.google.common.util.concurrent.TimeoutFuture: com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)>($r2, $l0, $r0, $r1);

        return $r2;
    }

    public static void wrapAndThrowUnchecked(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        com.google.common.util.concurrent.UncheckedExecutionException $r3;
        java.lang.Error $r2;
        com.google.common.util.concurrent.ExecutionError $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Throwable;

        $z0 = $r0 instanceof java.lang.Error;

        if $z0 == 0 goto label1;

        $r1 = new com.google.common.util.concurrent.ExecutionError;

        $r2 = (java.lang.Error) $r0;

        specialinvoke $r1.<com.google.common.util.concurrent.ExecutionError: void <init>(java.lang.Error)>($r2);

        throw $r1;

     label1:
        $r3 = new com.google.common.util.concurrent.UncheckedExecutionException;

        specialinvoke $r3.<com.google.common.util.concurrent.UncheckedExecutionException: void <init>(java.lang.Throwable)>($r0);

        throw $r3;
    }
}
