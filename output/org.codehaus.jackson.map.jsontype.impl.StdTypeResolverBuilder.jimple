public class org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder extends java.lang.Object implements org.codehaus.jackson.map.jsontype.TypeResolverBuilder
{
    public org.codehaus.jackson.map.jsontype.TypeIdResolver _customIdResolver;
    public org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType;
    public org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs;
    public java.lang.String _typeProperty;

    public void <init>()
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.codehaus.jackson.map.TypeDeserializer buildTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, java.util.Collection, org.codehaus.jackson.map.BeanProperty)
    {
        java.lang.IllegalStateException $r9;
        java.util.Collection $r4;
        org.codehaus.jackson.map.DeserializationConfig $r2;
        org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer $r13;
        org.codehaus.jackson.map.BeanProperty $r1;
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r5;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer $r12;
        int[] $r6;
        org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer $r8;
        int $i0;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;
        org.codehaus.jackson.annotate.JsonTypeInfo$As $r7;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r2 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r4 := @parameter2: java.util.Collection;

        $r1 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver idResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,boolean,boolean)>($r2, $r3, $r4, 0, 1);

        $r6 = <org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$org$codehaus$jackson$annotate$JsonTypeInfo$As>;

        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        $i0 = virtualinvoke $r7.<java.lang.Enum: int ordinal()>();

        $i0 = $r6[$i0];

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 != 3 goto label1;

        $r8 = new org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer;

        specialinvoke $r8.<org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r3, $r5, $r1);

        return $r8;

     label1:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Do not know how to construct standard type serializer for inclusion type: ");

        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label2:
        $r12 = new org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer;

        $r11 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;

        specialinvoke $r12.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty,java.lang.String)>($r3, $r5, $r1, $r11);

        return $r12;

     label3:
        $r13 = new org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer;

        specialinvoke $r13.<org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r3, $r5, $r1);

        return $r13;
    }

    public org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, java.util.Collection, org.codehaus.jackson.map.BeanProperty)
    {
        java.lang.IllegalStateException $r9;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer $r12;
        java.util.Collection $r4;
        org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeSerializer $r8;
        org.codehaus.jackson.map.SerializationConfig $r2;
        org.codehaus.jackson.map.BeanProperty $r1;
        org.codehaus.jackson.map.jsontype.impl.AsArrayTypeSerializer $r13;
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r5;
        int[] $r6;
        int $i0;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;
        org.codehaus.jackson.annotate.JsonTypeInfo$As $r7;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r2 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r4 := @parameter2: java.util.Collection;

        $r1 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver idResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,boolean,boolean)>($r2, $r3, $r4, 1, 0);

        $r6 = <org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$org$codehaus$jackson$annotate$JsonTypeInfo$As>;

        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        $i0 = virtualinvoke $r7.<java.lang.Enum: int ordinal()>();

        $i0 = $r6[$i0];

        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 != 3 goto label1;

        $r8 = new org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeSerializer;

        specialinvoke $r8.<org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeSerializer: void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r5, $r1);

        return $r8;

     label1:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Do not know how to construct standard type serializer for inclusion type: ");

        $r7 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r9;

     label2:
        $r12 = new org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer;

        $r11 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;

        specialinvoke $r12.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer: void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty,java.lang.String)>($r5, $r1, $r11);

        return $r12;

     label3:
        $r13 = new org.codehaus.jackson.map.jsontype.impl.AsArrayTypeSerializer;

        specialinvoke $r13.<org.codehaus.jackson.map.jsontype.impl.AsArrayTypeSerializer: void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r5, $r1);

        return $r13;
    }

    public java.lang.String getTypeProperty()
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r1 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;

        return r1;
    }

    public org.codehaus.jackson.map.jsontype.TypeIdResolver idResolver(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, java.util.Collection, boolean, boolean)
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver $r7;
        java.lang.IllegalStateException $r8;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r5;
        org.codehaus.jackson.map.type.TypeFactory $r12;
        int[] $r6;
        int $i0;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.String $r10;
        boolean $z0, $z1;
        java.util.Collection $r3;
        org.codehaus.jackson.map.MapperConfig $r1;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver $r13;
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r4;
        org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver $r11;
        java.lang.StringBuilder $r9;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: java.util.Collection;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver _customIdResolver>;

        if $r4 == null goto label1;

        return $r4;

     label1:
        $r5 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        if $r5 == null goto label5;

        $r6 = <org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$org$codehaus$jackson$annotate$JsonTypeInfo$Id>;

        $i0 = virtualinvoke $r5.<java.lang.Enum: int ordinal()>();

        $i0 = $r6[$i0];

        if $i0 == 1 goto label4;

        if $i0 == 2 goto label3;

        if $i0 != 3 goto label2;

        $r7 = staticinvoke <org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver construct(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,boolean,boolean)>($r1, $r2, $r3, $z0, $z1);

        return $r7;

     label2:
        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Do not know how to construct standard type id resolver for idType: ");

        $r5 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label3:
        $r11 = new org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver;

        $r12 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        specialinvoke $r11.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.type.TypeFactory)>($r2, $r12);

        return $r11;

     label4:
        $r13 = new org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        $r12 = virtualinvoke $r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        specialinvoke $r13.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.type.TypeFactory)>($r2, $r12);

        return $r13;

     label5:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can not build, \'init()\' not yet called");

        throw $r8;
    }

    public volatile org.codehaus.jackson.map.jsontype.TypeResolverBuilder inclusion(org.codehaus.jackson.annotate.JsonTypeInfo$As)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.annotate.JsonTypeInfo$As $r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$As;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder inclusion(org.codehaus.jackson.annotate.JsonTypeInfo$As)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder inclusion(org.codehaus.jackson.annotate.JsonTypeInfo$As)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.annotate.JsonTypeInfo$As $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$As;

        if $r1 == null goto label1;

        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs> = $r1;

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("includeAs can not be null");

        throw $r2;
    }

    public volatile org.codehaus.jackson.map.jsontype.TypeResolverBuilder init(org.codehaus.jackson.annotate.JsonTypeInfo$Id, org.codehaus.jackson.map.jsontype.TypeIdResolver)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r1;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r2 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$Id;

        $r1 := @parameter1: org.codehaus.jackson.map.jsontype.TypeIdResolver;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder init(org.codehaus.jackson.annotate.JsonTypeInfo$Id,org.codehaus.jackson.map.jsontype.TypeIdResolver)>($r2, $r1);

        return r0;
    }

    public org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder init(org.codehaus.jackson.annotate.JsonTypeInfo$Id, org.codehaus.jackson.map.jsontype.TypeIdResolver)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r3;
        java.lang.String $r1;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r2 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$Id;

        $r3 := @parameter1: org.codehaus.jackson.map.jsontype.TypeIdResolver;

        if $r2 == null goto label1;

        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType> = $r2;

        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver _customIdResolver> = $r3;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.annotate.JsonTypeInfo$Id: java.lang.String getDefaultPropertyName()>();

        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty> = $r1;

        return r0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("idType can not be null");

        throw $r4;
    }

    public volatile org.codehaus.jackson.map.jsontype.TypeResolverBuilder typeProperty(java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: java.lang.String;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder typeProperty(java.lang.String)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder typeProperty(java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        int $i0;
        java.lang.String $r1;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.annotate.JsonTypeInfo$Id: java.lang.String getDefaultPropertyName()>();

     label2:
        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty> = $r1;

        return r0;
    }
}
