public final class com.google.common.primitives.Longs extends java.lang.Object
{
    public static final int BYTES;
    public static final long MAX_POWER_OF_TWO;

    public void <init>()
    {
        com.google.common.primitives.Longs r0;

        r0 := @this: com.google.common.primitives.Longs;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int access$000(long[], long, int, int)
    {
        long[] $r0;
        int $i1, $i2;
        long $l0;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i1 = staticinvoke <com.google.common.primitives.Longs: int indexOf(long[],long,int,int)>($r0, $l0, $i1, $i2);

        return $i1;
    }

    public static int access$100(long[], long, int, int)
    {
        long[] $r0;
        int $i1, $i2;
        long $l0;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i1 = staticinvoke <com.google.common.primitives.Longs: int lastIndexOf(long[],long,int,int)>($r0, $l0, $i1, $i2);

        return $i1;
    }

    public static transient java.util.List asList(long[])
    {
        java.util.List $r0;
        long[] $r1;
        com.google.common.primitives.Longs$LongArrayAsList $r2;
        int $i0;

        $r1 := @parameter0: long[];

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r0;

     label1:
        $r2 = new com.google.common.primitives.Longs$LongArrayAsList;

        specialinvoke $r2.<com.google.common.primitives.Longs$LongArrayAsList: void <init>(long[])>($r1);

        return $r2;
    }

    public static int compare(long, long)
    {
        byte $b2;
        int $i3;
        long $l0, $l1;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        $i3 = -1;

        return $i3;

     label1:
        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static transient long[] concat(long[][])
    {
        long[][] $r0;
        long[] $r1, $r2;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: long[][];

        $i1 = lengthof $r0;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r1 = $r0[$i2];

        $i0 = lengthof $r1;

        $i3 = $i3 + $i0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r1 = newarray (long)[$i3];

        $i1 = lengthof $r0;

        $i2 = 0;

        $i3 = 0;

     label3:
        if $i2 >= $i1 goto label4;

        $r2 = $r0[$i2];

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i3, $i0);

        $i0 = lengthof $r2;

        $i3 = $i3 + $i0;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        return $r1;
    }

    public static long constrainToRange(long, long, long)
    {
        byte $b3;
        int $i4;
        long $l0, $l1, $l2;
        boolean $z0;

        $l2 := @parameter0: long;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $b3 = $l0 cmp $l1;

        $i4 = (int) $b3;

        if $i4 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,long,long)>($z0, "min (%s) must be less than or equal to max (%s)", $l0, $l1);

        $l2 = staticinvoke <java.lang.Math: long max(long,long)>($l2, $l0);

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l1);

        return $l2;
    }

    public static boolean contains(long[], long)
    {
        long[] $r0;
        byte $b3;
        int $i1, $i4;
        long $l0, $l2;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $i1 = lengthof $r0;

        $i4 = 0;

     label1:
        if $i4 >= $i1 goto label3;

        $l2 = $r0[$i4];

        $b3 = $l2 cmp $l0;

        if $b3 != 0 goto label2;

        return 1;

     label2:
        $i4 = $i4 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static long[] ensureCapacity(long[], int, int)
    {
        long[] $r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        $r0 := @parameter0: long[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $z0 = 1;

        if $i1 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z1, "Invalid minLength: %s", $i1);

        if $i0 < 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "Invalid padding: %s", $i0);

        $i2 = lengthof $r0;

        if $i2 >= $i1 goto label5;

        $i1 = $i1 + $i0;

        $r0 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r0, $i1);

     label5:
        return $r0;
    }

    public static long fromByteArray(byte[])
    {
        byte[] $r0;
        long $l9;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        if $i0 < 8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)>($z0, "array too small: %s < %s", $i0, 8);

        $b1 = $r0[0];

        $b2 = $r0[1];

        $b3 = $r0[2];

        $b4 = $r0[3];

        $b5 = $r0[4];

        $b6 = $r0[5];

        $b7 = $r0[6];

        $b8 = $r0[7];

        $l9 = staticinvoke <com.google.common.primitives.Longs: long fromBytes(byte,byte,byte,byte,byte,byte,byte,byte)>($b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8);

        return $l9;
    }

    public static long fromBytes(byte, byte, byte, byte, byte, byte, byte, byte)
    {
        long $l8, $l9;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;

        $b5 := @parameter0: byte;

        $b0 := @parameter1: byte;

        $b6 := @parameter2: byte;

        $b1 := @parameter3: byte;

        $b7 := @parameter4: byte;

        $b2 := @parameter5: byte;

        $b3 := @parameter6: byte;

        $b4 := @parameter7: byte;

        $l8 = (long) $b5;

        $l8 = $l8 & 255L;

        $l8 = $l8 << 56;

        $l9 = (long) $b0;

        $l9 = $l9 & 255L;

        $l9 = $l9 << 48;

        $l8 = $l9 | $l8;

        $l9 = (long) $b6;

        $l9 = $l9 & 255L;

        $l9 = $l9 << 40;

        $l8 = $l8 | $l9;

        $l9 = (long) $b1;

        $l9 = $l9 & 255L;

        $l9 = $l9 << 32;

        $l8 = $l8 | $l9;

        $l9 = (long) $b7;

        $l9 = $l9 & 255L;

        $l9 = $l9 << 24;

        $l8 = $l8 | $l9;

        $l9 = (long) $b2;

        $l9 = $l9 & 255L;

        $l9 = $l9 << 16;

        $l8 = $l8 | $l9;

        $l9 = (long) $b3;

        $l9 = $l9 & 255L;

        $l9 = $l9 << 8;

        $l8 = $l8 | $l9;

        $l9 = (long) $b4;

        $l9 = $l9 & 255L;

        $l8 = $l8 | $l9;

        return $l8;
    }

    public static int hashCode(long)
    {
        int $i0;
        long $l1, $l2;

        $l1 := @parameter0: long;

        $l2 = $l1 >>> 32;

        $l1 = $l1 ^ $l2;

        $i0 = (int) $l1;

        return $i0;
    }

    public static int indexOf(long[], long)
    {
        int $i1;
        long $l0;
        long[] $r0;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $i1 = lengthof $r0;

        $i1 = staticinvoke <com.google.common.primitives.Longs: int indexOf(long[],long,int,int)>($r0, $l0, 0, $i1);

        return $i1;
    }

    public static int indexOf(long[], long, int, int)
    {
        long[] $r0;
        byte $b3;
        int $i1, $i4;
        long $l0, $l2;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $i4 := @parameter2: int;

        $i1 := @parameter3: int;

     label1:
        if $i4 >= $i1 goto label3;

        $l2 = $r0[$i4];

        $b3 = $l2 cmp $l0;

        if $b3 != 0 goto label2;

        return $i4;

     label2:
        $i4 = $i4 + 1;

        goto label1;

     label3:
        $i4 = -1;

        return $i4;
    }

    public static int indexOf(long[], long[])
    {
        long $l0, $l5;
        long[] $r0, $r1;
        byte $b1;
        int $i2, $i3, $i4;

        $r1 := @parameter0: long[];

        $r0 := @parameter1: long[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "array");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r0, "target");

        $i2 = lengthof $r0;

        if $i2 != 0 goto label1;

        return 0;

     label1:
        $i2 = 0;

     label2:
        $i3 = lengthof $r1;

        $i4 = lengthof $r0;

        $i3 = $i3 - $i4;

        $i3 = $i3 + 1;

        if $i2 >= $i3 goto label6;

        $i3 = 0;

     label3:
        $i4 = lengthof $r0;

        if $i3 >= $i4 goto label5;

        $i4 = $i2 + $i3;

        $l5 = $r1[$i4];

        $l0 = $r0[$i3];

        $b1 = $l5 cmp $l0;

        if $b1 == 0 goto label4;

        $i2 = $i2 + 1;

        goto label2;

     label4:
        $i3 = $i3 + 1;

        goto label3;

     label5:
        return $i2;

     label6:
        $i2 = -1;

        return $i2;
    }

    public static transient java.lang.String join(java.lang.String, long[])
    {
        long[] $r0;
        int $i0, $i2;
        java.lang.StringBuilder $r2;
        long $l1;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: long[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        $i0 = lengthof $r0;

        $i0 = $i0 * 10;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        $l1 = $r0[0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $i0 = 1;

     label2:
        $i2 = lengthof $r0;

        if $i0 >= $i2 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $l1 = $r0[$i0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static int lastIndexOf(long[], long)
    {
        int $i1;
        long $l0;
        long[] $r0;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $i1 = lengthof $r0;

        $i1 = staticinvoke <com.google.common.primitives.Longs: int lastIndexOf(long[],long,int,int)>($r0, $l0, 0, $i1);

        return $i1;
    }

    public static int lastIndexOf(long[], long, int, int)
    {
        long[] $r0;
        byte $b3;
        int $i1, $i4, $i5;
        long $l0, $l2;

        $r0 := @parameter0: long[];

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $i4 := @parameter3: int;

        $i5 = -1;

        $i4 = $i4 + $i5;

     label1:
        if $i4 < $i1 goto label3;

        $l2 = $r0[$i4];

        $b3 = $l2 cmp $l0;

        if $b3 != 0 goto label2;

        return $i4;

     label2:
        $i5 = -1;

        $i4 = $i4 + $i5;

        goto label1;

     label3:
        $i1 = -1;

        return $i1;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.google.common.primitives.Longs$LexicographicalComparator r0;

        r0 = <com.google.common.primitives.Longs$LexicographicalComparator: com.google.common.primitives.Longs$LexicographicalComparator INSTANCE>;

        return r0;
    }

    public static transient long max(long[])
    {
        long[] $r0;
        byte $b0;
        int $i1, $i2;
        long $l3, $l4;
        boolean $z0;

        $r0 := @parameter0: long[];

        $i1 = lengthof $r0;

        $i2 = 1;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $l3 = $r0[0];

     label3:
        $i1 = lengthof $r0;

        if $i2 >= $i1 goto label5;

        $l4 = $r0[$i2];

        $b0 = $l4 cmp $l3;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label4;

        $l3 = $r0[$i2];

     label4:
        $i2 = $i2 + 1;

        goto label3;

     label5:
        return $l3;
    }

    public static transient long min(long[])
    {
        long[] $r0;
        byte $b0;
        int $i1, $i2;
        long $l3, $l4;
        boolean $z0;

        $r0 := @parameter0: long[];

        $i1 = lengthof $r0;

        $i2 = 1;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $l3 = $r0[0];

     label3:
        $i1 = lengthof $r0;

        if $i2 >= $i1 goto label5;

        $l4 = $r0[$i2];

        $b0 = $l4 cmp $l3;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label4;

        $l3 = $r0[$i2];

     label4:
        $i2 = $i2 + 1;

        goto label3;

     label5:
        return $l3;
    }

    public static void reverse(long[])
    {
        int $i0;
        long[] $r0;

        $r0 := @parameter0: long[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.Longs: void reverse(long[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void reverse(long[], int, int)
    {
        long[] $r0;
        int $i1, $i2, $i3;
        long $l0, $l4;

        $r0 := @parameter0: long[];

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i3 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i1, $i2, $i3);

        $i3 = -1;

        $i2 = $i2 + $i3;

     label1:
        if $i1 >= $i2 goto label2;

        $l4 = $r0[$i1];

        $l0 = $r0[$i2];

        $r0[$i1] = $l0;

        $r0[$i2] = $l4;

        $i1 = $i1 + 1;

        $i3 = -1;

        $i2 = $i2 + $i3;

        goto label1;

     label2:
        return;
    }

    public static void sortDescending(long[])
    {
        int $i0;
        long[] $r0;

        $r0 := @parameter0: long[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.primitives.Longs: void sortDescending(long[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void sortDescending(long[], int, int)
    {
        long[] $r0;
        int $i0, $i1, $i2;

        $r0 := @parameter0: long[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $i2 = lengthof $r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i1, $i2);

        staticinvoke <java.util.Arrays: void sort(long[],int,int)>($r0, $i0, $i1);

        staticinvoke <com.google.common.primitives.Longs: void reverse(long[],int,int)>($r0, $i0, $i1);

        return;
    }

    public static com.google.common.base.Converter stringConverter()
    {
        com.google.common.primitives.Longs$LongConverter r0;

        r0 = <com.google.common.primitives.Longs$LongConverter: com.google.common.primitives.Longs$LongConverter INSTANCE>;

        return r0;
    }

    public static long[] toArray(java.util.Collection)
    {
        java.lang.Object[] $r3;
        java.util.Collection $r1;
        long $l2;
        long[] $r0;
        com.google.common.primitives.Longs$LongArrayAsList $r2;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.Number $r5;
        boolean $z0;

        $r1 := @parameter0: java.util.Collection;

        $z0 = $r1 instanceof com.google.common.primitives.Longs$LongArrayAsList;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.primitives.Longs$LongArrayAsList) $r1;

        $r0 = virtualinvoke $r2.<com.google.common.primitives.Longs$LongArrayAsList: long[] toLongArray()>();

        return $r0;

     label1:
        $r3 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $i0 = lengthof $r3;

        $r0 = newarray (long)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r4 = $r3[$i1];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r5 = (java.lang.Number) $r4;

        $l2 = virtualinvoke $r5.<java.lang.Number: long longValue()>();

        $r0[$i1] = $l2;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r0;
    }

    public static byte[] toByteArray(long)
    {
        byte[] $r0;
        byte $b4;
        int $i0, $i2;
        long $l1, $l3;

        $l1 := @parameter0: long;

        $r0 = newarray (byte)[8];

        $i2 = 7;

     label1:
        if $i2 < 0 goto label2;

        $l3 = 255L & $l1;

        $i0 = (int) $l3;

        $b4 = (byte) $i0;

        $r0[$i2] = $b4;

        $l1 = $l1 >> 8;

        $i0 = -1;

        $i2 = $i2 + $i0;

        goto label1;

     label2:
        return $r0;
    }

    public static java.lang.Long tryParse(java.lang.String)
    {
        java.lang.String $r1;
        java.lang.Long $r0;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.google.common.primitives.Longs: java.lang.Long tryParse(java.lang.String,int)>($r1, 10);

        return $r0;
    }

    public static java.lang.Long tryParse(java.lang.String, int)
    {
        long $l1, $l2, $l3, $l9, $l10;
        byte $b4, $b8;
        java.lang.Long $r2;
        int $i0, $i6, $i7, $i11;
        java.lang.String $r0, $r1;
        boolean $z0;
        char $c5;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r3, $r4;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = $r0;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return null;

     label01:
        if $i0 < 2 goto label13;

        if $i0 > 36 goto label13;

        $b4 = 0;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $i6 = (int) $c5;

        if $i6 != 45 goto label02;

        $b4 = 1;

     label02:
        $i6 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $b4 != $i6 goto label03;

        return null;

     label03:
        $i6 = $b4 + 1;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($b4);

        $i7 = staticinvoke <com.google.common.primitives.Longs$AsciiDigits: int digit(char)>($c5);

        if $i7 < 0 goto label12;

        if $i7 < $i0 goto label04;

        return null;

     label04:
        $i7 = neg $i7;

        $l3 = (long) $i7;

        $l1 = (long) $i0;

        $l2 = -9223372036854775808L / $l1;

     label05:
        $i7 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i6 >= $i7 goto label09;

        $i7 = $i6 + 1;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i6);

        $i6 = staticinvoke <com.google.common.primitives.Longs$AsciiDigits: int digit(char)>($c5);

        if $i6 < 0 goto label08;

        if $i6 >= $i0 goto label15;

        $b8 = $l3 cmp $l2;

        $i11 = (int) $b8;

        if $i11 >= 0 goto label06;

        return null;

     label06:
        $l9 = $l3 * $l1;

        $l10 = (long) $i6;

        $l3 = $l10 + -9223372036854775808L;

        $b8 = $l9 cmp $l3;

        $i6 = (int) $b8;

        if $i6 >= 0 goto label07;

        return null;

     label07:
        $l3 = $l9 - $l10;

        $i6 = $i7;

        goto label05;

     label08:
        return null;

     label09:
        if $b4 == 0 goto label10;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        return $r2;

     label10:
        $b4 = $l3 cmp -9223372036854775808L;

        if $b4 != 0 goto label11;

        return null;

     label11:
        $l1 = neg $l3;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r2;

     label12:
        return null;

     label13:
        $r5 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        $r3 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("radix must be between MIN_RADIX and MAX_RADIX but was ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        goto label14;

     label14:
        throw $r5;

     label15:
        return null;
    }

    public static void <clinit>()
    {
        <com.google.common.primitives.Longs: long MAX_POWER_OF_TWO> = 4611686018427387904L;

        <com.google.common.primitives.Longs: int BYTES> = 8;

        return;
    }
}
