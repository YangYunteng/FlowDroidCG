public class org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator extends java.lang.Object
{
    public static final org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator instance;
    public final java.lang.reflect.Field enumMapTypeField;
    public final java.lang.reflect.Field enumSetTypeField;

    static void <clinit>()
    {
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator $r0;

        $r0 = new org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator;

        specialinvoke $r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: void <init>()>();

        <org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator instance> = $r0;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator r0;
        java.lang.reflect.Field $r1;

        r0 := @this: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field locateField(java.lang.Class,java.lang.String,java.lang.Class)>(class "Ljava/util/EnumSet;", "elementType", class "Ljava/lang/Class;");

        r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field enumSetTypeField> = $r1;

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field locateField(java.lang.Class,java.lang.String,java.lang.Class)>(class "Ljava/util/EnumMap;", "elementType", class "Ljava/lang/Class;");

        r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field enumMapTypeField> = $r1;

        return;
    }

    private java.lang.Object get(java.lang.Object, java.lang.reflect.Field)
    {
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator r0;
        java.lang.Object $r1;
        java.lang.reflect.Field $r2;
        java.lang.IllegalArgumentException $r4;
        java.lang.Exception $r3;

        r0 := @this: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.reflect.Field;

     label1:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r1);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.reflect.Field locateField(java.lang.Class, java.lang.String, java.lang.Class)
    {
        java.lang.Throwable $r1;
        java.lang.reflect.Field $r5, $r7;
        java.lang.reflect.Field[] $r4;
        int $i0, $i1, $i2;
        java.lang.Class $r0, $r2;
        java.lang.String $r3, $r6;
        boolean $z0;

        $r2 := @parameter0: java.lang.Class;

        $r3 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.Class;

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = lengthof $r4;

        $i1 = 0;

        $i2 = 0;

     label01:
        if $i2 >= $i0 goto label03;

        $r5 = $r4[$i2];

        $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label02;

        $r2 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.Class getType()>();

        if $r2 != $r0 goto label02;

        goto label04;

     label02:
        $i2 = $i2 + 1;

        goto label01;

     label03:
        $r5 = null;

     label04:
        if $r5 != null goto label08;

        $i0 = lengthof $r4;

     label05:
        if $i1 >= $i0 goto label08;

        $r7 = $r4[$i1];

        $r2 = virtualinvoke $r7.<java.lang.reflect.Field: java.lang.Class getType()>();

        if $r2 != $r0 goto label07;

        if $r5 == null goto label06;

        return null;

     label06:
        $r5 = $r7;

     label07:
        $i1 = $i1 + 1;

        goto label05;

     label08:
        if $r5 == null goto label12;

     label09:
        virtualinvoke $r5.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label10:
        return $r5;

     label11:
        $r1 := @caughtexception;

     label12:
        return $r5;

        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public java.lang.Class enumTypeFor(java.util.EnumMap)
    {
        java.lang.IllegalStateException $r5;
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator r0;
        java.util.EnumMap $r2;
        java.lang.Object $r1;
        java.lang.Class $r4;
        java.lang.reflect.Field $r3;

        r0 := @this: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator;

        $r2 := @parameter0: java.util.EnumMap;

        $r3 = r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field enumMapTypeField>;

        if $r3 == null goto label1;

        $r1 = specialinvoke r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.Object get(java.lang.Object,java.lang.reflect.Field)>($r2, $r3);

        $r4 = (java.lang.Class) $r1;

        return $r4;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can not figure out type for EnumMap (odd JDK platform?)");

        throw $r5;
    }

    public java.lang.Class enumTypeFor(java.util.EnumSet)
    {
        java.lang.IllegalStateException $r5;
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator r0;
        java.lang.Object $r1;
        java.lang.Class $r4;
        java.lang.reflect.Field $r3;
        java.util.EnumSet $r2;

        r0 := @this: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator;

        $r2 := @parameter0: java.util.EnumSet;

        $r3 = r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.reflect.Field enumSetTypeField>;

        if $r3 == null goto label1;

        $r1 = specialinvoke r0.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.Object get(java.lang.Object,java.lang.reflect.Field)>($r2, $r3);

        $r4 = (java.lang.Class) $r1;

        return $r4;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can not figure out type for EnumSet (odd JDK platform?)");

        throw $r5;
    }
}
