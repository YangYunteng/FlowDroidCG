public class com.google.android.material.shape.CutCornerTreatment extends com.google.android.material.shape.CornerTreatment
{
    public float size;

    public void <init>()
    {
        com.google.android.material.shape.CutCornerTreatment r0;

        r0 := @this: com.google.android.material.shape.CutCornerTreatment;

        specialinvoke r0.<com.google.android.material.shape.CornerTreatment: void <init>()>();

        r0.<com.google.android.material.shape.CutCornerTreatment: float size> = -1.0F;

        return;
    }

    public void <init>(float)
    {
        com.google.android.material.shape.CutCornerTreatment r0;
        float $f0;

        r0 := @this: com.google.android.material.shape.CutCornerTreatment;

        $f0 := @parameter0: float;

        specialinvoke r0.<com.google.android.material.shape.CornerTreatment: void <init>()>();

        r0.<com.google.android.material.shape.CutCornerTreatment: float size> = -1.0F;

        r0.<com.google.android.material.shape.CutCornerTreatment: float size> = $f0;

        return;
    }

    public void getCornerPath(com.google.android.material.shape.ShapePath, float, float, float)
    {
        com.google.android.material.shape.CutCornerTreatment r0;
        float $f0, $f1, $f2, $f3, $f4;
        com.google.android.material.shape.ShapePath $r1;
        double $d0, $d1, $d2;

        r0 := @this: com.google.android.material.shape.CutCornerTreatment;

        $r1 := @parameter0: com.google.android.material.shape.ShapePath;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $f0 := @parameter3: float;

        $f3 = $f0 * $f2;

        $f4 = 180.0F - $f1;

        virtualinvoke $r1.<com.google.android.material.shape.ShapePath: void reset(float,float,float,float)>(0.0F, $f3, 180.0F, $f4);

        $d0 = (double) $f1;

        $d0 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $d0 = (double) $f0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d2 = $d1 * $d0;

        $d1 = (double) $f2;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d2 = $d2 * $d1;

        $f2 = (float) $d2;

        $f1 = 90.0F - $f1;

        $d2 = (double) $f1;

        $d2 = staticinvoke <java.lang.Math: double toRadians(double)>($d2);

        $d2 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d2 * $d0;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 * $d1;

        $f1 = (float) $d0;

        virtualinvoke $r1.<com.google.android.material.shape.ShapePath: void lineTo(float,float)>($f2, $f1);

        return;
    }
}
