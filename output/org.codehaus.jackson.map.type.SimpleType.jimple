public final class org.codehaus.jackson.map.type.SimpleType extends org.codehaus.jackson.map.type.TypeBase
{
    public final java.lang.String[] _typeNames;
    public final org.codehaus.jackson.type.JavaType[] _typeParameters;

    public void <init>(java.lang.Class)
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.type.SimpleType r0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[])>($r1, null, null);

        return;
    }

    public void <init>(java.lang.Class, java.lang.String[], org.codehaus.jackson.type.JavaType[])
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        int $i0;
        java.lang.String[] $r1;
        java.lang.Class $r3;
        org.codehaus.jackson.type.JavaType[] $r2;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r3 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.String[];

        $r2 := @parameter2: org.codehaus.jackson.type.JavaType[];

        specialinvoke r0.<org.codehaus.jackson.map.type.TypeBase: void <init>(java.lang.Class,int)>($r3, 0);

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        goto label2;

     label1:
        r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames> = $r1;

        r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters> = $r2;

        return;

     label2:
        r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames> = null;

        r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters> = null;

        return;
    }

    public static org.codehaus.jackson.map.type.SimpleType construct(java.lang.Class)
    {
        org.codehaus.jackson.map.type.SimpleType $r2;
        java.lang.Class $r0, $r1;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $r1 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r0);

        if $z0 != 0 goto label3;

        $r1 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r0);

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r2 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r2.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>($r0);

        return $r2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not construct SimpleType for an array (class: ");

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not construct SimpleType for a Collection (class: ");

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not construct SimpleType for a Map (class: ");

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public static org.codehaus.jackson.map.type.SimpleType constructUnsafe(java.lang.Class)
    {
        java.lang.Class $r0;
        org.codehaus.jackson.map.type.SimpleType $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r1.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[])>($r0, null, null);

        return $r1;
    }

    public org.codehaus.jackson.type.JavaType _narrow(java.lang.Class)
    {
        org.codehaus.jackson.map.type.SimpleType r0, $r2;
        java.lang.Class $r1;
        java.lang.String[] $r3;
        org.codehaus.jackson.type.JavaType[] $r4;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 := @parameter0: java.lang.Class;

        $r2 = new org.codehaus.jackson.map.type.SimpleType;

        $r3 = r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames>;

        $r4 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        specialinvoke $r2.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[])>($r1, $r3, $r4);

        return $r2;
    }

    public java.lang.String buildCanonicalName()
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        org.codehaus.jackson.type.JavaType[] $r4;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r5;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        if $r4 == null goto label5;

        $i0 = lengthof $r4;

        if $i0 <= 0 goto label5;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        $r4 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        $i0 = lengthof $r4;

        $i1 = 0;

        $z0 = 1;

     label1:
        if $i1 >= $i0 goto label4;

        $r5 = $r4[$i1];

        if $z0 == 0 goto label2;

        $z0 = 0;

        goto label3;

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        $r3 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: java.lang.String toCanonical()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

     label5:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType containedType(int)
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.type.JavaType[] $r1;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $i1 := @parameter0: int;

        if $i1 < 0 goto label2;

        $r1 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        if $i1 < $i0 goto label1;

        goto label2;

     label1:
        $r2 = $r1[$i1];

        return $r2;

     label2:
        return null;
    }

    public int containedTypeCount()
    {
        int $i0;
        org.codehaus.jackson.type.JavaType[] $r1;
        org.codehaus.jackson.map.type.SimpleType r0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = lengthof $r1;

        return $i0;
    }

    public java.lang.String containedTypeName(int)
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        int $i0, $i1;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $i1 := @parameter0: int;

        if $i1 < 0 goto label2;

        $r1 = r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames>;

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        if $i1 < $i0 goto label1;

        goto label2;

     label1:
        $r2 = $r1[$i1];

        return $r2;

     label2:
        return null;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.map.type.SimpleType r0, $r4;
        org.codehaus.jackson.type.JavaType[] $r6, $r7;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r1, $r8;
        java.lang.Object $r2;
        java.lang.Class $r3, $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r2 := @parameter0: java.lang.Object;

        if $r2 != r0 goto label01;

        return 1;

     label01:
        if $r2 != null goto label02;

        return 0;

     label02:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == class "Lorg/codehaus/jackson/map/type/SimpleType;" goto label03;

        return 0;

     label03:
        $r4 = (org.codehaus.jackson.map.type.SimpleType) $r2;

        $r3 = $r4.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $r5 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        if $r3 == $r5 goto label04;

        return 0;

     label04:
        $r6 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        $r7 = $r4.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        if $r6 != null goto label06;

        if $r7 == null goto label11;

        $i0 = lengthof $r7;

        if $i0 != 0 goto label05;

        return 1;

     label05:
        return 0;

     label06:
        if $r7 != null goto label07;

        return 0;

     label07:
        $i0 = lengthof $r6;

        $i1 = lengthof $r7;

        if $i0 == $i1 goto label08;

        return 0;

     label08:
        $i0 = lengthof $r6;

        $i1 = 0;

     label09:
        if $i1 >= $i0 goto label11;

        $r8 = $r6[$i1];

        $r1 = $r7[$i1];

        $z0 = virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label10;

        return 0;

     label10:
        $i1 = $i1 + 1;

        goto label09;

     label11:
        return 1;
    }

    public java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder)
    {
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        org.codehaus.jackson.map.type.SimpleType r0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        staticinvoke <org.codehaus.jackson.map.type.TypeBase: java.lang.StringBuilder _classSignature(java.lang.Class,java.lang.StringBuilder,boolean)>($r2, $r1, 1);

        return $r1;
    }

    public java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)
    {
        org.codehaus.jackson.map.type.SimpleType r0;
        int $i0, $i1;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.StringBuilder $r2;
        java.lang.Class $r3;
        org.codehaus.jackson.type.JavaType[] $r4;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r2 := @parameter0: java.lang.StringBuilder;

        $r3 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $i1 = 0;

        staticinvoke <org.codehaus.jackson.map.type.TypeBase: java.lang.StringBuilder _classSignature(java.lang.Class,java.lang.StringBuilder,boolean)>($r3, $r2, 0);

        $r4 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        if $r4 == null goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        $r4 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        $i0 = lengthof $r4;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r4[$i1];

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        return $r2;
    }

    public boolean isContainerType()
    {
        org.codehaus.jackson.map.type.SimpleType r0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        return 0;
    }

    public org.codehaus.jackson.type.JavaType narrowContentsBy(java.lang.Class)
    {
        java.lang.Class $r1;
        java.lang.IllegalArgumentException $r2;
        org.codehaus.jackson.map.type.SimpleType r0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 := @parameter0: java.lang.Class;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal error: SimpleType.narrowContentsBy() should never be called");

        throw $r2;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.codehaus.jackson.map.type.SimpleType r0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(40);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[simple type, class ");

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.String buildCanonicalName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType widenContentsBy(java.lang.Class)
    {
        java.lang.Class $r1;
        java.lang.IllegalArgumentException $r2;
        org.codehaus.jackson.map.type.SimpleType r0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 := @parameter0: java.lang.Class;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal error: SimpleType.widenContentsBy() should never be called");

        throw $r2;
    }

    public org.codehaus.jackson.type.JavaType withContentTypeHandler(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.IllegalArgumentException $r2;
        org.codehaus.jackson.map.type.SimpleType r0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Simple types have no content types; can not call withContenTypeHandler()");

        throw $r2;
    }

    public org.codehaus.jackson.map.type.SimpleType withTypeHandler(java.lang.Object)
    {
        org.codehaus.jackson.map.type.SimpleType r0, $r2;
        java.lang.Object $r1;
        java.lang.Class $r3;
        java.lang.String[] $r4;
        org.codehaus.jackson.type.JavaType[] $r5;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new org.codehaus.jackson.map.type.SimpleType;

        $r3 = r0.<org.codehaus.jackson.type.JavaType: java.lang.Class _class>;

        $r4 = r0.<org.codehaus.jackson.map.type.SimpleType: java.lang.String[] _typeNames>;

        $r5 = r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.type.JavaType[] _typeParameters>;

        specialinvoke $r2.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class,java.lang.String[],org.codehaus.jackson.type.JavaType[])>($r3, $r4, $r5);

        $r2.<org.codehaus.jackson.type.JavaType: java.lang.Object _typeHandler> = $r1;

        return $r2;
    }

    public volatile org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)
    {
        java.lang.Object $r1;
        org.codehaus.jackson.map.type.SimpleType r0;

        r0 := @this: org.codehaus.jackson.map.type.SimpleType;

        $r1 := @parameter0: java.lang.Object;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.type.SimpleType: org.codehaus.jackson.map.type.SimpleType withTypeHandler(java.lang.Object)>($r1);

        return r0;
    }
}
