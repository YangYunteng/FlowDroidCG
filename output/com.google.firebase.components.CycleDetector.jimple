public class com.google.firebase.components.CycleDetector extends java.lang.Object
{

    public void <init>()
    {
        com.google.firebase.components.CycleDetector r0;

        r0 := @this: com.google.firebase.components.CycleDetector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void detect(java.util.List)
    {
        java.util.Iterator $r3;
        com.google.firebase.components.CycleDetector$ComponentNode $r5, $r7;
        java.util.Set $r1, $r2, $r6;
        java.util.ArrayList $r8;
        com.google.firebase.components.Component $r9;
        java.util.List $r0;
        com.google.firebase.components.DependencyCycleException $r10;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <com.google.firebase.components.CycleDetector: java.util.Set toGraph(java.util.List)>($r0);

        $r2 = staticinvoke <com.google.firebase.components.CycleDetector: java.util.Set getRoots(java.util.Set)>($r1);

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.firebase.components.CycleDetector$ComponentNode) $r4;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r5);

        $i0 = $i0 + 1;

        $r6 = virtualinvoke $r5.<com.google.firebase.components.CycleDetector$ComponentNode: java.util.Set getDependencies()>();

        $r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.google.firebase.components.CycleDetector$ComponentNode) $r4;

        virtualinvoke $r7.<com.google.firebase.components.CycleDetector$ComponentNode: void removeDependent(com.google.firebase.components.CycleDetector$ComponentNode)>($r5);

        $z0 = virtualinvoke $r7.<com.google.firebase.components.CycleDetector$ComponentNode: boolean isRoot()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 != $i1 goto label4;

        return;

     label4:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.firebase.components.CycleDetector$ComponentNode) $r4;

        $z0 = virtualinvoke $r5.<com.google.firebase.components.CycleDetector$ComponentNode: boolean isRoot()>();

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke $r5.<com.google.firebase.components.CycleDetector$ComponentNode: boolean isLeaf()>();

        if $z0 != 0 goto label5;

        $r9 = virtualinvoke $r5.<com.google.firebase.components.CycleDetector$ComponentNode: com.google.firebase.components.Component getComponent()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label5;

     label6:
        $r10 = new com.google.firebase.components.DependencyCycleException;

        specialinvoke $r10.<com.google.firebase.components.DependencyCycleException: void <init>(java.util.List)>($r8);

        goto label7;

     label7:
        throw $r10;
    }

    public static java.util.Set getRoots(java.util.Set)
    {
        java.util.HashSet $r0;
        java.util.Iterator $r2;
        com.google.firebase.components.CycleDetector$ComponentNode $r4;
        java.util.Set $r1;
        java.lang.Object $r3;
        boolean $z0;

        $r1 := @parameter0: java.util.Set;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.firebase.components.CycleDetector$ComponentNode) $r3;

        $z0 = virtualinvoke $r4.<com.google.firebase.components.CycleDetector$ComponentNode: boolean isRoot()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.Set toGraph(java.util.List)
    {
        java.lang.Object[] $r12;
        com.google.firebase.components.CycleDetector$ComponentNode $r5, $r18;
        java.util.HashMap $r1;
        java.util.HashSet $r10;
        com.google.firebase.components.Component $r4;
        com.google.firebase.components.Dependency $r16;
        int $i0;
        java.lang.String $r13;
        boolean $z0;
        com.google.firebase.components.CycleDetector$Dep $r9;
        java.util.Iterator $r2, $r7, $r15, $r17;
        java.util.Collection $r14;
        java.util.Set $r6;
        java.lang.IllegalArgumentException $r11;
        java.util.List $r0;
        java.lang.Object $r3;
        java.lang.Class $r8;

        $r0 := @parameter0: java.util.List;

        $r1 = new java.util.HashMap;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i0);

        $r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.google.firebase.components.Component) $r3;

        $r5 = new com.google.firebase.components.CycleDetector$ComponentNode;

        specialinvoke $r5.<com.google.firebase.components.CycleDetector$ComponentNode: void <init>(com.google.firebase.components.Component)>($r4);

        $r6 = virtualinvoke $r4.<com.google.firebase.components.Component: java.util.Set getProvidedInterfaces()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label01;

        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Class) $r3;

        $r9 = new com.google.firebase.components.CycleDetector$Dep;

        $z0 = virtualinvoke $r4.<com.google.firebase.components.Component: boolean isValue()>();

        $z0 = $z0 ^ 1;

        specialinvoke $r9.<com.google.firebase.components.CycleDetector$Dep: void <init>(java.lang.Class,boolean,com.google.firebase.components.CycleDetector$1)>($r8, $z0, null);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        if $z0 != 0 goto label03;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

     label03:
        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r6 = (java.util.Set) $r3;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label05;

        $z0 = staticinvoke <com.google.firebase.components.CycleDetector$Dep: boolean access$100(com.google.firebase.components.CycleDetector$Dep)>($r9);

        if $z0 == 0 goto label04;

        goto label05;

     label04:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = $r8;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Multiple components provide %s.", $r12);

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r11;

     label05:
        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label02;

     label06:
        $r14 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r2 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Set) $r3;

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.google.firebase.components.CycleDetector$ComponentNode) $r3;

        $r4 = virtualinvoke $r5.<com.google.firebase.components.CycleDetector$ComponentNode: com.google.firebase.components.Component getComponent()>();

        $r6 = virtualinvoke $r4.<com.google.firebase.components.Component: java.util.Set getDependencies()>();

        $r15 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r3 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (com.google.firebase.components.Dependency) $r3;

        $z0 = virtualinvoke $r16.<com.google.firebase.components.Dependency: boolean isDirectInjection()>();

        if $z0 != 0 goto label10;

        goto label09;

     label10:
        $r9 = new com.google.firebase.components.CycleDetector$Dep;

        $r8 = virtualinvoke $r16.<com.google.firebase.components.Dependency: java.lang.Class getInterface()>();

        $z0 = virtualinvoke $r16.<com.google.firebase.components.Dependency: boolean isSet()>();

        specialinvoke $r9.<com.google.firebase.components.CycleDetector$Dep: void <init>(java.lang.Class,boolean,com.google.firebase.components.CycleDetector$1)>($r8, $z0, null);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r6 = (java.util.Set) $r3;

        if $r6 != null goto label11;

        goto label09;

     label11:
        $r17 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r3 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (com.google.firebase.components.CycleDetector$ComponentNode) $r3;

        virtualinvoke $r5.<com.google.firebase.components.CycleDetector$ComponentNode: void addDependency(com.google.firebase.components.CycleDetector$ComponentNode)>($r18);

        virtualinvoke $r18.<com.google.firebase.components.CycleDetector$ComponentNode: void addDependent(com.google.firebase.components.CycleDetector$ComponentNode)>($r5);

        goto label12;

     label13:
        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        $r14 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r2 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Set) $r3;

        virtualinvoke $r10.<java.util.HashSet: boolean addAll(java.util.Collection)>($r6);

        goto label14;

     label15:
        return $r10;
    }
}
